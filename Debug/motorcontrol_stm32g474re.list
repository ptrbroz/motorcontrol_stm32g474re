
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011eb4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d0  08012098  08012098  00022098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013668  08013668  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08013668  08013668  00023668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013670  08013670  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013670  08013670  00023670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013674  08013674  00023674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08013678  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009390  20000208  0801387c  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009598  0801387c  00039598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000307c0  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052b4  00000000  00000000  000609f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00065ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00067a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d887  00000000  00000000  000695f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024095  00000000  00000000  00096e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b130  00000000  00000000  000baf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d6044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009480  00000000  00000000  001d6098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801207c 	.word	0x0801207c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0801207c 	.word	0x0801207c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fbef 	bl	800d838 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <MX_ADC1_Init+0xe8>)
 800105c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <MX_ADC1_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001084:	2204      	movs	r2, #4
 8001086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001096:	2201      	movs	r2, #1
 8001098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010c6:	f005 f857 	bl	8006178 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d0:	f003 fc72 	bl	80049b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010e0:	f006 f8cc 	bl	800727c <HAL_ADCEx_MultiModeConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ea:	f003 fc65 	bl	80049b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_ADC1_Init+0xec>)
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2306      	movs	r3, #6
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fa:	237f      	movs	r3, #127	; 0x7f
 80010fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC1_Init+0xe8>)
 800110c:	f005 fbee 	bl	80068ec <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001116:	f003 fc4f 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002a0 	.word	0x200002a0
 8001128:	19200040 	.word	0x19200040

0800112c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00c fb7d 	bl	800d838 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001140:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <MX_ADC2_Init+0xc4>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC2_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001166:	2204      	movs	r2, #4
 8001168:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001178:	2201      	movs	r2, #1
 800117a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_ADC2_Init+0xc0>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a8:	f004 ffe6 	bl	8006178 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011b2:	f003 fc01 	bl	80049b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_ADC2_Init+0xc8>)
 80011b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2306      	movs	r3, #6
 80011bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c2:	237f      	movs	r3, #127	; 0x7f
 80011c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c6:	2304      	movs	r3, #4
 80011c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011d4:	f005 fb8a 	bl	80068ec <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011de:	f003 fbeb 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000234 	.word	0x20000234
 80011f0:	50000100 	.word	0x50000100
 80011f4:	1d500080 	.word	0x1d500080

080011f8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00c fb11 	bl	800d838 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001218:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <MX_ADC3_Init+0xe8>)
 800121a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <MX_ADC3_Init+0xe4>)
 800121e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001222:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_ADC3_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_ADC3_Init+0xe4>)
 800123e:	2204      	movs	r2, #4
 8001240:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_ADC3_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001250:	2201      	movs	r2, #1
 8001252:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_ADC3_Init+0xe4>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001272:	2200      	movs	r2, #0
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001280:	f004 ff7a 	bl	8006178 <HAL_ADC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800128a:	f003 fb95 	bl	80049b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_ADC3_Init+0xe4>)
 800129a:	f005 ffef 	bl	800727c <HAL_ADCEx_MultiModeConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f003 fb88 	bl	80049b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_ADC3_Init+0xec>)
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ac:	2306      	movs	r3, #6
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b4:	237f      	movs	r3, #127	; 0x7f
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b8:	2304      	movs	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_ADC3_Init+0xe4>)
 80012c6:	f005 fb11 	bl	80068ec <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012d0:	f003 fb72 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000030c 	.word	0x2000030c
 80012e0:	50000400 	.word	0x50000400
 80012e4:	32601000 	.word	0x32601000

080012e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001308:	d12d      	bne.n	8001366 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001312:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001314:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10b      	bne.n	8001334 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_ADC_MspInit+0x144>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a42      	ldr	r2, [pc, #264]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_ADC_MspInit+0x144>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_ADC_MspInit+0x144>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134c:	2301      	movs	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4834      	ldr	r0, [pc, #208]	; (8001430 <HAL_ADC_MspInit+0x148>)
 8001360:	f007 fa58 	bl	8008814 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001364:	e05b      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_ADC_MspInit+0x14c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d12d      	bne.n	80013cc <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d10b      	bne.n	800139a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_ADC_MspInit+0x144>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b2:	2302      	movs	r3, #2
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <HAL_ADC_MspInit+0x148>)
 80013c6:	f007 fa25 	bl	8008814 <HAL_GPIO_Init>
}
 80013ca:	e028      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_ADC_MspInit+0x150>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d123      	bne.n	800141e <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <HAL_ADC_MspInit+0x154>)
 800141a:	f007 f9fb 	bl	8008814 <HAL_GPIO_Init>
}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	; 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000224 	.word	0x20000224
 800142c:	40021000 	.word	0x40021000
 8001430:	48000800 	.word	0x48000800
 8001434:	50000100 	.word	0x50000100
 8001438:	50000400 	.word	0x50000400
 800143c:	48000400 	.word	0x48000400

08001440 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800144e:	4b76      	ldr	r3, [pc, #472]	; (8001628 <order_phases+0x1e8>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7c1b      	ldrb	r3, [r3, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d108      	bne.n	800146e <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 800145c:	4873      	ldr	r0, [pc, #460]	; (800162c <order_phases+0x1ec>)
 800145e:	f00c fee3 	bl	800e228 <puts>
		cal->started = 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001630 <order_phases+0x1f0>
 8001482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d528      	bpl.n	80014f2 <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80014b2:	3388      	adds	r3, #136	; 0x88
 80014b4:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80014bc:	3390      	adds	r3, #144	; 0x90
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80014c4:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <order_phases+0x1f4>)
 80014c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80014de:	332c      	adds	r3, #44	; 0x2c
 80014e0:	4619      	mov	r1, r3
 80014e2:	68b8      	ldr	r0, [r7, #8]
 80014e4:	f001 fd64 	bl	8002fb0 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
    	return;
 80014f0:	e096      	b.n	8001620 <order_phases+0x1e0>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001638 <order_phases+0x1f8>
 80014fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	d51d      	bpl.n	8001542 <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	edd3 7a05 	vldr	s15, [r3, #20]
 800150c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001514:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800152c:	3388      	adds	r3, #136	; 0x88
 800152e:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001536:	332c      	adds	r3, #44	; 0x2c
 8001538:	4619      	mov	r1, r3
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f001 fd38 	bl	8002fb0 <commutate>
    	return;
 8001540:	e06e      	b.n	8001620 <order_phases+0x1e0>
    }

	reset_foc(controller);
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f001 fc4a 	bl	8002ddc <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edd3 7a06 	vldr	s15, [r3, #24]
 8001554:	ed97 7a05 	vldr	s14, [r7, #20]
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	eef0 7ae7 	vabs.f32	s15, s15
 8001560:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800163c <order_phases+0x1fc>
 8001564:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001568:	ee16 0a90 	vmov	r0, s13
 800156c:	f7ff f814 	bl	8000598 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	ec43 2b10 	vmov	d0, r2, r3
 8001578:	f010 fa3c 	bl	80119f4 <round>
 800157c:	ec53 2b10 	vmov	r2, r3, d0
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb38 	bl	8000bf8 <__aeabi_d2uiz>
 8001588:	4603      	mov	r3, r0
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	edd3 7a06 	vldr	s15, [r3, #24]
 8001596:	ed97 7a05 	vldr	s14, [r7, #20]
 800159a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	dd07      	ble.n	80015b4 <order_phases+0x174>
		cal->phase_order = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <order_phases+0x200>)
 80015ae:	f00c fe3b 	bl	800e228 <puts>
 80015b2:	e006      	b.n	80015c2 <order_phases+0x182>
	}
	else{
		cal->phase_order = 1;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <order_phases+0x204>)
 80015be:	f00c fe33 	bl	800e228 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <order_phases+0x208>)
 80015ca:	f00c fda7 	bl	800e11c <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffe0 	bl	8000598 <__aeabi_f2d>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f7fe ffdb 	bl	8000598 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9cd 2300 	strd	r2, r3, [sp]
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
 80015ee:	4817      	ldr	r0, [pc, #92]	; (800164c <order_phases+0x20c>)
 80015f0:	f00c fd94 	bl	800e11c <iprintf>
    PHASE_ORDER = cal->phase_order;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <order_phases+0x1e8>)
 80015fe:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <order_phases+0x1f4>)
 800160e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	20008f34 	.word	0x20008f34
 800162c:	08012098 	.word	0x08012098
 8001630:	37d1b717 	.word	0x37d1b717
 8001634:	20000684 	.word	0x20000684
 8001638:	3fd06cbe 	.word	0x3fd06cbe
 800163c:	40c90fdb 	.word	0x40c90fdb
 8001640:	080120bc 	.word	0x080120bc
 8001644:	080120d4 	.word	0x080120d4
 8001648:	080120ec 	.word	0x080120ec
 800164c:	08012100 	.word	0x08012100

08001650 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7c1b      	ldrb	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8001666:	489e      	ldr	r0, [pc, #632]	; (80018e0 <calibrate_encoder+0x290>)
 8001668:	f00c fdde 	bl	800e228 <puts>
			cal->started = 1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80018e4 <calibrate_encoder+0x294>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d525      	bpl.n	8001704 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016ca:	3388      	adds	r3, #136	; 0x88
 80016cc:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80016ce:	4b86      	ldr	r3, [pc, #536]	; (80018e8 <calibrate_encoder+0x298>)
 80016d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016e8:	332c      	adds	r3, #44	; 0x2c
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f001 fc5f 	bl	8002fb0 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001702:	e259      	b.n	8001bb8 <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	ed93 7a05 	vldr	s14, [r3, #20]
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <calibrate_encoder+0x298>)
 800170c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001710:	eddf 6a76 	vldr	s13, [pc, #472]	; 80018ec <calibrate_encoder+0x29c>
 8001714:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001718:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800171c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	f140 808f 	bpl.w	8001852 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a02 	vldr	s15, [r3, #8]
 800173a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80018f0 <calibrate_encoder+0x2a0>
 800173e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001752:	3388      	adds	r3, #136	; 0x88
 8001754:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800175c:	332c      	adds	r3, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f001 fc25 	bl	8002fb0 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	ed93 7a05 	vldr	s14, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dc00      	bgt.n	800177e <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 800177c:	e21c      	b.n	8001bb8 <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	edd3 7a02 	vldr	s15, [r3, #8]
 8001784:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001904 <calibrate_encoder+0x2b4>
 8001788:	ee67 6a87 	vmul.f32	s13, s15, s14
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <calibrate_encoder+0x298>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80018ec <calibrate_encoder+0x29c>
 8001796:	ee27 7a87 	vmul.f32	s14, s15, s14
 800179a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	13db      	asrs	r3, r3, #15
 80017b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	4618      	mov	r0, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	441a      	add	r2, r3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	f100 030a 	add.w	r3, r0, #10
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017d4:	461d      	mov	r5, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	330a      	adds	r3, #10
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	685c      	ldr	r4, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fed5 	bl	8000598 <__aeabi_f2d>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9cd 2300 	strd	r2, r3, [sp]
 80017f6:	4623      	mov	r3, r4
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4629      	mov	r1, r5
 80017fc:	483d      	ldr	r0, [pc, #244]	; (80018f4 <calibrate_encoder+0x2a4>)
 80017fe:	f00c fc8d 	bl	800e11c <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001808:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80018f8 <calibrate_encoder+0x2a8>
 800180c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <calibrate_encoder+0x298>)
 8001824:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001828:	eddf 6a34 	vldr	s13, [pc, #208]	; 80018fc <calibrate_encoder+0x2ac>
 800182c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001834:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001838:	eeb4 7a67 	vcmp.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	f000 81b7 	beq.w	8001bb2 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001850:	e1b2      	b.n	8001bb8 <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	ed93 7a05 	vldr	s14, [r3, #20]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <calibrate_encoder+0x298>)
 800185a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800185e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001900 <calibrate_encoder+0x2b0>
 8001862:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001866:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800186a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800186e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	f140 80a9 	bpl.w	80019d4 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a02 	vldr	s15, [r3, #8]
 8001888:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80018f0 <calibrate_encoder+0x2a0>
 800188c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <calibrate_encoder+0x298>)
 8001898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80018b4:	3388      	adds	r3, #136	; 0x88
 80018b6:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80018be:	332c      	adds	r3, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f001 fb74 	bl	8002fb0 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	dc14      	bgt.n	8001908 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 80018de:	e16a      	b.n	8001bb6 <calibrate_encoder+0x566>
 80018e0:	0801211c 	.word	0x0801211c
 80018e4:	37d1b717 	.word	0x37d1b717
 80018e8:	20000684 	.word	0x20000684
 80018ec:	40c90fdb 	.word	0x40c90fdb
 80018f0:	3983126e 	.word	0x3983126e
 80018f4:	08012144 	.word	0x08012144
 80018f8:	3ba0d97c 	.word	0x3ba0d97c
 80018fc:	43000000 	.word	0x43000000
 8001900:	41490fdb 	.word	0x41490fdb
 8001904:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8152 	beq.w	8001bb6 <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edd3 7a02 	vldr	s15, [r3, #8]
 8001918:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001904 <calibrate_encoder+0x2b4>
 800191c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001920:	4ba7      	ldr	r3, [pc, #668]	; (8001bc0 <calibrate_encoder+0x570>)
 8001922:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001926:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001bc4 <calibrate_encoder+0x574>
 800192a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800192e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001936:	ee17 3a90 	vmov	r3, s15
 800193a:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	13db      	asrs	r3, r3, #15
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	330a      	adds	r3, #10
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800196a:	4610      	mov	r0, r2
 800196c:	0fda      	lsrs	r2, r3, #31
 800196e:	4413      	add	r3, r2
 8001970:	105b      	asrs	r3, r3, #1
 8001972:	4619      	mov	r1, r3
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f100 030a 	add.w	r3, r0, #10
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001984:	461d      	mov	r5, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	330a      	adds	r3, #10
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	685c      	ldr	r4, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdfd 	bl	8000598 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9cd 2300 	strd	r2, r3, [sp]
 80019a6:	4623      	mov	r3, r4
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	4629      	mov	r1, r5
 80019ac:	4886      	ldr	r0, [pc, #536]	; (8001bc8 <calibrate_encoder+0x578>)
 80019ae:	f00c fbb5 	bl	800e11c <iprintf>
			cal->sample_count--;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019c4:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001bcc <calibrate_encoder+0x57c>
 80019c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 80019d2:	e0f0      	b.n	8001bb6 <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 80019d4:	68b8      	ldr	r0, [r7, #8]
 80019d6:	f001 fa01 	bl	8002ddc <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019de:	2300      	movs	r3, #0
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
 80019e2:	e00b      	b.n	80019fc <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e8:	330a      	adds	r3, #10
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f2:	4413      	add	r3, r2
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f8:	3301      	adds	r3, #1
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
 80019fc:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <calibrate_encoder+0x570>)
 80019fe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	01db      	lsls	r3, r3, #7
 8001a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dbe8      	blt.n	80019e4 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <calibrate_encoder+0x570>)
 8001a1e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a22:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001bd0 <calibrate_encoder+0x580>
 8001a26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a32:	ee17 2a90 	vmov	r2, s15
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da01      	bge.n	8001a4e <calibrate_encoder+0x3fe>
 8001a4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a4e:	125b      	asrs	r3, r3, #9
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001a52:	2300      	movs	r3, #0
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a56:	e0a0      	b.n	8001b9a <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	0fda      	lsrs	r2, r3, #31
 8001a60:	4413      	add	r3, r2
 8001a62:	105b      	asrs	r3, r3, #1
 8001a64:	425b      	negs	r3, r3
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
 8001a68:	e068      	b.n	8001b3c <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a74:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <calibrate_encoder+0x570>)
 8001a76:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001bd0 <calibrate_encoder+0x580>
 8001a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a86:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001bd0 <calibrate_encoder+0x580>
 8001a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da13      	bge.n	8001ad4 <calibrate_encoder+0x484>
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <calibrate_encoder+0x570>)
 8001ab8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001abc:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001bd0 <calibrate_encoder+0x580>
 8001ac0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001acc:	ee17 3a90 	vmov	r3, s15
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad2:	e027      	b.n	8001b24 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <calibrate_encoder+0x570>)
 8001ae0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ae4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001bd0 <calibrate_encoder+0x580>
 8001ae8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001af0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	dd12      	ble.n	8001b24 <calibrate_encoder+0x4d4>
 8001afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <calibrate_encoder+0x570>)
 8001b0a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b0e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001bd0 <calibrate_encoder+0x580>
 8001b12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 3a90 	vmov	r3, s15
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b28:	330a      	adds	r3, #10
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b32:	4413      	add	r3, r2
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	3301      	adds	r3, #1
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	0fda      	lsrs	r2, r3, #31
 8001b40:	4413      	add	r3, r2
 8001b42:	105b      	asrs	r3, r3, #1
 8001b44:	461a      	mov	r2, r3
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	db8e      	blt.n	8001a6a <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5a:	4413      	add	r3, r2
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	2b7f      	cmp	r3, #127	; 0x7f
 8001b62:	dd02      	ble.n	8001b6a <calibrate_encoder+0x51a>
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	3b80      	subs	r3, #128	; 0x80
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b8e:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <calibrate_encoder+0x584>)
 8001b90:	f00c fac4 	bl	800e11c <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	3301      	adds	r3, #1
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9e:	f77f af5b 	ble.w	8001a58 <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001bb0:	e002      	b.n	8001bb8 <calibrate_encoder+0x568>
				return;
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <calibrate_encoder+0x568>
		return;
 8001bb6:	bf00      	nop
}
 8001bb8:	3748      	adds	r7, #72	; 0x48
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000684 	.word	0x20000684
 8001bc4:	40c90fdb 	.word	0x40c90fdb
 8001bc8:	08012144 	.word	0x08012144
 8001bcc:	3ba0d97c 	.word	0x3ba0d97c
 8001bd0:	43000000 	.word	0x43000000
 8001bd4:	08012154 	.word	0x08012154

08001bd8 <drv_spi_write>:
#include <drv8353.h>
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bea:	2200      	movs	r2, #0
 8001bec:	2110      	movs	r1, #16
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf2:	f006 ff91 	bl	8008b18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1c9a      	adds	r2, r3, #2
 8001bfc:	2364      	movs	r3, #100	; 0x64
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2301      	movs	r3, #1
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <drv_spi_write+0x58>)
 8001c04:	f008 f87f 	bl	8009d06 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001c08:	bf00      	nop
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <drv_spi_write+0x58>)
 8001c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d0f9      	beq.n	8001c0a <drv_spi_write+0x32>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001c16:	2201      	movs	r2, #1
 8001c18:	2110      	movs	r1, #16
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f006 ff7b 	bl	8008b18 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	885b      	ldrh	r3, [r3, #2]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20009444 	.word	0x20009444

08001c34 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001c40:	463b      	mov	r3, r7
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ffc6 	bl	8001bd8 <drv_spi_write>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001c62:	463b      	mov	r3, r7
 8001c64:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ffb5 	bl	8001bd8 <drv_spi_write>
 8001c6e:	4603      	mov	r3, r0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c86:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	02db      	lsls	r3, r3, #11
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff99 	bl	8001bd8 <drv_spi_write>
 8001ca6:	4603      	mov	r3, r0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	f107 0408 	add.w	r4, r7, #8
 8001cba:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	02db      	lsls	r3, r3, #11
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff7d 	bl	8001bd8 <drv_spi_write>
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd90      	pop	{r4, r7, pc}

08001ce6 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001ce6:	b590      	push	{r4, r7, lr}
 8001ce8:	b087      	sub	sp, #28
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	f107 0408 	add.w	r4, r7, #8
 8001cf0:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	025b      	lsls	r3, r3, #9
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	01db      	lsls	r3, r3, #7
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1a:	015b      	lsls	r3, r3, #5
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	4313      	orrs	r3, r2
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	b21b      	sxth	r3, r3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b21a      	sxth	r2, r3
 8001d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001d54:	8afa      	ldrh	r2, [r7, #22]
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff3b 	bl	8001bd8 <drv_spi_write>
}
 8001d62:	bf00      	nop
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}

08001d6a <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001d6a:	b590      	push	{r4, r7, lr}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	f107 0408 	add.w	r4, r7, #8
 8001d74:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	019b      	lsls	r3, r3, #6
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001db0:	8afa      	ldrh	r2, [r7, #22]
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff0d 	bl	8001bd8 <drv_spi_write>
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}

08001dc6 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b087      	sub	sp, #28
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	f107 0408 	add.w	r4, r7, #8
 8001dd0:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfa:	019b      	lsls	r3, r3, #6
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001e34:	8afa      	ldrh	r2, [r7, #22]
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fecb 	bl	8001bd8 <drv_spi_write>
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}

08001e4a <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	463b      	mov	r3, r7
 8001e52:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8001e56:	2202      	movs	r2, #2
 8001e58:	463b      	mov	r3, r7
 8001e5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e5e:	f7ff ff0b 	bl	8001c78 <drv_read_register>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4639      	mov	r1, r7
 8001e70:	c903      	ldmia	r1, {r0, r1}
 8001e72:	f7ff ff1d 	bl	8001cb0 <drv_write_register>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	463b      	mov	r3, r7
 8001e86:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e92:	f7ff fef1 	bl	8001c78 <drv_read_register>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4639      	mov	r1, r7
 8001ea4:	c903      	ldmia	r1, {r0, r1}
 8001ea6:	f7ff ff03 	bl	8001cb0 <drv_write_register>
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	463b      	mov	r3, r7
 8001ebc:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ec6:	f7ff feb5 	bl	8001c34 <drv_read_FSR1>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 8001ece:	463b      	mov	r3, r7
 8001ed0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ed4:	f7ff febf 	bl	8001c56 <drv_read_FSR2>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <drv_print_faults+0x38>
 8001ee6:	4857      	ldr	r0, [pc, #348]	; (8002044 <drv_print_faults+0x190>)
 8001ee8:	f00c f918 	bl	800e11c <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001eec:	89fb      	ldrh	r3, [r7, #14]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <drv_print_faults+0x48>
 8001ef6:	4854      	ldr	r0, [pc, #336]	; (8002048 <drv_print_faults+0x194>)
 8001ef8:	f00c f910 	bl	800e11c <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001efc:	89fb      	ldrh	r3, [r7, #14]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <drv_print_faults+0x58>
 8001f06:	4851      	ldr	r0, [pc, #324]	; (800204c <drv_print_faults+0x198>)
 8001f08:	f00c f908 	bl	800e11c <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <drv_print_faults+0x68>
 8001f16:	484e      	ldr	r0, [pc, #312]	; (8002050 <drv_print_faults+0x19c>)
 8001f18:	f00c f900 	bl	800e11c <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001f1c:	89fb      	ldrh	r3, [r7, #14]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <drv_print_faults+0x78>
 8001f26:	484b      	ldr	r0, [pc, #300]	; (8002054 <drv_print_faults+0x1a0>)
 8001f28:	f00c f8f8 	bl	800e11c <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001f2c:	89fb      	ldrh	r3, [r7, #14]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <drv_print_faults+0x88>
 8001f36:	4848      	ldr	r0, [pc, #288]	; (8002058 <drv_print_faults+0x1a4>)
 8001f38:	f00c f8f0 	bl	800e11c <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <drv_print_faults+0x98>
 8001f46:	4845      	ldr	r0, [pc, #276]	; (800205c <drv_print_faults+0x1a8>)
 8001f48:	f00c f8e8 	bl	800e11c <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001f4c:	89fb      	ldrh	r3, [r7, #14]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <drv_print_faults+0xa8>
 8001f56:	4842      	ldr	r0, [pc, #264]	; (8002060 <drv_print_faults+0x1ac>)
 8001f58:	f00c f8e0 	bl	800e11c <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001f5c:	89fb      	ldrh	r3, [r7, #14]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <drv_print_faults+0xb8>
 8001f66:	483f      	ldr	r0, [pc, #252]	; (8002064 <drv_print_faults+0x1b0>)
 8001f68:	f00c f8d8 	bl	800e11c <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <drv_print_faults+0xc8>
 8001f76:	483c      	ldr	r0, [pc, #240]	; (8002068 <drv_print_faults+0x1b4>)
 8001f78:	f00c f8d0 	bl	800e11c <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001f7c:	89fb      	ldrh	r3, [r7, #14]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <drv_print_faults+0xd8>
 8001f86:	4839      	ldr	r0, [pc, #228]	; (800206c <drv_print_faults+0x1b8>)
 8001f88:	f00c f8c8 	bl	800e11c <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001f8c:	89bb      	ldrh	r3, [r7, #12]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <drv_print_faults+0xe8>
 8001f96:	4836      	ldr	r0, [pc, #216]	; (8002070 <drv_print_faults+0x1bc>)
 8001f98:	f00c f8c0 	bl	800e11c <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001f9c:	89bb      	ldrh	r3, [r7, #12]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <drv_print_faults+0xf8>
 8001fa6:	4833      	ldr	r0, [pc, #204]	; (8002074 <drv_print_faults+0x1c0>)
 8001fa8:	f00c f8b8 	bl	800e11c <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001fac:	89bb      	ldrh	r3, [r7, #12]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <drv_print_faults+0x108>
 8001fb6:	4830      	ldr	r0, [pc, #192]	; (8002078 <drv_print_faults+0x1c4>)
 8001fb8:	f00c f8b0 	bl	800e11c <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001fbc:	89bb      	ldrh	r3, [r7, #12]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <drv_print_faults+0x118>
 8001fc6:	482d      	ldr	r0, [pc, #180]	; (800207c <drv_print_faults+0x1c8>)
 8001fc8:	f00c f8a8 	bl	800e11c <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001fcc:	89bb      	ldrh	r3, [r7, #12]
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <drv_print_faults+0x128>
 8001fd6:	482a      	ldr	r0, [pc, #168]	; (8002080 <drv_print_faults+0x1cc>)
 8001fd8:	f00c f8a0 	bl	800e11c <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001fdc:	89bb      	ldrh	r3, [r7, #12]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <drv_print_faults+0x138>
 8001fe6:	4827      	ldr	r0, [pc, #156]	; (8002084 <drv_print_faults+0x1d0>)
 8001fe8:	f00c f898 	bl	800e11c <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001fec:	89bb      	ldrh	r3, [r7, #12]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <drv_print_faults+0x148>
 8001ff6:	4824      	ldr	r0, [pc, #144]	; (8002088 <drv_print_faults+0x1d4>)
 8001ff8:	f00c f890 	bl	800e11c <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001ffc:	89bb      	ldrh	r3, [r7, #12]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <drv_print_faults+0x158>
 8002006:	4821      	ldr	r0, [pc, #132]	; (800208c <drv_print_faults+0x1d8>)
 8002008:	f00c f888 	bl	800e11c <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 800200c:	89bb      	ldrh	r3, [r7, #12]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <drv_print_faults+0x168>
 8002016:	481e      	ldr	r0, [pc, #120]	; (8002090 <drv_print_faults+0x1dc>)
 8002018:	f00c f880 	bl	800e11c <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 800201c:	89bb      	ldrh	r3, [r7, #12]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <drv_print_faults+0x178>
 8002026:	481b      	ldr	r0, [pc, #108]	; (8002094 <drv_print_faults+0x1e0>)
 8002028:	f00c f878 	bl	800e11c <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 800202c:	89bb      	ldrh	r3, [r7, #12]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <drv_print_faults+0x188>
 8002036:	4818      	ldr	r0, [pc, #96]	; (8002098 <drv_print_faults+0x1e4>)
 8002038:	f00c f870 	bl	800e11c <iprintf>

}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	08012160 	.word	0x08012160
 8002048:	0801216c 	.word	0x0801216c
 800204c:	08012178 	.word	0x08012178
 8002050:	08012180 	.word	0x08012180
 8002054:	08012188 	.word	0x08012188
 8002058:	08012190 	.word	0x08012190
 800205c:	0801219c 	.word	0x0801219c
 8002060:	080121a8 	.word	0x080121a8
 8002064:	080121b4 	.word	0x080121b4
 8002068:	080121c0 	.word	0x080121c0
 800206c:	080121cc 	.word	0x080121cc
 8002070:	080121d8 	.word	0x080121d8
 8002074:	080121e0 	.word	0x080121e0
 8002078:	080121e8 	.word	0x080121e8
 800207c:	080121f0 	.word	0x080121f0
 8002080:	080121f8 	.word	0x080121f8
 8002084:	08012200 	.word	0x08012200
 8002088:	0801220c 	.word	0x0801220c
 800208c:	08012218 	.word	0x08012218
 8002090:	08012224 	.word	0x08012224
 8002094:	08012230 	.word	0x08012230
 8002098:	0801223c 	.word	0x0801223c

0800209c <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020a2:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <MX_FDCAN2_Init+0x84>)
 80020a4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020d2:	2202      	movs	r2, #2
 80020d4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020d8:	2202      	movs	r2, #2
 80020da:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020de:	2201      	movs	r2, #1
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <MX_FDCAN2_Init+0x80>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_FDCAN2_Init+0x80>)
 8002102:	2200      	movs	r2, #0
 8002104:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_FDCAN2_Init+0x80>)
 8002108:	f005 fb90 	bl	800782c <HAL_FDCAN_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 8002112:	f002 fc51 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000378 	.word	0x20000378
 8002120:	40006800 	.word	0x40006800

08002124 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <HAL_FDCAN_MspInit+0x8c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d12f      	bne.n	80021a6 <HAL_FDCAN_MspInit+0x82>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_FDCAN_MspInit+0x90>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	4a1a      	ldr	r2, [pc, #104]	; (80021b4 <HAL_FDCAN_MspInit+0x90>)
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002150:	6593      	str	r3, [r2, #88]	; 0x58
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_FDCAN_MspInit+0x90>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_FDCAN_MspInit+0x90>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_FDCAN_MspInit+0x90>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_FDCAN_MspInit+0x90>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002176:	2360      	movs	r3, #96	; 0x60
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002186:	2309      	movs	r3, #9
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_FDCAN_MspInit+0x94>)
 8002192:	f006 fb3f 	bl	8008814 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2056      	movs	r0, #86	; 0x56
 800219c:	f005 fa51 	bl	8007642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80021a0:	2056      	movs	r0, #86	; 0x56
 80021a2:	f005 fa68 	bl	8007676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40006800 	.word	0x40006800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	48000400 	.word	0x48000400

080021bc <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6178      	str	r0, [r7, #20]
 80021c4:	460b      	mov	r3, r1
 80021c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80021ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80021ce:	ed87 1a01 	vstr	s2, [r7, #4]
 80021d2:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 80021d4:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <pack_reply+0xec>)
 80021d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <pack_reply+0xec>)
 80021dc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80021e0:	2010      	movs	r0, #16
 80021e2:	eeb0 1a47 	vmov.f32	s2, s14
 80021e6:	eef0 0a67 	vmov.f32	s1, s15
 80021ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80021ee:	f002 fcd3 	bl	8004b98 <float_to_uint>
 80021f2:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <pack_reply+0xec>)
 80021f6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <pack_reply+0xec>)
 80021fc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002200:	200c      	movs	r0, #12
 8002202:	eeb0 1a47 	vmov.f32	s2, s14
 8002206:	eef0 0a67 	vmov.f32	s1, s15
 800220a:	ed97 0a02 	vldr	s0, [r7, #8]
 800220e:	f002 fcc3 	bl	8004b98 <float_to_uint>
 8002212:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <pack_reply+0xec>)
 8002216:	edd3 7a03 	vldr	s15, [r3, #12]
 800221a:	eeb1 7a67 	vneg.f32	s14, s15
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <pack_reply+0xec>)
 8002220:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <pack_reply+0xec>)
 800222a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800222e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <pack_reply+0xec>)
 8002234:	ed93 7a03 	vldr	s14, [r3, #12]
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <pack_reply+0xec>)
 800223a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800223e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002242:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <pack_reply+0xec>)
 8002244:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224c:	200c      	movs	r0, #12
 800224e:	eeb0 1a67 	vmov.f32	s2, s15
 8002252:	eef0 0a66 	vmov.f32	s1, s13
 8002256:	ed97 0a01 	vldr	s0, [r7, #4]
 800225a:	f002 fc9d 	bl	8004b98 <float_to_uint>
 800225e:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	7cfa      	ldrb	r2, [r7, #19]
 8002264:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	121b      	asrs	r3, r3, #8
 800226a:	b2da      	uxtb	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	b2da      	uxtb	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	111b      	asrs	r3, r3, #4
 800227c:	b2da      	uxtb	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	b2da      	uxtb	r2, r3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	121b      	asrs	r3, r3, #8
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4413      	add	r3, r2
 8002290:	b2da      	uxtb	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	719a      	strb	r2, [r3, #6]
    }
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000684 	.word	0x20000684

080022ac <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 80022ac:	b084      	sub	sp, #16
 80022ae:	b590      	push	{r4, r7, lr}
 80022b0:	b087      	sub	sp, #28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80022b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 80022bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 80022ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80022d4:	0912      	lsrs	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 80022dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 80022ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80022f8:	0912      	lsrs	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8002300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800230a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800230e:	4313      	orrs	r3, r2
 8002310:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <unpack_cmd+0x160>)
 8002314:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <unpack_cmd+0x160>)
 800231a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800231e:	2110      	movs	r1, #16
 8002320:	eef0 0a47 	vmov.f32	s1, s14
 8002324:	eeb0 0a67 	vmov.f32	s0, s15
 8002328:	6978      	ldr	r0, [r7, #20]
 800232a:	f002 fc68 	bl	8004bfe <uint_to_float>
 800232e:	eef0 7a40 	vmov.f32	s15, s0
 8002332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002334:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8002338:	4b34      	ldr	r3, [pc, #208]	; (800240c <unpack_cmd+0x160>)
 800233a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <unpack_cmd+0x160>)
 8002340:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002346:	1d1c      	adds	r4, r3, #4
 8002348:	210c      	movs	r1, #12
 800234a:	eef0 0a47 	vmov.f32	s1, s14
 800234e:	eeb0 0a67 	vmov.f32	s0, s15
 8002352:	6938      	ldr	r0, [r7, #16]
 8002354:	f002 fc53 	bl	8004bfe <uint_to_float>
 8002358:	eef0 7a40 	vmov.f32	s15, s0
 800235c:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <unpack_cmd+0x160>)
 8002362:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002368:	f103 0408 	add.w	r4, r3, #8
 800236c:	210c      	movs	r1, #12
 800236e:	eef0 0a67 	vmov.f32	s1, s15
 8002372:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002410 <unpack_cmd+0x164>
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f002 fc41 	bl	8004bfe <uint_to_float>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <unpack_cmd+0x160>)
 8002386:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800238a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238c:	f103 040c 	add.w	r4, r3, #12
 8002390:	210c      	movs	r1, #12
 8002392:	eef0 0a67 	vmov.f32	s1, s15
 8002396:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002410 <unpack_cmd+0x164>
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f002 fc2f 	bl	8004bfe <uint_to_float>
 80023a0:	eef0 7a40 	vmov.f32	s15, s0
 80023a4:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <unpack_cmd+0x160>)
 80023aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80023ae:	eeb1 7a67 	vneg.f32	s14, s15
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <unpack_cmd+0x160>)
 80023b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <unpack_cmd+0x160>)
 80023be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80023c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <unpack_cmd+0x160>)
 80023c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <unpack_cmd+0x160>)
 80023ce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <unpack_cmd+0x160>)
 80023d8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80023dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e2:	f103 0410 	add.w	r4, r3, #16
 80023e6:	210c      	movs	r1, #12
 80023e8:	eef0 0a67 	vmov.f32	s1, s15
 80023ec:	eeb0 0a66 	vmov.f32	s0, s13
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f002 fc04 	bl	8004bfe <uint_to_float>
 80023f6:	eef0 7a40 	vmov.f32	s15, s0
 80023fa:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002408:	b004      	add	sp, #16
 800240a:	4770      	bx	lr
 800240c:	20000684 	.word	0x20000684
 8002410:	00000000 	.word	0x00000000

08002414 <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
    for(int i = 0;i<FLOATSCOUNT;i++){
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	e01d      	b.n	800245c <load_from_flash+0x48>
    	int temp = FLOATS_ADDR + i*sizeof(float);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002426:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	607b      	str	r3, [r7, #4]
    	float read = *((float*)(FLOATS_ADDR + i*sizeof(float)));
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002434:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	603b      	str	r3, [r7, #0]
        __float_reg[i] = *((float*)(FLOATS_ADDR + i*sizeof(float)));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002444:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4911      	ldr	r1, [pc, #68]	; (8002494 <load_from_flash+0x80>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	601a      	str	r2, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i++){
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b3f      	cmp	r3, #63	; 0x3f
 8002460:	ddde      	ble.n	8002420 <load_from_flash+0xc>
    }
    for(int i = 0;i<INTSCOUNT;i++){
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	e00b      	b.n	8002480 <load_from_flash+0x6c>
        __int_reg[i] = *((int*)(INTS_ADDR + i*sizeof(float)));
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <load_from_flash+0x84>)
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	490a      	ldr	r1, [pc, #40]	; (800249c <load_from_flash+0x88>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0;i<INTSCOUNT;i++){
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2bff      	cmp	r3, #255	; 0xff
 8002484:	ddf0      	ble.n	8002468 <load_from_flash+0x54>
    }
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	20000684 	.word	0x20000684
 8002498:	0201c840 	.word	0x0201c840
 800249c:	20008f34 	.word	0x20008f34

080024a0 <erase_reserved_flash>:

/**
  * @brief  Erase used page of flash memory to prepare for reprogramming
  * @retval uint32_t PageError. 0xFFFFFFFF means no problem
  */
int erase_reserved_flash(){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef eraseStruct;
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
    eraseStruct.Banks = FLASH_BANK_2;
 80024aa:	2302      	movs	r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
    eraseStruct.Page = RESERVED_PAGE;
 80024ae:	2364      	movs	r3, #100	; 0x64
 80024b0:	613b      	str	r3, [r7, #16]
    eraseStruct.NbPages = 1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
    uint32_t error;
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 80024b6:	1d3a      	adds	r2, r7, #4
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f006 f846 	bl	8008550 <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <erase_reserved_flash+0x34>)
 80024c6:	f00b fe29 	bl	800e11c <iprintf>
    return error;
 80024ca:	687b      	ldr	r3, [r7, #4]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08012248 	.word	0x08012248

080024d8 <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
	printf("SaveToFlashy: ");
 80024de:	484a      	ldr	r0, [pc, #296]	; (8002608 <save_to_flash+0x130>)
 80024e0:	f00b fe1c 	bl	800e11c <iprintf>

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 80024e4:	f005 ff06 	bl	80082f4 <HAL_FLASH_Unlock>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 1;
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <save_to_flash+0x1e>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e084      	b.n	8002600 <save_to_flash+0x128>

	status = HAL_FLASH_OB_Unlock();
 80024f6:	f005 ff39 	bl	800836c <HAL_FLASH_OB_Unlock>
 80024fa:	4603      	mov	r3, r0
 80024fc:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 2;
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <save_to_flash+0x30>
 8002504:	2302      	movs	r3, #2
 8002506:	e07b      	b.n	8002600 <save_to_flash+0x128>

	printf(" >unlocked ");
 8002508:	4840      	ldr	r0, [pc, #256]	; (800260c <save_to_flash+0x134>)
 800250a:	f00b fe07 	bl	800e11c <iprintf>

    unsigned int eraseError = erase_reserved_flash();
 800250e:	f7ff ffc7 	bl	80024a0 <erase_reserved_flash>
 8002512:	4603      	mov	r3, r0
 8002514:	613b      	str	r3, [r7, #16]
    if(eraseError!=0xFFFFFFFF) return 3;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d001      	beq.n	8002522 <save_to_flash+0x4a>
 800251e:	2303      	movs	r3, #3
 8002520:	e06e      	b.n	8002600 <save_to_flash+0x128>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <save_to_flash+0x138>)
 8002524:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8002528:	611a      	str	r2, [r3, #16]

    printf(" >erased ");
 800252a:	483a      	ldr	r0, [pc, #232]	; (8002614 <save_to_flash+0x13c>)
 800252c:	f00b fdf6 	bl	800e11c <iprintf>

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002534:	f005 ff5c 	bl	80083f0 <FLASH_WaitForLastOperation>
 8002538:	4603      	mov	r3, r0
 800253a:	75fb      	strb	r3, [r7, #23]
    if(status!=HAL_OK) return 5;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <save_to_flash+0x6e>
 8002542:	2305      	movs	r3, #5
 8002544:	e05c      	b.n	8002600 <save_to_flash+0x128>

    printf(" >floatss ");
 8002546:	4834      	ldr	r0, [pc, #208]	; (8002618 <save_to_flash+0x140>)
 8002548:	f00b fde8 	bl	800e11c <iprintf>

    for(int i=0;i<FLOATSCOUNT;i=i+2){
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	e020      	b.n	8002594 <save_to_flash+0xbc>
        uint64_t doubleWord = *((uint64_t*) __float_reg + i); //read two floats from array as one uint64
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4a31      	ldr	r2, [pc, #196]	; (800261c <save_to_flash+0x144>)
 8002558:	4413      	add	r3, r2
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	e9c7 2300 	strd	r2, r3, [r7]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002568:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800256c:	0099      	lsls	r1, r3, #2
 800256e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002572:	2000      	movs	r0, #0
 8002574:	f005 fe68 	bl	8008248 <HAL_FLASH_Program>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("fail f %d", i);return 6;}
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <save_to_flash+0xb6>
 8002582:	69f9      	ldr	r1, [r7, #28]
 8002584:	4826      	ldr	r0, [pc, #152]	; (8002620 <save_to_flash+0x148>)
 8002586:	f00b fdc9 	bl	800e11c <iprintf>
 800258a:	2306      	movs	r3, #6
 800258c:	e038      	b.n	8002600 <save_to_flash+0x128>
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3302      	adds	r3, #2
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b3f      	cmp	r3, #63	; 0x3f
 8002598:	dddb      	ble.n	8002552 <save_to_flash+0x7a>
    }
    printf(" >ints ");
 800259a:	4822      	ldr	r0, [pc, #136]	; (8002624 <save_to_flash+0x14c>)
 800259c:	f00b fdbe 	bl	800e11c <iprintf>
    for(int i=300;i<INTSCOUNT;i=i+2){
 80025a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e020      	b.n	80025ea <save_to_flash+0x112>
        uint64_t doubleWord = *((uint64_t*) __int_reg + i);
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <save_to_flash+0x150>)
 80025ae:	4413      	add	r3, r2
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(int), doubleWord);
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025be:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c8:	2000      	movs	r0, #0
 80025ca:	f005 fe3d 	bl	8008248 <HAL_FLASH_Program>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("fail i %d", i);return 7;}
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <save_to_flash+0x10c>
 80025d8:	69b9      	ldr	r1, [r7, #24]
 80025da:	4814      	ldr	r0, [pc, #80]	; (800262c <save_to_flash+0x154>)
 80025dc:	f00b fd9e 	bl	800e11c <iprintf>
 80025e0:	2307      	movs	r3, #7
 80025e2:	e00d      	b.n	8002600 <save_to_flash+0x128>
    for(int i=300;i<INTSCOUNT;i=i+2){
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3302      	adds	r3, #2
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2bff      	cmp	r3, #255	; 0xff
 80025ee:	dddb      	ble.n	80025a8 <save_to_flash+0xd0>
    }
    HAL_FLASH_Lock();
 80025f0:	f005 fea2 	bl	8008338 <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 80025f4:	f005 fee0 	bl	80083b8 <HAL_FLASH_OB_Lock>
    printf("> SaveToFlash All Ok\n");
 80025f8:	480d      	ldr	r0, [pc, #52]	; (8002630 <save_to_flash+0x158>)
 80025fa:	f00b fe15 	bl	800e228 <puts>
    return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	08012260 	.word	0x08012260
 800260c:	08012270 	.word	0x08012270
 8002610:	40022000 	.word	0x40022000
 8002614:	0801227c 	.word	0x0801227c
 8002618:	08012288 	.word	0x08012288
 800261c:	20000684 	.word	0x20000684
 8002620:	08012294 	.word	0x08012294
 8002624:	080122a0 	.word	0x080122a0
 8002628:	20008f34 	.word	0x20008f34
 800262c:	080122a8 	.word	0x080122a8
 8002630:	080122b4 	.word	0x080122b4

08002634 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265c:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800266a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800267c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002680:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <set_dtc+0x140>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d136      	bne.n	80026fa <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <set_dtc+0x144>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269a:	edd7 7a05 	vldr	s15, [r7, #20]
 800269e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a2:	4b35      	ldr	r3, [pc, #212]	; (8002778 <set_dtc+0x144>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026aa:	ee17 2a90 	vmov	r2, s15
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80026b0:	4b31      	ldr	r3, [pc, #196]	; (8002778 <set_dtc+0x144>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026be:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <set_dtc+0x144>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ce:	ee17 2a90 	vmov	r2, s15
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <set_dtc+0x144>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <set_dtc+0x144>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f2:	ee17 2a90 	vmov	r2, s15
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80026f8:	e035      	b.n	8002766 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <set_dtc+0x144>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002708:	edd7 7a05 	vldr	s15, [r7, #20]
 800270c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <set_dtc+0x144>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002718:	ee17 2a90 	vmov	r2, s15
 800271c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <set_dtc+0x144>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800272c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <set_dtc+0x144>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273c:	ee17 2a90 	vmov	r2, s15
 8002740:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <set_dtc+0x144>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002750:	edd7 7a03 	vldr	s15, [r7, #12]
 8002754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <set_dtc+0x144>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002760:	ee17 2a90 	vmov	r2, s15
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20008f34 	.word	0x20008f34
 8002778:	200094a8 	.word	0x200094a8

0800277c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <analog_sample+0xe8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10e      	bne.n	80027aa <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800278c:	4836      	ldr	r0, [pc, #216]	; (8002868 <analog_sample+0xec>)
 800278e:	f004 f89f 	bl	80068d0 <HAL_ADC_GetValue>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800279a:	4834      	ldr	r0, [pc, #208]	; (800286c <analog_sample+0xf0>)
 800279c:	f004 f898 	bl	80068d0 <HAL_ADC_GetValue>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e00d      	b.n	80027c6 <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80027aa:	4830      	ldr	r0, [pc, #192]	; (800286c <analog_sample+0xf0>)
 80027ac:	f004 f890 	bl	80068d0 <HAL_ADC_GetValue>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80027b8:	482b      	ldr	r0, [pc, #172]	; (8002868 <analog_sample+0xec>)
 80027ba:	f004 f889 	bl	80068d0 <HAL_ADC_GetValue>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 80027c6:	4828      	ldr	r0, [pc, #160]	; (8002868 <analog_sample+0xec>)
 80027c8:	f003 fe98 	bl	80064fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	4825      	ldr	r0, [pc, #148]	; (8002868 <analog_sample+0xec>)
 80027d2:	f003 ff77 	bl	80066c4 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 80027d6:	4826      	ldr	r0, [pc, #152]	; (8002870 <analog_sample+0xf4>)
 80027d8:	f004 f87a 	bl	80068d0 <HAL_ADC_GetValue>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002874 <analog_sample+0xf8>
 80027f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002812:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002878 <analog_sample+0xfc>
 8002816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002834:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002878 <analog_sample+0xfc>
 8002838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	edd3 7a05 	vldr	s15, [r3, #20]
 8002848:	eeb1 7a67 	vneg.f32	s14, s15
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20008f34 	.word	0x20008f34
 8002868:	200002a0 	.word	0x200002a0
 800286c:	20000234 	.word	0x20000234
 8002870:	2000030c 	.word	0x2000030c
 8002874:	3c533333 	.word	0x3c533333
 8002878:	3ca50000 	.word	0x3ca50000

0800287c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	ed87 0a05 	vstr	s0, [r7, #20]
 8002886:	edc7 0a04 	vstr	s1, [r7, #16]
 800288a:	ed87 1a03 	vstr	s2, [r7, #12]
 800288e:	60b8      	str	r0, [r7, #8]
 8002890:	6079      	str	r1, [r7, #4]
 8002892:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002894:	ed97 0a05 	vldr	s0, [r7, #20]
 8002898:	f002 fa1e 	bl	8004cd8 <cos_lut>
 800289c:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80028a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80028a4:	f002 f9de 	bl	8004c64 <sin_lut>
 80028a8:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80028ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b8:	edd7 6a06 	vldr	s13, [r7, #24]
 80028bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80028ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80028d2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800297c <abc+0x100>
 80028d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028da:	edd7 7a07 	vldr	s15, [r7, #28]
 80028de:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80028e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028f6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002980 <abc+0x104>
 80028fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002902:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002906:	ee67 7a86 	vmul.f32	s15, s15, s12
 800290a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800290e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002920:	edd7 7a06 	vldr	s15, [r7, #24]
 8002924:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002980 <abc+0x104>
 8002928:	ee27 7a87 	vmul.f32	s14, s15, s14
 800292c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002930:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002934:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800293c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	edd7 7a07 	vldr	s15, [r7, #28]
 8002948:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800297c <abc+0x100>
 800294c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002950:	edd7 7a06 	vldr	s15, [r7, #24]
 8002954:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002958:	ee67 7a86 	vmul.f32	s15, s15, s12
 800295c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002960:	edd7 7a03 	vldr	s15, [r7, #12]
 8002964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002972:	bf00      	nop
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	3f5db3d7 	.word	0x3f5db3d7
 8002980:	bf5db3d7 	.word	0xbf5db3d7

08002984 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	ed87 0a05 	vstr	s0, [r7, #20]
 800298e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002992:	ed87 1a03 	vstr	s2, [r7, #12]
 8002996:	edc7 1a02 	vstr	s3, [r7, #8]
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 800299e:	ed97 0a05 	vldr	s0, [r7, #20]
 80029a2:	f002 f999 	bl	8004cd8 <cos_lut>
 80029a6:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80029aa:	ed97 0a05 	vldr	s0, [r7, #20]
 80029ae:	f002 f959 	bl	8004c64 <sin_lut>
 80029b2:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80029b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80029ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80029be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c6:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002a98 <dq0+0x114>
 80029ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029de:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ee:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002a9c <dq0+0x118>
 80029f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80029fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002aa0 <dq0+0x11c>
 8002a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a24:	eeb1 7a67 	vneg.f32	s14, s15
 8002a28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a30:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a34:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002a9c <dq0+0x118>
 8002a38:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a5c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002a98 <dq0+0x114>
 8002a60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a64:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002aa0 <dq0+0x11c>
 8002a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002a8e:	bf00      	nop
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	3f5db3d7 	.word	0x3f5db3d7
 8002a9c:	bf5db3d7 	.word	0xbf5db3d7
 8002aa0:	3f2aaaab 	.word	0x3f2aaaab

08002aa4 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	ed2d 8b02 	vpush	{d8}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	ed87 0a07 	vstr	s0, [r7, #28]
 8002ab2:	edc7 0a06 	vstr	s1, [r7, #24]
 8002ab6:	ed87 1a05 	vstr	s2, [r7, #20]
 8002aba:	edc7 1a04 	vstr	s3, [r7, #16]
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002ac4:	ed97 1a04 	vldr	s2, [r7, #16]
 8002ac8:	edd7 0a05 	vldr	s1, [r7, #20]
 8002acc:	ed97 0a06 	vldr	s0, [r7, #24]
 8002ad0:	f001 ffe5 	bl	8004a9e <fminf3>
 8002ad4:	eeb0 8a40 	vmov.f32	s16, s0
 8002ad8:	ed97 1a04 	vldr	s2, [r7, #16]
 8002adc:	edd7 0a05 	vldr	s1, [r7, #20]
 8002ae0:	ed97 0a06 	vldr	s0, [r7, #24]
 8002ae4:	f001 ffa7 	bl	8004a36 <fmaxf3>
 8002ae8:	eef0 7a40 	vmov.f32	s15, s0
 8002aec:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002af0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <svm+0x160>)
 8002afe:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002b00:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b14:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002c08 <svm+0x164>
 8002b18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b24:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2c:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002c0c <svm+0x168>
 8002b30:	eeb0 0a67 	vmov.f32	s0, s15
 8002b34:	f001 ff47 	bl	80049c6 <fast_fmaxf>
 8002b38:	eef0 7a40 	vmov.f32	s15, s0
 8002b3c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002c10 <svm+0x16c>
 8002b40:	eeb0 0a67 	vmov.f32	s0, s15
 8002b44:	f001 ff5b 	bl	80049fe <fast_fminf>
 8002b48:	eef0 7a40 	vmov.f32	s15, s0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002b52:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b66:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002c08 <svm+0x164>
 8002b6a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b76:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7e:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002c0c <svm+0x168>
 8002b82:	eeb0 0a67 	vmov.f32	s0, s15
 8002b86:	f001 ff1e 	bl	80049c6 <fast_fmaxf>
 8002b8a:	eef0 7a40 	vmov.f32	s15, s0
 8002b8e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002c10 <svm+0x16c>
 8002b92:	eeb0 0a67 	vmov.f32	s0, s15
 8002b96:	f001 ff32 	bl	80049fe <fast_fminf>
 8002b9a:	eef0 7a40 	vmov.f32	s15, s0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002ba4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ba8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002c08 <svm+0x164>
 8002bbc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002bc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002c0c <svm+0x168>
 8002bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd8:	f001 fef5 	bl	80049c6 <fast_fmaxf>
 8002bdc:	eef0 7a40 	vmov.f32	s15, s0
 8002be0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002c10 <svm+0x16c>
 8002be4:	eeb0 0a67 	vmov.f32	s0, s15
 8002be8:	f001 ff09 	bl	80049fe <fast_fminf>
 8002bec:	eef0 7a40 	vmov.f32	s15, s0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	edc3 7a00 	vstr	s15, [r3]

    }
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	; 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	ecbd 8b02 	vpop	{d8}
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	3ef0a3d7 	.word	0x3ef0a3d7
 8002c08:	3f933333 	.word	0x3f933333
 8002c0c:	00000000 	.word	0x00000000
 8002c10:	3f70a3d7 	.word	0x3f70a3d7

08002c14 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c28:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fcf6 	bl	8002634 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e00f      	b.n	8002c6e <zero_current+0x5a>
    	analog_sample(controller);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fd94 	bl	800277c <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbeb      	blt.n	8002c4e <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	fb92 f2f3 	sdiv	r2, r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    }
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a42      	ldr	r2, [pc, #264]	; (8002db0 <init_controller_params+0x114>)
 8002ca8:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <init_controller_params+0x114>)
 8002cae:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002cb0:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <init_controller_params+0x118>)
 8002cb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cb6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002db8 <init_controller_params+0x11c>
 8002cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <init_controller_params+0x118>)
 8002cc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cca:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002db8 <init_controller_params+0x11c>
 8002cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <init_controller_params+0x118>)
 8002cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cde:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002dbc <init_controller_params+0x120>
 8002ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002dc0 <init_controller_params+0x124>
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002d12:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002dc4 <init_controller_params+0x128>
 8002d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <init_controller_params+0x12c>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e036      	b.n	8002d9e <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002dcc <init_controller_params+0x130>
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d42:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002dd0 <init_controller_params+0x134>
 8002d46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d4a:	ee16 0a90 	vmov	r0, s13
 8002d4e:	f7fd fc23 	bl	8000598 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	ec43 2b10 	vmov	d0, r2, r3
 8002d5a:	f00e fee5 	bl	8011b28 <exp>
 8002d5e:	ec51 0b10 	vmov	r0, r1, d0
 8002d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <init_controller_params+0x138>)
 8002d68:	f7fd fc6e 	bl	8000648 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <init_controller_params+0x13c>)
 8002d7a:	f7fd faaf 	bl	80002dc <__adddf3>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd ff57 	bl	8000c38 <__aeabi_d2f>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	333c      	adds	r3, #60	; 0x3c
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b7f      	cmp	r3, #127	; 0x7f
 8002da2:	ddc5      	ble.n	8002d30 <init_controller_params+0x94>
    }

    }
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	3d3851ec 	.word	0x3d3851ec
 8002db4:	20000684 	.word	0x20000684
 8002db8:	38d1b717 	.word	0x38d1b717
 8002dbc:	37d1b717 	.word	0x37d1b717
 8002dc0:	40c90fdb 	.word	0x40c90fdb
 8002dc4:	3dcccccd 	.word	0x3dcccccd
 8002dc8:	20008f34 	.word	0x20008f34
 8002dcc:	bc000000 	.word	0xbc000000
 8002dd0:	3d03126f 	.word	0x3d03126f
 8002dd4:	3ff33333 	.word	0x3ff33333
 8002dd8:	3ff00000 	.word	0x3ff00000

08002ddc <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <reset_foc+0xe4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <reset_foc+0xe4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e02:	ee17 2a90 	vmov	r2, s15
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <reset_foc+0xe4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1e:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <reset_foc+0xe4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e26:	ee17 2a90 	vmov	r2, s15
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002e2c:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <reset_foc+0xe4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <reset_foc+0xe4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4a:	ee17 2a90 	vmov	r2, s15
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	200094a8 	.word	0x200094a8

08002ec4 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8002ede:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ee2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002fa4 <field_weaken+0xe0>
 8002ee6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8002efa:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8002fa8 <field_weaken+0xe4>
 8002efe:	eeb0 0a67 	vmov.f32	s0, s15
 8002f02:	f001 fd7c 	bl	80049fe <fast_fminf>
 8002f06:	eeb0 7a40 	vmov.f32	s14, s0
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <field_weaken+0xe8>)
 8002f0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f10:	eef1 7a67 	vneg.f32	s15, s15
 8002f14:	eef0 0a67 	vmov.f32	s1, s15
 8002f18:	eeb0 0a47 	vmov.f32	s0, s14
 8002f1c:	f001 fd53 	bl	80049c6 <fast_fmaxf>
 8002f20:	eef0 7a40 	vmov.f32	s15, s0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->i_d_des = controller->fw_int;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f5e:	f00e fe5d 	bl	8011c1c <sqrtf>
 8002f62:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002f6c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002f70:	eeb0 0a67 	vmov.f32	s0, s15
 8002f74:	f001 fd43 	bl	80049fe <fast_fminf>
 8002f78:	eeb0 7a40 	vmov.f32	s14, s0
 8002f7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f80:	eef1 7a67 	vneg.f32	s15, s15
 8002f84:	eef0 0a67 	vmov.f32	s1, s15
 8002f88:	eeb0 0a47 	vmov.f32	s0, s14
 8002f8c:	f001 fd1b 	bl	80049c6 <fast_fmaxf>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4


}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	3ba3d70a 	.word	0x3ba3d70a
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	20000684 	.word	0x20000684

08002fb0 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity*GR;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002fd0:	4bd7      	ldr	r3, [pc, #860]	; (8003330 <commutate+0x380>)
 8002fd2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fe6:	4bd2      	ldr	r3, [pc, #840]	; (8003330 <commutate+0x380>)
 8002fe8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	ed93 7a05 	vldr	s14, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	edd3 6a06 	vldr	s13, [r3, #24]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	ed93 6a07 	vldr	s12, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3340      	adds	r3, #64	; 0x40
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	eef0 1a46 	vmov.f32	s3, s12
 8003020:	eeb0 1a66 	vmov.f32	s2, s13
 8003024:	eef0 0a47 	vmov.f32	s1, s14
 8003028:	eeb0 0a67 	vmov.f32	s0, s15
 800302c:	f7ff fcaa 	bl	8002984 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003036:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003334 <commutate+0x384>
 800303a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003044:	eddf 6abc 	vldr	s13, [pc, #752]	; 8003338 <commutate+0x388>
 8003048:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800304c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800305c:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003334 <commutate+0x384>
 8003060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800306a:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8003338 <commutate+0x388>
 800306e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003082:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800333c <commutate+0x38c>
 8003086:	ee27 7a87 	vmul.f32	s14, s15, s14
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003090:	eddf 6aab 	vldr	s13, [pc, #684]	; 8003340 <commutate+0x390>
 8003094:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030a8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003344 <commutate+0x394>
 80030ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8003348 <commutate+0x398>
 80030b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b8:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800334c <commutate+0x39c>
 80030bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80030c6:	4b9a      	ldr	r3, [pc, #616]	; (8003330 <commutate+0x380>)
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 80030e2:	eeb0 0a67 	vmov.f32	s0, s15
 80030e6:	4610      	mov	r0, r2
 80030e8:	f001 fd0d 	bl	8004b06 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80030f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fc:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800310c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003110:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003126:	edd7 7a07 	vldr	s15, [r7, #28]
 800312a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003138:	edd7 7a05 	vldr	s15, [r7, #20]
 800313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003152:	eef0 0a47 	vmov.f32	s1, s14
 8003156:	eeb0 0a67 	vmov.f32	s0, s15
 800315a:	f001 fc50 	bl	80049fe <fast_fminf>
 800315e:	eeb0 7a40 	vmov.f32	s14, s0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003168:	eef1 7a67 	vneg.f32	s15, s15
 800316c:	eef0 0a67 	vmov.f32	s1, s15
 8003170:	eeb0 0a47 	vmov.f32	s0, s14
 8003174:	f001 fc27 	bl	80049c6 <fast_fmaxf>
 8003178:	eef0 7a40 	vmov.f32	s15, s0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003198:	edd7 7a07 	vldr	s15, [r7, #28]
 800319c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80031b6:	eef0 0a47 	vmov.f32	s1, s14
 80031ba:	eeb0 0a67 	vmov.f32	s0, s15
 80031be:	f001 fc1e 	bl	80049fe <fast_fminf>
 80031c2:	eeb0 7a40 	vmov.f32	s14, s0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80031cc:	eef1 7a67 	vneg.f32	s15, s15
 80031d0:	eef0 0a67 	vmov.f32	s1, s15
 80031d4:	eeb0 0a47 	vmov.f32	s0, s14
 80031d8:	f001 fbf5 	bl	80049c6 <fast_fmaxf>
 80031dc:	eef0 7a40 	vmov.f32	s15, s0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80031f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320a:	eeb0 0a67 	vmov.f32	s0, s15
 800320e:	f00e fd05 	bl	8011c1c <sqrtf>
 8003212:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800321c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800322a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800322e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800324e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003252:	edd7 7a06 	vldr	s15, [r7, #24]
 8003256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003270:	eef0 0a47 	vmov.f32	s1, s14
 8003274:	eeb0 0a67 	vmov.f32	s0, s15
 8003278:	f001 fbc1 	bl	80049fe <fast_fminf>
 800327c:	eeb0 7a40 	vmov.f32	s14, s0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003286:	eef1 7a67 	vneg.f32	s15, s15
 800328a:	eef0 0a67 	vmov.f32	s1, s15
 800328e:	eeb0 0a47 	vmov.f32	s0, s14
 8003292:	f001 fb98 	bl	80049c6 <fast_fmaxf>
 8003296:	eef0 7a40 	vmov.f32	s15, s0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80032ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	f00e fca8 	bl	8011c1c <sqrtf>
 80032cc:	eef0 7a40 	vmov.f32	s15, s0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80032dc:	edd7 0a03 	vldr	s1, [r7, #12]
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	f001 fb8b 	bl	80049fe <fast_fminf>
 80032e8:	eeb0 7a40 	vmov.f32	s14, s0
 80032ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80032f0:	eef1 7a67 	vneg.f32	s15, s15
 80032f4:	eef0 0a67 	vmov.f32	s1, s15
 80032f8:	eeb0 0a47 	vmov.f32	s0, s14
 80032fc:	f001 fb63 	bl	80049c6 <fast_fmaxf>
 8003300:	eef0 7a40 	vmov.f32	s15, s0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800331c:	eeb0 0a67 	vmov.f32	s0, s15
 8003320:	4610      	mov	r0, r2
 8003322:	f001 fbf0 	bl	8004b06 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	e011      	b.n	8003354 <commutate+0x3a4>
 8003330:	20000684 	.word	0x20000684
 8003334:	3f7d70a4 	.word	0x3f7d70a4
 8003338:	3c23d70a 	.word	0x3c23d70a
 800333c:	3f666666 	.word	0x3f666666
 8003340:	3dcccccd 	.word	0x3dcccccd
 8003344:	3f933333 	.word	0x3f933333
 8003348:	3f70a3d7 	.word	0x3f70a3d7
 800334c:	3f13cd3a 	.word	0x3f13cd3a
 8003350:	381d4951 	.word	0x381d4951
 8003354:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003358:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003350 <commutate+0x3a0>
 800335c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	336c      	adds	r3, #108	; 0x6c
 8003380:	461a      	mov	r2, r3
 8003382:	eeb0 1a66 	vmov.f32	s2, s13
 8003386:	eef0 0a47 	vmov.f32	s1, s14
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	f7ff fa75 	bl	800287c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3360      	adds	r3, #96	; 0x60
 80033ba:	461a      	mov	r2, r3
 80033bc:	eef0 1a46 	vmov.f32	s3, s12
 80033c0:	eeb0 1a66 	vmov.f32	s2, s13
 80033c4:	eef0 0a47 	vmov.f32	s1, s14
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f7ff fb6a 	bl	8002aa4 <svm>

       set_dtc(controller);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff f92f 	bl	8002634 <set_dtc>

    }
 80033d6:	bf00      	nop
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop

080033e0 <torque_control>:


void torque_control(ControllerStruct *controller){
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800341e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <torque_control+0x84>)
 8003430:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <torque_control+0x84>)
 8003436:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800343a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800343e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000684 	.word	0x20000684

08003468 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "flash_access.h"

 void run_fsm(FSMStruct * fsmstate){
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	785a      	ldrb	r2, [r3, #1]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d00d      	beq.n	80034e8 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f92b 	bl	8003728 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	78db      	ldrb	r3, [r3, #3]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	785a      	ldrb	r2, [r3, #1]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8ba 	bl	800365c <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	f200 80a3 	bhi.w	8003638 <run_fsm+0x180>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <run_fsm+0x40>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	08003637 	.word	0x08003637
 80034fc:	08003515 	.word	0x08003515
 8003500:	080035eb 	.word	0x080035eb
 8003504:	08003639 	.word	0x08003639
 8003508:	08003637 	.word	0x08003637
 800350c:	0800362d 	.word	0x0800362d
 8003510:	08003637 	.word	0x08003637
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003514:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <run_fsm+0x188>)
 8003516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800351e:	4b49      	ldr	r3, [pc, #292]	; (8003644 <run_fsm+0x18c>)
 8003520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003524:	4a46      	ldr	r2, [pc, #280]	; (8003640 <run_fsm+0x188>)
 8003526:	4947      	ldr	r1, [pc, #284]	; (8003644 <run_fsm+0x18c>)
 8003528:	4847      	ldr	r0, [pc, #284]	; (8003648 <run_fsm+0x190>)
 800352a:	f7fd ff89 	bl	8001440 <order_phases>
				 save_to_flash();
				 load_from_flash();
				 update_fsm(fsmstate, 27);
			 }

			 break;
 800352e:	e083      	b.n	8003638 <run_fsm+0x180>
			 else if(!comm_encoder_cal.done_cal){
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <run_fsm+0x188>)
 8003532:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003536:	2b00      	cmp	r3, #0
 8003538:	d108      	bne.n	800354c <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800353a:	4b42      	ldr	r3, [pc, #264]	; (8003644 <run_fsm+0x18c>)
 800353c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003540:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <run_fsm+0x188>)
 8003542:	4940      	ldr	r1, [pc, #256]	; (8003644 <run_fsm+0x18c>)
 8003544:	4840      	ldr	r0, [pc, #256]	; (8003648 <run_fsm+0x190>)
 8003546:	f7fe f883 	bl	8001650 <calibrate_encoder>
			 break;
 800354a:	e075      	b.n	8003638 <run_fsm+0x180>
				 E_ZERO = comm_encoder_cal.ezero;
 800354c:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <run_fsm+0x188>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	4a3e      	ldr	r2, [pc, #248]	; (800364c <run_fsm+0x194>)
 8003552:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003554:	4b3d      	ldr	r3, [pc, #244]	; (800364c <run_fsm+0x194>)
 8003556:	695c      	ldr	r4, [r3, #20]
 8003558:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <run_fsm+0x190>)
 800355a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <run_fsm+0x194>)
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	425b      	negs	r3, r3
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003570:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003650 <run_fsm+0x198>
 8003574:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003578:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800357c:	eeb0 0a47 	vmov.f32	s0, s14
 8003580:	f00e fb20 	bl	8011bc4 <fmodf>
 8003584:	eef0 7a40 	vmov.f32	s15, s0
 8003588:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003654 <run_fsm+0x19c>
 800358c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003590:	ee17 0a90 	vmov	r0, s15
 8003594:	f7fd f800 	bl	8000598 <__aeabi_f2d>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4621      	mov	r1, r4
 800359e:	482e      	ldr	r0, [pc, #184]	; (8003658 <run_fsm+0x1a0>)
 80035a0:	f00a fdbc 	bl	800e11c <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 80035a4:	4a28      	ldr	r2, [pc, #160]	; (8003648 <run_fsm+0x190>)
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <run_fsm+0x188>)
 80035a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80035ac:	332c      	adds	r3, #44	; 0x2c
 80035ae:	f102 008c 	add.w	r0, r2, #140	; 0x8c
 80035b2:	4619      	mov	r1, r3
 80035b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b8:	461a      	mov	r2, r3
 80035ba:	f00a f92f 	bl	800d81c <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 80035be:	4a23      	ldr	r2, [pc, #140]	; (800364c <run_fsm+0x194>)
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <run_fsm+0x188>)
 80035c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80035c6:	332c      	adds	r3, #44	; 0x2c
 80035c8:	f102 0018 	add.w	r0, r2, #24
 80035cc:	4619      	mov	r1, r3
 80035ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d2:	461a      	mov	r2, r3
 80035d4:	f00a f922 	bl	800d81c <memcpy>
				 save_to_flash();
 80035d8:	f7fe ff7e 	bl	80024d8 <save_to_flash>
				 load_from_flash();
 80035dc:	f7fe ff1a 	bl	8002414 <load_from_flash>
				 update_fsm(fsmstate, 27);
 80035e0:	211b      	movs	r1, #27
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f912 	bl	800380c <update_fsm>
			 break;
 80035e8:	e026      	b.n	8003638 <run_fsm+0x180>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <run_fsm+0x194>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	dd0a      	ble.n	8003608 <run_fsm+0x150>
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <run_fsm+0x18c>)
 80035f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <run_fsm+0x194>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	dd03      	ble.n	8003608 <run_fsm+0x150>
				 zero_commands(&controller);
 8003600:	4810      	ldr	r0, [pc, #64]	; (8003644 <run_fsm+0x18c>)
 8003602:	f7ff ff31 	bl	8003468 <zero_commands>
 8003606:	e009      	b.n	800361c <run_fsm+0x164>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8003608:	480e      	ldr	r0, [pc, #56]	; (8003644 <run_fsm+0x18c>)
 800360a:	f7ff fee9 	bl	80033e0 <torque_control>
				 field_weaken(&controller);
 800360e:	480d      	ldr	r0, [pc, #52]	; (8003644 <run_fsm+0x18c>)
 8003610:	f7ff fc58 	bl	8002ec4 <field_weaken>
				 commutate(&controller, &comm_encoder);
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <run_fsm+0x190>)
 8003616:	480b      	ldr	r0, [pc, #44]	; (8003644 <run_fsm+0x18c>)
 8003618:	f7ff fcca 	bl	8002fb0 <commutate>
			 }
			 controller.timeout ++;
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <run_fsm+0x18c>)
 800361e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003622:	3301      	adds	r3, #1
 8003624:	4a07      	ldr	r2, [pc, #28]	; (8003644 <run_fsm+0x18c>)
 8003626:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 800362a:	e005      	b.n	8003638 <run_fsm+0x180>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 800362c:	2164      	movs	r1, #100	; 0x64
 800362e:	4806      	ldr	r0, [pc, #24]	; (8003648 <run_fsm+0x190>)
 8003630:	f001 fd14 	bl	800505c <ps_print>
			 break;
 8003634:	e000      	b.n	8003638 <run_fsm+0x180>
			 break;
 8003636:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}
 8003640:	20000a78 	.word	0x20000a78
 8003644:	20000784 	.word	0x20000784
 8003648:	200003e0 	.word	0x200003e0
 800364c:	20008f34 	.word	0x20008f34
 8003650:	47800000 	.word	0x47800000
 8003654:	40c90fdb 	.word	0x40c90fdb
 8003658:	080122cc 	.word	0x080122cc

0800365c <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d84d      	bhi.n	8003708 <fsm_enter_state+0xac>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <fsm_enter_state+0x18>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	0800368d 	.word	0x0800368d
 8003678:	080036c3 	.word	0x080036c3
 800367c:	08003699 	.word	0x08003699
 8003680:	08003709 	.word	0x08003709
 8003684:	08003693 	.word	0x08003693
 8003688:	08003707 	.word	0x08003707
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 800368c:	f000 f97c 	bl	8003988 <enter_menu_state>
				break;
 8003690:	e03a      	b.n	8003708 <fsm_enter_state+0xac>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8003692:	f000 f9a5 	bl	80039e0 <enter_setup_state>
				break;
 8003696:	e037      	b.n	8003708 <fsm_enter_state+0xac>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED1, GPIO_PIN_SET );
 8003698:	2201      	movs	r2, #1
 800369a:	2104      	movs	r1, #4
 800369c:	481c      	ldr	r0, [pc, #112]	; (8003710 <fsm_enter_state+0xb4>)
 800369e:	f005 fa3b 	bl	8008b18 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 80036a2:	481c      	ldr	r0, [pc, #112]	; (8003714 <fsm_enter_state+0xb8>)
 80036a4:	f7ff fb9a 	bl	8002ddc <reset_foc>
				drv_enable_gd(drv);
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <fsm_enter_state+0xbc>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	2100      	movs	r1, #0
 80036ae:	4611      	mov	r1, r2
 80036b0:	889a      	ldrh	r2, [r3, #4]
 80036b2:	2300      	movs	r3, #0
 80036b4:	f362 030f 	bfi	r3, r2, #0, #16
 80036b8:	4608      	mov	r0, r1
 80036ba:	4619      	mov	r1, r3
 80036bc:	f7fe fbc5 	bl	8001e4a <drv_enable_gd>
				break;
 80036c0:	e022      	b.n	8003708 <fsm_enter_state+0xac>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <fsm_enter_state+0xc0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <fsm_enter_state+0xc0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <fsm_enter_state+0xc0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <fsm_enter_state+0xc4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 80036e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e4:	2100      	movs	r1, #0
 80036e6:	480f      	ldr	r0, [pc, #60]	; (8003724 <fsm_enter_state+0xc8>)
 80036e8:	f00a f8a6 	bl	800d838 <memset>
				drv_enable_gd(drv);
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <fsm_enter_state+0xbc>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2100      	movs	r1, #0
 80036f2:	4611      	mov	r1, r2
 80036f4:	889a      	ldrh	r2, [r3, #4]
 80036f6:	2300      	movs	r3, #0
 80036f8:	f362 030f 	bfi	r3, r2, #0, #16
 80036fc:	4608      	mov	r0, r1
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fe fba3 	bl	8001e4a <drv_enable_gd>
				break;
 8003704:	e000      	b.n	8003708 <fsm_enter_state+0xac>
				break;
 8003706:	bf00      	nop

		}
 }
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	48000800 	.word	0x48000800
 8003714:	20000784 	.word	0x20000784
 8003718:	20009360 	.word	0x20009360
 800371c:	20000a78 	.word	0x20000a78
 8003720:	200003e0 	.word	0x200003e0
 8003724:	2000046c 	.word	0x2000046c

08003728 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d85e      	bhi.n	80037f6 <fsm_exit_state+0xce>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <fsm_exit_state+0x18>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003759 	.word	0x08003759
 8003744:	080037d7 	.word	0x080037d7
 8003748:	08003771 	.word	0x08003771
 800374c:	080037f7 	.word	0x080037f7
 8003750:	08003761 	.word	0x08003761
 8003754:	08003769 	.word	0x08003769
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	70da      	strb	r2, [r3, #3]
				break;
 800375e:	e04a      	b.n	80037f6 <fsm_exit_state+0xce>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	70da      	strb	r2, [r3, #3]
				break;
 8003766:	e046      	b.n	80037f6 <fsm_exit_state+0xce>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	70da      	strb	r2, [r3, #3]
				break;
 800376e:	e042      	b.n	80037f6 <fsm_exit_state+0xce>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <fsm_exit_state+0xd8>)
 8003772:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003776:	eef0 7ae7 	vabs.f32	s15, s15
 800377a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800377e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	d522      	bpl.n	80037ce <fsm_exit_state+0xa6>
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <fsm_exit_state+0xd8>)
 800378a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800378e:	eef0 7ae7 	vabs.f32	s15, s15
 8003792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	d516      	bpl.n	80037ce <fsm_exit_state+0xa6>
					fsmstate->ready = 1;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <fsm_exit_state+0xdc>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	2100      	movs	r1, #0
 80037ac:	4611      	mov	r1, r2
 80037ae:	889a      	ldrh	r2, [r3, #4]
 80037b0:	2300      	movs	r3, #0
 80037b2:	f362 030f 	bfi	r3, r2, #0, #16
 80037b6:	4608      	mov	r0, r1
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fe fb60 	bl	8001e7e <drv_disable_gd>
					reset_foc(&controller);
 80037be:	4810      	ldr	r0, [pc, #64]	; (8003800 <fsm_exit_state+0xd8>)
 80037c0:	f7ff fb0c 	bl	8002ddc <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED1, GPIO_PIN_RESET );
 80037c4:	2200      	movs	r2, #0
 80037c6:	2104      	movs	r1, #4
 80037c8:	480f      	ldr	r0, [pc, #60]	; (8003808 <fsm_exit_state+0xe0>)
 80037ca:	f005 f9a5 	bl	8008b18 <HAL_GPIO_WritePin>
				}
				zero_commands(&controller);		// Set commands to zero
 80037ce:	480c      	ldr	r0, [pc, #48]	; (8003800 <fsm_exit_state+0xd8>)
 80037d0:	f7ff fe4a 	bl	8003468 <zero_commands>
				break;
 80037d4:	e00f      	b.n	80037f6 <fsm_exit_state+0xce>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <fsm_exit_state+0xdc>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	2100      	movs	r1, #0
 80037dc:	4611      	mov	r1, r2
 80037de:	889a      	ldrh	r2, [r3, #4]
 80037e0:	2300      	movs	r3, #0
 80037e2:	f362 030f 	bfi	r3, r2, #0, #16
 80037e6:	4608      	mov	r0, r1
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7fe fb48 	bl	8001e7e <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	70da      	strb	r2, [r3, #3]
				break;
 80037f4:	bf00      	nop
		}

 }
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000784 	.word	0x20000784
 8003804:	20009360 	.word	0x20009360
 8003808:	48000800 	.word	0x48000800

0800380c <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	2b1b      	cmp	r3, #27
 800381c:	d106      	bne.n	800382c <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	70da      	strb	r2, [r3, #3]
		return;
 800382a:	e0a1      	b.n	8003970 <update_fsm+0x164>
	}
	switch(fsmstate->state){
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b05      	cmp	r3, #5
 8003832:	f200 809d 	bhi.w	8003970 <update_fsm+0x164>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <update_fsm+0x30>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	08003855 	.word	0x08003855
 8003840:	08003971 	.word	0x08003971
 8003844:	08003971 	.word	0x08003971
 8003848:	08003971 	.word	0x08003971
 800384c:	08003935 	.word	0x08003935
 8003850:	08003971 	.word	0x08003971
		case MENU_MODE:
			switch (fsm_input){
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	3b63      	subs	r3, #99	; 0x63
 8003858:	2b17      	cmp	r3, #23
 800385a:	f200 8088 	bhi.w	800396e <update_fsm+0x162>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <update_fsm+0x58>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	080038c5 	.word	0x080038c5
 8003868:	0800396f 	.word	0x0800396f
 800386c:	080038e1 	.word	0x080038e1
 8003870:	0800396f 	.word	0x0800396f
 8003874:	0800396f 	.word	0x0800396f
 8003878:	0800396f 	.word	0x0800396f
 800387c:	0800396f 	.word	0x0800396f
 8003880:	0800396f 	.word	0x0800396f
 8003884:	0800396f 	.word	0x0800396f
 8003888:	0800396f 	.word	0x0800396f
 800388c:	080038d3 	.word	0x080038d3
 8003890:	0800396f 	.word	0x0800396f
 8003894:	0800396f 	.word	0x0800396f
 8003898:	0800396f 	.word	0x0800396f
 800389c:	0800396f 	.word	0x0800396f
 80038a0:	0800396f 	.word	0x0800396f
 80038a4:	080038ef 	.word	0x080038ef
 80038a8:	0800396f 	.word	0x0800396f
 80038ac:	0800396f 	.word	0x0800396f
 80038b0:	0800396f 	.word	0x0800396f
 80038b4:	0800396f 	.word	0x0800396f
 80038b8:	0800396f 	.word	0x0800396f
 80038bc:	0800396f 	.word	0x0800396f
 80038c0:	080038fd 	.word	0x080038fd
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	70da      	strb	r2, [r3, #3]
					break;
 80038d0:	e02f      	b.n	8003932 <update_fsm+0x126>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	70da      	strb	r2, [r3, #3]
					break;
 80038de:	e028      	b.n	8003932 <update_fsm+0x126>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2205      	movs	r2, #5
 80038e4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	70da      	strb	r2, [r3, #3]
					break;
 80038ec:	e021      	b.n	8003932 <update_fsm+0x126>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	70da      	strb	r2, [r3, #3]
					break;
 80038fa:	e01a      	b.n	8003932 <update_fsm+0x126>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 80038fc:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <update_fsm+0x16c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 8003904:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800397c <update_fsm+0x170>
 8003908:	481b      	ldr	r0, [pc, #108]	; (8003978 <update_fsm+0x16c>)
 800390a:	f001 fa35 	bl	8004d78 <ps_sample>
					HAL_Delay(20);
 800390e:	2014      	movs	r0, #20
 8003910:	f002 f9e4 	bl	8005cdc <HAL_Delay>
					M_ZERO = comm_encoder.count;
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <update_fsm+0x16c>)
 8003916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <update_fsm+0x174>)
 800391a:	6113      	str	r3, [r2, #16]
					//if (!prefs.ready()) prefs.open();
					//    prefs.flush();                                                  // Write new prefs to flash
					//    prefs.close();
					//    prefs.load();
					//spi.SetMechOffset(M_OFFSET);
					save_to_flash();
 800391c:	f7fe fddc 	bl	80024d8 <save_to_flash>
					load_from_flash();
 8003920:	f7fe fd78 	bl	8002414 <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4f\n\r\n\r", M_ZERO);
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <update_fsm+0x174>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	4619      	mov	r1, r3
 800392a:	4816      	ldr	r0, [pc, #88]	; (8003984 <update_fsm+0x178>)
 800392c:	f00a fbf6 	bl	800e11c <iprintf>
					break;
 8003930:	bf00      	nop
				}
			break;
 8003932:	e01c      	b.n	800396e <update_fsm+0x162>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b0d      	cmp	r3, #13
 8003938:	d103      	bne.n	8003942 <update_fsm+0x136>
				process_user_input(fsmstate);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9c4 	bl	8003cc8 <process_user_input>
				break;
 8003940:	e016      	b.n	8003970 <update_fsm+0x164>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	7b1b      	ldrb	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <update_fsm+0x146>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	735a      	strb	r2, [r3, #13]
 8003950:	e006      	b.n	8003960 <update_fsm+0x154>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7b1b      	ldrb	r3, [r3, #12]
 8003956:	3b01      	subs	r3, #1
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7b1b      	ldrb	r3, [r3, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 800396c:	e000      	b.n	8003970 <update_fsm+0x164>
			break;
 800396e:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200003e0 	.word	0x200003e0
 800397c:	37d1b717 	.word	0x37d1b717
 8003980:	20008f34 	.word	0x20008f34
 8003984:	080122e0 	.word	0x080122e0

08003988 <enter_menu_state>:


 void enter_menu_state(void){
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 800398c:	480c      	ldr	r0, [pc, #48]	; (80039c0 <enter_menu_state+0x38>)
 800398e:	f00a fbc5 	bl	800e11c <iprintf>
	    printf(" Commands:\n\r");
 8003992:	480c      	ldr	r0, [pc, #48]	; (80039c4 <enter_menu_state+0x3c>)
 8003994:	f00a fbc2 	bl	800e11c <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003998:	480b      	ldr	r0, [pc, #44]	; (80039c8 <enter_menu_state+0x40>)
 800399a:	f00a fbbf 	bl	800e11c <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800399e:	480b      	ldr	r0, [pc, #44]	; (80039cc <enter_menu_state+0x44>)
 80039a0:	f00a fbbc 	bl	800e11c <iprintf>
	    printf(" s - Setup\n\r");
 80039a4:	480a      	ldr	r0, [pc, #40]	; (80039d0 <enter_menu_state+0x48>)
 80039a6:	f00a fbb9 	bl	800e11c <iprintf>
	    printf(" e - Display Encoder\n\r");
 80039aa:	480a      	ldr	r0, [pc, #40]	; (80039d4 <enter_menu_state+0x4c>)
 80039ac:	f00a fbb6 	bl	800e11c <iprintf>
	    printf(" z - Set Zero Position\n\r");
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <enter_menu_state+0x50>)
 80039b2:	f00a fbb3 	bl	800e11c <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 80039b6:	4809      	ldr	r0, [pc, #36]	; (80039dc <enter_menu_state+0x54>)
 80039b8:	f00a fbb0 	bl	800e11c <iprintf>

	    //gpio.led->write(0);
 }
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08012308 	.word	0x08012308
 80039c4:	08012310 	.word	0x08012310
 80039c8:	08012320 	.word	0x08012320
 80039cc:	08012334 	.word	0x08012334
 80039d0:	08012350 	.word	0x08012350
 80039d4:	08012360 	.word	0x08012360
 80039d8:	08012378 	.word	0x08012378
 80039dc:	08012394 	.word	0x08012394

080039e0 <enter_setup_state>:

 void enter_setup_state(void){
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 80039e6:	487d      	ldr	r0, [pc, #500]	; (8003bdc <enter_setup_state+0x1fc>)
 80039e8:	f00a fb98 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80039ec:	4b7c      	ldr	r3, [pc, #496]	; (8003be0 <enter_setup_state+0x200>)
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	4b7c      	ldr	r3, [pc, #496]	; (8003be4 <enter_setup_state+0x204>)
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <enter_setup_state+0x208>)
 80039f6:	4a7d      	ldr	r2, [pc, #500]	; (8003bec <enter_setup_state+0x20c>)
 80039f8:	497d      	ldr	r1, [pc, #500]	; (8003bf0 <enter_setup_state+0x210>)
 80039fa:	487e      	ldr	r0, [pc, #504]	; (8003bf4 <enter_setup_state+0x214>)
 80039fc:	f00a fb8e 	bl	800e11c <iprintf>
	    printf("\r\n Motor:\r\n");
 8003a00:	487d      	ldr	r0, [pc, #500]	; (8003bf8 <enter_setup_state+0x218>)
 8003a02:	f00a fc11 	bl	800e228 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003a06:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <enter_setup_state+0x21c>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fc fdc4 	bl	8000598 <__aeabi_f2d>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a18:	4b79      	ldr	r3, [pc, #484]	; (8003c00 <enter_setup_state+0x220>)
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <enter_setup_state+0x224>)
 8003a1e:	4a7a      	ldr	r2, [pc, #488]	; (8003c08 <enter_setup_state+0x228>)
 8003a20:	497a      	ldr	r1, [pc, #488]	; (8003c0c <enter_setup_state+0x22c>)
 8003a22:	487b      	ldr	r0, [pc, #492]	; (8003c10 <enter_setup_state+0x230>)
 8003a24:	f00a fb7a 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003a28:	4b74      	ldr	r3, [pc, #464]	; (8003bfc <enter_setup_state+0x21c>)
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc fdb3 	bl	8000598 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a3a:	4b71      	ldr	r3, [pc, #452]	; (8003c00 <enter_setup_state+0x220>)
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	4b71      	ldr	r3, [pc, #452]	; (8003c04 <enter_setup_state+0x224>)
 8003a40:	4a74      	ldr	r2, [pc, #464]	; (8003c14 <enter_setup_state+0x234>)
 8003a42:	4975      	ldr	r1, [pc, #468]	; (8003c18 <enter_setup_state+0x238>)
 8003a44:	4875      	ldr	r0, [pc, #468]	; (8003c1c <enter_setup_state+0x23c>)
 8003a46:	f00a fb69 	bl	800e11c <iprintf>
	    printf("\r\n Control:\r\n");
 8003a4a:	4875      	ldr	r0, [pc, #468]	; (8003c20 <enter_setup_state+0x240>)
 8003a4c:	f00a fbec 	bl	800e228 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003a50:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <enter_setup_state+0x21c>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fc fd9f 	bl	8000598 <__aeabi_f2d>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a62:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <enter_setup_state+0x244>)
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	4b70      	ldr	r3, [pc, #448]	; (8003c28 <enter_setup_state+0x248>)
 8003a68:	4a70      	ldr	r2, [pc, #448]	; (8003c2c <enter_setup_state+0x24c>)
 8003a6a:	4971      	ldr	r1, [pc, #452]	; (8003c30 <enter_setup_state+0x250>)
 8003a6c:	4871      	ldr	r0, [pc, #452]	; (8003c34 <enter_setup_state+0x254>)
 8003a6e:	f00a fb55 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8003a72:	4b62      	ldr	r3, [pc, #392]	; (8003bfc <enter_setup_state+0x21c>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fc fd8e 	bl	8000598 <__aeabi_f2d>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <enter_setup_state+0x258>)
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <enter_setup_state+0x25c>)
 8003a8a:	4a6d      	ldr	r2, [pc, #436]	; (8003c40 <enter_setup_state+0x260>)
 8003a8c:	496d      	ldr	r1, [pc, #436]	; (8003c44 <enter_setup_state+0x264>)
 8003a8e:	4869      	ldr	r0, [pc, #420]	; (8003c34 <enter_setup_state+0x254>)
 8003a90:	f00a fb44 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <enter_setup_state+0x21c>)
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd7d 	bl	8000598 <__aeabi_f2d>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003aa6:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <enter_setup_state+0x220>)
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <enter_setup_state+0x220>)
 8003aac:	4a66      	ldr	r2, [pc, #408]	; (8003c48 <enter_setup_state+0x268>)
 8003aae:	4967      	ldr	r1, [pc, #412]	; (8003c4c <enter_setup_state+0x26c>)
 8003ab0:	4860      	ldr	r0, [pc, #384]	; (8003c34 <enter_setup_state+0x254>)
 8003ab2:	f00a fb33 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <enter_setup_state+0x21c>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fd6c 	bl	8000598 <__aeabi_f2d>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ac8:	4b4d      	ldr	r3, [pc, #308]	; (8003c00 <enter_setup_state+0x220>)
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	4b4c      	ldr	r3, [pc, #304]	; (8003c00 <enter_setup_state+0x220>)
 8003ace:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <enter_setup_state+0x270>)
 8003ad0:	4960      	ldr	r1, [pc, #384]	; (8003c54 <enter_setup_state+0x274>)
 8003ad2:	4858      	ldr	r0, [pc, #352]	; (8003c34 <enter_setup_state+0x254>)
 8003ad4:	f00a fb22 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003ad8:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <enter_setup_state+0x21c>)
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd5b 	bl	8000598 <__aeabi_f2d>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003aea:	4b5b      	ldr	r3, [pc, #364]	; (8003c58 <enter_setup_state+0x278>)
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4b53      	ldr	r3, [pc, #332]	; (8003c3c <enter_setup_state+0x25c>)
 8003af0:	4a5a      	ldr	r2, [pc, #360]	; (8003c5c <enter_setup_state+0x27c>)
 8003af2:	495b      	ldr	r1, [pc, #364]	; (8003c60 <enter_setup_state+0x280>)
 8003af4:	484f      	ldr	r0, [pc, #316]	; (8003c34 <enter_setup_state+0x254>)
 8003af6:	f00a fb11 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003afa:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <enter_setup_state+0x21c>)
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fd4a 	bl	8000598 <__aeabi_f2d>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b0c:	4b55      	ldr	r3, [pc, #340]	; (8003c64 <enter_setup_state+0x284>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4b4a      	ldr	r3, [pc, #296]	; (8003c3c <enter_setup_state+0x25c>)
 8003b12:	4a55      	ldr	r2, [pc, #340]	; (8003c68 <enter_setup_state+0x288>)
 8003b14:	4955      	ldr	r1, [pc, #340]	; (8003c6c <enter_setup_state+0x28c>)
 8003b16:	4847      	ldr	r0, [pc, #284]	; (8003c34 <enter_setup_state+0x254>)
 8003b18:	f00a fb00 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003b1c:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <enter_setup_state+0x21c>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fc fd39 	bl	8000598 <__aeabi_f2d>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b2e:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <enter_setup_state+0x290>)
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	4b42      	ldr	r3, [pc, #264]	; (8003c3c <enter_setup_state+0x25c>)
 8003b34:	4a4f      	ldr	r2, [pc, #316]	; (8003c74 <enter_setup_state+0x294>)
 8003b36:	4950      	ldr	r1, [pc, #320]	; (8003c78 <enter_setup_state+0x298>)
 8003b38:	483e      	ldr	r0, [pc, #248]	; (8003c34 <enter_setup_state+0x254>)
 8003b3a:	f00a faef 	bl	800e11c <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <enter_setup_state+0x21c>)
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fd28 	bl	8000598 <__aeabi_f2d>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b50:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <enter_setup_state+0x258>)
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <enter_setup_state+0x25c>)
 8003b56:	4a49      	ldr	r2, [pc, #292]	; (8003c7c <enter_setup_state+0x29c>)
 8003b58:	4949      	ldr	r1, [pc, #292]	; (8003c80 <enter_setup_state+0x2a0>)
 8003b5a:	4836      	ldr	r0, [pc, #216]	; (8003c34 <enter_setup_state+0x254>)
 8003b5c:	f00a fade 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003b60:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <enter_setup_state+0x21c>)
 8003b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fd17 	bl	8000598 <__aeabi_f2d>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b72:	4b44      	ldr	r3, [pc, #272]	; (8003c84 <enter_setup_state+0x2a4>)
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <enter_setup_state+0x25c>)
 8003b78:	4a43      	ldr	r2, [pc, #268]	; (8003c88 <enter_setup_state+0x2a8>)
 8003b7a:	4944      	ldr	r1, [pc, #272]	; (8003c8c <enter_setup_state+0x2ac>)
 8003b7c:	482d      	ldr	r0, [pc, #180]	; (8003c34 <enter_setup_state+0x254>)
 8003b7e:	f00a facd 	bl	800e11c <iprintf>
	    printf("\r\n CAN:\r\n");
 8003b82:	4843      	ldr	r0, [pc, #268]	; (8003c90 <enter_setup_state+0x2b0>)
 8003b84:	f00a fb50 	bl	800e228 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003b88:	4b42      	ldr	r3, [pc, #264]	; (8003c94 <enter_setup_state+0x2b4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <enter_setup_state+0x2b8>)
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <enter_setup_state+0x224>)
 8003b94:	4a41      	ldr	r2, [pc, #260]	; (8003c9c <enter_setup_state+0x2bc>)
 8003b96:	4942      	ldr	r1, [pc, #264]	; (8003ca0 <enter_setup_state+0x2c0>)
 8003b98:	4842      	ldr	r0, [pc, #264]	; (8003ca4 <enter_setup_state+0x2c4>)
 8003b9a:	f00a fabf 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <enter_setup_state+0x2b4>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <enter_setup_state+0x2b8>)
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <enter_setup_state+0x224>)
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <enter_setup_state+0x2c8>)
 8003bac:	493f      	ldr	r1, [pc, #252]	; (8003cac <enter_setup_state+0x2cc>)
 8003bae:	483d      	ldr	r0, [pc, #244]	; (8003ca4 <enter_setup_state+0x2c4>)
 8003bb0:	f00a fab4 	bl	800e11c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <enter_setup_state+0x2b4>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <enter_setup_state+0x2d0>)
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <enter_setup_state+0x224>)
 8003bc0:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <enter_setup_state+0x2d4>)
 8003bc2:	493d      	ldr	r1, [pc, #244]	; (8003cb8 <enter_setup_state+0x2d8>)
 8003bc4:	483d      	ldr	r0, [pc, #244]	; (8003cbc <enter_setup_state+0x2dc>)
 8003bc6:	f00a faa9 	bl	800e11c <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003bca:	483d      	ldr	r0, [pc, #244]	; (8003cc0 <enter_setup_state+0x2e0>)
 8003bcc:	f00a faa6 	bl	800e11c <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003bd0:	483c      	ldr	r0, [pc, #240]	; (8003cc4 <enter_setup_state+0x2e4>)
 8003bd2:	f00a faa3 	bl	800e11c <iprintf>
 }
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	080123ac 	.word	0x080123ac
 8003be0:	08012400 	.word	0x08012400
 8003be4:	08012410 	.word	0x08012410
 8003be8:	080123c8 	.word	0x080123c8
 8003bec:	080123cc 	.word	0x080123cc
 8003bf0:	080123d8 	.word	0x080123d8
 8003bf4:	080123e0 	.word	0x080123e0
 8003bf8:	08012414 	.word	0x08012414
 8003bfc:	20000684 	.word	0x20000684
 8003c00:	08012454 	.word	0x08012454
 8003c04:	08012420 	.word	0x08012420
 8003c08:	08012424 	.word	0x08012424
 8003c0c:	08012430 	.word	0x08012430
 8003c10:	08012434 	.word	0x08012434
 8003c14:	08012458 	.word	0x08012458
 8003c18:	08012470 	.word	0x08012470
 8003c1c:	08012474 	.word	0x08012474
 8003c20:	08012494 	.word	0x08012494
 8003c24:	080124e4 	.word	0x080124e4
 8003c28:	080124a4 	.word	0x080124a4
 8003c2c:	080124a8 	.word	0x080124a8
 8003c30:	080124c0 	.word	0x080124c0
 8003c34:	080124c4 	.word	0x080124c4
 8003c38:	08012508 	.word	0x08012508
 8003c3c:	080124ec 	.word	0x080124ec
 8003c40:	080124f0 	.word	0x080124f0
 8003c44:	08012504 	.word	0x08012504
 8003c48:	08012510 	.word	0x08012510
 8003c4c:	0801252c 	.word	0x0801252c
 8003c50:	08012530 	.word	0x08012530
 8003c54:	08012550 	.word	0x08012550
 8003c58:	08012574 	.word	0x08012574
 8003c5c:	08012554 	.word	0x08012554
 8003c60:	08012570 	.word	0x08012570
 8003c64:	080125a0 	.word	0x080125a0
 8003c68:	0801257c 	.word	0x0801257c
 8003c6c:	0801259c 	.word	0x0801259c
 8003c70:	080125c0 	.word	0x080125c0
 8003c74:	080125a4 	.word	0x080125a4
 8003c78:	080125bc 	.word	0x080125bc
 8003c7c:	080125c8 	.word	0x080125c8
 8003c80:	080125e0 	.word	0x080125e0
 8003c84:	08012600 	.word	0x08012600
 8003c88:	080125e4 	.word	0x080125e4
 8003c8c:	080125fc 	.word	0x080125fc
 8003c90:	08012608 	.word	0x08012608
 8003c94:	20008f34 	.word	0x20008f34
 8003c98:	08012640 	.word	0x08012640
 8003c9c:	08012614 	.word	0x08012614
 8003ca0:	0801261c 	.word	0x0801261c
 8003ca4:	08012620 	.word	0x08012620
 8003ca8:	08012644 	.word	0x08012644
 8003cac:	08012654 	.word	0x08012654
 8003cb0:	08012698 	.word	0x08012698
 8003cb4:	08012658 	.word	0x08012658
 8003cb8:	08012678 	.word	0x08012678
 8003cbc:	0801267c 	.word	0x0801267c
 8003cc0:	080126a0 	.word	0x080126a0
 8003cc4:	080126ec 	.word	0x080126ec

08003cc8 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	7b5b      	ldrb	r3, [r3, #13]
 8003cd4:	3b61      	subs	r3, #97	; 0x61
 8003cd6:	2b17      	cmp	r3, #23
 8003cd8:	f200 8266 	bhi.w	80041a8 <process_user_input+0x4e0>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <process_user_input+0x1c>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003f43 	.word	0x08003f43
 8003ce8:	08003d45 	.word	0x08003d45
 8003cec:	08003eef 	.word	0x08003eef
 8003cf0:	080040bd 	.word	0x080040bd
 8003cf4:	080041a9 	.word	0x080041a9
 8003cf8:	08003e29 	.word	0x08003e29
 8003cfc:	08003f97 	.word	0x08003f97
 8003d00:	08003e9b 	.word	0x08003e9b
 8003d04:	08003d99 	.word	0x08003d99
 8003d08:	080041a9 	.word	0x080041a9
 8003d0c:	08003fdb 	.word	0x08003fdb
 8003d10:	08003dd5 	.word	0x08003dd5
 8003d14:	08003db7 	.word	0x08003db7
 8003d18:	080041a9 	.word	0x080041a9
 8003d1c:	080041a9 	.word	0x080041a9
 8003d20:	08004101 	.word	0x08004101
 8003d24:	080041a9 	.word	0x080041a9
 8003d28:	080041a9 	.word	0x080041a9
 8003d2c:	080041a9 	.word	0x080041a9
 8003d30:	08003e7d 	.word	0x08003e7d
 8003d34:	080041a9 	.word	0x080041a9
 8003d38:	08004155 	.word	0x08004155
 8003d3c:	080041a9 	.word	0x080041a9
 8003d40:	0800401f 	.word	0x0800401f
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f009 fd35 	bl	800d7b8 <atof>
 8003d4e:	ec53 2b10 	vmov	r2, r3, d0
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f7fc ff6f 	bl	8000c38 <__aeabi_d2f>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8004064 <process_user_input+0x39c>
 8003d60:	ee00 3a10 	vmov	s0, r3
 8003d64:	f00d fea7 	bl	8011ab6 <fminf>
 8003d68:	eef0 7a40 	vmov.f32	s15, s0
 8003d6c:	eddf 0abe 	vldr	s1, [pc, #760]	; 8004068 <process_user_input+0x3a0>
 8003d70:	eeb0 0a67 	vmov.f32	s0, s15
 8003d74:	f00d fe84 	bl	8011a80 <fmaxf>
 8003d78:	eef0 7a40 	vmov.f32	s15, s0
 8003d7c:	4bbb      	ldr	r3, [pc, #748]	; (800406c <process_user_input+0x3a4>)
 8003d7e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003d82:	4bba      	ldr	r3, [pc, #744]	; (800406c <process_user_input+0x3a4>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc fc06 	bl	8000598 <__aeabi_f2d>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	48b7      	ldr	r0, [pc, #732]	; (8004070 <process_user_input+0x3a8>)
 8003d92:	f00a f9c3 	bl	800e11c <iprintf>
			 break;
 8003d96:	e20e      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f009 fd0e 	bl	800d7be <atoi>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4ab3      	ldr	r2, [pc, #716]	; (8004074 <process_user_input+0x3ac>)
 8003da6:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003da8:	4bb2      	ldr	r3, [pc, #712]	; (8004074 <process_user_input+0x3ac>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4619      	mov	r1, r3
 8003dae:	48b2      	ldr	r0, [pc, #712]	; (8004078 <process_user_input+0x3b0>)
 8003db0:	f00a f9b4 	bl	800e11c <iprintf>
			 break;
 8003db4:	e1ff      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f009 fcff 	bl	800d7be <atoi>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4aac      	ldr	r2, [pc, #688]	; (8004074 <process_user_input+0x3ac>)
 8003dc4:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8003dc6:	4bab      	ldr	r3, [pc, #684]	; (8004074 <process_user_input+0x3ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	48ab      	ldr	r0, [pc, #684]	; (800407c <process_user_input+0x3b4>)
 8003dce:	f00a f9a5 	bl	800e11c <iprintf>
			 break;
 8003dd2:	e1f0      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f009 fced 	bl	800d7b8 <atof>
 8003dde:	ec53 2b10 	vmov	r2, r3, d0
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	f7fc ff27 	bl	8000c38 <__aeabi_d2f>
 8003dea:	4603      	mov	r3, r0
 8003dec:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8004080 <process_user_input+0x3b8>
 8003df0:	ee00 3a10 	vmov	s0, r3
 8003df4:	f00d fe5f 	bl	8011ab6 <fminf>
 8003df8:	eef0 7a40 	vmov.f32	s15, s0
 8003dfc:	eddf 0aae 	vldr	s1, [pc, #696]	; 80040b8 <process_user_input+0x3f0>
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	f00d fe3c 	bl	8011a80 <fmaxf>
 8003e08:	eef0 7a40 	vmov.f32	s15, s0
 8003e0c:	4b97      	ldr	r3, [pc, #604]	; (800406c <process_user_input+0x3a4>)
 8003e0e:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003e12:	4b96      	ldr	r3, [pc, #600]	; (800406c <process_user_input+0x3a4>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc fbbe 	bl	8000598 <__aeabi_f2d>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4898      	ldr	r0, [pc, #608]	; (8004084 <process_user_input+0x3bc>)
 8003e22:	f00a f97b 	bl	800e11c <iprintf>
			 break;
 8003e26:	e1c6      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f009 fcc3 	bl	800d7b8 <atof>
 8003e32:	ec53 2b10 	vmov	r2, r3, d0
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f7fc fefd 	bl	8000c38 <__aeabi_d2f>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	eddf 0a91 	vldr	s1, [pc, #580]	; 8004088 <process_user_input+0x3c0>
 8003e44:	ee00 3a10 	vmov	s0, r3
 8003e48:	f00d fe35 	bl	8011ab6 <fminf>
 8003e4c:	eef0 7a40 	vmov.f32	s15, s0
 8003e50:	eddf 0a99 	vldr	s1, [pc, #612]	; 80040b8 <process_user_input+0x3f0>
 8003e54:	eeb0 0a67 	vmov.f32	s0, s15
 8003e58:	f00d fe12 	bl	8011a80 <fmaxf>
 8003e5c:	eef0 7a40 	vmov.f32	s15, s0
 8003e60:	4b82      	ldr	r3, [pc, #520]	; (800406c <process_user_input+0x3a4>)
 8003e62:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003e66:	4b81      	ldr	r3, [pc, #516]	; (800406c <process_user_input+0x3a4>)
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fb94 	bl	8000598 <__aeabi_f2d>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4885      	ldr	r0, [pc, #532]	; (800408c <process_user_input+0x3c4>)
 8003e76:	f00a f951 	bl	800e11c <iprintf>
			 break;
 8003e7a:	e19c      	b.n	80041b6 <process_user_input+0x4ee>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f009 fc9c 	bl	800d7be <atoi>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4a7a      	ldr	r2, [pc, #488]	; (8004074 <process_user_input+0x3ac>)
 8003e8a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003e8c:	4b79      	ldr	r3, [pc, #484]	; (8004074 <process_user_input+0x3ac>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4619      	mov	r1, r3
 8003e92:	487f      	ldr	r0, [pc, #508]	; (8004090 <process_user_input+0x3c8>)
 8003e94:	f00a f942 	bl	800e11c <iprintf>
			 break;
 8003e98:	e18d      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f009 fc8a 	bl	800d7b8 <atof>
 8003ea4:	ec53 2b10 	vmov	r2, r3, d0
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fc fec4 	bl	8000c38 <__aeabi_d2f>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	eddf 0a78 	vldr	s1, [pc, #480]	; 8004094 <process_user_input+0x3cc>
 8003eb6:	ee00 3a10 	vmov	s0, r3
 8003eba:	f00d fdfc 	bl	8011ab6 <fminf>
 8003ebe:	eef0 7a40 	vmov.f32	s15, s0
 8003ec2:	eddf 0a7d 	vldr	s1, [pc, #500]	; 80040b8 <process_user_input+0x3f0>
 8003ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eca:	f00d fdd9 	bl	8011a80 <fmaxf>
 8003ece:	eef0 7a40 	vmov.f32	s15, s0
 8003ed2:	4b66      	ldr	r3, [pc, #408]	; (800406c <process_user_input+0x3a4>)
 8003ed4:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003ed8:	4b64      	ldr	r3, [pc, #400]	; (800406c <process_user_input+0x3a4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fb5b 	bl	8000598 <__aeabi_f2d>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	486c      	ldr	r0, [pc, #432]	; (8004098 <process_user_input+0x3d0>)
 8003ee8:	f00a f918 	bl	800e11c <iprintf>
			 break;
 8003eec:	e163      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f009 fc60 	bl	800d7b8 <atof>
 8003ef8:	ec53 2b10 	vmov	r2, r3, d0
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7fc fe9a 	bl	8000c38 <__aeabi_d2f>
 8003f04:	4603      	mov	r3, r0
 8003f06:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8004080 <process_user_input+0x3b8>
 8003f0a:	ee00 3a10 	vmov	s0, r3
 8003f0e:	f00d fdd2 	bl	8011ab6 <fminf>
 8003f12:	eef0 7a40 	vmov.f32	s15, s0
 8003f16:	eddf 0a68 	vldr	s1, [pc, #416]	; 80040b8 <process_user_input+0x3f0>
 8003f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f1e:	f00d fdaf 	bl	8011a80 <fmaxf>
 8003f22:	eef0 7a40 	vmov.f32	s15, s0
 8003f26:	4b51      	ldr	r3, [pc, #324]	; (800406c <process_user_input+0x3a4>)
 8003f28:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	; (800406c <process_user_input+0x3a4>)
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc fb31 	bl	8000598 <__aeabi_f2d>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4858      	ldr	r0, [pc, #352]	; (800409c <process_user_input+0x3d4>)
 8003f3c:	f00a f8ee 	bl	800e11c <iprintf>
			 break;
 8003f40:	e139      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4618      	mov	r0, r3
 8003f48:	f009 fc36 	bl	800d7b8 <atof>
 8003f4c:	ec53 2b10 	vmov	r2, r3, d0
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	f7fc fe70 	bl	8000c38 <__aeabi_d2f>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003f5e:	ee00 3a10 	vmov	s0, r3
 8003f62:	f00d fda8 	bl	8011ab6 <fminf>
 8003f66:	eef0 7a40 	vmov.f32	s15, s0
 8003f6a:	eddf 0a53 	vldr	s1, [pc, #332]	; 80040b8 <process_user_input+0x3f0>
 8003f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f72:	f00d fd85 	bl	8011a80 <fmaxf>
 8003f76:	eef0 7a40 	vmov.f32	s15, s0
 8003f7a:	4b3c      	ldr	r3, [pc, #240]	; (800406c <process_user_input+0x3a4>)
 8003f7c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003f80:	4b3a      	ldr	r3, [pc, #232]	; (800406c <process_user_input+0x3a4>)
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fc fb07 	bl	8000598 <__aeabi_f2d>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4844      	ldr	r0, [pc, #272]	; (80040a0 <process_user_input+0x3d8>)
 8003f90:	f00a f8c4 	bl	800e11c <iprintf>
			 break;
 8003f94:	e10f      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f009 fc0c 	bl	800d7b8 <atof>
 8003fa0:	ec53 2b10 	vmov	r2, r3, d0
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f7fc fe46 	bl	8000c38 <__aeabi_d2f>
 8003fac:	4603      	mov	r3, r0
 8003fae:	eddf 0a3d 	vldr	s1, [pc, #244]	; 80040a4 <process_user_input+0x3dc>
 8003fb2:	ee00 3a10 	vmov	s0, r3
 8003fb6:	f00d fd63 	bl	8011a80 <fmaxf>
 8003fba:	eef0 7a40 	vmov.f32	s15, s0
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	; (800406c <process_user_input+0x3a4>)
 8003fc0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8003fc4:	4b29      	ldr	r3, [pc, #164]	; (800406c <process_user_input+0x3a4>)
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc fae5 	bl	8000598 <__aeabi_f2d>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4835      	ldr	r0, [pc, #212]	; (80040a8 <process_user_input+0x3e0>)
 8003fd4:	f00a f8a2 	bl	800e11c <iprintf>
			 break;
 8003fd8:	e0ed      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f009 fbea 	bl	800d7b8 <atof>
 8003fe4:	ec53 2b10 	vmov	r2, r3, d0
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7fc fe24 	bl	8000c38 <__aeabi_d2f>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80040ac <process_user_input+0x3e4>
 8003ff6:	ee00 3a10 	vmov	s0, r3
 8003ffa:	f00d fd41 	bl	8011a80 <fmaxf>
 8003ffe:	eef0 7a40 	vmov.f32	s15, s0
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <process_user_input+0x3a4>)
 8004004:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8004008:	4b18      	ldr	r3, [pc, #96]	; (800406c <process_user_input+0x3a4>)
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc fac3 	bl	8000598 <__aeabi_f2d>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4826      	ldr	r0, [pc, #152]	; (80040b0 <process_user_input+0x3e8>)
 8004018:	f00a f880 	bl	800e11c <iprintf>
			 break;
 800401c:	e0cb      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f009 fbc8 	bl	800d7b8 <atof>
 8004028:	ec53 2b10 	vmov	r2, r3, d0
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f7fc fe02 	bl	8000c38 <__aeabi_d2f>
 8004034:	4603      	mov	r3, r0
 8004036:	eddf 0a20 	vldr	s1, [pc, #128]	; 80040b8 <process_user_input+0x3f0>
 800403a:	ee00 3a10 	vmov	s0, r3
 800403e:	f00d fd1f 	bl	8011a80 <fmaxf>
 8004042:	eef0 7a40 	vmov.f32	s15, s0
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <process_user_input+0x3a4>)
 8004048:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <process_user_input+0x3a4>)
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc faa1 	bl	8000598 <__aeabi_f2d>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4816      	ldr	r0, [pc, #88]	; (80040b4 <process_user_input+0x3ec>)
 800405c:	f00a f85e 	bl	800e11c <iprintf>
			 break;
 8004060:	e0a9      	b.n	80041b6 <process_user_input+0x4ee>
 8004062:	bf00      	nop
 8004064:	44fa0000 	.word	0x44fa0000
 8004068:	42c80000 	.word	0x42c80000
 800406c:	20000684 	.word	0x20000684
 8004070:	08012718 	.word	0x08012718
 8004074:	20008f34 	.word	0x20008f34
 8004078:	0801272c 	.word	0x0801272c
 800407c:	08012740 	.word	0x08012740
 8004080:	42200000 	.word	0x42200000
 8004084:	08012758 	.word	0x08012758
 8004088:	42040000 	.word	0x42040000
 800408c:	0801276c 	.word	0x0801276c
 8004090:	08012784 	.word	0x08012784
 8004094:	43160000 	.word	0x43160000
 8004098:	0801279c 	.word	0x0801279c
 800409c:	080127b4 	.word	0x080127b4
 80040a0:	080127cc 	.word	0x080127cc
 80040a4:	3a83126f 	.word	0x3a83126f
 80040a8:	080127e0 	.word	0x080127e0
 80040ac:	38d1b717 	.word	0x38d1b717
 80040b0:	080127f0 	.word	0x080127f0
 80040b4:	08012800 	.word	0x08012800
 80040b8:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4618      	mov	r0, r3
 80040c2:	f009 fb79 	bl	800d7b8 <atof>
 80040c6:	ec53 2b10 	vmov	r2, r3, d0
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fc fdb3 	bl	8000c38 <__aeabi_d2f>
 80040d2:	4603      	mov	r3, r0
 80040d4:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80040b8 <process_user_input+0x3f0>
 80040d8:	ee00 3a10 	vmov	s0, r3
 80040dc:	f00d fcd0 	bl	8011a80 <fmaxf>
 80040e0:	eef0 7a40 	vmov.f32	s15, s0
 80040e4:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <process_user_input+0x518>)
 80040e6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80040ea:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <process_user_input+0x518>)
 80040ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc fa52 	bl	8000598 <__aeabi_f2d>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	483a      	ldr	r0, [pc, #232]	; (80041e4 <process_user_input+0x51c>)
 80040fa:	f00a f80f 	bl	800e11c <iprintf>
			 break;
 80040fe:	e05a      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f009 fb57 	bl	800d7b8 <atof>
 800410a:	ec53 2b10 	vmov	r2, r3, d0
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	f7fc fd91 	bl	8000c38 <__aeabi_d2f>
 8004116:	4603      	mov	r3, r0
 8004118:	eddf 0a33 	vldr	s1, [pc, #204]	; 80041e8 <process_user_input+0x520>
 800411c:	ee00 3a10 	vmov	s0, r3
 8004120:	f00d fcae 	bl	8011a80 <fmaxf>
 8004124:	eef0 7a40 	vmov.f32	s15, s0
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <process_user_input+0x518>)
 800412a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 800412e:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <process_user_input+0x518>)
 8004130:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004134:	eef1 7a67 	vneg.f32	s15, s15
 8004138:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <process_user_input+0x518>)
 800413a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <process_user_input+0x518>)
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc fa28 	bl	8000598 <__aeabi_f2d>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4827      	ldr	r0, [pc, #156]	; (80041ec <process_user_input+0x524>)
 800414e:	f009 ffe5 	bl	800e11c <iprintf>
			 break;
 8004152:	e030      	b.n	80041b6 <process_user_input+0x4ee>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f009 fb2d 	bl	800d7b8 <atof>
 800415e:	ec53 2b10 	vmov	r2, r3, d0
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f7fc fd67 	bl	8000c38 <__aeabi_d2f>
 800416a:	4603      	mov	r3, r0
 800416c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80041e8 <process_user_input+0x520>
 8004170:	ee00 3a10 	vmov	s0, r3
 8004174:	f00d fc84 	bl	8011a80 <fmaxf>
 8004178:	eef0 7a40 	vmov.f32	s15, s0
 800417c:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <process_user_input+0x518>)
 800417e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <process_user_input+0x518>)
 8004184:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004188:	eef1 7a67 	vneg.f32	s15, s15
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <process_user_input+0x518>)
 800418e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <process_user_input+0x518>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc f9fe 	bl	8000598 <__aeabi_f2d>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4813      	ldr	r0, [pc, #76]	; (80041f0 <process_user_input+0x528>)
 80041a2:	f009 ffbb 	bl	800e11c <iprintf>
			 break;
 80041a6:	e006      	b.n	80041b6 <process_user_input+0x4ee>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4811      	ldr	r0, [pc, #68]	; (80041f4 <process_user_input+0x52c>)
 80041b0:	f009 ffb4 	bl	800e11c <iprintf>
			 break;
 80041b4:	bf00      	nop
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 80041b6:	f7fe f98f 	bl	80024d8 <save_to_flash>
	 enter_setup_state();
 80041ba:	f7ff fc11 	bl	80039e0 <enter_setup_state>

	 fsmstate->bytecount = 0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2208      	movs	r2, #8
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f009 fb30 	bl	800d838 <memset>
 }
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000684 	.word	0x20000684
 80041e4:	08012814 	.word	0x08012814
 80041e8:	00000000 	.word	0x00000000
 80041ec:	08012828 	.word	0x08012828
 80041f0:	0801283c 	.word	0x0801283c
 80041f4:	08012850 	.word	0x08012850

080041f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fe:	f107 0314 	add.w	r3, r7, #20
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800420e:	4b39      	ldr	r3, [pc, #228]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	4a38      	ldr	r2, [pc, #224]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004214:	f043 0320 	orr.w	r3, r3, #32
 8004218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <MX_GPIO_Init+0xfc>)
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	4a32      	ldr	r2, [pc, #200]	; (80042f4 <MX_GPIO_Init+0xfc>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800424a:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <MX_GPIO_Init+0xfc>)
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004256:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <MX_GPIO_Init+0xfc>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <MX_GPIO_Init+0xfc>)
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800426e:	2200      	movs	r2, #0
 8004270:	210c      	movs	r1, #12
 8004272:	4821      	ldr	r0, [pc, #132]	; (80042f8 <MX_GPIO_Init+0x100>)
 8004274:	f004 fc50 	bl	8008b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11, GPIO_PIN_RESET);
 8004278:	2200      	movs	r2, #0
 800427a:	f44f 6101 	mov.w	r1, #2064	; 0x810
 800427e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004282:	f004 fc49 	bl	8008b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8004286:	2200      	movs	r2, #0
 8004288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800428c:	481b      	ldr	r0, [pc, #108]	; (80042fc <MX_GPIO_Init+0x104>)
 800428e:	f004 fc43 	bl	8008b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004292:	230c      	movs	r3, #12
 8004294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	4619      	mov	r1, r3
 80042a8:	4813      	ldr	r0, [pc, #76]	; (80042f8 <MX_GPIO_Init+0x100>)
 80042aa:	f004 fab3 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 80042ae:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80042b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042b4:	2301      	movs	r3, #1
 80042b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042bc:	2300      	movs	r3, #0
 80042be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c0:	f107 0314 	add.w	r3, r7, #20
 80042c4:	4619      	mov	r1, r3
 80042c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ca:	f004 faa3 	bl	8008814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d4:	2301      	movs	r3, #1
 80042d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4619      	mov	r1, r3
 80042e6:	4805      	ldr	r0, [pc, #20]	; (80042fc <MX_GPIO_Init+0x104>)
 80042e8:	f004 fa94 	bl	8008814 <HAL_GPIO_Init>

}
 80042ec:	bf00      	nop
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	48000800 	.word	0x48000800
 80042fc:	48000400 	.word	0x48000400

08004300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db0a      	blt.n	800432a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	490c      	ldr	r1, [pc, #48]	; (800434c <__NVIC_SetPriority+0x4c>)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	440b      	add	r3, r1
 8004324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004328:	e00a      	b.n	8004340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4908      	ldr	r1, [pc, #32]	; (8004350 <__NVIC_SetPriority+0x50>)
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	3b04      	subs	r3, #4
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	440b      	add	r3, r1
 800433e:	761a      	strb	r2, [r3, #24]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000e100 	.word	0xe000e100
 8004350:	e000ed00 	.word	0xe000ed00
 8004354:	00000000 	.word	0x00000000

08004358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800435e:	f001 fc4c 	bl	8005bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004362:	f000 fac7 	bl	80048f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004366:	f7ff ff47 	bl	80041f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800436a:	f7fc fe67 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 800436e:	f7fd fe95 	bl	800209c <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8004372:	f000 feb9 	bl	80050e8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004376:	f001 fb5d 	bl	8005a34 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800437a:	f000 fef3 	bl	8005164 <MX_SPI3_Init>
  MX_TIM1_Init();
 800437e:	f001 fa29 	bl	80057d4 <MX_TIM1_Init>
  MX_ADC2_Init();
 8004382:	f7fc fed3 	bl	800112c <MX_ADC2_Init>
  MX_ADC3_Init();
 8004386:	f7fc ff37 	bl	80011f8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED1, 1 );
 800438a:	2201      	movs	r2, #1
 800438c:	2104      	movs	r1, #4
 800438e:	48ba      	ldr	r0, [pc, #744]	; (8004678 <main+0x320>)
 8004390:	f004 fbc2 	bl	8008b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 1 );
 8004394:	2201      	movs	r2, #1
 8004396:	2108      	movs	r1, #8
 8004398:	48b7      	ldr	r0, [pc, #732]	; (8004678 <main+0x320>)
 800439a:	f004 fbbd 	bl	8008b18 <HAL_GPIO_WritePin>
  //todo flash


  //preference_writer_init(&prefs, 6);
  //preference_writer_load(prefs);
  load_from_flash();
 800439e:	f7fe f839 	bl	8002414 <load_from_flash>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80043a2:	4bb6      	ldr	r3, [pc, #728]	; (800467c <main+0x324>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d102      	bne.n	80043b2 <main+0x5a>
 80043ac:	4bb3      	ldr	r3, [pc, #716]	; (800467c <main+0x324>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80043b2:	4bb2      	ldr	r3, [pc, #712]	; (800467c <main+0x324>)
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d102      	bne.n	80043c2 <main+0x6a>
 80043bc:	4baf      	ldr	r3, [pc, #700]	; (800467c <main+0x324>)
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80043c2:	4baf      	ldr	r3, [pc, #700]	; (8004680 <main+0x328>)
 80043c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80043c8:	eef4 7a67 	vcmp.f32	s15, s15
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	d609      	bvs.n	80043e6 <main+0x8e>
 80043d2:	4bab      	ldr	r3, [pc, #684]	; (8004680 <main+0x328>)
 80043d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80043d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80043dc:	eef4 7a47 	vcmp.f32	s15, s14
 80043e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e4:	d102      	bne.n	80043ec <main+0x94>
 80043e6:	4ba6      	ldr	r3, [pc, #664]	; (8004680 <main+0x328>)
 80043e8:	4aa6      	ldr	r2, [pc, #664]	; (8004684 <main+0x32c>)
 80043ea:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80043ec:	4ba4      	ldr	r3, [pc, #656]	; (8004680 <main+0x328>)
 80043ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80043f2:	eef4 7a67 	vcmp.f32	s15, s15
 80043f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fa:	d609      	bvs.n	8004410 <main+0xb8>
 80043fc:	4ba0      	ldr	r3, [pc, #640]	; (8004680 <main+0x328>)
 80043fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004402:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004406:	eef4 7a47 	vcmp.f32	s15, s14
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	d102      	bne.n	8004416 <main+0xbe>
 8004410:	4b9b      	ldr	r3, [pc, #620]	; (8004680 <main+0x328>)
 8004412:	4a9d      	ldr	r2, [pc, #628]	; (8004688 <main+0x330>)
 8004414:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004416:	4b9a      	ldr	r3, [pc, #616]	; (8004680 <main+0x328>)
 8004418:	edd3 7a06 	vldr	s15, [r3, #24]
 800441c:	eef4 7a67 	vcmp.f32	s15, s15
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d609      	bvs.n	800443a <main+0xe2>
 8004426:	4b96      	ldr	r3, [pc, #600]	; (8004680 <main+0x328>)
 8004428:	edd3 7a06 	vldr	s15, [r3, #24]
 800442c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004430:	eef4 7a47 	vcmp.f32	s15, s14
 8004434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004438:	d103      	bne.n	8004442 <main+0xea>
 800443a:	4b91      	ldr	r3, [pc, #580]	; (8004680 <main+0x328>)
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8004442:	4b8e      	ldr	r3, [pc, #568]	; (800467c <main+0x324>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d102      	bne.n	8004452 <main+0xfa>
 800444c:	4b8b      	ldr	r3, [pc, #556]	; (800467c <main+0x324>)
 800444e:	2201      	movs	r2, #1
 8004450:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8004452:	4b8a      	ldr	r3, [pc, #552]	; (800467c <main+0x324>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d102      	bne.n	8004462 <main+0x10a>
 800445c:	4b87      	ldr	r3, [pc, #540]	; (800467c <main+0x324>)
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8004462:	4b86      	ldr	r3, [pc, #536]	; (800467c <main+0x324>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d103      	bne.n	8004474 <main+0x11c>
 800446c:	4b83      	ldr	r3, [pc, #524]	; (800467c <main+0x324>)
 800446e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004472:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004474:	4b82      	ldr	r3, [pc, #520]	; (8004680 <main+0x328>)
 8004476:	edd3 7a07 	vldr	s15, [r3, #28]
 800447a:	eef4 7a67 	vcmp.f32	s15, s15
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	d609      	bvs.n	8004498 <main+0x140>
 8004484:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <main+0x328>)
 8004486:	edd3 7a07 	vldr	s15, [r3, #28]
 800448a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800448e:	eef4 7a47 	vcmp.f32	s15, s14
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	d103      	bne.n	80044a0 <main+0x148>
 8004498:	4b79      	ldr	r3, [pc, #484]	; (8004680 <main+0x328>)
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80044a0:	4b77      	ldr	r3, [pc, #476]	; (8004680 <main+0x328>)
 80044a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80044a6:	eef4 7a67 	vcmp.f32	s15, s15
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	d609      	bvs.n	80044c4 <main+0x16c>
 80044b0:	4b73      	ldr	r3, [pc, #460]	; (8004680 <main+0x328>)
 80044b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80044b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80044ba:	eef4 7a47 	vcmp.f32	s15, s14
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	d102      	bne.n	80044ca <main+0x172>
 80044c4:	4b6e      	ldr	r3, [pc, #440]	; (8004680 <main+0x328>)
 80044c6:	4a71      	ldr	r2, [pc, #452]	; (800468c <main+0x334>)
 80044c8:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80044ca:	4b6d      	ldr	r3, [pc, #436]	; (8004680 <main+0x328>)
 80044cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80044d0:	eef4 7a67 	vcmp.f32	s15, s15
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	d609      	bvs.n	80044ee <main+0x196>
 80044da:	4b69      	ldr	r3, [pc, #420]	; (8004680 <main+0x328>)
 80044dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80044e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80044e4:	eef4 7a47 	vcmp.f32	s15, s14
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	d102      	bne.n	80044f4 <main+0x19c>
 80044ee:	4b64      	ldr	r3, [pc, #400]	; (8004680 <main+0x328>)
 80044f0:	4a67      	ldr	r2, [pc, #412]	; (8004690 <main+0x338>)
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 80044f4:	4b62      	ldr	r3, [pc, #392]	; (8004680 <main+0x328>)
 80044f6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80044fa:	eef4 7a67 	vcmp.f32	s15, s15
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	d609      	bvs.n	8004518 <main+0x1c0>
 8004504:	4b5e      	ldr	r3, [pc, #376]	; (8004680 <main+0x328>)
 8004506:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800450a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800450e:	eef4 7a47 	vcmp.f32	s15, s14
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	d102      	bne.n	800451e <main+0x1c6>
 8004518:	4b59      	ldr	r3, [pc, #356]	; (8004680 <main+0x328>)
 800451a:	4a5e      	ldr	r2, [pc, #376]	; (8004694 <main+0x33c>)
 800451c:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800451e:	4b58      	ldr	r3, [pc, #352]	; (8004680 <main+0x328>)
 8004520:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004524:	eef4 7a67 	vcmp.f32	s15, s15
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	d609      	bvs.n	8004542 <main+0x1ea>
 800452e:	4b54      	ldr	r3, [pc, #336]	; (8004680 <main+0x328>)
 8004530:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004534:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004538:	eef4 7a47 	vcmp.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	d102      	bne.n	8004548 <main+0x1f0>
 8004542:	4b4f      	ldr	r3, [pc, #316]	; (8004680 <main+0x328>)
 8004544:	4a54      	ldr	r2, [pc, #336]	; (8004698 <main+0x340>)
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004548:	4b4d      	ldr	r3, [pc, #308]	; (8004680 <main+0x328>)
 800454a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800454e:	eef4 7a67 	vcmp.f32	s15, s15
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d609      	bvs.n	800456c <main+0x214>
 8004558:	4b49      	ldr	r3, [pc, #292]	; (8004680 <main+0x328>)
 800455a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800455e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004562:	eef4 7a47 	vcmp.f32	s15, s14
 8004566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456a:	d103      	bne.n	8004574 <main+0x21c>
 800456c:	4b44      	ldr	r3, [pc, #272]	; (8004680 <main+0x328>)
 800456e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004574:	4b42      	ldr	r3, [pc, #264]	; (8004680 <main+0x328>)
 8004576:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800457a:	eef4 7a67 	vcmp.f32	s15, s15
 800457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004582:	d609      	bvs.n	8004598 <main+0x240>
 8004584:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <main+0x328>)
 8004586:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800458a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800458e:	eef4 7a47 	vcmp.f32	s15, s14
 8004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004596:	d103      	bne.n	80045a0 <main+0x248>
 8004598:	4b39      	ldr	r3, [pc, #228]	; (8004680 <main+0x328>)
 800459a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80045a0:	4b37      	ldr	r3, [pc, #220]	; (8004680 <main+0x328>)
 80045a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80045a6:	eef4 7a67 	vcmp.f32	s15, s15
 80045aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ae:	d609      	bvs.n	80045c4 <main+0x26c>
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <main+0x328>)
 80045b2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80045b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80045ba:	eef4 7a47 	vcmp.f32	s15, s14
 80045be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c2:	d102      	bne.n	80045ca <main+0x272>
 80045c4:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <main+0x328>)
 80045c6:	4a35      	ldr	r2, [pc, #212]	; (800469c <main+0x344>)
 80045c8:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 80045ca:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <main+0x328>)
 80045cc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80045d0:	eef4 7a67 	vcmp.f32	s15, s15
 80045d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d8:	d609      	bvs.n	80045ee <main+0x296>
 80045da:	4b29      	ldr	r3, [pc, #164]	; (8004680 <main+0x328>)
 80045dc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80045e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80045e4:	eef4 7a47 	vcmp.f32	s15, s14
 80045e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ec:	d102      	bne.n	80045f4 <main+0x29c>
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <main+0x328>)
 80045f0:	4a28      	ldr	r2, [pc, #160]	; (8004694 <main+0x33c>)
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <main+0x328>)
 80045f6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80045fa:	eef4 7a67 	vcmp.f32	s15, s15
 80045fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004602:	d702      	bvc.n	800460a <main+0x2b2>
 8004604:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <main+0x328>)
 8004606:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <main+0x348>)
 8004608:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <main+0x328>)
 800460c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004610:	eef4 7a67 	vcmp.f32	s15, s15
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	d702      	bvc.n	8004620 <main+0x2c8>
 800461a:	4b19      	ldr	r3, [pc, #100]	; (8004680 <main+0x328>)
 800461c:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <main+0x34c>)
 800461e:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <main+0x328>)
 8004622:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004626:	eef4 7a67 	vcmp.f32	s15, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d702      	bvc.n	8004636 <main+0x2de>
 8004630:	4b13      	ldr	r3, [pc, #76]	; (8004680 <main+0x328>)
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <main+0x350>)
 8004634:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <main+0x328>)
 8004638:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800463c:	eef4 7a67 	vcmp.f32	s15, s15
 8004640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004644:	d702      	bvc.n	800464c <main+0x2f4>
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <main+0x328>)
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <main+0x354>)
 800464a:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 800464c:	a308      	add	r3, pc, #32	; (adr r3, 8004670 <main+0x318>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	4817      	ldr	r0, [pc, #92]	; (80046b0 <main+0x358>)
 8004654:	f009 fd62 	bl	800e11c <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8004658:	4816      	ldr	r0, [pc, #88]	; (80046b4 <main+0x35c>)
 800465a:	f7fe fb1f 	bl	8002c9c <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800465e:	f44f 7224 	mov.w	r2, #656	; 0x290
 8004662:	2100      	movs	r1, #0
 8004664:	4814      	ldr	r0, [pc, #80]	; (80046b8 <main+0x360>)
 8004666:	f009 f8e7 	bl	800d838 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <main+0x324>)
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	e025      	b.n	80046bc <main+0x364>
 8004670:	a0000000 	.word	0xa0000000
 8004674:	4000e147 	.word	0x4000e147
 8004678:	48000800 	.word	0x48000800
 800467c:	20008f34 	.word	0x20008f34
 8004680:	20000684 	.word	0x20000684
 8004684:	447a0000 	.word	0x447a0000
 8004688:	42200000 	.word	0x42200000
 800468c:	42fa0000 	.word	0x42fa0000
 8004690:	41600000 	.word	0x41600000
 8004694:	40a00000 	.word	0x40a00000
 8004698:	41a80000 	.word	0x41a80000
 800469c:	43fa0000 	.word	0x43fa0000
 80046a0:	41480000 	.word	0x41480000
 80046a4:	c1480000 	.word	0xc1480000
 80046a8:	42820000 	.word	0x42820000
 80046ac:	c2820000 	.word	0xc2820000
 80046b0:	08012878 	.word	0x08012878
 80046b4:	20000784 	.word	0x20000784
 80046b8:	20008ca4 	.word	0x20008ca4
 80046bc:	4a7f      	ldr	r2, [pc, #508]	; (80048bc <main+0x564>)
 80046be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  comm_encoder.e_zero = E_ZERO;
 80046c2:	4b7f      	ldr	r3, [pc, #508]	; (80048c0 <main+0x568>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	4a7d      	ldr	r2, [pc, #500]	; (80048bc <main+0x564>)
 80046c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  comm_encoder.ppairs = PPAIRS;
 80046cc:	4b7d      	ldr	r3, [pc, #500]	; (80048c4 <main+0x56c>)
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	4a7a      	ldr	r2, [pc, #488]	; (80048bc <main+0x564>)
 80046d2:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 80046d4:	2164      	movs	r1, #100	; 0x64
 80046d6:	4879      	ldr	r0, [pc, #484]	; (80048bc <main+0x564>)
 80046d8:	f000 fb16 	bl	8004d08 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 80046dc:	4b77      	ldr	r3, [pc, #476]	; (80048bc <main+0x564>)
 80046de:	4a78      	ldr	r2, [pc, #480]	; (80048c0 <main+0x568>)
 80046e0:	338c      	adds	r3, #140	; 0x8c
 80046e2:	f102 0118 	add.w	r1, r2, #24
 80046e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ea:	4618      	mov	r0, r3
 80046ec:	f009 f896 	bl	800d81c <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 80046f0:	4875      	ldr	r0, [pc, #468]	; (80048c8 <main+0x570>)
 80046f2:	f001 ff03 	bl	80064fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80046f6:	4875      	ldr	r0, [pc, #468]	; (80048cc <main+0x574>)
 80046f8:	f001 ff00 	bl	80064fc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80046fc:	4874      	ldr	r0, [pc, #464]	; (80048d0 <main+0x578>)
 80046fe:	f001 fefd 	bl	80064fc <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004702:	2201      	movs	r2, #1
 8004704:	2110      	movs	r1, #16
 8004706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800470a:	f004 fa05 	bl	8008b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 800470e:	2201      	movs	r2, #1
 8004710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004718:	f004 f9fe 	bl	8008b18 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800471c:	2001      	movs	r0, #1
 800471e:	f001 fadd 	bl	8005cdc <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004722:	2001      	movs	r0, #1
 8004724:	f001 fada 	bl	8005cdc <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8004728:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <main+0x57c>)
 800472a:	2201      	movs	r2, #1
 800472c:	9206      	str	r2, [sp, #24]
 800472e:	2200      	movs	r2, #0
 8004730:	9205      	str	r2, [sp, #20]
 8004732:	2200      	movs	r2, #0
 8004734:	9204      	str	r2, [sp, #16]
 8004736:	2200      	movs	r2, #0
 8004738:	9203      	str	r2, [sp, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	9202      	str	r2, [sp, #8]
 800473e:	2201      	movs	r2, #1
 8004740:	9201      	str	r2, [sp, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	9200      	str	r2, [sp, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2000      	movs	r0, #0
 800474a:	4610      	mov	r0, r2
 800474c:	889b      	ldrh	r3, [r3, #4]
 800474e:	2100      	movs	r1, #0
 8004750:	f363 010f 	bfi	r1, r3, #0, #16
 8004754:	2300      	movs	r3, #0
 8004756:	2200      	movs	r2, #0
 8004758:	f7fd fac5 	bl	8001ce6 <drv_write_DCR>
  HAL_Delay(1);
 800475c:	2001      	movs	r0, #1
 800475e:	f001 fabd 	bl	8005cdc <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8004762:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <main+0x57c>)
 8004764:	2203      	movs	r2, #3
 8004766:	9206      	str	r2, [sp, #24]
 8004768:	2201      	movs	r2, #1
 800476a:	9205      	str	r2, [sp, #20]
 800476c:	2201      	movs	r2, #1
 800476e:	9204      	str	r2, [sp, #16]
 8004770:	2201      	movs	r2, #1
 8004772:	9203      	str	r2, [sp, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	9202      	str	r2, [sp, #8]
 8004778:	2203      	movs	r2, #3
 800477a:	9201      	str	r2, [sp, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	9200      	str	r2, [sp, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	2000      	movs	r0, #0
 8004784:	4610      	mov	r0, r2
 8004786:	889b      	ldrh	r3, [r3, #4]
 8004788:	2100      	movs	r1, #0
 800478a:	f363 010f 	bfi	r1, r3, #0, #16
 800478e:	2301      	movs	r3, #1
 8004790:	2200      	movs	r2, #0
 8004792:	f7fd fb18 	bl	8001dc6 <drv_write_CSACR>
  HAL_Delay(1);
 8004796:	2001      	movs	r0, #1
 8004798:	f001 faa0 	bl	8005cdc <HAL_Delay>
  zero_current(&controller);
 800479c:	484e      	ldr	r0, [pc, #312]	; (80048d8 <main+0x580>)
 800479e:	f7fe fa39 	bl	8002c14 <zero_current>
  HAL_Delay(1);
 80047a2:	2001      	movs	r0, #1
 80047a4:	f001 fa9a 	bl	8005cdc <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 80047a8:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <main+0x57c>)
 80047aa:	2203      	movs	r2, #3
 80047ac:	9206      	str	r2, [sp, #24]
 80047ae:	2200      	movs	r2, #0
 80047b0:	9205      	str	r2, [sp, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	9204      	str	r2, [sp, #16]
 80047b6:	2200      	movs	r2, #0
 80047b8:	9203      	str	r2, [sp, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	9202      	str	r2, [sp, #8]
 80047be:	2203      	movs	r2, #3
 80047c0:	9201      	str	r2, [sp, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	9200      	str	r2, [sp, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2000      	movs	r0, #0
 80047ca:	4610      	mov	r0, r2
 80047cc:	889b      	ldrh	r3, [r3, #4]
 80047ce:	2100      	movs	r1, #0
 80047d0:	f363 010f 	bfi	r1, r3, #0, #16
 80047d4:	2301      	movs	r3, #1
 80047d6:	2200      	movs	r2, #0
 80047d8:	f7fd faf5 	bl	8001dc6 <drv_write_CSACR>
  HAL_Delay(1);
 80047dc:	2001      	movs	r0, #1
 80047de:	f001 fa7d 	bl	8005cdc <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <main+0x57c>)
 80047e4:	220e      	movs	r2, #14
 80047e6:	9202      	str	r2, [sp, #8]
 80047e8:	2203      	movs	r2, #3
 80047ea:	9201      	str	r2, [sp, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	9200      	str	r2, [sp, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	2000      	movs	r0, #0
 80047f4:	4610      	mov	r0, r2
 80047f6:	889b      	ldrh	r3, [r3, #4]
 80047f8:	2100      	movs	r1, #0
 80047fa:	f363 010f 	bfi	r1, r3, #0, #16
 80047fe:	2300      	movs	r3, #0
 8004800:	2201      	movs	r2, #1
 8004802:	f7fd fab2 	bl	8001d6a <drv_write_OCPCR>
  HAL_Delay(1);
 8004806:	2001      	movs	r0, #1
 8004808:	f001 fa68 	bl	8005cdc <HAL_Delay>
  drv_disable_gd(drv);
 800480c:	4b31      	ldr	r3, [pc, #196]	; (80048d4 <main+0x57c>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	2100      	movs	r1, #0
 8004812:	4611      	mov	r1, r2
 8004814:	889a      	ldrh	r2, [r3, #4]
 8004816:	2300      	movs	r3, #0
 8004818:	f362 030f 	bfi	r3, r2, #0, #16
 800481c:	4608      	mov	r0, r1
 800481e:	4619      	mov	r1, r3
 8004820:	f7fd fb2d 	bl	8001e7e <drv_disable_gd>
  HAL_Delay(1);
 8004824:	2001      	movs	r0, #1
 8004826:	f001 fa59 	bl	8005cdc <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 800482a:	4b2b      	ldr	r3, [pc, #172]	; (80048d8 <main+0x580>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	4a29      	ldr	r2, [pc, #164]	; (80048d8 <main+0x580>)
 8004832:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8004836:	4619      	mov	r1, r3
 8004838:	4828      	ldr	r0, [pc, #160]	; (80048dc <main+0x584>)
 800483a:	f009 fc6f 	bl	800e11c <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800483e:	2100      	movs	r1, #0
 8004840:	4827      	ldr	r0, [pc, #156]	; (80048e0 <main+0x588>)
 8004842:	f005 ff65 	bl	800a710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004846:	2104      	movs	r1, #4
 8004848:	4825      	ldr	r0, [pc, #148]	; (80048e0 <main+0x588>)
 800484a:	f005 ff61 	bl	800a710 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800484e:	2108      	movs	r1, #8
 8004850:	4823      	ldr	r0, [pc, #140]	; (80048e0 <main+0x588>)
 8004852:	f005 ff5d 	bl	800a710 <HAL_TIM_PWM_Start>
  can_tx_init(&can_tx);
  HAL_CAN_Start(&CAN_H); //start CAN
  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004856:	2101      	movs	r1, #1
 8004858:	2019      	movs	r0, #25
 800485a:	f7ff fd51 	bl	8004300 <__NVIC_SetPriority>
  NVIC_SetPriority(CAN_ISR, 3);
 800485e:	2103      	movs	r1, #3
 8004860:	2015      	movs	r0, #21
 8004862:	f7ff fd4d 	bl	8004300 <__NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <main+0x58c>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 800486c:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <main+0x58c>)
 800486e:	2200      	movs	r2, #0
 8004870:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <main+0x58c>)
 8004874:	2201      	movs	r2, #1
 8004876:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004878:	2201      	movs	r2, #1
 800487a:	491b      	ldr	r1, [pc, #108]	; (80048e8 <main+0x590>)
 800487c:	481b      	ldr	r0, [pc, #108]	; (80048ec <main+0x594>)
 800487e:	f007 fbab 	bl	800bfd8 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8004882:	4817      	ldr	r0, [pc, #92]	; (80048e0 <main+0x588>)
 8004884:	f005 fe0a 	bl	800a49c <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LED1, 0 );
 8004888:	2200      	movs	r2, #0
 800488a:	2104      	movs	r1, #4
 800488c:	4818      	ldr	r0, [pc, #96]	; (80048f0 <main+0x598>)
 800488e:	f004 f943 	bl	8008b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 0 );
 8004892:	2200      	movs	r2, #0
 8004894:	2108      	movs	r1, #8
 8004896:	4816      	ldr	r0, [pc, #88]	; (80048f0 <main+0x598>)
 8004898:	f004 f93e 	bl	8008b18 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(150);
 800489c:	2096      	movs	r0, #150	; 0x96
 800489e:	f001 fa1d 	bl	8005cdc <HAL_Delay>
	  drv_print_faults(drv);
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <main+0x57c>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	2100      	movs	r1, #0
 80048a8:	4611      	mov	r1, r2
 80048aa:	889a      	ldrh	r2, [r3, #4]
 80048ac:	2300      	movs	r3, #0
 80048ae:	f362 030f 	bfi	r3, r2, #0, #16
 80048b2:	4608      	mov	r0, r1
 80048b4:	4619      	mov	r1, r3
 80048b6:	f7fd fafd 	bl	8001eb4 <drv_print_faults>
	  HAL_Delay(150);
 80048ba:	e7ef      	b.n	800489c <main+0x544>
 80048bc:	200003e0 	.word	0x200003e0
 80048c0:	20008f34 	.word	0x20008f34
 80048c4:	20000684 	.word	0x20000684
 80048c8:	200002a0 	.word	0x200002a0
 80048cc:	20000234 	.word	0x20000234
 80048d0:	2000030c 	.word	0x2000030c
 80048d4:	20009360 	.word	0x20009360
 80048d8:	20000784 	.word	0x20000784
 80048dc:	0801289c 	.word	0x0801289c
 80048e0:	200094a8 	.word	0x200094a8
 80048e4:	20000674 	.word	0x20000674
 80048e8:	20000670 	.word	0x20000670
 80048ec:	200094f4 	.word	0x200094f4
 80048f0:	48000800 	.word	0x48000800

080048f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b0a8      	sub	sp, #160	; 0xa0
 80048f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048fe:	2238      	movs	r2, #56	; 0x38
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f008 ff98 	bl	800d838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004918:	463b      	mov	r3, r7
 800491a:	2254      	movs	r2, #84	; 0x54
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f008 ff8a 	bl	800d838 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004924:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004928:	f004 f90e 	bl	8008b48 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800492c:	2302      	movs	r3, #2
 800492e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004934:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004936:	2340      	movs	r3, #64	; 0x40
 8004938:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800493a:	2300      	movs	r3, #0
 800493c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004944:	4618      	mov	r0, r3
 8004946:	f004 f9b3 	bl	8008cb0 <HAL_RCC_OscConfig>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8004950:	f000 f832 	bl	80049b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004954:	230f      	movs	r3, #15
 8004956:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004958:	2301      	movs	r3, #1
 800495a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800495c:	2300      	movs	r3, #0
 800495e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004960:	2300      	movs	r3, #0
 8004962:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004964:	2300      	movs	r3, #0
 8004966:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004968:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f004 fcb6 	bl	80092e0 <HAL_RCC_ClockConfig>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800497a:	f000 f81d 	bl	80049b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <SystemClock_Config+0xc0>)
 8004980:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800498c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004990:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004992:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004998:	463b      	mov	r3, r7
 800499a:	4618      	mov	r0, r3
 800499c:	f004 febc 	bl	8009718 <HAL_RCCEx_PeriphCLKConfig>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80049a6:	f000 f807 	bl	80049b8 <Error_Handler>
  }
}
 80049aa:	bf00      	nop
 80049ac:	37a0      	adds	r7, #160	; 0xa0
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	00019002 	.word	0x00019002

080049b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80049d0:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 80049d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80049d8:	edd7 7a00 	vldr	s15, [r7]
 80049dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	dd01      	ble.n	80049ea <fast_fmaxf+0x24>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	e000      	b.n	80049ec <fast_fmaxf+0x26>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	ee07 3a90 	vmov	s15, r3
    }
 80049f0:	eeb0 0a67 	vmov.f32	s0, s15
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <fast_fminf>:

float fast_fminf(float x, float y){
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a08:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004a0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a10:	edd7 7a00 	vldr	s15, [r7]
 8004a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1c:	d501      	bpl.n	8004a22 <fast_fminf+0x24>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	e000      	b.n	8004a24 <fast_fminf+0x26>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	ee07 3a90 	vmov	s15, r3
    }
 8004a28:	eeb0 0a67 	vmov.f32	s0, s15
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004a40:	edc7 0a02 	vstr	s1, [r7, #8]
 8004a44:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004a48:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	dd0c      	ble.n	8004a74 <fmaxf3+0x3e>
 8004a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	dd01      	ble.n	8004a70 <fmaxf3+0x3a>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	e00d      	b.n	8004a8c <fmaxf3+0x56>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	e00b      	b.n	8004a8c <fmaxf3+0x56>
 8004a74:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	dd01      	ble.n	8004a8a <fmaxf3+0x54>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	e000      	b.n	8004a8c <fmaxf3+0x56>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	ee07 3a90 	vmov	s15, r3
    }
 8004a90:	eeb0 0a67 	vmov.f32	s0, s15
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <fminf3>:

float fminf3(float x, float y, float z){
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	ed87 0a03 	vstr	s0, [r7, #12]
 8004aa8:	edc7 0a02 	vstr	s1, [r7, #8]
 8004aac:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004ab0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ab4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	d50c      	bpl.n	8004adc <fminf3+0x3e>
 8004ac2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	d501      	bpl.n	8004ad8 <fminf3+0x3a>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	e00d      	b.n	8004af4 <fminf3+0x56>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	e00b      	b.n	8004af4 <fminf3+0x56>
 8004adc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ae4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aec:	d501      	bpl.n	8004af2 <fminf3+0x54>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	e000      	b.n	8004af4 <fminf3+0x56>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	ee07 3a90 	vmov	s15, r3
    }
 8004af8:	eeb0 0a67 	vmov.f32	s0, s15
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	ed93 7a00 	vldr	s14, [r3]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	edd3 7a00 	vldr	s15, [r3]
 8004b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	edd3 6a00 	vldr	s13, [r3]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	edd3 7a00 	vldr	s15, [r3]
 8004b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b38:	eeb0 0a67 	vmov.f32	s0, s15
 8004b3c:	f00d f86e 	bl	8011c1c <sqrtf>
 8004b40:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004b44:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b54:	dc00      	bgt.n	8004b58 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004b56:	e01b      	b.n	8004b90 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	ed93 7a00 	vldr	s14, [r3]
 8004b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004b66:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	ed93 7a00 	vldr	s14, [r3]
 8004b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b7e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004b82:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	edc3 7a00 	vstr	s15, [r3]
    }
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004ba2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ba6:	ed87 1a01 	vstr	s2, [r7, #4]
 8004baa:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8004bac:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb8:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004bc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bcc:	2201      	movs	r2, #1
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bde:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004be2:	ed97 7a05 	vldr	s14, [r7, #20]
 8004be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bee:	ee17 3a90 	vmov	r3, s15
    }
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004bfe:	b480      	push	{r7}
 8004c00:	b087      	sub	sp, #28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c0a:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004c10:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c14:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c1c:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c36:	2201      	movs	r2, #1
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c50:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004c54:	eeb0 0a67 	vmov.f32	s0, s15
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <sin_lut>:

float sin_lut(float theta){
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004c6e:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004ccc <sin_lut+0x68>
 8004c72:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c76:	f00c ffa5 	bl	8011bc4 <fmodf>
 8004c7a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8a:	d506      	bpl.n	8004c9a <sin_lut+0x36>
 8004c8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c90:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004ccc <sin_lut+0x68>
 8004c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c98:	e001      	b.n	8004c9e <sin_lut+0x3a>
 8004c9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c9e:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ca6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004cd0 <sin_lut+0x6c>
 8004caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cb2:	ee17 3a90 	vmov	r3, s15
 8004cb6:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <sin_lut+0x70>)
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	ee07 3a90 	vmov	s15, r3
}
 8004cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40c90fdb 	.word	0x40c90fdb
 8004cd0:	42a2f983 	.word	0x42a2f983
 8004cd4:	08012930 	.word	0x08012930

08004cd8 <cos_lut>:

float cos_lut(float theta){
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004ce2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004d04 <cos_lut+0x2c>
 8004ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cee:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf2:	f7ff ffb7 	bl	8004c64 <sin_lut>
 8004cf6:	eef0 7a40 	vmov.f32	s15, s0
}
 8004cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	3fc90fdb 	.word	0x3fc90fdb

08004d08 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e023      	b.n	8004d60 <ps_warmup+0x58>
		encoder->spi_tx_word = 0x0000;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d28:	f003 fef6 	bl	8008b18 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	2364      	movs	r3, #100	; 0x64
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2301      	movs	r3, #1
 8004d38:	480e      	ldr	r0, [pc, #56]	; (8004d74 <ps_warmup+0x6c>)
 8004d3a:	f004 ffe4 	bl	8009d06 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004d3e:	bf00      	nop
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <ps_warmup+0x6c>)
 8004d42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d0f9      	beq.n	8004d40 <ps_warmup+0x38>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d56:	f003 fedf 	bl	8008b18 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	dbd7      	blt.n	8004d18 <ps_warmup+0x10>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	200093e0 	.word	0x200093e0

08004d78 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004d8c:	2313      	movs	r3, #19
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e011      	b.n	8004db6 <ps_sample+0x3e>
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3304      	adds	r3, #4
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	3302      	adds	r3, #2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	3304      	adds	r3, #4
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dcea      	bgt.n	8004d92 <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dcc:	f003 fea4 	bl	8008b18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1c9a      	adds	r2, r3, #2
 8004dd6:	2364      	movs	r3, #100	; 0x64
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4899      	ldr	r0, [pc, #612]	; (8005044 <ps_sample+0x2cc>)
 8004dde:	f004 ff92 	bl	8009d06 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004de2:	bf00      	nop
 8004de4:	4b97      	ldr	r3, [pc, #604]	; (8005044 <ps_sample+0x2cc>)
 8004de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d0f9      	beq.n	8004de4 <ps_sample+0x6c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004df0:	2201      	movs	r2, #1
 8004df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dfa:	f003 fe8d 	bl	8008b18 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	885b      	ldrh	r3, [r3, #2]
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	125b      	asrs	r3, r3, #9
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	3322      	adds	r3, #34	; 0x22
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	125b      	asrs	r3, r3, #9
 8004e20:	3301      	adds	r3, #1
 8004e22:	425a      	negs	r2, r3
 8004e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e2c:	bf58      	it	pl
 8004e2e:	4253      	negpl	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	3322      	adds	r3, #34	; 0x22
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	125b      	asrs	r3, r3, #9
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4413      	add	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw + off_interp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004e66:	4b78      	ldr	r3, [pc, #480]	; (8005048 <ps_sample+0x2d0>)
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e74:	eddf 6a75 	vldr	s13, [pc, #468]	; 800504c <ps_sample+0x2d4>
 8004e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e8c:	ee17 3a90 	vmov	r3, s15
 8004e90:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ea6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8005050 <ps_sample+0x2d8>
 8004eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec2:	d507      	bpl.n	8004ed4 <ps_sample+0x15c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eca:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8005050 <ps_sample+0x2d8>
 8004ece:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ed2:	e002      	b.n	8004eda <ps_sample+0x162>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004eea:	4b57      	ldr	r3, [pc, #348]	; (8005048 <ps_sample+0x2d0>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004efc:	eddf 6a53 	vldr	s13, [pc, #332]	; 800504c <ps_sample+0x2d4>
 8004f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f14:	ee17 3a90 	vmov	r3, s15
 8004f18:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f2e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005050 <ps_sample+0x2d8>
 8004f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d507      	bpl.n	8004f5c <ps_sample+0x1e4>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f52:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005050 <ps_sample+0x2d8>
 8004f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f5a:	e002      	b.n	8004f62 <ps_sample+0x1ea>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f78:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){encoder->turns--;}
 8004f7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f80:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005054 <ps_sample+0x2dc>
 8004f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8c:	dd07      	ble.n	8004f9e <ps_sample+0x226>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f9c:	e00f      	b.n	8004fbe <ps_sample+0x246>
	else if(angle_diff < -PI_F){encoder->turns++;}
 8004f9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fa2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005058 <ps_sample+0x2e0>
 8004fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fae:	d506      	bpl.n	8004fbe <ps_sample+0x246>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <ps_sample+0x260>
		encoder->turns = 0;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fec:	eddf 6a18 	vldr	s13, [pc, #96]	; 8005050 <ps_sample+0x2d8>
 8004ff0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	ed93 7a03 	vldr	s14, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800500a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800500e:	edd7 7a00 	vldr	s15, [r7]
 8005012:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005016:	ee27 7a87 	vmul.f32	s14, s15, s14
 800501a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 800503a:	bf00      	nop
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200093e0 	.word	0x200093e0
 8005048:	20008f34 	.word	0x20008f34
 800504c:	47800000 	.word	0x47800000
 8005050:	40c90fdb 	.word	0x40c90fdb
 8005054:	40490fdb 	.word	0x40490fdb
 8005058:	c0490fdb 	.word	0xc0490fdb

0800505c <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506a:	4619      	mov	r1, r3
 800506c:	4818      	ldr	r0, [pc, #96]	; (80050d0 <ps_print+0x74>)
 800506e:	f009 f855 	bl	800e11c <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005076:	4619      	mov	r1, r3
 8005078:	4816      	ldr	r0, [pc, #88]	; (80050d4 <ps_print+0x78>)
 800507a:	f009 f84f 	bl	800e11c <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb fa88 	bl	8000598 <__aeabi_f2d>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4812      	ldr	r0, [pc, #72]	; (80050d8 <ps_print+0x7c>)
 800508e:	f009 f845 	bl	800e11c <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb fa7e 	bl	8000598 <__aeabi_f2d>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	480e      	ldr	r0, [pc, #56]	; (80050dc <ps_print+0x80>)
 80050a2:	f009 f83b 	bl	800e11c <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fb fa74 	bl	8000598 <__aeabi_f2d>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	480a      	ldr	r0, [pc, #40]	; (80050e0 <ps_print+0x84>)
 80050b6:	f009 f831 	bl	800e11c <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c0:	4619      	mov	r1, r3
 80050c2:	4808      	ldr	r0, [pc, #32]	; (80050e4 <ps_print+0x88>)
 80050c4:	f009 f82a 	bl	800e11c <iprintf>
	//HAL_Delay(dt_ms);
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	080128c4 	.word	0x080128c4
 80050d4:	080128cc 	.word	0x080128cc
 80050d8:	080128e4 	.word	0x080128e4
 80050dc:	080128f8 	.word	0x080128f8
 80050e0:	0801290c 	.word	0x0801290c
 80050e4:	08012920 	.word	0x08012920

080050e8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <MX_SPI1_Init+0x74>)
 80050ee:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <MX_SPI1_Init+0x78>)
 80050f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <MX_SPI1_Init+0x74>)
 80050f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050fa:	4b18      	ldr	r3, [pc, #96]	; (800515c <MX_SPI1_Init+0x74>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8005100:	4b16      	ldr	r3, [pc, #88]	; (800515c <MX_SPI1_Init+0x74>)
 8005102:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005106:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005108:	4b14      	ldr	r3, [pc, #80]	; (800515c <MX_SPI1_Init+0x74>)
 800510a:	2200      	movs	r2, #0
 800510c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <MX_SPI1_Init+0x74>)
 8005110:	2200      	movs	r2, #0
 8005112:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <MX_SPI1_Init+0x74>)
 8005116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800511a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800511c:	4b0f      	ldr	r3, [pc, #60]	; (800515c <MX_SPI1_Init+0x74>)
 800511e:	2200      	movs	r2, #0
 8005120:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005122:	4b0e      	ldr	r3, [pc, #56]	; (800515c <MX_SPI1_Init+0x74>)
 8005124:	2200      	movs	r2, #0
 8005126:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <MX_SPI1_Init+0x74>)
 800512a:	2200      	movs	r2, #0
 800512c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <MX_SPI1_Init+0x74>)
 8005130:	2200      	movs	r2, #0
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <MX_SPI1_Init+0x74>)
 8005136:	2207      	movs	r2, #7
 8005138:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800513a:	4b08      	ldr	r3, [pc, #32]	; (800515c <MX_SPI1_Init+0x74>)
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <MX_SPI1_Init+0x74>)
 8005142:	2208      	movs	r2, #8
 8005144:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005146:	4805      	ldr	r0, [pc, #20]	; (800515c <MX_SPI1_Init+0x74>)
 8005148:	f004 fd32 	bl	8009bb0 <HAL_SPI_Init>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005152:	f7ff fc31 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20009444 	.word	0x20009444
 8005160:	40013000 	.word	0x40013000

08005164 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <MX_SPI3_Init+0x74>)
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <MX_SPI3_Init+0x78>)
 800516c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800516e:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <MX_SPI3_Init+0x74>)
 8005170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005174:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005176:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <MX_SPI3_Init+0x74>)
 8005178:	2200      	movs	r2, #0
 800517a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800517c:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <MX_SPI3_Init+0x74>)
 800517e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005182:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005184:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <MX_SPI3_Init+0x74>)
 8005186:	2200      	movs	r2, #0
 8005188:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800518a:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <MX_SPI3_Init+0x74>)
 800518c:	2200      	movs	r2, #0
 800518e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005190:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <MX_SPI3_Init+0x74>)
 8005192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005196:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <MX_SPI3_Init+0x74>)
 800519a:	2200      	movs	r2, #0
 800519c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <MX_SPI3_Init+0x74>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <MX_SPI3_Init+0x74>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <MX_SPI3_Init+0x74>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80051b0:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <MX_SPI3_Init+0x74>)
 80051b2:	2207      	movs	r2, #7
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80051b6:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <MX_SPI3_Init+0x74>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <MX_SPI3_Init+0x74>)
 80051be:	2208      	movs	r2, #8
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80051c2:	4805      	ldr	r0, [pc, #20]	; (80051d8 <MX_SPI3_Init+0x74>)
 80051c4:	f004 fcf4 	bl	8009bb0 <HAL_SPI_Init>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80051ce:	f7ff fbf3 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80051d2:	bf00      	nop
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	200093e0 	.word	0x200093e0
 80051dc:	40003c00 	.word	0x40003c00

080051e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e8:	f107 031c 	add.w	r3, r7, #28
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2f      	ldr	r2, [pc, #188]	; (80052bc <HAL_SPI_MspInit+0xdc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d129      	bne.n	8005256 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005202:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005206:	4a2e      	ldr	r2, [pc, #184]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800520c:	6613      	str	r3, [r2, #96]	; 0x60
 800520e:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800521a:	4b29      	ldr	r3, [pc, #164]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 800521c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521e:	4a28      	ldr	r2, [pc, #160]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005226:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005232:	23e0      	movs	r3, #224	; 0xe0
 8005234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005236:	2302      	movs	r3, #2
 8005238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800523e:	2300      	movs	r3, #0
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005242:	2305      	movs	r3, #5
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005246:	f107 031c 	add.w	r3, r7, #28
 800524a:	4619      	mov	r1, r3
 800524c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005250:	f003 fae0 	bl	8008814 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005254:	e02d      	b.n	80052b2 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <HAL_SPI_MspInit+0xe4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d128      	bne.n	80052b2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005260:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800526a:	6593      	str	r3, [r2, #88]	; 0x58
 800526c:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005278:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 800527a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527c:	4a10      	ldr	r2, [pc, #64]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <HAL_SPI_MspInit+0xe0>)
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005290:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005296:	2302      	movs	r3, #2
 8005298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529a:	2300      	movs	r3, #0
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529e:	2300      	movs	r3, #0
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80052a2:	2306      	movs	r3, #6
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052a6:	f107 031c 	add.w	r3, r7, #28
 80052aa:	4619      	mov	r1, r3
 80052ac:	4806      	ldr	r0, [pc, #24]	; (80052c8 <HAL_SPI_MspInit+0xe8>)
 80052ae:	f003 fab1 	bl	8008814 <HAL_GPIO_Init>
}
 80052b2:	bf00      	nop
 80052b4:	3730      	adds	r7, #48	; 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40013000 	.word	0x40013000
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40003c00 	.word	0x40003c00
 80052c8:	48000800 	.word	0x48000800

080052cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <HAL_MspInit+0x44>)
 80052d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d6:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <HAL_MspInit+0x44>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	6613      	str	r3, [r2, #96]	; 0x60
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <HAL_MspInit+0x44>)
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_MspInit+0x44>)
 80052ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <HAL_MspInit+0x44>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6593      	str	r3, [r2, #88]	; 0x58
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_MspInit+0x44>)
 80052f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005302:	f003 fcc5 	bl	8008c90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000

08005314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005318:	e7fe      	b.n	8005318 <NMI_Handler+0x4>

0800531a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800531e:	e7fe      	b.n	800531e <HardFault_Handler+0x4>

08005320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005324:	e7fe      	b.n	8005324 <MemManage_Handler+0x4>

08005326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800532a:	e7fe      	b.n	800532a <BusFault_Handler+0x4>

0800532c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005330:	e7fe      	b.n	8005330 <UsageFault_Handler+0x4>

08005332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005360:	f000 fc9e 	bl	8005ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005364:	bf00      	nop
 8005366:	bd80      	pop	{r7, pc}

08005368 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  analog_sample(&controller);
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <TIM1_UP_TIM16_IRQHandler+0x34>)
 800536e:	f7fd fa05 	bl	800277c <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 8005372:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80053a0 <TIM1_UP_TIM16_IRQHandler+0x38>
 8005376:	480b      	ldr	r0, [pc, #44]	; (80053a4 <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8005378:	f7ff fcfe 	bl	8004d78 <ps_sample>

  /* Run Finite State Machine */
  run_fsm(&state);
 800537c:	480a      	ldr	r0, [pc, #40]	; (80053a8 <TIM1_UP_TIM16_IRQHandler+0x40>)
 800537e:	f7fe f89b 	bl	80034b8 <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 8005382:	4b06      	ldr	r3, [pc, #24]	; (800539c <TIM1_UP_TIM16_IRQHandler+0x34>)
 8005384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005388:	3301      	adds	r3, #1
 800538a:	4a04      	ldr	r2, [pc, #16]	; (800539c <TIM1_UP_TIM16_IRQHandler+0x34>)
 800538c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  //HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005390:	4806      	ldr	r0, [pc, #24]	; (80053ac <TIM1_UP_TIM16_IRQHandler+0x44>)
 8005392:	f005 facf 	bl	800a934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000784 	.word	0x20000784
 80053a0:	37d1b717 	.word	0x37d1b717
 80053a4:	200003e0 	.word	0x200003e0
 80053a8:	20000674 	.word	0x20000674
 80053ac:	200094a8 	.word	0x200094a8

080053b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053b6:	4807      	ldr	r0, [pc, #28]	; (80053d4 <USART2_IRQHandler+0x24>)
 80053b8:	f006 fe54 	bl	800c064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 80053bc:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <USART2_IRQHandler+0x28>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	4619      	mov	r1, r3
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <USART2_IRQHandler+0x2c>)
 80053c8:	f7fe fa20 	bl	800380c <update_fsm>
  /* USER CODE END USART2_IRQn 1 */
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	200094f4 	.word	0x200094f4
 80053d8:	20000670 	.word	0x20000670
 80053dc:	20000674 	.word	0x20000674

080053e0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80053e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e2:	b091      	sub	sp, #68	; 0x44
 80053e4:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80053e6:	4882      	ldr	r0, [pc, #520]	; (80055f0 <FDCAN2_IT0_IRQHandler+0x210>)
 80053e8:	f002 fc98 	bl	8007d1c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 80053ec:	4b81      	ldr	r3, [pc, #516]	; (80055f4 <FDCAN2_IT0_IRQHandler+0x214>)
 80053ee:	4a82      	ldr	r2, [pc, #520]	; (80055f8 <FDCAN2_IT0_IRQHandler+0x218>)
 80053f0:	2140      	movs	r1, #64	; 0x40
 80053f2:	487f      	ldr	r0, [pc, #508]	; (80055f0 <FDCAN2_IT0_IRQHandler+0x210>)
 80053f4:	f002 fbb8 	bl	8007b68 <HAL_FDCAN_GetRxMessage>
  uint32_t TxMailbox;
  pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 80053f8:	4b80      	ldr	r3, [pc, #512]	; (80055fc <FDCAN2_IT0_IRQHandler+0x21c>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	4a80      	ldr	r2, [pc, #512]	; (8005600 <FDCAN2_IT0_IRQHandler+0x220>)
 8005400:	ed92 7a03 	vldr	s14, [r2, #12]
 8005404:	4a7f      	ldr	r2, [pc, #508]	; (8005604 <FDCAN2_IT0_IRQHandler+0x224>)
 8005406:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800540a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800540e:	4a7c      	ldr	r2, [pc, #496]	; (8005600 <FDCAN2_IT0_IRQHandler+0x220>)
 8005410:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 8005414:	4a7b      	ldr	r2, [pc, #492]	; (8005604 <FDCAN2_IT0_IRQHandler+0x224>)
 8005416:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 800541a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800541e:	4a7a      	ldr	r2, [pc, #488]	; (8005608 <FDCAN2_IT0_IRQHandler+0x228>)
 8005420:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8005424:	4a77      	ldr	r2, [pc, #476]	; (8005604 <FDCAN2_IT0_IRQHandler+0x224>)
 8005426:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800542a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800542e:	4a75      	ldr	r2, [pc, #468]	; (8005604 <FDCAN2_IT0_IRQHandler+0x224>)
 8005430:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005438:	eeb0 1a67 	vmov.f32	s2, s15
 800543c:	eef0 0a46 	vmov.f32	s1, s12
 8005440:	eeb0 0a66 	vmov.f32	s0, s13
 8005444:	4619      	mov	r1, r3
 8005446:	4871      	ldr	r0, [pc, #452]	; (800560c <FDCAN2_IT0_IRQHandler+0x22c>)
 8005448:	f7fc feb8 	bl	80021bc <pack_reply>

  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line
 800544c:	4a70      	ldr	r2, [pc, #448]	; (8005610 <FDCAN2_IT0_IRQHandler+0x230>)
 800544e:	4971      	ldr	r1, [pc, #452]	; (8005614 <FDCAN2_IT0_IRQHandler+0x234>)
 8005450:	4867      	ldr	r0, [pc, #412]	; (80055f0 <FDCAN2_IT0_IRQHandler+0x210>)
 8005452:	f002 fb45 	bl	8007ae0 <HAL_FDCAN_AddMessageToTxFifoQ>

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005456:	4b70      	ldr	r3, [pc, #448]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005458:	785a      	ldrb	r2, [r3, #1]
 800545a:	4b6f      	ldr	r3, [pc, #444]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800545c:	789b      	ldrb	r3, [r3, #2]
 800545e:	4013      	ands	r3, r2
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4b6d      	ldr	r3, [pc, #436]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005464:	78db      	ldrb	r3, [r3, #3]
 8005466:	4013      	ands	r3, r2
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4b6b      	ldr	r3, [pc, #428]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800546c:	791b      	ldrb	r3, [r3, #4]
 800546e:	4013      	ands	r3, r2
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4b69      	ldr	r3, [pc, #420]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005474:	795b      	ldrb	r3, [r3, #5]
 8005476:	4013      	ands	r3, r2
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b67      	ldr	r3, [pc, #412]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800547c:	799b      	ldrb	r3, [r3, #6]
 800547e:	4013      	ands	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4b65      	ldr	r3, [pc, #404]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005484:	79db      	ldrb	r3, [r3, #7]
 8005486:	4013      	ands	r3, r2
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2bff      	cmp	r3, #255	; 0xff
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2da      	uxtb	r2, r3
 8005494:	4b60      	ldr	r3, [pc, #384]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005496:	7a1b      	ldrb	r3, [r3, #8]
 8005498:	2bfc      	cmp	r3, #252	; 0xfc
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	4013      	ands	r3, r2
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d004      	beq.n	80054b4 <FDCAN2_IT0_IRQHandler+0xd4>
	  update_fsm(&state, MOTOR_CMD);
 80054aa:	216d      	movs	r1, #109	; 0x6d
 80054ac:	485b      	ldr	r0, [pc, #364]	; (800561c <FDCAN2_IT0_IRQHandler+0x23c>)
 80054ae:	f7fe f9ad 	bl	800380c <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80054b2:	e099      	b.n	80055e8 <FDCAN2_IT0_IRQHandler+0x208>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80054b4:	4b58      	ldr	r3, [pc, #352]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 80054b6:	785a      	ldrb	r2, [r3, #1]
 80054b8:	4b57      	ldr	r3, [pc, #348]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 80054ba:	789b      	ldrb	r3, [r3, #2]
 80054bc:	4013      	ands	r3, r2
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	4b55      	ldr	r3, [pc, #340]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 80054c2:	78db      	ldrb	r3, [r3, #3]
 80054c4:	4013      	ands	r3, r2
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2bff      	cmp	r3, #255	; 0xff
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	4b50      	ldr	r3, [pc, #320]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 80054d6:	791b      	ldrb	r3, [r3, #4]
 80054d8:	2bff      	cmp	r3, #255	; 0xff
 80054da:	bf0c      	ite	eq
 80054dc:	2301      	moveq	r3, #1
 80054de:	2300      	movne	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	4619      	mov	r1, r3
 80054e4:	4b4c      	ldr	r3, [pc, #304]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 80054e6:	795b      	ldrb	r3, [r3, #5]
 80054e8:	2bff      	cmp	r3, #255	; 0xff
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	fb03 f301 	mul.w	r3, r3, r1
 80054f6:	4013      	ands	r3, r2
 80054f8:	4a47      	ldr	r2, [pc, #284]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 80054fa:	7992      	ldrb	r2, [r2, #6]
 80054fc:	2aff      	cmp	r2, #255	; 0xff
 80054fe:	bf0c      	ite	eq
 8005500:	2201      	moveq	r2, #1
 8005502:	2200      	movne	r2, #0
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	4013      	ands	r3, r2
 8005508:	4a43      	ldr	r2, [pc, #268]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800550a:	79d2      	ldrb	r2, [r2, #7]
 800550c:	2aff      	cmp	r2, #255	; 0xff
 800550e:	bf0c      	ite	eq
 8005510:	2201      	moveq	r2, #1
 8005512:	2200      	movne	r2, #0
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	4013      	ands	r3, r2
 8005518:	4a3f      	ldr	r2, [pc, #252]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800551a:	7a12      	ldrb	r2, [r2, #8]
 800551c:	2afd      	cmp	r2, #253	; 0xfd
 800551e:	bf0c      	ite	eq
 8005520:	2201      	moveq	r2, #1
 8005522:	2200      	movne	r2, #0
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <FDCAN2_IT0_IRQHandler+0x156>
	  update_fsm(&state, MENU_CMD);
 800552c:	211b      	movs	r1, #27
 800552e:	483b      	ldr	r0, [pc, #236]	; (800561c <FDCAN2_IT0_IRQHandler+0x23c>)
 8005530:	f7fe f96c 	bl	800380c <update_fsm>
}
 8005534:	e058      	b.n	80055e8 <FDCAN2_IT0_IRQHandler+0x208>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005536:	4b38      	ldr	r3, [pc, #224]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005538:	785a      	ldrb	r2, [r3, #1]
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800553c:	789b      	ldrb	r3, [r3, #2]
 800553e:	4013      	ands	r3, r2
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4b35      	ldr	r3, [pc, #212]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005544:	78db      	ldrb	r3, [r3, #3]
 8005546:	4013      	ands	r3, r2
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2bff      	cmp	r3, #255	; 0xff
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	4b30      	ldr	r3, [pc, #192]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005558:	791b      	ldrb	r3, [r3, #4]
 800555a:	2bff      	cmp	r3, #255	; 0xff
 800555c:	bf0c      	ite	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	2300      	movne	r3, #0
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	4b2c      	ldr	r3, [pc, #176]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 8005568:	795b      	ldrb	r3, [r3, #5]
 800556a:	2bff      	cmp	r3, #255	; 0xff
 800556c:	bf0c      	ite	eq
 800556e:	2301      	moveq	r3, #1
 8005570:	2300      	movne	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	fb03 f301 	mul.w	r3, r3, r1
 8005578:	4013      	ands	r3, r2
 800557a:	4a27      	ldr	r2, [pc, #156]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800557c:	7992      	ldrb	r2, [r2, #6]
 800557e:	2aff      	cmp	r2, #255	; 0xff
 8005580:	bf0c      	ite	eq
 8005582:	2201      	moveq	r2, #1
 8005584:	2200      	movne	r2, #0
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	4013      	ands	r3, r2
 800558a:	4a23      	ldr	r2, [pc, #140]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800558c:	79d2      	ldrb	r2, [r2, #7]
 800558e:	2aff      	cmp	r2, #255	; 0xff
 8005590:	bf0c      	ite	eq
 8005592:	2201      	moveq	r2, #1
 8005594:	2200      	movne	r2, #0
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	4013      	ands	r3, r2
 800559a:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 800559c:	7a12      	ldrb	r2, [r2, #8]
 800559e:	2afe      	cmp	r2, #254	; 0xfe
 80055a0:	bf0c      	ite	eq
 80055a2:	2201      	moveq	r2, #1
 80055a4:	2200      	movne	r2, #0
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <FDCAN2_IT0_IRQHandler+0x1d8>
	  update_fsm(&state, ZERO_CMD);
 80055ae:	217a      	movs	r1, #122	; 0x7a
 80055b0:	481a      	ldr	r0, [pc, #104]	; (800561c <FDCAN2_IT0_IRQHandler+0x23c>)
 80055b2:	f7fe f92b 	bl	800380c <update_fsm>
}
 80055b6:	e017      	b.n	80055e8 <FDCAN2_IT0_IRQHandler+0x208>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80055b8:	4e17      	ldr	r6, [pc, #92]	; (8005618 <FDCAN2_IT0_IRQHandler+0x238>)
 80055ba:	4b19      	ldr	r3, [pc, #100]	; (8005620 <FDCAN2_IT0_IRQHandler+0x240>)
 80055bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80055be:	466d      	mov	r5, sp
 80055c0:	f106 0410 	add.w	r4, r6, #16
 80055c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80055d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80055dc:	f7fc fe66 	bl	80022ac <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <FDCAN2_IT0_IRQHandler+0x228>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80055e8:	bf00      	nop
 80055ea:	3704      	adds	r7, #4
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f0:	20000378 	.word	0x20000378
 80055f4:	20009369 	.word	0x20009369
 80055f8:	20009374 	.word	0x20009374
 80055fc:	20008f34 	.word	0x20008f34
 8005600:	200003e0 	.word	0x200003e0
 8005604:	20000684 	.word	0x20000684
 8005608:	20000784 	.word	0x20000784
 800560c:	20009334 	.word	0x20009334
 8005610:	20009335 	.word	0x20009335
 8005614:	2000933c 	.word	0x2000933c
 8005618:	20009368 	.word	0x20009368
 800561c:	20000674 	.word	0x20000674
 8005620:	2000084c 	.word	0x2000084c

08005624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
	return 1;
 8005628:	2301      	movs	r3, #1
}
 800562a:	4618      	mov	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <_kill>:

int _kill(int pid, int sig)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800563e:	f008 f8c3 	bl	800d7c8 <__errno>
 8005642:	4603      	mov	r3, r0
 8005644:	2216      	movs	r2, #22
 8005646:	601a      	str	r2, [r3, #0]
	return -1;
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_exit>:

void _exit (int status)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800565c:	f04f 31ff 	mov.w	r1, #4294967295
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ffe7 	bl	8005634 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005666:	e7fe      	b.n	8005666 <_exit+0x12>

08005668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e00a      	b.n	8005690 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800567a:	f3af 8000 	nop.w
 800567e:	4601      	mov	r1, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	60ba      	str	r2, [r7, #8]
 8005686:	b2ca      	uxtb	r2, r1
 8005688:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	3301      	adds	r3, #1
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	429a      	cmp	r2, r3
 8005696:	dbf0      	blt.n	800567a <_read+0x12>
	}

return len;
 8005698:	687b      	ldr	r3, [r7, #4]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e009      	b.n	80056c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	60ba      	str	r2, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fa4f 	bl	8005b60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	3301      	adds	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	dbf1      	blt.n	80056b4 <_write+0x12>
	}
	return len;
 80056d0:	687b      	ldr	r3, [r7, #4]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <_close>:

int _close(int file)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
	return -1;
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005702:	605a      	str	r2, [r3, #4]
	return 0;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <_isatty>:

int _isatty(int file)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
	return 1;
 800571a:	2301      	movs	r3, #1
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
	return 0;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800574c:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <_sbrk+0x5c>)
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <_sbrk+0x60>)
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <_sbrk+0x64>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <_sbrk+0x64>)
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <_sbrk+0x68>)
 8005764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <_sbrk+0x64>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	d207      	bcs.n	8005784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005774:	f008 f828 	bl	800d7c8 <__errno>
 8005778:	4603      	mov	r3, r0
 800577a:	220c      	movs	r2, #12
 800577c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	e009      	b.n	8005798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005784:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <_sbrk+0x64>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <_sbrk+0x64>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	4a05      	ldr	r2, [pc, #20]	; (80057a8 <_sbrk+0x64>)
 8005794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20020000 	.word	0x20020000
 80057a4:	00000400 	.word	0x00000400
 80057a8:	20000228 	.word	0x20000228
 80057ac:	20009598 	.word	0x20009598

080057b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <SystemInit+0x20>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	4a05      	ldr	r2, [pc, #20]	; (80057d0 <SystemInit+0x20>)
 80057bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b09c      	sub	sp, #112	; 0x70
 80057d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	605a      	str	r2, [r3, #4]
 80057e4:	609a      	str	r2, [r3, #8]
 80057e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	605a      	str	r2, [r3, #4]
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	611a      	str	r2, [r3, #16]
 8005804:	615a      	str	r2, [r3, #20]
 8005806:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	2234      	movs	r2, #52	; 0x34
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f008 f812 	bl	800d838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005814:	4b56      	ldr	r3, [pc, #344]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005816:	4a57      	ldr	r2, [pc, #348]	; (8005974 <MX_TIM1_Init+0x1a0>)
 8005818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800581a:	4b55      	ldr	r3, [pc, #340]	; (8005970 <MX_TIM1_Init+0x19c>)
 800581c:	2200      	movs	r2, #0
 800581e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005820:	4b53      	ldr	r3, [pc, #332]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005822:	2200      	movs	r2, #0
 8005824:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005826:	4b52      	ldr	r3, [pc, #328]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800582e:	4b50      	ldr	r3, [pc, #320]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005834:	4b4e      	ldr	r3, [pc, #312]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005836:	2200      	movs	r2, #0
 8005838:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800583a:	4b4d      	ldr	r3, [pc, #308]	; (8005970 <MX_TIM1_Init+0x19c>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005840:	484b      	ldr	r0, [pc, #300]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005842:	f004 fdd3 	bl	800a3ec <HAL_TIM_Base_Init>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800584c:	f7ff f8b4 	bl	80049b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005854:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005856:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800585a:	4619      	mov	r1, r3
 800585c:	4844      	ldr	r0, [pc, #272]	; (8005970 <MX_TIM1_Init+0x19c>)
 800585e:	f005 fb6f 	bl	800af40 <HAL_TIM_ConfigClockSource>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005868:	f7ff f8a6 	bl	80049b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800586c:	4840      	ldr	r0, [pc, #256]	; (8005970 <MX_TIM1_Init+0x19c>)
 800586e:	f004 feee 	bl	800a64e <HAL_TIM_PWM_Init>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005878:	f7ff f89e 	bl	80049b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800587c:	483c      	ldr	r0, [pc, #240]	; (8005970 <MX_TIM1_Init+0x19c>)
 800587e:	f004 fe85 	bl	800a58c <HAL_TIM_OC_Init>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8005888:	f7ff f896 	bl	80049b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800588c:	2300      	movs	r3, #0
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005890:	2300      	movs	r3, #0
 8005892:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005894:	2300      	movs	r3, #0
 8005896:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005898:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800589c:	4619      	mov	r1, r3
 800589e:	4834      	ldr	r0, [pc, #208]	; (8005970 <MX_TIM1_Init+0x19c>)
 80058a0:	f006 f926 	bl	800baf0 <HAL_TIMEx_MasterConfigSynchronization>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80058aa:	f7ff f885 	bl	80049b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058ae:	2360      	movs	r3, #96	; 0x60
 80058b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058b6:	2300      	movs	r3, #0
 80058b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058ba:	2300      	movs	r3, #0
 80058bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058be:	2300      	movs	r3, #0
 80058c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058c2:	2300      	movs	r3, #0
 80058c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058ce:	2200      	movs	r2, #0
 80058d0:	4619      	mov	r1, r3
 80058d2:	4827      	ldr	r0, [pc, #156]	; (8005970 <MX_TIM1_Init+0x19c>)
 80058d4:	f005 fa24 	bl	800ad20 <HAL_TIM_PWM_ConfigChannel>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80058de:	f7ff f86b 	bl	80049b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058e6:	2204      	movs	r2, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4821      	ldr	r0, [pc, #132]	; (8005970 <MX_TIM1_Init+0x19c>)
 80058ec:	f005 fa18 	bl	800ad20 <HAL_TIM_PWM_ConfigChannel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80058f6:	f7ff f85f 	bl	80049b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80058fa:	2300      	movs	r3, #0
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80058fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005902:	2208      	movs	r2, #8
 8005904:	4619      	mov	r1, r3
 8005906:	481a      	ldr	r0, [pc, #104]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005908:	f005 f994 	bl	800ac34 <HAL_TIM_OC_ConfigChannel>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005912:	f7ff f851 	bl	80049b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005916:	2300      	movs	r3, #0
 8005918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800592a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800592e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005934:	2300      	movs	r3, #0
 8005936:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005938:	2300      	movs	r3, #0
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800593c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005946:	2300      	movs	r3, #0
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800594a:	2300      	movs	r3, #0
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800594e:	1d3b      	adds	r3, r7, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4807      	ldr	r0, [pc, #28]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005954:	f006 f962 	bl	800bc1c <HAL_TIMEx_ConfigBreakDeadTime>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 800595e:	f7ff f82b 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005962:	4803      	ldr	r0, [pc, #12]	; (8005970 <MX_TIM1_Init+0x19c>)
 8005964:	f000 f82e 	bl	80059c4 <HAL_TIM_MspPostInit>

}
 8005968:	bf00      	nop
 800596a:	3770      	adds	r7, #112	; 0x70
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	200094a8 	.word	0x200094a8
 8005974:	40012c00 	.word	0x40012c00

08005978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <HAL_TIM_Base_MspInit+0x44>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d113      	bne.n	80059b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_TIM_Base_MspInit+0x48>)
 800598c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598e:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <HAL_TIM_Base_MspInit+0x48>)
 8005990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005994:	6613      	str	r3, [r2, #96]	; 0x60
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <HAL_TIM_Base_MspInit+0x48>)
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	2019      	movs	r0, #25
 80059a8:	f001 fe4b 	bl	8007642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80059ac:	2019      	movs	r0, #25
 80059ae:	f001 fe62 	bl	8007676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40021000 	.word	0x40021000

080059c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059cc:	f107 030c 	add.w	r3, r7, #12
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <HAL_TIM_MspPostInit+0x68>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d11d      	bne.n	8005a22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <HAL_TIM_MspPostInit+0x6c>)
 80059e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ea:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <HAL_TIM_MspPostInit+0x6c>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059f2:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <HAL_TIM_MspPostInit+0x6c>)
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80059fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a04:	2302      	movs	r3, #2
 8005a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005a10:	2306      	movs	r3, #6
 8005a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a1e:	f002 fef9 	bl	8008814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005a22:	bf00      	nop
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40021000 	.word	0x40021000

08005a34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a38:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a3a:	4a23      	ldr	r2, [pc, #140]	; (8005ac8 <MX_USART2_UART_Init+0x94>)
 8005a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005a3e:	4b21      	ldr	r3, [pc, #132]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a46:	4b1f      	ldr	r3, [pc, #124]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a58:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a5a:	220c      	movs	r2, #12
 8005a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a5e:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a64:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a70:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a7c:	4811      	ldr	r0, [pc, #68]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a7e:	f006 f9c5 	bl	800be0c <HAL_UART_Init>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005a88:	f7fe ff96 	bl	80049b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	480d      	ldr	r0, [pc, #52]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005a90:	f007 fdc7 	bl	800d622 <HAL_UARTEx_SetTxFifoThreshold>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005a9a:	f7fe ff8d 	bl	80049b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4808      	ldr	r0, [pc, #32]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005aa2:	f007 fdfc 	bl	800d69e <HAL_UARTEx_SetRxFifoThreshold>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005aac:	f7fe ff84 	bl	80049b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005ab0:	4804      	ldr	r0, [pc, #16]	; (8005ac4 <MX_USART2_UART_Init+0x90>)
 8005ab2:	f007 fd7d 	bl	800d5b0 <HAL_UARTEx_DisableFifoMode>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005abc:	f7fe ff7c 	bl	80049b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ac0:	bf00      	nop
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	200094f4 	.word	0x200094f4
 8005ac8:	40004400 	.word	0x40004400

08005acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad4:	f107 0314 	add.w	r3, r7, #20
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_UART_MspInit+0x8c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d130      	bne.n	8005b50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005aee:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <HAL_UART_MspInit+0x90>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af2:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <HAL_UART_MspInit+0x90>)
 8005af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af8:	6593      	str	r3, [r2, #88]	; 0x58
 8005afa:	4b18      	ldr	r3, [pc, #96]	; (8005b5c <HAL_UART_MspInit+0x90>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b06:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <HAL_UART_MspInit+0x90>)
 8005b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0a:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <HAL_UART_MspInit+0x90>)
 8005b0c:	f043 0301 	orr.w	r3, r3, #1
 8005b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <HAL_UART_MspInit+0x90>)
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b1e:	230c      	movs	r3, #12
 8005b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b22:	2302      	movs	r3, #2
 8005b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b2e:	2307      	movs	r3, #7
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b32:	f107 0314 	add.w	r3, r7, #20
 8005b36:	4619      	mov	r1, r3
 8005b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b3c:	f002 fe6a 	bl	8008814 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2100      	movs	r1, #0
 8005b44:	2026      	movs	r0, #38	; 0x26
 8005b46:	f001 fd7c 	bl	8007642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b4a:	2026      	movs	r0, #38	; 0x26
 8005b4c:	f001 fd93 	bl	8007676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005b50:	bf00      	nop
 8005b52:	3728      	adds	r7, #40	; 0x28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40004400 	.word	0x40004400
 8005b5c:	40021000 	.word	0x40021000

08005b60 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005b68:	1d39      	adds	r1, r7, #4
 8005b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4803      	ldr	r0, [pc, #12]	; (8005b80 <__io_putchar+0x20>)
 8005b72:	f006 f99b 	bl	800beac <HAL_UART_Transmit>
return 0;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	200094f4 	.word	0x200094f4

08005b84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	4904      	ldr	r1, [pc, #16]	; (8005ba0 <HAL_UART_RxCpltCallback+0x1c>)
 8005b90:	4804      	ldr	r0, [pc, #16]	; (8005ba4 <HAL_UART_RxCpltCallback+0x20>)
 8005b92:	f006 fa21 	bl	800bfd8 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000670 	.word	0x20000670
 8005ba4:	200094f4 	.word	0x200094f4

08005ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ba8:	480d      	ldr	r0, [pc, #52]	; (8005be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005baa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005bac:	480d      	ldr	r0, [pc, #52]	; (8005be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005bae:	490e      	ldr	r1, [pc, #56]	; (8005be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005bb0:	4a0e      	ldr	r2, [pc, #56]	; (8005bec <LoopForever+0xe>)
  movs r3, #0
 8005bb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005bb4:	e002      	b.n	8005bbc <LoopCopyDataInit>

08005bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bba:	3304      	adds	r3, #4

08005bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bc0:	d3f9      	bcc.n	8005bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bc2:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005bc4:	4c0b      	ldr	r4, [pc, #44]	; (8005bf4 <LoopForever+0x16>)
  movs r3, #0
 8005bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bc8:	e001      	b.n	8005bce <LoopFillZerobss>

08005bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bcc:	3204      	adds	r2, #4

08005bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bd0:	d3fb      	bcc.n	8005bca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bd2:	f7ff fded 	bl	80057b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bd6:	f007 fdfd 	bl	800d7d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bda:	f7fe fbbd 	bl	8004358 <main>

08005bde <LoopForever>:

LoopForever:
    b LoopForever
 8005bde:	e7fe      	b.n	8005bde <LoopForever>
  ldr   r0, =_estack
 8005be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005be8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8005bec:	08013678 	.word	0x08013678
  ldr r2, =_sbss
 8005bf0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005bf4:	20009598 	.word	0x20009598

08005bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bf8:	e7fe      	b.n	8005bf8 <ADC1_2_IRQHandler>

08005bfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c04:	2003      	movs	r0, #3
 8005c06:	f001 fd11 	bl	800762c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f000 f80e 	bl	8005c2c <HAL_InitTick>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	71fb      	strb	r3, [r7, #7]
 8005c1a:	e001      	b.n	8005c20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c1c:	f7ff fb56 	bl	80052cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c20:	79fb      	ldrb	r3, [r7, #7]

}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005c38:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <HAL_InitTick+0x68>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d022      	beq.n	8005c86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005c40:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <HAL_InitTick+0x6c>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <HAL_InitTick+0x68>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 fd1c 	bl	8007692 <HAL_SYSTICK_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10f      	bne.n	8005c80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b0f      	cmp	r3, #15
 8005c64:	d809      	bhi.n	8005c7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c66:	2200      	movs	r2, #0
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6e:	f001 fce8 	bl	8007642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <HAL_InitTick+0x70>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e007      	b.n	8005c8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
 8005c7e:	e004      	b.n	8005c8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
 8005c84:	e001      	b.n	8005c8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000008 	.word	0x20000008
 8005c98:	20000000 	.word	0x20000000
 8005c9c:	20000004 	.word	0x20000004

08005ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_IncTick+0x1c>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_IncTick+0x20>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	4a03      	ldr	r2, [pc, #12]	; (8005cbc <HAL_IncTick+0x1c>)
 8005cb0:	6013      	str	r3, [r2, #0]
}
 8005cb2:	bf00      	nop
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20009584 	.word	0x20009584
 8005cc0:	20000008 	.word	0x20000008

08005cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <HAL_GetTick+0x14>)
 8005cca:	681b      	ldr	r3, [r3, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20009584 	.word	0x20009584

08005cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ce4:	f7ff ffee 	bl	8005cc4 <HAL_GetTick>
 8005ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d004      	beq.n	8005d00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <HAL_Delay+0x40>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d00:	bf00      	nop
 8005d02:	f7ff ffdf 	bl	8005cc4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d8f7      	bhi.n	8005d02 <HAL_Delay+0x26>
  {
  }
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000008 	.word	0x20000008

08005d20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3360      	adds	r3, #96	; 0x60
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <LL_ADC_SetOffset+0x44>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	03fff000 	.word	0x03fff000

08005dd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3360      	adds	r3, #96	; 0x60
 8005dde:	461a      	mov	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3360      	adds	r3, #96	; 0x60
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	431a      	orrs	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b087      	sub	sp, #28
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3360      	adds	r3, #96	; 0x60
 8005e42:	461a      	mov	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3360      	adds	r3, #96	; 0x60
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	615a      	str	r2, [r3, #20]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3330      	adds	r3, #48	; 0x30
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	4413      	add	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	211f      	movs	r1, #31
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	401a      	ands	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0e9b      	lsrs	r3, r3, #26
 8005f22:	f003 011f 	and.w	r1, r3, #31
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	431a      	orrs	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3314      	adds	r3, #20
 8005f52:	461a      	mov	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0e5b      	lsrs	r3, r3, #25
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	4413      	add	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	0d1b      	lsrs	r3, r3, #20
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2107      	movs	r1, #7
 8005f70:	fa01 f303 	lsl.w	r3, r1, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	401a      	ands	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	0d1b      	lsrs	r3, r3, #20
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	431a      	orrs	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005f8c:	bf00      	nop
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0318 	and.w	r3, r3, #24
 8005fba:	4908      	ldr	r1, [pc, #32]	; (8005fdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8005fbc:	40d9      	lsrs	r1, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	400b      	ands	r3, r1
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	0007ffff 	.word	0x0007ffff

08005fe0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 031f 	and.w	r3, r3, #31
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6093      	str	r3, [r2, #8]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006050:	d101      	bne.n	8006056 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a0:	d101      	bne.n	80060a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060c8:	f043 0201 	orr.w	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <LL_ADC_IsEnabled+0x18>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <LL_ADC_IsEnabled+0x1a>
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006112:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006116:	f043 0204 	orr.w	r2, r3, #4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b04      	cmp	r3, #4
 800613c:	d101      	bne.n	8006142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b08      	cmp	r3, #8
 8006162:	d101      	bne.n	8006168 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b089      	sub	sp, #36	; 0x24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e1af      	b.n	80064f2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fb f8a1 	bl	80012e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff ff3f 	bl	800603c <LL_ADC_IsDeepPowerDownEnabled>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff ff25 	bl	8006018 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff ff5a 	bl	800608c <LL_ADC_IsInternalRegulatorEnabled>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d115      	bne.n	800620a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ff3e 	bl	8006064 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061e8:	4b9f      	ldr	r3, [pc, #636]	; (8006468 <HAL_ADC_Init+0x2f0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	099b      	lsrs	r3, r3, #6
 80061ee:	4a9f      	ldr	r2, [pc, #636]	; (800646c <HAL_ADC_Init+0x2f4>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	099b      	lsrs	r3, r3, #6
 80061f6:	3301      	adds	r3, #1
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80061fc:	e002      	b.n	8006204 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	3b01      	subs	r3, #1
 8006202:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f9      	bne.n	80061fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff ff3c 	bl	800608c <LL_ADC_IsInternalRegulatorEnabled>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621e:	f043 0210 	orr.w	r2, r3, #16
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622a:	f043 0201 	orr.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff ff75 	bl	800612a <LL_ADC_REG_IsConversionOngoing>
 8006240:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b00      	cmp	r3, #0
 800624c:	f040 8148 	bne.w	80064e0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 8144 	bne.w	80064e0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006260:	f043 0202 	orr.w	r2, r3, #2
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff ff35 	bl	80060dc <LL_ADC_IsEnabled>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d141      	bne.n	80062fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006280:	d004      	beq.n	800628c <HAL_ADC_Init+0x114>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a7a      	ldr	r2, [pc, #488]	; (8006470 <HAL_ADC_Init+0x2f8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10f      	bne.n	80062ac <HAL_ADC_Init+0x134>
 800628c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006290:	f7ff ff24 	bl	80060dc <LL_ADC_IsEnabled>
 8006294:	4604      	mov	r4, r0
 8006296:	4876      	ldr	r0, [pc, #472]	; (8006470 <HAL_ADC_Init+0x2f8>)
 8006298:	f7ff ff20 	bl	80060dc <LL_ADC_IsEnabled>
 800629c:	4603      	mov	r3, r0
 800629e:	4323      	orrs	r3, r4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e012      	b.n	80062d2 <HAL_ADC_Init+0x15a>
 80062ac:	4871      	ldr	r0, [pc, #452]	; (8006474 <HAL_ADC_Init+0x2fc>)
 80062ae:	f7ff ff15 	bl	80060dc <LL_ADC_IsEnabled>
 80062b2:	4604      	mov	r4, r0
 80062b4:	4870      	ldr	r0, [pc, #448]	; (8006478 <HAL_ADC_Init+0x300>)
 80062b6:	f7ff ff11 	bl	80060dc <LL_ADC_IsEnabled>
 80062ba:	4603      	mov	r3, r0
 80062bc:	431c      	orrs	r4, r3
 80062be:	486f      	ldr	r0, [pc, #444]	; (800647c <HAL_ADC_Init+0x304>)
 80062c0:	f7ff ff0c 	bl	80060dc <LL_ADC_IsEnabled>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4323      	orrs	r3, r4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d012      	beq.n	80062fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062de:	d004      	beq.n	80062ea <HAL_ADC_Init+0x172>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a62      	ldr	r2, [pc, #392]	; (8006470 <HAL_ADC_Init+0x2f8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_ADC_Init+0x176>
 80062ea:	4a65      	ldr	r2, [pc, #404]	; (8006480 <HAL_ADC_Init+0x308>)
 80062ec:	e000      	b.n	80062f0 <HAL_ADC_Init+0x178>
 80062ee:	4a65      	ldr	r2, [pc, #404]	; (8006484 <HAL_ADC_Init+0x30c>)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f7ff fd12 	bl	8005d20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	7f5b      	ldrb	r3, [r3, #29]
 8006300:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006306:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800630c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006312:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800631a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800631c:	4313      	orrs	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006326:	2b01      	cmp	r3, #1
 8006328:	d106      	bne.n	8006338 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	3b01      	subs	r3, #1
 8006330:	045b      	lsls	r3, r3, #17
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4313      	orrs	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	4b4b      	ldr	r3, [pc, #300]	; (8006488 <HAL_ADC_Init+0x310>)
 800635c:	4013      	ands	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	69b9      	ldr	r1, [r7, #24]
 8006364:	430b      	orrs	r3, r1
 8006366:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff fed1 	bl	800612a <LL_ADC_REG_IsConversionOngoing>
 8006388:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fede 	bl	8006150 <LL_ADC_INJ_IsConversionOngoing>
 8006394:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d17f      	bne.n	800649c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d17c      	bne.n	800649c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80063a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063be:	f023 0302 	bic.w	r3, r3, #2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6812      	ldr	r2, [r2, #0]
 80063c6:	69b9      	ldr	r1, [r7, #24]
 80063c8:	430b      	orrs	r3, r1
 80063ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d017      	beq.n	8006404 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80063e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80063f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6911      	ldr	r1, [r2, #16]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	430b      	orrs	r3, r1
 80063fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006402:	e013      	b.n	800642c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006412:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006428:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006432:	2b01      	cmp	r3, #1
 8006434:	d12a      	bne.n	800648c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006440:	f023 0304 	bic.w	r3, r3, #4
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800644c:	4311      	orrs	r1, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006452:	4311      	orrs	r1, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006458:	430a      	orrs	r2, r1
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0201 	orr.w	r2, r2, #1
 8006464:	611a      	str	r2, [r3, #16]
 8006466:	e019      	b.n	800649c <HAL_ADC_Init+0x324>
 8006468:	20000000 	.word	0x20000000
 800646c:	053e2d63 	.word	0x053e2d63
 8006470:	50000100 	.word	0x50000100
 8006474:	50000400 	.word	0x50000400
 8006478:	50000500 	.word	0x50000500
 800647c:	50000600 	.word	0x50000600
 8006480:	50000300 	.word	0x50000300
 8006484:	50000700 	.word	0x50000700
 8006488:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691a      	ldr	r2, [r3, #16]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d10c      	bne.n	80064be <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	f023 010f 	bic.w	r1, r3, #15
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	1e5a      	subs	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
 80064bc:	e007      	b.n	80064ce <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 020f 	bic.w	r2, r2, #15
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	f043 0201 	orr.w	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80064de:	e007      	b.n	80064f0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e4:	f043 0210 	orr.w	r2, r3, #16
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80064f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3724      	adds	r7, #36	; 0x24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd90      	pop	{r4, r7, pc}
 80064fa:	bf00      	nop

080064fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800650c:	d004      	beq.n	8006518 <HAL_ADC_Start+0x1c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a67      	ldr	r2, [pc, #412]	; (80066b0 <HAL_ADC_Start+0x1b4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_ADC_Start+0x20>
 8006518:	4b66      	ldr	r3, [pc, #408]	; (80066b4 <HAL_ADC_Start+0x1b8>)
 800651a:	e000      	b.n	800651e <HAL_ADC_Start+0x22>
 800651c:	4b66      	ldr	r3, [pc, #408]	; (80066b8 <HAL_ADC_Start+0x1bc>)
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fd5e 	bl	8005fe0 <LL_ADC_GetMultimode>
 8006524:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fdfd 	bl	800612a <LL_ADC_REG_IsConversionOngoing>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80b4 	bne.w	80066a0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_ADC_Start+0x4a>
 8006542:	2302      	movs	r3, #2
 8006544:	e0af      	b.n	80066a6 <HAL_ADC_Start+0x1aa>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fe0c 	bl	800716c <ADC_Enable>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f040 809b 	bne.w	8006696 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a4d      	ldr	r2, [pc, #308]	; (80066b0 <HAL_ADC_Start+0x1b4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_ADC_Start+0x96>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a4e      	ldr	r2, [pc, #312]	; (80066bc <HAL_ADC_Start+0x1c0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d002      	beq.n	800658e <HAL_ADC_Start+0x92>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	e003      	b.n	8006596 <HAL_ADC_Start+0x9a>
 800658e:	4b4c      	ldr	r3, [pc, #304]	; (80066c0 <HAL_ADC_Start+0x1c4>)
 8006590:	e001      	b.n	8006596 <HAL_ADC_Start+0x9a>
 8006592:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	4293      	cmp	r3, r2
 800659c:	d002      	beq.n	80065a4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065bc:	d106      	bne.n	80065cc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	f023 0206 	bic.w	r2, r3, #6
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	661a      	str	r2, [r3, #96]	; 0x60
 80065ca:	e002      	b.n	80065d2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	221c      	movs	r2, #28
 80065d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <HAL_ADC_Start+0x1b4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_ADC_Start+0x104>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a32      	ldr	r2, [pc, #200]	; (80066bc <HAL_ADC_Start+0x1c0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d002      	beq.n	80065fc <HAL_ADC_Start+0x100>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	e003      	b.n	8006604 <HAL_ADC_Start+0x108>
 80065fc:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <HAL_ADC_Start+0x1c4>)
 80065fe:	e001      	b.n	8006604 <HAL_ADC_Start+0x108>
 8006600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	4293      	cmp	r3, r2
 800660a:	d008      	beq.n	800661e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b05      	cmp	r3, #5
 8006616:	d002      	beq.n	800661e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b09      	cmp	r3, #9
 800661c:	d114      	bne.n	8006648 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fd5e 	bl	8006102 <LL_ADC_REG_StartConversion>
 8006646:	e02d      	b.n	80066a4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <HAL_ADC_Start+0x1b4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_ADC_Start+0x176>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a16      	ldr	r2, [pc, #88]	; (80066bc <HAL_ADC_Start+0x1c0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d002      	beq.n	800666e <HAL_ADC_Start+0x172>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	e003      	b.n	8006676 <HAL_ADC_Start+0x17a>
 800666e:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <HAL_ADC_Start+0x1c4>)
 8006670:	e001      	b.n	8006676 <HAL_ADC_Start+0x17a>
 8006672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006676:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00f      	beq.n	80066a4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800668c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	65da      	str	r2, [r3, #92]	; 0x5c
 8006694:	e006      	b.n	80066a4 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800669e:	e001      	b.n	80066a4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
 80066a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	50000100 	.word	0x50000100
 80066b4:	50000300 	.word	0x50000300
 80066b8:	50000700 	.word	0x50000700
 80066bc:	50000500 	.word	0x50000500
 80066c0:	50000400 	.word	0x50000400

080066c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066d6:	d004      	beq.n	80066e2 <HAL_ADC_PollForConversion+0x1e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a77      	ldr	r2, [pc, #476]	; (80068bc <HAL_ADC_PollForConversion+0x1f8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_ADC_PollForConversion+0x22>
 80066e2:	4b77      	ldr	r3, [pc, #476]	; (80068c0 <HAL_ADC_PollForConversion+0x1fc>)
 80066e4:	e000      	b.n	80066e8 <HAL_ADC_PollForConversion+0x24>
 80066e6:	4b77      	ldr	r3, [pc, #476]	; (80068c4 <HAL_ADC_PollForConversion+0x200>)
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fc79 	bl	8005fe0 <LL_ADC_GetMultimode>
 80066ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d102      	bne.n	80066fe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80066f8:	2308      	movs	r3, #8
 80066fa:	61fb      	str	r3, [r7, #28]
 80066fc:	e037      	b.n	800676e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b05      	cmp	r3, #5
 8006708:	d002      	beq.n	8006710 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b09      	cmp	r3, #9
 800670e:	d111      	bne.n	8006734 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0c1      	b.n	80068b2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800672e:	2304      	movs	r3, #4
 8006730:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006732:	e01c      	b.n	800676e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800673c:	d004      	beq.n	8006748 <HAL_ADC_PollForConversion+0x84>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a5e      	ldr	r2, [pc, #376]	; (80068bc <HAL_ADC_PollForConversion+0x1f8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d101      	bne.n	800674c <HAL_ADC_PollForConversion+0x88>
 8006748:	4b5d      	ldr	r3, [pc, #372]	; (80068c0 <HAL_ADC_PollForConversion+0x1fc>)
 800674a:	e000      	b.n	800674e <HAL_ADC_PollForConversion+0x8a>
 800674c:	4b5d      	ldr	r3, [pc, #372]	; (80068c4 <HAL_ADC_PollForConversion+0x200>)
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fc54 	bl	8005ffc <LL_ADC_GetMultiDMATransfer>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e0a3      	b.n	80068b2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800676a:	2304      	movs	r3, #4
 800676c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800676e:	f7ff faa9 	bl	8005cc4 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006774:	e021      	b.n	80067ba <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d01d      	beq.n	80067ba <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800677e:	f7ff faa1 	bl	8005cc4 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d302      	bcc.n	8006794 <HAL_ADC_PollForConversion+0xd0>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d112      	bne.n	80067ba <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4013      	ands	r3, r2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a6:	f043 0204 	orr.w	r2, r3, #4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e07b      	b.n	80068b2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0d6      	beq.n	8006776 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fb73 	bl	8005ec4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01c      	beq.n	800681e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7f5b      	ldrb	r3, [r3, #29]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d118      	bne.n	800681e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d111      	bne.n	800681e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006816:	f043 0201 	orr.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a26      	ldr	r2, [pc, #152]	; (80068bc <HAL_ADC_PollForConversion+0x1f8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d009      	beq.n	800683c <HAL_ADC_PollForConversion+0x178>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a26      	ldr	r2, [pc, #152]	; (80068c8 <HAL_ADC_PollForConversion+0x204>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d002      	beq.n	8006838 <HAL_ADC_PollForConversion+0x174>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	e003      	b.n	8006840 <HAL_ADC_PollForConversion+0x17c>
 8006838:	4b24      	ldr	r3, [pc, #144]	; (80068cc <HAL_ADC_PollForConversion+0x208>)
 800683a:	e001      	b.n	8006840 <HAL_ADC_PollForConversion+0x17c>
 800683c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	4293      	cmp	r3, r2
 8006846:	d008      	beq.n	800685a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b05      	cmp	r3, #5
 8006852:	d002      	beq.n	800685a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b09      	cmp	r3, #9
 8006858:	d104      	bne.n	8006864 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	e014      	b.n	800688e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a14      	ldr	r2, [pc, #80]	; (80068bc <HAL_ADC_PollForConversion+0x1f8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_ADC_PollForConversion+0x1be>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <HAL_ADC_PollForConversion+0x204>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d002      	beq.n	800687e <HAL_ADC_PollForConversion+0x1ba>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	e003      	b.n	8006886 <HAL_ADC_PollForConversion+0x1c2>
 800687e:	4b13      	ldr	r3, [pc, #76]	; (80068cc <HAL_ADC_PollForConversion+0x208>)
 8006880:	e001      	b.n	8006886 <HAL_ADC_PollForConversion+0x1c2>
 8006882:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006886:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d104      	bne.n	800689e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2208      	movs	r2, #8
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e008      	b.n	80068b0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d103      	bne.n	80068b0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	220c      	movs	r2, #12
 80068ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	50000100 	.word	0x50000100
 80068c0:	50000300 	.word	0x50000300
 80068c4:	50000700 	.word	0x50000700
 80068c8:	50000500 	.word	0x50000500
 80068cc:	50000400 	.word	0x50000400

080068d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b0b6      	sub	sp, #216	; 0xd8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006906:	2b01      	cmp	r3, #1
 8006908:	d102      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x24>
 800690a:	2302      	movs	r3, #2
 800690c:	f000 bc13 	b.w	8007136 <HAL_ADC_ConfigChannel+0x84a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fc04 	bl	800612a <LL_ADC_REG_IsConversionOngoing>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	f040 83f3 	bne.w	8007110 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f7ff fad7 	bl	8005eea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff fbf2 	bl	800612a <LL_ADC_REG_IsConversionOngoing>
 8006946:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fbfe 	bl	8006150 <LL_ADC_INJ_IsConversionOngoing>
 8006954:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006958:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 81d9 	bne.w	8006d14 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006966:	2b00      	cmp	r3, #0
 8006968:	f040 81d4 	bne.w	8006d14 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006974:	d10f      	bne.n	8006996 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2200      	movs	r2, #0
 8006980:	4619      	mov	r1, r3
 8006982:	f7ff fade 	bl	8005f42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fa85 	bl	8005e9e <LL_ADC_SetSamplingTimeCommonConfig>
 8006994:	e00e      	b.n	80069b4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6819      	ldr	r1, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f7ff facd 	bl	8005f42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fa75 	bl	8005e9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695a      	ldr	r2, [r3, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d022      	beq.n	8006a1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6919      	ldr	r1, [r3, #16]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069e6:	f7ff f9cf 	bl	8005d88 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6919      	ldr	r1, [r3, #16]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f7ff fa1b 	bl	8005e32 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6919      	ldr	r1, [r3, #16]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	7f1b      	ldrb	r3, [r3, #28]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d102      	bne.n	8006a12 <HAL_ADC_ConfigChannel+0x126>
 8006a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a10:	e000      	b.n	8006a14 <HAL_ADC_ConfigChannel+0x128>
 8006a12:	2300      	movs	r3, #0
 8006a14:	461a      	mov	r2, r3
 8006a16:	f7ff fa27 	bl	8005e68 <LL_ADC_SetOffsetSaturation>
 8006a1a:	e17b      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff f9d4 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <HAL_ADC_ConfigChannel+0x15c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff f9c9 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	0e9b      	lsrs	r3, r3, #26
 8006a42:	f003 021f 	and.w	r2, r3, #31
 8006a46:	e01e      	b.n	8006a86 <HAL_ADC_ConfigChannel+0x19a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff f9be 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006a76:	2320      	movs	r3, #32
 8006a78:	e004      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a7e:	fab3 f383 	clz	r3, r3
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_ADC_ConfigChannel+0x1b2>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	0e9b      	lsrs	r3, r3, #26
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	e018      	b.n	8006ad0 <HAL_ADC_ConfigChannel+0x1e4>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006aaa:	fa93 f3a3 	rbit	r3, r3
 8006aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006ac2:	2320      	movs	r3, #32
 8006ac4:	e004      	b.n	8006ad0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006ac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006aca:	fab3 f383 	clz	r3, r3
 8006ace:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d106      	bne.n	8006ae2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff f98d 	bl	8005dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff f971 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x222>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2101      	movs	r1, #1
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff f966 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006b04:	4603      	mov	r3, r0
 8006b06:	0e9b      	lsrs	r3, r3, #26
 8006b08:	f003 021f 	and.w	r2, r3, #31
 8006b0c:	e01e      	b.n	8006b4c <HAL_ADC_ConfigChannel+0x260>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff f95b 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b24:	fa93 f3a3 	rbit	r3, r3
 8006b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006b2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006b3c:	2320      	movs	r3, #32
 8006b3e:	e004      	b.n	8006b4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006b40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b44:	fab3 f383 	clz	r3, r3
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <HAL_ADC_ConfigChannel+0x278>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	0e9b      	lsrs	r3, r3, #26
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	e018      	b.n	8006b96 <HAL_ADC_ConfigChannel+0x2aa>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b70:	fa93 f3a3 	rbit	r3, r3
 8006b74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006b88:	2320      	movs	r3, #32
 8006b8a:	e004      	b.n	8006b96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b90:	fab3 f383 	clz	r3, r3
 8006b94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d106      	bne.n	8006ba8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff f92a 	bl	8005dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2102      	movs	r1, #2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff f90e 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <HAL_ADC_ConfigChannel+0x2e8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2102      	movs	r1, #2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff f903 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	0e9b      	lsrs	r3, r3, #26
 8006bce:	f003 021f 	and.w	r2, r3, #31
 8006bd2:	e01e      	b.n	8006c12 <HAL_ADC_ConfigChannel+0x326>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2102      	movs	r1, #2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff f8f8 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006c02:	2320      	movs	r3, #32
 8006c04:	e004      	b.n	8006c10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c0a:	fab3 f383 	clz	r3, r3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d105      	bne.n	8006c2a <HAL_ADC_ConfigChannel+0x33e>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	0e9b      	lsrs	r3, r3, #26
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	e016      	b.n	8006c58 <HAL_ADC_ConfigChannel+0x36c>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c36:	fa93 f3a3 	rbit	r3, r3
 8006c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006c4a:	2320      	movs	r3, #32
 8006c4c:	e004      	b.n	8006c58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c52:	fab3 f383 	clz	r3, r3
 8006c56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d106      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2102      	movs	r1, #2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff f8c9 	bl	8005dfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2103      	movs	r1, #3
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff f8ad 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x3aa>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2103      	movs	r1, #3
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff f8a2 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	0e9b      	lsrs	r3, r3, #26
 8006c90:	f003 021f 	and.w	r2, r3, #31
 8006c94:	e017      	b.n	8006cc6 <HAL_ADC_ConfigChannel+0x3da>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2103      	movs	r1, #3
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff f897 	bl	8005dd0 <LL_ADC_GetOffsetChannel>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca8:	fa93 f3a3 	rbit	r3, r3
 8006cac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006cb8:	2320      	movs	r3, #32
 8006cba:	e003      	b.n	8006cc4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cbe:	fab3 f383 	clz	r3, r3
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d105      	bne.n	8006cde <HAL_ADC_ConfigChannel+0x3f2>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	0e9b      	lsrs	r3, r3, #26
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	e011      	b.n	8006d02 <HAL_ADC_ConfigChannel+0x416>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce6:	fa93 f3a3 	rbit	r3, r3
 8006cea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006cf6:	2320      	movs	r3, #32
 8006cf8:	e003      	b.n	8006d02 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfc:	fab3 f383 	clz	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d106      	bne.n	8006d14 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2103      	movs	r1, #3
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff f874 	bl	8005dfc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff f9df 	bl	80060dc <LL_ADC_IsEnabled>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 813d 	bne.w	8006fa0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	461a      	mov	r2, r3
 8006d34:	f7ff f930 	bl	8005f98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	4aa2      	ldr	r2, [pc, #648]	; (8006fc8 <HAL_ADC_ConfigChannel+0x6dc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f040 812e 	bne.w	8006fa0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10b      	bne.n	8006d6c <HAL_ADC_ConfigChannel+0x480>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	0e9b      	lsrs	r3, r3, #26
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2b09      	cmp	r3, #9
 8006d62:	bf94      	ite	ls
 8006d64:	2301      	movls	r3, #1
 8006d66:	2300      	movhi	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	e019      	b.n	8006da0 <HAL_ADC_ConfigChannel+0x4b4>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d74:	fa93 f3a3 	rbit	r3, r3
 8006d78:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006d84:	2320      	movs	r3, #32
 8006d86:	e003      	b.n	8006d90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d8a:	fab3 f383 	clz	r3, r3
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	3301      	adds	r3, #1
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	2b09      	cmp	r3, #9
 8006d98:	bf94      	ite	ls
 8006d9a:	2301      	movls	r3, #1
 8006d9c:	2300      	movhi	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d079      	beq.n	8006e98 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d107      	bne.n	8006dc0 <HAL_ADC_ConfigChannel+0x4d4>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	0e9b      	lsrs	r3, r3, #26
 8006db6:	3301      	adds	r3, #1
 8006db8:	069b      	lsls	r3, r3, #26
 8006dba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006dbe:	e015      	b.n	8006dec <HAL_ADC_ConfigChannel+0x500>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc8:	fa93 f3a3 	rbit	r3, r3
 8006dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006dd8:	2320      	movs	r3, #32
 8006dda:	e003      	b.n	8006de4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dde:	fab3 f383 	clz	r3, r3
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	3301      	adds	r3, #1
 8006de6:	069b      	lsls	r3, r3, #26
 8006de8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d109      	bne.n	8006e0c <HAL_ADC_ConfigChannel+0x520>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	0e9b      	lsrs	r3, r3, #26
 8006dfe:	3301      	adds	r3, #1
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	2101      	movs	r1, #1
 8006e06:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0a:	e017      	b.n	8006e3c <HAL_ADC_ConfigChannel+0x550>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e14:	fa93 f3a3 	rbit	r3, r3
 8006e18:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006e24:	2320      	movs	r3, #32
 8006e26:	e003      	b.n	8006e30 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2a:	fab3 f383 	clz	r3, r3
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	3301      	adds	r3, #1
 8006e32:	f003 031f 	and.w	r3, r3, #31
 8006e36:	2101      	movs	r1, #1
 8006e38:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3c:	ea42 0103 	orr.w	r1, r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <HAL_ADC_ConfigChannel+0x576>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	0e9b      	lsrs	r3, r3, #26
 8006e52:	3301      	adds	r3, #1
 8006e54:	f003 021f 	and.w	r2, r3, #31
 8006e58:	4613      	mov	r3, r2
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	051b      	lsls	r3, r3, #20
 8006e60:	e018      	b.n	8006e94 <HAL_ADC_ConfigChannel+0x5a8>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	fa93 f3a3 	rbit	r3, r3
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006e7a:	2320      	movs	r3, #32
 8006e7c:	e003      	b.n	8006e86 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	fab3 f383 	clz	r3, r3
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	3301      	adds	r3, #1
 8006e88:	f003 021f 	and.w	r2, r3, #31
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	4413      	add	r3, r2
 8006e92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e94:	430b      	orrs	r3, r1
 8006e96:	e07e      	b.n	8006f96 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <HAL_ADC_ConfigChannel+0x5c8>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	0e9b      	lsrs	r3, r3, #26
 8006eaa:	3301      	adds	r3, #1
 8006eac:	069b      	lsls	r3, r3, #26
 8006eae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eb2:	e015      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x5f4>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	fa93 f3a3 	rbit	r3, r3
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006ecc:	2320      	movs	r3, #32
 8006ece:	e003      	b.n	8006ed8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	fab3 f383 	clz	r3, r3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	3301      	adds	r3, #1
 8006eda:	069b      	lsls	r3, r3, #26
 8006edc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_ADC_ConfigChannel+0x614>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	0e9b      	lsrs	r3, r3, #26
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2101      	movs	r1, #1
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	e017      	b.n	8006f30 <HAL_ADC_ConfigChannel+0x644>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	fa93 f3a3 	rbit	r3, r3
 8006f0c:	61fb      	str	r3, [r7, #28]
  return result;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006f18:	2320      	movs	r3, #32
 8006f1a:	e003      	b.n	8006f24 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	3301      	adds	r3, #1
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f30:	ea42 0103 	orr.w	r1, r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10d      	bne.n	8006f5c <HAL_ADC_ConfigChannel+0x670>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	0e9b      	lsrs	r3, r3, #26
 8006f46:	3301      	adds	r3, #1
 8006f48:	f003 021f 	and.w	r2, r3, #31
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	4413      	add	r3, r2
 8006f52:	3b1e      	subs	r3, #30
 8006f54:	051b      	lsls	r3, r3, #20
 8006f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	e01b      	b.n	8006f94 <HAL_ADC_ConfigChannel+0x6a8>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	fa93 f3a3 	rbit	r3, r3
 8006f68:	613b      	str	r3, [r7, #16]
  return result;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006f74:	2320      	movs	r3, #32
 8006f76:	e003      	b.n	8006f80 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	fab3 f383 	clz	r3, r3
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	3301      	adds	r3, #1
 8006f82:	f003 021f 	and.w	r2, r3, #31
 8006f86:	4613      	mov	r3, r2
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3b1e      	subs	r3, #30
 8006f8e:	051b      	lsls	r3, r3, #20
 8006f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f94:	430b      	orrs	r3, r1
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	6892      	ldr	r2, [r2, #8]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f7fe ffd1 	bl	8005f42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <HAL_ADC_ConfigChannel+0x6e0>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80be 	beq.w	800712a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fb6:	d004      	beq.n	8006fc2 <HAL_ADC_ConfigChannel+0x6d6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <HAL_ADC_ConfigChannel+0x6e4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d10a      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x6ec>
 8006fc2:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <HAL_ADC_ConfigChannel+0x6e8>)
 8006fc4:	e009      	b.n	8006fda <HAL_ADC_ConfigChannel+0x6ee>
 8006fc6:	bf00      	nop
 8006fc8:	407f0000 	.word	0x407f0000
 8006fcc:	80080000 	.word	0x80080000
 8006fd0:	50000100 	.word	0x50000100
 8006fd4:	50000300 	.word	0x50000300
 8006fd8:	4b59      	ldr	r3, [pc, #356]	; (8007140 <HAL_ADC_ConfigChannel+0x854>)
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fec6 	bl	8005d6c <LL_ADC_GetCommonPathInternalCh>
 8006fe0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a56      	ldr	r2, [pc, #344]	; (8007144 <HAL_ADC_ConfigChannel+0x858>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_ADC_ConfigChannel+0x70c>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a55      	ldr	r2, [pc, #340]	; (8007148 <HAL_ADC_ConfigChannel+0x85c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d13a      	bne.n	800706e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d134      	bne.n	800706e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700c:	d005      	beq.n	800701a <HAL_ADC_ConfigChannel+0x72e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a4e      	ldr	r2, [pc, #312]	; (800714c <HAL_ADC_ConfigChannel+0x860>)
 8007014:	4293      	cmp	r3, r2
 8007016:	f040 8085 	bne.w	8007124 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007022:	d004      	beq.n	800702e <HAL_ADC_ConfigChannel+0x742>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a49      	ldr	r2, [pc, #292]	; (8007150 <HAL_ADC_ConfigChannel+0x864>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d101      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x746>
 800702e:	4a49      	ldr	r2, [pc, #292]	; (8007154 <HAL_ADC_ConfigChannel+0x868>)
 8007030:	e000      	b.n	8007034 <HAL_ADC_ConfigChannel+0x748>
 8007032:	4a43      	ldr	r2, [pc, #268]	; (8007140 <HAL_ADC_ConfigChannel+0x854>)
 8007034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007038:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7fe fe81 	bl	8005d46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007044:	4b44      	ldr	r3, [pc, #272]	; (8007158 <HAL_ADC_ConfigChannel+0x86c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	099b      	lsrs	r3, r3, #6
 800704a:	4a44      	ldr	r2, [pc, #272]	; (800715c <HAL_ADC_ConfigChannel+0x870>)
 800704c:	fba2 2303 	umull	r2, r3, r2, r3
 8007050:	099b      	lsrs	r3, r3, #6
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	4613      	mov	r3, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800705e:	e002      	b.n	8007066 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b01      	subs	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f9      	bne.n	8007060 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800706c:	e05a      	b.n	8007124 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3b      	ldr	r2, [pc, #236]	; (8007160 <HAL_ADC_ConfigChannel+0x874>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d125      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x7d8>
 8007078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800707c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11f      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a31      	ldr	r2, [pc, #196]	; (8007150 <HAL_ADC_ConfigChannel+0x864>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d104      	bne.n	8007098 <HAL_ADC_ConfigChannel+0x7ac>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a34      	ldr	r2, [pc, #208]	; (8007164 <HAL_ADC_ConfigChannel+0x878>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d047      	beq.n	8007128 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070a0:	d004      	beq.n	80070ac <HAL_ADC_ConfigChannel+0x7c0>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <HAL_ADC_ConfigChannel+0x864>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d101      	bne.n	80070b0 <HAL_ADC_ConfigChannel+0x7c4>
 80070ac:	4a29      	ldr	r2, [pc, #164]	; (8007154 <HAL_ADC_ConfigChannel+0x868>)
 80070ae:	e000      	b.n	80070b2 <HAL_ADC_ConfigChannel+0x7c6>
 80070b0:	4a23      	ldr	r2, [pc, #140]	; (8007140 <HAL_ADC_ConfigChannel+0x854>)
 80070b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7fe fe42 	bl	8005d46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80070c2:	e031      	b.n	8007128 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a27      	ldr	r2, [pc, #156]	; (8007168 <HAL_ADC_ConfigChannel+0x87c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d12d      	bne.n	800712a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80070ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d127      	bne.n	800712a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <HAL_ADC_ConfigChannel+0x864>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d022      	beq.n	800712a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ec:	d004      	beq.n	80070f8 <HAL_ADC_ConfigChannel+0x80c>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a17      	ldr	r2, [pc, #92]	; (8007150 <HAL_ADC_ConfigChannel+0x864>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d101      	bne.n	80070fc <HAL_ADC_ConfigChannel+0x810>
 80070f8:	4a16      	ldr	r2, [pc, #88]	; (8007154 <HAL_ADC_ConfigChannel+0x868>)
 80070fa:	e000      	b.n	80070fe <HAL_ADC_ConfigChannel+0x812>
 80070fc:	4a10      	ldr	r2, [pc, #64]	; (8007140 <HAL_ADC_ConfigChannel+0x854>)
 80070fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007102:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007106:	4619      	mov	r1, r3
 8007108:	4610      	mov	r0, r2
 800710a:	f7fe fe1c 	bl	8005d46 <LL_ADC_SetCommonPathInternalCh>
 800710e:	e00c      	b.n	800712a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007114:	f043 0220 	orr.w	r2, r3, #32
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007122:	e002      	b.n	800712a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007124:	bf00      	nop
 8007126:	e000      	b.n	800712a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007128:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007132:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007136:	4618      	mov	r0, r3
 8007138:	37d8      	adds	r7, #216	; 0xd8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	50000700 	.word	0x50000700
 8007144:	c3210000 	.word	0xc3210000
 8007148:	90c00010 	.word	0x90c00010
 800714c:	50000600 	.word	0x50000600
 8007150:	50000100 	.word	0x50000100
 8007154:	50000300 	.word	0x50000300
 8007158:	20000000 	.word	0x20000000
 800715c:	053e2d63 	.word	0x053e2d63
 8007160:	c7520000 	.word	0xc7520000
 8007164:	50000500 	.word	0x50000500
 8007168:	cb840000 	.word	0xcb840000

0800716c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe ffaf 	bl	80060dc <LL_ADC_IsEnabled>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d14d      	bne.n	8007220 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	4b28      	ldr	r3, [pc, #160]	; (800722c <ADC_Enable+0xc0>)
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	f043 0210 	orr.w	r2, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a2:	f043 0201 	orr.w	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e039      	b.n	8007222 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe ff7e 	bl	80060b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80071b8:	f7fe fd84 	bl	8005cc4 <HAL_GetTick>
 80071bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071be:	e028      	b.n	8007212 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe ff89 	bl	80060dc <LL_ADC_IsEnabled>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe ff6d 	bl	80060b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071da:	f7fe fd73 	bl	8005cc4 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d914      	bls.n	8007212 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d00d      	beq.n	8007212 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fa:	f043 0210 	orr.w	r2, r3, #16
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007206:	f043 0201 	orr.w	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e007      	b.n	8007222 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b01      	cmp	r3, #1
 800721e:	d1cf      	bne.n	80071c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	8000003f 	.word	0x8000003f

08007230 <LL_ADC_IsEnabled>:
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <LL_ADC_IsEnabled+0x18>
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <LL_ADC_IsEnabled+0x1a>
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <LL_ADC_REG_IsConversionOngoing>:
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b04      	cmp	r3, #4
 8007268:	d101      	bne.n	800726e <LL_ADC_REG_IsConversionOngoing+0x18>
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800727c:	b590      	push	{r4, r7, lr}
 800727e:	b0a1      	sub	sp, #132	; 0x84
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007296:	2302      	movs	r3, #2
 8007298:	e0e7      	b.n	800746a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80072a2:	2300      	movs	r3, #0
 80072a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80072a6:	2300      	movs	r3, #0
 80072a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072b2:	d102      	bne.n	80072ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80072b4:	4b6f      	ldr	r3, [pc, #444]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	e009      	b.n	80072ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a6e      	ldr	r2, [pc, #440]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d102      	bne.n	80072ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80072c4:	4b6d      	ldr	r3, [pc, #436]	; (800747c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	e001      	b.n	80072ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0be      	b.n	800746a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ffb1 	bl	8007256 <LL_ADC_REG_IsConversionOngoing>
 80072f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff ffab 	bl	8007256 <LL_ADC_REG_IsConversionOngoing>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 80a0 	bne.w	8007448 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 809c 	bne.w	8007448 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007318:	d004      	beq.n	8007324 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a55      	ldr	r2, [pc, #340]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d101      	bne.n	8007328 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007324:	4b56      	ldr	r3, [pc, #344]	; (8007480 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007326:	e000      	b.n	800732a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007328:	4b56      	ldr	r3, [pc, #344]	; (8007484 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800732a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d04b      	beq.n	80073cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	6859      	ldr	r1, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007346:	035b      	lsls	r3, r3, #13
 8007348:	430b      	orrs	r3, r1
 800734a:	431a      	orrs	r2, r3
 800734c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800734e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007358:	d004      	beq.n	8007364 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a45      	ldr	r2, [pc, #276]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10f      	bne.n	8007384 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007364:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007368:	f7ff ff62 	bl	8007230 <LL_ADC_IsEnabled>
 800736c:	4604      	mov	r4, r0
 800736e:	4841      	ldr	r0, [pc, #260]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007370:	f7ff ff5e 	bl	8007230 <LL_ADC_IsEnabled>
 8007374:	4603      	mov	r3, r0
 8007376:	4323      	orrs	r3, r4
 8007378:	2b00      	cmp	r3, #0
 800737a:	bf0c      	ite	eq
 800737c:	2301      	moveq	r3, #1
 800737e:	2300      	movne	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e012      	b.n	80073aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007384:	483c      	ldr	r0, [pc, #240]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007386:	f7ff ff53 	bl	8007230 <LL_ADC_IsEnabled>
 800738a:	4604      	mov	r4, r0
 800738c:	483b      	ldr	r0, [pc, #236]	; (800747c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800738e:	f7ff ff4f 	bl	8007230 <LL_ADC_IsEnabled>
 8007392:	4603      	mov	r3, r0
 8007394:	431c      	orrs	r4, r3
 8007396:	483c      	ldr	r0, [pc, #240]	; (8007488 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007398:	f7ff ff4a 	bl	8007230 <LL_ADC_IsEnabled>
 800739c:	4603      	mov	r3, r0
 800739e:	4323      	orrs	r3, r4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bf0c      	ite	eq
 80073a4:	2301      	moveq	r3, #1
 80073a6:	2300      	movne	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d056      	beq.n	800745c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80073ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80073b6:	f023 030f 	bic.w	r3, r3, #15
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	6811      	ldr	r1, [r2, #0]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	6892      	ldr	r2, [r2, #8]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	431a      	orrs	r2, r3
 80073c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80073ca:	e047      	b.n	800745c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80073cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073e0:	d004      	beq.n	80073ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a23      	ldr	r2, [pc, #140]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d10f      	bne.n	800740c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80073ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80073f0:	f7ff ff1e 	bl	8007230 <LL_ADC_IsEnabled>
 80073f4:	4604      	mov	r4, r0
 80073f6:	481f      	ldr	r0, [pc, #124]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80073f8:	f7ff ff1a 	bl	8007230 <LL_ADC_IsEnabled>
 80073fc:	4603      	mov	r3, r0
 80073fe:	4323      	orrs	r3, r4
 8007400:	2b00      	cmp	r3, #0
 8007402:	bf0c      	ite	eq
 8007404:	2301      	moveq	r3, #1
 8007406:	2300      	movne	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	e012      	b.n	8007432 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800740c:	481a      	ldr	r0, [pc, #104]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800740e:	f7ff ff0f 	bl	8007230 <LL_ADC_IsEnabled>
 8007412:	4604      	mov	r4, r0
 8007414:	4819      	ldr	r0, [pc, #100]	; (800747c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007416:	f7ff ff0b 	bl	8007230 <LL_ADC_IsEnabled>
 800741a:	4603      	mov	r3, r0
 800741c:	431c      	orrs	r4, r3
 800741e:	481a      	ldr	r0, [pc, #104]	; (8007488 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007420:	f7ff ff06 	bl	8007230 <LL_ADC_IsEnabled>
 8007424:	4603      	mov	r3, r0
 8007426:	4323      	orrs	r3, r4
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf0c      	ite	eq
 800742c:	2301      	moveq	r3, #1
 800742e:	2300      	movne	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d012      	beq.n	800745c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800743e:	f023 030f 	bic.w	r3, r3, #15
 8007442:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007444:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007446:	e009      	b.n	800745c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800745a:	e000      	b.n	800745e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800745c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800746a:	4618      	mov	r0, r3
 800746c:	3784      	adds	r7, #132	; 0x84
 800746e:	46bd      	mov	sp, r7
 8007470:	bd90      	pop	{r4, r7, pc}
 8007472:	bf00      	nop
 8007474:	50000100 	.word	0x50000100
 8007478:	50000400 	.word	0x50000400
 800747c:	50000500 	.word	0x50000500
 8007480:	50000300 	.word	0x50000300
 8007484:	50000700 	.word	0x50000700
 8007488:	50000600 	.word	0x50000600

0800748c <__NVIC_SetPriorityGrouping>:
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <__NVIC_SetPriorityGrouping+0x44>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074a8:	4013      	ands	r3, r2
 80074aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074be:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <__NVIC_SetPriorityGrouping+0x44>)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	60d3      	str	r3, [r2, #12]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <__NVIC_GetPriorityGrouping>:
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074d8:	4b04      	ldr	r3, [pc, #16]	; (80074ec <__NVIC_GetPriorityGrouping+0x18>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	0a1b      	lsrs	r3, r3, #8
 80074de:	f003 0307 	and.w	r3, r3, #7
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	e000ed00 	.word	0xe000ed00

080074f0 <__NVIC_EnableIRQ>:
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	db0b      	blt.n	800751a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	f003 021f 	and.w	r2, r3, #31
 8007508:	4907      	ldr	r1, [pc, #28]	; (8007528 <__NVIC_EnableIRQ+0x38>)
 800750a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	2001      	movs	r0, #1
 8007512:	fa00 f202 	lsl.w	r2, r0, r2
 8007516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	e000e100 	.word	0xe000e100

0800752c <__NVIC_SetPriority>:
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800753c:	2b00      	cmp	r3, #0
 800753e:	db0a      	blt.n	8007556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	b2da      	uxtb	r2, r3
 8007544:	490c      	ldr	r1, [pc, #48]	; (8007578 <__NVIC_SetPriority+0x4c>)
 8007546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754a:	0112      	lsls	r2, r2, #4
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	440b      	add	r3, r1
 8007550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007554:	e00a      	b.n	800756c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	b2da      	uxtb	r2, r3
 800755a:	4908      	ldr	r1, [pc, #32]	; (800757c <__NVIC_SetPriority+0x50>)
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	3b04      	subs	r3, #4
 8007564:	0112      	lsls	r2, r2, #4
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	440b      	add	r3, r1
 800756a:	761a      	strb	r2, [r3, #24]
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	e000e100 	.word	0xe000e100
 800757c:	e000ed00 	.word	0xe000ed00

08007580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007580:	b480      	push	{r7}
 8007582:	b089      	sub	sp, #36	; 0x24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f1c3 0307 	rsb	r3, r3, #7
 800759a:	2b04      	cmp	r3, #4
 800759c:	bf28      	it	cs
 800759e:	2304      	movcs	r3, #4
 80075a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	3304      	adds	r3, #4
 80075a6:	2b06      	cmp	r3, #6
 80075a8:	d902      	bls.n	80075b0 <NVIC_EncodePriority+0x30>
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	3b03      	subs	r3, #3
 80075ae:	e000      	b.n	80075b2 <NVIC_EncodePriority+0x32>
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b4:	f04f 32ff 	mov.w	r2, #4294967295
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43da      	mvns	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	401a      	ands	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075c8:	f04f 31ff 	mov.w	r1, #4294967295
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	fa01 f303 	lsl.w	r3, r1, r3
 80075d2:	43d9      	mvns	r1, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075d8:	4313      	orrs	r3, r2
         );
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3724      	adds	r7, #36	; 0x24
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
	...

080075e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075f8:	d301      	bcc.n	80075fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075fa:	2301      	movs	r3, #1
 80075fc:	e00f      	b.n	800761e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075fe:	4a0a      	ldr	r2, [pc, #40]	; (8007628 <SysTick_Config+0x40>)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3b01      	subs	r3, #1
 8007604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007606:	210f      	movs	r1, #15
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	f7ff ff8e 	bl	800752c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <SysTick_Config+0x40>)
 8007612:	2200      	movs	r2, #0
 8007614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007616:	4b04      	ldr	r3, [pc, #16]	; (8007628 <SysTick_Config+0x40>)
 8007618:	2207      	movs	r2, #7
 800761a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	e000e010 	.word	0xe000e010

0800762c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ff29 	bl	800748c <__NVIC_SetPriorityGrouping>
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b086      	sub	sp, #24
 8007646:	af00      	add	r7, sp, #0
 8007648:	4603      	mov	r3, r0
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007650:	f7ff ff40 	bl	80074d4 <__NVIC_GetPriorityGrouping>
 8007654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68b9      	ldr	r1, [r7, #8]
 800765a:	6978      	ldr	r0, [r7, #20]
 800765c:	f7ff ff90 	bl	8007580 <NVIC_EncodePriority>
 8007660:	4602      	mov	r2, r0
 8007662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007666:	4611      	mov	r1, r2
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff ff5f 	bl	800752c <__NVIC_SetPriority>
}
 800766e:	bf00      	nop
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	4603      	mov	r3, r0
 800767e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff ff33 	bl	80074f0 <__NVIC_EnableIRQ>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff ffa4 	bl	80075e8 <SysTick_Config>
 80076a0:	4603      	mov	r3, r0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d005      	beq.n	80076ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2204      	movs	r2, #4
 80076c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
 80076cc:	e037      	b.n	800773e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 020e 	bic.w	r2, r2, #14
 80076dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0201 	bic.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f003 021f 	and.w	r2, r3, #31
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	2101      	movs	r1, #1
 800770c:	fa01 f202 	lsl.w	r2, r1, r2
 8007710:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800771a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00c      	beq.n	800773e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007732:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800773c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d00d      	beq.n	8007790 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2204      	movs	r2, #4
 8007778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
 800778e:	e047      	b.n	8007820 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 020e 	bic.w	r2, r2, #14
 800779e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0201 	bic.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c4:	f003 021f 	and.w	r2, r3, #31
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	2101      	movs	r1, #1
 80077ce:	fa01 f202 	lsl.w	r2, r1, r2
 80077d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80077fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
    }
  }
  return status;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e147      	b.n	8007ace <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fa fc66 	bl	8002124 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0210 	bic.w	r2, r2, #16
 8007866:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007868:	f7fe fa2c 	bl	8005cc4 <HAL_GetTick>
 800786c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800786e:	e012      	b.n	8007896 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007870:	f7fe fa28 	bl	8005cc4 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b0a      	cmp	r3, #10
 800787c:	d90b      	bls.n	8007896 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007882:	f043 0201 	orr.w	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2203      	movs	r2, #3
 800788e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e11b      	b.n	8007ace <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f003 0308 	and.w	r3, r3, #8
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d0e5      	beq.n	8007870 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0201 	orr.w	r2, r2, #1
 80078b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078b4:	f7fe fa06 	bl	8005cc4 <HAL_GetTick>
 80078b8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80078ba:	e012      	b.n	80078e2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078bc:	f7fe fa02 	bl	8005cc4 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b0a      	cmp	r3, #10
 80078c8:	d90b      	bls.n	80078e2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ce:	f043 0201 	orr.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2203      	movs	r2, #3
 80078da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e0f5      	b.n	8007ace <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0e5      	beq.n	80078bc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699a      	ldr	r2, [r3, #24]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0202 	orr.w	r2, r2, #2
 80078fe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a74      	ldr	r2, [pc, #464]	; (8007ad8 <HAL_FDCAN_Init+0x2ac>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d103      	bne.n	8007912 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800790a:	4a74      	ldr	r2, [pc, #464]	; (8007adc <HAL_FDCAN_Init+0x2b0>)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7c1b      	ldrb	r3, [r3, #16]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d108      	bne.n	800792c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007928:	619a      	str	r2, [r3, #24]
 800792a:	e007      	b.n	800793c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7c5b      	ldrb	r3, [r3, #17]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d108      	bne.n	8007956 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007952:	619a      	str	r2, [r3, #24]
 8007954:	e007      	b.n	8007966 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007964:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7c9b      	ldrb	r3, [r3, #18]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d108      	bne.n	8007980 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800797c:	619a      	str	r2, [r3, #24]
 800797e:	e007      	b.n	8007990 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699a      	ldr	r2, [r3, #24]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800798e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80079b4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0210 	bic.w	r2, r2, #16
 80079c4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d108      	bne.n	80079e0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699a      	ldr	r2, [r3, #24]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0204 	orr.w	r2, r2, #4
 80079dc:	619a      	str	r2, [r3, #24]
 80079de:	e02c      	b.n	8007a3a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d028      	beq.n	8007a3a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d01c      	beq.n	8007a2a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079fe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691a      	ldr	r2, [r3, #16]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0210 	orr.w	r2, r2, #16
 8007a0e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d110      	bne.n	8007a3a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0220 	orr.w	r2, r2, #32
 8007a26:	619a      	str	r2, [r3, #24]
 8007a28:	e007      	b.n	8007a3a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0220 	orr.w	r2, r2, #32
 8007a38:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a4a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a52:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a62:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a64:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a6e:	d115      	bne.n	8007a9c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a7e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a84:	3b01      	subs	r3, #1
 8007a86:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a88:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	3b01      	subs	r3, #1
 8007a92:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a98:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a9a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fae0 	bl	8008078 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40006400 	.word	0x40006400
 8007adc:	40006500 	.word	0x40006500

08007ae0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d12c      	bne.n	8007b52 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e023      	b.n	8007b60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fb0e 	bl	8008150 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2101      	movs	r1, #1
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8007b40:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007b44:	2201      	movs	r2, #1
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	409a      	lsls	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e006      	b.n	8007b60 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b56:	f043 0208 	orr.w	r2, r3, #8
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
  }
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b08b      	sub	sp, #44	; 0x2c
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b7c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007b7e:	7efb      	ldrb	r3, [r7, #27]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	f040 80bc 	bne.w	8007cfe <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	d121      	bne.n	8007bd0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d107      	bne.n	8007bac <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e0af      	b.n	8007d0c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb4:	0a1b      	lsrs	r3, r3, #8
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bce:	e020      	b.n	8007c12 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d107      	bne.n	8007bf0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e08d      	b.n	8007d0c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bf8:	0a1b      	lsrs	r3, r3, #8
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	4613      	mov	r3, r2
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	440b      	add	r3, r1
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	0c9b      	lsrs	r3, r3, #18
 8007c2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e005      	b.n	8007c42 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	0e1b      	lsrs	r3, r3, #24
 8007c94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	0fda      	lsrs	r2, r3, #31
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	3304      	adds	r3, #4
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	623b      	str	r3, [r7, #32]
 8007cb4:	e00a      	b.n	8007ccc <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	441a      	add	r2, r3
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	440b      	add	r3, r1
 8007cc2:	7812      	ldrb	r2, [r2, #0]
 8007cc4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	0c1b      	lsrs	r3, r3, #16
 8007cd2:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007cd4:	5cd3      	ldrb	r3, [r2, r3]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d3eb      	bcc.n	8007cb6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d105      	bne.n	8007cf0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007cee:	e004      	b.n	8007cfa <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e006      	b.n	8007d0c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	f043 0208 	orr.w	r2, r3, #8
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	372c      	adds	r7, #44	; 0x2c
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	08013148 	.word	0x08013148

08007d1c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d38:	4013      	ands	r3, r2
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	6a3a      	ldr	r2, [r7, #32]
 8007d50:	4013      	ands	r3, r2
 8007d52:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d5e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d72:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007d76:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	4013      	ands	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007d8e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00d      	beq.n	8007dc6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d006      	beq.n	8007dc6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2240      	movs	r2, #64	; 0x40
 8007dbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f939 	bl	8008038 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01b      	beq.n	8007e0c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d014      	beq.n	8007e0c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007dea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4013      	ands	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e02:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007e04:	6939      	ldr	r1, [r7, #16]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8f7 	bl	8007ffa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e18:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f8b6 	bl	8007f8e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6a3a      	ldr	r2, [r7, #32]
 8007e2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007e30:	6a39      	ldr	r1, [r7, #32]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f8b6 	bl	8007fa4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007e46:	69f9      	ldr	r1, [r7, #28]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f8b6 	bl	8007fba <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00e      	beq.n	8007e7a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8ab 	bl	8007fd0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01a      	beq.n	8007ebe <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d013      	beq.n	8007ebe <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007e9e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2280      	movs	r2, #128	; 0x80
 8007eb4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f893 	bl	8007fe4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ee2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f893 	bl	8008010 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00e      	beq.n	8007f16 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007f0e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f887 	bl	8008024 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d011      	beq.n	8007f48 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007f56:	6979      	ldr	r1, [r7, #20]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f881 	bl	8008060 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f863 	bl	800804c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007f86:	bf00      	nop
 8007f88:	3728      	adds	r7, #40	; 0x28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008080:	4b30      	ldr	r3, [pc, #192]	; (8008144 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008082:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a2f      	ldr	r2, [pc, #188]	; (8008148 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d103      	bne.n	8008096 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008094:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a2c      	ldr	r2, [pc, #176]	; (800814c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d103      	bne.n	80080a8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80080a6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	041a      	lsls	r2, r3, #16
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080dc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	061a      	lsls	r2, r3, #24
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	e005      	b.n	800812a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3304      	adds	r3, #4
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	429a      	cmp	r2, r3
 8008134:	d3f3      	bcc.n	800811e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	4000a400 	.word	0x4000a400
 8008148:	40006800 	.word	0x40006800
 800814c:	40006c00 	.word	0x40006c00

08008150 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8008150:	b480      	push	{r7}
 8008152:	b089      	sub	sp, #36	; 0x24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10a      	bne.n	800817c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800816e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008176:	4313      	orrs	r3, r2
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e00a      	b.n	8008192 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008184:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800818a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800818c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008190:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800819c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80081a2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80081a8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4613      	mov	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4413      	add	r3, r2
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	440b      	add	r3, r1
 80081c2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	3304      	adds	r3, #4
 80081ce:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	3304      	adds	r3, #4
 80081da:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e020      	b.n	8008224 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	3303      	adds	r3, #3
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4413      	add	r3, r2
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	3302      	adds	r3, #2
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	440b      	add	r3, r1
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80081fa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	3301      	adds	r3, #1
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	440b      	add	r3, r1
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008208:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	440a      	add	r2, r1
 8008210:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008212:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	3304      	adds	r3, #4
 800821c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	3304      	adds	r3, #4
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	0c1b      	lsrs	r3, r3, #16
 800822a:	4a06      	ldr	r2, [pc, #24]	; (8008244 <FDCAN_CopyMessageToRAM+0xf4>)
 800822c:	5cd3      	ldrb	r3, [r2, r3]
 800822e:	461a      	mov	r2, r3
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	4293      	cmp	r3, r2
 8008234:	d3d5      	bcc.n	80081e2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	3724      	adds	r7, #36	; 0x24
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	08013148 	.word	0x08013148

08008248 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800825a:	4b24      	ldr	r3, [pc, #144]	; (80082ec <HAL_FLASH_Program+0xa4>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <HAL_FLASH_Program+0x1e>
 8008262:	2302      	movs	r3, #2
 8008264:	e03e      	b.n	80082e4 <HAL_FLASH_Program+0x9c>
 8008266:	4b21      	ldr	r3, [pc, #132]	; (80082ec <HAL_FLASH_Program+0xa4>)
 8008268:	2201      	movs	r2, #1
 800826a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800826c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008270:	f000 f8be 	bl	80083f0 <FLASH_WaitForLastOperation>
 8008274:	4603      	mov	r3, r0
 8008276:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d12e      	bne.n	80082dc <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800827e:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <HAL_FLASH_Program+0xa4>)
 8008280:	2200      	movs	r2, #0
 8008282:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d107      	bne.n	800829a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800828a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828e:	68b8      	ldr	r0, [r7, #8]
 8008290:	f000 f902 	bl	8008498 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8008294:	2301      	movs	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	e010      	b.n	80082bc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d002      	beq.n	80082a6 <HAL_FLASH_Program+0x5e>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d10a      	bne.n	80082bc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	4619      	mov	r1, r3
 80082aa:	68b8      	ldr	r0, [r7, #8]
 80082ac:	f000 f91a 	bl	80084e4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d102      	bne.n	80082bc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80082b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80082ba:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80082bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082c0:	f000 f896 	bl	80083f0 <FLASH_WaitForLastOperation>
 80082c4:	4603      	mov	r3, r0
 80082c6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d006      	beq.n	80082dc <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80082ce:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <HAL_FLASH_Program+0xa8>)
 80082d0:	695a      	ldr	r2, [r3, #20]
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	4906      	ldr	r1, [pc, #24]	; (80082f0 <HAL_FLASH_Program+0xa8>)
 80082d8:	4013      	ands	r3, r2
 80082da:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80082dc:	4b03      	ldr	r3, [pc, #12]	; (80082ec <HAL_FLASH_Program+0xa4>)
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	2000000c 	.word	0x2000000c
 80082f0:	40022000 	.word	0x40022000

080082f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <HAL_FLASH_Unlock+0x38>)
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	da0b      	bge.n	800831e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008306:	4b09      	ldr	r3, [pc, #36]	; (800832c <HAL_FLASH_Unlock+0x38>)
 8008308:	4a09      	ldr	r2, [pc, #36]	; (8008330 <HAL_FLASH_Unlock+0x3c>)
 800830a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800830c:	4b07      	ldr	r3, [pc, #28]	; (800832c <HAL_FLASH_Unlock+0x38>)
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <HAL_FLASH_Unlock+0x40>)
 8008310:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <HAL_FLASH_Unlock+0x38>)
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	da01      	bge.n	800831e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800831e:	79fb      	ldrb	r3, [r7, #7]
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	40022000 	.word	0x40022000
 8008330:	45670123 	.word	0x45670123
 8008334:	cdef89ab 	.word	0xcdef89ab

08008338 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <HAL_FLASH_Lock+0x30>)
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	4a08      	ldr	r2, [pc, #32]	; (8008368 <HAL_FLASH_Lock+0x30>)
 8008348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800834c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800834e:	4b06      	ldr	r3, [pc, #24]	; (8008368 <HAL_FLASH_Lock+0x30>)
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	da01      	bge.n	800835a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800835a:	79fb      	ldrb	r3, [r7, #7]
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	40022000 	.word	0x40022000

0800836c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8008376:	4b0d      	ldr	r3, [pc, #52]	; (80083ac <HAL_FLASH_OB_Unlock+0x40>)
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00d      	beq.n	800839e <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_FLASH_OB_Unlock+0x40>)
 8008384:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <HAL_FLASH_OB_Unlock+0x44>)
 8008386:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8008388:	4b08      	ldr	r3, [pc, #32]	; (80083ac <HAL_FLASH_OB_Unlock+0x40>)
 800838a:	4a0a      	ldr	r2, [pc, #40]	; (80083b4 <HAL_FLASH_OB_Unlock+0x48>)
 800838c:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <HAL_FLASH_OB_Unlock+0x40>)
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800839e:	79fb      	ldrb	r3, [r7, #7]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	40022000 	.word	0x40022000
 80083b0:	08192a3b 	.word	0x08192a3b
 80083b4:	4c5d6e7f 	.word	0x4c5d6e7f

080083b8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <HAL_FLASH_OB_Lock+0x34>)
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	4a09      	ldr	r2, [pc, #36]	; (80083ec <HAL_FLASH_OB_Lock+0x34>)
 80083c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083cc:	6153      	str	r3, [r2, #20]

  /* Verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 80083ce:	4b07      	ldr	r3, [pc, #28]	; (80083ec <HAL_FLASH_OB_Lock+0x34>)
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80083de:	79fb      	ldrb	r3, [r7, #7]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	40022000 	.word	0x40022000

080083f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80083f8:	f7fd fc64 	bl	8005cc4 <HAL_GetTick>
 80083fc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80083fe:	e009      	b.n	8008414 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8008400:	f7fd fc60 	bl	8005cc4 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d201      	bcs.n	8008414 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e038      	b.n	8008486 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008414:	4b1e      	ldr	r3, [pc, #120]	; (8008490 <FLASH_WaitForLastOperation+0xa0>)
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800841c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008420:	d0ee      	beq.n	8008400 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8008422:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <FLASH_WaitForLastOperation+0xa0>)
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800842a:	4013      	ands	r3, r2
 800842c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01e      	beq.n	8008472 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008434:	4b17      	ldr	r3, [pc, #92]	; (8008494 <FLASH_WaitForLastOperation+0xa4>)
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	4313      	orrs	r3, r2
 800843c:	4a15      	ldr	r2, [pc, #84]	; (8008494 <FLASH_WaitForLastOperation+0xa4>)
 800843e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <FLASH_WaitForLastOperation+0x6a>
 800844a:	4b11      	ldr	r3, [pc, #68]	; (8008490 <FLASH_WaitForLastOperation+0xa0>)
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008454:	490e      	ldr	r1, [pc, #56]	; (8008490 <FLASH_WaitForLastOperation+0xa0>)
 8008456:	4313      	orrs	r3, r2
 8008458:	618b      	str	r3, [r1, #24]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <FLASH_WaitForLastOperation+0x7e>
 8008464:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <FLASH_WaitForLastOperation+0xa0>)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800846c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e009      	b.n	8008486 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <FLASH_WaitForLastOperation+0xa0>)
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b01      	cmp	r3, #1
 800847c:	d102      	bne.n	8008484 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <FLASH_WaitForLastOperation+0xa0>)
 8008480:	2201      	movs	r2, #1
 8008482:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40022000 	.word	0x40022000
 8008494:	2000000c 	.word	0x2000000c

08008498 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80084a4:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <FLASH_Program_DoubleWord+0x48>)
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	4a0d      	ldr	r2, [pc, #52]	; (80084e0 <FLASH_Program_DoubleWord+0x48>)
 80084aa:	f043 0301 	orr.w	r3, r3, #1
 80084ae:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80084b6:	f3bf 8f6f 	isb	sy
}
 80084ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80084bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	000a      	movs	r2, r1
 80084ca:	2300      	movs	r3, #0
 80084cc:	68f9      	ldr	r1, [r7, #12]
 80084ce:	3104      	adds	r1, #4
 80084d0:	4613      	mov	r3, r2
 80084d2:	600b      	str	r3, [r1, #0]
}
 80084d4:	bf00      	nop
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	40022000 	.word	0x40022000

080084e4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b089      	sub	sp, #36	; 0x24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80084ee:	2340      	movs	r3, #64	; 0x40
 80084f0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80084fa:	4b14      	ldr	r3, [pc, #80]	; (800854c <FLASH_Program_Fast+0x68>)
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	4a13      	ldr	r2, [pc, #76]	; (800854c <FLASH_Program_Fast+0x68>)
 8008500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008504:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008506:	f3ef 8310 	mrs	r3, PRIMASK
 800850a:	60fb      	str	r3, [r7, #12]
  return(result);
 800850c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800850e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008510:	b672      	cpsid	i
}
 8008512:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	3304      	adds	r3, #4
 8008520:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	3304      	adds	r3, #4
 8008526:	617b      	str	r3, [r7, #20]
    row_index--;
 8008528:	7ffb      	ldrb	r3, [r7, #31]
 800852a:	3b01      	subs	r3, #1
 800852c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800852e:	7ffb      	ldrb	r3, [r7, #31]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1ef      	bne.n	8008514 <FLASH_Program_Fast+0x30>
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f383 8810 	msr	PRIMASK, r3
}
 800853e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008540:	bf00      	nop
 8008542:	3724      	adds	r7, #36	; 0x24
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	40022000 	.word	0x40022000

08008550 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800855a:	4b4c      	ldr	r3, [pc, #304]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d101      	bne.n	8008566 <HAL_FLASHEx_Erase+0x16>
 8008562:	2302      	movs	r3, #2
 8008564:	e08d      	b.n	8008682 <HAL_FLASHEx_Erase+0x132>
 8008566:	4b49      	ldr	r3, [pc, #292]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 8008568:	2201      	movs	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800856c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008570:	f7ff ff3e 	bl	80083f0 <FLASH_WaitForLastOperation>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d17d      	bne.n	800867a <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800857e:	4b43      	ldr	r3, [pc, #268]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 8008580:	2200      	movs	r2, #0
 8008582:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008584:	4b42      	ldr	r3, [pc, #264]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800858c:	2b00      	cmp	r3, #0
 800858e:	d019      	beq.n	80085c4 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008590:	4b3f      	ldr	r3, [pc, #252]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a3e      	ldr	r2, [pc, #248]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 8008596:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800859a:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800859c:	4b3c      	ldr	r3, [pc, #240]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d009      	beq.n	80085bc <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80085a8:	4b39      	ldr	r3, [pc, #228]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a38      	ldr	r2, [pc, #224]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 80085ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085b2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80085b4:	4b35      	ldr	r3, [pc, #212]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 80085b6:	2203      	movs	r2, #3
 80085b8:	771a      	strb	r2, [r3, #28]
 80085ba:	e016      	b.n	80085ea <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80085bc:	4b33      	ldr	r3, [pc, #204]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 80085be:	2201      	movs	r2, #1
 80085c0:	771a      	strb	r2, [r3, #28]
 80085c2:	e012      	b.n	80085ea <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80085c4:	4b32      	ldr	r3, [pc, #200]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d009      	beq.n	80085e4 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80085d0:	4b2f      	ldr	r3, [pc, #188]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a2e      	ldr	r2, [pc, #184]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 80085d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80085dc:	4b2b      	ldr	r3, [pc, #172]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 80085de:	2202      	movs	r2, #2
 80085e0:	771a      	strb	r2, [r3, #28]
 80085e2:	e002      	b.n	80085ea <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80085e4:	4b29      	ldr	r3, [pc, #164]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d113      	bne.n	800861a <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f84c 	bl	8008694 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80085fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008600:	f7ff fef6 	bl	80083f0 <FLASH_WaitForLastOperation>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8008608:	4b21      	ldr	r3, [pc, #132]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	4a20      	ldr	r2, [pc, #128]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 800860e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008612:	f023 0304 	bic.w	r3, r3, #4
 8008616:	6153      	str	r3, [r2, #20]
 8008618:	e02d      	b.n	8008676 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	f04f 32ff 	mov.w	r2, #4294967295
 8008620:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	e01d      	b.n	8008666 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	4619      	mov	r1, r3
 8008630:	68b8      	ldr	r0, [r7, #8]
 8008632:	f000 f867 	bl	8008704 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800863a:	f7ff fed9 	bl	80083f0 <FLASH_WaitForLastOperation>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008642:	4b13      	ldr	r3, [pc, #76]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	4a12      	ldr	r2, [pc, #72]	; (8008690 <HAL_FLASHEx_Erase+0x140>)
 8008648:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800864c:	f023 0302 	bic.w	r3, r3, #2
 8008650:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	601a      	str	r2, [r3, #0]
          break;
 800865e:	e00a      	b.n	8008676 <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	3301      	adds	r3, #1
 8008664:	60bb      	str	r3, [r7, #8]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	4413      	add	r3, r2
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	d3d9      	bcc.n	800862a <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008676:	f000 f889 	bl	800878c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800867a:	4b04      	ldr	r3, [pc, #16]	; (800868c <HAL_FLASHEx_Erase+0x13c>)
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]

  return status;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	2000000c 	.word	0x2000000c
 8008690:	40022000 	.word	0x40022000

08008694 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800869c:	4b18      	ldr	r3, [pc, #96]	; (8008700 <FLASH_MassErase+0x6c>)
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d016      	beq.n	80086d6 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80086b2:	4b13      	ldr	r3, [pc, #76]	; (8008700 <FLASH_MassErase+0x6c>)
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	4a12      	ldr	r2, [pc, #72]	; (8008700 <FLASH_MassErase+0x6c>)
 80086b8:	f043 0304 	orr.w	r3, r3, #4
 80086bc:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <FLASH_MassErase+0x6c>)
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <FLASH_MassErase+0x6c>)
 80086ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086d2:	6153      	str	r3, [r2, #20]
 80086d4:	e007      	b.n	80086e6 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80086d6:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <FLASH_MassErase+0x6c>)
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	4a09      	ldr	r2, [pc, #36]	; (8008700 <FLASH_MassErase+0x6c>)
 80086dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e0:	f043 0304 	orr.w	r3, r3, #4
 80086e4:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <FLASH_MassErase+0x6c>)
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	4a05      	ldr	r2, [pc, #20]	; (8008700 <FLASH_MassErase+0x6c>)
 80086ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f0:	6153      	str	r3, [r2, #20]
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40022000 	.word	0x40022000

08008704 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800870e:	4b1e      	ldr	r3, [pc, #120]	; (8008788 <FLASH_PageErase+0x84>)
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800871a:	4b1b      	ldr	r3, [pc, #108]	; (8008788 <FLASH_PageErase+0x84>)
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	4a1a      	ldr	r2, [pc, #104]	; (8008788 <FLASH_PageErase+0x84>)
 8008720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008724:	6153      	str	r3, [r2, #20]
 8008726:	e011      	b.n	800874c <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d006      	beq.n	8008740 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008732:	4b15      	ldr	r3, [pc, #84]	; (8008788 <FLASH_PageErase+0x84>)
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	4a14      	ldr	r2, [pc, #80]	; (8008788 <FLASH_PageErase+0x84>)
 8008738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800873c:	6153      	str	r3, [r2, #20]
 800873e:	e005      	b.n	800874c <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8008740:	4b11      	ldr	r3, [pc, #68]	; (8008788 <FLASH_PageErase+0x84>)
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	4a10      	ldr	r2, [pc, #64]	; (8008788 <FLASH_PageErase+0x84>)
 8008746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800874a:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800874c:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <FLASH_PageErase+0x84>)
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800875c:	490a      	ldr	r1, [pc, #40]	; (8008788 <FLASH_PageErase+0x84>)
 800875e:	4313      	orrs	r3, r2
 8008760:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008762:	4b09      	ldr	r3, [pc, #36]	; (8008788 <FLASH_PageErase+0x84>)
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	4a08      	ldr	r2, [pc, #32]	; (8008788 <FLASH_PageErase+0x84>)
 8008768:	f043 0302 	orr.w	r3, r3, #2
 800876c:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <FLASH_PageErase+0x84>)
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	4a05      	ldr	r2, [pc, #20]	; (8008788 <FLASH_PageErase+0x84>)
 8008774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008778:	6153      	str	r3, [r2, #20]
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	40022000 	.word	0x40022000

0800878c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008792:	4b1e      	ldr	r3, [pc, #120]	; (800880c <FLASH_FlushCaches+0x80>)
 8008794:	7f1b      	ldrb	r3, [r3, #28]
 8008796:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d002      	beq.n	80087a4 <FLASH_FlushCaches+0x18>
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d111      	bne.n	80087c8 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80087a4:	4b1a      	ldr	r3, [pc, #104]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a19      	ldr	r2, [pc, #100]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	4b17      	ldr	r3, [pc, #92]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a16      	ldr	r2, [pc, #88]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087ba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80087bc:	4b14      	ldr	r3, [pc, #80]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a13      	ldr	r2, [pc, #76]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087c6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d002      	beq.n	80087d4 <FLASH_FlushCaches+0x48>
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d111      	bne.n	80087f8 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80087d4:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80087ec:	4b08      	ldr	r3, [pc, #32]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a07      	ldr	r2, [pc, #28]	; (8008810 <FLASH_FlushCaches+0x84>)
 80087f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087f6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80087f8:	4b04      	ldr	r3, [pc, #16]	; (800880c <FLASH_FlushCaches+0x80>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	771a      	strb	r2, [r3, #28]
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	2000000c 	.word	0x2000000c
 8008810:	40022000 	.word	0x40022000

08008814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008822:	e15a      	b.n	8008ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	2101      	movs	r1, #1
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	fa01 f303 	lsl.w	r3, r1, r3
 8008830:	4013      	ands	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 814c 	beq.w	8008ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d00b      	beq.n	800885c <HAL_GPIO_Init+0x48>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d007      	beq.n	800885c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008850:	2b11      	cmp	r3, #17
 8008852:	d003      	beq.n	800885c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b12      	cmp	r3, #18
 800885a:	d130      	bne.n	80088be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	2203      	movs	r2, #3
 8008868:	fa02 f303 	lsl.w	r3, r2, r3
 800886c:	43db      	mvns	r3, r3
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	4013      	ands	r3, r2
 8008872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	fa02 f303 	lsl.w	r3, r2, r3
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4313      	orrs	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008892:	2201      	movs	r2, #1
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	43db      	mvns	r3, r3
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4013      	ands	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	091b      	lsrs	r3, r3, #4
 80088a8:	f003 0201 	and.w	r2, r3, #1
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	2203      	movs	r2, #3
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	43db      	mvns	r3, r3
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	4013      	ands	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d003      	beq.n	80088fe <HAL_GPIO_Init+0xea>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2b12      	cmp	r3, #18
 80088fc:	d123      	bne.n	8008946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	08da      	lsrs	r2, r3, #3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3208      	adds	r2, #8
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	220f      	movs	r2, #15
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	43db      	mvns	r3, r3
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4013      	ands	r3, r2
 8008920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4313      	orrs	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	08da      	lsrs	r2, r3, #3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3208      	adds	r2, #8
 8008940:	6939      	ldr	r1, [r7, #16]
 8008942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	2203      	movs	r2, #3
 8008952:	fa02 f303 	lsl.w	r3, r2, r3
 8008956:	43db      	mvns	r3, r3
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4013      	ands	r3, r2
 800895c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f003 0203 	and.w	r2, r3, #3
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	fa02 f303 	lsl.w	r3, r2, r3
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80a6 	beq.w	8008ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008988:	4b5b      	ldr	r3, [pc, #364]	; (8008af8 <HAL_GPIO_Init+0x2e4>)
 800898a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898c:	4a5a      	ldr	r2, [pc, #360]	; (8008af8 <HAL_GPIO_Init+0x2e4>)
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	6613      	str	r3, [r2, #96]	; 0x60
 8008994:	4b58      	ldr	r3, [pc, #352]	; (8008af8 <HAL_GPIO_Init+0x2e4>)
 8008996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	60bb      	str	r3, [r7, #8]
 800899e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089a0:	4a56      	ldr	r2, [pc, #344]	; (8008afc <HAL_GPIO_Init+0x2e8>)
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	089b      	lsrs	r3, r3, #2
 80089a6:	3302      	adds	r3, #2
 80089a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f003 0303 	and.w	r3, r3, #3
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	220f      	movs	r2, #15
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	43db      	mvns	r3, r3
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4013      	ands	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80089ca:	d01f      	beq.n	8008a0c <HAL_GPIO_Init+0x1f8>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a4c      	ldr	r2, [pc, #304]	; (8008b00 <HAL_GPIO_Init+0x2ec>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d019      	beq.n	8008a08 <HAL_GPIO_Init+0x1f4>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a4b      	ldr	r2, [pc, #300]	; (8008b04 <HAL_GPIO_Init+0x2f0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d013      	beq.n	8008a04 <HAL_GPIO_Init+0x1f0>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a4a      	ldr	r2, [pc, #296]	; (8008b08 <HAL_GPIO_Init+0x2f4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00d      	beq.n	8008a00 <HAL_GPIO_Init+0x1ec>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a49      	ldr	r2, [pc, #292]	; (8008b0c <HAL_GPIO_Init+0x2f8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d007      	beq.n	80089fc <HAL_GPIO_Init+0x1e8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a48      	ldr	r2, [pc, #288]	; (8008b10 <HAL_GPIO_Init+0x2fc>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d101      	bne.n	80089f8 <HAL_GPIO_Init+0x1e4>
 80089f4:	2305      	movs	r3, #5
 80089f6:	e00a      	b.n	8008a0e <HAL_GPIO_Init+0x1fa>
 80089f8:	2306      	movs	r3, #6
 80089fa:	e008      	b.n	8008a0e <HAL_GPIO_Init+0x1fa>
 80089fc:	2304      	movs	r3, #4
 80089fe:	e006      	b.n	8008a0e <HAL_GPIO_Init+0x1fa>
 8008a00:	2303      	movs	r3, #3
 8008a02:	e004      	b.n	8008a0e <HAL_GPIO_Init+0x1fa>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e002      	b.n	8008a0e <HAL_GPIO_Init+0x1fa>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e000      	b.n	8008a0e <HAL_GPIO_Init+0x1fa>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	f002 0203 	and.w	r2, r2, #3
 8008a14:	0092      	lsls	r2, r2, #2
 8008a16:	4093      	lsls	r3, r2
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a1e:	4937      	ldr	r1, [pc, #220]	; (8008afc <HAL_GPIO_Init+0x2e8>)
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	089b      	lsrs	r3, r3, #2
 8008a24:	3302      	adds	r3, #2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008a2c:	4b39      	ldr	r3, [pc, #228]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	43db      	mvns	r3, r3
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a50:	4a30      	ldr	r2, [pc, #192]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008a56:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	43db      	mvns	r3, r3
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4013      	ands	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008a7a:	4a26      	ldr	r2, [pc, #152]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a80:	4b24      	ldr	r3, [pc, #144]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008aa4:	4a1b      	ldr	r2, [pc, #108]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008aaa:	4b1a      	ldr	r3, [pc, #104]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008ace:	4a11      	ldr	r2, [pc, #68]	; (8008b14 <HAL_GPIO_Init+0x300>)
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f47f ae9d 	bne.w	8008824 <HAL_GPIO_Init+0x10>
  }
}
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	40021000 	.word	0x40021000
 8008afc:	40010000 	.word	0x40010000
 8008b00:	48000400 	.word	0x48000400
 8008b04:	48000800 	.word	0x48000800
 8008b08:	48000c00 	.word	0x48000c00
 8008b0c:	48001000 	.word	0x48001000
 8008b10:	48001400 	.word	0x48001400
 8008b14:	40010400 	.word	0x40010400

08008b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	807b      	strh	r3, [r7, #2]
 8008b24:	4613      	mov	r3, r2
 8008b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b28:	787b      	ldrb	r3, [r7, #1]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008b2e:	887a      	ldrh	r2, [r7, #2]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008b34:	e002      	b.n	8008b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008b36:	887a      	ldrh	r2, [r7, #2]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d141      	bne.n	8008bda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b56:	4b4b      	ldr	r3, [pc, #300]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b62:	d131      	bne.n	8008bc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b64:	4b47      	ldr	r3, [pc, #284]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b6a:	4a46      	ldr	r2, [pc, #280]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b74:	4b43      	ldr	r3, [pc, #268]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b7c:	4a41      	ldr	r2, [pc, #260]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b84:	4b40      	ldr	r3, [pc, #256]	; (8008c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2232      	movs	r2, #50	; 0x32
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	4a3f      	ldr	r2, [pc, #252]	; (8008c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b90:	fba2 2303 	umull	r2, r3, r2, r3
 8008b94:	0c9b      	lsrs	r3, r3, #18
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b9a:	e002      	b.n	8008ba2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ba2:	4b38      	ldr	r3, [pc, #224]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bae:	d102      	bne.n	8008bb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f2      	bne.n	8008b9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bb6:	4b33      	ldr	r3, [pc, #204]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc2:	d158      	bne.n	8008c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e057      	b.n	8008c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bc8:	4b2e      	ldr	r3, [pc, #184]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bce:	4a2d      	ldr	r2, [pc, #180]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008bd8:	e04d      	b.n	8008c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008be0:	d141      	bne.n	8008c66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008be2:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bee:	d131      	bne.n	8008c54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bf0:	4b24      	ldr	r3, [pc, #144]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf6:	4a23      	ldr	r2, [pc, #140]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c00:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c08:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c10:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2232      	movs	r2, #50	; 0x32
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c20:	0c9b      	lsrs	r3, r3, #18
 8008c22:	3301      	adds	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c26:	e002      	b.n	8008c2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c2e:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3a:	d102      	bne.n	8008c42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f2      	bne.n	8008c28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c42:	4b10      	ldr	r3, [pc, #64]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4e:	d112      	bne.n	8008c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e011      	b.n	8008c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c5a:	4a0a      	ldr	r2, [pc, #40]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008c64:	e007      	b.n	8008c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008c66:	4b07      	ldr	r3, [pc, #28]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c6e:	4a05      	ldr	r2, [pc, #20]	; (8008c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	40007000 	.word	0x40007000
 8008c88:	20000000 	.word	0x20000000
 8008c8c:	431bde83 	.word	0x431bde83

08008c90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	4a04      	ldr	r2, [pc, #16]	; (8008cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c9e:	6093      	str	r3, [r2, #8]
}
 8008ca0:	bf00      	nop
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	40007000 	.word	0x40007000

08008cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e308      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d075      	beq.n	8008dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cce:	4ba3      	ldr	r3, [pc, #652]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 030c 	and.w	r3, r3, #12
 8008cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cd8:	4ba0      	ldr	r3, [pc, #640]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b0c      	cmp	r3, #12
 8008ce6:	d102      	bne.n	8008cee <HAL_RCC_OscConfig+0x3e>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d002      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x44>
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d10b      	bne.n	8008d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf4:	4b99      	ldr	r3, [pc, #612]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d05b      	beq.n	8008db8 <HAL_RCC_OscConfig+0x108>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d157      	bne.n	8008db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e2e3      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d14:	d106      	bne.n	8008d24 <HAL_RCC_OscConfig+0x74>
 8008d16:	4b91      	ldr	r3, [pc, #580]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a90      	ldr	r2, [pc, #576]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	e01d      	b.n	8008d60 <HAL_RCC_OscConfig+0xb0>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d2c:	d10c      	bne.n	8008d48 <HAL_RCC_OscConfig+0x98>
 8008d2e:	4b8b      	ldr	r3, [pc, #556]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a8a      	ldr	r2, [pc, #552]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	4b88      	ldr	r3, [pc, #544]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a87      	ldr	r2, [pc, #540]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	e00b      	b.n	8008d60 <HAL_RCC_OscConfig+0xb0>
 8008d48:	4b84      	ldr	r3, [pc, #528]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a83      	ldr	r2, [pc, #524]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	4b81      	ldr	r3, [pc, #516]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a80      	ldr	r2, [pc, #512]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d013      	beq.n	8008d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d68:	f7fc ffac 	bl	8005cc4 <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d70:	f7fc ffa8 	bl	8005cc4 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b64      	cmp	r3, #100	; 0x64
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e2a8      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d82:	4b76      	ldr	r3, [pc, #472]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0f0      	beq.n	8008d70 <HAL_RCC_OscConfig+0xc0>
 8008d8e:	e014      	b.n	8008dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d90:	f7fc ff98 	bl	8005cc4 <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d98:	f7fc ff94 	bl	8005cc4 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b64      	cmp	r3, #100	; 0x64
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e294      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008daa:	4b6c      	ldr	r3, [pc, #432]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f0      	bne.n	8008d98 <HAL_RCC_OscConfig+0xe8>
 8008db6:	e000      	b.n	8008dba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d075      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc6:	4b65      	ldr	r3, [pc, #404]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 030c 	and.w	r3, r3, #12
 8008dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008dd0:	4b62      	ldr	r3, [pc, #392]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	2b0c      	cmp	r3, #12
 8008dde:	d102      	bne.n	8008de6 <HAL_RCC_OscConfig+0x136>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d002      	beq.n	8008dec <HAL_RCC_OscConfig+0x13c>
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d11f      	bne.n	8008e2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dec:	4b5b      	ldr	r3, [pc, #364]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <HAL_RCC_OscConfig+0x154>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e267      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e04:	4b55      	ldr	r3, [pc, #340]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	061b      	lsls	r3, r3, #24
 8008e12:	4952      	ldr	r1, [pc, #328]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008e18:	4b51      	ldr	r3, [pc, #324]	; (8008f60 <HAL_RCC_OscConfig+0x2b0>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fc ff05 	bl	8005c2c <HAL_InitTick>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d043      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e253      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d023      	beq.n	8008e7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e34:	4b49      	ldr	r3, [pc, #292]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a48      	ldr	r2, [pc, #288]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e40:	f7fc ff40 	bl	8005cc4 <HAL_GetTick>
 8008e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e48:	f7fc ff3c 	bl	8005cc4 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e23c      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e5a:	4b40      	ldr	r3, [pc, #256]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f0      	beq.n	8008e48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e66:	4b3d      	ldr	r3, [pc, #244]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	061b      	lsls	r3, r3, #24
 8008e74:	4939      	ldr	r1, [pc, #228]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	604b      	str	r3, [r1, #4]
 8008e7a:	e01a      	b.n	8008eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e7c:	4b37      	ldr	r3, [pc, #220]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a36      	ldr	r2, [pc, #216]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e88:	f7fc ff1c 	bl	8005cc4 <HAL_GetTick>
 8008e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e90:	f7fc ff18 	bl	8005cc4 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e218      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ea2:	4b2e      	ldr	r3, [pc, #184]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f0      	bne.n	8008e90 <HAL_RCC_OscConfig+0x1e0>
 8008eae:	e000      	b.n	8008eb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0308 	and.w	r3, r3, #8
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d03c      	beq.n	8008f38 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01c      	beq.n	8008f00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ec6:	4b25      	ldr	r3, [pc, #148]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ecc:	4a23      	ldr	r2, [pc, #140]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ed6:	f7fc fef5 	bl	8005cc4 <HAL_GetTick>
 8008eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ede:	f7fc fef1 	bl	8005cc4 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e1f1      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0ef      	beq.n	8008ede <HAL_RCC_OscConfig+0x22e>
 8008efe:	e01b      	b.n	8008f38 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f00:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f06:	4a15      	ldr	r2, [pc, #84]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008f08:	f023 0301 	bic.w	r3, r3, #1
 8008f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f10:	f7fc fed8 	bl	8005cc4 <HAL_GetTick>
 8008f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f16:	e008      	b.n	8008f2a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f18:	f7fc fed4 	bl	8005cc4 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d901      	bls.n	8008f2a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e1d4      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f2a:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1ef      	bne.n	8008f18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80ab 	beq.w	800909c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f46:	2300      	movs	r3, #0
 8008f48:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008f4a:	4b04      	ldr	r3, [pc, #16]	; (8008f5c <HAL_RCC_OscConfig+0x2ac>)
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d106      	bne.n	8008f64 <HAL_RCC_OscConfig+0x2b4>
 8008f56:	2301      	movs	r3, #1
 8008f58:	e005      	b.n	8008f66 <HAL_RCC_OscConfig+0x2b6>
 8008f5a:	bf00      	nop
 8008f5c:	40021000 	.word	0x40021000
 8008f60:	20000004 	.word	0x20000004
 8008f64:	2300      	movs	r3, #0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00d      	beq.n	8008f86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f6a:	4baf      	ldr	r3, [pc, #700]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6e:	4aae      	ldr	r2, [pc, #696]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f74:	6593      	str	r3, [r2, #88]	; 0x58
 8008f76:	4bac      	ldr	r3, [pc, #688]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008f82:	2301      	movs	r3, #1
 8008f84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f86:	4ba9      	ldr	r3, [pc, #676]	; (800922c <HAL_RCC_OscConfig+0x57c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d118      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f92:	4ba6      	ldr	r3, [pc, #664]	; (800922c <HAL_RCC_OscConfig+0x57c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4aa5      	ldr	r2, [pc, #660]	; (800922c <HAL_RCC_OscConfig+0x57c>)
 8008f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f9e:	f7fc fe91 	bl	8005cc4 <HAL_GetTick>
 8008fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fa4:	e008      	b.n	8008fb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fa6:	f7fc fe8d 	bl	8005cc4 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d901      	bls.n	8008fb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e18d      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fb8:	4b9c      	ldr	r3, [pc, #624]	; (800922c <HAL_RCC_OscConfig+0x57c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0f0      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d108      	bne.n	8008fde <HAL_RCC_OscConfig+0x32e>
 8008fcc:	4b96      	ldr	r3, [pc, #600]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd2:	4a95      	ldr	r2, [pc, #596]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008fd4:	f043 0301 	orr.w	r3, r3, #1
 8008fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008fdc:	e024      	b.n	8009028 <HAL_RCC_OscConfig+0x378>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	2b05      	cmp	r3, #5
 8008fe4:	d110      	bne.n	8009008 <HAL_RCC_OscConfig+0x358>
 8008fe6:	4b90      	ldr	r3, [pc, #576]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fec:	4a8e      	ldr	r2, [pc, #568]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008fee:	f043 0304 	orr.w	r3, r3, #4
 8008ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008ff6:	4b8c      	ldr	r3, [pc, #560]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ffc:	4a8a      	ldr	r2, [pc, #552]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009006:	e00f      	b.n	8009028 <HAL_RCC_OscConfig+0x378>
 8009008:	4b87      	ldr	r3, [pc, #540]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 800900a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900e:	4a86      	ldr	r2, [pc, #536]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009010:	f023 0301 	bic.w	r3, r3, #1
 8009014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009018:	4b83      	ldr	r3, [pc, #524]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 800901a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901e:	4a82      	ldr	r2, [pc, #520]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009020:	f023 0304 	bic.w	r3, r3, #4
 8009024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d016      	beq.n	800905e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009030:	f7fc fe48 	bl	8005cc4 <HAL_GetTick>
 8009034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009036:	e00a      	b.n	800904e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009038:	f7fc fe44 	bl	8005cc4 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	f241 3288 	movw	r2, #5000	; 0x1388
 8009046:	4293      	cmp	r3, r2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e142      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800904e:	4b76      	ldr	r3, [pc, #472]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0ed      	beq.n	8009038 <HAL_RCC_OscConfig+0x388>
 800905c:	e015      	b.n	800908a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905e:	f7fc fe31 	bl	8005cc4 <HAL_GetTick>
 8009062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009064:	e00a      	b.n	800907c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009066:	f7fc fe2d 	bl	8005cc4 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	f241 3288 	movw	r2, #5000	; 0x1388
 8009074:	4293      	cmp	r3, r2
 8009076:	d901      	bls.n	800907c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e12b      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800907c:	4b6a      	ldr	r3, [pc, #424]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 800907e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1ed      	bne.n	8009066 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800908a:	7ffb      	ldrb	r3, [r7, #31]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d105      	bne.n	800909c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009090:	4b65      	ldr	r3, [pc, #404]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009094:	4a64      	ldr	r2, [pc, #400]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800909a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0320 	and.w	r3, r3, #32
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d03c      	beq.n	8009122 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01c      	beq.n	80090ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090b0:	4b5d      	ldr	r3, [pc, #372]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80090b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090b6:	4a5c      	ldr	r2, [pc, #368]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80090b8:	f043 0301 	orr.w	r3, r3, #1
 80090bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c0:	f7fc fe00 	bl	8005cc4 <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090c8:	f7fc fdfc 	bl	8005cc4 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e0fc      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80090da:	4b53      	ldr	r3, [pc, #332]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80090dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0ef      	beq.n	80090c8 <HAL_RCC_OscConfig+0x418>
 80090e8:	e01b      	b.n	8009122 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80090ea:	4b4f      	ldr	r3, [pc, #316]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80090ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090f0:	4a4d      	ldr	r2, [pc, #308]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090fa:	f7fc fde3 	bl	8005cc4 <HAL_GetTick>
 80090fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009100:	e008      	b.n	8009114 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009102:	f7fc fddf 	bl	8005cc4 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b02      	cmp	r3, #2
 800910e:	d901      	bls.n	8009114 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e0df      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009114:	4b44      	ldr	r3, [pc, #272]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1ef      	bne.n	8009102 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80d3 	beq.w	80092d2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800912c:	4b3e      	ldr	r3, [pc, #248]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f003 030c 	and.w	r3, r3, #12
 8009134:	2b0c      	cmp	r3, #12
 8009136:	f000 808d 	beq.w	8009254 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d15a      	bne.n	80091f8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009142:	4b39      	ldr	r3, [pc, #228]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a38      	ldr	r2, [pc, #224]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800914c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914e:	f7fc fdb9 	bl	8005cc4 <HAL_GetTick>
 8009152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009154:	e008      	b.n	8009168 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009156:	f7fc fdb5 	bl	8005cc4 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d901      	bls.n	8009168 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e0b5      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009168:	4b2f      	ldr	r3, [pc, #188]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1f0      	bne.n	8009156 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009174:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <HAL_RCC_OscConfig+0x580>)
 800917a:	4013      	ands	r3, r2
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6a11      	ldr	r1, [r2, #32]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009184:	3a01      	subs	r2, #1
 8009186:	0112      	lsls	r2, r2, #4
 8009188:	4311      	orrs	r1, r2
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800918e:	0212      	lsls	r2, r2, #8
 8009190:	4311      	orrs	r1, r2
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009196:	0852      	lsrs	r2, r2, #1
 8009198:	3a01      	subs	r2, #1
 800919a:	0552      	lsls	r2, r2, #21
 800919c:	4311      	orrs	r1, r2
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80091a2:	0852      	lsrs	r2, r2, #1
 80091a4:	3a01      	subs	r2, #1
 80091a6:	0652      	lsls	r2, r2, #25
 80091a8:	4311      	orrs	r1, r2
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80091ae:	06d2      	lsls	r2, r2, #27
 80091b0:	430a      	orrs	r2, r1
 80091b2:	491d      	ldr	r1, [pc, #116]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091b8:	4b1b      	ldr	r3, [pc, #108]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a1a      	ldr	r2, [pc, #104]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80091c4:	4b18      	ldr	r3, [pc, #96]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	4a17      	ldr	r2, [pc, #92]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d0:	f7fc fd78 	bl	8005cc4 <HAL_GetTick>
 80091d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091d8:	f7fc fd74 	bl	8005cc4 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e074      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091ea:	4b0f      	ldr	r3, [pc, #60]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0f0      	beq.n	80091d8 <HAL_RCC_OscConfig+0x528>
 80091f6:	e06c      	b.n	80092d2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a0a      	ldr	r2, [pc, #40]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 80091fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009202:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009204:	4b08      	ldr	r3, [pc, #32]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	4a07      	ldr	r2, [pc, #28]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 800920a:	f023 0303 	bic.w	r3, r3, #3
 800920e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009210:	4b05      	ldr	r3, [pc, #20]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	4a04      	ldr	r2, [pc, #16]	; (8009228 <HAL_RCC_OscConfig+0x578>)
 8009216:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800921a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800921e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009220:	f7fc fd50 	bl	8005cc4 <HAL_GetTick>
 8009224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009226:	e00e      	b.n	8009246 <HAL_RCC_OscConfig+0x596>
 8009228:	40021000 	.word	0x40021000
 800922c:	40007000 	.word	0x40007000
 8009230:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009234:	f7fc fd46 	bl	8005cc4 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e046      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009246:	4b25      	ldr	r3, [pc, #148]	; (80092dc <HAL_RCC_OscConfig+0x62c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1f0      	bne.n	8009234 <HAL_RCC_OscConfig+0x584>
 8009252:	e03e      	b.n	80092d2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e039      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009260:	4b1e      	ldr	r3, [pc, #120]	; (80092dc <HAL_RCC_OscConfig+0x62c>)
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f003 0203 	and.w	r2, r3, #3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	429a      	cmp	r2, r3
 8009272:	d12c      	bne.n	80092ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	3b01      	subs	r3, #1
 8009280:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009282:	429a      	cmp	r2, r3
 8009284:	d123      	bne.n	80092ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009292:	429a      	cmp	r2, r3
 8009294:	d11b      	bne.n	80092ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d113      	bne.n	80092ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b0:	085b      	lsrs	r3, r3, #1
 80092b2:	3b01      	subs	r3, #1
 80092b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d109      	bne.n	80092ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	3b01      	subs	r3, #1
 80092c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d001      	beq.n	80092d2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3720      	adds	r7, #32
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	40021000 	.word	0x40021000

080092e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80092ea:	2300      	movs	r3, #0
 80092ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e11e      	b.n	8009536 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092f8:	4b91      	ldr	r3, [pc, #580]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d910      	bls.n	8009328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009306:	4b8e      	ldr	r3, [pc, #568]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f023 020f 	bic.w	r2, r3, #15
 800930e:	498c      	ldr	r1, [pc, #560]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	4313      	orrs	r3, r2
 8009314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009316:	4b8a      	ldr	r3, [pc, #552]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d001      	beq.n	8009328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e106      	b.n	8009536 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d073      	beq.n	800941c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d129      	bne.n	8009390 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800933c:	4b81      	ldr	r3, [pc, #516]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e0f4      	b.n	8009536 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800934c:	f000 f99e 	bl	800968c <RCC_GetSysClockFreqFromPLLSource>
 8009350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	4a7c      	ldr	r2, [pc, #496]	; (8009548 <HAL_RCC_ClockConfig+0x268>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d93f      	bls.n	80093da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800935a:	4b7a      	ldr	r3, [pc, #488]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d009      	beq.n	800937a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800936e:	2b00      	cmp	r3, #0
 8009370:	d033      	beq.n	80093da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009376:	2b00      	cmp	r3, #0
 8009378:	d12f      	bne.n	80093da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800937a:	4b72      	ldr	r3, [pc, #456]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009382:	4a70      	ldr	r2, [pc, #448]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 8009384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009388:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800938a:	2380      	movs	r3, #128	; 0x80
 800938c:	617b      	str	r3, [r7, #20]
 800938e:	e024      	b.n	80093da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d107      	bne.n	80093a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009398:	4b6a      	ldr	r3, [pc, #424]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d109      	bne.n	80093b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e0c6      	b.n	8009536 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093a8:	4b66      	ldr	r3, [pc, #408]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e0be      	b.n	8009536 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80093b8:	f000 f8ce 	bl	8009558 <HAL_RCC_GetSysClockFreq>
 80093bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	4a61      	ldr	r2, [pc, #388]	; (8009548 <HAL_RCC_ClockConfig+0x268>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d909      	bls.n	80093da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80093c6:	4b5f      	ldr	r3, [pc, #380]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093ce:	4a5d      	ldr	r2, [pc, #372]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80093d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80093d6:	2380      	movs	r3, #128	; 0x80
 80093d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093da:	4b5a      	ldr	r3, [pc, #360]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f023 0203 	bic.w	r2, r3, #3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	4957      	ldr	r1, [pc, #348]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ec:	f7fc fc6a 	bl	8005cc4 <HAL_GetTick>
 80093f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093f2:	e00a      	b.n	800940a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093f4:	f7fc fc66 	bl	8005cc4 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009402:	4293      	cmp	r3, r2
 8009404:	d901      	bls.n	800940a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e095      	b.n	8009536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800940a:	4b4e      	ldr	r3, [pc, #312]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f003 020c 	and.w	r2, r3, #12
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	429a      	cmp	r2, r3
 800941a:	d1eb      	bne.n	80093f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d023      	beq.n	8009470 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d005      	beq.n	8009440 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009434:	4b43      	ldr	r3, [pc, #268]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	4a42      	ldr	r2, [pc, #264]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800943a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800943e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0308 	and.w	r3, r3, #8
 8009448:	2b00      	cmp	r3, #0
 800944a:	d007      	beq.n	800945c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800944c:	4b3d      	ldr	r3, [pc, #244]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009454:	4a3b      	ldr	r2, [pc, #236]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 8009456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800945a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800945c:	4b39      	ldr	r3, [pc, #228]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	4936      	ldr	r1, [pc, #216]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800946a:	4313      	orrs	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
 800946e:	e008      	b.n	8009482 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	2b80      	cmp	r3, #128	; 0x80
 8009474:	d105      	bne.n	8009482 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009476:	4b33      	ldr	r3, [pc, #204]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	4a32      	ldr	r2, [pc, #200]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 800947c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009480:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009482:	4b2f      	ldr	r3, [pc, #188]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 030f 	and.w	r3, r3, #15
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	429a      	cmp	r2, r3
 800948e:	d21d      	bcs.n	80094cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009490:	4b2b      	ldr	r3, [pc, #172]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f023 020f 	bic.w	r2, r3, #15
 8009498:	4929      	ldr	r1, [pc, #164]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	4313      	orrs	r3, r2
 800949e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80094a0:	f7fc fc10 	bl	8005cc4 <HAL_GetTick>
 80094a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094a6:	e00a      	b.n	80094be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094a8:	f7fc fc0c 	bl	8005cc4 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d901      	bls.n	80094be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e03b      	b.n	8009536 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094be:	4b20      	ldr	r3, [pc, #128]	; (8009540 <HAL_RCC_ClockConfig+0x260>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d1ed      	bne.n	80094a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d008      	beq.n	80094ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094d8:	4b1a      	ldr	r3, [pc, #104]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4917      	ldr	r1, [pc, #92]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0308 	and.w	r3, r3, #8
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d009      	beq.n	800950a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094f6:	4b13      	ldr	r3, [pc, #76]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	00db      	lsls	r3, r3, #3
 8009504:	490f      	ldr	r1, [pc, #60]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 8009506:	4313      	orrs	r3, r2
 8009508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800950a:	f000 f825 	bl	8009558 <HAL_RCC_GetSysClockFreq>
 800950e:	4602      	mov	r2, r0
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <HAL_RCC_ClockConfig+0x264>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	091b      	lsrs	r3, r3, #4
 8009516:	f003 030f 	and.w	r3, r3, #15
 800951a:	490c      	ldr	r1, [pc, #48]	; (800954c <HAL_RCC_ClockConfig+0x26c>)
 800951c:	5ccb      	ldrb	r3, [r1, r3]
 800951e:	f003 031f 	and.w	r3, r3, #31
 8009522:	fa22 f303 	lsr.w	r3, r2, r3
 8009526:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <HAL_RCC_ClockConfig+0x270>)
 8009528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800952a:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <HAL_RCC_ClockConfig+0x274>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f7fc fb7c 	bl	8005c2c <HAL_InitTick>
 8009534:	4603      	mov	r3, r0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	40022000 	.word	0x40022000
 8009544:	40021000 	.word	0x40021000
 8009548:	04c4b400 	.word	0x04c4b400
 800954c:	08013130 	.word	0x08013130
 8009550:	20000000 	.word	0x20000000
 8009554:	20000004 	.word	0x20000004

08009558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009558:	b480      	push	{r7}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800955e:	4b2c      	ldr	r3, [pc, #176]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 030c 	and.w	r3, r3, #12
 8009566:	2b04      	cmp	r3, #4
 8009568:	d102      	bne.n	8009570 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800956a:	4b2a      	ldr	r3, [pc, #168]	; (8009614 <HAL_RCC_GetSysClockFreq+0xbc>)
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	e047      	b.n	8009600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009570:	4b27      	ldr	r3, [pc, #156]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f003 030c 	and.w	r3, r3, #12
 8009578:	2b08      	cmp	r3, #8
 800957a:	d102      	bne.n	8009582 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800957c:	4b26      	ldr	r3, [pc, #152]	; (8009618 <HAL_RCC_GetSysClockFreq+0xc0>)
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	e03e      	b.n	8009600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009582:	4b23      	ldr	r3, [pc, #140]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f003 030c 	and.w	r3, r3, #12
 800958a:	2b0c      	cmp	r3, #12
 800958c:	d136      	bne.n	80095fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800958e:	4b20      	ldr	r3, [pc, #128]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009598:	4b1d      	ldr	r3, [pc, #116]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	091b      	lsrs	r3, r3, #4
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	3301      	adds	r3, #1
 80095a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d10c      	bne.n	80095c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095ac:	4a1a      	ldr	r2, [pc, #104]	; (8009618 <HAL_RCC_GetSysClockFreq+0xc0>)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b4:	4a16      	ldr	r2, [pc, #88]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095b6:	68d2      	ldr	r2, [r2, #12]
 80095b8:	0a12      	lsrs	r2, r2, #8
 80095ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095be:	fb02 f303 	mul.w	r3, r2, r3
 80095c2:	617b      	str	r3, [r7, #20]
      break;
 80095c4:	e00c      	b.n	80095e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095c6:	4a13      	ldr	r2, [pc, #76]	; (8009614 <HAL_RCC_GetSysClockFreq+0xbc>)
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ce:	4a10      	ldr	r2, [pc, #64]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095d0:	68d2      	ldr	r2, [r2, #12]
 80095d2:	0a12      	lsrs	r2, r2, #8
 80095d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095d8:	fb02 f303 	mul.w	r3, r2, r3
 80095dc:	617b      	str	r3, [r7, #20]
      break;
 80095de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80095e0:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	0e5b      	lsrs	r3, r3, #25
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	3301      	adds	r3, #1
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	e001      	b.n	8009600 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009600:	693b      	ldr	r3, [r7, #16]
}
 8009602:	4618      	mov	r0, r3
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40021000 	.word	0x40021000
 8009614:	00f42400 	.word	0x00f42400
 8009618:	007a1200 	.word	0x007a1200

0800961c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009620:	4b03      	ldr	r3, [pc, #12]	; (8009630 <HAL_RCC_GetHCLKFreq+0x14>)
 8009622:	681b      	ldr	r3, [r3, #0]
}
 8009624:	4618      	mov	r0, r3
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	20000000 	.word	0x20000000

08009634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009638:	f7ff fff0 	bl	800961c <HAL_RCC_GetHCLKFreq>
 800963c:	4602      	mov	r2, r0
 800963e:	4b06      	ldr	r3, [pc, #24]	; (8009658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	4904      	ldr	r1, [pc, #16]	; (800965c <HAL_RCC_GetPCLK1Freq+0x28>)
 800964a:	5ccb      	ldrb	r3, [r1, r3]
 800964c:	f003 031f 	and.w	r3, r3, #31
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009654:	4618      	mov	r0, r3
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40021000 	.word	0x40021000
 800965c:	08013140 	.word	0x08013140

08009660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009664:	f7ff ffda 	bl	800961c <HAL_RCC_GetHCLKFreq>
 8009668:	4602      	mov	r2, r0
 800966a:	4b06      	ldr	r3, [pc, #24]	; (8009684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	0adb      	lsrs	r3, r3, #11
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	4904      	ldr	r1, [pc, #16]	; (8009688 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009676:	5ccb      	ldrb	r3, [r1, r3]
 8009678:	f003 031f 	and.w	r3, r3, #31
 800967c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009680:	4618      	mov	r0, r3
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40021000 	.word	0x40021000
 8009688:	08013140 	.word	0x08013140

0800968c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009692:	4b1e      	ldr	r3, [pc, #120]	; (800970c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800969c:	4b1b      	ldr	r3, [pc, #108]	; (800970c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	091b      	lsrs	r3, r3, #4
 80096a2:	f003 030f 	and.w	r3, r3, #15
 80096a6:	3301      	adds	r3, #1
 80096a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d10c      	bne.n	80096ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80096b0:	4a17      	ldr	r2, [pc, #92]	; (8009710 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	4a14      	ldr	r2, [pc, #80]	; (800970c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80096ba:	68d2      	ldr	r2, [r2, #12]
 80096bc:	0a12      	lsrs	r2, r2, #8
 80096be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
 80096c6:	617b      	str	r3, [r7, #20]
    break;
 80096c8:	e00c      	b.n	80096e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80096ca:	4a12      	ldr	r2, [pc, #72]	; (8009714 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d2:	4a0e      	ldr	r2, [pc, #56]	; (800970c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80096d4:	68d2      	ldr	r2, [r2, #12]
 80096d6:	0a12      	lsrs	r2, r2, #8
 80096d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80096dc:	fb02 f303 	mul.w	r3, r2, r3
 80096e0:	617b      	str	r3, [r7, #20]
    break;
 80096e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	0e5b      	lsrs	r3, r3, #25
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	3301      	adds	r3, #1
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80096fe:	687b      	ldr	r3, [r7, #4]
}
 8009700:	4618      	mov	r0, r3
 8009702:	371c      	adds	r7, #28
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	40021000 	.word	0x40021000
 8009710:	007a1200 	.word	0x007a1200
 8009714:	00f42400 	.word	0x00f42400

08009718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009720:	2300      	movs	r3, #0
 8009722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009724:	2300      	movs	r3, #0
 8009726:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8098 	beq.w	8009866 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009736:	2300      	movs	r3, #0
 8009738:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800973a:	4b43      	ldr	r3, [pc, #268]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800973c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800973e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10d      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009746:	4b40      	ldr	r3, [pc, #256]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800974a:	4a3f      	ldr	r2, [pc, #252]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800974c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009750:	6593      	str	r3, [r2, #88]	; 0x58
 8009752:	4b3d      	ldr	r3, [pc, #244]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800975a:	60bb      	str	r3, [r7, #8]
 800975c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800975e:	2301      	movs	r3, #1
 8009760:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009762:	4b3a      	ldr	r3, [pc, #232]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a39      	ldr	r2, [pc, #228]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800976c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800976e:	f7fc faa9 	bl	8005cc4 <HAL_GetTick>
 8009772:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009774:	e009      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009776:	f7fc faa5 	bl	8005cc4 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	2b02      	cmp	r3, #2
 8009782:	d902      	bls.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	74fb      	strb	r3, [r7, #19]
        break;
 8009788:	e005      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800978a:	4b30      	ldr	r3, [pc, #192]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0ef      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009796:	7cfb      	ldrb	r3, [r7, #19]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d159      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800979c:	4b2a      	ldr	r3, [pc, #168]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800979e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01e      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d019      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80097b8:	4b23      	ldr	r3, [pc, #140]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097c4:	4b20      	ldr	r3, [pc, #128]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ca:	4a1f      	ldr	r2, [pc, #124]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097d4:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097da:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80097e4:	4a18      	ldr	r2, [pc, #96]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d016      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f6:	f7fc fa65 	bl	8005cc4 <HAL_GetTick>
 80097fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097fc:	e00b      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097fe:	f7fc fa61 	bl	8005cc4 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f241 3288 	movw	r2, #5000	; 0x1388
 800980c:	4293      	cmp	r3, r2
 800980e:	d902      	bls.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	74fb      	strb	r3, [r7, #19]
            break;
 8009814:	e006      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009816:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0ec      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009824:	7cfb      	ldrb	r3, [r7, #19]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10b      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800982a:	4b07      	ldr	r3, [pc, #28]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800982c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009838:	4903      	ldr	r1, [pc, #12]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800983a:	4313      	orrs	r3, r2
 800983c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009840:	e008      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009842:	7cfb      	ldrb	r3, [r7, #19]
 8009844:	74bb      	strb	r3, [r7, #18]
 8009846:	e005      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009848:	40021000 	.word	0x40021000
 800984c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009850:	7cfb      	ldrb	r3, [r7, #19]
 8009852:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009854:	7c7b      	ldrb	r3, [r7, #17]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d105      	bne.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800985a:	4baf      	ldr	r3, [pc, #700]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800985c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985e:	4aae      	ldr	r2, [pc, #696]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009864:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009872:	4ba9      	ldr	r3, [pc, #676]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009878:	f023 0203 	bic.w	r2, r3, #3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	49a5      	ldr	r1, [pc, #660]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009882:	4313      	orrs	r3, r2
 8009884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009894:	4ba0      	ldr	r3, [pc, #640]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989a:	f023 020c 	bic.w	r2, r3, #12
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	499d      	ldr	r1, [pc, #628]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0304 	and.w	r3, r3, #4
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80098b6:	4b98      	ldr	r3, [pc, #608]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80098b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	4994      	ldr	r1, [pc, #592]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0308 	and.w	r3, r3, #8
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80098d8:	4b8f      	ldr	r3, [pc, #572]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80098da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	498c      	ldr	r1, [pc, #560]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 0310 	and.w	r3, r3, #16
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80098fa:	4b87      	ldr	r3, [pc, #540]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80098fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	4983      	ldr	r1, [pc, #524]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800990a:	4313      	orrs	r3, r2
 800990c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800991c:	4b7e      	ldr	r3, [pc, #504]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009922:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	497b      	ldr	r1, [pc, #492]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800992c:	4313      	orrs	r3, r2
 800992e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800993e:	4b76      	ldr	r3, [pc, #472]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009944:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	4972      	ldr	r1, [pc, #456]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800994e:	4313      	orrs	r3, r2
 8009950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00a      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009960:	4b6d      	ldr	r3, [pc, #436]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009966:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	496a      	ldr	r1, [pc, #424]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009970:	4313      	orrs	r3, r2
 8009972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009982:	4b65      	ldr	r3, [pc, #404]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	4961      	ldr	r1, [pc, #388]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009992:	4313      	orrs	r3, r2
 8009994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00a      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099a4:	4b5c      	ldr	r3, [pc, #368]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099aa:	f023 0203 	bic.w	r2, r3, #3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	4959      	ldr	r1, [pc, #356]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00a      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099c6:	4b54      	ldr	r3, [pc, #336]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	4950      	ldr	r1, [pc, #320]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d015      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099e8:	4b4b      	ldr	r3, [pc, #300]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	4948      	ldr	r1, [pc, #288]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a06:	d105      	bne.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a08:	4b43      	ldr	r3, [pc, #268]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	4a42      	ldr	r2, [pc, #264]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d015      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009a20:	4b3d      	ldr	r3, [pc, #244]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2e:	493a      	ldr	r1, [pc, #232]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a3e:	d105      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a40:	4b35      	ldr	r3, [pc, #212]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	4a34      	ldr	r2, [pc, #208]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d015      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a58:	4b2f      	ldr	r3, [pc, #188]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	492c      	ldr	r1, [pc, #176]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a76:	d105      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a78:	4b27      	ldr	r3, [pc, #156]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4a26      	ldr	r2, [pc, #152]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d015      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a90:	4b21      	ldr	r3, [pc, #132]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	491e      	ldr	r1, [pc, #120]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009aae:	d105      	bne.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ab0:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	4a18      	ldr	r2, [pc, #96]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d015      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ac8:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	4910      	ldr	r1, [pc, #64]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ae6:	d105      	bne.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ae8:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	4a0a      	ldr	r2, [pc, #40]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009af2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d018      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009b00:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0e:	4902      	ldr	r1, [pc, #8]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009b16:	e001      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009b18:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b24:	d105      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009b26:	4b21      	ldr	r3, [pc, #132]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	4a20      	ldr	r2, [pc, #128]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b30:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d015      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009b3e:	4b1b      	ldr	r3, [pc, #108]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b44:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b4c:	4917      	ldr	r1, [pc, #92]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5c:	d105      	bne.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	4a12      	ldr	r2, [pc, #72]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b68:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d015      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b76:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b84:	4909      	ldr	r1, [pc, #36]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b94:	d105      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	4a04      	ldr	r2, [pc, #16]	; (8009bac <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ba0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009ba2:	7cbb      	ldrb	r3, [r7, #18]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40021000 	.word	0x40021000

08009bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e09d      	b.n	8009cfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d108      	bne.n	8009bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bd2:	d009      	beq.n	8009be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	61da      	str	r2, [r3, #28]
 8009bda:	e005      	b.n	8009be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d106      	bne.n	8009c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7fb faec 	bl	80051e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c28:	d902      	bls.n	8009c30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	e002      	b.n	8009c36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009c3e:	d007      	beq.n	8009c50 <HAL_SPI_Init+0xa0>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c48:	d002      	beq.n	8009c50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009c60:	431a      	orrs	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	431a      	orrs	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c88:	431a      	orrs	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c92:	ea42 0103 	orr.w	r1, r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	0c1b      	lsrs	r3, r3, #16
 8009cac:	f003 0204 	and.w	r2, r3, #4
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbe:	f003 0308 	and.w	r3, r3, #8
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009ccc:	ea42 0103 	orr.w	r1, r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69da      	ldr	r2, [r3, #28]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b08a      	sub	sp, #40	; 0x28
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d14:	2301      	movs	r3, #1
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_SPI_TransmitReceive+0x26>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e1fb      	b.n	800a124 <HAL_SPI_TransmitReceive+0x41e>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d34:	f7fb ffc6 	bl	8005cc4 <HAL_GetTick>
 8009d38:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d40:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009d48:	887b      	ldrh	r3, [r7, #2]
 8009d4a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009d4c:	887b      	ldrh	r3, [r7, #2]
 8009d4e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d50:	7efb      	ldrb	r3, [r7, #27]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d00e      	beq.n	8009d74 <HAL_SPI_TransmitReceive+0x6e>
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d5c:	d106      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x66>
 8009d66:	7efb      	ldrb	r3, [r7, #27]
 8009d68:	2b04      	cmp	r3, #4
 8009d6a:	d003      	beq.n	8009d74 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009d72:	e1cd      	b.n	800a110 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d005      	beq.n	8009d86 <HAL_SPI_TransmitReceive+0x80>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <HAL_SPI_TransmitReceive+0x80>
 8009d80:	887b      	ldrh	r3, [r7, #2]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d103      	bne.n	8009d8e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009d8c:	e1c0      	b.n	800a110 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d003      	beq.n	8009da2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2205      	movs	r2, #5
 8009d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	887a      	ldrh	r2, [r7, #2]
 8009db2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	887a      	ldrh	r2, [r7, #2]
 8009dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	887a      	ldrh	r2, [r7, #2]
 8009dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	887a      	ldrh	r2, [r7, #2]
 8009dce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009de4:	d802      	bhi.n	8009dec <HAL_SPI_TransmitReceive+0xe6>
 8009de6:	8a3b      	ldrh	r3, [r7, #16]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d908      	bls.n	8009dfe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dfa:	605a      	str	r2, [r3, #4]
 8009dfc:	e007      	b.n	8009e0e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e18:	2b40      	cmp	r3, #64	; 0x40
 8009e1a:	d007      	beq.n	8009e2c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e34:	d97c      	bls.n	8009f30 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <HAL_SPI_TransmitReceive+0x13e>
 8009e3e:	8a7b      	ldrh	r3, [r7, #18]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d169      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e48:	881a      	ldrh	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	1c9a      	adds	r2, r3, #2
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e68:	e056      	b.n	8009f18 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f003 0302 	and.w	r3, r3, #2
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d11b      	bne.n	8009eb0 <HAL_SPI_TransmitReceive+0x1aa>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d016      	beq.n	8009eb0 <HAL_SPI_TransmitReceive+0x1aa>
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d113      	bne.n	8009eb0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8c:	881a      	ldrh	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	1c9a      	adds	r2, r3, #2
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d11c      	bne.n	8009ef8 <HAL_SPI_TransmitReceive+0x1f2>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d016      	beq.n	8009ef8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	b292      	uxth	r2, r2
 8009ed6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009edc:	1c9a      	adds	r2, r3, #2
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	3b01      	subs	r3, #1
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ef8:	f7fb fee4 	bl	8005cc4 <HAL_GetTick>
 8009efc:	4602      	mov	r2, r0
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d807      	bhi.n	8009f18 <HAL_SPI_TransmitReceive+0x212>
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0e:	d003      	beq.n	8009f18 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009f16:	e0fb      	b.n	800a110 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1a3      	bne.n	8009e6a <HAL_SPI_TransmitReceive+0x164>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d19d      	bne.n	8009e6a <HAL_SPI_TransmitReceive+0x164>
 8009f2e:	e0df      	b.n	800a0f0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <HAL_SPI_TransmitReceive+0x23a>
 8009f38:	8a7b      	ldrh	r3, [r7, #18]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	f040 80cb 	bne.w	800a0d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d912      	bls.n	8009f70 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	881a      	ldrh	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5a:	1c9a      	adds	r2, r3, #2
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b02      	subs	r3, #2
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f6e:	e0b2      	b.n	800a0d6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	330c      	adds	r3, #12
 8009f7a:	7812      	ldrb	r2, [r2, #0]
 8009f7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f96:	e09e      	b.n	800a0d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 0302 	and.w	r3, r3, #2
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d134      	bne.n	800a010 <HAL_SPI_TransmitReceive+0x30a>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d02f      	beq.n	800a010 <HAL_SPI_TransmitReceive+0x30a>
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d12c      	bne.n	800a010 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d912      	bls.n	8009fe6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	881a      	ldrh	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	1c9a      	adds	r2, r3, #2
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	3b02      	subs	r3, #2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fe4:	e012      	b.n	800a00c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	330c      	adds	r3, #12
 8009ff0:	7812      	ldrb	r2, [r2, #0]
 8009ff2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a002:	b29b      	uxth	r3, r3
 800a004:	3b01      	subs	r3, #1
 800a006:	b29a      	uxth	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d148      	bne.n	800a0b0 <HAL_SPI_TransmitReceive+0x3aa>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a024:	b29b      	uxth	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d042      	beq.n	800a0b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a030:	b29b      	uxth	r3, r3
 800a032:	2b01      	cmp	r3, #1
 800a034:	d923      	bls.n	800a07e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	b292      	uxth	r2, r2
 800a042:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a048:	1c9a      	adds	r2, r3, #2
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a054:	b29b      	uxth	r3, r3
 800a056:	3b02      	subs	r3, #2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a066:	b29b      	uxth	r3, r3
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d81f      	bhi.n	800a0ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a07a:	605a      	str	r2, [r3, #4]
 800a07c:	e016      	b.n	800a0ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f103 020c 	add.w	r2, r3, #12
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	7812      	ldrb	r2, [r2, #0]
 800a08c:	b2d2      	uxtb	r2, r2
 800a08e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0b0:	f7fb fe08 	bl	8005cc4 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d803      	bhi.n	800a0c8 <HAL_SPI_TransmitReceive+0x3c2>
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c6:	d102      	bne.n	800a0ce <HAL_SPI_TransmitReceive+0x3c8>
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a0d4:	e01c      	b.n	800a110 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f47f af5b 	bne.w	8009f98 <HAL_SPI_TransmitReceive+0x292>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f47f af54 	bne.w	8009f98 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a0f0:	69fa      	ldr	r2, [r7, #28]
 800a0f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 f933 	bl	800a360 <SPI_EndRxTxTransaction>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d006      	beq.n	800a10e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2220      	movs	r2, #32
 800a10a:	661a      	str	r2, [r3, #96]	; 0x60
 800a10c:	e000      	b.n	800a110 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a10e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a124:	4618      	mov	r0, r3
 800a126:	3728      	adds	r7, #40	; 0x28
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b088      	sub	sp, #32
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	4613      	mov	r3, r2
 800a13a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a13c:	f7fb fdc2 	bl	8005cc4 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4413      	add	r3, r2
 800a14a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a14c:	f7fb fdba 	bl	8005cc4 <HAL_GetTick>
 800a150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a152:	4b39      	ldr	r3, [pc, #228]	; (800a238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	015b      	lsls	r3, r3, #5
 800a158:	0d1b      	lsrs	r3, r3, #20
 800a15a:	69fa      	ldr	r2, [r7, #28]
 800a15c:	fb02 f303 	mul.w	r3, r2, r3
 800a160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a162:	e054      	b.n	800a20e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16a:	d050      	beq.n	800a20e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a16c:	f7fb fdaa 	bl	8005cc4 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	69fa      	ldr	r2, [r7, #28]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d902      	bls.n	800a182 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d13d      	bne.n	800a1fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a19a:	d111      	bne.n	800a1c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1a4:	d004      	beq.n	800a1b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ae:	d107      	bne.n	800a1c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c8:	d10f      	bne.n	800a1ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e017      	b.n	800a22e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	689a      	ldr	r2, [r3, #8]
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	4013      	ands	r3, r2
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	bf0c      	ite	eq
 800a21e:	2301      	moveq	r3, #1
 800a220:	2300      	movne	r3, #0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	461a      	mov	r2, r3
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d19b      	bne.n	800a164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000000 	.word	0x20000000

0800a23c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a24a:	f7fb fd3b 	bl	8005cc4 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	4413      	add	r3, r2
 800a258:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a25a:	f7fb fd33 	bl	8005cc4 <HAL_GetTick>
 800a25e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a260:	4b3e      	ldr	r3, [pc, #248]	; (800a35c <SPI_WaitFifoStateUntilTimeout+0x120>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	00da      	lsls	r2, r3, #3
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	0d1b      	lsrs	r3, r3, #20
 800a270:	69fa      	ldr	r2, [r7, #28]
 800a272:	fb02 f303 	mul.w	r3, r2, r3
 800a276:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800a278:	e062      	b.n	800a340 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a280:	d109      	bne.n	800a296 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	330c      	adds	r3, #12
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	b2db      	uxtb	r3, r3
 800a292:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800a294:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d050      	beq.n	800a340 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a29e:	f7fb fd11 	bl	8005cc4 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	69fa      	ldr	r2, [r7, #28]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d902      	bls.n	800a2b4 <SPI_WaitFifoStateUntilTimeout+0x78>
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d13d      	bne.n	800a330 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a2c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2cc:	d111      	bne.n	800a2f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2d6:	d004      	beq.n	800a2e2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2e0:	d107      	bne.n	800a2f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2fa:	d10f      	bne.n	800a31c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a31a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e010      	b.n	800a352 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	4013      	ands	r3, r2
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d194      	bne.n	800a27a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3720      	adds	r7, #32
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20000000 	.word	0x20000000

0800a360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7ff ff5f 	bl	800a23c <SPI_WaitFifoStateUntilTimeout>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d007      	beq.n	800a394 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a388:	f043 0220 	orr.w	r2, r3, #32
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e027      	b.n	800a3e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2200      	movs	r2, #0
 800a39c:	2180      	movs	r1, #128	; 0x80
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7ff fec4 	bl	800a12c <SPI_WaitFlagStateUntilTimeout>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d007      	beq.n	800a3ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ae:	f043 0220 	orr.w	r2, r3, #32
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e014      	b.n	800a3e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff ff38 	bl	800a23c <SPI_WaitFifoStateUntilTimeout>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d007      	beq.n	800a3e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3d6:	f043 0220 	orr.w	r2, r3, #32
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e000      	b.n	800a3e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e049      	b.n	800a492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7fb fab0 	bl	8005978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3304      	adds	r3, #4
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	f000 fecc 	bl	800b1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
	...

0800a49c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d001      	beq.n	800a4b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e054      	b.n	800a55e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68da      	ldr	r2, [r3, #12]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0201 	orr.w	r2, r2, #1
 800a4ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a26      	ldr	r2, [pc, #152]	; (800a56c <HAL_TIM_Base_Start_IT+0xd0>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d022      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x80>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4de:	d01d      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x80>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a22      	ldr	r2, [pc, #136]	; (800a570 <HAL_TIM_Base_Start_IT+0xd4>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d018      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x80>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a21      	ldr	r2, [pc, #132]	; (800a574 <HAL_TIM_Base_Start_IT+0xd8>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d013      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x80>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a1f      	ldr	r2, [pc, #124]	; (800a578 <HAL_TIM_Base_Start_IT+0xdc>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d00e      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x80>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a1e      	ldr	r2, [pc, #120]	; (800a57c <HAL_TIM_Base_Start_IT+0xe0>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d009      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x80>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a1c      	ldr	r2, [pc, #112]	; (800a580 <HAL_TIM_Base_Start_IT+0xe4>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d004      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x80>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a1b      	ldr	r2, [pc, #108]	; (800a584 <HAL_TIM_Base_Start_IT+0xe8>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d115      	bne.n	800a548 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	4b19      	ldr	r3, [pc, #100]	; (800a588 <HAL_TIM_Base_Start_IT+0xec>)
 800a524:	4013      	ands	r3, r2
 800a526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b06      	cmp	r3, #6
 800a52c:	d015      	beq.n	800a55a <HAL_TIM_Base_Start_IT+0xbe>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a534:	d011      	beq.n	800a55a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f042 0201 	orr.w	r2, r2, #1
 800a544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a546:	e008      	b.n	800a55a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f042 0201 	orr.w	r2, r2, #1
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	e000      	b.n	800a55c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a55a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	40012c00 	.word	0x40012c00
 800a570:	40000400 	.word	0x40000400
 800a574:	40000800 	.word	0x40000800
 800a578:	40000c00 	.word	0x40000c00
 800a57c:	40013400 	.word	0x40013400
 800a580:	40014000 	.word	0x40014000
 800a584:	40015000 	.word	0x40015000
 800a588:	00010007 	.word	0x00010007

0800a58c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e049      	b.n	800a632 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f841 	bl	800a63a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f000 fdfc 	bl	800b1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a642:	bf00      	nop
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e049      	b.n	800a6f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f841 	bl	800a6fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2202      	movs	r2, #2
 800a67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3304      	adds	r3, #4
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f000 fd9b 	bl	800b1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d109      	bne.n	800a734 <HAL_TIM_PWM_Start+0x24>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b01      	cmp	r3, #1
 800a72a:	bf14      	ite	ne
 800a72c:	2301      	movne	r3, #1
 800a72e:	2300      	moveq	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	e03c      	b.n	800a7ae <HAL_TIM_PWM_Start+0x9e>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2b04      	cmp	r3, #4
 800a738:	d109      	bne.n	800a74e <HAL_TIM_PWM_Start+0x3e>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b01      	cmp	r3, #1
 800a744:	bf14      	ite	ne
 800a746:	2301      	movne	r3, #1
 800a748:	2300      	moveq	r3, #0
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	e02f      	b.n	800a7ae <HAL_TIM_PWM_Start+0x9e>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b08      	cmp	r3, #8
 800a752:	d109      	bne.n	800a768 <HAL_TIM_PWM_Start+0x58>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	bf14      	ite	ne
 800a760:	2301      	movne	r3, #1
 800a762:	2300      	moveq	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	e022      	b.n	800a7ae <HAL_TIM_PWM_Start+0x9e>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2b0c      	cmp	r3, #12
 800a76c:	d109      	bne.n	800a782 <HAL_TIM_PWM_Start+0x72>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b01      	cmp	r3, #1
 800a778:	bf14      	ite	ne
 800a77a:	2301      	movne	r3, #1
 800a77c:	2300      	moveq	r3, #0
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	e015      	b.n	800a7ae <HAL_TIM_PWM_Start+0x9e>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b10      	cmp	r3, #16
 800a786:	d109      	bne.n	800a79c <HAL_TIM_PWM_Start+0x8c>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b01      	cmp	r3, #1
 800a792:	bf14      	ite	ne
 800a794:	2301      	movne	r3, #1
 800a796:	2300      	moveq	r3, #0
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	e008      	b.n	800a7ae <HAL_TIM_PWM_Start+0x9e>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	bf14      	ite	ne
 800a7a8:	2301      	movne	r3, #1
 800a7aa:	2300      	moveq	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e0a6      	b.n	800a904 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d104      	bne.n	800a7c6 <HAL_TIM_PWM_Start+0xb6>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7c4:	e023      	b.n	800a80e <HAL_TIM_PWM_Start+0xfe>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d104      	bne.n	800a7d6 <HAL_TIM_PWM_Start+0xc6>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7d4:	e01b      	b.n	800a80e <HAL_TIM_PWM_Start+0xfe>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b08      	cmp	r3, #8
 800a7da:	d104      	bne.n	800a7e6 <HAL_TIM_PWM_Start+0xd6>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7e4:	e013      	b.n	800a80e <HAL_TIM_PWM_Start+0xfe>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b0c      	cmp	r3, #12
 800a7ea:	d104      	bne.n	800a7f6 <HAL_TIM_PWM_Start+0xe6>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7f4:	e00b      	b.n	800a80e <HAL_TIM_PWM_Start+0xfe>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	d104      	bne.n	800a806 <HAL_TIM_PWM_Start+0xf6>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a804:	e003      	b.n	800a80e <HAL_TIM_PWM_Start+0xfe>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2202      	movs	r2, #2
 800a80a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2201      	movs	r2, #1
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	4618      	mov	r0, r3
 800a818:	f001 f944 	bl	800baa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a3a      	ldr	r2, [pc, #232]	; (800a90c <HAL_TIM_PWM_Start+0x1fc>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d018      	beq.n	800a858 <HAL_TIM_PWM_Start+0x148>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a39      	ldr	r2, [pc, #228]	; (800a910 <HAL_TIM_PWM_Start+0x200>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d013      	beq.n	800a858 <HAL_TIM_PWM_Start+0x148>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a37      	ldr	r2, [pc, #220]	; (800a914 <HAL_TIM_PWM_Start+0x204>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d00e      	beq.n	800a858 <HAL_TIM_PWM_Start+0x148>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a36      	ldr	r2, [pc, #216]	; (800a918 <HAL_TIM_PWM_Start+0x208>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d009      	beq.n	800a858 <HAL_TIM_PWM_Start+0x148>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a34      	ldr	r2, [pc, #208]	; (800a91c <HAL_TIM_PWM_Start+0x20c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d004      	beq.n	800a858 <HAL_TIM_PWM_Start+0x148>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a33      	ldr	r2, [pc, #204]	; (800a920 <HAL_TIM_PWM_Start+0x210>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d101      	bne.n	800a85c <HAL_TIM_PWM_Start+0x14c>
 800a858:	2301      	movs	r3, #1
 800a85a:	e000      	b.n	800a85e <HAL_TIM_PWM_Start+0x14e>
 800a85c:	2300      	movs	r3, #0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d007      	beq.n	800a872 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a25      	ldr	r2, [pc, #148]	; (800a90c <HAL_TIM_PWM_Start+0x1fc>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d022      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x1b2>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a884:	d01d      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x1b2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a26      	ldr	r2, [pc, #152]	; (800a924 <HAL_TIM_PWM_Start+0x214>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d018      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x1b2>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a24      	ldr	r2, [pc, #144]	; (800a928 <HAL_TIM_PWM_Start+0x218>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d013      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x1b2>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a23      	ldr	r2, [pc, #140]	; (800a92c <HAL_TIM_PWM_Start+0x21c>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d00e      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x1b2>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a19      	ldr	r2, [pc, #100]	; (800a910 <HAL_TIM_PWM_Start+0x200>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d009      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x1b2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a18      	ldr	r2, [pc, #96]	; (800a914 <HAL_TIM_PWM_Start+0x204>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d004      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x1b2>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a18      	ldr	r2, [pc, #96]	; (800a920 <HAL_TIM_PWM_Start+0x210>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d115      	bne.n	800a8ee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	4b19      	ldr	r3, [pc, #100]	; (800a930 <HAL_TIM_PWM_Start+0x220>)
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b06      	cmp	r3, #6
 800a8d2:	d015      	beq.n	800a900 <HAL_TIM_PWM_Start+0x1f0>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8da:	d011      	beq.n	800a900 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 0201 	orr.w	r2, r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ec:	e008      	b.n	800a900 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f042 0201 	orr.w	r2, r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e000      	b.n	800a902 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a900:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	40012c00 	.word	0x40012c00
 800a910:	40013400 	.word	0x40013400
 800a914:	40014000 	.word	0x40014000
 800a918:	40014400 	.word	0x40014400
 800a91c:	40014800 	.word	0x40014800
 800a920:	40015000 	.word	0x40015000
 800a924:	40000400 	.word	0x40000400
 800a928:	40000800 	.word	0x40000800
 800a92c:	40000c00 	.word	0x40000c00
 800a930:	00010007 	.word	0x00010007

0800a934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b02      	cmp	r3, #2
 800a948:	d122      	bne.n	800a990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b02      	cmp	r3, #2
 800a956:	d11b      	bne.n	800a990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f06f 0202 	mvn.w	r2, #2
 800a960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	f003 0303 	and.w	r3, r3, #3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fc08 	bl	800b18c <HAL_TIM_IC_CaptureCallback>
 800a97c:	e005      	b.n	800a98a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fbfa 	bl	800b178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fc0b 	bl	800b1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 0304 	and.w	r3, r3, #4
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d122      	bne.n	800a9e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d11b      	bne.n	800a9e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f06f 0204 	mvn.w	r2, #4
 800a9b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d003      	beq.n	800a9d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fbde 	bl	800b18c <HAL_TIM_IC_CaptureCallback>
 800a9d0:	e005      	b.n	800a9de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fbd0 	bl	800b178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fbe1 	bl	800b1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b08      	cmp	r3, #8
 800a9f0:	d122      	bne.n	800aa38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f003 0308 	and.w	r3, r3, #8
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d11b      	bne.n	800aa38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f06f 0208 	mvn.w	r2, #8
 800aa08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fbb4 	bl	800b18c <HAL_TIM_IC_CaptureCallback>
 800aa24:	e005      	b.n	800aa32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fba6 	bl	800b178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fbb7 	bl	800b1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	f003 0310 	and.w	r3, r3, #16
 800aa42:	2b10      	cmp	r3, #16
 800aa44:	d122      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b10      	cmp	r3, #16
 800aa52:	d11b      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f06f 0210 	mvn.w	r2, #16
 800aa5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2208      	movs	r2, #8
 800aa62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fb8a 	bl	800b18c <HAL_TIM_IC_CaptureCallback>
 800aa78:	e005      	b.n	800aa86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fb7c 	bl	800b178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fb8d 	bl	800b1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d10e      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d107      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f06f 0201 	mvn.w	r2, #1
 800aab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fb56 	bl	800b164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac2:	2b80      	cmp	r3, #128	; 0x80
 800aac4:	d10e      	bne.n	800aae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d107      	bne.n	800aae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aadc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 f958 	bl	800bd94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaf2:	d10e      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafe:	2b80      	cmp	r3, #128	; 0x80
 800ab00:	d107      	bne.n	800ab12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 f94b 	bl	800bda8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1c:	2b40      	cmp	r3, #64	; 0x40
 800ab1e:	d10e      	bne.n	800ab3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2a:	2b40      	cmp	r3, #64	; 0x40
 800ab2c:	d107      	bne.n	800ab3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fb3b 	bl	800b1b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b20      	cmp	r3, #32
 800ab4a:	d10e      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f003 0320 	and.w	r3, r3, #32
 800ab56:	2b20      	cmp	r3, #32
 800ab58:	d107      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f06f 0220 	mvn.w	r2, #32
 800ab62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 f90b 	bl	800bd80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab78:	d10f      	bne.n	800ab9a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab88:	d107      	bne.n	800ab9a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ab92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 f911 	bl	800bdbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aba8:	d10f      	bne.n	800abca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abb8:	d107      	bne.n	800abca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800abc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 f903 	bl	800bdd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abd8:	d10f      	bne.n	800abfa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abe8:	d107      	bne.n	800abfa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800abf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f001 f8f5 	bl	800bde4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac08:	d10f      	bne.n	800ac2a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac18:	d107      	bne.n	800ac2a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ac22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f001 f8e7 	bl	800bdf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d101      	bne.n	800ac4e <HAL_TIM_OC_ConfigChannel+0x1a>
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e064      	b.n	800ad18 <HAL_TIM_OC_ConfigChannel+0xe4>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b14      	cmp	r3, #20
 800ac5a:	d857      	bhi.n	800ad0c <HAL_TIM_OC_ConfigChannel+0xd8>
 800ac5c:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <HAL_TIM_OC_ConfigChannel+0x30>)
 800ac5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac62:	bf00      	nop
 800ac64:	0800acb9 	.word	0x0800acb9
 800ac68:	0800ad0d 	.word	0x0800ad0d
 800ac6c:	0800ad0d 	.word	0x0800ad0d
 800ac70:	0800ad0d 	.word	0x0800ad0d
 800ac74:	0800acc7 	.word	0x0800acc7
 800ac78:	0800ad0d 	.word	0x0800ad0d
 800ac7c:	0800ad0d 	.word	0x0800ad0d
 800ac80:	0800ad0d 	.word	0x0800ad0d
 800ac84:	0800acd5 	.word	0x0800acd5
 800ac88:	0800ad0d 	.word	0x0800ad0d
 800ac8c:	0800ad0d 	.word	0x0800ad0d
 800ac90:	0800ad0d 	.word	0x0800ad0d
 800ac94:	0800ace3 	.word	0x0800ace3
 800ac98:	0800ad0d 	.word	0x0800ad0d
 800ac9c:	0800ad0d 	.word	0x0800ad0d
 800aca0:	0800ad0d 	.word	0x0800ad0d
 800aca4:	0800acf1 	.word	0x0800acf1
 800aca8:	0800ad0d 	.word	0x0800ad0d
 800acac:	0800ad0d 	.word	0x0800ad0d
 800acb0:	0800ad0d 	.word	0x0800ad0d
 800acb4:	0800acff 	.word	0x0800acff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68b9      	ldr	r1, [r7, #8]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 fb2a 	bl	800b318 <TIM_OC1_SetConfig>
      break;
 800acc4:	e023      	b.n	800ad0e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68b9      	ldr	r1, [r7, #8]
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fbbd 	bl	800b44c <TIM_OC2_SetConfig>
      break;
 800acd2:	e01c      	b.n	800ad0e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fc4a 	bl	800b574 <TIM_OC3_SetConfig>
      break;
 800ace0:	e015      	b.n	800ad0e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fcd5 	bl	800b698 <TIM_OC4_SetConfig>
      break;
 800acee:	e00e      	b.n	800ad0e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fd62 	bl	800b7c0 <TIM_OC5_SetConfig>
      break;
 800acfc:	e007      	b.n	800ad0e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fdc5 	bl	800b894 <TIM_OC6_SetConfig>
      break;
 800ad0a:	e000      	b.n	800ad0e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800ad0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d101      	bne.n	800ad3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ad36:	2302      	movs	r3, #2
 800ad38:	e0fd      	b.n	800af36 <HAL_TIM_PWM_ConfigChannel+0x216>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b14      	cmp	r3, #20
 800ad46:	f200 80f0 	bhi.w	800af2a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ad4a:	a201      	add	r2, pc, #4	; (adr r2, 800ad50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad50:	0800ada5 	.word	0x0800ada5
 800ad54:	0800af2b 	.word	0x0800af2b
 800ad58:	0800af2b 	.word	0x0800af2b
 800ad5c:	0800af2b 	.word	0x0800af2b
 800ad60:	0800ade5 	.word	0x0800ade5
 800ad64:	0800af2b 	.word	0x0800af2b
 800ad68:	0800af2b 	.word	0x0800af2b
 800ad6c:	0800af2b 	.word	0x0800af2b
 800ad70:	0800ae27 	.word	0x0800ae27
 800ad74:	0800af2b 	.word	0x0800af2b
 800ad78:	0800af2b 	.word	0x0800af2b
 800ad7c:	0800af2b 	.word	0x0800af2b
 800ad80:	0800ae67 	.word	0x0800ae67
 800ad84:	0800af2b 	.word	0x0800af2b
 800ad88:	0800af2b 	.word	0x0800af2b
 800ad8c:	0800af2b 	.word	0x0800af2b
 800ad90:	0800aea9 	.word	0x0800aea9
 800ad94:	0800af2b 	.word	0x0800af2b
 800ad98:	0800af2b 	.word	0x0800af2b
 800ad9c:	0800af2b 	.word	0x0800af2b
 800ada0:	0800aee9 	.word	0x0800aee9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68b9      	ldr	r1, [r7, #8]
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 fab4 	bl	800b318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	699a      	ldr	r2, [r3, #24]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f042 0208 	orr.w	r2, r2, #8
 800adbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	699a      	ldr	r2, [r3, #24]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f022 0204 	bic.w	r2, r2, #4
 800adce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6999      	ldr	r1, [r3, #24]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	691a      	ldr	r2, [r3, #16]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	619a      	str	r2, [r3, #24]
      break;
 800ade2:	e0a3      	b.n	800af2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	4618      	mov	r0, r3
 800adec:	f000 fb2e 	bl	800b44c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	699a      	ldr	r2, [r3, #24]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	699a      	ldr	r2, [r3, #24]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6999      	ldr	r1, [r3, #24]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	021a      	lsls	r2, r3, #8
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	430a      	orrs	r2, r1
 800ae22:	619a      	str	r2, [r3, #24]
      break;
 800ae24:	e082      	b.n	800af2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 fba1 	bl	800b574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	69da      	ldr	r2, [r3, #28]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f042 0208 	orr.w	r2, r2, #8
 800ae40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	69da      	ldr	r2, [r3, #28]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 0204 	bic.w	r2, r2, #4
 800ae50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69d9      	ldr	r1, [r3, #28]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	691a      	ldr	r2, [r3, #16]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	430a      	orrs	r2, r1
 800ae62:	61da      	str	r2, [r3, #28]
      break;
 800ae64:	e062      	b.n	800af2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fc13 	bl	800b698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69da      	ldr	r2, [r3, #28]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69da      	ldr	r2, [r3, #28]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69d9      	ldr	r1, [r3, #28]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	021a      	lsls	r2, r3, #8
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	430a      	orrs	r2, r1
 800aea4:	61da      	str	r2, [r3, #28]
      break;
 800aea6:	e041      	b.n	800af2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 fc86 	bl	800b7c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f042 0208 	orr.w	r2, r2, #8
 800aec2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0204 	bic.w	r2, r2, #4
 800aed2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	691a      	ldr	r2, [r3, #16]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800aee6:	e021      	b.n	800af2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68b9      	ldr	r1, [r7, #8]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 fcd0 	bl	800b894 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	021a      	lsls	r2, r3, #8
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	430a      	orrs	r2, r1
 800af26:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800af28:	e000      	b.n	800af2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800af2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop

0800af40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af50:	2b01      	cmp	r3, #1
 800af52:	d101      	bne.n	800af58 <HAL_TIM_ConfigClockSource+0x18>
 800af54:	2302      	movs	r3, #2
 800af56:	e0f5      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x204>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800af76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800af7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a6e      	ldr	r2, [pc, #440]	; (800b14c <HAL_TIM_ConfigClockSource+0x20c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	f000 80c1 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800af98:	4a6c      	ldr	r2, [pc, #432]	; (800b14c <HAL_TIM_ConfigClockSource+0x20c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	f200 80c6 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800afa0:	4a6b      	ldr	r2, [pc, #428]	; (800b150 <HAL_TIM_ConfigClockSource+0x210>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	f000 80b9 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800afa8:	4a69      	ldr	r2, [pc, #420]	; (800b150 <HAL_TIM_ConfigClockSource+0x210>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	f200 80be 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800afb0:	4a68      	ldr	r2, [pc, #416]	; (800b154 <HAL_TIM_ConfigClockSource+0x214>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	f000 80b1 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800afb8:	4a66      	ldr	r2, [pc, #408]	; (800b154 <HAL_TIM_ConfigClockSource+0x214>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	f200 80b6 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800afc0:	4a65      	ldr	r2, [pc, #404]	; (800b158 <HAL_TIM_ConfigClockSource+0x218>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	f000 80a9 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800afc8:	4a63      	ldr	r2, [pc, #396]	; (800b158 <HAL_TIM_ConfigClockSource+0x218>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	f200 80ae 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800afd0:	4a62      	ldr	r2, [pc, #392]	; (800b15c <HAL_TIM_ConfigClockSource+0x21c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	f000 80a1 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800afd8:	4a60      	ldr	r2, [pc, #384]	; (800b15c <HAL_TIM_ConfigClockSource+0x21c>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	f200 80a6 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800afe0:	4a5f      	ldr	r2, [pc, #380]	; (800b160 <HAL_TIM_ConfigClockSource+0x220>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	f000 8099 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800afe8:	4a5d      	ldr	r2, [pc, #372]	; (800b160 <HAL_TIM_ConfigClockSource+0x220>)
 800afea:	4293      	cmp	r3, r2
 800afec:	f200 809e 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800aff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aff4:	f000 8091 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800aff8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800affc:	f200 8096 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b004:	f000 8089 	beq.w	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800b008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b00c:	f200 808e 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b014:	d03e      	beq.n	800b094 <HAL_TIM_ConfigClockSource+0x154>
 800b016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b01a:	f200 8087 	bhi.w	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b022:	f000 8085 	beq.w	800b130 <HAL_TIM_ConfigClockSource+0x1f0>
 800b026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b02a:	d87f      	bhi.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b02c:	2b70      	cmp	r3, #112	; 0x70
 800b02e:	d01a      	beq.n	800b066 <HAL_TIM_ConfigClockSource+0x126>
 800b030:	2b70      	cmp	r3, #112	; 0x70
 800b032:	d87b      	bhi.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b034:	2b60      	cmp	r3, #96	; 0x60
 800b036:	d050      	beq.n	800b0da <HAL_TIM_ConfigClockSource+0x19a>
 800b038:	2b60      	cmp	r3, #96	; 0x60
 800b03a:	d877      	bhi.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b03c:	2b50      	cmp	r3, #80	; 0x50
 800b03e:	d03c      	beq.n	800b0ba <HAL_TIM_ConfigClockSource+0x17a>
 800b040:	2b50      	cmp	r3, #80	; 0x50
 800b042:	d873      	bhi.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b044:	2b40      	cmp	r3, #64	; 0x40
 800b046:	d058      	beq.n	800b0fa <HAL_TIM_ConfigClockSource+0x1ba>
 800b048:	2b40      	cmp	r3, #64	; 0x40
 800b04a:	d86f      	bhi.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b04c:	2b30      	cmp	r3, #48	; 0x30
 800b04e:	d064      	beq.n	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800b050:	2b30      	cmp	r3, #48	; 0x30
 800b052:	d86b      	bhi.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b054:	2b20      	cmp	r3, #32
 800b056:	d060      	beq.n	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800b058:	2b20      	cmp	r3, #32
 800b05a:	d867      	bhi.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d05c      	beq.n	800b11a <HAL_TIM_ConfigClockSource+0x1da>
 800b060:	2b10      	cmp	r3, #16
 800b062:	d05a      	beq.n	800b11a <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b064:	e062      	b.n	800b12c <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	6899      	ldr	r1, [r3, #8]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	f000 fcf5 	bl	800ba64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b088:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	609a      	str	r2, [r3, #8]
      break;
 800b092:	e04e      	b.n	800b132 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6818      	ldr	r0, [r3, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	6899      	ldr	r1, [r3, #8]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	f000 fcde 	bl	800ba64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689a      	ldr	r2, [r3, #8]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0b6:	609a      	str	r2, [r3, #8]
      break;
 800b0b8:	e03b      	b.n	800b132 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6818      	ldr	r0, [r3, #0]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	6859      	ldr	r1, [r3, #4]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f000 fc50 	bl	800b96c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2150      	movs	r1, #80	; 0x50
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fca9 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b0d8:	e02b      	b.n	800b132 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	6859      	ldr	r1, [r3, #4]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f000 fc6f 	bl	800b9ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2160      	movs	r1, #96	; 0x60
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fc99 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b0f8:	e01b      	b.n	800b132 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	6859      	ldr	r1, [r3, #4]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	461a      	mov	r2, r3
 800b108:	f000 fc30 	bl	800b96c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2140      	movs	r1, #64	; 0x40
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fc89 	bl	800ba2a <TIM_ITRx_SetConfig>
      break;
 800b118:	e00b      	b.n	800b132 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4619      	mov	r1, r3
 800b124:	4610      	mov	r0, r2
 800b126:	f000 fc80 	bl	800ba2a <TIM_ITRx_SetConfig>
        break;
 800b12a:	e002      	b.n	800b132 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b12c:	bf00      	nop
 800b12e:	e000      	b.n	800b132 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b130:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	00100070 	.word	0x00100070
 800b150:	00100060 	.word	0x00100060
 800b154:	00100050 	.word	0x00100050
 800b158:	00100040 	.word	0x00100040
 800b15c:	00100030 	.word	0x00100030
 800b160:	00100020 	.word	0x00100020

0800b164 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a46      	ldr	r2, [pc, #280]	; (800b2f4 <TIM_Base_SetConfig+0x12c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d017      	beq.n	800b210 <TIM_Base_SetConfig+0x48>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e6:	d013      	beq.n	800b210 <TIM_Base_SetConfig+0x48>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a43      	ldr	r2, [pc, #268]	; (800b2f8 <TIM_Base_SetConfig+0x130>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d00f      	beq.n	800b210 <TIM_Base_SetConfig+0x48>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a42      	ldr	r2, [pc, #264]	; (800b2fc <TIM_Base_SetConfig+0x134>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d00b      	beq.n	800b210 <TIM_Base_SetConfig+0x48>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a41      	ldr	r2, [pc, #260]	; (800b300 <TIM_Base_SetConfig+0x138>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d007      	beq.n	800b210 <TIM_Base_SetConfig+0x48>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a40      	ldr	r2, [pc, #256]	; (800b304 <TIM_Base_SetConfig+0x13c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d003      	beq.n	800b210 <TIM_Base_SetConfig+0x48>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a3f      	ldr	r2, [pc, #252]	; (800b308 <TIM_Base_SetConfig+0x140>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d108      	bne.n	800b222 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a33      	ldr	r2, [pc, #204]	; (800b2f4 <TIM_Base_SetConfig+0x12c>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d023      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b230:	d01f      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a30      	ldr	r2, [pc, #192]	; (800b2f8 <TIM_Base_SetConfig+0x130>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d01b      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a2f      	ldr	r2, [pc, #188]	; (800b2fc <TIM_Base_SetConfig+0x134>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d017      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a2e      	ldr	r2, [pc, #184]	; (800b300 <TIM_Base_SetConfig+0x138>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d013      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a2d      	ldr	r2, [pc, #180]	; (800b304 <TIM_Base_SetConfig+0x13c>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d00f      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a2d      	ldr	r2, [pc, #180]	; (800b30c <TIM_Base_SetConfig+0x144>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00b      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a2c      	ldr	r2, [pc, #176]	; (800b310 <TIM_Base_SetConfig+0x148>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d007      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a2b      	ldr	r2, [pc, #172]	; (800b314 <TIM_Base_SetConfig+0x14c>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d003      	beq.n	800b272 <TIM_Base_SetConfig+0xaa>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a26      	ldr	r2, [pc, #152]	; (800b308 <TIM_Base_SetConfig+0x140>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d108      	bne.n	800b284 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	4313      	orrs	r3, r2
 800b282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	4313      	orrs	r3, r2
 800b290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a12      	ldr	r2, [pc, #72]	; (800b2f4 <TIM_Base_SetConfig+0x12c>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d013      	beq.n	800b2d8 <TIM_Base_SetConfig+0x110>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a14      	ldr	r2, [pc, #80]	; (800b304 <TIM_Base_SetConfig+0x13c>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d00f      	beq.n	800b2d8 <TIM_Base_SetConfig+0x110>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a14      	ldr	r2, [pc, #80]	; (800b30c <TIM_Base_SetConfig+0x144>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d00b      	beq.n	800b2d8 <TIM_Base_SetConfig+0x110>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a13      	ldr	r2, [pc, #76]	; (800b310 <TIM_Base_SetConfig+0x148>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d007      	beq.n	800b2d8 <TIM_Base_SetConfig+0x110>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a12      	ldr	r2, [pc, #72]	; (800b314 <TIM_Base_SetConfig+0x14c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d003      	beq.n	800b2d8 <TIM_Base_SetConfig+0x110>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a0d      	ldr	r2, [pc, #52]	; (800b308 <TIM_Base_SetConfig+0x140>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d103      	bne.n	800b2e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	691a      	ldr	r2, [r3, #16]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	615a      	str	r2, [r3, #20]
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	40012c00 	.word	0x40012c00
 800b2f8:	40000400 	.word	0x40000400
 800b2fc:	40000800 	.word	0x40000800
 800b300:	40000c00 	.word	0x40000c00
 800b304:	40013400 	.word	0x40013400
 800b308:	40015000 	.word	0x40015000
 800b30c:	40014000 	.word	0x40014000
 800b310:	40014400 	.word	0x40014400
 800b314:	40014800 	.word	0x40014800

0800b318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f023 0201 	bic.w	r2, r3, #1
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f023 0303 	bic.w	r3, r3, #3
 800b352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f023 0302 	bic.w	r3, r3, #2
 800b364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a30      	ldr	r2, [pc, #192]	; (800b434 <TIM_OC1_SetConfig+0x11c>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d013      	beq.n	800b3a0 <TIM_OC1_SetConfig+0x88>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a2f      	ldr	r2, [pc, #188]	; (800b438 <TIM_OC1_SetConfig+0x120>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d00f      	beq.n	800b3a0 <TIM_OC1_SetConfig+0x88>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a2e      	ldr	r2, [pc, #184]	; (800b43c <TIM_OC1_SetConfig+0x124>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d00b      	beq.n	800b3a0 <TIM_OC1_SetConfig+0x88>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a2d      	ldr	r2, [pc, #180]	; (800b440 <TIM_OC1_SetConfig+0x128>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d007      	beq.n	800b3a0 <TIM_OC1_SetConfig+0x88>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a2c      	ldr	r2, [pc, #176]	; (800b444 <TIM_OC1_SetConfig+0x12c>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d003      	beq.n	800b3a0 <TIM_OC1_SetConfig+0x88>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a2b      	ldr	r2, [pc, #172]	; (800b448 <TIM_OC1_SetConfig+0x130>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d10c      	bne.n	800b3ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f023 0308 	bic.w	r3, r3, #8
 800b3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f023 0304 	bic.w	r3, r3, #4
 800b3b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a1d      	ldr	r2, [pc, #116]	; (800b434 <TIM_OC1_SetConfig+0x11c>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d013      	beq.n	800b3ea <TIM_OC1_SetConfig+0xd2>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a1c      	ldr	r2, [pc, #112]	; (800b438 <TIM_OC1_SetConfig+0x120>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d00f      	beq.n	800b3ea <TIM_OC1_SetConfig+0xd2>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a1b      	ldr	r2, [pc, #108]	; (800b43c <TIM_OC1_SetConfig+0x124>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d00b      	beq.n	800b3ea <TIM_OC1_SetConfig+0xd2>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a1a      	ldr	r2, [pc, #104]	; (800b440 <TIM_OC1_SetConfig+0x128>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d007      	beq.n	800b3ea <TIM_OC1_SetConfig+0xd2>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a19      	ldr	r2, [pc, #100]	; (800b444 <TIM_OC1_SetConfig+0x12c>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d003      	beq.n	800b3ea <TIM_OC1_SetConfig+0xd2>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a18      	ldr	r2, [pc, #96]	; (800b448 <TIM_OC1_SetConfig+0x130>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d111      	bne.n	800b40e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	4313      	orrs	r3, r2
 800b402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	621a      	str	r2, [r3, #32]
}
 800b428:	bf00      	nop
 800b42a:	371c      	adds	r7, #28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	40012c00 	.word	0x40012c00
 800b438:	40013400 	.word	0x40013400
 800b43c:	40014000 	.word	0x40014000
 800b440:	40014400 	.word	0x40014400
 800b444:	40014800 	.word	0x40014800
 800b448:	40015000 	.word	0x40015000

0800b44c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	f023 0210 	bic.w	r2, r3, #16
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b47a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	021b      	lsls	r3, r3, #8
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	4313      	orrs	r3, r2
 800b492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f023 0320 	bic.w	r3, r3, #32
 800b49a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a2c      	ldr	r2, [pc, #176]	; (800b55c <TIM_OC2_SetConfig+0x110>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d007      	beq.n	800b4c0 <TIM_OC2_SetConfig+0x74>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a2b      	ldr	r2, [pc, #172]	; (800b560 <TIM_OC2_SetConfig+0x114>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d003      	beq.n	800b4c0 <TIM_OC2_SetConfig+0x74>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a2a      	ldr	r2, [pc, #168]	; (800b564 <TIM_OC2_SetConfig+0x118>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d10d      	bne.n	800b4dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	011b      	lsls	r3, r3, #4
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a1f      	ldr	r2, [pc, #124]	; (800b55c <TIM_OC2_SetConfig+0x110>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d013      	beq.n	800b50c <TIM_OC2_SetConfig+0xc0>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a1e      	ldr	r2, [pc, #120]	; (800b560 <TIM_OC2_SetConfig+0x114>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00f      	beq.n	800b50c <TIM_OC2_SetConfig+0xc0>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a1e      	ldr	r2, [pc, #120]	; (800b568 <TIM_OC2_SetConfig+0x11c>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d00b      	beq.n	800b50c <TIM_OC2_SetConfig+0xc0>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a1d      	ldr	r2, [pc, #116]	; (800b56c <TIM_OC2_SetConfig+0x120>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d007      	beq.n	800b50c <TIM_OC2_SetConfig+0xc0>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a1c      	ldr	r2, [pc, #112]	; (800b570 <TIM_OC2_SetConfig+0x124>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d003      	beq.n	800b50c <TIM_OC2_SetConfig+0xc0>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a17      	ldr	r2, [pc, #92]	; (800b564 <TIM_OC2_SetConfig+0x118>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d113      	bne.n	800b534 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b51a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	695b      	ldr	r3, [r3, #20]
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4313      	orrs	r3, r2
 800b526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	4313      	orrs	r3, r2
 800b532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	621a      	str	r2, [r3, #32]
}
 800b54e:	bf00      	nop
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40012c00 	.word	0x40012c00
 800b560:	40013400 	.word	0x40013400
 800b564:	40015000 	.word	0x40015000
 800b568:	40014000 	.word	0x40014000
 800b56c:	40014400 	.word	0x40014400
 800b570:	40014800 	.word	0x40014800

0800b574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b574:	b480      	push	{r7}
 800b576:	b087      	sub	sp, #28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f023 0303 	bic.w	r3, r3, #3
 800b5ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	021b      	lsls	r3, r3, #8
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a2b      	ldr	r2, [pc, #172]	; (800b680 <TIM_OC3_SetConfig+0x10c>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d007      	beq.n	800b5e6 <TIM_OC3_SetConfig+0x72>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a2a      	ldr	r2, [pc, #168]	; (800b684 <TIM_OC3_SetConfig+0x110>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d003      	beq.n	800b5e6 <TIM_OC3_SetConfig+0x72>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a29      	ldr	r2, [pc, #164]	; (800b688 <TIM_OC3_SetConfig+0x114>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d10d      	bne.n	800b602 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a1e      	ldr	r2, [pc, #120]	; (800b680 <TIM_OC3_SetConfig+0x10c>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d013      	beq.n	800b632 <TIM_OC3_SetConfig+0xbe>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a1d      	ldr	r2, [pc, #116]	; (800b684 <TIM_OC3_SetConfig+0x110>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d00f      	beq.n	800b632 <TIM_OC3_SetConfig+0xbe>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a1d      	ldr	r2, [pc, #116]	; (800b68c <TIM_OC3_SetConfig+0x118>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d00b      	beq.n	800b632 <TIM_OC3_SetConfig+0xbe>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1c      	ldr	r2, [pc, #112]	; (800b690 <TIM_OC3_SetConfig+0x11c>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d007      	beq.n	800b632 <TIM_OC3_SetConfig+0xbe>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a1b      	ldr	r2, [pc, #108]	; (800b694 <TIM_OC3_SetConfig+0x120>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d003      	beq.n	800b632 <TIM_OC3_SetConfig+0xbe>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a16      	ldr	r2, [pc, #88]	; (800b688 <TIM_OC3_SetConfig+0x114>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d113      	bne.n	800b65a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	011b      	lsls	r3, r3, #4
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	4313      	orrs	r3, r2
 800b658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	621a      	str	r2, [r3, #32]
}
 800b674:	bf00      	nop
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	40012c00 	.word	0x40012c00
 800b684:	40013400 	.word	0x40013400
 800b688:	40015000 	.word	0x40015000
 800b68c:	40014000 	.word	0x40014000
 800b690:	40014400 	.word	0x40014400
 800b694:	40014800 	.word	0x40014800

0800b698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b698:	b480      	push	{r7}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	021b      	lsls	r3, r3, #8
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	031b      	lsls	r3, r3, #12
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a2c      	ldr	r2, [pc, #176]	; (800b7a8 <TIM_OC4_SetConfig+0x110>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d007      	beq.n	800b70c <TIM_OC4_SetConfig+0x74>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a2b      	ldr	r2, [pc, #172]	; (800b7ac <TIM_OC4_SetConfig+0x114>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d003      	beq.n	800b70c <TIM_OC4_SetConfig+0x74>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a2a      	ldr	r2, [pc, #168]	; (800b7b0 <TIM_OC4_SetConfig+0x118>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d10d      	bne.n	800b728 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	031b      	lsls	r3, r3, #12
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a1f      	ldr	r2, [pc, #124]	; (800b7a8 <TIM_OC4_SetConfig+0x110>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d013      	beq.n	800b758 <TIM_OC4_SetConfig+0xc0>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a1e      	ldr	r2, [pc, #120]	; (800b7ac <TIM_OC4_SetConfig+0x114>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d00f      	beq.n	800b758 <TIM_OC4_SetConfig+0xc0>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a1e      	ldr	r2, [pc, #120]	; (800b7b4 <TIM_OC4_SetConfig+0x11c>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d00b      	beq.n	800b758 <TIM_OC4_SetConfig+0xc0>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a1d      	ldr	r2, [pc, #116]	; (800b7b8 <TIM_OC4_SetConfig+0x120>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d007      	beq.n	800b758 <TIM_OC4_SetConfig+0xc0>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a1c      	ldr	r2, [pc, #112]	; (800b7bc <TIM_OC4_SetConfig+0x124>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d003      	beq.n	800b758 <TIM_OC4_SetConfig+0xc0>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a17      	ldr	r2, [pc, #92]	; (800b7b0 <TIM_OC4_SetConfig+0x118>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d113      	bne.n	800b780 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b75e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b766:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	019b      	lsls	r3, r3, #6
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	4313      	orrs	r3, r2
 800b772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	019b      	lsls	r3, r3, #6
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	621a      	str	r2, [r3, #32]
}
 800b79a:	bf00      	nop
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	40012c00 	.word	0x40012c00
 800b7ac:	40013400 	.word	0x40013400
 800b7b0:	40015000 	.word	0x40015000
 800b7b4:	40014000 	.word	0x40014000
 800b7b8:	40014400 	.word	0x40014400
 800b7bc:	40014800 	.word	0x40014800

0800b7c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	041b      	lsls	r3, r3, #16
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a19      	ldr	r2, [pc, #100]	; (800b87c <TIM_OC5_SetConfig+0xbc>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d013      	beq.n	800b842 <TIM_OC5_SetConfig+0x82>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a18      	ldr	r2, [pc, #96]	; (800b880 <TIM_OC5_SetConfig+0xc0>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00f      	beq.n	800b842 <TIM_OC5_SetConfig+0x82>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a17      	ldr	r2, [pc, #92]	; (800b884 <TIM_OC5_SetConfig+0xc4>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00b      	beq.n	800b842 <TIM_OC5_SetConfig+0x82>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a16      	ldr	r2, [pc, #88]	; (800b888 <TIM_OC5_SetConfig+0xc8>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <TIM_OC5_SetConfig+0x82>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a15      	ldr	r2, [pc, #84]	; (800b88c <TIM_OC5_SetConfig+0xcc>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d003      	beq.n	800b842 <TIM_OC5_SetConfig+0x82>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a14      	ldr	r2, [pc, #80]	; (800b890 <TIM_OC5_SetConfig+0xd0>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d109      	bne.n	800b856 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	021b      	lsls	r3, r3, #8
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	4313      	orrs	r3, r2
 800b854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	621a      	str	r2, [r3, #32]
}
 800b870:	bf00      	nop
 800b872:	371c      	adds	r7, #28
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	40012c00 	.word	0x40012c00
 800b880:	40013400 	.word	0x40013400
 800b884:	40014000 	.word	0x40014000
 800b888:	40014400 	.word	0x40014400
 800b88c:	40014800 	.word	0x40014800
 800b890:	40015000 	.word	0x40015000

0800b894 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	021b      	lsls	r3, r3, #8
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	051b      	lsls	r3, r3, #20
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a1a      	ldr	r2, [pc, #104]	; (800b954 <TIM_OC6_SetConfig+0xc0>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d013      	beq.n	800b918 <TIM_OC6_SetConfig+0x84>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a19      	ldr	r2, [pc, #100]	; (800b958 <TIM_OC6_SetConfig+0xc4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00f      	beq.n	800b918 <TIM_OC6_SetConfig+0x84>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a18      	ldr	r2, [pc, #96]	; (800b95c <TIM_OC6_SetConfig+0xc8>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00b      	beq.n	800b918 <TIM_OC6_SetConfig+0x84>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a17      	ldr	r2, [pc, #92]	; (800b960 <TIM_OC6_SetConfig+0xcc>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d007      	beq.n	800b918 <TIM_OC6_SetConfig+0x84>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a16      	ldr	r2, [pc, #88]	; (800b964 <TIM_OC6_SetConfig+0xd0>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_OC6_SetConfig+0x84>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a15      	ldr	r2, [pc, #84]	; (800b968 <TIM_OC6_SetConfig+0xd4>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d109      	bne.n	800b92c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b91e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	029b      	lsls	r3, r3, #10
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	4313      	orrs	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	693a      	ldr	r2, [r7, #16]
 800b944:	621a      	str	r2, [r3, #32]
}
 800b946:	bf00      	nop
 800b948:	371c      	adds	r7, #28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	40012c00 	.word	0x40012c00
 800b958:	40013400 	.word	0x40013400
 800b95c:	40014000 	.word	0x40014000
 800b960:	40014400 	.word	0x40014400
 800b964:	40014800 	.word	0x40014800
 800b968:	40015000 	.word	0x40015000

0800b96c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	f023 0201 	bic.w	r2, r3, #1
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	011b      	lsls	r3, r3, #4
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f023 030a 	bic.w	r3, r3, #10
 800b9a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	621a      	str	r2, [r3, #32]
}
 800b9be:	bf00      	nop
 800b9c0:	371c      	adds	r7, #28
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b087      	sub	sp, #28
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	60b9      	str	r1, [r7, #8]
 800b9d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	f023 0210 	bic.w	r2, r3, #16
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	031b      	lsls	r3, r3, #12
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	011b      	lsls	r3, r3, #4
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	621a      	str	r2, [r3, #32]
}
 800ba1e:	bf00      	nop
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b085      	sub	sp, #20
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ba40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	f043 0307 	orr.w	r3, r3, #7
 800ba50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	609a      	str	r2, [r3, #8]
}
 800ba58:	bf00      	nop
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	021a      	lsls	r2, r3, #8
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	431a      	orrs	r2, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	609a      	str	r2, [r3, #8]
}
 800ba98:	bf00      	nop
 800ba9a:	371c      	adds	r7, #28
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f003 031f 	and.w	r3, r3, #31
 800bab6:	2201      	movs	r2, #1
 800bab8:	fa02 f303 	lsl.w	r3, r2, r3
 800babc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6a1a      	ldr	r2, [r3, #32]
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	43db      	mvns	r3, r3
 800bac6:	401a      	ands	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6a1a      	ldr	r2, [r3, #32]
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f003 031f 	and.w	r3, r3, #31
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	fa01 f303 	lsl.w	r3, r1, r3
 800badc:	431a      	orrs	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	621a      	str	r2, [r3, #32]
}
 800bae2:	bf00      	nop
 800bae4:	371c      	adds	r7, #28
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
	...

0800baf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d101      	bne.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb04:	2302      	movs	r3, #2
 800bb06:	e074      	b.n	800bbf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a34      	ldr	r2, [pc, #208]	; (800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d009      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a33      	ldr	r2, [pc, #204]	; (800bc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d004      	beq.n	800bb46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a31      	ldr	r2, [pc, #196]	; (800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d108      	bne.n	800bb58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bb5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a21      	ldr	r2, [pc, #132]	; (800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d022      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb88:	d01d      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a1f      	ldr	r2, [pc, #124]	; (800bc0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d018      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a1d      	ldr	r2, [pc, #116]	; (800bc10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d013      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a1c      	ldr	r2, [pc, #112]	; (800bc14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d00e      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a15      	ldr	r2, [pc, #84]	; (800bc04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d009      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a18      	ldr	r2, [pc, #96]	; (800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d004      	beq.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a11      	ldr	r2, [pc, #68]	; (800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d10c      	bne.n	800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	40012c00 	.word	0x40012c00
 800bc04:	40013400 	.word	0x40013400
 800bc08:	40015000 	.word	0x40015000
 800bc0c:	40000400 	.word	0x40000400
 800bc10:	40000800 	.word	0x40000800
 800bc14:	40000c00 	.word	0x40000c00
 800bc18:	40014000 	.word	0x40014000

0800bc1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc26:	2300      	movs	r3, #0
 800bc28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d101      	bne.n	800bc38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc34:	2302      	movs	r3, #2
 800bc36:	e096      	b.n	800bd66 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	695b      	ldr	r3, [r3, #20]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	041b      	lsls	r3, r3, #16
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a2f      	ldr	r2, [pc, #188]	; (800bd74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d009      	beq.n	800bcd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a2d      	ldr	r2, [pc, #180]	; (800bd78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d004      	beq.n	800bcd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a2c      	ldr	r2, [pc, #176]	; (800bd7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d106      	bne.n	800bcde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a24      	ldr	r2, [pc, #144]	; (800bd74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d009      	beq.n	800bcfc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a22      	ldr	r2, [pc, #136]	; (800bd78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d004      	beq.n	800bcfc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a21      	ldr	r2, [pc, #132]	; (800bd7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d12b      	bne.n	800bd54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd06:	051b      	lsls	r3, r3, #20
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a11      	ldr	r2, [pc, #68]	; (800bd74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d009      	beq.n	800bd46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a10      	ldr	r2, [pc, #64]	; (800bd78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d004      	beq.n	800bd46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a0e      	ldr	r2, [pc, #56]	; (800bd7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d106      	bne.n	800bd54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	4313      	orrs	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	40012c00 	.word	0x40012c00
 800bd78:	40013400 	.word	0x40013400
 800bd7c:	40015000 	.word	0x40015000

0800bd80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d101      	bne.n	800be1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e042      	b.n	800bea4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be24:	2b00      	cmp	r3, #0
 800be26:	d106      	bne.n	800be36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7f9 fe4b 	bl	8005acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2224      	movs	r2, #36	; 0x24
 800be3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0201 	bic.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fb5c 	bl	800c50c <UART_SetConfig>
 800be54:	4603      	mov	r3, r0
 800be56:	2b01      	cmp	r3, #1
 800be58:	d101      	bne.n	800be5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e022      	b.n	800bea4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fe1a 	bl	800caa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f042 0201 	orr.w	r2, r2, #1
 800be9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fea1 	bl	800cbe4 <UART_CheckIdleState>
 800bea2:	4603      	mov	r3, r0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	; 0x28
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	4613      	mov	r3, r2
 800beba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bec2:	2b20      	cmp	r3, #32
 800bec4:	f040 8083 	bne.w	800bfce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d002      	beq.n	800bed4 <HAL_UART_Transmit+0x28>
 800bece:	88fb      	ldrh	r3, [r7, #6]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e07b      	b.n	800bfd0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d101      	bne.n	800bee6 <HAL_UART_Transmit+0x3a>
 800bee2:	2302      	movs	r3, #2
 800bee4:	e074      	b.n	800bfd0 <HAL_UART_Transmit+0x124>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2201      	movs	r2, #1
 800beea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2221      	movs	r2, #33	; 0x21
 800befa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800befe:	f7f9 fee1 	bl	8005cc4 <HAL_GetTick>
 800bf02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	88fa      	ldrh	r2, [r7, #6]
 800bf08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	88fa      	ldrh	r2, [r7, #6]
 800bf10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1c:	d108      	bne.n	800bf30 <HAL_UART_Transmit+0x84>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d104      	bne.n	800bf30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	61bb      	str	r3, [r7, #24]
 800bf2e:	e003      	b.n	800bf38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bf40:	e02c      	b.n	800bf9c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2180      	movs	r1, #128	; 0x80
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 fe94 	bl	800cc7a <UART_WaitOnFlagUntilTimeout>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e039      	b.n	800bfd0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10b      	bne.n	800bf7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	3302      	adds	r3, #2
 800bf76:	61bb      	str	r3, [r7, #24]
 800bf78:	e007      	b.n	800bf8a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	781a      	ldrb	r2, [r3, #0]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	3301      	adds	r3, #1
 800bf88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	3b01      	subs	r3, #1
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1cc      	bne.n	800bf42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2140      	movs	r1, #64	; 0x40
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f000 fe61 	bl	800cc7a <UART_WaitOnFlagUntilTimeout>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e006      	b.n	800bfd0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e000      	b.n	800bfd0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bfce:	2302      	movs	r3, #2
  }
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3720      	adds	r7, #32
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d131      	bne.n	800c054 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <HAL_UART_Receive_IT+0x24>
 800bff6:	88fb      	ldrh	r3, [r7, #6]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e02a      	b.n	800c056 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c006:	2b01      	cmp	r3, #1
 800c008:	d101      	bne.n	800c00e <HAL_UART_Receive_IT+0x36>
 800c00a:	2302      	movs	r3, #2
 800c00c:	e023      	b.n	800c056 <HAL_UART_Receive_IT+0x7e>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a0f      	ldr	r2, [pc, #60]	; (800c060 <HAL_UART_Receive_IT+0x88>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d00e      	beq.n	800c044 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d007      	beq.n	800c044 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c042:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c044:	88fb      	ldrh	r3, [r7, #6]
 800c046:	461a      	mov	r2, r3
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 fe96 	bl	800cd7c <UART_Start_Receive_IT>
 800c050:	4603      	mov	r3, r0
 800c052:	e000      	b.n	800c056 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c054:	2302      	movs	r3, #2
  }
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	40008000 	.word	0x40008000

0800c064 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c084:	69fa      	ldr	r2, [r7, #28]
 800c086:	f640 030f 	movw	r3, #2063	; 0x80f
 800c08a:	4013      	ands	r3, r2
 800c08c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d118      	bne.n	800c0c6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d013      	beq.n	800c0c6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	f003 0320 	and.w	r3, r3, #32
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d104      	bne.n	800c0b2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d009      	beq.n	800c0c6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 81fb 	beq.w	800c4b2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	4798      	blx	r3
      }
      return;
 800c0c4:	e1f5      	b.n	800c4b2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 80ef 	beq.w	800c2ac <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	4b73      	ldr	r3, [pc, #460]	; (800c2a0 <HAL_UART_IRQHandler+0x23c>)
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d105      	bne.n	800c0e4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	4b72      	ldr	r3, [pc, #456]	; (800c2a4 <HAL_UART_IRQHandler+0x240>)
 800c0dc:	4013      	ands	r3, r2
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 80e4 	beq.w	800c2ac <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	f003 0301 	and.w	r3, r3, #1
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d010      	beq.n	800c110 <HAL_UART_IRQHandler+0xac>
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00b      	beq.n	800c110 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c106:	f043 0201 	orr.w	r2, r3, #1
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d010      	beq.n	800c13c <HAL_UART_IRQHandler+0xd8>
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f003 0301 	and.w	r3, r3, #1
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2202      	movs	r2, #2
 800c12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c132:	f043 0204 	orr.w	r2, r3, #4
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	f003 0304 	and.w	r3, r3, #4
 800c142:	2b00      	cmp	r3, #0
 800c144:	d010      	beq.n	800c168 <HAL_UART_IRQHandler+0x104>
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00b      	beq.n	800c168 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2204      	movs	r2, #4
 800c156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15e:	f043 0202 	orr.w	r2, r3, #2
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	f003 0308 	and.w	r3, r3, #8
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d015      	beq.n	800c19e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	f003 0320 	and.w	r3, r3, #32
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d104      	bne.n	800c186 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	4b48      	ldr	r3, [pc, #288]	; (800c2a0 <HAL_UART_IRQHandler+0x23c>)
 800c180:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00b      	beq.n	800c19e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2208      	movs	r2, #8
 800c18c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c194:	f043 0208 	orr.w	r2, r3, #8
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d011      	beq.n	800c1cc <HAL_UART_IRQHandler+0x168>
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00c      	beq.n	800c1cc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1c2:	f043 0220 	orr.w	r2, r3, #32
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f000 816f 	beq.w	800c4b6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	f003 0320 	and.w	r3, r3, #32
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d011      	beq.n	800c206 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	f003 0320 	and.w	r3, r3, #32
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d104      	bne.n	800c1f6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d007      	beq.n	800c206 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c20c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c218:	2b40      	cmp	r3, #64	; 0x40
 800c21a:	d004      	beq.n	800c226 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c222:	2b00      	cmp	r3, #0
 800c224:	d031      	beq.n	800c28a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fe66 	bl	800cef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c236:	2b40      	cmp	r3, #64	; 0x40
 800c238:	d123      	bne.n	800c282 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c248:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d013      	beq.n	800c27a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c256:	4a14      	ldr	r2, [pc, #80]	; (800c2a8 <HAL_UART_IRQHandler+0x244>)
 800c258:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fb fa7c 	bl	800775c <HAL_DMA_Abort_IT>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d017      	beq.n	800c29a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c274:	4610      	mov	r0, r2
 800c276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c278:	e00f      	b.n	800c29a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f930 	bl	800c4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c280:	e00b      	b.n	800c29a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f92c 	bl	800c4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c288:	e007      	b.n	800c29a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f928 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c298:	e10d      	b.n	800c4b6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c29a:	bf00      	nop
    return;
 800c29c:	e10b      	b.n	800c4b6 <HAL_UART_IRQHandler+0x452>
 800c29e:	bf00      	nop
 800c2a0:	10000001 	.word	0x10000001
 800c2a4:	04000120 	.word	0x04000120
 800c2a8:	0800cf5d 	.word	0x0800cf5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	f040 80ab 	bne.w	800c40c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	f003 0310 	and.w	r3, r3, #16
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 80a5 	beq.w	800c40c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	f003 0310 	and.w	r3, r3, #16
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 809f 	beq.w	800c40c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2210      	movs	r2, #16
 800c2d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e0:	2b40      	cmp	r3, #64	; 0x40
 800c2e2:	d155      	bne.n	800c390 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c2ee:	893b      	ldrh	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 80e2 	beq.w	800c4ba <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2fc:	893a      	ldrh	r2, [r7, #8]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	f080 80db 	bcs.w	800c4ba <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	893a      	ldrh	r2, [r7, #8]
 800c308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 0320 	and.w	r3, r3, #32
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d12b      	bne.n	800c374 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c32a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f022 0201 	bic.w	r2, r2, #1
 800c33a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689a      	ldr	r2, [r3, #8]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c34a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f022 0210 	bic.w	r2, r2, #16
 800c368:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fb f99b 	bl	80076aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c380:	b29b      	uxth	r3, r3
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	b29b      	uxth	r3, r3
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 f8b3 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c38e:	e094      	b.n	800c4ba <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 8087 	beq.w	800c4be <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c3b0:	897b      	ldrh	r3, [r7, #10]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f000 8083 	beq.w	800c4be <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c3c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	6812      	ldr	r2, [r2, #0]
 800c3d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3d6:	f023 0301 	bic.w	r3, r3, #1
 800c3da:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2220      	movs	r2, #32
 800c3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f022 0210 	bic.w	r2, r2, #16
 800c3fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c400:	897b      	ldrh	r3, [r7, #10]
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f875 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c40a:	e058      	b.n	800c4be <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00d      	beq.n	800c432 <HAL_UART_IRQHandler+0x3ce>
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d008      	beq.n	800c432 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c428:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f001 f8a2 	bl	800d574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c430:	e048      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d012      	beq.n	800c462 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c442:	2b00      	cmp	r3, #0
 800c444:	d104      	bne.n	800c450 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d008      	beq.n	800c462 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c454:	2b00      	cmp	r3, #0
 800c456:	d034      	beq.n	800c4c2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	4798      	blx	r3
    }
    return;
 800c460:	e02f      	b.n	800c4c2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d008      	beq.n	800c47e <HAL_UART_IRQHandler+0x41a>
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fd86 	bl	800cf88 <UART_EndTransmit_IT>
    return;
 800c47c:	e022      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d008      	beq.n	800c49a <HAL_UART_IRQHandler+0x436>
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f001 f882 	bl	800d59c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c498:	e014      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00f      	beq.n	800c4c4 <HAL_UART_IRQHandler+0x460>
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	da0c      	bge.n	800c4c4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f001 f86c 	bl	800d588 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4b0:	e008      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
      return;
 800c4b2:	bf00      	nop
 800c4b4:	e006      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
    return;
 800c4b6:	bf00      	nop
 800c4b8:	e004      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
      return;
 800c4ba:	bf00      	nop
 800c4bc:	e002      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
      return;
 800c4be:	bf00      	nop
 800c4c0:	e000      	b.n	800c4c4 <HAL_UART_IRQHandler+0x460>
    return;
 800c4c2:	bf00      	nop
  }
}
 800c4c4:	3720      	adds	r7, #32
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop

0800c4cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c50c:	b5b0      	push	{r4, r5, r7, lr}
 800c50e:	b088      	sub	sp, #32
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	689a      	ldr	r2, [r3, #8]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	431a      	orrs	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	431a      	orrs	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	4bb1      	ldr	r3, [pc, #708]	; (800c7fc <UART_SetConfig+0x2f0>)
 800c538:	4013      	ands	r3, r2
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	6812      	ldr	r2, [r2, #0]
 800c53e:	69f9      	ldr	r1, [r7, #28]
 800c540:	430b      	orrs	r3, r1
 800c542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	430a      	orrs	r2, r1
 800c558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4aa6      	ldr	r2, [pc, #664]	; (800c800 <UART_SetConfig+0x2f4>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d004      	beq.n	800c574 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	69fa      	ldr	r2, [r7, #28]
 800c570:	4313      	orrs	r3, r2
 800c572:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c57e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	6812      	ldr	r2, [r2, #0]
 800c586:	69f9      	ldr	r1, [r7, #28]
 800c588:	430b      	orrs	r3, r1
 800c58a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	f023 010f 	bic.w	r1, r3, #15
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	430a      	orrs	r2, r1
 800c5a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a97      	ldr	r2, [pc, #604]	; (800c804 <UART_SetConfig+0x2f8>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d120      	bne.n	800c5ee <UART_SetConfig+0xe2>
 800c5ac:	4b96      	ldr	r3, [pc, #600]	; (800c808 <UART_SetConfig+0x2fc>)
 800c5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5b2:	f003 0303 	and.w	r3, r3, #3
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d816      	bhi.n	800c5e8 <UART_SetConfig+0xdc>
 800c5ba:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <UART_SetConfig+0xb4>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c5d1 	.word	0x0800c5d1
 800c5c4:	0800c5dd 	.word	0x0800c5dd
 800c5c8:	0800c5d7 	.word	0x0800c5d7
 800c5cc:	0800c5e3 	.word	0x0800c5e3
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	76fb      	strb	r3, [r7, #27]
 800c5d4:	e0e7      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	76fb      	strb	r3, [r7, #27]
 800c5da:	e0e4      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c5dc:	2304      	movs	r3, #4
 800c5de:	76fb      	strb	r3, [r7, #27]
 800c5e0:	e0e1      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c5e2:	2308      	movs	r3, #8
 800c5e4:	76fb      	strb	r3, [r7, #27]
 800c5e6:	e0de      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c5e8:	2310      	movs	r3, #16
 800c5ea:	76fb      	strb	r3, [r7, #27]
 800c5ec:	e0db      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a86      	ldr	r2, [pc, #536]	; (800c80c <UART_SetConfig+0x300>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d132      	bne.n	800c65e <UART_SetConfig+0x152>
 800c5f8:	4b83      	ldr	r3, [pc, #524]	; (800c808 <UART_SetConfig+0x2fc>)
 800c5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5fe:	f003 030c 	and.w	r3, r3, #12
 800c602:	2b0c      	cmp	r3, #12
 800c604:	d828      	bhi.n	800c658 <UART_SetConfig+0x14c>
 800c606:	a201      	add	r2, pc, #4	; (adr r2, 800c60c <UART_SetConfig+0x100>)
 800c608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60c:	0800c641 	.word	0x0800c641
 800c610:	0800c659 	.word	0x0800c659
 800c614:	0800c659 	.word	0x0800c659
 800c618:	0800c659 	.word	0x0800c659
 800c61c:	0800c64d 	.word	0x0800c64d
 800c620:	0800c659 	.word	0x0800c659
 800c624:	0800c659 	.word	0x0800c659
 800c628:	0800c659 	.word	0x0800c659
 800c62c:	0800c647 	.word	0x0800c647
 800c630:	0800c659 	.word	0x0800c659
 800c634:	0800c659 	.word	0x0800c659
 800c638:	0800c659 	.word	0x0800c659
 800c63c:	0800c653 	.word	0x0800c653
 800c640:	2300      	movs	r3, #0
 800c642:	76fb      	strb	r3, [r7, #27]
 800c644:	e0af      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c646:	2302      	movs	r3, #2
 800c648:	76fb      	strb	r3, [r7, #27]
 800c64a:	e0ac      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c64c:	2304      	movs	r3, #4
 800c64e:	76fb      	strb	r3, [r7, #27]
 800c650:	e0a9      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c652:	2308      	movs	r3, #8
 800c654:	76fb      	strb	r3, [r7, #27]
 800c656:	e0a6      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c658:	2310      	movs	r3, #16
 800c65a:	76fb      	strb	r3, [r7, #27]
 800c65c:	e0a3      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a6b      	ldr	r2, [pc, #428]	; (800c810 <UART_SetConfig+0x304>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d120      	bne.n	800c6aa <UART_SetConfig+0x19e>
 800c668:	4b67      	ldr	r3, [pc, #412]	; (800c808 <UART_SetConfig+0x2fc>)
 800c66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c66e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c672:	2b30      	cmp	r3, #48	; 0x30
 800c674:	d013      	beq.n	800c69e <UART_SetConfig+0x192>
 800c676:	2b30      	cmp	r3, #48	; 0x30
 800c678:	d814      	bhi.n	800c6a4 <UART_SetConfig+0x198>
 800c67a:	2b20      	cmp	r3, #32
 800c67c:	d009      	beq.n	800c692 <UART_SetConfig+0x186>
 800c67e:	2b20      	cmp	r3, #32
 800c680:	d810      	bhi.n	800c6a4 <UART_SetConfig+0x198>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <UART_SetConfig+0x180>
 800c686:	2b10      	cmp	r3, #16
 800c688:	d006      	beq.n	800c698 <UART_SetConfig+0x18c>
 800c68a:	e00b      	b.n	800c6a4 <UART_SetConfig+0x198>
 800c68c:	2300      	movs	r3, #0
 800c68e:	76fb      	strb	r3, [r7, #27]
 800c690:	e089      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c692:	2302      	movs	r3, #2
 800c694:	76fb      	strb	r3, [r7, #27]
 800c696:	e086      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c698:	2304      	movs	r3, #4
 800c69a:	76fb      	strb	r3, [r7, #27]
 800c69c:	e083      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c69e:	2308      	movs	r3, #8
 800c6a0:	76fb      	strb	r3, [r7, #27]
 800c6a2:	e080      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	76fb      	strb	r3, [r7, #27]
 800c6a8:	e07d      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a59      	ldr	r2, [pc, #356]	; (800c814 <UART_SetConfig+0x308>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d120      	bne.n	800c6f6 <UART_SetConfig+0x1ea>
 800c6b4:	4b54      	ldr	r3, [pc, #336]	; (800c808 <UART_SetConfig+0x2fc>)
 800c6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c6be:	2bc0      	cmp	r3, #192	; 0xc0
 800c6c0:	d013      	beq.n	800c6ea <UART_SetConfig+0x1de>
 800c6c2:	2bc0      	cmp	r3, #192	; 0xc0
 800c6c4:	d814      	bhi.n	800c6f0 <UART_SetConfig+0x1e4>
 800c6c6:	2b80      	cmp	r3, #128	; 0x80
 800c6c8:	d009      	beq.n	800c6de <UART_SetConfig+0x1d2>
 800c6ca:	2b80      	cmp	r3, #128	; 0x80
 800c6cc:	d810      	bhi.n	800c6f0 <UART_SetConfig+0x1e4>
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <UART_SetConfig+0x1cc>
 800c6d2:	2b40      	cmp	r3, #64	; 0x40
 800c6d4:	d006      	beq.n	800c6e4 <UART_SetConfig+0x1d8>
 800c6d6:	e00b      	b.n	800c6f0 <UART_SetConfig+0x1e4>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	76fb      	strb	r3, [r7, #27]
 800c6dc:	e063      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c6de:	2302      	movs	r3, #2
 800c6e0:	76fb      	strb	r3, [r7, #27]
 800c6e2:	e060      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c6e4:	2304      	movs	r3, #4
 800c6e6:	76fb      	strb	r3, [r7, #27]
 800c6e8:	e05d      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c6ea:	2308      	movs	r3, #8
 800c6ec:	76fb      	strb	r3, [r7, #27]
 800c6ee:	e05a      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c6f0:	2310      	movs	r3, #16
 800c6f2:	76fb      	strb	r3, [r7, #27]
 800c6f4:	e057      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a47      	ldr	r2, [pc, #284]	; (800c818 <UART_SetConfig+0x30c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d125      	bne.n	800c74c <UART_SetConfig+0x240>
 800c700:	4b41      	ldr	r3, [pc, #260]	; (800c808 <UART_SetConfig+0x2fc>)
 800c702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c70a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c70e:	d017      	beq.n	800c740 <UART_SetConfig+0x234>
 800c710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c714:	d817      	bhi.n	800c746 <UART_SetConfig+0x23a>
 800c716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c71a:	d00b      	beq.n	800c734 <UART_SetConfig+0x228>
 800c71c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c720:	d811      	bhi.n	800c746 <UART_SetConfig+0x23a>
 800c722:	2b00      	cmp	r3, #0
 800c724:	d003      	beq.n	800c72e <UART_SetConfig+0x222>
 800c726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c72a:	d006      	beq.n	800c73a <UART_SetConfig+0x22e>
 800c72c:	e00b      	b.n	800c746 <UART_SetConfig+0x23a>
 800c72e:	2300      	movs	r3, #0
 800c730:	76fb      	strb	r3, [r7, #27]
 800c732:	e038      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c734:	2302      	movs	r3, #2
 800c736:	76fb      	strb	r3, [r7, #27]
 800c738:	e035      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c73a:	2304      	movs	r3, #4
 800c73c:	76fb      	strb	r3, [r7, #27]
 800c73e:	e032      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c740:	2308      	movs	r3, #8
 800c742:	76fb      	strb	r3, [r7, #27]
 800c744:	e02f      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c746:	2310      	movs	r3, #16
 800c748:	76fb      	strb	r3, [r7, #27]
 800c74a:	e02c      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a2b      	ldr	r2, [pc, #172]	; (800c800 <UART_SetConfig+0x2f4>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d125      	bne.n	800c7a2 <UART_SetConfig+0x296>
 800c756:	4b2c      	ldr	r3, [pc, #176]	; (800c808 <UART_SetConfig+0x2fc>)
 800c758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c75c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c764:	d017      	beq.n	800c796 <UART_SetConfig+0x28a>
 800c766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c76a:	d817      	bhi.n	800c79c <UART_SetConfig+0x290>
 800c76c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c770:	d00b      	beq.n	800c78a <UART_SetConfig+0x27e>
 800c772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c776:	d811      	bhi.n	800c79c <UART_SetConfig+0x290>
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <UART_SetConfig+0x278>
 800c77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c780:	d006      	beq.n	800c790 <UART_SetConfig+0x284>
 800c782:	e00b      	b.n	800c79c <UART_SetConfig+0x290>
 800c784:	2300      	movs	r3, #0
 800c786:	76fb      	strb	r3, [r7, #27]
 800c788:	e00d      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c78a:	2302      	movs	r3, #2
 800c78c:	76fb      	strb	r3, [r7, #27]
 800c78e:	e00a      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c790:	2304      	movs	r3, #4
 800c792:	76fb      	strb	r3, [r7, #27]
 800c794:	e007      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c796:	2308      	movs	r3, #8
 800c798:	76fb      	strb	r3, [r7, #27]
 800c79a:	e004      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c79c:	2310      	movs	r3, #16
 800c79e:	76fb      	strb	r3, [r7, #27]
 800c7a0:	e001      	b.n	800c7a6 <UART_SetConfig+0x29a>
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a15      	ldr	r2, [pc, #84]	; (800c800 <UART_SetConfig+0x2f4>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	f040 809f 	bne.w	800c8f0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7b2:	7efb      	ldrb	r3, [r7, #27]
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d837      	bhi.n	800c828 <UART_SetConfig+0x31c>
 800c7b8:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <UART_SetConfig+0x2b4>)
 800c7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7be:	bf00      	nop
 800c7c0:	0800c7e5 	.word	0x0800c7e5
 800c7c4:	0800c829 	.word	0x0800c829
 800c7c8:	0800c7ed 	.word	0x0800c7ed
 800c7cc:	0800c829 	.word	0x0800c829
 800c7d0:	0800c7f3 	.word	0x0800c7f3
 800c7d4:	0800c829 	.word	0x0800c829
 800c7d8:	0800c829 	.word	0x0800c829
 800c7dc:	0800c829 	.word	0x0800c829
 800c7e0:	0800c821 	.word	0x0800c821
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7e4:	f7fc ff26 	bl	8009634 <HAL_RCC_GetPCLK1Freq>
 800c7e8:	6178      	str	r0, [r7, #20]
        break;
 800c7ea:	e022      	b.n	800c832 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7ec:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <UART_SetConfig+0x310>)
 800c7ee:	617b      	str	r3, [r7, #20]
        break;
 800c7f0:	e01f      	b.n	800c832 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7f2:	f7fc feb1 	bl	8009558 <HAL_RCC_GetSysClockFreq>
 800c7f6:	6178      	str	r0, [r7, #20]
        break;
 800c7f8:	e01b      	b.n	800c832 <UART_SetConfig+0x326>
 800c7fa:	bf00      	nop
 800c7fc:	cfff69f3 	.word	0xcfff69f3
 800c800:	40008000 	.word	0x40008000
 800c804:	40013800 	.word	0x40013800
 800c808:	40021000 	.word	0x40021000
 800c80c:	40004400 	.word	0x40004400
 800c810:	40004800 	.word	0x40004800
 800c814:	40004c00 	.word	0x40004c00
 800c818:	40005000 	.word	0x40005000
 800c81c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c824:	617b      	str	r3, [r7, #20]
        break;
 800c826:	e004      	b.n	800c832 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	76bb      	strb	r3, [r7, #26]
        break;
 800c830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 811b 	beq.w	800ca70 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	4a96      	ldr	r2, [pc, #600]	; (800ca98 <UART_SetConfig+0x58c>)
 800c840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c844:	461a      	mov	r2, r3
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	fbb3 f3f2 	udiv	r3, r3, r2
 800c84c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	4613      	mov	r3, r2
 800c854:	005b      	lsls	r3, r3, #1
 800c856:	4413      	add	r3, r2
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d305      	bcc.n	800c86a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	429a      	cmp	r2, r3
 800c868:	d902      	bls.n	800c870 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	76bb      	strb	r3, [r7, #26]
 800c86e:	e0ff      	b.n	800ca70 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	4618      	mov	r0, r3
 800c874:	f04f 0100 	mov.w	r1, #0
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87c:	4a86      	ldr	r2, [pc, #536]	; (800ca98 <UART_SetConfig+0x58c>)
 800c87e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c882:	b29a      	uxth	r2, r3
 800c884:	f04f 0300 	mov.w	r3, #0
 800c888:	f7f4 fa26 	bl	8000cd8 <__aeabi_uldivmod>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4610      	mov	r0, r2
 800c892:	4619      	mov	r1, r3
 800c894:	f04f 0200 	mov.w	r2, #0
 800c898:	f04f 0300 	mov.w	r3, #0
 800c89c:	020b      	lsls	r3, r1, #8
 800c89e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8a2:	0202      	lsls	r2, r0, #8
 800c8a4:	6879      	ldr	r1, [r7, #4]
 800c8a6:	6849      	ldr	r1, [r1, #4]
 800c8a8:	0849      	lsrs	r1, r1, #1
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	f04f 0100 	mov.w	r1, #0
 800c8b0:	1814      	adds	r4, r2, r0
 800c8b2:	eb43 0501 	adc.w	r5, r3, r1
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f04f 0300 	mov.w	r3, #0
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	f7f4 fa08 	bl	8000cd8 <__aeabi_uldivmod>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8d6:	d308      	bcc.n	800c8ea <UART_SetConfig+0x3de>
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8de:	d204      	bcs.n	800c8ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	60da      	str	r2, [r3, #12]
 800c8e8:	e0c2      	b.n	800ca70 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	76bb      	strb	r3, [r7, #26]
 800c8ee:	e0bf      	b.n	800ca70 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	69db      	ldr	r3, [r3, #28]
 800c8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8f8:	d165      	bne.n	800c9c6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800c8fa:	7efb      	ldrb	r3, [r7, #27]
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d828      	bhi.n	800c952 <UART_SetConfig+0x446>
 800c900:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <UART_SetConfig+0x3fc>)
 800c902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c906:	bf00      	nop
 800c908:	0800c92d 	.word	0x0800c92d
 800c90c:	0800c935 	.word	0x0800c935
 800c910:	0800c93d 	.word	0x0800c93d
 800c914:	0800c953 	.word	0x0800c953
 800c918:	0800c943 	.word	0x0800c943
 800c91c:	0800c953 	.word	0x0800c953
 800c920:	0800c953 	.word	0x0800c953
 800c924:	0800c953 	.word	0x0800c953
 800c928:	0800c94b 	.word	0x0800c94b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c92c:	f7fc fe82 	bl	8009634 <HAL_RCC_GetPCLK1Freq>
 800c930:	6178      	str	r0, [r7, #20]
        break;
 800c932:	e013      	b.n	800c95c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c934:	f7fc fe94 	bl	8009660 <HAL_RCC_GetPCLK2Freq>
 800c938:	6178      	str	r0, [r7, #20]
        break;
 800c93a:	e00f      	b.n	800c95c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c93c:	4b57      	ldr	r3, [pc, #348]	; (800ca9c <UART_SetConfig+0x590>)
 800c93e:	617b      	str	r3, [r7, #20]
        break;
 800c940:	e00c      	b.n	800c95c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c942:	f7fc fe09 	bl	8009558 <HAL_RCC_GetSysClockFreq>
 800c946:	6178      	str	r0, [r7, #20]
        break;
 800c948:	e008      	b.n	800c95c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c94a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c94e:	617b      	str	r3, [r7, #20]
        break;
 800c950:	e004      	b.n	800c95c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	76bb      	strb	r3, [r7, #26]
        break;
 800c95a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 8086 	beq.w	800ca70 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	4a4b      	ldr	r2, [pc, #300]	; (800ca98 <UART_SetConfig+0x58c>)
 800c96a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c96e:	461a      	mov	r2, r3
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	fbb3 f3f2 	udiv	r3, r3, r2
 800c976:	005a      	lsls	r2, r3, #1
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	085b      	lsrs	r3, r3, #1
 800c97e:	441a      	add	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	fbb2 f3f3 	udiv	r3, r2, r3
 800c988:	b29b      	uxth	r3, r3
 800c98a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	2b0f      	cmp	r3, #15
 800c990:	d916      	bls.n	800c9c0 <UART_SetConfig+0x4b4>
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c998:	d212      	bcs.n	800c9c0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	f023 030f 	bic.w	r3, r3, #15
 800c9a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	085b      	lsrs	r3, r3, #1
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	f003 0307 	and.w	r3, r3, #7
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	89fb      	ldrh	r3, [r7, #14]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	89fa      	ldrh	r2, [r7, #14]
 800c9bc:	60da      	str	r2, [r3, #12]
 800c9be:	e057      	b.n	800ca70 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	76bb      	strb	r3, [r7, #26]
 800c9c4:	e054      	b.n	800ca70 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9c6:	7efb      	ldrb	r3, [r7, #27]
 800c9c8:	2b08      	cmp	r3, #8
 800c9ca:	d828      	bhi.n	800ca1e <UART_SetConfig+0x512>
 800c9cc:	a201      	add	r2, pc, #4	; (adr r2, 800c9d4 <UART_SetConfig+0x4c8>)
 800c9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d2:	bf00      	nop
 800c9d4:	0800c9f9 	.word	0x0800c9f9
 800c9d8:	0800ca01 	.word	0x0800ca01
 800c9dc:	0800ca09 	.word	0x0800ca09
 800c9e0:	0800ca1f 	.word	0x0800ca1f
 800c9e4:	0800ca0f 	.word	0x0800ca0f
 800c9e8:	0800ca1f 	.word	0x0800ca1f
 800c9ec:	0800ca1f 	.word	0x0800ca1f
 800c9f0:	0800ca1f 	.word	0x0800ca1f
 800c9f4:	0800ca17 	.word	0x0800ca17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9f8:	f7fc fe1c 	bl	8009634 <HAL_RCC_GetPCLK1Freq>
 800c9fc:	6178      	str	r0, [r7, #20]
        break;
 800c9fe:	e013      	b.n	800ca28 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca00:	f7fc fe2e 	bl	8009660 <HAL_RCC_GetPCLK2Freq>
 800ca04:	6178      	str	r0, [r7, #20]
        break;
 800ca06:	e00f      	b.n	800ca28 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca08:	4b24      	ldr	r3, [pc, #144]	; (800ca9c <UART_SetConfig+0x590>)
 800ca0a:	617b      	str	r3, [r7, #20]
        break;
 800ca0c:	e00c      	b.n	800ca28 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca0e:	f7fc fda3 	bl	8009558 <HAL_RCC_GetSysClockFreq>
 800ca12:	6178      	str	r0, [r7, #20]
        break;
 800ca14:	e008      	b.n	800ca28 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca1a:	617b      	str	r3, [r7, #20]
        break;
 800ca1c:	e004      	b.n	800ca28 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	76bb      	strb	r3, [r7, #26]
        break;
 800ca26:	bf00      	nop
    }

    if (pclk != 0U)
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d020      	beq.n	800ca70 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca32:	4a19      	ldr	r2, [pc, #100]	; (800ca98 <UART_SetConfig+0x58c>)
 800ca34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	085b      	lsrs	r3, r3, #1
 800ca46:	441a      	add	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2b0f      	cmp	r3, #15
 800ca58:	d908      	bls.n	800ca6c <UART_SetConfig+0x560>
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca60:	d204      	bcs.n	800ca6c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	60da      	str	r2, [r3, #12]
 800ca6a:	e001      	b.n	800ca70 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ca8c:	7ebb      	ldrb	r3, [r7, #26]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bdb0      	pop	{r4, r5, r7, pc}
 800ca96:	bf00      	nop
 800ca98:	08013158 	.word	0x08013158
 800ca9c:	00f42400 	.word	0x00f42400

0800caa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00a      	beq.n	800caca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	430a      	orrs	r2, r1
 800cac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cace:	f003 0302 	and.w	r3, r3, #2
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00a      	beq.n	800caec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	430a      	orrs	r2, r1
 800caea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf0:	f003 0304 	and.w	r3, r3, #4
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00a      	beq.n	800cb0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	430a      	orrs	r2, r1
 800cb0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb12:	f003 0308 	and.w	r3, r3, #8
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	430a      	orrs	r2, r1
 800cb2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb34:	f003 0310 	and.w	r3, r3, #16
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00a      	beq.n	800cb52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb56:	f003 0320 	and.w	r3, r3, #32
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00a      	beq.n	800cb74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	430a      	orrs	r2, r1
 800cb72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01a      	beq.n	800cbb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb9e:	d10a      	bne.n	800cbb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	605a      	str	r2, [r3, #4]
  }
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af02      	add	r7, sp, #8
 800cbea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbf4:	f7f9 f866 	bl	8005cc4 <HAL_GetTick>
 800cbf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 0308 	and.w	r3, r3, #8
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	d10e      	bne.n	800cc26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f82f 	bl	800cc7a <UART_WaitOnFlagUntilTimeout>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d001      	beq.n	800cc26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	e025      	b.n	800cc72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d10e      	bne.n	800cc52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f819 	bl	800cc7a <UART_WaitOnFlagUntilTimeout>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e00f      	b.n	800cc72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2220      	movs	r2, #32
 800cc56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b084      	sub	sp, #16
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	60f8      	str	r0, [r7, #12]
 800cc82:	60b9      	str	r1, [r7, #8]
 800cc84:	603b      	str	r3, [r7, #0]
 800cc86:	4613      	mov	r3, r2
 800cc88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc8a:	e062      	b.n	800cd52 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc92:	d05e      	beq.n	800cd52 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc94:	f7f9 f816 	bl	8005cc4 <HAL_GetTick>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	69ba      	ldr	r2, [r7, #24]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d302      	bcc.n	800ccaa <UART_WaitOnFlagUntilTimeout+0x30>
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d11d      	bne.n	800cce6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ccb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	689a      	ldr	r2, [r3, #8]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0201 	bic.w	r2, r2, #1
 800ccc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2220      	movs	r2, #32
 800ccce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cce2:	2303      	movs	r3, #3
 800cce4:	e045      	b.n	800cd72 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d02e      	beq.n	800cd52 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd02:	d126      	bne.n	800cd52 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	689a      	ldr	r2, [r3, #8]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f022 0201 	bic.w	r2, r2, #1
 800cd2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2220      	movs	r2, #32
 800cd32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2220      	movs	r2, #32
 800cd42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	e00f      	b.n	800cd72 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	69da      	ldr	r2, [r3, #28]
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	bf0c      	ite	eq
 800cd62:	2301      	moveq	r3, #1
 800cd64:	2300      	movne	r3, #0
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	461a      	mov	r2, r3
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d08d      	beq.n	800cc8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	4613      	mov	r3, r2
 800cd88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	88fa      	ldrh	r2, [r7, #6]
 800cd94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	88fa      	ldrh	r2, [r7, #6]
 800cd9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdae:	d10e      	bne.n	800cdce <UART_Start_Receive_IT+0x52>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d105      	bne.n	800cdc4 <UART_Start_Receive_IT+0x48>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cdbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdc2:	e02d      	b.n	800ce20 <UART_Start_Receive_IT+0xa4>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	22ff      	movs	r2, #255	; 0xff
 800cdc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdcc:	e028      	b.n	800ce20 <UART_Start_Receive_IT+0xa4>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10d      	bne.n	800cdf2 <UART_Start_Receive_IT+0x76>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d104      	bne.n	800cde8 <UART_Start_Receive_IT+0x6c>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	22ff      	movs	r2, #255	; 0xff
 800cde2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cde6:	e01b      	b.n	800ce20 <UART_Start_Receive_IT+0xa4>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	227f      	movs	r2, #127	; 0x7f
 800cdec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cdf0:	e016      	b.n	800ce20 <UART_Start_Receive_IT+0xa4>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdfa:	d10d      	bne.n	800ce18 <UART_Start_Receive_IT+0x9c>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d104      	bne.n	800ce0e <UART_Start_Receive_IT+0x92>
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	227f      	movs	r2, #127	; 0x7f
 800ce08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce0c:	e008      	b.n	800ce20 <UART_Start_Receive_IT+0xa4>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	223f      	movs	r2, #63	; 0x3f
 800ce12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce16:	e003      	b.n	800ce20 <UART_Start_Receive_IT+0xa4>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2222      	movs	r2, #34	; 0x22
 800ce2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	689a      	ldr	r2, [r3, #8]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f042 0201 	orr.w	r2, r2, #1
 800ce3e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce48:	d12a      	bne.n	800cea0 <UART_Start_Receive_IT+0x124>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce50:	88fa      	ldrh	r2, [r7, #6]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d324      	bcc.n	800cea0 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce5e:	d107      	bne.n	800ce70 <UART_Start_Receive_IT+0xf4>
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d103      	bne.n	800ce70 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4a1f      	ldr	r2, [pc, #124]	; (800cee8 <UART_Start_Receive_IT+0x16c>)
 800ce6c:	671a      	str	r2, [r3, #112]	; 0x70
 800ce6e:	e002      	b.n	800ce76 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	4a1e      	ldr	r2, [pc, #120]	; (800ceec <UART_Start_Receive_IT+0x170>)
 800ce74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce8c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689a      	ldr	r2, [r3, #8]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ce9c:	609a      	str	r2, [r3, #8]
 800ce9e:	e01b      	b.n	800ced8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cea8:	d107      	bne.n	800ceba <UART_Start_Receive_IT+0x13e>
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d103      	bne.n	800ceba <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	4a0e      	ldr	r2, [pc, #56]	; (800cef0 <UART_Start_Receive_IT+0x174>)
 800ceb6:	671a      	str	r2, [r3, #112]	; 0x70
 800ceb8:	e002      	b.n	800cec0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	4a0d      	ldr	r2, [pc, #52]	; (800cef4 <UART_Start_Receive_IT+0x178>)
 800cebe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ced6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3714      	adds	r7, #20
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	0800d371 	.word	0x0800d371
 800ceec:	0800d16d 	.word	0x0800d16d
 800cef0:	0800d095 	.word	0x0800d095
 800cef4:	0800cfbd 	.word	0x0800cfbd

0800cef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cf0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6812      	ldr	r2, [r2, #0]
 800cf1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf1e:	f023 0301 	bic.w	r3, r3, #1
 800cf22:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d107      	bne.n	800cf3c <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f022 0210 	bic.w	r2, r2, #16
 800cf3a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2220      	movs	r2, #32
 800cf40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f7ff fab0 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf80:	bf00      	nop
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf9e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff fa8c 	bl	800c4cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfca:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd2:	2b22      	cmp	r3, #34	; 0x22
 800cfd4:	d152      	bne.n	800d07c <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfdc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cfde:	89bb      	ldrh	r3, [r7, #12]
 800cfe0:	b2d9      	uxtb	r1, r3
 800cfe2:	89fb      	ldrh	r3, [r7, #14]
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfea:	400a      	ands	r2, r1
 800cfec:	b2d2      	uxtb	r2, r2
 800cfee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d000:	b29b      	uxth	r3, r3
 800d002:	3b01      	subs	r3, #1
 800d004:	b29a      	uxth	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d012:	b29b      	uxth	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	d139      	bne.n	800d08c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d026:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	689a      	ldr	r2, [r3, #8]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f022 0201 	bic.w	r2, r2, #1
 800d036:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2220      	movs	r2, #32
 800d03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d10f      	bne.n	800d06e <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f022 0210 	bic.w	r2, r2, #16
 800d05c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fa44 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
 800d06c:	e002      	b.n	800d074 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7f8 fd88 	bl	8005b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d07a:	e007      	b.n	800d08c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	699a      	ldr	r2, [r3, #24]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f042 0208 	orr.w	r2, r2, #8
 800d08a:	619a      	str	r2, [r3, #24]
}
 800d08c:	bf00      	nop
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0aa:	2b22      	cmp	r3, #34	; 0x22
 800d0ac:	d152      	bne.n	800d154 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ba:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d0bc:	89ba      	ldrh	r2, [r7, #12]
 800d0be:	89fb      	ldrh	r3, [r7, #14]
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0cc:	1c9a      	adds	r2, r3, #2
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d139      	bne.n	800d164 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d0fe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689a      	ldr	r2, [r3, #8]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f022 0201 	bic.w	r2, r2, #1
 800d10e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2220      	movs	r2, #32
 800d114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d122:	2b01      	cmp	r3, #1
 800d124:	d10f      	bne.n	800d146 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f022 0210 	bic.w	r2, r2, #16
 800d134:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d13c:	4619      	mov	r1, r3
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7ff f9d8 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
 800d144:	e002      	b.n	800d14c <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7f8 fd1c 	bl	8005b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d152:	e007      	b.n	800d164 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699a      	ldr	r2, [r3, #24]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f042 0208 	orr.w	r2, r2, #8
 800d162:	619a      	str	r2, [r3, #24]
}
 800d164:	bf00      	nop
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d17a:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	69db      	ldr	r3, [r3, #28]
 800d182:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d19a:	2b22      	cmp	r3, #34	; 0x22
 800d19c:	f040 80da 	bne.w	800d354 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d1a6:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d1a8:	e0aa      	b.n	800d300 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d1b2:	89bb      	ldrh	r3, [r7, #12]
 800d1b4:	b2d9      	uxtb	r1, r3
 800d1b6:	8b7b      	ldrh	r3, [r7, #26]
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1be:	400a      	ands	r2, r1
 800d1c0:	b2d2      	uxtb	r2, r2
 800d1c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1c8:	1c5a      	adds	r2, r3, #1
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	f003 0307 	and.w	r3, r3, #7
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d04d      	beq.n	800d28e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	f003 0301 	and.w	r3, r3, #1
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d010      	beq.n	800d21e <UART_RxISR_8BIT_FIFOEN+0xb2>
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00b      	beq.n	800d21e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2201      	movs	r2, #1
 800d20c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d214:	f043 0201 	orr.w	r2, r3, #1
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	f003 0302 	and.w	r3, r3, #2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d010      	beq.n	800d24a <UART_RxISR_8BIT_FIFOEN+0xde>
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00b      	beq.n	800d24a <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2202      	movs	r2, #2
 800d238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d240:	f043 0204 	orr.w	r2, r3, #4
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	f003 0304 	and.w	r3, r3, #4
 800d250:	2b00      	cmp	r3, #0
 800d252:	d010      	beq.n	800d276 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	f003 0301 	and.w	r3, r3, #1
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00b      	beq.n	800d276 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2204      	movs	r2, #4
 800d264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d26c:	f043 0202 	orr.w	r2, r3, #2
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d006      	beq.n	800d28e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff f92d 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d294:	b29b      	uxth	r3, r3
 800d296:	2b00      	cmp	r3, #0
 800d298:	d132      	bne.n	800d300 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	6812      	ldr	r2, [r2, #0]
 800d2b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2b8:	f023 0301 	bic.w	r3, r3, #1
 800d2bc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2220      	movs	r2, #32
 800d2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d10f      	bne.n	800d2f4 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f022 0210 	bic.w	r2, r2, #16
 800d2e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7ff f901 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
 800d2f2:	e002      	b.n	800d2fa <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7f8 fc45 	bl	8005b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d300:	89fb      	ldrh	r3, [r7, #14]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	f003 0320 	and.w	r3, r3, #32
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f47f af4c 	bne.w	800d1aa <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d318:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d31a:	897b      	ldrh	r3, [r7, #10]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d021      	beq.n	800d364 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d326:	897a      	ldrh	r2, [r7, #10]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d21b      	bcs.n	800d364 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	689a      	ldr	r2, [r3, #8]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d33a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a0b      	ldr	r2, [pc, #44]	; (800d36c <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d340:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f042 0220 	orr.w	r2, r2, #32
 800d350:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d352:	e007      	b.n	800d364 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	699a      	ldr	r2, [r3, #24]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f042 0208 	orr.w	r2, r2, #8
 800d362:	619a      	str	r2, [r3, #24]
}
 800d364:	bf00      	nop
 800d366:	3720      	adds	r7, #32
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	0800cfbd 	.word	0x0800cfbd

0800d370 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b08a      	sub	sp, #40	; 0x28
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d37e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d39e:	2b22      	cmp	r3, #34	; 0x22
 800d3a0:	f040 80da 	bne.w	800d558 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3aa:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d3ac:	e0aa      	b.n	800d504 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b4:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d3bc:	8aba      	ldrh	r2, [r7, #20]
 800d3be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3cc:	1c9a      	adds	r2, r3, #2
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	b29a      	uxth	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	f003 0307 	and.w	r3, r3, #7
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d04d      	beq.n	800d492 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d010      	beq.n	800d422 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00b      	beq.n	800d422 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2201      	movs	r2, #1
 800d410:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d418:	f043 0201 	orr.w	r2, r3, #1
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	f003 0302 	and.w	r3, r3, #2
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d010      	beq.n	800d44e <UART_RxISR_16BIT_FIFOEN+0xde>
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00b      	beq.n	800d44e <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2202      	movs	r2, #2
 800d43c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d444:	f043 0204 	orr.w	r2, r3, #4
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	f003 0304 	and.w	r3, r3, #4
 800d454:	2b00      	cmp	r3, #0
 800d456:	d010      	beq.n	800d47a <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2204      	movs	r2, #4
 800d468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d470:	f043 0202 	orr.w	r2, r3, #2
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff f82b 	bl	800c4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d498:	b29b      	uxth	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d132      	bne.n	800d504 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d4ac:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	6812      	ldr	r2, [r2, #0]
 800d4b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4bc:	f023 0301 	bic.w	r3, r3, #1
 800d4c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2220      	movs	r2, #32
 800d4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d10f      	bne.n	800d4f8 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f022 0210 	bic.w	r2, r2, #16
 800d4e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7fe ffff 	bl	800c4f4 <HAL_UARTEx_RxEventCallback>
 800d4f6:	e002      	b.n	800d4fe <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7f8 fb43 	bl	8005b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d504:	8afb      	ldrh	r3, [r7, #22]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d005      	beq.n	800d516 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	f003 0320 	and.w	r3, r3, #32
 800d510:	2b00      	cmp	r3, #0
 800d512:	f47f af4c 	bne.w	800d3ae <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d51c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d51e:	89fb      	ldrh	r3, [r7, #14]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d021      	beq.n	800d568 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d52a:	89fa      	ldrh	r2, [r7, #14]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d21b      	bcs.n	800d568 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689a      	ldr	r2, [r3, #8]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d53e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a0b      	ldr	r2, [pc, #44]	; (800d570 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d544:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f042 0220 	orr.w	r2, r2, #32
 800d554:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d556:	e007      	b.n	800d568 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	699a      	ldr	r2, [r3, #24]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f042 0208 	orr.w	r2, r2, #8
 800d566:	619a      	str	r2, [r3, #24]
}
 800d568:	bf00      	nop
 800d56a:	3728      	adds	r7, #40	; 0x28
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	0800d095 	.word	0x0800d095

0800d574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d101      	bne.n	800d5c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	e027      	b.n	800d616 <HAL_UARTEx_DisableFifoMode+0x66>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2224      	movs	r2, #36	; 0x24
 800d5d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f022 0201 	bic.w	r2, r2, #1
 800d5ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d5f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2220      	movs	r2, #32
 800d608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d614:	2300      	movs	r3, #0
}
 800d616:	4618      	mov	r0, r3
 800d618:	3714      	adds	r7, #20
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d632:	2b01      	cmp	r3, #1
 800d634:	d101      	bne.n	800d63a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d636:	2302      	movs	r3, #2
 800d638:	e02d      	b.n	800d696 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2224      	movs	r2, #36	; 0x24
 800d646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f022 0201 	bic.w	r2, r2, #1
 800d660:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	430a      	orrs	r2, r1
 800d674:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f850 	bl	800d71c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2220      	movs	r2, #32
 800d688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d101      	bne.n	800d6b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6b2:	2302      	movs	r3, #2
 800d6b4:	e02d      	b.n	800d712 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2224      	movs	r2, #36	; 0x24
 800d6c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f022 0201 	bic.w	r2, r2, #1
 800d6dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	683a      	ldr	r2, [r7, #0]
 800d6ee:	430a      	orrs	r2, r1
 800d6f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f812 	bl	800d71c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	68fa      	ldr	r2, [r7, #12]
 800d6fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2220      	movs	r2, #32
 800d704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d108      	bne.n	800d73e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d73c:	e031      	b.n	800d7a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d73e:	2308      	movs	r3, #8
 800d740:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d742:	2308      	movs	r3, #8
 800d744:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	0e5b      	lsrs	r3, r3, #25
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	f003 0307 	and.w	r3, r3, #7
 800d754:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	0f5b      	lsrs	r3, r3, #29
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	f003 0307 	and.w	r3, r3, #7
 800d764:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	7b3a      	ldrb	r2, [r7, #12]
 800d76a:	4911      	ldr	r1, [pc, #68]	; (800d7b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d76c:	5c8a      	ldrb	r2, [r1, r2]
 800d76e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d772:	7b3a      	ldrb	r2, [r7, #12]
 800d774:	490f      	ldr	r1, [pc, #60]	; (800d7b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d776:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d778:	fb93 f3f2 	sdiv	r3, r3, r2
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	7b7a      	ldrb	r2, [r7, #13]
 800d788:	4909      	ldr	r1, [pc, #36]	; (800d7b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d78a:	5c8a      	ldrb	r2, [r1, r2]
 800d78c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d790:	7b7a      	ldrb	r2, [r7, #13]
 800d792:	4908      	ldr	r1, [pc, #32]	; (800d7b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d794:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d796:	fb93 f3f2 	sdiv	r3, r3, r2
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d7a2:	bf00      	nop
 800d7a4:	3714      	adds	r7, #20
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	08013170 	.word	0x08013170
 800d7b4:	08013178 	.word	0x08013178

0800d7b8 <atof>:
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	f001 bb63 	b.w	800ee84 <strtod>

0800d7be <atoi>:
 800d7be:	220a      	movs	r2, #10
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	f001 bbef 	b.w	800efa4 <strtol>
	...

0800d7c8 <__errno>:
 800d7c8:	4b01      	ldr	r3, [pc, #4]	; (800d7d0 <__errno+0x8>)
 800d7ca:	6818      	ldr	r0, [r3, #0]
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	2000002c 	.word	0x2000002c

0800d7d4 <__libc_init_array>:
 800d7d4:	b570      	push	{r4, r5, r6, lr}
 800d7d6:	4d0d      	ldr	r5, [pc, #52]	; (800d80c <__libc_init_array+0x38>)
 800d7d8:	4c0d      	ldr	r4, [pc, #52]	; (800d810 <__libc_init_array+0x3c>)
 800d7da:	1b64      	subs	r4, r4, r5
 800d7dc:	10a4      	asrs	r4, r4, #2
 800d7de:	2600      	movs	r6, #0
 800d7e0:	42a6      	cmp	r6, r4
 800d7e2:	d109      	bne.n	800d7f8 <__libc_init_array+0x24>
 800d7e4:	4d0b      	ldr	r5, [pc, #44]	; (800d814 <__libc_init_array+0x40>)
 800d7e6:	4c0c      	ldr	r4, [pc, #48]	; (800d818 <__libc_init_array+0x44>)
 800d7e8:	f004 fc48 	bl	801207c <_init>
 800d7ec:	1b64      	subs	r4, r4, r5
 800d7ee:	10a4      	asrs	r4, r4, #2
 800d7f0:	2600      	movs	r6, #0
 800d7f2:	42a6      	cmp	r6, r4
 800d7f4:	d105      	bne.n	800d802 <__libc_init_array+0x2e>
 800d7f6:	bd70      	pop	{r4, r5, r6, pc}
 800d7f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7fc:	4798      	blx	r3
 800d7fe:	3601      	adds	r6, #1
 800d800:	e7ee      	b.n	800d7e0 <__libc_init_array+0xc>
 800d802:	f855 3b04 	ldr.w	r3, [r5], #4
 800d806:	4798      	blx	r3
 800d808:	3601      	adds	r6, #1
 800d80a:	e7f2      	b.n	800d7f2 <__libc_init_array+0x1e>
 800d80c:	08013670 	.word	0x08013670
 800d810:	08013670 	.word	0x08013670
 800d814:	08013670 	.word	0x08013670
 800d818:	08013674 	.word	0x08013674

0800d81c <memcpy>:
 800d81c:	440a      	add	r2, r1
 800d81e:	4291      	cmp	r1, r2
 800d820:	f100 33ff 	add.w	r3, r0, #4294967295
 800d824:	d100      	bne.n	800d828 <memcpy+0xc>
 800d826:	4770      	bx	lr
 800d828:	b510      	push	{r4, lr}
 800d82a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d82e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d832:	4291      	cmp	r1, r2
 800d834:	d1f9      	bne.n	800d82a <memcpy+0xe>
 800d836:	bd10      	pop	{r4, pc}

0800d838 <memset>:
 800d838:	4402      	add	r2, r0
 800d83a:	4603      	mov	r3, r0
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d100      	bne.n	800d842 <memset+0xa>
 800d840:	4770      	bx	lr
 800d842:	f803 1b01 	strb.w	r1, [r3], #1
 800d846:	e7f9      	b.n	800d83c <memset+0x4>

0800d848 <__cvt>:
 800d848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d84c:	ec55 4b10 	vmov	r4, r5, d0
 800d850:	2d00      	cmp	r5, #0
 800d852:	460e      	mov	r6, r1
 800d854:	4619      	mov	r1, r3
 800d856:	462b      	mov	r3, r5
 800d858:	bfbb      	ittet	lt
 800d85a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d85e:	461d      	movlt	r5, r3
 800d860:	2300      	movge	r3, #0
 800d862:	232d      	movlt	r3, #45	; 0x2d
 800d864:	700b      	strb	r3, [r1, #0]
 800d866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d868:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d86c:	4691      	mov	r9, r2
 800d86e:	f023 0820 	bic.w	r8, r3, #32
 800d872:	bfbc      	itt	lt
 800d874:	4622      	movlt	r2, r4
 800d876:	4614      	movlt	r4, r2
 800d878:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d87c:	d005      	beq.n	800d88a <__cvt+0x42>
 800d87e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d882:	d100      	bne.n	800d886 <__cvt+0x3e>
 800d884:	3601      	adds	r6, #1
 800d886:	2102      	movs	r1, #2
 800d888:	e000      	b.n	800d88c <__cvt+0x44>
 800d88a:	2103      	movs	r1, #3
 800d88c:	ab03      	add	r3, sp, #12
 800d88e:	9301      	str	r3, [sp, #4]
 800d890:	ab02      	add	r3, sp, #8
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	ec45 4b10 	vmov	d0, r4, r5
 800d898:	4653      	mov	r3, sl
 800d89a:	4632      	mov	r2, r6
 800d89c:	f001 fcd8 	bl	800f250 <_dtoa_r>
 800d8a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d8a4:	4607      	mov	r7, r0
 800d8a6:	d102      	bne.n	800d8ae <__cvt+0x66>
 800d8a8:	f019 0f01 	tst.w	r9, #1
 800d8ac:	d022      	beq.n	800d8f4 <__cvt+0xac>
 800d8ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d8b2:	eb07 0906 	add.w	r9, r7, r6
 800d8b6:	d110      	bne.n	800d8da <__cvt+0x92>
 800d8b8:	783b      	ldrb	r3, [r7, #0]
 800d8ba:	2b30      	cmp	r3, #48	; 0x30
 800d8bc:	d10a      	bne.n	800d8d4 <__cvt+0x8c>
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	f7f3 f927 	bl	8000b18 <__aeabi_dcmpeq>
 800d8ca:	b918      	cbnz	r0, 800d8d4 <__cvt+0x8c>
 800d8cc:	f1c6 0601 	rsb	r6, r6, #1
 800d8d0:	f8ca 6000 	str.w	r6, [sl]
 800d8d4:	f8da 3000 	ldr.w	r3, [sl]
 800d8d8:	4499      	add	r9, r3
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2300      	movs	r3, #0
 800d8de:	4620      	mov	r0, r4
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	f7f3 f919 	bl	8000b18 <__aeabi_dcmpeq>
 800d8e6:	b108      	cbz	r0, 800d8ec <__cvt+0xa4>
 800d8e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8ec:	2230      	movs	r2, #48	; 0x30
 800d8ee:	9b03      	ldr	r3, [sp, #12]
 800d8f0:	454b      	cmp	r3, r9
 800d8f2:	d307      	bcc.n	800d904 <__cvt+0xbc>
 800d8f4:	9b03      	ldr	r3, [sp, #12]
 800d8f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8f8:	1bdb      	subs	r3, r3, r7
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	b004      	add	sp, #16
 800d900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d904:	1c59      	adds	r1, r3, #1
 800d906:	9103      	str	r1, [sp, #12]
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	e7f0      	b.n	800d8ee <__cvt+0xa6>

0800d90c <__exponent>:
 800d90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d90e:	4603      	mov	r3, r0
 800d910:	2900      	cmp	r1, #0
 800d912:	bfb8      	it	lt
 800d914:	4249      	neglt	r1, r1
 800d916:	f803 2b02 	strb.w	r2, [r3], #2
 800d91a:	bfb4      	ite	lt
 800d91c:	222d      	movlt	r2, #45	; 0x2d
 800d91e:	222b      	movge	r2, #43	; 0x2b
 800d920:	2909      	cmp	r1, #9
 800d922:	7042      	strb	r2, [r0, #1]
 800d924:	dd2a      	ble.n	800d97c <__exponent+0x70>
 800d926:	f10d 0407 	add.w	r4, sp, #7
 800d92a:	46a4      	mov	ip, r4
 800d92c:	270a      	movs	r7, #10
 800d92e:	46a6      	mov	lr, r4
 800d930:	460a      	mov	r2, r1
 800d932:	fb91 f6f7 	sdiv	r6, r1, r7
 800d936:	fb07 1516 	mls	r5, r7, r6, r1
 800d93a:	3530      	adds	r5, #48	; 0x30
 800d93c:	2a63      	cmp	r2, #99	; 0x63
 800d93e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d942:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d946:	4631      	mov	r1, r6
 800d948:	dcf1      	bgt.n	800d92e <__exponent+0x22>
 800d94a:	3130      	adds	r1, #48	; 0x30
 800d94c:	f1ae 0502 	sub.w	r5, lr, #2
 800d950:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d954:	1c44      	adds	r4, r0, #1
 800d956:	4629      	mov	r1, r5
 800d958:	4561      	cmp	r1, ip
 800d95a:	d30a      	bcc.n	800d972 <__exponent+0x66>
 800d95c:	f10d 0209 	add.w	r2, sp, #9
 800d960:	eba2 020e 	sub.w	r2, r2, lr
 800d964:	4565      	cmp	r5, ip
 800d966:	bf88      	it	hi
 800d968:	2200      	movhi	r2, #0
 800d96a:	4413      	add	r3, r2
 800d96c:	1a18      	subs	r0, r3, r0
 800d96e:	b003      	add	sp, #12
 800d970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d972:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d976:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d97a:	e7ed      	b.n	800d958 <__exponent+0x4c>
 800d97c:	2330      	movs	r3, #48	; 0x30
 800d97e:	3130      	adds	r1, #48	; 0x30
 800d980:	7083      	strb	r3, [r0, #2]
 800d982:	70c1      	strb	r1, [r0, #3]
 800d984:	1d03      	adds	r3, r0, #4
 800d986:	e7f1      	b.n	800d96c <__exponent+0x60>

0800d988 <_printf_float>:
 800d988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	ed2d 8b02 	vpush	{d8}
 800d990:	b08d      	sub	sp, #52	; 0x34
 800d992:	460c      	mov	r4, r1
 800d994:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d998:	4616      	mov	r6, r2
 800d99a:	461f      	mov	r7, r3
 800d99c:	4605      	mov	r5, r0
 800d99e:	f002 ff69 	bl	8010874 <_localeconv_r>
 800d9a2:	f8d0 a000 	ldr.w	sl, [r0]
 800d9a6:	4650      	mov	r0, sl
 800d9a8:	f7f2 fc3a 	bl	8000220 <strlen>
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	9305      	str	r3, [sp, #20]
 800d9b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d9b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d9bc:	3307      	adds	r3, #7
 800d9be:	f023 0307 	bic.w	r3, r3, #7
 800d9c2:	f103 0208 	add.w	r2, r3, #8
 800d9c6:	f8c8 2000 	str.w	r2, [r8]
 800d9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d9d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d9d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d9da:	9307      	str	r3, [sp, #28]
 800d9dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800d9e0:	ee08 0a10 	vmov	s16, r0
 800d9e4:	4b9f      	ldr	r3, [pc, #636]	; (800dc64 <_printf_float+0x2dc>)
 800d9e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ee:	f7f3 f8c5 	bl	8000b7c <__aeabi_dcmpun>
 800d9f2:	bb88      	cbnz	r0, 800da58 <_printf_float+0xd0>
 800d9f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9f8:	4b9a      	ldr	r3, [pc, #616]	; (800dc64 <_printf_float+0x2dc>)
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9fe:	f7f3 f89f 	bl	8000b40 <__aeabi_dcmple>
 800da02:	bb48      	cbnz	r0, 800da58 <_printf_float+0xd0>
 800da04:	2200      	movs	r2, #0
 800da06:	2300      	movs	r3, #0
 800da08:	4640      	mov	r0, r8
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f3 f88e 	bl	8000b2c <__aeabi_dcmplt>
 800da10:	b110      	cbz	r0, 800da18 <_printf_float+0x90>
 800da12:	232d      	movs	r3, #45	; 0x2d
 800da14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da18:	4b93      	ldr	r3, [pc, #588]	; (800dc68 <_printf_float+0x2e0>)
 800da1a:	4894      	ldr	r0, [pc, #592]	; (800dc6c <_printf_float+0x2e4>)
 800da1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800da20:	bf94      	ite	ls
 800da22:	4698      	movls	r8, r3
 800da24:	4680      	movhi	r8, r0
 800da26:	2303      	movs	r3, #3
 800da28:	6123      	str	r3, [r4, #16]
 800da2a:	9b05      	ldr	r3, [sp, #20]
 800da2c:	f023 0204 	bic.w	r2, r3, #4
 800da30:	6022      	str	r2, [r4, #0]
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	9700      	str	r7, [sp, #0]
 800da38:	4633      	mov	r3, r6
 800da3a:	aa0b      	add	r2, sp, #44	; 0x2c
 800da3c:	4621      	mov	r1, r4
 800da3e:	4628      	mov	r0, r5
 800da40:	f000 f9d8 	bl	800ddf4 <_printf_common>
 800da44:	3001      	adds	r0, #1
 800da46:	f040 8090 	bne.w	800db6a <_printf_float+0x1e2>
 800da4a:	f04f 30ff 	mov.w	r0, #4294967295
 800da4e:	b00d      	add	sp, #52	; 0x34
 800da50:	ecbd 8b02 	vpop	{d8}
 800da54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da58:	4642      	mov	r2, r8
 800da5a:	464b      	mov	r3, r9
 800da5c:	4640      	mov	r0, r8
 800da5e:	4649      	mov	r1, r9
 800da60:	f7f3 f88c 	bl	8000b7c <__aeabi_dcmpun>
 800da64:	b140      	cbz	r0, 800da78 <_printf_float+0xf0>
 800da66:	464b      	mov	r3, r9
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bfbc      	itt	lt
 800da6c:	232d      	movlt	r3, #45	; 0x2d
 800da6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da72:	487f      	ldr	r0, [pc, #508]	; (800dc70 <_printf_float+0x2e8>)
 800da74:	4b7f      	ldr	r3, [pc, #508]	; (800dc74 <_printf_float+0x2ec>)
 800da76:	e7d1      	b.n	800da1c <_printf_float+0x94>
 800da78:	6863      	ldr	r3, [r4, #4]
 800da7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da7e:	9206      	str	r2, [sp, #24]
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	d13f      	bne.n	800db04 <_printf_float+0x17c>
 800da84:	2306      	movs	r3, #6
 800da86:	6063      	str	r3, [r4, #4]
 800da88:	9b05      	ldr	r3, [sp, #20]
 800da8a:	6861      	ldr	r1, [r4, #4]
 800da8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da90:	2300      	movs	r3, #0
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	ab0a      	add	r3, sp, #40	; 0x28
 800da96:	e9cd b301 	strd	fp, r3, [sp, #4]
 800da9a:	ab09      	add	r3, sp, #36	; 0x24
 800da9c:	ec49 8b10 	vmov	d0, r8, r9
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	6022      	str	r2, [r4, #0]
 800daa4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800daa8:	4628      	mov	r0, r5
 800daaa:	f7ff fecd 	bl	800d848 <__cvt>
 800daae:	9b06      	ldr	r3, [sp, #24]
 800dab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dab2:	2b47      	cmp	r3, #71	; 0x47
 800dab4:	4680      	mov	r8, r0
 800dab6:	d108      	bne.n	800daca <_printf_float+0x142>
 800dab8:	1cc8      	adds	r0, r1, #3
 800daba:	db02      	blt.n	800dac2 <_printf_float+0x13a>
 800dabc:	6863      	ldr	r3, [r4, #4]
 800dabe:	4299      	cmp	r1, r3
 800dac0:	dd41      	ble.n	800db46 <_printf_float+0x1be>
 800dac2:	f1ab 0b02 	sub.w	fp, fp, #2
 800dac6:	fa5f fb8b 	uxtb.w	fp, fp
 800daca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dace:	d820      	bhi.n	800db12 <_printf_float+0x18a>
 800dad0:	3901      	subs	r1, #1
 800dad2:	465a      	mov	r2, fp
 800dad4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dad8:	9109      	str	r1, [sp, #36]	; 0x24
 800dada:	f7ff ff17 	bl	800d90c <__exponent>
 800dade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dae0:	1813      	adds	r3, r2, r0
 800dae2:	2a01      	cmp	r2, #1
 800dae4:	4681      	mov	r9, r0
 800dae6:	6123      	str	r3, [r4, #16]
 800dae8:	dc02      	bgt.n	800daf0 <_printf_float+0x168>
 800daea:	6822      	ldr	r2, [r4, #0]
 800daec:	07d2      	lsls	r2, r2, #31
 800daee:	d501      	bpl.n	800daf4 <_printf_float+0x16c>
 800daf0:	3301      	adds	r3, #1
 800daf2:	6123      	str	r3, [r4, #16]
 800daf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d09c      	beq.n	800da36 <_printf_float+0xae>
 800dafc:	232d      	movs	r3, #45	; 0x2d
 800dafe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db02:	e798      	b.n	800da36 <_printf_float+0xae>
 800db04:	9a06      	ldr	r2, [sp, #24]
 800db06:	2a47      	cmp	r2, #71	; 0x47
 800db08:	d1be      	bne.n	800da88 <_printf_float+0x100>
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1bc      	bne.n	800da88 <_printf_float+0x100>
 800db0e:	2301      	movs	r3, #1
 800db10:	e7b9      	b.n	800da86 <_printf_float+0xfe>
 800db12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800db16:	d118      	bne.n	800db4a <_printf_float+0x1c2>
 800db18:	2900      	cmp	r1, #0
 800db1a:	6863      	ldr	r3, [r4, #4]
 800db1c:	dd0b      	ble.n	800db36 <_printf_float+0x1ae>
 800db1e:	6121      	str	r1, [r4, #16]
 800db20:	b913      	cbnz	r3, 800db28 <_printf_float+0x1a0>
 800db22:	6822      	ldr	r2, [r4, #0]
 800db24:	07d0      	lsls	r0, r2, #31
 800db26:	d502      	bpl.n	800db2e <_printf_float+0x1a6>
 800db28:	3301      	adds	r3, #1
 800db2a:	440b      	add	r3, r1
 800db2c:	6123      	str	r3, [r4, #16]
 800db2e:	65a1      	str	r1, [r4, #88]	; 0x58
 800db30:	f04f 0900 	mov.w	r9, #0
 800db34:	e7de      	b.n	800daf4 <_printf_float+0x16c>
 800db36:	b913      	cbnz	r3, 800db3e <_printf_float+0x1b6>
 800db38:	6822      	ldr	r2, [r4, #0]
 800db3a:	07d2      	lsls	r2, r2, #31
 800db3c:	d501      	bpl.n	800db42 <_printf_float+0x1ba>
 800db3e:	3302      	adds	r3, #2
 800db40:	e7f4      	b.n	800db2c <_printf_float+0x1a4>
 800db42:	2301      	movs	r3, #1
 800db44:	e7f2      	b.n	800db2c <_printf_float+0x1a4>
 800db46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4c:	4299      	cmp	r1, r3
 800db4e:	db05      	blt.n	800db5c <_printf_float+0x1d4>
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	6121      	str	r1, [r4, #16]
 800db54:	07d8      	lsls	r0, r3, #31
 800db56:	d5ea      	bpl.n	800db2e <_printf_float+0x1a6>
 800db58:	1c4b      	adds	r3, r1, #1
 800db5a:	e7e7      	b.n	800db2c <_printf_float+0x1a4>
 800db5c:	2900      	cmp	r1, #0
 800db5e:	bfd4      	ite	le
 800db60:	f1c1 0202 	rsble	r2, r1, #2
 800db64:	2201      	movgt	r2, #1
 800db66:	4413      	add	r3, r2
 800db68:	e7e0      	b.n	800db2c <_printf_float+0x1a4>
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	055a      	lsls	r2, r3, #21
 800db6e:	d407      	bmi.n	800db80 <_printf_float+0x1f8>
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	4642      	mov	r2, r8
 800db74:	4631      	mov	r1, r6
 800db76:	4628      	mov	r0, r5
 800db78:	47b8      	blx	r7
 800db7a:	3001      	adds	r0, #1
 800db7c:	d12c      	bne.n	800dbd8 <_printf_float+0x250>
 800db7e:	e764      	b.n	800da4a <_printf_float+0xc2>
 800db80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db84:	f240 80e0 	bls.w	800dd48 <_printf_float+0x3c0>
 800db88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db8c:	2200      	movs	r2, #0
 800db8e:	2300      	movs	r3, #0
 800db90:	f7f2 ffc2 	bl	8000b18 <__aeabi_dcmpeq>
 800db94:	2800      	cmp	r0, #0
 800db96:	d034      	beq.n	800dc02 <_printf_float+0x27a>
 800db98:	4a37      	ldr	r2, [pc, #220]	; (800dc78 <_printf_float+0x2f0>)
 800db9a:	2301      	movs	r3, #1
 800db9c:	4631      	mov	r1, r6
 800db9e:	4628      	mov	r0, r5
 800dba0:	47b8      	blx	r7
 800dba2:	3001      	adds	r0, #1
 800dba4:	f43f af51 	beq.w	800da4a <_printf_float+0xc2>
 800dba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbac:	429a      	cmp	r2, r3
 800dbae:	db02      	blt.n	800dbb6 <_printf_float+0x22e>
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	07d8      	lsls	r0, r3, #31
 800dbb4:	d510      	bpl.n	800dbd8 <_printf_float+0x250>
 800dbb6:	ee18 3a10 	vmov	r3, s16
 800dbba:	4652      	mov	r2, sl
 800dbbc:	4631      	mov	r1, r6
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	47b8      	blx	r7
 800dbc2:	3001      	adds	r0, #1
 800dbc4:	f43f af41 	beq.w	800da4a <_printf_float+0xc2>
 800dbc8:	f04f 0800 	mov.w	r8, #0
 800dbcc:	f104 091a 	add.w	r9, r4, #26
 800dbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	4543      	cmp	r3, r8
 800dbd6:	dc09      	bgt.n	800dbec <_printf_float+0x264>
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	079b      	lsls	r3, r3, #30
 800dbdc:	f100 8105 	bmi.w	800ddea <_printf_float+0x462>
 800dbe0:	68e0      	ldr	r0, [r4, #12]
 800dbe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe4:	4298      	cmp	r0, r3
 800dbe6:	bfb8      	it	lt
 800dbe8:	4618      	movlt	r0, r3
 800dbea:	e730      	b.n	800da4e <_printf_float+0xc6>
 800dbec:	2301      	movs	r3, #1
 800dbee:	464a      	mov	r2, r9
 800dbf0:	4631      	mov	r1, r6
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	47b8      	blx	r7
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	f43f af27 	beq.w	800da4a <_printf_float+0xc2>
 800dbfc:	f108 0801 	add.w	r8, r8, #1
 800dc00:	e7e6      	b.n	800dbd0 <_printf_float+0x248>
 800dc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	dc39      	bgt.n	800dc7c <_printf_float+0x2f4>
 800dc08:	4a1b      	ldr	r2, [pc, #108]	; (800dc78 <_printf_float+0x2f0>)
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4628      	mov	r0, r5
 800dc10:	47b8      	blx	r7
 800dc12:	3001      	adds	r0, #1
 800dc14:	f43f af19 	beq.w	800da4a <_printf_float+0xc2>
 800dc18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	d102      	bne.n	800dc26 <_printf_float+0x29e>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	07d9      	lsls	r1, r3, #31
 800dc24:	d5d8      	bpl.n	800dbd8 <_printf_float+0x250>
 800dc26:	ee18 3a10 	vmov	r3, s16
 800dc2a:	4652      	mov	r2, sl
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4628      	mov	r0, r5
 800dc30:	47b8      	blx	r7
 800dc32:	3001      	adds	r0, #1
 800dc34:	f43f af09 	beq.w	800da4a <_printf_float+0xc2>
 800dc38:	f04f 0900 	mov.w	r9, #0
 800dc3c:	f104 0a1a 	add.w	sl, r4, #26
 800dc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc42:	425b      	negs	r3, r3
 800dc44:	454b      	cmp	r3, r9
 800dc46:	dc01      	bgt.n	800dc4c <_printf_float+0x2c4>
 800dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4a:	e792      	b.n	800db72 <_printf_float+0x1ea>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	4652      	mov	r2, sl
 800dc50:	4631      	mov	r1, r6
 800dc52:	4628      	mov	r0, r5
 800dc54:	47b8      	blx	r7
 800dc56:	3001      	adds	r0, #1
 800dc58:	f43f aef7 	beq.w	800da4a <_printf_float+0xc2>
 800dc5c:	f109 0901 	add.w	r9, r9, #1
 800dc60:	e7ee      	b.n	800dc40 <_printf_float+0x2b8>
 800dc62:	bf00      	nop
 800dc64:	7fefffff 	.word	0x7fefffff
 800dc68:	08013184 	.word	0x08013184
 800dc6c:	08013188 	.word	0x08013188
 800dc70:	08013190 	.word	0x08013190
 800dc74:	0801318c 	.word	0x0801318c
 800dc78:	08013194 	.word	0x08013194
 800dc7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc80:	429a      	cmp	r2, r3
 800dc82:	bfa8      	it	ge
 800dc84:	461a      	movge	r2, r3
 800dc86:	2a00      	cmp	r2, #0
 800dc88:	4691      	mov	r9, r2
 800dc8a:	dc37      	bgt.n	800dcfc <_printf_float+0x374>
 800dc8c:	f04f 0b00 	mov.w	fp, #0
 800dc90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc94:	f104 021a 	add.w	r2, r4, #26
 800dc98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc9a:	9305      	str	r3, [sp, #20]
 800dc9c:	eba3 0309 	sub.w	r3, r3, r9
 800dca0:	455b      	cmp	r3, fp
 800dca2:	dc33      	bgt.n	800dd0c <_printf_float+0x384>
 800dca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	db3b      	blt.n	800dd24 <_printf_float+0x39c>
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	07da      	lsls	r2, r3, #31
 800dcb0:	d438      	bmi.n	800dd24 <_printf_float+0x39c>
 800dcb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcb4:	9b05      	ldr	r3, [sp, #20]
 800dcb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	eba2 0901 	sub.w	r9, r2, r1
 800dcbe:	4599      	cmp	r9, r3
 800dcc0:	bfa8      	it	ge
 800dcc2:	4699      	movge	r9, r3
 800dcc4:	f1b9 0f00 	cmp.w	r9, #0
 800dcc8:	dc35      	bgt.n	800dd36 <_printf_float+0x3ae>
 800dcca:	f04f 0800 	mov.w	r8, #0
 800dcce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcd2:	f104 0a1a 	add.w	sl, r4, #26
 800dcd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcda:	1a9b      	subs	r3, r3, r2
 800dcdc:	eba3 0309 	sub.w	r3, r3, r9
 800dce0:	4543      	cmp	r3, r8
 800dce2:	f77f af79 	ble.w	800dbd8 <_printf_float+0x250>
 800dce6:	2301      	movs	r3, #1
 800dce8:	4652      	mov	r2, sl
 800dcea:	4631      	mov	r1, r6
 800dcec:	4628      	mov	r0, r5
 800dcee:	47b8      	blx	r7
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	f43f aeaa 	beq.w	800da4a <_printf_float+0xc2>
 800dcf6:	f108 0801 	add.w	r8, r8, #1
 800dcfa:	e7ec      	b.n	800dcd6 <_printf_float+0x34e>
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	4631      	mov	r1, r6
 800dd00:	4642      	mov	r2, r8
 800dd02:	4628      	mov	r0, r5
 800dd04:	47b8      	blx	r7
 800dd06:	3001      	adds	r0, #1
 800dd08:	d1c0      	bne.n	800dc8c <_printf_float+0x304>
 800dd0a:	e69e      	b.n	800da4a <_printf_float+0xc2>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4628      	mov	r0, r5
 800dd12:	9205      	str	r2, [sp, #20]
 800dd14:	47b8      	blx	r7
 800dd16:	3001      	adds	r0, #1
 800dd18:	f43f ae97 	beq.w	800da4a <_printf_float+0xc2>
 800dd1c:	9a05      	ldr	r2, [sp, #20]
 800dd1e:	f10b 0b01 	add.w	fp, fp, #1
 800dd22:	e7b9      	b.n	800dc98 <_printf_float+0x310>
 800dd24:	ee18 3a10 	vmov	r3, s16
 800dd28:	4652      	mov	r2, sl
 800dd2a:	4631      	mov	r1, r6
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	47b8      	blx	r7
 800dd30:	3001      	adds	r0, #1
 800dd32:	d1be      	bne.n	800dcb2 <_printf_float+0x32a>
 800dd34:	e689      	b.n	800da4a <_printf_float+0xc2>
 800dd36:	9a05      	ldr	r2, [sp, #20]
 800dd38:	464b      	mov	r3, r9
 800dd3a:	4442      	add	r2, r8
 800dd3c:	4631      	mov	r1, r6
 800dd3e:	4628      	mov	r0, r5
 800dd40:	47b8      	blx	r7
 800dd42:	3001      	adds	r0, #1
 800dd44:	d1c1      	bne.n	800dcca <_printf_float+0x342>
 800dd46:	e680      	b.n	800da4a <_printf_float+0xc2>
 800dd48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd4a:	2a01      	cmp	r2, #1
 800dd4c:	dc01      	bgt.n	800dd52 <_printf_float+0x3ca>
 800dd4e:	07db      	lsls	r3, r3, #31
 800dd50:	d538      	bpl.n	800ddc4 <_printf_float+0x43c>
 800dd52:	2301      	movs	r3, #1
 800dd54:	4642      	mov	r2, r8
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	f43f ae74 	beq.w	800da4a <_printf_float+0xc2>
 800dd62:	ee18 3a10 	vmov	r3, s16
 800dd66:	4652      	mov	r2, sl
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	f43f ae6b 	beq.w	800da4a <_printf_float+0xc2>
 800dd74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd78:	2200      	movs	r2, #0
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f7f2 fecc 	bl	8000b18 <__aeabi_dcmpeq>
 800dd80:	b9d8      	cbnz	r0, 800ddba <_printf_float+0x432>
 800dd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd84:	f108 0201 	add.w	r2, r8, #1
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	4631      	mov	r1, r6
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	47b8      	blx	r7
 800dd90:	3001      	adds	r0, #1
 800dd92:	d10e      	bne.n	800ddb2 <_printf_float+0x42a>
 800dd94:	e659      	b.n	800da4a <_printf_float+0xc2>
 800dd96:	2301      	movs	r3, #1
 800dd98:	4652      	mov	r2, sl
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	47b8      	blx	r7
 800dda0:	3001      	adds	r0, #1
 800dda2:	f43f ae52 	beq.w	800da4a <_printf_float+0xc2>
 800dda6:	f108 0801 	add.w	r8, r8, #1
 800ddaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddac:	3b01      	subs	r3, #1
 800ddae:	4543      	cmp	r3, r8
 800ddb0:	dcf1      	bgt.n	800dd96 <_printf_float+0x40e>
 800ddb2:	464b      	mov	r3, r9
 800ddb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ddb8:	e6dc      	b.n	800db74 <_printf_float+0x1ec>
 800ddba:	f04f 0800 	mov.w	r8, #0
 800ddbe:	f104 0a1a 	add.w	sl, r4, #26
 800ddc2:	e7f2      	b.n	800ddaa <_printf_float+0x422>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	4642      	mov	r2, r8
 800ddc8:	e7df      	b.n	800dd8a <_printf_float+0x402>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	464a      	mov	r2, r9
 800ddce:	4631      	mov	r1, r6
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	47b8      	blx	r7
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	f43f ae38 	beq.w	800da4a <_printf_float+0xc2>
 800ddda:	f108 0801 	add.w	r8, r8, #1
 800ddde:	68e3      	ldr	r3, [r4, #12]
 800dde0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dde2:	1a5b      	subs	r3, r3, r1
 800dde4:	4543      	cmp	r3, r8
 800dde6:	dcf0      	bgt.n	800ddca <_printf_float+0x442>
 800dde8:	e6fa      	b.n	800dbe0 <_printf_float+0x258>
 800ddea:	f04f 0800 	mov.w	r8, #0
 800ddee:	f104 0919 	add.w	r9, r4, #25
 800ddf2:	e7f4      	b.n	800ddde <_printf_float+0x456>

0800ddf4 <_printf_common>:
 800ddf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf8:	4616      	mov	r6, r2
 800ddfa:	4699      	mov	r9, r3
 800ddfc:	688a      	ldr	r2, [r1, #8]
 800ddfe:	690b      	ldr	r3, [r1, #16]
 800de00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de04:	4293      	cmp	r3, r2
 800de06:	bfb8      	it	lt
 800de08:	4613      	movlt	r3, r2
 800de0a:	6033      	str	r3, [r6, #0]
 800de0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de10:	4607      	mov	r7, r0
 800de12:	460c      	mov	r4, r1
 800de14:	b10a      	cbz	r2, 800de1a <_printf_common+0x26>
 800de16:	3301      	adds	r3, #1
 800de18:	6033      	str	r3, [r6, #0]
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	0699      	lsls	r1, r3, #26
 800de1e:	bf42      	ittt	mi
 800de20:	6833      	ldrmi	r3, [r6, #0]
 800de22:	3302      	addmi	r3, #2
 800de24:	6033      	strmi	r3, [r6, #0]
 800de26:	6825      	ldr	r5, [r4, #0]
 800de28:	f015 0506 	ands.w	r5, r5, #6
 800de2c:	d106      	bne.n	800de3c <_printf_common+0x48>
 800de2e:	f104 0a19 	add.w	sl, r4, #25
 800de32:	68e3      	ldr	r3, [r4, #12]
 800de34:	6832      	ldr	r2, [r6, #0]
 800de36:	1a9b      	subs	r3, r3, r2
 800de38:	42ab      	cmp	r3, r5
 800de3a:	dc26      	bgt.n	800de8a <_printf_common+0x96>
 800de3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de40:	1e13      	subs	r3, r2, #0
 800de42:	6822      	ldr	r2, [r4, #0]
 800de44:	bf18      	it	ne
 800de46:	2301      	movne	r3, #1
 800de48:	0692      	lsls	r2, r2, #26
 800de4a:	d42b      	bmi.n	800dea4 <_printf_common+0xb0>
 800de4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de50:	4649      	mov	r1, r9
 800de52:	4638      	mov	r0, r7
 800de54:	47c0      	blx	r8
 800de56:	3001      	adds	r0, #1
 800de58:	d01e      	beq.n	800de98 <_printf_common+0xa4>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	68e5      	ldr	r5, [r4, #12]
 800de5e:	6832      	ldr	r2, [r6, #0]
 800de60:	f003 0306 	and.w	r3, r3, #6
 800de64:	2b04      	cmp	r3, #4
 800de66:	bf08      	it	eq
 800de68:	1aad      	subeq	r5, r5, r2
 800de6a:	68a3      	ldr	r3, [r4, #8]
 800de6c:	6922      	ldr	r2, [r4, #16]
 800de6e:	bf0c      	ite	eq
 800de70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de74:	2500      	movne	r5, #0
 800de76:	4293      	cmp	r3, r2
 800de78:	bfc4      	itt	gt
 800de7a:	1a9b      	subgt	r3, r3, r2
 800de7c:	18ed      	addgt	r5, r5, r3
 800de7e:	2600      	movs	r6, #0
 800de80:	341a      	adds	r4, #26
 800de82:	42b5      	cmp	r5, r6
 800de84:	d11a      	bne.n	800debc <_printf_common+0xc8>
 800de86:	2000      	movs	r0, #0
 800de88:	e008      	b.n	800de9c <_printf_common+0xa8>
 800de8a:	2301      	movs	r3, #1
 800de8c:	4652      	mov	r2, sl
 800de8e:	4649      	mov	r1, r9
 800de90:	4638      	mov	r0, r7
 800de92:	47c0      	blx	r8
 800de94:	3001      	adds	r0, #1
 800de96:	d103      	bne.n	800dea0 <_printf_common+0xac>
 800de98:	f04f 30ff 	mov.w	r0, #4294967295
 800de9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea0:	3501      	adds	r5, #1
 800dea2:	e7c6      	b.n	800de32 <_printf_common+0x3e>
 800dea4:	18e1      	adds	r1, r4, r3
 800dea6:	1c5a      	adds	r2, r3, #1
 800dea8:	2030      	movs	r0, #48	; 0x30
 800deaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800deae:	4422      	add	r2, r4
 800deb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800deb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800deb8:	3302      	adds	r3, #2
 800deba:	e7c7      	b.n	800de4c <_printf_common+0x58>
 800debc:	2301      	movs	r3, #1
 800debe:	4622      	mov	r2, r4
 800dec0:	4649      	mov	r1, r9
 800dec2:	4638      	mov	r0, r7
 800dec4:	47c0      	blx	r8
 800dec6:	3001      	adds	r0, #1
 800dec8:	d0e6      	beq.n	800de98 <_printf_common+0xa4>
 800deca:	3601      	adds	r6, #1
 800decc:	e7d9      	b.n	800de82 <_printf_common+0x8e>
	...

0800ded0 <_printf_i>:
 800ded0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	460c      	mov	r4, r1
 800ded6:	4691      	mov	r9, r2
 800ded8:	7e27      	ldrb	r7, [r4, #24]
 800deda:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dedc:	2f78      	cmp	r7, #120	; 0x78
 800dede:	4680      	mov	r8, r0
 800dee0:	469a      	mov	sl, r3
 800dee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dee6:	d807      	bhi.n	800def8 <_printf_i+0x28>
 800dee8:	2f62      	cmp	r7, #98	; 0x62
 800deea:	d80a      	bhi.n	800df02 <_printf_i+0x32>
 800deec:	2f00      	cmp	r7, #0
 800deee:	f000 80d8 	beq.w	800e0a2 <_printf_i+0x1d2>
 800def2:	2f58      	cmp	r7, #88	; 0x58
 800def4:	f000 80a3 	beq.w	800e03e <_printf_i+0x16e>
 800def8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800defc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df00:	e03a      	b.n	800df78 <_printf_i+0xa8>
 800df02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df06:	2b15      	cmp	r3, #21
 800df08:	d8f6      	bhi.n	800def8 <_printf_i+0x28>
 800df0a:	a001      	add	r0, pc, #4	; (adr r0, 800df10 <_printf_i+0x40>)
 800df0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800df10:	0800df69 	.word	0x0800df69
 800df14:	0800df7d 	.word	0x0800df7d
 800df18:	0800def9 	.word	0x0800def9
 800df1c:	0800def9 	.word	0x0800def9
 800df20:	0800def9 	.word	0x0800def9
 800df24:	0800def9 	.word	0x0800def9
 800df28:	0800df7d 	.word	0x0800df7d
 800df2c:	0800def9 	.word	0x0800def9
 800df30:	0800def9 	.word	0x0800def9
 800df34:	0800def9 	.word	0x0800def9
 800df38:	0800def9 	.word	0x0800def9
 800df3c:	0800e089 	.word	0x0800e089
 800df40:	0800dfad 	.word	0x0800dfad
 800df44:	0800e06b 	.word	0x0800e06b
 800df48:	0800def9 	.word	0x0800def9
 800df4c:	0800def9 	.word	0x0800def9
 800df50:	0800e0ab 	.word	0x0800e0ab
 800df54:	0800def9 	.word	0x0800def9
 800df58:	0800dfad 	.word	0x0800dfad
 800df5c:	0800def9 	.word	0x0800def9
 800df60:	0800def9 	.word	0x0800def9
 800df64:	0800e073 	.word	0x0800e073
 800df68:	680b      	ldr	r3, [r1, #0]
 800df6a:	1d1a      	adds	r2, r3, #4
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	600a      	str	r2, [r1, #0]
 800df70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df78:	2301      	movs	r3, #1
 800df7a:	e0a3      	b.n	800e0c4 <_printf_i+0x1f4>
 800df7c:	6825      	ldr	r5, [r4, #0]
 800df7e:	6808      	ldr	r0, [r1, #0]
 800df80:	062e      	lsls	r6, r5, #24
 800df82:	f100 0304 	add.w	r3, r0, #4
 800df86:	d50a      	bpl.n	800df9e <_printf_i+0xce>
 800df88:	6805      	ldr	r5, [r0, #0]
 800df8a:	600b      	str	r3, [r1, #0]
 800df8c:	2d00      	cmp	r5, #0
 800df8e:	da03      	bge.n	800df98 <_printf_i+0xc8>
 800df90:	232d      	movs	r3, #45	; 0x2d
 800df92:	426d      	negs	r5, r5
 800df94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df98:	485e      	ldr	r0, [pc, #376]	; (800e114 <_printf_i+0x244>)
 800df9a:	230a      	movs	r3, #10
 800df9c:	e019      	b.n	800dfd2 <_printf_i+0x102>
 800df9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dfa2:	6805      	ldr	r5, [r0, #0]
 800dfa4:	600b      	str	r3, [r1, #0]
 800dfa6:	bf18      	it	ne
 800dfa8:	b22d      	sxthne	r5, r5
 800dfaa:	e7ef      	b.n	800df8c <_printf_i+0xbc>
 800dfac:	680b      	ldr	r3, [r1, #0]
 800dfae:	6825      	ldr	r5, [r4, #0]
 800dfb0:	1d18      	adds	r0, r3, #4
 800dfb2:	6008      	str	r0, [r1, #0]
 800dfb4:	0628      	lsls	r0, r5, #24
 800dfb6:	d501      	bpl.n	800dfbc <_printf_i+0xec>
 800dfb8:	681d      	ldr	r5, [r3, #0]
 800dfba:	e002      	b.n	800dfc2 <_printf_i+0xf2>
 800dfbc:	0669      	lsls	r1, r5, #25
 800dfbe:	d5fb      	bpl.n	800dfb8 <_printf_i+0xe8>
 800dfc0:	881d      	ldrh	r5, [r3, #0]
 800dfc2:	4854      	ldr	r0, [pc, #336]	; (800e114 <_printf_i+0x244>)
 800dfc4:	2f6f      	cmp	r7, #111	; 0x6f
 800dfc6:	bf0c      	ite	eq
 800dfc8:	2308      	moveq	r3, #8
 800dfca:	230a      	movne	r3, #10
 800dfcc:	2100      	movs	r1, #0
 800dfce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfd2:	6866      	ldr	r6, [r4, #4]
 800dfd4:	60a6      	str	r6, [r4, #8]
 800dfd6:	2e00      	cmp	r6, #0
 800dfd8:	bfa2      	ittt	ge
 800dfda:	6821      	ldrge	r1, [r4, #0]
 800dfdc:	f021 0104 	bicge.w	r1, r1, #4
 800dfe0:	6021      	strge	r1, [r4, #0]
 800dfe2:	b90d      	cbnz	r5, 800dfe8 <_printf_i+0x118>
 800dfe4:	2e00      	cmp	r6, #0
 800dfe6:	d04d      	beq.n	800e084 <_printf_i+0x1b4>
 800dfe8:	4616      	mov	r6, r2
 800dfea:	fbb5 f1f3 	udiv	r1, r5, r3
 800dfee:	fb03 5711 	mls	r7, r3, r1, r5
 800dff2:	5dc7      	ldrb	r7, [r0, r7]
 800dff4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dff8:	462f      	mov	r7, r5
 800dffa:	42bb      	cmp	r3, r7
 800dffc:	460d      	mov	r5, r1
 800dffe:	d9f4      	bls.n	800dfea <_printf_i+0x11a>
 800e000:	2b08      	cmp	r3, #8
 800e002:	d10b      	bne.n	800e01c <_printf_i+0x14c>
 800e004:	6823      	ldr	r3, [r4, #0]
 800e006:	07df      	lsls	r7, r3, #31
 800e008:	d508      	bpl.n	800e01c <_printf_i+0x14c>
 800e00a:	6923      	ldr	r3, [r4, #16]
 800e00c:	6861      	ldr	r1, [r4, #4]
 800e00e:	4299      	cmp	r1, r3
 800e010:	bfde      	ittt	le
 800e012:	2330      	movle	r3, #48	; 0x30
 800e014:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e018:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e01c:	1b92      	subs	r2, r2, r6
 800e01e:	6122      	str	r2, [r4, #16]
 800e020:	f8cd a000 	str.w	sl, [sp]
 800e024:	464b      	mov	r3, r9
 800e026:	aa03      	add	r2, sp, #12
 800e028:	4621      	mov	r1, r4
 800e02a:	4640      	mov	r0, r8
 800e02c:	f7ff fee2 	bl	800ddf4 <_printf_common>
 800e030:	3001      	adds	r0, #1
 800e032:	d14c      	bne.n	800e0ce <_printf_i+0x1fe>
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	b004      	add	sp, #16
 800e03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e03e:	4835      	ldr	r0, [pc, #212]	; (800e114 <_printf_i+0x244>)
 800e040:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e044:	6823      	ldr	r3, [r4, #0]
 800e046:	680e      	ldr	r6, [r1, #0]
 800e048:	061f      	lsls	r7, r3, #24
 800e04a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e04e:	600e      	str	r6, [r1, #0]
 800e050:	d514      	bpl.n	800e07c <_printf_i+0x1ac>
 800e052:	07d9      	lsls	r1, r3, #31
 800e054:	bf44      	itt	mi
 800e056:	f043 0320 	orrmi.w	r3, r3, #32
 800e05a:	6023      	strmi	r3, [r4, #0]
 800e05c:	b91d      	cbnz	r5, 800e066 <_printf_i+0x196>
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	f023 0320 	bic.w	r3, r3, #32
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	2310      	movs	r3, #16
 800e068:	e7b0      	b.n	800dfcc <_printf_i+0xfc>
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	f043 0320 	orr.w	r3, r3, #32
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	2378      	movs	r3, #120	; 0x78
 800e074:	4828      	ldr	r0, [pc, #160]	; (800e118 <_printf_i+0x248>)
 800e076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e07a:	e7e3      	b.n	800e044 <_printf_i+0x174>
 800e07c:	065e      	lsls	r6, r3, #25
 800e07e:	bf48      	it	mi
 800e080:	b2ad      	uxthmi	r5, r5
 800e082:	e7e6      	b.n	800e052 <_printf_i+0x182>
 800e084:	4616      	mov	r6, r2
 800e086:	e7bb      	b.n	800e000 <_printf_i+0x130>
 800e088:	680b      	ldr	r3, [r1, #0]
 800e08a:	6826      	ldr	r6, [r4, #0]
 800e08c:	6960      	ldr	r0, [r4, #20]
 800e08e:	1d1d      	adds	r5, r3, #4
 800e090:	600d      	str	r5, [r1, #0]
 800e092:	0635      	lsls	r5, r6, #24
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	d501      	bpl.n	800e09c <_printf_i+0x1cc>
 800e098:	6018      	str	r0, [r3, #0]
 800e09a:	e002      	b.n	800e0a2 <_printf_i+0x1d2>
 800e09c:	0671      	lsls	r1, r6, #25
 800e09e:	d5fb      	bpl.n	800e098 <_printf_i+0x1c8>
 800e0a0:	8018      	strh	r0, [r3, #0]
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	6123      	str	r3, [r4, #16]
 800e0a6:	4616      	mov	r6, r2
 800e0a8:	e7ba      	b.n	800e020 <_printf_i+0x150>
 800e0aa:	680b      	ldr	r3, [r1, #0]
 800e0ac:	1d1a      	adds	r2, r3, #4
 800e0ae:	600a      	str	r2, [r1, #0]
 800e0b0:	681e      	ldr	r6, [r3, #0]
 800e0b2:	6862      	ldr	r2, [r4, #4]
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7f2 f8ba 	bl	8000230 <memchr>
 800e0bc:	b108      	cbz	r0, 800e0c2 <_printf_i+0x1f2>
 800e0be:	1b80      	subs	r0, r0, r6
 800e0c0:	6060      	str	r0, [r4, #4]
 800e0c2:	6863      	ldr	r3, [r4, #4]
 800e0c4:	6123      	str	r3, [r4, #16]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0cc:	e7a8      	b.n	800e020 <_printf_i+0x150>
 800e0ce:	6923      	ldr	r3, [r4, #16]
 800e0d0:	4632      	mov	r2, r6
 800e0d2:	4649      	mov	r1, r9
 800e0d4:	4640      	mov	r0, r8
 800e0d6:	47d0      	blx	sl
 800e0d8:	3001      	adds	r0, #1
 800e0da:	d0ab      	beq.n	800e034 <_printf_i+0x164>
 800e0dc:	6823      	ldr	r3, [r4, #0]
 800e0de:	079b      	lsls	r3, r3, #30
 800e0e0:	d413      	bmi.n	800e10a <_printf_i+0x23a>
 800e0e2:	68e0      	ldr	r0, [r4, #12]
 800e0e4:	9b03      	ldr	r3, [sp, #12]
 800e0e6:	4298      	cmp	r0, r3
 800e0e8:	bfb8      	it	lt
 800e0ea:	4618      	movlt	r0, r3
 800e0ec:	e7a4      	b.n	800e038 <_printf_i+0x168>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	4632      	mov	r2, r6
 800e0f2:	4649      	mov	r1, r9
 800e0f4:	4640      	mov	r0, r8
 800e0f6:	47d0      	blx	sl
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	d09b      	beq.n	800e034 <_printf_i+0x164>
 800e0fc:	3501      	adds	r5, #1
 800e0fe:	68e3      	ldr	r3, [r4, #12]
 800e100:	9903      	ldr	r1, [sp, #12]
 800e102:	1a5b      	subs	r3, r3, r1
 800e104:	42ab      	cmp	r3, r5
 800e106:	dcf2      	bgt.n	800e0ee <_printf_i+0x21e>
 800e108:	e7eb      	b.n	800e0e2 <_printf_i+0x212>
 800e10a:	2500      	movs	r5, #0
 800e10c:	f104 0619 	add.w	r6, r4, #25
 800e110:	e7f5      	b.n	800e0fe <_printf_i+0x22e>
 800e112:	bf00      	nop
 800e114:	08013196 	.word	0x08013196
 800e118:	080131a7 	.word	0x080131a7

0800e11c <iprintf>:
 800e11c:	b40f      	push	{r0, r1, r2, r3}
 800e11e:	4b0a      	ldr	r3, [pc, #40]	; (800e148 <iprintf+0x2c>)
 800e120:	b513      	push	{r0, r1, r4, lr}
 800e122:	681c      	ldr	r4, [r3, #0]
 800e124:	b124      	cbz	r4, 800e130 <iprintf+0x14>
 800e126:	69a3      	ldr	r3, [r4, #24]
 800e128:	b913      	cbnz	r3, 800e130 <iprintf+0x14>
 800e12a:	4620      	mov	r0, r4
 800e12c:	f001 ff96 	bl	801005c <__sinit>
 800e130:	ab05      	add	r3, sp, #20
 800e132:	9a04      	ldr	r2, [sp, #16]
 800e134:	68a1      	ldr	r1, [r4, #8]
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	4620      	mov	r0, r4
 800e13a:	f003 f9bf 	bl	80114bc <_vfiprintf_r>
 800e13e:	b002      	add	sp, #8
 800e140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e144:	b004      	add	sp, #16
 800e146:	4770      	bx	lr
 800e148:	2000002c 	.word	0x2000002c

0800e14c <_puts_r>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	460e      	mov	r6, r1
 800e150:	4605      	mov	r5, r0
 800e152:	b118      	cbz	r0, 800e15c <_puts_r+0x10>
 800e154:	6983      	ldr	r3, [r0, #24]
 800e156:	b90b      	cbnz	r3, 800e15c <_puts_r+0x10>
 800e158:	f001 ff80 	bl	801005c <__sinit>
 800e15c:	69ab      	ldr	r3, [r5, #24]
 800e15e:	68ac      	ldr	r4, [r5, #8]
 800e160:	b913      	cbnz	r3, 800e168 <_puts_r+0x1c>
 800e162:	4628      	mov	r0, r5
 800e164:	f001 ff7a 	bl	801005c <__sinit>
 800e168:	4b2c      	ldr	r3, [pc, #176]	; (800e21c <_puts_r+0xd0>)
 800e16a:	429c      	cmp	r4, r3
 800e16c:	d120      	bne.n	800e1b0 <_puts_r+0x64>
 800e16e:	686c      	ldr	r4, [r5, #4]
 800e170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e172:	07db      	lsls	r3, r3, #31
 800e174:	d405      	bmi.n	800e182 <_puts_r+0x36>
 800e176:	89a3      	ldrh	r3, [r4, #12]
 800e178:	0598      	lsls	r0, r3, #22
 800e17a:	d402      	bmi.n	800e182 <_puts_r+0x36>
 800e17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e17e:	f002 fb7e 	bl	801087e <__retarget_lock_acquire_recursive>
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	0719      	lsls	r1, r3, #28
 800e186:	d51d      	bpl.n	800e1c4 <_puts_r+0x78>
 800e188:	6923      	ldr	r3, [r4, #16]
 800e18a:	b1db      	cbz	r3, 800e1c4 <_puts_r+0x78>
 800e18c:	3e01      	subs	r6, #1
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e194:	3b01      	subs	r3, #1
 800e196:	60a3      	str	r3, [r4, #8]
 800e198:	bb39      	cbnz	r1, 800e1ea <_puts_r+0x9e>
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	da38      	bge.n	800e210 <_puts_r+0xc4>
 800e19e:	4622      	mov	r2, r4
 800e1a0:	210a      	movs	r1, #10
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f000 ff08 	bl	800efb8 <__swbuf_r>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d011      	beq.n	800e1d0 <_puts_r+0x84>
 800e1ac:	250a      	movs	r5, #10
 800e1ae:	e011      	b.n	800e1d4 <_puts_r+0x88>
 800e1b0:	4b1b      	ldr	r3, [pc, #108]	; (800e220 <_puts_r+0xd4>)
 800e1b2:	429c      	cmp	r4, r3
 800e1b4:	d101      	bne.n	800e1ba <_puts_r+0x6e>
 800e1b6:	68ac      	ldr	r4, [r5, #8]
 800e1b8:	e7da      	b.n	800e170 <_puts_r+0x24>
 800e1ba:	4b1a      	ldr	r3, [pc, #104]	; (800e224 <_puts_r+0xd8>)
 800e1bc:	429c      	cmp	r4, r3
 800e1be:	bf08      	it	eq
 800e1c0:	68ec      	ldreq	r4, [r5, #12]
 800e1c2:	e7d5      	b.n	800e170 <_puts_r+0x24>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 ff48 	bl	800f05c <__swsetup_r>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d0dd      	beq.n	800e18c <_puts_r+0x40>
 800e1d0:	f04f 35ff 	mov.w	r5, #4294967295
 800e1d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1d6:	07da      	lsls	r2, r3, #31
 800e1d8:	d405      	bmi.n	800e1e6 <_puts_r+0x9a>
 800e1da:	89a3      	ldrh	r3, [r4, #12]
 800e1dc:	059b      	lsls	r3, r3, #22
 800e1de:	d402      	bmi.n	800e1e6 <_puts_r+0x9a>
 800e1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1e2:	f002 fb4d 	bl	8010880 <__retarget_lock_release_recursive>
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	da04      	bge.n	800e1f8 <_puts_r+0xac>
 800e1ee:	69a2      	ldr	r2, [r4, #24]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	dc06      	bgt.n	800e202 <_puts_r+0xb6>
 800e1f4:	290a      	cmp	r1, #10
 800e1f6:	d004      	beq.n	800e202 <_puts_r+0xb6>
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	6022      	str	r2, [r4, #0]
 800e1fe:	7019      	strb	r1, [r3, #0]
 800e200:	e7c5      	b.n	800e18e <_puts_r+0x42>
 800e202:	4622      	mov	r2, r4
 800e204:	4628      	mov	r0, r5
 800e206:	f000 fed7 	bl	800efb8 <__swbuf_r>
 800e20a:	3001      	adds	r0, #1
 800e20c:	d1bf      	bne.n	800e18e <_puts_r+0x42>
 800e20e:	e7df      	b.n	800e1d0 <_puts_r+0x84>
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	250a      	movs	r5, #10
 800e214:	1c5a      	adds	r2, r3, #1
 800e216:	6022      	str	r2, [r4, #0]
 800e218:	701d      	strb	r5, [r3, #0]
 800e21a:	e7db      	b.n	800e1d4 <_puts_r+0x88>
 800e21c:	080133c0 	.word	0x080133c0
 800e220:	080133e0 	.word	0x080133e0
 800e224:	080133a0 	.word	0x080133a0

0800e228 <puts>:
 800e228:	4b02      	ldr	r3, [pc, #8]	; (800e234 <puts+0xc>)
 800e22a:	4601      	mov	r1, r0
 800e22c:	6818      	ldr	r0, [r3, #0]
 800e22e:	f7ff bf8d 	b.w	800e14c <_puts_r>
 800e232:	bf00      	nop
 800e234:	2000002c 	.word	0x2000002c

0800e238 <sulp>:
 800e238:	b570      	push	{r4, r5, r6, lr}
 800e23a:	4604      	mov	r4, r0
 800e23c:	460d      	mov	r5, r1
 800e23e:	ec45 4b10 	vmov	d0, r4, r5
 800e242:	4616      	mov	r6, r2
 800e244:	f002 ff08 	bl	8011058 <__ulp>
 800e248:	ec51 0b10 	vmov	r0, r1, d0
 800e24c:	b17e      	cbz	r6, 800e26e <sulp+0x36>
 800e24e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e252:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e256:	2b00      	cmp	r3, #0
 800e258:	dd09      	ble.n	800e26e <sulp+0x36>
 800e25a:	051b      	lsls	r3, r3, #20
 800e25c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e260:	2400      	movs	r4, #0
 800e262:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e266:	4622      	mov	r2, r4
 800e268:	462b      	mov	r3, r5
 800e26a:	f7f2 f9ed 	bl	8000648 <__aeabi_dmul>
 800e26e:	bd70      	pop	{r4, r5, r6, pc}

0800e270 <_strtod_l>:
 800e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e274:	b0a3      	sub	sp, #140	; 0x8c
 800e276:	461f      	mov	r7, r3
 800e278:	2300      	movs	r3, #0
 800e27a:	931e      	str	r3, [sp, #120]	; 0x78
 800e27c:	4ba4      	ldr	r3, [pc, #656]	; (800e510 <_strtod_l+0x2a0>)
 800e27e:	9219      	str	r2, [sp, #100]	; 0x64
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	9307      	str	r3, [sp, #28]
 800e284:	4604      	mov	r4, r0
 800e286:	4618      	mov	r0, r3
 800e288:	4688      	mov	r8, r1
 800e28a:	f7f1 ffc9 	bl	8000220 <strlen>
 800e28e:	f04f 0a00 	mov.w	sl, #0
 800e292:	4605      	mov	r5, r0
 800e294:	f04f 0b00 	mov.w	fp, #0
 800e298:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e29c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e29e:	781a      	ldrb	r2, [r3, #0]
 800e2a0:	2a2b      	cmp	r2, #43	; 0x2b
 800e2a2:	d04c      	beq.n	800e33e <_strtod_l+0xce>
 800e2a4:	d839      	bhi.n	800e31a <_strtod_l+0xaa>
 800e2a6:	2a0d      	cmp	r2, #13
 800e2a8:	d832      	bhi.n	800e310 <_strtod_l+0xa0>
 800e2aa:	2a08      	cmp	r2, #8
 800e2ac:	d832      	bhi.n	800e314 <_strtod_l+0xa4>
 800e2ae:	2a00      	cmp	r2, #0
 800e2b0:	d03c      	beq.n	800e32c <_strtod_l+0xbc>
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	930e      	str	r3, [sp, #56]	; 0x38
 800e2b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e2b8:	7833      	ldrb	r3, [r6, #0]
 800e2ba:	2b30      	cmp	r3, #48	; 0x30
 800e2bc:	f040 80b4 	bne.w	800e428 <_strtod_l+0x1b8>
 800e2c0:	7873      	ldrb	r3, [r6, #1]
 800e2c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2c6:	2b58      	cmp	r3, #88	; 0x58
 800e2c8:	d16c      	bne.n	800e3a4 <_strtod_l+0x134>
 800e2ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2cc:	9301      	str	r3, [sp, #4]
 800e2ce:	ab1e      	add	r3, sp, #120	; 0x78
 800e2d0:	9702      	str	r7, [sp, #8]
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	4a8f      	ldr	r2, [pc, #572]	; (800e514 <_strtod_l+0x2a4>)
 800e2d6:	ab1f      	add	r3, sp, #124	; 0x7c
 800e2d8:	a91d      	add	r1, sp, #116	; 0x74
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f001 ffc2 	bl	8010264 <__gethex>
 800e2e0:	f010 0707 	ands.w	r7, r0, #7
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	d005      	beq.n	800e2f4 <_strtod_l+0x84>
 800e2e8:	2f06      	cmp	r7, #6
 800e2ea:	d12a      	bne.n	800e342 <_strtod_l+0xd2>
 800e2ec:	3601      	adds	r6, #1
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	961d      	str	r6, [sp, #116]	; 0x74
 800e2f2:	930e      	str	r3, [sp, #56]	; 0x38
 800e2f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f040 8596 	bne.w	800ee28 <_strtod_l+0xbb8>
 800e2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2fe:	b1db      	cbz	r3, 800e338 <_strtod_l+0xc8>
 800e300:	4652      	mov	r2, sl
 800e302:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e306:	ec43 2b10 	vmov	d0, r2, r3
 800e30a:	b023      	add	sp, #140	; 0x8c
 800e30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e310:	2a20      	cmp	r2, #32
 800e312:	d1ce      	bne.n	800e2b2 <_strtod_l+0x42>
 800e314:	3301      	adds	r3, #1
 800e316:	931d      	str	r3, [sp, #116]	; 0x74
 800e318:	e7c0      	b.n	800e29c <_strtod_l+0x2c>
 800e31a:	2a2d      	cmp	r2, #45	; 0x2d
 800e31c:	d1c9      	bne.n	800e2b2 <_strtod_l+0x42>
 800e31e:	2201      	movs	r2, #1
 800e320:	920e      	str	r2, [sp, #56]	; 0x38
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	921d      	str	r2, [sp, #116]	; 0x74
 800e326:	785b      	ldrb	r3, [r3, #1]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1c4      	bne.n	800e2b6 <_strtod_l+0x46>
 800e32c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e32e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e332:	2b00      	cmp	r3, #0
 800e334:	f040 8576 	bne.w	800ee24 <_strtod_l+0xbb4>
 800e338:	4652      	mov	r2, sl
 800e33a:	465b      	mov	r3, fp
 800e33c:	e7e3      	b.n	800e306 <_strtod_l+0x96>
 800e33e:	2200      	movs	r2, #0
 800e340:	e7ee      	b.n	800e320 <_strtod_l+0xb0>
 800e342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e344:	b13a      	cbz	r2, 800e356 <_strtod_l+0xe6>
 800e346:	2135      	movs	r1, #53	; 0x35
 800e348:	a820      	add	r0, sp, #128	; 0x80
 800e34a:	f002 ff90 	bl	801126e <__copybits>
 800e34e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e350:	4620      	mov	r0, r4
 800e352:	f002 fb55 	bl	8010a00 <_Bfree>
 800e356:	3f01      	subs	r7, #1
 800e358:	2f05      	cmp	r7, #5
 800e35a:	d807      	bhi.n	800e36c <_strtod_l+0xfc>
 800e35c:	e8df f007 	tbb	[pc, r7]
 800e360:	1d180b0e 	.word	0x1d180b0e
 800e364:	030e      	.short	0x030e
 800e366:	f04f 0b00 	mov.w	fp, #0
 800e36a:	46da      	mov	sl, fp
 800e36c:	0728      	lsls	r0, r5, #28
 800e36e:	d5c1      	bpl.n	800e2f4 <_strtod_l+0x84>
 800e370:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e374:	e7be      	b.n	800e2f4 <_strtod_l+0x84>
 800e376:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e37a:	e7f7      	b.n	800e36c <_strtod_l+0xfc>
 800e37c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e380:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e382:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e386:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e38a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e38e:	e7ed      	b.n	800e36c <_strtod_l+0xfc>
 800e390:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e518 <_strtod_l+0x2a8>
 800e394:	f04f 0a00 	mov.w	sl, #0
 800e398:	e7e8      	b.n	800e36c <_strtod_l+0xfc>
 800e39a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e39e:	f04f 3aff 	mov.w	sl, #4294967295
 800e3a2:	e7e3      	b.n	800e36c <_strtod_l+0xfc>
 800e3a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	921d      	str	r2, [sp, #116]	; 0x74
 800e3aa:	785b      	ldrb	r3, [r3, #1]
 800e3ac:	2b30      	cmp	r3, #48	; 0x30
 800e3ae:	d0f9      	beq.n	800e3a4 <_strtod_l+0x134>
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d09f      	beq.n	800e2f4 <_strtod_l+0x84>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	f04f 0900 	mov.w	r9, #0
 800e3ba:	9304      	str	r3, [sp, #16]
 800e3bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3be:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e3c4:	464f      	mov	r7, r9
 800e3c6:	220a      	movs	r2, #10
 800e3c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e3ca:	7806      	ldrb	r6, [r0, #0]
 800e3cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e3d0:	b2d9      	uxtb	r1, r3
 800e3d2:	2909      	cmp	r1, #9
 800e3d4:	d92a      	bls.n	800e42c <_strtod_l+0x1bc>
 800e3d6:	9907      	ldr	r1, [sp, #28]
 800e3d8:	462a      	mov	r2, r5
 800e3da:	f003 f9fc 	bl	80117d6 <strncmp>
 800e3de:	b398      	cbz	r0, 800e448 <_strtod_l+0x1d8>
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	4633      	mov	r3, r6
 800e3e4:	463d      	mov	r5, r7
 800e3e6:	9007      	str	r0, [sp, #28]
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	2b65      	cmp	r3, #101	; 0x65
 800e3ec:	d001      	beq.n	800e3f2 <_strtod_l+0x182>
 800e3ee:	2b45      	cmp	r3, #69	; 0x45
 800e3f0:	d118      	bne.n	800e424 <_strtod_l+0x1b4>
 800e3f2:	b91d      	cbnz	r5, 800e3fc <_strtod_l+0x18c>
 800e3f4:	9b04      	ldr	r3, [sp, #16]
 800e3f6:	4303      	orrs	r3, r0
 800e3f8:	d098      	beq.n	800e32c <_strtod_l+0xbc>
 800e3fa:	2500      	movs	r5, #0
 800e3fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e400:	f108 0301 	add.w	r3, r8, #1
 800e404:	931d      	str	r3, [sp, #116]	; 0x74
 800e406:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e40a:	2b2b      	cmp	r3, #43	; 0x2b
 800e40c:	d075      	beq.n	800e4fa <_strtod_l+0x28a>
 800e40e:	2b2d      	cmp	r3, #45	; 0x2d
 800e410:	d07b      	beq.n	800e50a <_strtod_l+0x29a>
 800e412:	f04f 0c00 	mov.w	ip, #0
 800e416:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e41a:	2909      	cmp	r1, #9
 800e41c:	f240 8082 	bls.w	800e524 <_strtod_l+0x2b4>
 800e420:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e424:	2600      	movs	r6, #0
 800e426:	e09d      	b.n	800e564 <_strtod_l+0x2f4>
 800e428:	2300      	movs	r3, #0
 800e42a:	e7c4      	b.n	800e3b6 <_strtod_l+0x146>
 800e42c:	2f08      	cmp	r7, #8
 800e42e:	bfd8      	it	le
 800e430:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e432:	f100 0001 	add.w	r0, r0, #1
 800e436:	bfda      	itte	le
 800e438:	fb02 3301 	mlale	r3, r2, r1, r3
 800e43c:	9309      	strle	r3, [sp, #36]	; 0x24
 800e43e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e442:	3701      	adds	r7, #1
 800e444:	901d      	str	r0, [sp, #116]	; 0x74
 800e446:	e7bf      	b.n	800e3c8 <_strtod_l+0x158>
 800e448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e44a:	195a      	adds	r2, r3, r5
 800e44c:	921d      	str	r2, [sp, #116]	; 0x74
 800e44e:	5d5b      	ldrb	r3, [r3, r5]
 800e450:	2f00      	cmp	r7, #0
 800e452:	d037      	beq.n	800e4c4 <_strtod_l+0x254>
 800e454:	9007      	str	r0, [sp, #28]
 800e456:	463d      	mov	r5, r7
 800e458:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e45c:	2a09      	cmp	r2, #9
 800e45e:	d912      	bls.n	800e486 <_strtod_l+0x216>
 800e460:	2201      	movs	r2, #1
 800e462:	e7c2      	b.n	800e3ea <_strtod_l+0x17a>
 800e464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e466:	1c5a      	adds	r2, r3, #1
 800e468:	921d      	str	r2, [sp, #116]	; 0x74
 800e46a:	785b      	ldrb	r3, [r3, #1]
 800e46c:	3001      	adds	r0, #1
 800e46e:	2b30      	cmp	r3, #48	; 0x30
 800e470:	d0f8      	beq.n	800e464 <_strtod_l+0x1f4>
 800e472:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e476:	2a08      	cmp	r2, #8
 800e478:	f200 84db 	bhi.w	800ee32 <_strtod_l+0xbc2>
 800e47c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e47e:	9007      	str	r0, [sp, #28]
 800e480:	2000      	movs	r0, #0
 800e482:	920a      	str	r2, [sp, #40]	; 0x28
 800e484:	4605      	mov	r5, r0
 800e486:	3b30      	subs	r3, #48	; 0x30
 800e488:	f100 0201 	add.w	r2, r0, #1
 800e48c:	d014      	beq.n	800e4b8 <_strtod_l+0x248>
 800e48e:	9907      	ldr	r1, [sp, #28]
 800e490:	4411      	add	r1, r2
 800e492:	9107      	str	r1, [sp, #28]
 800e494:	462a      	mov	r2, r5
 800e496:	eb00 0e05 	add.w	lr, r0, r5
 800e49a:	210a      	movs	r1, #10
 800e49c:	4572      	cmp	r2, lr
 800e49e:	d113      	bne.n	800e4c8 <_strtod_l+0x258>
 800e4a0:	182a      	adds	r2, r5, r0
 800e4a2:	2a08      	cmp	r2, #8
 800e4a4:	f105 0501 	add.w	r5, r5, #1
 800e4a8:	4405      	add	r5, r0
 800e4aa:	dc1c      	bgt.n	800e4e6 <_strtod_l+0x276>
 800e4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4ae:	220a      	movs	r2, #10
 800e4b0:	fb02 3301 	mla	r3, r2, r1, r3
 800e4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4ba:	1c59      	adds	r1, r3, #1
 800e4bc:	911d      	str	r1, [sp, #116]	; 0x74
 800e4be:	785b      	ldrb	r3, [r3, #1]
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	e7c9      	b.n	800e458 <_strtod_l+0x1e8>
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	e7d2      	b.n	800e46e <_strtod_l+0x1fe>
 800e4c8:	2a08      	cmp	r2, #8
 800e4ca:	dc04      	bgt.n	800e4d6 <_strtod_l+0x266>
 800e4cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e4ce:	434e      	muls	r6, r1
 800e4d0:	9609      	str	r6, [sp, #36]	; 0x24
 800e4d2:	3201      	adds	r2, #1
 800e4d4:	e7e2      	b.n	800e49c <_strtod_l+0x22c>
 800e4d6:	f102 0c01 	add.w	ip, r2, #1
 800e4da:	f1bc 0f10 	cmp.w	ip, #16
 800e4de:	bfd8      	it	le
 800e4e0:	fb01 f909 	mulle.w	r9, r1, r9
 800e4e4:	e7f5      	b.n	800e4d2 <_strtod_l+0x262>
 800e4e6:	2d10      	cmp	r5, #16
 800e4e8:	bfdc      	itt	le
 800e4ea:	220a      	movle	r2, #10
 800e4ec:	fb02 3909 	mlale	r9, r2, r9, r3
 800e4f0:	e7e1      	b.n	800e4b6 <_strtod_l+0x246>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	9307      	str	r3, [sp, #28]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	e77c      	b.n	800e3f4 <_strtod_l+0x184>
 800e4fa:	f04f 0c00 	mov.w	ip, #0
 800e4fe:	f108 0302 	add.w	r3, r8, #2
 800e502:	931d      	str	r3, [sp, #116]	; 0x74
 800e504:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e508:	e785      	b.n	800e416 <_strtod_l+0x1a6>
 800e50a:	f04f 0c01 	mov.w	ip, #1
 800e50e:	e7f6      	b.n	800e4fe <_strtod_l+0x28e>
 800e510:	0801346c 	.word	0x0801346c
 800e514:	080131b8 	.word	0x080131b8
 800e518:	7ff00000 	.word	0x7ff00000
 800e51c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e51e:	1c59      	adds	r1, r3, #1
 800e520:	911d      	str	r1, [sp, #116]	; 0x74
 800e522:	785b      	ldrb	r3, [r3, #1]
 800e524:	2b30      	cmp	r3, #48	; 0x30
 800e526:	d0f9      	beq.n	800e51c <_strtod_l+0x2ac>
 800e528:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e52c:	2908      	cmp	r1, #8
 800e52e:	f63f af79 	bhi.w	800e424 <_strtod_l+0x1b4>
 800e532:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e538:	9308      	str	r3, [sp, #32]
 800e53a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e53c:	1c59      	adds	r1, r3, #1
 800e53e:	911d      	str	r1, [sp, #116]	; 0x74
 800e540:	785b      	ldrb	r3, [r3, #1]
 800e542:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e546:	2e09      	cmp	r6, #9
 800e548:	d937      	bls.n	800e5ba <_strtod_l+0x34a>
 800e54a:	9e08      	ldr	r6, [sp, #32]
 800e54c:	1b89      	subs	r1, r1, r6
 800e54e:	2908      	cmp	r1, #8
 800e550:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e554:	dc02      	bgt.n	800e55c <_strtod_l+0x2ec>
 800e556:	4576      	cmp	r6, lr
 800e558:	bfa8      	it	ge
 800e55a:	4676      	movge	r6, lr
 800e55c:	f1bc 0f00 	cmp.w	ip, #0
 800e560:	d000      	beq.n	800e564 <_strtod_l+0x2f4>
 800e562:	4276      	negs	r6, r6
 800e564:	2d00      	cmp	r5, #0
 800e566:	d14f      	bne.n	800e608 <_strtod_l+0x398>
 800e568:	9904      	ldr	r1, [sp, #16]
 800e56a:	4301      	orrs	r1, r0
 800e56c:	f47f aec2 	bne.w	800e2f4 <_strtod_l+0x84>
 800e570:	2a00      	cmp	r2, #0
 800e572:	f47f aedb 	bne.w	800e32c <_strtod_l+0xbc>
 800e576:	2b69      	cmp	r3, #105	; 0x69
 800e578:	d027      	beq.n	800e5ca <_strtod_l+0x35a>
 800e57a:	dc24      	bgt.n	800e5c6 <_strtod_l+0x356>
 800e57c:	2b49      	cmp	r3, #73	; 0x49
 800e57e:	d024      	beq.n	800e5ca <_strtod_l+0x35a>
 800e580:	2b4e      	cmp	r3, #78	; 0x4e
 800e582:	f47f aed3 	bne.w	800e32c <_strtod_l+0xbc>
 800e586:	499e      	ldr	r1, [pc, #632]	; (800e800 <_strtod_l+0x590>)
 800e588:	a81d      	add	r0, sp, #116	; 0x74
 800e58a:	f002 f8c3 	bl	8010714 <__match>
 800e58e:	2800      	cmp	r0, #0
 800e590:	f43f aecc 	beq.w	800e32c <_strtod_l+0xbc>
 800e594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b28      	cmp	r3, #40	; 0x28
 800e59a:	d12d      	bne.n	800e5f8 <_strtod_l+0x388>
 800e59c:	4999      	ldr	r1, [pc, #612]	; (800e804 <_strtod_l+0x594>)
 800e59e:	aa20      	add	r2, sp, #128	; 0x80
 800e5a0:	a81d      	add	r0, sp, #116	; 0x74
 800e5a2:	f002 f8cb 	bl	801073c <__hexnan>
 800e5a6:	2805      	cmp	r0, #5
 800e5a8:	d126      	bne.n	800e5f8 <_strtod_l+0x388>
 800e5aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e5b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e5b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e5b8:	e69c      	b.n	800e2f4 <_strtod_l+0x84>
 800e5ba:	210a      	movs	r1, #10
 800e5bc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e5c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e5c4:	e7b9      	b.n	800e53a <_strtod_l+0x2ca>
 800e5c6:	2b6e      	cmp	r3, #110	; 0x6e
 800e5c8:	e7db      	b.n	800e582 <_strtod_l+0x312>
 800e5ca:	498f      	ldr	r1, [pc, #572]	; (800e808 <_strtod_l+0x598>)
 800e5cc:	a81d      	add	r0, sp, #116	; 0x74
 800e5ce:	f002 f8a1 	bl	8010714 <__match>
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f43f aeaa 	beq.w	800e32c <_strtod_l+0xbc>
 800e5d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5da:	498c      	ldr	r1, [pc, #560]	; (800e80c <_strtod_l+0x59c>)
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	a81d      	add	r0, sp, #116	; 0x74
 800e5e0:	931d      	str	r3, [sp, #116]	; 0x74
 800e5e2:	f002 f897 	bl	8010714 <__match>
 800e5e6:	b910      	cbnz	r0, 800e5ee <_strtod_l+0x37e>
 800e5e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	931d      	str	r3, [sp, #116]	; 0x74
 800e5ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e81c <_strtod_l+0x5ac>
 800e5f2:	f04f 0a00 	mov.w	sl, #0
 800e5f6:	e67d      	b.n	800e2f4 <_strtod_l+0x84>
 800e5f8:	4885      	ldr	r0, [pc, #532]	; (800e810 <_strtod_l+0x5a0>)
 800e5fa:	f003 f891 	bl	8011720 <nan>
 800e5fe:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e602:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e606:	e675      	b.n	800e2f4 <_strtod_l+0x84>
 800e608:	9b07      	ldr	r3, [sp, #28]
 800e60a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e60c:	1af3      	subs	r3, r6, r3
 800e60e:	2f00      	cmp	r7, #0
 800e610:	bf08      	it	eq
 800e612:	462f      	moveq	r7, r5
 800e614:	2d10      	cmp	r5, #16
 800e616:	9308      	str	r3, [sp, #32]
 800e618:	46a8      	mov	r8, r5
 800e61a:	bfa8      	it	ge
 800e61c:	f04f 0810 	movge.w	r8, #16
 800e620:	f7f1 ff98 	bl	8000554 <__aeabi_ui2d>
 800e624:	2d09      	cmp	r5, #9
 800e626:	4682      	mov	sl, r0
 800e628:	468b      	mov	fp, r1
 800e62a:	dd13      	ble.n	800e654 <_strtod_l+0x3e4>
 800e62c:	4b79      	ldr	r3, [pc, #484]	; (800e814 <_strtod_l+0x5a4>)
 800e62e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e636:	f7f2 f807 	bl	8000648 <__aeabi_dmul>
 800e63a:	4682      	mov	sl, r0
 800e63c:	4648      	mov	r0, r9
 800e63e:	468b      	mov	fp, r1
 800e640:	f7f1 ff88 	bl	8000554 <__aeabi_ui2d>
 800e644:	4602      	mov	r2, r0
 800e646:	460b      	mov	r3, r1
 800e648:	4650      	mov	r0, sl
 800e64a:	4659      	mov	r1, fp
 800e64c:	f7f1 fe46 	bl	80002dc <__adddf3>
 800e650:	4682      	mov	sl, r0
 800e652:	468b      	mov	fp, r1
 800e654:	2d0f      	cmp	r5, #15
 800e656:	dc38      	bgt.n	800e6ca <_strtod_l+0x45a>
 800e658:	9b08      	ldr	r3, [sp, #32]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f43f ae4a 	beq.w	800e2f4 <_strtod_l+0x84>
 800e660:	dd24      	ble.n	800e6ac <_strtod_l+0x43c>
 800e662:	2b16      	cmp	r3, #22
 800e664:	dc0b      	bgt.n	800e67e <_strtod_l+0x40e>
 800e666:	4d6b      	ldr	r5, [pc, #428]	; (800e814 <_strtod_l+0x5a4>)
 800e668:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e66c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e670:	4652      	mov	r2, sl
 800e672:	465b      	mov	r3, fp
 800e674:	f7f1 ffe8 	bl	8000648 <__aeabi_dmul>
 800e678:	4682      	mov	sl, r0
 800e67a:	468b      	mov	fp, r1
 800e67c:	e63a      	b.n	800e2f4 <_strtod_l+0x84>
 800e67e:	9a08      	ldr	r2, [sp, #32]
 800e680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e684:	4293      	cmp	r3, r2
 800e686:	db20      	blt.n	800e6ca <_strtod_l+0x45a>
 800e688:	4c62      	ldr	r4, [pc, #392]	; (800e814 <_strtod_l+0x5a4>)
 800e68a:	f1c5 050f 	rsb	r5, r5, #15
 800e68e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e692:	4652      	mov	r2, sl
 800e694:	465b      	mov	r3, fp
 800e696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e69a:	f7f1 ffd5 	bl	8000648 <__aeabi_dmul>
 800e69e:	9b08      	ldr	r3, [sp, #32]
 800e6a0:	1b5d      	subs	r5, r3, r5
 800e6a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e6a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e6aa:	e7e3      	b.n	800e674 <_strtod_l+0x404>
 800e6ac:	9b08      	ldr	r3, [sp, #32]
 800e6ae:	3316      	adds	r3, #22
 800e6b0:	db0b      	blt.n	800e6ca <_strtod_l+0x45a>
 800e6b2:	9b07      	ldr	r3, [sp, #28]
 800e6b4:	4a57      	ldr	r2, [pc, #348]	; (800e814 <_strtod_l+0x5a4>)
 800e6b6:	1b9e      	subs	r6, r3, r6
 800e6b8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e6bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e6c0:	4650      	mov	r0, sl
 800e6c2:	4659      	mov	r1, fp
 800e6c4:	f7f2 f8ea 	bl	800089c <__aeabi_ddiv>
 800e6c8:	e7d6      	b.n	800e678 <_strtod_l+0x408>
 800e6ca:	9b08      	ldr	r3, [sp, #32]
 800e6cc:	eba5 0808 	sub.w	r8, r5, r8
 800e6d0:	4498      	add	r8, r3
 800e6d2:	f1b8 0f00 	cmp.w	r8, #0
 800e6d6:	dd71      	ble.n	800e7bc <_strtod_l+0x54c>
 800e6d8:	f018 030f 	ands.w	r3, r8, #15
 800e6dc:	d00a      	beq.n	800e6f4 <_strtod_l+0x484>
 800e6de:	494d      	ldr	r1, [pc, #308]	; (800e814 <_strtod_l+0x5a4>)
 800e6e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6e4:	4652      	mov	r2, sl
 800e6e6:	465b      	mov	r3, fp
 800e6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ec:	f7f1 ffac 	bl	8000648 <__aeabi_dmul>
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	468b      	mov	fp, r1
 800e6f4:	f038 080f 	bics.w	r8, r8, #15
 800e6f8:	d04d      	beq.n	800e796 <_strtod_l+0x526>
 800e6fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e6fe:	dd22      	ble.n	800e746 <_strtod_l+0x4d6>
 800e700:	2500      	movs	r5, #0
 800e702:	462e      	mov	r6, r5
 800e704:	9509      	str	r5, [sp, #36]	; 0x24
 800e706:	9507      	str	r5, [sp, #28]
 800e708:	2322      	movs	r3, #34	; 0x22
 800e70a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e81c <_strtod_l+0x5ac>
 800e70e:	6023      	str	r3, [r4, #0]
 800e710:	f04f 0a00 	mov.w	sl, #0
 800e714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e716:	2b00      	cmp	r3, #0
 800e718:	f43f adec 	beq.w	800e2f4 <_strtod_l+0x84>
 800e71c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e71e:	4620      	mov	r0, r4
 800e720:	f002 f96e 	bl	8010a00 <_Bfree>
 800e724:	9907      	ldr	r1, [sp, #28]
 800e726:	4620      	mov	r0, r4
 800e728:	f002 f96a 	bl	8010a00 <_Bfree>
 800e72c:	4631      	mov	r1, r6
 800e72e:	4620      	mov	r0, r4
 800e730:	f002 f966 	bl	8010a00 <_Bfree>
 800e734:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e736:	4620      	mov	r0, r4
 800e738:	f002 f962 	bl	8010a00 <_Bfree>
 800e73c:	4629      	mov	r1, r5
 800e73e:	4620      	mov	r0, r4
 800e740:	f002 f95e 	bl	8010a00 <_Bfree>
 800e744:	e5d6      	b.n	800e2f4 <_strtod_l+0x84>
 800e746:	2300      	movs	r3, #0
 800e748:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e74c:	4650      	mov	r0, sl
 800e74e:	4659      	mov	r1, fp
 800e750:	4699      	mov	r9, r3
 800e752:	f1b8 0f01 	cmp.w	r8, #1
 800e756:	dc21      	bgt.n	800e79c <_strtod_l+0x52c>
 800e758:	b10b      	cbz	r3, 800e75e <_strtod_l+0x4ee>
 800e75a:	4682      	mov	sl, r0
 800e75c:	468b      	mov	fp, r1
 800e75e:	4b2e      	ldr	r3, [pc, #184]	; (800e818 <_strtod_l+0x5a8>)
 800e760:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e764:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e768:	4652      	mov	r2, sl
 800e76a:	465b      	mov	r3, fp
 800e76c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e770:	f7f1 ff6a 	bl	8000648 <__aeabi_dmul>
 800e774:	4b29      	ldr	r3, [pc, #164]	; (800e81c <_strtod_l+0x5ac>)
 800e776:	460a      	mov	r2, r1
 800e778:	400b      	ands	r3, r1
 800e77a:	4929      	ldr	r1, [pc, #164]	; (800e820 <_strtod_l+0x5b0>)
 800e77c:	428b      	cmp	r3, r1
 800e77e:	4682      	mov	sl, r0
 800e780:	d8be      	bhi.n	800e700 <_strtod_l+0x490>
 800e782:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e786:	428b      	cmp	r3, r1
 800e788:	bf86      	itte	hi
 800e78a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e824 <_strtod_l+0x5b4>
 800e78e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e792:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e796:	2300      	movs	r3, #0
 800e798:	9304      	str	r3, [sp, #16]
 800e79a:	e081      	b.n	800e8a0 <_strtod_l+0x630>
 800e79c:	f018 0f01 	tst.w	r8, #1
 800e7a0:	d007      	beq.n	800e7b2 <_strtod_l+0x542>
 800e7a2:	4b1d      	ldr	r3, [pc, #116]	; (800e818 <_strtod_l+0x5a8>)
 800e7a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ac:	f7f1 ff4c 	bl	8000648 <__aeabi_dmul>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	f109 0901 	add.w	r9, r9, #1
 800e7b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e7ba:	e7ca      	b.n	800e752 <_strtod_l+0x4e2>
 800e7bc:	d0eb      	beq.n	800e796 <_strtod_l+0x526>
 800e7be:	f1c8 0800 	rsb	r8, r8, #0
 800e7c2:	f018 020f 	ands.w	r2, r8, #15
 800e7c6:	d00a      	beq.n	800e7de <_strtod_l+0x56e>
 800e7c8:	4b12      	ldr	r3, [pc, #72]	; (800e814 <_strtod_l+0x5a4>)
 800e7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7ce:	4650      	mov	r0, sl
 800e7d0:	4659      	mov	r1, fp
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	f7f2 f861 	bl	800089c <__aeabi_ddiv>
 800e7da:	4682      	mov	sl, r0
 800e7dc:	468b      	mov	fp, r1
 800e7de:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e7e2:	d0d8      	beq.n	800e796 <_strtod_l+0x526>
 800e7e4:	f1b8 0f1f 	cmp.w	r8, #31
 800e7e8:	dd1e      	ble.n	800e828 <_strtod_l+0x5b8>
 800e7ea:	2500      	movs	r5, #0
 800e7ec:	462e      	mov	r6, r5
 800e7ee:	9509      	str	r5, [sp, #36]	; 0x24
 800e7f0:	9507      	str	r5, [sp, #28]
 800e7f2:	2322      	movs	r3, #34	; 0x22
 800e7f4:	f04f 0a00 	mov.w	sl, #0
 800e7f8:	f04f 0b00 	mov.w	fp, #0
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	e789      	b.n	800e714 <_strtod_l+0x4a4>
 800e800:	08013191 	.word	0x08013191
 800e804:	080131cc 	.word	0x080131cc
 800e808:	08013189 	.word	0x08013189
 800e80c:	0801330c 	.word	0x0801330c
 800e810:	08013628 	.word	0x08013628
 800e814:	08013508 	.word	0x08013508
 800e818:	080134e0 	.word	0x080134e0
 800e81c:	7ff00000 	.word	0x7ff00000
 800e820:	7ca00000 	.word	0x7ca00000
 800e824:	7fefffff 	.word	0x7fefffff
 800e828:	f018 0310 	ands.w	r3, r8, #16
 800e82c:	bf18      	it	ne
 800e82e:	236a      	movne	r3, #106	; 0x6a
 800e830:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ebe8 <_strtod_l+0x978>
 800e834:	9304      	str	r3, [sp, #16]
 800e836:	4650      	mov	r0, sl
 800e838:	4659      	mov	r1, fp
 800e83a:	2300      	movs	r3, #0
 800e83c:	f018 0f01 	tst.w	r8, #1
 800e840:	d004      	beq.n	800e84c <_strtod_l+0x5dc>
 800e842:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e846:	f7f1 feff 	bl	8000648 <__aeabi_dmul>
 800e84a:	2301      	movs	r3, #1
 800e84c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e850:	f109 0908 	add.w	r9, r9, #8
 800e854:	d1f2      	bne.n	800e83c <_strtod_l+0x5cc>
 800e856:	b10b      	cbz	r3, 800e85c <_strtod_l+0x5ec>
 800e858:	4682      	mov	sl, r0
 800e85a:	468b      	mov	fp, r1
 800e85c:	9b04      	ldr	r3, [sp, #16]
 800e85e:	b1bb      	cbz	r3, 800e890 <_strtod_l+0x620>
 800e860:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e864:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e868:	2b00      	cmp	r3, #0
 800e86a:	4659      	mov	r1, fp
 800e86c:	dd10      	ble.n	800e890 <_strtod_l+0x620>
 800e86e:	2b1f      	cmp	r3, #31
 800e870:	f340 8128 	ble.w	800eac4 <_strtod_l+0x854>
 800e874:	2b34      	cmp	r3, #52	; 0x34
 800e876:	bfde      	ittt	le
 800e878:	3b20      	suble	r3, #32
 800e87a:	f04f 32ff 	movle.w	r2, #4294967295
 800e87e:	fa02 f303 	lslle.w	r3, r2, r3
 800e882:	f04f 0a00 	mov.w	sl, #0
 800e886:	bfcc      	ite	gt
 800e888:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e88c:	ea03 0b01 	andle.w	fp, r3, r1
 800e890:	2200      	movs	r2, #0
 800e892:	2300      	movs	r3, #0
 800e894:	4650      	mov	r0, sl
 800e896:	4659      	mov	r1, fp
 800e898:	f7f2 f93e 	bl	8000b18 <__aeabi_dcmpeq>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d1a4      	bne.n	800e7ea <_strtod_l+0x57a>
 800e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e8a6:	462b      	mov	r3, r5
 800e8a8:	463a      	mov	r2, r7
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f002 f914 	bl	8010ad8 <__s2b>
 800e8b0:	9009      	str	r0, [sp, #36]	; 0x24
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	f43f af24 	beq.w	800e700 <_strtod_l+0x490>
 800e8b8:	9b07      	ldr	r3, [sp, #28]
 800e8ba:	1b9e      	subs	r6, r3, r6
 800e8bc:	9b08      	ldr	r3, [sp, #32]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	bfb4      	ite	lt
 800e8c2:	4633      	movlt	r3, r6
 800e8c4:	2300      	movge	r3, #0
 800e8c6:	9310      	str	r3, [sp, #64]	; 0x40
 800e8c8:	9b08      	ldr	r3, [sp, #32]
 800e8ca:	2500      	movs	r5, #0
 800e8cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e8d0:	9318      	str	r3, [sp, #96]	; 0x60
 800e8d2:	462e      	mov	r6, r5
 800e8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	6859      	ldr	r1, [r3, #4]
 800e8da:	f002 f851 	bl	8010980 <_Balloc>
 800e8de:	9007      	str	r0, [sp, #28]
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	f43f af11 	beq.w	800e708 <_strtod_l+0x498>
 800e8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8e8:	691a      	ldr	r2, [r3, #16]
 800e8ea:	3202      	adds	r2, #2
 800e8ec:	f103 010c 	add.w	r1, r3, #12
 800e8f0:	0092      	lsls	r2, r2, #2
 800e8f2:	300c      	adds	r0, #12
 800e8f4:	f7fe ff92 	bl	800d81c <memcpy>
 800e8f8:	ec4b ab10 	vmov	d0, sl, fp
 800e8fc:	aa20      	add	r2, sp, #128	; 0x80
 800e8fe:	a91f      	add	r1, sp, #124	; 0x7c
 800e900:	4620      	mov	r0, r4
 800e902:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e906:	f002 fc23 	bl	8011150 <__d2b>
 800e90a:	901e      	str	r0, [sp, #120]	; 0x78
 800e90c:	2800      	cmp	r0, #0
 800e90e:	f43f aefb 	beq.w	800e708 <_strtod_l+0x498>
 800e912:	2101      	movs	r1, #1
 800e914:	4620      	mov	r0, r4
 800e916:	f002 f979 	bl	8010c0c <__i2b>
 800e91a:	4606      	mov	r6, r0
 800e91c:	2800      	cmp	r0, #0
 800e91e:	f43f aef3 	beq.w	800e708 <_strtod_l+0x498>
 800e922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e924:	9904      	ldr	r1, [sp, #16]
 800e926:	2b00      	cmp	r3, #0
 800e928:	bfab      	itete	ge
 800e92a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e92c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e92e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e930:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e934:	bfac      	ite	ge
 800e936:	eb03 0902 	addge.w	r9, r3, r2
 800e93a:	1ad7      	sublt	r7, r2, r3
 800e93c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e93e:	eba3 0801 	sub.w	r8, r3, r1
 800e942:	4490      	add	r8, r2
 800e944:	4ba3      	ldr	r3, [pc, #652]	; (800ebd4 <_strtod_l+0x964>)
 800e946:	f108 38ff 	add.w	r8, r8, #4294967295
 800e94a:	4598      	cmp	r8, r3
 800e94c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e950:	f280 80cc 	bge.w	800eaec <_strtod_l+0x87c>
 800e954:	eba3 0308 	sub.w	r3, r3, r8
 800e958:	2b1f      	cmp	r3, #31
 800e95a:	eba2 0203 	sub.w	r2, r2, r3
 800e95e:	f04f 0101 	mov.w	r1, #1
 800e962:	f300 80b6 	bgt.w	800ead2 <_strtod_l+0x862>
 800e966:	fa01 f303 	lsl.w	r3, r1, r3
 800e96a:	9311      	str	r3, [sp, #68]	; 0x44
 800e96c:	2300      	movs	r3, #0
 800e96e:	930c      	str	r3, [sp, #48]	; 0x30
 800e970:	eb09 0802 	add.w	r8, r9, r2
 800e974:	9b04      	ldr	r3, [sp, #16]
 800e976:	45c1      	cmp	r9, r8
 800e978:	4417      	add	r7, r2
 800e97a:	441f      	add	r7, r3
 800e97c:	464b      	mov	r3, r9
 800e97e:	bfa8      	it	ge
 800e980:	4643      	movge	r3, r8
 800e982:	42bb      	cmp	r3, r7
 800e984:	bfa8      	it	ge
 800e986:	463b      	movge	r3, r7
 800e988:	2b00      	cmp	r3, #0
 800e98a:	bfc2      	ittt	gt
 800e98c:	eba8 0803 	subgt.w	r8, r8, r3
 800e990:	1aff      	subgt	r7, r7, r3
 800e992:	eba9 0903 	subgt.w	r9, r9, r3
 800e996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e998:	2b00      	cmp	r3, #0
 800e99a:	dd17      	ble.n	800e9cc <_strtod_l+0x75c>
 800e99c:	4631      	mov	r1, r6
 800e99e:	461a      	mov	r2, r3
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f002 f9ef 	bl	8010d84 <__pow5mult>
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	f43f aead 	beq.w	800e708 <_strtod_l+0x498>
 800e9ae:	4601      	mov	r1, r0
 800e9b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f002 f940 	bl	8010c38 <__multiply>
 800e9b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	f43f aea4 	beq.w	800e708 <_strtod_l+0x498>
 800e9c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f002 f81c 	bl	8010a00 <_Bfree>
 800e9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9ca:	931e      	str	r3, [sp, #120]	; 0x78
 800e9cc:	f1b8 0f00 	cmp.w	r8, #0
 800e9d0:	f300 8091 	bgt.w	800eaf6 <_strtod_l+0x886>
 800e9d4:	9b08      	ldr	r3, [sp, #32]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	dd08      	ble.n	800e9ec <_strtod_l+0x77c>
 800e9da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e9dc:	9907      	ldr	r1, [sp, #28]
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f002 f9d0 	bl	8010d84 <__pow5mult>
 800e9e4:	9007      	str	r0, [sp, #28]
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f43f ae8e 	beq.w	800e708 <_strtod_l+0x498>
 800e9ec:	2f00      	cmp	r7, #0
 800e9ee:	dd08      	ble.n	800ea02 <_strtod_l+0x792>
 800e9f0:	9907      	ldr	r1, [sp, #28]
 800e9f2:	463a      	mov	r2, r7
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f002 fa1f 	bl	8010e38 <__lshift>
 800e9fa:	9007      	str	r0, [sp, #28]
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	f43f ae83 	beq.w	800e708 <_strtod_l+0x498>
 800ea02:	f1b9 0f00 	cmp.w	r9, #0
 800ea06:	dd08      	ble.n	800ea1a <_strtod_l+0x7aa>
 800ea08:	4631      	mov	r1, r6
 800ea0a:	464a      	mov	r2, r9
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f002 fa13 	bl	8010e38 <__lshift>
 800ea12:	4606      	mov	r6, r0
 800ea14:	2800      	cmp	r0, #0
 800ea16:	f43f ae77 	beq.w	800e708 <_strtod_l+0x498>
 800ea1a:	9a07      	ldr	r2, [sp, #28]
 800ea1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea1e:	4620      	mov	r0, r4
 800ea20:	f002 fa92 	bl	8010f48 <__mdiff>
 800ea24:	4605      	mov	r5, r0
 800ea26:	2800      	cmp	r0, #0
 800ea28:	f43f ae6e 	beq.w	800e708 <_strtod_l+0x498>
 800ea2c:	68c3      	ldr	r3, [r0, #12]
 800ea2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea30:	2300      	movs	r3, #0
 800ea32:	60c3      	str	r3, [r0, #12]
 800ea34:	4631      	mov	r1, r6
 800ea36:	f002 fa6b 	bl	8010f10 <__mcmp>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	da65      	bge.n	800eb0a <_strtod_l+0x89a>
 800ea3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea40:	ea53 030a 	orrs.w	r3, r3, sl
 800ea44:	f040 8087 	bne.w	800eb56 <_strtod_l+0x8e6>
 800ea48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f040 8082 	bne.w	800eb56 <_strtod_l+0x8e6>
 800ea52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea56:	0d1b      	lsrs	r3, r3, #20
 800ea58:	051b      	lsls	r3, r3, #20
 800ea5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea5e:	d97a      	bls.n	800eb56 <_strtod_l+0x8e6>
 800ea60:	696b      	ldr	r3, [r5, #20]
 800ea62:	b913      	cbnz	r3, 800ea6a <_strtod_l+0x7fa>
 800ea64:	692b      	ldr	r3, [r5, #16]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	dd75      	ble.n	800eb56 <_strtod_l+0x8e6>
 800ea6a:	4629      	mov	r1, r5
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f002 f9e2 	bl	8010e38 <__lshift>
 800ea74:	4631      	mov	r1, r6
 800ea76:	4605      	mov	r5, r0
 800ea78:	f002 fa4a 	bl	8010f10 <__mcmp>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	dd6a      	ble.n	800eb56 <_strtod_l+0x8e6>
 800ea80:	9904      	ldr	r1, [sp, #16]
 800ea82:	4a55      	ldr	r2, [pc, #340]	; (800ebd8 <_strtod_l+0x968>)
 800ea84:	465b      	mov	r3, fp
 800ea86:	2900      	cmp	r1, #0
 800ea88:	f000 8085 	beq.w	800eb96 <_strtod_l+0x926>
 800ea8c:	ea02 010b 	and.w	r1, r2, fp
 800ea90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea94:	dc7f      	bgt.n	800eb96 <_strtod_l+0x926>
 800ea96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea9a:	f77f aeaa 	ble.w	800e7f2 <_strtod_l+0x582>
 800ea9e:	4a4f      	ldr	r2, [pc, #316]	; (800ebdc <_strtod_l+0x96c>)
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800eaa6:	4650      	mov	r0, sl
 800eaa8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800eaac:	4659      	mov	r1, fp
 800eaae:	f7f1 fdcb 	bl	8000648 <__aeabi_dmul>
 800eab2:	460b      	mov	r3, r1
 800eab4:	4303      	orrs	r3, r0
 800eab6:	bf08      	it	eq
 800eab8:	2322      	moveq	r3, #34	; 0x22
 800eaba:	4682      	mov	sl, r0
 800eabc:	468b      	mov	fp, r1
 800eabe:	bf08      	it	eq
 800eac0:	6023      	streq	r3, [r4, #0]
 800eac2:	e62b      	b.n	800e71c <_strtod_l+0x4ac>
 800eac4:	f04f 32ff 	mov.w	r2, #4294967295
 800eac8:	fa02 f303 	lsl.w	r3, r2, r3
 800eacc:	ea03 0a0a 	and.w	sl, r3, sl
 800ead0:	e6de      	b.n	800e890 <_strtod_l+0x620>
 800ead2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ead6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800eada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800eade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800eae2:	fa01 f308 	lsl.w	r3, r1, r8
 800eae6:	930c      	str	r3, [sp, #48]	; 0x30
 800eae8:	9111      	str	r1, [sp, #68]	; 0x44
 800eaea:	e741      	b.n	800e970 <_strtod_l+0x700>
 800eaec:	2300      	movs	r3, #0
 800eaee:	930c      	str	r3, [sp, #48]	; 0x30
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	9311      	str	r3, [sp, #68]	; 0x44
 800eaf4:	e73c      	b.n	800e970 <_strtod_l+0x700>
 800eaf6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eaf8:	4642      	mov	r2, r8
 800eafa:	4620      	mov	r0, r4
 800eafc:	f002 f99c 	bl	8010e38 <__lshift>
 800eb00:	901e      	str	r0, [sp, #120]	; 0x78
 800eb02:	2800      	cmp	r0, #0
 800eb04:	f47f af66 	bne.w	800e9d4 <_strtod_l+0x764>
 800eb08:	e5fe      	b.n	800e708 <_strtod_l+0x498>
 800eb0a:	465f      	mov	r7, fp
 800eb0c:	d16e      	bne.n	800ebec <_strtod_l+0x97c>
 800eb0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eb10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb14:	b342      	cbz	r2, 800eb68 <_strtod_l+0x8f8>
 800eb16:	4a32      	ldr	r2, [pc, #200]	; (800ebe0 <_strtod_l+0x970>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d128      	bne.n	800eb6e <_strtod_l+0x8fe>
 800eb1c:	9b04      	ldr	r3, [sp, #16]
 800eb1e:	4650      	mov	r0, sl
 800eb20:	b1eb      	cbz	r3, 800eb5e <_strtod_l+0x8ee>
 800eb22:	4a2d      	ldr	r2, [pc, #180]	; (800ebd8 <_strtod_l+0x968>)
 800eb24:	403a      	ands	r2, r7
 800eb26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eb2a:	f04f 31ff 	mov.w	r1, #4294967295
 800eb2e:	d819      	bhi.n	800eb64 <_strtod_l+0x8f4>
 800eb30:	0d12      	lsrs	r2, r2, #20
 800eb32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eb36:	fa01 f303 	lsl.w	r3, r1, r3
 800eb3a:	4298      	cmp	r0, r3
 800eb3c:	d117      	bne.n	800eb6e <_strtod_l+0x8fe>
 800eb3e:	4b29      	ldr	r3, [pc, #164]	; (800ebe4 <_strtod_l+0x974>)
 800eb40:	429f      	cmp	r7, r3
 800eb42:	d102      	bne.n	800eb4a <_strtod_l+0x8da>
 800eb44:	3001      	adds	r0, #1
 800eb46:	f43f addf 	beq.w	800e708 <_strtod_l+0x498>
 800eb4a:	4b23      	ldr	r3, [pc, #140]	; (800ebd8 <_strtod_l+0x968>)
 800eb4c:	403b      	ands	r3, r7
 800eb4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eb52:	f04f 0a00 	mov.w	sl, #0
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1a0      	bne.n	800ea9e <_strtod_l+0x82e>
 800eb5c:	e5de      	b.n	800e71c <_strtod_l+0x4ac>
 800eb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb62:	e7ea      	b.n	800eb3a <_strtod_l+0x8ca>
 800eb64:	460b      	mov	r3, r1
 800eb66:	e7e8      	b.n	800eb3a <_strtod_l+0x8ca>
 800eb68:	ea53 030a 	orrs.w	r3, r3, sl
 800eb6c:	d088      	beq.n	800ea80 <_strtod_l+0x810>
 800eb6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb70:	b1db      	cbz	r3, 800ebaa <_strtod_l+0x93a>
 800eb72:	423b      	tst	r3, r7
 800eb74:	d0ef      	beq.n	800eb56 <_strtod_l+0x8e6>
 800eb76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb78:	9a04      	ldr	r2, [sp, #16]
 800eb7a:	4650      	mov	r0, sl
 800eb7c:	4659      	mov	r1, fp
 800eb7e:	b1c3      	cbz	r3, 800ebb2 <_strtod_l+0x942>
 800eb80:	f7ff fb5a 	bl	800e238 <sulp>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb8c:	f7f1 fba6 	bl	80002dc <__adddf3>
 800eb90:	4682      	mov	sl, r0
 800eb92:	468b      	mov	fp, r1
 800eb94:	e7df      	b.n	800eb56 <_strtod_l+0x8e6>
 800eb96:	4013      	ands	r3, r2
 800eb98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eba4:	f04f 3aff 	mov.w	sl, #4294967295
 800eba8:	e7d5      	b.n	800eb56 <_strtod_l+0x8e6>
 800ebaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebac:	ea13 0f0a 	tst.w	r3, sl
 800ebb0:	e7e0      	b.n	800eb74 <_strtod_l+0x904>
 800ebb2:	f7ff fb41 	bl	800e238 <sulp>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ebbe:	f7f1 fb8b 	bl	80002d8 <__aeabi_dsub>
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	4682      	mov	sl, r0
 800ebc8:	468b      	mov	fp, r1
 800ebca:	f7f1 ffa5 	bl	8000b18 <__aeabi_dcmpeq>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d0c1      	beq.n	800eb56 <_strtod_l+0x8e6>
 800ebd2:	e60e      	b.n	800e7f2 <_strtod_l+0x582>
 800ebd4:	fffffc02 	.word	0xfffffc02
 800ebd8:	7ff00000 	.word	0x7ff00000
 800ebdc:	39500000 	.word	0x39500000
 800ebe0:	000fffff 	.word	0x000fffff
 800ebe4:	7fefffff 	.word	0x7fefffff
 800ebe8:	080131e0 	.word	0x080131e0
 800ebec:	4631      	mov	r1, r6
 800ebee:	4628      	mov	r0, r5
 800ebf0:	f002 fb0a 	bl	8011208 <__ratio>
 800ebf4:	ec59 8b10 	vmov	r8, r9, d0
 800ebf8:	ee10 0a10 	vmov	r0, s0
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec02:	4649      	mov	r1, r9
 800ec04:	f7f1 ff9c 	bl	8000b40 <__aeabi_dcmple>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d07c      	beq.n	800ed06 <_strtod_l+0xa96>
 800ec0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d04c      	beq.n	800ecac <_strtod_l+0xa3c>
 800ec12:	4b95      	ldr	r3, [pc, #596]	; (800ee68 <_strtod_l+0xbf8>)
 800ec14:	2200      	movs	r2, #0
 800ec16:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ec1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ee68 <_strtod_l+0xbf8>
 800ec1e:	f04f 0800 	mov.w	r8, #0
 800ec22:	4b92      	ldr	r3, [pc, #584]	; (800ee6c <_strtod_l+0xbfc>)
 800ec24:	403b      	ands	r3, r7
 800ec26:	9311      	str	r3, [sp, #68]	; 0x44
 800ec28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec2a:	4b91      	ldr	r3, [pc, #580]	; (800ee70 <_strtod_l+0xc00>)
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	f040 80b2 	bne.w	800ed96 <_strtod_l+0xb26>
 800ec32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec3a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ec3e:	ec4b ab10 	vmov	d0, sl, fp
 800ec42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ec46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec4a:	f002 fa05 	bl	8011058 <__ulp>
 800ec4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec52:	ec53 2b10 	vmov	r2, r3, d0
 800ec56:	f7f1 fcf7 	bl	8000648 <__aeabi_dmul>
 800ec5a:	4652      	mov	r2, sl
 800ec5c:	465b      	mov	r3, fp
 800ec5e:	f7f1 fb3d 	bl	80002dc <__adddf3>
 800ec62:	460b      	mov	r3, r1
 800ec64:	4981      	ldr	r1, [pc, #516]	; (800ee6c <_strtod_l+0xbfc>)
 800ec66:	4a83      	ldr	r2, [pc, #524]	; (800ee74 <_strtod_l+0xc04>)
 800ec68:	4019      	ands	r1, r3
 800ec6a:	4291      	cmp	r1, r2
 800ec6c:	4682      	mov	sl, r0
 800ec6e:	d95e      	bls.n	800ed2e <_strtod_l+0xabe>
 800ec70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d103      	bne.n	800ec82 <_strtod_l+0xa12>
 800ec7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	f43f ad43 	beq.w	800e708 <_strtod_l+0x498>
 800ec82:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ee80 <_strtod_l+0xc10>
 800ec86:	f04f 3aff 	mov.w	sl, #4294967295
 800ec8a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f001 feb7 	bl	8010a00 <_Bfree>
 800ec92:	9907      	ldr	r1, [sp, #28]
 800ec94:	4620      	mov	r0, r4
 800ec96:	f001 feb3 	bl	8010a00 <_Bfree>
 800ec9a:	4631      	mov	r1, r6
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	f001 feaf 	bl	8010a00 <_Bfree>
 800eca2:	4629      	mov	r1, r5
 800eca4:	4620      	mov	r0, r4
 800eca6:	f001 feab 	bl	8010a00 <_Bfree>
 800ecaa:	e613      	b.n	800e8d4 <_strtod_l+0x664>
 800ecac:	f1ba 0f00 	cmp.w	sl, #0
 800ecb0:	d11b      	bne.n	800ecea <_strtod_l+0xa7a>
 800ecb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ecb6:	b9f3      	cbnz	r3, 800ecf6 <_strtod_l+0xa86>
 800ecb8:	4b6b      	ldr	r3, [pc, #428]	; (800ee68 <_strtod_l+0xbf8>)
 800ecba:	2200      	movs	r2, #0
 800ecbc:	4640      	mov	r0, r8
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	f7f1 ff34 	bl	8000b2c <__aeabi_dcmplt>
 800ecc4:	b9d0      	cbnz	r0, 800ecfc <_strtod_l+0xa8c>
 800ecc6:	4640      	mov	r0, r8
 800ecc8:	4649      	mov	r1, r9
 800ecca:	4b6b      	ldr	r3, [pc, #428]	; (800ee78 <_strtod_l+0xc08>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	f7f1 fcbb 	bl	8000648 <__aeabi_dmul>
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	4689      	mov	r9, r1
 800ecd6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ecda:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ecde:	931b      	str	r3, [sp, #108]	; 0x6c
 800ece0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ece4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ece8:	e79b      	b.n	800ec22 <_strtod_l+0x9b2>
 800ecea:	f1ba 0f01 	cmp.w	sl, #1
 800ecee:	d102      	bne.n	800ecf6 <_strtod_l+0xa86>
 800ecf0:	2f00      	cmp	r7, #0
 800ecf2:	f43f ad7e 	beq.w	800e7f2 <_strtod_l+0x582>
 800ecf6:	4b61      	ldr	r3, [pc, #388]	; (800ee7c <_strtod_l+0xc0c>)
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	e78c      	b.n	800ec16 <_strtod_l+0x9a6>
 800ecfc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ee78 <_strtod_l+0xc08>
 800ed00:	f04f 0800 	mov.w	r8, #0
 800ed04:	e7e7      	b.n	800ecd6 <_strtod_l+0xa66>
 800ed06:	4b5c      	ldr	r3, [pc, #368]	; (800ee78 <_strtod_l+0xc08>)
 800ed08:	4640      	mov	r0, r8
 800ed0a:	4649      	mov	r1, r9
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f7f1 fc9b 	bl	8000648 <__aeabi_dmul>
 800ed12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed14:	4680      	mov	r8, r0
 800ed16:	4689      	mov	r9, r1
 800ed18:	b933      	cbnz	r3, 800ed28 <_strtod_l+0xab8>
 800ed1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed1e:	9012      	str	r0, [sp, #72]	; 0x48
 800ed20:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ed26:	e7dd      	b.n	800ece4 <_strtod_l+0xa74>
 800ed28:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ed2c:	e7f9      	b.n	800ed22 <_strtod_l+0xab2>
 800ed2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ed32:	9b04      	ldr	r3, [sp, #16]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1a8      	bne.n	800ec8a <_strtod_l+0xa1a>
 800ed38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed3e:	0d1b      	lsrs	r3, r3, #20
 800ed40:	051b      	lsls	r3, r3, #20
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d1a1      	bne.n	800ec8a <_strtod_l+0xa1a>
 800ed46:	4640      	mov	r0, r8
 800ed48:	4649      	mov	r1, r9
 800ed4a:	f7f1 ffdd 	bl	8000d08 <__aeabi_d2lz>
 800ed4e:	f7f1 fc4d 	bl	80005ec <__aeabi_l2d>
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
 800ed56:	4640      	mov	r0, r8
 800ed58:	4649      	mov	r1, r9
 800ed5a:	f7f1 fabd 	bl	80002d8 <__aeabi_dsub>
 800ed5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed64:	ea43 030a 	orr.w	r3, r3, sl
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	4680      	mov	r8, r0
 800ed6c:	4689      	mov	r9, r1
 800ed6e:	d053      	beq.n	800ee18 <_strtod_l+0xba8>
 800ed70:	a335      	add	r3, pc, #212	; (adr r3, 800ee48 <_strtod_l+0xbd8>)
 800ed72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed76:	f7f1 fed9 	bl	8000b2c <__aeabi_dcmplt>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	f47f acce 	bne.w	800e71c <_strtod_l+0x4ac>
 800ed80:	a333      	add	r3, pc, #204	; (adr r3, 800ee50 <_strtod_l+0xbe0>)
 800ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed86:	4640      	mov	r0, r8
 800ed88:	4649      	mov	r1, r9
 800ed8a:	f7f1 feed 	bl	8000b68 <__aeabi_dcmpgt>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	f43f af7b 	beq.w	800ec8a <_strtod_l+0xa1a>
 800ed94:	e4c2      	b.n	800e71c <_strtod_l+0x4ac>
 800ed96:	9b04      	ldr	r3, [sp, #16]
 800ed98:	b333      	cbz	r3, 800ede8 <_strtod_l+0xb78>
 800ed9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eda0:	d822      	bhi.n	800ede8 <_strtod_l+0xb78>
 800eda2:	a32d      	add	r3, pc, #180	; (adr r3, 800ee58 <_strtod_l+0xbe8>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	4640      	mov	r0, r8
 800edaa:	4649      	mov	r1, r9
 800edac:	f7f1 fec8 	bl	8000b40 <__aeabi_dcmple>
 800edb0:	b1a0      	cbz	r0, 800eddc <_strtod_l+0xb6c>
 800edb2:	4649      	mov	r1, r9
 800edb4:	4640      	mov	r0, r8
 800edb6:	f7f1 ff1f 	bl	8000bf8 <__aeabi_d2uiz>
 800edba:	2801      	cmp	r0, #1
 800edbc:	bf38      	it	cc
 800edbe:	2001      	movcc	r0, #1
 800edc0:	f7f1 fbc8 	bl	8000554 <__aeabi_ui2d>
 800edc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edc6:	4680      	mov	r8, r0
 800edc8:	4689      	mov	r9, r1
 800edca:	bb13      	cbnz	r3, 800ee12 <_strtod_l+0xba2>
 800edcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edd0:	9014      	str	r0, [sp, #80]	; 0x50
 800edd2:	9315      	str	r3, [sp, #84]	; 0x54
 800edd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800edd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ede0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ede4:	1a9b      	subs	r3, r3, r2
 800ede6:	930d      	str	r3, [sp, #52]	; 0x34
 800ede8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800edf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800edf4:	f002 f930 	bl	8011058 <__ulp>
 800edf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edfc:	ec53 2b10 	vmov	r2, r3, d0
 800ee00:	f7f1 fc22 	bl	8000648 <__aeabi_dmul>
 800ee04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ee08:	f7f1 fa68 	bl	80002dc <__adddf3>
 800ee0c:	4682      	mov	sl, r0
 800ee0e:	468b      	mov	fp, r1
 800ee10:	e78f      	b.n	800ed32 <_strtod_l+0xac2>
 800ee12:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ee16:	e7dd      	b.n	800edd4 <_strtod_l+0xb64>
 800ee18:	a311      	add	r3, pc, #68	; (adr r3, 800ee60 <_strtod_l+0xbf0>)
 800ee1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1e:	f7f1 fe85 	bl	8000b2c <__aeabi_dcmplt>
 800ee22:	e7b4      	b.n	800ed8e <_strtod_l+0xb1e>
 800ee24:	2300      	movs	r3, #0
 800ee26:	930e      	str	r3, [sp, #56]	; 0x38
 800ee28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ee2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee2c:	6013      	str	r3, [r2, #0]
 800ee2e:	f7ff ba65 	b.w	800e2fc <_strtod_l+0x8c>
 800ee32:	2b65      	cmp	r3, #101	; 0x65
 800ee34:	f43f ab5d 	beq.w	800e4f2 <_strtod_l+0x282>
 800ee38:	2b45      	cmp	r3, #69	; 0x45
 800ee3a:	f43f ab5a 	beq.w	800e4f2 <_strtod_l+0x282>
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f7ff bb92 	b.w	800e568 <_strtod_l+0x2f8>
 800ee44:	f3af 8000 	nop.w
 800ee48:	94a03595 	.word	0x94a03595
 800ee4c:	3fdfffff 	.word	0x3fdfffff
 800ee50:	35afe535 	.word	0x35afe535
 800ee54:	3fe00000 	.word	0x3fe00000
 800ee58:	ffc00000 	.word	0xffc00000
 800ee5c:	41dfffff 	.word	0x41dfffff
 800ee60:	94a03595 	.word	0x94a03595
 800ee64:	3fcfffff 	.word	0x3fcfffff
 800ee68:	3ff00000 	.word	0x3ff00000
 800ee6c:	7ff00000 	.word	0x7ff00000
 800ee70:	7fe00000 	.word	0x7fe00000
 800ee74:	7c9fffff 	.word	0x7c9fffff
 800ee78:	3fe00000 	.word	0x3fe00000
 800ee7c:	bff00000 	.word	0xbff00000
 800ee80:	7fefffff 	.word	0x7fefffff

0800ee84 <strtod>:
 800ee84:	460a      	mov	r2, r1
 800ee86:	4601      	mov	r1, r0
 800ee88:	4802      	ldr	r0, [pc, #8]	; (800ee94 <strtod+0x10>)
 800ee8a:	4b03      	ldr	r3, [pc, #12]	; (800ee98 <strtod+0x14>)
 800ee8c:	6800      	ldr	r0, [r0, #0]
 800ee8e:	f7ff b9ef 	b.w	800e270 <_strtod_l>
 800ee92:	bf00      	nop
 800ee94:	2000002c 	.word	0x2000002c
 800ee98:	20000094 	.word	0x20000094

0800ee9c <_strtol_l.isra.0>:
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea2:	d001      	beq.n	800eea8 <_strtol_l.isra.0+0xc>
 800eea4:	2b24      	cmp	r3, #36	; 0x24
 800eea6:	d906      	bls.n	800eeb6 <_strtol_l.isra.0+0x1a>
 800eea8:	f7fe fc8e 	bl	800d7c8 <__errno>
 800eeac:	2316      	movs	r3, #22
 800eeae:	6003      	str	r3, [r0, #0]
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb6:	4f3a      	ldr	r7, [pc, #232]	; (800efa0 <_strtol_l.isra.0+0x104>)
 800eeb8:	468e      	mov	lr, r1
 800eeba:	4676      	mov	r6, lr
 800eebc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eec0:	5de5      	ldrb	r5, [r4, r7]
 800eec2:	f015 0508 	ands.w	r5, r5, #8
 800eec6:	d1f8      	bne.n	800eeba <_strtol_l.isra.0+0x1e>
 800eec8:	2c2d      	cmp	r4, #45	; 0x2d
 800eeca:	d134      	bne.n	800ef36 <_strtol_l.isra.0+0x9a>
 800eecc:	f89e 4000 	ldrb.w	r4, [lr]
 800eed0:	f04f 0801 	mov.w	r8, #1
 800eed4:	f106 0e02 	add.w	lr, r6, #2
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d05c      	beq.n	800ef96 <_strtol_l.isra.0+0xfa>
 800eedc:	2b10      	cmp	r3, #16
 800eede:	d10c      	bne.n	800eefa <_strtol_l.isra.0+0x5e>
 800eee0:	2c30      	cmp	r4, #48	; 0x30
 800eee2:	d10a      	bne.n	800eefa <_strtol_l.isra.0+0x5e>
 800eee4:	f89e 4000 	ldrb.w	r4, [lr]
 800eee8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eeec:	2c58      	cmp	r4, #88	; 0x58
 800eeee:	d14d      	bne.n	800ef8c <_strtol_l.isra.0+0xf0>
 800eef0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eef4:	2310      	movs	r3, #16
 800eef6:	f10e 0e02 	add.w	lr, lr, #2
 800eefa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800eefe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ef02:	2600      	movs	r6, #0
 800ef04:	fbbc f9f3 	udiv	r9, ip, r3
 800ef08:	4635      	mov	r5, r6
 800ef0a:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef0e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ef12:	2f09      	cmp	r7, #9
 800ef14:	d818      	bhi.n	800ef48 <_strtol_l.isra.0+0xac>
 800ef16:	463c      	mov	r4, r7
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	dd24      	ble.n	800ef66 <_strtol_l.isra.0+0xca>
 800ef1c:	2e00      	cmp	r6, #0
 800ef1e:	db1f      	blt.n	800ef60 <_strtol_l.isra.0+0xc4>
 800ef20:	45a9      	cmp	r9, r5
 800ef22:	d31d      	bcc.n	800ef60 <_strtol_l.isra.0+0xc4>
 800ef24:	d101      	bne.n	800ef2a <_strtol_l.isra.0+0x8e>
 800ef26:	45a2      	cmp	sl, r4
 800ef28:	db1a      	blt.n	800ef60 <_strtol_l.isra.0+0xc4>
 800ef2a:	fb05 4503 	mla	r5, r5, r3, r4
 800ef2e:	2601      	movs	r6, #1
 800ef30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ef34:	e7eb      	b.n	800ef0e <_strtol_l.isra.0+0x72>
 800ef36:	2c2b      	cmp	r4, #43	; 0x2b
 800ef38:	bf08      	it	eq
 800ef3a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ef3e:	46a8      	mov	r8, r5
 800ef40:	bf08      	it	eq
 800ef42:	f106 0e02 	addeq.w	lr, r6, #2
 800ef46:	e7c7      	b.n	800eed8 <_strtol_l.isra.0+0x3c>
 800ef48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ef4c:	2f19      	cmp	r7, #25
 800ef4e:	d801      	bhi.n	800ef54 <_strtol_l.isra.0+0xb8>
 800ef50:	3c37      	subs	r4, #55	; 0x37
 800ef52:	e7e1      	b.n	800ef18 <_strtol_l.isra.0+0x7c>
 800ef54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ef58:	2f19      	cmp	r7, #25
 800ef5a:	d804      	bhi.n	800ef66 <_strtol_l.isra.0+0xca>
 800ef5c:	3c57      	subs	r4, #87	; 0x57
 800ef5e:	e7db      	b.n	800ef18 <_strtol_l.isra.0+0x7c>
 800ef60:	f04f 36ff 	mov.w	r6, #4294967295
 800ef64:	e7e4      	b.n	800ef30 <_strtol_l.isra.0+0x94>
 800ef66:	2e00      	cmp	r6, #0
 800ef68:	da05      	bge.n	800ef76 <_strtol_l.isra.0+0xda>
 800ef6a:	2322      	movs	r3, #34	; 0x22
 800ef6c:	6003      	str	r3, [r0, #0]
 800ef6e:	4665      	mov	r5, ip
 800ef70:	b942      	cbnz	r2, 800ef84 <_strtol_l.isra.0+0xe8>
 800ef72:	4628      	mov	r0, r5
 800ef74:	e79d      	b.n	800eeb2 <_strtol_l.isra.0+0x16>
 800ef76:	f1b8 0f00 	cmp.w	r8, #0
 800ef7a:	d000      	beq.n	800ef7e <_strtol_l.isra.0+0xe2>
 800ef7c:	426d      	negs	r5, r5
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	d0f7      	beq.n	800ef72 <_strtol_l.isra.0+0xd6>
 800ef82:	b10e      	cbz	r6, 800ef88 <_strtol_l.isra.0+0xec>
 800ef84:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ef88:	6011      	str	r1, [r2, #0]
 800ef8a:	e7f2      	b.n	800ef72 <_strtol_l.isra.0+0xd6>
 800ef8c:	2430      	movs	r4, #48	; 0x30
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1b3      	bne.n	800eefa <_strtol_l.isra.0+0x5e>
 800ef92:	2308      	movs	r3, #8
 800ef94:	e7b1      	b.n	800eefa <_strtol_l.isra.0+0x5e>
 800ef96:	2c30      	cmp	r4, #48	; 0x30
 800ef98:	d0a4      	beq.n	800eee4 <_strtol_l.isra.0+0x48>
 800ef9a:	230a      	movs	r3, #10
 800ef9c:	e7ad      	b.n	800eefa <_strtol_l.isra.0+0x5e>
 800ef9e:	bf00      	nop
 800efa0:	08013209 	.word	0x08013209

0800efa4 <strtol>:
 800efa4:	4613      	mov	r3, r2
 800efa6:	460a      	mov	r2, r1
 800efa8:	4601      	mov	r1, r0
 800efaa:	4802      	ldr	r0, [pc, #8]	; (800efb4 <strtol+0x10>)
 800efac:	6800      	ldr	r0, [r0, #0]
 800efae:	f7ff bf75 	b.w	800ee9c <_strtol_l.isra.0>
 800efb2:	bf00      	nop
 800efb4:	2000002c 	.word	0x2000002c

0800efb8 <__swbuf_r>:
 800efb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efba:	460e      	mov	r6, r1
 800efbc:	4614      	mov	r4, r2
 800efbe:	4605      	mov	r5, r0
 800efc0:	b118      	cbz	r0, 800efca <__swbuf_r+0x12>
 800efc2:	6983      	ldr	r3, [r0, #24]
 800efc4:	b90b      	cbnz	r3, 800efca <__swbuf_r+0x12>
 800efc6:	f001 f849 	bl	801005c <__sinit>
 800efca:	4b21      	ldr	r3, [pc, #132]	; (800f050 <__swbuf_r+0x98>)
 800efcc:	429c      	cmp	r4, r3
 800efce:	d12b      	bne.n	800f028 <__swbuf_r+0x70>
 800efd0:	686c      	ldr	r4, [r5, #4]
 800efd2:	69a3      	ldr	r3, [r4, #24]
 800efd4:	60a3      	str	r3, [r4, #8]
 800efd6:	89a3      	ldrh	r3, [r4, #12]
 800efd8:	071a      	lsls	r2, r3, #28
 800efda:	d52f      	bpl.n	800f03c <__swbuf_r+0x84>
 800efdc:	6923      	ldr	r3, [r4, #16]
 800efde:	b36b      	cbz	r3, 800f03c <__swbuf_r+0x84>
 800efe0:	6923      	ldr	r3, [r4, #16]
 800efe2:	6820      	ldr	r0, [r4, #0]
 800efe4:	1ac0      	subs	r0, r0, r3
 800efe6:	6963      	ldr	r3, [r4, #20]
 800efe8:	b2f6      	uxtb	r6, r6
 800efea:	4283      	cmp	r3, r0
 800efec:	4637      	mov	r7, r6
 800efee:	dc04      	bgt.n	800effa <__swbuf_r+0x42>
 800eff0:	4621      	mov	r1, r4
 800eff2:	4628      	mov	r0, r5
 800eff4:	f000 ff9e 	bl	800ff34 <_fflush_r>
 800eff8:	bb30      	cbnz	r0, 800f048 <__swbuf_r+0x90>
 800effa:	68a3      	ldr	r3, [r4, #8]
 800effc:	3b01      	subs	r3, #1
 800effe:	60a3      	str	r3, [r4, #8]
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	6022      	str	r2, [r4, #0]
 800f006:	701e      	strb	r6, [r3, #0]
 800f008:	6963      	ldr	r3, [r4, #20]
 800f00a:	3001      	adds	r0, #1
 800f00c:	4283      	cmp	r3, r0
 800f00e:	d004      	beq.n	800f01a <__swbuf_r+0x62>
 800f010:	89a3      	ldrh	r3, [r4, #12]
 800f012:	07db      	lsls	r3, r3, #31
 800f014:	d506      	bpl.n	800f024 <__swbuf_r+0x6c>
 800f016:	2e0a      	cmp	r6, #10
 800f018:	d104      	bne.n	800f024 <__swbuf_r+0x6c>
 800f01a:	4621      	mov	r1, r4
 800f01c:	4628      	mov	r0, r5
 800f01e:	f000 ff89 	bl	800ff34 <_fflush_r>
 800f022:	b988      	cbnz	r0, 800f048 <__swbuf_r+0x90>
 800f024:	4638      	mov	r0, r7
 800f026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f028:	4b0a      	ldr	r3, [pc, #40]	; (800f054 <__swbuf_r+0x9c>)
 800f02a:	429c      	cmp	r4, r3
 800f02c:	d101      	bne.n	800f032 <__swbuf_r+0x7a>
 800f02e:	68ac      	ldr	r4, [r5, #8]
 800f030:	e7cf      	b.n	800efd2 <__swbuf_r+0x1a>
 800f032:	4b09      	ldr	r3, [pc, #36]	; (800f058 <__swbuf_r+0xa0>)
 800f034:	429c      	cmp	r4, r3
 800f036:	bf08      	it	eq
 800f038:	68ec      	ldreq	r4, [r5, #12]
 800f03a:	e7ca      	b.n	800efd2 <__swbuf_r+0x1a>
 800f03c:	4621      	mov	r1, r4
 800f03e:	4628      	mov	r0, r5
 800f040:	f000 f80c 	bl	800f05c <__swsetup_r>
 800f044:	2800      	cmp	r0, #0
 800f046:	d0cb      	beq.n	800efe0 <__swbuf_r+0x28>
 800f048:	f04f 37ff 	mov.w	r7, #4294967295
 800f04c:	e7ea      	b.n	800f024 <__swbuf_r+0x6c>
 800f04e:	bf00      	nop
 800f050:	080133c0 	.word	0x080133c0
 800f054:	080133e0 	.word	0x080133e0
 800f058:	080133a0 	.word	0x080133a0

0800f05c <__swsetup_r>:
 800f05c:	4b32      	ldr	r3, [pc, #200]	; (800f128 <__swsetup_r+0xcc>)
 800f05e:	b570      	push	{r4, r5, r6, lr}
 800f060:	681d      	ldr	r5, [r3, #0]
 800f062:	4606      	mov	r6, r0
 800f064:	460c      	mov	r4, r1
 800f066:	b125      	cbz	r5, 800f072 <__swsetup_r+0x16>
 800f068:	69ab      	ldr	r3, [r5, #24]
 800f06a:	b913      	cbnz	r3, 800f072 <__swsetup_r+0x16>
 800f06c:	4628      	mov	r0, r5
 800f06e:	f000 fff5 	bl	801005c <__sinit>
 800f072:	4b2e      	ldr	r3, [pc, #184]	; (800f12c <__swsetup_r+0xd0>)
 800f074:	429c      	cmp	r4, r3
 800f076:	d10f      	bne.n	800f098 <__swsetup_r+0x3c>
 800f078:	686c      	ldr	r4, [r5, #4]
 800f07a:	89a3      	ldrh	r3, [r4, #12]
 800f07c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f080:	0719      	lsls	r1, r3, #28
 800f082:	d42c      	bmi.n	800f0de <__swsetup_r+0x82>
 800f084:	06dd      	lsls	r5, r3, #27
 800f086:	d411      	bmi.n	800f0ac <__swsetup_r+0x50>
 800f088:	2309      	movs	r3, #9
 800f08a:	6033      	str	r3, [r6, #0]
 800f08c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f090:	81a3      	strh	r3, [r4, #12]
 800f092:	f04f 30ff 	mov.w	r0, #4294967295
 800f096:	e03e      	b.n	800f116 <__swsetup_r+0xba>
 800f098:	4b25      	ldr	r3, [pc, #148]	; (800f130 <__swsetup_r+0xd4>)
 800f09a:	429c      	cmp	r4, r3
 800f09c:	d101      	bne.n	800f0a2 <__swsetup_r+0x46>
 800f09e:	68ac      	ldr	r4, [r5, #8]
 800f0a0:	e7eb      	b.n	800f07a <__swsetup_r+0x1e>
 800f0a2:	4b24      	ldr	r3, [pc, #144]	; (800f134 <__swsetup_r+0xd8>)
 800f0a4:	429c      	cmp	r4, r3
 800f0a6:	bf08      	it	eq
 800f0a8:	68ec      	ldreq	r4, [r5, #12]
 800f0aa:	e7e6      	b.n	800f07a <__swsetup_r+0x1e>
 800f0ac:	0758      	lsls	r0, r3, #29
 800f0ae:	d512      	bpl.n	800f0d6 <__swsetup_r+0x7a>
 800f0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0b2:	b141      	cbz	r1, 800f0c6 <__swsetup_r+0x6a>
 800f0b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0b8:	4299      	cmp	r1, r3
 800f0ba:	d002      	beq.n	800f0c2 <__swsetup_r+0x66>
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f002 f929 	bl	8011314 <_free_r>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	6363      	str	r3, [r4, #52]	; 0x34
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0cc:	81a3      	strh	r3, [r4, #12]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	6063      	str	r3, [r4, #4]
 800f0d2:	6923      	ldr	r3, [r4, #16]
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	89a3      	ldrh	r3, [r4, #12]
 800f0d8:	f043 0308 	orr.w	r3, r3, #8
 800f0dc:	81a3      	strh	r3, [r4, #12]
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	b94b      	cbnz	r3, 800f0f6 <__swsetup_r+0x9a>
 800f0e2:	89a3      	ldrh	r3, [r4, #12]
 800f0e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0ec:	d003      	beq.n	800f0f6 <__swsetup_r+0x9a>
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	f001 fbeb 	bl	80108cc <__smakebuf_r>
 800f0f6:	89a0      	ldrh	r0, [r4, #12]
 800f0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0fc:	f010 0301 	ands.w	r3, r0, #1
 800f100:	d00a      	beq.n	800f118 <__swsetup_r+0xbc>
 800f102:	2300      	movs	r3, #0
 800f104:	60a3      	str	r3, [r4, #8]
 800f106:	6963      	ldr	r3, [r4, #20]
 800f108:	425b      	negs	r3, r3
 800f10a:	61a3      	str	r3, [r4, #24]
 800f10c:	6923      	ldr	r3, [r4, #16]
 800f10e:	b943      	cbnz	r3, 800f122 <__swsetup_r+0xc6>
 800f110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f114:	d1ba      	bne.n	800f08c <__swsetup_r+0x30>
 800f116:	bd70      	pop	{r4, r5, r6, pc}
 800f118:	0781      	lsls	r1, r0, #30
 800f11a:	bf58      	it	pl
 800f11c:	6963      	ldrpl	r3, [r4, #20]
 800f11e:	60a3      	str	r3, [r4, #8]
 800f120:	e7f4      	b.n	800f10c <__swsetup_r+0xb0>
 800f122:	2000      	movs	r0, #0
 800f124:	e7f7      	b.n	800f116 <__swsetup_r+0xba>
 800f126:	bf00      	nop
 800f128:	2000002c 	.word	0x2000002c
 800f12c:	080133c0 	.word	0x080133c0
 800f130:	080133e0 	.word	0x080133e0
 800f134:	080133a0 	.word	0x080133a0

0800f138 <quorem>:
 800f138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13c:	6903      	ldr	r3, [r0, #16]
 800f13e:	690c      	ldr	r4, [r1, #16]
 800f140:	42a3      	cmp	r3, r4
 800f142:	4607      	mov	r7, r0
 800f144:	f2c0 8081 	blt.w	800f24a <quorem+0x112>
 800f148:	3c01      	subs	r4, #1
 800f14a:	f101 0814 	add.w	r8, r1, #20
 800f14e:	f100 0514 	add.w	r5, r0, #20
 800f152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f156:	9301      	str	r3, [sp, #4]
 800f158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f15c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f160:	3301      	adds	r3, #1
 800f162:	429a      	cmp	r2, r3
 800f164:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f168:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f16c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f170:	d331      	bcc.n	800f1d6 <quorem+0x9e>
 800f172:	f04f 0e00 	mov.w	lr, #0
 800f176:	4640      	mov	r0, r8
 800f178:	46ac      	mov	ip, r5
 800f17a:	46f2      	mov	sl, lr
 800f17c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f180:	b293      	uxth	r3, r2
 800f182:	fb06 e303 	mla	r3, r6, r3, lr
 800f186:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	ebaa 0303 	sub.w	r3, sl, r3
 800f190:	0c12      	lsrs	r2, r2, #16
 800f192:	f8dc a000 	ldr.w	sl, [ip]
 800f196:	fb06 e202 	mla	r2, r6, r2, lr
 800f19a:	fa13 f38a 	uxtah	r3, r3, sl
 800f19e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f1a2:	fa1f fa82 	uxth.w	sl, r2
 800f1a6:	f8dc 2000 	ldr.w	r2, [ip]
 800f1aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f1ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1b8:	4581      	cmp	r9, r0
 800f1ba:	f84c 3b04 	str.w	r3, [ip], #4
 800f1be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f1c2:	d2db      	bcs.n	800f17c <quorem+0x44>
 800f1c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800f1c8:	b92b      	cbnz	r3, 800f1d6 <quorem+0x9e>
 800f1ca:	9b01      	ldr	r3, [sp, #4]
 800f1cc:	3b04      	subs	r3, #4
 800f1ce:	429d      	cmp	r5, r3
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	d32e      	bcc.n	800f232 <quorem+0xfa>
 800f1d4:	613c      	str	r4, [r7, #16]
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	f001 fe9a 	bl	8010f10 <__mcmp>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	db24      	blt.n	800f22a <quorem+0xf2>
 800f1e0:	3601      	adds	r6, #1
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	f04f 0c00 	mov.w	ip, #0
 800f1e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f1ec:	f8d0 e000 	ldr.w	lr, [r0]
 800f1f0:	b293      	uxth	r3, r2
 800f1f2:	ebac 0303 	sub.w	r3, ip, r3
 800f1f6:	0c12      	lsrs	r2, r2, #16
 800f1f8:	fa13 f38e 	uxtah	r3, r3, lr
 800f1fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f204:	b29b      	uxth	r3, r3
 800f206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f20a:	45c1      	cmp	r9, r8
 800f20c:	f840 3b04 	str.w	r3, [r0], #4
 800f210:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f214:	d2e8      	bcs.n	800f1e8 <quorem+0xb0>
 800f216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f21a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f21e:	b922      	cbnz	r2, 800f22a <quorem+0xf2>
 800f220:	3b04      	subs	r3, #4
 800f222:	429d      	cmp	r5, r3
 800f224:	461a      	mov	r2, r3
 800f226:	d30a      	bcc.n	800f23e <quorem+0x106>
 800f228:	613c      	str	r4, [r7, #16]
 800f22a:	4630      	mov	r0, r6
 800f22c:	b003      	add	sp, #12
 800f22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f232:	6812      	ldr	r2, [r2, #0]
 800f234:	3b04      	subs	r3, #4
 800f236:	2a00      	cmp	r2, #0
 800f238:	d1cc      	bne.n	800f1d4 <quorem+0x9c>
 800f23a:	3c01      	subs	r4, #1
 800f23c:	e7c7      	b.n	800f1ce <quorem+0x96>
 800f23e:	6812      	ldr	r2, [r2, #0]
 800f240:	3b04      	subs	r3, #4
 800f242:	2a00      	cmp	r2, #0
 800f244:	d1f0      	bne.n	800f228 <quorem+0xf0>
 800f246:	3c01      	subs	r4, #1
 800f248:	e7eb      	b.n	800f222 <quorem+0xea>
 800f24a:	2000      	movs	r0, #0
 800f24c:	e7ee      	b.n	800f22c <quorem+0xf4>
	...

0800f250 <_dtoa_r>:
 800f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f254:	ed2d 8b02 	vpush	{d8}
 800f258:	ec57 6b10 	vmov	r6, r7, d0
 800f25c:	b095      	sub	sp, #84	; 0x54
 800f25e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f260:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f264:	9105      	str	r1, [sp, #20]
 800f266:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f26a:	4604      	mov	r4, r0
 800f26c:	9209      	str	r2, [sp, #36]	; 0x24
 800f26e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f270:	b975      	cbnz	r5, 800f290 <_dtoa_r+0x40>
 800f272:	2010      	movs	r0, #16
 800f274:	f001 fb6a 	bl	801094c <malloc>
 800f278:	4602      	mov	r2, r0
 800f27a:	6260      	str	r0, [r4, #36]	; 0x24
 800f27c:	b920      	cbnz	r0, 800f288 <_dtoa_r+0x38>
 800f27e:	4bb2      	ldr	r3, [pc, #712]	; (800f548 <_dtoa_r+0x2f8>)
 800f280:	21ea      	movs	r1, #234	; 0xea
 800f282:	48b2      	ldr	r0, [pc, #712]	; (800f54c <_dtoa_r+0x2fc>)
 800f284:	f002 fad8 	bl	8011838 <__assert_func>
 800f288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f28c:	6005      	str	r5, [r0, #0]
 800f28e:	60c5      	str	r5, [r0, #12]
 800f290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f292:	6819      	ldr	r1, [r3, #0]
 800f294:	b151      	cbz	r1, 800f2ac <_dtoa_r+0x5c>
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	604a      	str	r2, [r1, #4]
 800f29a:	2301      	movs	r3, #1
 800f29c:	4093      	lsls	r3, r2
 800f29e:	608b      	str	r3, [r1, #8]
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f001 fbad 	bl	8010a00 <_Bfree>
 800f2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	601a      	str	r2, [r3, #0]
 800f2ac:	1e3b      	subs	r3, r7, #0
 800f2ae:	bfb9      	ittee	lt
 800f2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f2b4:	9303      	strlt	r3, [sp, #12]
 800f2b6:	2300      	movge	r3, #0
 800f2b8:	f8c8 3000 	strge.w	r3, [r8]
 800f2bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f2c0:	4ba3      	ldr	r3, [pc, #652]	; (800f550 <_dtoa_r+0x300>)
 800f2c2:	bfbc      	itt	lt
 800f2c4:	2201      	movlt	r2, #1
 800f2c6:	f8c8 2000 	strlt.w	r2, [r8]
 800f2ca:	ea33 0309 	bics.w	r3, r3, r9
 800f2ce:	d11b      	bne.n	800f308 <_dtoa_r+0xb8>
 800f2d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f2d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f2d6:	6013      	str	r3, [r2, #0]
 800f2d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2dc:	4333      	orrs	r3, r6
 800f2de:	f000 857a 	beq.w	800fdd6 <_dtoa_r+0xb86>
 800f2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2e4:	b963      	cbnz	r3, 800f300 <_dtoa_r+0xb0>
 800f2e6:	4b9b      	ldr	r3, [pc, #620]	; (800f554 <_dtoa_r+0x304>)
 800f2e8:	e024      	b.n	800f334 <_dtoa_r+0xe4>
 800f2ea:	4b9b      	ldr	r3, [pc, #620]	; (800f558 <_dtoa_r+0x308>)
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	3308      	adds	r3, #8
 800f2f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f2f2:	6013      	str	r3, [r2, #0]
 800f2f4:	9800      	ldr	r0, [sp, #0]
 800f2f6:	b015      	add	sp, #84	; 0x54
 800f2f8:	ecbd 8b02 	vpop	{d8}
 800f2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f300:	4b94      	ldr	r3, [pc, #592]	; (800f554 <_dtoa_r+0x304>)
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	3303      	adds	r3, #3
 800f306:	e7f3      	b.n	800f2f0 <_dtoa_r+0xa0>
 800f308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f30c:	2200      	movs	r2, #0
 800f30e:	ec51 0b17 	vmov	r0, r1, d7
 800f312:	2300      	movs	r3, #0
 800f314:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f318:	f7f1 fbfe 	bl	8000b18 <__aeabi_dcmpeq>
 800f31c:	4680      	mov	r8, r0
 800f31e:	b158      	cbz	r0, 800f338 <_dtoa_r+0xe8>
 800f320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f322:	2301      	movs	r3, #1
 800f324:	6013      	str	r3, [r2, #0]
 800f326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f000 8551 	beq.w	800fdd0 <_dtoa_r+0xb80>
 800f32e:	488b      	ldr	r0, [pc, #556]	; (800f55c <_dtoa_r+0x30c>)
 800f330:	6018      	str	r0, [r3, #0]
 800f332:	1e43      	subs	r3, r0, #1
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	e7dd      	b.n	800f2f4 <_dtoa_r+0xa4>
 800f338:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f33c:	aa12      	add	r2, sp, #72	; 0x48
 800f33e:	a913      	add	r1, sp, #76	; 0x4c
 800f340:	4620      	mov	r0, r4
 800f342:	f001 ff05 	bl	8011150 <__d2b>
 800f346:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f34a:	4683      	mov	fp, r0
 800f34c:	2d00      	cmp	r5, #0
 800f34e:	d07c      	beq.n	800f44a <_dtoa_r+0x1fa>
 800f350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f352:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f35a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f35e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f36a:	4b7d      	ldr	r3, [pc, #500]	; (800f560 <_dtoa_r+0x310>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	4630      	mov	r0, r6
 800f370:	4639      	mov	r1, r7
 800f372:	f7f0 ffb1 	bl	80002d8 <__aeabi_dsub>
 800f376:	a36e      	add	r3, pc, #440	; (adr r3, 800f530 <_dtoa_r+0x2e0>)
 800f378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37c:	f7f1 f964 	bl	8000648 <__aeabi_dmul>
 800f380:	a36d      	add	r3, pc, #436	; (adr r3, 800f538 <_dtoa_r+0x2e8>)
 800f382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f386:	f7f0 ffa9 	bl	80002dc <__adddf3>
 800f38a:	4606      	mov	r6, r0
 800f38c:	4628      	mov	r0, r5
 800f38e:	460f      	mov	r7, r1
 800f390:	f7f1 f8f0 	bl	8000574 <__aeabi_i2d>
 800f394:	a36a      	add	r3, pc, #424	; (adr r3, 800f540 <_dtoa_r+0x2f0>)
 800f396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39a:	f7f1 f955 	bl	8000648 <__aeabi_dmul>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	4639      	mov	r1, r7
 800f3a6:	f7f0 ff99 	bl	80002dc <__adddf3>
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	460f      	mov	r7, r1
 800f3ae:	f7f1 fbfb 	bl	8000ba8 <__aeabi_d2iz>
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	4682      	mov	sl, r0
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	4639      	mov	r1, r7
 800f3bc:	f7f1 fbb6 	bl	8000b2c <__aeabi_dcmplt>
 800f3c0:	b148      	cbz	r0, 800f3d6 <_dtoa_r+0x186>
 800f3c2:	4650      	mov	r0, sl
 800f3c4:	f7f1 f8d6 	bl	8000574 <__aeabi_i2d>
 800f3c8:	4632      	mov	r2, r6
 800f3ca:	463b      	mov	r3, r7
 800f3cc:	f7f1 fba4 	bl	8000b18 <__aeabi_dcmpeq>
 800f3d0:	b908      	cbnz	r0, 800f3d6 <_dtoa_r+0x186>
 800f3d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3d6:	f1ba 0f16 	cmp.w	sl, #22
 800f3da:	d854      	bhi.n	800f486 <_dtoa_r+0x236>
 800f3dc:	4b61      	ldr	r3, [pc, #388]	; (800f564 <_dtoa_r+0x314>)
 800f3de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f3ea:	f7f1 fb9f 	bl	8000b2c <__aeabi_dcmplt>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d04b      	beq.n	800f48a <_dtoa_r+0x23a>
 800f3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	930e      	str	r3, [sp, #56]	; 0x38
 800f3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3fc:	1b5d      	subs	r5, r3, r5
 800f3fe:	1e6b      	subs	r3, r5, #1
 800f400:	9304      	str	r3, [sp, #16]
 800f402:	bf43      	ittte	mi
 800f404:	2300      	movmi	r3, #0
 800f406:	f1c5 0801 	rsbmi	r8, r5, #1
 800f40a:	9304      	strmi	r3, [sp, #16]
 800f40c:	f04f 0800 	movpl.w	r8, #0
 800f410:	f1ba 0f00 	cmp.w	sl, #0
 800f414:	db3b      	blt.n	800f48e <_dtoa_r+0x23e>
 800f416:	9b04      	ldr	r3, [sp, #16]
 800f418:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f41c:	4453      	add	r3, sl
 800f41e:	9304      	str	r3, [sp, #16]
 800f420:	2300      	movs	r3, #0
 800f422:	9306      	str	r3, [sp, #24]
 800f424:	9b05      	ldr	r3, [sp, #20]
 800f426:	2b09      	cmp	r3, #9
 800f428:	d869      	bhi.n	800f4fe <_dtoa_r+0x2ae>
 800f42a:	2b05      	cmp	r3, #5
 800f42c:	bfc4      	itt	gt
 800f42e:	3b04      	subgt	r3, #4
 800f430:	9305      	strgt	r3, [sp, #20]
 800f432:	9b05      	ldr	r3, [sp, #20]
 800f434:	f1a3 0302 	sub.w	r3, r3, #2
 800f438:	bfcc      	ite	gt
 800f43a:	2500      	movgt	r5, #0
 800f43c:	2501      	movle	r5, #1
 800f43e:	2b03      	cmp	r3, #3
 800f440:	d869      	bhi.n	800f516 <_dtoa_r+0x2c6>
 800f442:	e8df f003 	tbb	[pc, r3]
 800f446:	4e2c      	.short	0x4e2c
 800f448:	5a4c      	.short	0x5a4c
 800f44a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f44e:	441d      	add	r5, r3
 800f450:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f454:	2b20      	cmp	r3, #32
 800f456:	bfc1      	itttt	gt
 800f458:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f45c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f460:	fa09 f303 	lslgt.w	r3, r9, r3
 800f464:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f468:	bfda      	itte	le
 800f46a:	f1c3 0320 	rsble	r3, r3, #32
 800f46e:	fa06 f003 	lslle.w	r0, r6, r3
 800f472:	4318      	orrgt	r0, r3
 800f474:	f7f1 f86e 	bl	8000554 <__aeabi_ui2d>
 800f478:	2301      	movs	r3, #1
 800f47a:	4606      	mov	r6, r0
 800f47c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f480:	3d01      	subs	r5, #1
 800f482:	9310      	str	r3, [sp, #64]	; 0x40
 800f484:	e771      	b.n	800f36a <_dtoa_r+0x11a>
 800f486:	2301      	movs	r3, #1
 800f488:	e7b6      	b.n	800f3f8 <_dtoa_r+0x1a8>
 800f48a:	900e      	str	r0, [sp, #56]	; 0x38
 800f48c:	e7b5      	b.n	800f3fa <_dtoa_r+0x1aa>
 800f48e:	f1ca 0300 	rsb	r3, sl, #0
 800f492:	9306      	str	r3, [sp, #24]
 800f494:	2300      	movs	r3, #0
 800f496:	eba8 080a 	sub.w	r8, r8, sl
 800f49a:	930d      	str	r3, [sp, #52]	; 0x34
 800f49c:	e7c2      	b.n	800f424 <_dtoa_r+0x1d4>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	9308      	str	r3, [sp, #32]
 800f4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	dc39      	bgt.n	800f51c <_dtoa_r+0x2cc>
 800f4a8:	f04f 0901 	mov.w	r9, #1
 800f4ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800f4b0:	464b      	mov	r3, r9
 800f4b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f4b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	6042      	str	r2, [r0, #4]
 800f4bc:	2204      	movs	r2, #4
 800f4be:	f102 0614 	add.w	r6, r2, #20
 800f4c2:	429e      	cmp	r6, r3
 800f4c4:	6841      	ldr	r1, [r0, #4]
 800f4c6:	d92f      	bls.n	800f528 <_dtoa_r+0x2d8>
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f001 fa59 	bl	8010980 <_Balloc>
 800f4ce:	9000      	str	r0, [sp, #0]
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d14b      	bne.n	800f56c <_dtoa_r+0x31c>
 800f4d4:	4b24      	ldr	r3, [pc, #144]	; (800f568 <_dtoa_r+0x318>)
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f4dc:	e6d1      	b.n	800f282 <_dtoa_r+0x32>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e7de      	b.n	800f4a0 <_dtoa_r+0x250>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	9308      	str	r3, [sp, #32]
 800f4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e8:	eb0a 0903 	add.w	r9, sl, r3
 800f4ec:	f109 0301 	add.w	r3, r9, #1
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	9301      	str	r3, [sp, #4]
 800f4f4:	bfb8      	it	lt
 800f4f6:	2301      	movlt	r3, #1
 800f4f8:	e7dd      	b.n	800f4b6 <_dtoa_r+0x266>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e7f2      	b.n	800f4e4 <_dtoa_r+0x294>
 800f4fe:	2501      	movs	r5, #1
 800f500:	2300      	movs	r3, #0
 800f502:	9305      	str	r3, [sp, #20]
 800f504:	9508      	str	r5, [sp, #32]
 800f506:	f04f 39ff 	mov.w	r9, #4294967295
 800f50a:	2200      	movs	r2, #0
 800f50c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f510:	2312      	movs	r3, #18
 800f512:	9209      	str	r2, [sp, #36]	; 0x24
 800f514:	e7cf      	b.n	800f4b6 <_dtoa_r+0x266>
 800f516:	2301      	movs	r3, #1
 800f518:	9308      	str	r3, [sp, #32]
 800f51a:	e7f4      	b.n	800f506 <_dtoa_r+0x2b6>
 800f51c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f520:	f8cd 9004 	str.w	r9, [sp, #4]
 800f524:	464b      	mov	r3, r9
 800f526:	e7c6      	b.n	800f4b6 <_dtoa_r+0x266>
 800f528:	3101      	adds	r1, #1
 800f52a:	6041      	str	r1, [r0, #4]
 800f52c:	0052      	lsls	r2, r2, #1
 800f52e:	e7c6      	b.n	800f4be <_dtoa_r+0x26e>
 800f530:	636f4361 	.word	0x636f4361
 800f534:	3fd287a7 	.word	0x3fd287a7
 800f538:	8b60c8b3 	.word	0x8b60c8b3
 800f53c:	3fc68a28 	.word	0x3fc68a28
 800f540:	509f79fb 	.word	0x509f79fb
 800f544:	3fd34413 	.word	0x3fd34413
 800f548:	08013316 	.word	0x08013316
 800f54c:	0801332d 	.word	0x0801332d
 800f550:	7ff00000 	.word	0x7ff00000
 800f554:	08013312 	.word	0x08013312
 800f558:	08013309 	.word	0x08013309
 800f55c:	08013195 	.word	0x08013195
 800f560:	3ff80000 	.word	0x3ff80000
 800f564:	08013508 	.word	0x08013508
 800f568:	0801338c 	.word	0x0801338c
 800f56c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f56e:	9a00      	ldr	r2, [sp, #0]
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	9b01      	ldr	r3, [sp, #4]
 800f574:	2b0e      	cmp	r3, #14
 800f576:	f200 80ad 	bhi.w	800f6d4 <_dtoa_r+0x484>
 800f57a:	2d00      	cmp	r5, #0
 800f57c:	f000 80aa 	beq.w	800f6d4 <_dtoa_r+0x484>
 800f580:	f1ba 0f00 	cmp.w	sl, #0
 800f584:	dd36      	ble.n	800f5f4 <_dtoa_r+0x3a4>
 800f586:	4ac3      	ldr	r2, [pc, #780]	; (800f894 <_dtoa_r+0x644>)
 800f588:	f00a 030f 	and.w	r3, sl, #15
 800f58c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f590:	ed93 7b00 	vldr	d7, [r3]
 800f594:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f598:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f59c:	eeb0 8a47 	vmov.f32	s16, s14
 800f5a0:	eef0 8a67 	vmov.f32	s17, s15
 800f5a4:	d016      	beq.n	800f5d4 <_dtoa_r+0x384>
 800f5a6:	4bbc      	ldr	r3, [pc, #752]	; (800f898 <_dtoa_r+0x648>)
 800f5a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f5b0:	f7f1 f974 	bl	800089c <__aeabi_ddiv>
 800f5b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5b8:	f007 070f 	and.w	r7, r7, #15
 800f5bc:	2503      	movs	r5, #3
 800f5be:	4eb6      	ldr	r6, [pc, #728]	; (800f898 <_dtoa_r+0x648>)
 800f5c0:	b957      	cbnz	r7, 800f5d8 <_dtoa_r+0x388>
 800f5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5c6:	ec53 2b18 	vmov	r2, r3, d8
 800f5ca:	f7f1 f967 	bl	800089c <__aeabi_ddiv>
 800f5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d2:	e029      	b.n	800f628 <_dtoa_r+0x3d8>
 800f5d4:	2502      	movs	r5, #2
 800f5d6:	e7f2      	b.n	800f5be <_dtoa_r+0x36e>
 800f5d8:	07f9      	lsls	r1, r7, #31
 800f5da:	d508      	bpl.n	800f5ee <_dtoa_r+0x39e>
 800f5dc:	ec51 0b18 	vmov	r0, r1, d8
 800f5e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f5e4:	f7f1 f830 	bl	8000648 <__aeabi_dmul>
 800f5e8:	ec41 0b18 	vmov	d8, r0, r1
 800f5ec:	3501      	adds	r5, #1
 800f5ee:	107f      	asrs	r7, r7, #1
 800f5f0:	3608      	adds	r6, #8
 800f5f2:	e7e5      	b.n	800f5c0 <_dtoa_r+0x370>
 800f5f4:	f000 80a6 	beq.w	800f744 <_dtoa_r+0x4f4>
 800f5f8:	f1ca 0600 	rsb	r6, sl, #0
 800f5fc:	4ba5      	ldr	r3, [pc, #660]	; (800f894 <_dtoa_r+0x644>)
 800f5fe:	4fa6      	ldr	r7, [pc, #664]	; (800f898 <_dtoa_r+0x648>)
 800f600:	f006 020f 	and.w	r2, r6, #15
 800f604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f610:	f7f1 f81a 	bl	8000648 <__aeabi_dmul>
 800f614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f618:	1136      	asrs	r6, r6, #4
 800f61a:	2300      	movs	r3, #0
 800f61c:	2502      	movs	r5, #2
 800f61e:	2e00      	cmp	r6, #0
 800f620:	f040 8085 	bne.w	800f72e <_dtoa_r+0x4de>
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1d2      	bne.n	800f5ce <_dtoa_r+0x37e>
 800f628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f000 808c 	beq.w	800f748 <_dtoa_r+0x4f8>
 800f630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f634:	4b99      	ldr	r3, [pc, #612]	; (800f89c <_dtoa_r+0x64c>)
 800f636:	2200      	movs	r2, #0
 800f638:	4630      	mov	r0, r6
 800f63a:	4639      	mov	r1, r7
 800f63c:	f7f1 fa76 	bl	8000b2c <__aeabi_dcmplt>
 800f640:	2800      	cmp	r0, #0
 800f642:	f000 8081 	beq.w	800f748 <_dtoa_r+0x4f8>
 800f646:	9b01      	ldr	r3, [sp, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d07d      	beq.n	800f748 <_dtoa_r+0x4f8>
 800f64c:	f1b9 0f00 	cmp.w	r9, #0
 800f650:	dd3c      	ble.n	800f6cc <_dtoa_r+0x47c>
 800f652:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f656:	9307      	str	r3, [sp, #28]
 800f658:	2200      	movs	r2, #0
 800f65a:	4b91      	ldr	r3, [pc, #580]	; (800f8a0 <_dtoa_r+0x650>)
 800f65c:	4630      	mov	r0, r6
 800f65e:	4639      	mov	r1, r7
 800f660:	f7f0 fff2 	bl	8000648 <__aeabi_dmul>
 800f664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f668:	3501      	adds	r5, #1
 800f66a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f66e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f672:	4628      	mov	r0, r5
 800f674:	f7f0 ff7e 	bl	8000574 <__aeabi_i2d>
 800f678:	4632      	mov	r2, r6
 800f67a:	463b      	mov	r3, r7
 800f67c:	f7f0 ffe4 	bl	8000648 <__aeabi_dmul>
 800f680:	4b88      	ldr	r3, [pc, #544]	; (800f8a4 <_dtoa_r+0x654>)
 800f682:	2200      	movs	r2, #0
 800f684:	f7f0 fe2a 	bl	80002dc <__adddf3>
 800f688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f690:	9303      	str	r3, [sp, #12]
 800f692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f694:	2b00      	cmp	r3, #0
 800f696:	d15c      	bne.n	800f752 <_dtoa_r+0x502>
 800f698:	4b83      	ldr	r3, [pc, #524]	; (800f8a8 <_dtoa_r+0x658>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	4630      	mov	r0, r6
 800f69e:	4639      	mov	r1, r7
 800f6a0:	f7f0 fe1a 	bl	80002d8 <__aeabi_dsub>
 800f6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6a8:	4606      	mov	r6, r0
 800f6aa:	460f      	mov	r7, r1
 800f6ac:	f7f1 fa5c 	bl	8000b68 <__aeabi_dcmpgt>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	f040 8296 	bne.w	800fbe2 <_dtoa_r+0x992>
 800f6b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f7f1 fa33 	bl	8000b2c <__aeabi_dcmplt>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	f040 8288 	bne.w	800fbdc <_dtoa_r+0x98c>
 800f6cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f6d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f2c0 8158 	blt.w	800f98c <_dtoa_r+0x73c>
 800f6dc:	f1ba 0f0e 	cmp.w	sl, #14
 800f6e0:	f300 8154 	bgt.w	800f98c <_dtoa_r+0x73c>
 800f6e4:	4b6b      	ldr	r3, [pc, #428]	; (800f894 <_dtoa_r+0x644>)
 800f6e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f280 80e3 	bge.w	800f8bc <_dtoa_r+0x66c>
 800f6f6:	9b01      	ldr	r3, [sp, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f300 80df 	bgt.w	800f8bc <_dtoa_r+0x66c>
 800f6fe:	f040 826d 	bne.w	800fbdc <_dtoa_r+0x98c>
 800f702:	4b69      	ldr	r3, [pc, #420]	; (800f8a8 <_dtoa_r+0x658>)
 800f704:	2200      	movs	r2, #0
 800f706:	4640      	mov	r0, r8
 800f708:	4649      	mov	r1, r9
 800f70a:	f7f0 ff9d 	bl	8000648 <__aeabi_dmul>
 800f70e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f712:	f7f1 fa1f 	bl	8000b54 <__aeabi_dcmpge>
 800f716:	9e01      	ldr	r6, [sp, #4]
 800f718:	4637      	mov	r7, r6
 800f71a:	2800      	cmp	r0, #0
 800f71c:	f040 8243 	bne.w	800fba6 <_dtoa_r+0x956>
 800f720:	9d00      	ldr	r5, [sp, #0]
 800f722:	2331      	movs	r3, #49	; 0x31
 800f724:	f805 3b01 	strb.w	r3, [r5], #1
 800f728:	f10a 0a01 	add.w	sl, sl, #1
 800f72c:	e23f      	b.n	800fbae <_dtoa_r+0x95e>
 800f72e:	07f2      	lsls	r2, r6, #31
 800f730:	d505      	bpl.n	800f73e <_dtoa_r+0x4ee>
 800f732:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f736:	f7f0 ff87 	bl	8000648 <__aeabi_dmul>
 800f73a:	3501      	adds	r5, #1
 800f73c:	2301      	movs	r3, #1
 800f73e:	1076      	asrs	r6, r6, #1
 800f740:	3708      	adds	r7, #8
 800f742:	e76c      	b.n	800f61e <_dtoa_r+0x3ce>
 800f744:	2502      	movs	r5, #2
 800f746:	e76f      	b.n	800f628 <_dtoa_r+0x3d8>
 800f748:	9b01      	ldr	r3, [sp, #4]
 800f74a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f74e:	930c      	str	r3, [sp, #48]	; 0x30
 800f750:	e78d      	b.n	800f66e <_dtoa_r+0x41e>
 800f752:	9900      	ldr	r1, [sp, #0]
 800f754:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f758:	4b4e      	ldr	r3, [pc, #312]	; (800f894 <_dtoa_r+0x644>)
 800f75a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f75e:	4401      	add	r1, r0
 800f760:	9102      	str	r1, [sp, #8]
 800f762:	9908      	ldr	r1, [sp, #32]
 800f764:	eeb0 8a47 	vmov.f32	s16, s14
 800f768:	eef0 8a67 	vmov.f32	s17, s15
 800f76c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f774:	2900      	cmp	r1, #0
 800f776:	d045      	beq.n	800f804 <_dtoa_r+0x5b4>
 800f778:	494c      	ldr	r1, [pc, #304]	; (800f8ac <_dtoa_r+0x65c>)
 800f77a:	2000      	movs	r0, #0
 800f77c:	f7f1 f88e 	bl	800089c <__aeabi_ddiv>
 800f780:	ec53 2b18 	vmov	r2, r3, d8
 800f784:	f7f0 fda8 	bl	80002d8 <__aeabi_dsub>
 800f788:	9d00      	ldr	r5, [sp, #0]
 800f78a:	ec41 0b18 	vmov	d8, r0, r1
 800f78e:	4639      	mov	r1, r7
 800f790:	4630      	mov	r0, r6
 800f792:	f7f1 fa09 	bl	8000ba8 <__aeabi_d2iz>
 800f796:	900c      	str	r0, [sp, #48]	; 0x30
 800f798:	f7f0 feec 	bl	8000574 <__aeabi_i2d>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	4639      	mov	r1, r7
 800f7a4:	f7f0 fd98 	bl	80002d8 <__aeabi_dsub>
 800f7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7aa:	3330      	adds	r3, #48	; 0x30
 800f7ac:	f805 3b01 	strb.w	r3, [r5], #1
 800f7b0:	ec53 2b18 	vmov	r2, r3, d8
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	460f      	mov	r7, r1
 800f7b8:	f7f1 f9b8 	bl	8000b2c <__aeabi_dcmplt>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	d165      	bne.n	800f88c <_dtoa_r+0x63c>
 800f7c0:	4632      	mov	r2, r6
 800f7c2:	463b      	mov	r3, r7
 800f7c4:	4935      	ldr	r1, [pc, #212]	; (800f89c <_dtoa_r+0x64c>)
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	f7f0 fd86 	bl	80002d8 <__aeabi_dsub>
 800f7cc:	ec53 2b18 	vmov	r2, r3, d8
 800f7d0:	f7f1 f9ac 	bl	8000b2c <__aeabi_dcmplt>
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	f040 80b9 	bne.w	800f94c <_dtoa_r+0x6fc>
 800f7da:	9b02      	ldr	r3, [sp, #8]
 800f7dc:	429d      	cmp	r5, r3
 800f7de:	f43f af75 	beq.w	800f6cc <_dtoa_r+0x47c>
 800f7e2:	4b2f      	ldr	r3, [pc, #188]	; (800f8a0 <_dtoa_r+0x650>)
 800f7e4:	ec51 0b18 	vmov	r0, r1, d8
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f7f0 ff2d 	bl	8000648 <__aeabi_dmul>
 800f7ee:	4b2c      	ldr	r3, [pc, #176]	; (800f8a0 <_dtoa_r+0x650>)
 800f7f0:	ec41 0b18 	vmov	d8, r0, r1
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	f7f0 ff25 	bl	8000648 <__aeabi_dmul>
 800f7fe:	4606      	mov	r6, r0
 800f800:	460f      	mov	r7, r1
 800f802:	e7c4      	b.n	800f78e <_dtoa_r+0x53e>
 800f804:	ec51 0b17 	vmov	r0, r1, d7
 800f808:	f7f0 ff1e 	bl	8000648 <__aeabi_dmul>
 800f80c:	9b02      	ldr	r3, [sp, #8]
 800f80e:	9d00      	ldr	r5, [sp, #0]
 800f810:	930c      	str	r3, [sp, #48]	; 0x30
 800f812:	ec41 0b18 	vmov	d8, r0, r1
 800f816:	4639      	mov	r1, r7
 800f818:	4630      	mov	r0, r6
 800f81a:	f7f1 f9c5 	bl	8000ba8 <__aeabi_d2iz>
 800f81e:	9011      	str	r0, [sp, #68]	; 0x44
 800f820:	f7f0 fea8 	bl	8000574 <__aeabi_i2d>
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	4630      	mov	r0, r6
 800f82a:	4639      	mov	r1, r7
 800f82c:	f7f0 fd54 	bl	80002d8 <__aeabi_dsub>
 800f830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f832:	3330      	adds	r3, #48	; 0x30
 800f834:	f805 3b01 	strb.w	r3, [r5], #1
 800f838:	9b02      	ldr	r3, [sp, #8]
 800f83a:	429d      	cmp	r5, r3
 800f83c:	4606      	mov	r6, r0
 800f83e:	460f      	mov	r7, r1
 800f840:	f04f 0200 	mov.w	r2, #0
 800f844:	d134      	bne.n	800f8b0 <_dtoa_r+0x660>
 800f846:	4b19      	ldr	r3, [pc, #100]	; (800f8ac <_dtoa_r+0x65c>)
 800f848:	ec51 0b18 	vmov	r0, r1, d8
 800f84c:	f7f0 fd46 	bl	80002dc <__adddf3>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	4630      	mov	r0, r6
 800f856:	4639      	mov	r1, r7
 800f858:	f7f1 f986 	bl	8000b68 <__aeabi_dcmpgt>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	d175      	bne.n	800f94c <_dtoa_r+0x6fc>
 800f860:	ec53 2b18 	vmov	r2, r3, d8
 800f864:	4911      	ldr	r1, [pc, #68]	; (800f8ac <_dtoa_r+0x65c>)
 800f866:	2000      	movs	r0, #0
 800f868:	f7f0 fd36 	bl	80002d8 <__aeabi_dsub>
 800f86c:	4602      	mov	r2, r0
 800f86e:	460b      	mov	r3, r1
 800f870:	4630      	mov	r0, r6
 800f872:	4639      	mov	r1, r7
 800f874:	f7f1 f95a 	bl	8000b2c <__aeabi_dcmplt>
 800f878:	2800      	cmp	r0, #0
 800f87a:	f43f af27 	beq.w	800f6cc <_dtoa_r+0x47c>
 800f87e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f880:	1e6b      	subs	r3, r5, #1
 800f882:	930c      	str	r3, [sp, #48]	; 0x30
 800f884:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f888:	2b30      	cmp	r3, #48	; 0x30
 800f88a:	d0f8      	beq.n	800f87e <_dtoa_r+0x62e>
 800f88c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f890:	e04a      	b.n	800f928 <_dtoa_r+0x6d8>
 800f892:	bf00      	nop
 800f894:	08013508 	.word	0x08013508
 800f898:	080134e0 	.word	0x080134e0
 800f89c:	3ff00000 	.word	0x3ff00000
 800f8a0:	40240000 	.word	0x40240000
 800f8a4:	401c0000 	.word	0x401c0000
 800f8a8:	40140000 	.word	0x40140000
 800f8ac:	3fe00000 	.word	0x3fe00000
 800f8b0:	4baf      	ldr	r3, [pc, #700]	; (800fb70 <_dtoa_r+0x920>)
 800f8b2:	f7f0 fec9 	bl	8000648 <__aeabi_dmul>
 800f8b6:	4606      	mov	r6, r0
 800f8b8:	460f      	mov	r7, r1
 800f8ba:	e7ac      	b.n	800f816 <_dtoa_r+0x5c6>
 800f8bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f8c0:	9d00      	ldr	r5, [sp, #0]
 800f8c2:	4642      	mov	r2, r8
 800f8c4:	464b      	mov	r3, r9
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	4639      	mov	r1, r7
 800f8ca:	f7f0 ffe7 	bl	800089c <__aeabi_ddiv>
 800f8ce:	f7f1 f96b 	bl	8000ba8 <__aeabi_d2iz>
 800f8d2:	9002      	str	r0, [sp, #8]
 800f8d4:	f7f0 fe4e 	bl	8000574 <__aeabi_i2d>
 800f8d8:	4642      	mov	r2, r8
 800f8da:	464b      	mov	r3, r9
 800f8dc:	f7f0 feb4 	bl	8000648 <__aeabi_dmul>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	4639      	mov	r1, r7
 800f8e8:	f7f0 fcf6 	bl	80002d8 <__aeabi_dsub>
 800f8ec:	9e02      	ldr	r6, [sp, #8]
 800f8ee:	9f01      	ldr	r7, [sp, #4]
 800f8f0:	3630      	adds	r6, #48	; 0x30
 800f8f2:	f805 6b01 	strb.w	r6, [r5], #1
 800f8f6:	9e00      	ldr	r6, [sp, #0]
 800f8f8:	1bae      	subs	r6, r5, r6
 800f8fa:	42b7      	cmp	r7, r6
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	460b      	mov	r3, r1
 800f900:	d137      	bne.n	800f972 <_dtoa_r+0x722>
 800f902:	f7f0 fceb 	bl	80002dc <__adddf3>
 800f906:	4642      	mov	r2, r8
 800f908:	464b      	mov	r3, r9
 800f90a:	4606      	mov	r6, r0
 800f90c:	460f      	mov	r7, r1
 800f90e:	f7f1 f92b 	bl	8000b68 <__aeabi_dcmpgt>
 800f912:	b9c8      	cbnz	r0, 800f948 <_dtoa_r+0x6f8>
 800f914:	4642      	mov	r2, r8
 800f916:	464b      	mov	r3, r9
 800f918:	4630      	mov	r0, r6
 800f91a:	4639      	mov	r1, r7
 800f91c:	f7f1 f8fc 	bl	8000b18 <__aeabi_dcmpeq>
 800f920:	b110      	cbz	r0, 800f928 <_dtoa_r+0x6d8>
 800f922:	9b02      	ldr	r3, [sp, #8]
 800f924:	07d9      	lsls	r1, r3, #31
 800f926:	d40f      	bmi.n	800f948 <_dtoa_r+0x6f8>
 800f928:	4620      	mov	r0, r4
 800f92a:	4659      	mov	r1, fp
 800f92c:	f001 f868 	bl	8010a00 <_Bfree>
 800f930:	2300      	movs	r3, #0
 800f932:	702b      	strb	r3, [r5, #0]
 800f934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f936:	f10a 0001 	add.w	r0, sl, #1
 800f93a:	6018      	str	r0, [r3, #0]
 800f93c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f43f acd8 	beq.w	800f2f4 <_dtoa_r+0xa4>
 800f944:	601d      	str	r5, [r3, #0]
 800f946:	e4d5      	b.n	800f2f4 <_dtoa_r+0xa4>
 800f948:	f8cd a01c 	str.w	sl, [sp, #28]
 800f94c:	462b      	mov	r3, r5
 800f94e:	461d      	mov	r5, r3
 800f950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f954:	2a39      	cmp	r2, #57	; 0x39
 800f956:	d108      	bne.n	800f96a <_dtoa_r+0x71a>
 800f958:	9a00      	ldr	r2, [sp, #0]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d1f7      	bne.n	800f94e <_dtoa_r+0x6fe>
 800f95e:	9a07      	ldr	r2, [sp, #28]
 800f960:	9900      	ldr	r1, [sp, #0]
 800f962:	3201      	adds	r2, #1
 800f964:	9207      	str	r2, [sp, #28]
 800f966:	2230      	movs	r2, #48	; 0x30
 800f968:	700a      	strb	r2, [r1, #0]
 800f96a:	781a      	ldrb	r2, [r3, #0]
 800f96c:	3201      	adds	r2, #1
 800f96e:	701a      	strb	r2, [r3, #0]
 800f970:	e78c      	b.n	800f88c <_dtoa_r+0x63c>
 800f972:	4b7f      	ldr	r3, [pc, #508]	; (800fb70 <_dtoa_r+0x920>)
 800f974:	2200      	movs	r2, #0
 800f976:	f7f0 fe67 	bl	8000648 <__aeabi_dmul>
 800f97a:	2200      	movs	r2, #0
 800f97c:	2300      	movs	r3, #0
 800f97e:	4606      	mov	r6, r0
 800f980:	460f      	mov	r7, r1
 800f982:	f7f1 f8c9 	bl	8000b18 <__aeabi_dcmpeq>
 800f986:	2800      	cmp	r0, #0
 800f988:	d09b      	beq.n	800f8c2 <_dtoa_r+0x672>
 800f98a:	e7cd      	b.n	800f928 <_dtoa_r+0x6d8>
 800f98c:	9a08      	ldr	r2, [sp, #32]
 800f98e:	2a00      	cmp	r2, #0
 800f990:	f000 80c4 	beq.w	800fb1c <_dtoa_r+0x8cc>
 800f994:	9a05      	ldr	r2, [sp, #20]
 800f996:	2a01      	cmp	r2, #1
 800f998:	f300 80a8 	bgt.w	800faec <_dtoa_r+0x89c>
 800f99c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f99e:	2a00      	cmp	r2, #0
 800f9a0:	f000 80a0 	beq.w	800fae4 <_dtoa_r+0x894>
 800f9a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f9a8:	9e06      	ldr	r6, [sp, #24]
 800f9aa:	4645      	mov	r5, r8
 800f9ac:	9a04      	ldr	r2, [sp, #16]
 800f9ae:	2101      	movs	r1, #1
 800f9b0:	441a      	add	r2, r3
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	4498      	add	r8, r3
 800f9b6:	9204      	str	r2, [sp, #16]
 800f9b8:	f001 f928 	bl	8010c0c <__i2b>
 800f9bc:	4607      	mov	r7, r0
 800f9be:	2d00      	cmp	r5, #0
 800f9c0:	dd0b      	ble.n	800f9da <_dtoa_r+0x78a>
 800f9c2:	9b04      	ldr	r3, [sp, #16]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	dd08      	ble.n	800f9da <_dtoa_r+0x78a>
 800f9c8:	42ab      	cmp	r3, r5
 800f9ca:	9a04      	ldr	r2, [sp, #16]
 800f9cc:	bfa8      	it	ge
 800f9ce:	462b      	movge	r3, r5
 800f9d0:	eba8 0803 	sub.w	r8, r8, r3
 800f9d4:	1aed      	subs	r5, r5, r3
 800f9d6:	1ad3      	subs	r3, r2, r3
 800f9d8:	9304      	str	r3, [sp, #16]
 800f9da:	9b06      	ldr	r3, [sp, #24]
 800f9dc:	b1fb      	cbz	r3, 800fa1e <_dtoa_r+0x7ce>
 800f9de:	9b08      	ldr	r3, [sp, #32]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f000 809f 	beq.w	800fb24 <_dtoa_r+0x8d4>
 800f9e6:	2e00      	cmp	r6, #0
 800f9e8:	dd11      	ble.n	800fa0e <_dtoa_r+0x7be>
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	4632      	mov	r2, r6
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f001 f9c8 	bl	8010d84 <__pow5mult>
 800f9f4:	465a      	mov	r2, fp
 800f9f6:	4601      	mov	r1, r0
 800f9f8:	4607      	mov	r7, r0
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f001 f91c 	bl	8010c38 <__multiply>
 800fa00:	4659      	mov	r1, fp
 800fa02:	9007      	str	r0, [sp, #28]
 800fa04:	4620      	mov	r0, r4
 800fa06:	f000 fffb 	bl	8010a00 <_Bfree>
 800fa0a:	9b07      	ldr	r3, [sp, #28]
 800fa0c:	469b      	mov	fp, r3
 800fa0e:	9b06      	ldr	r3, [sp, #24]
 800fa10:	1b9a      	subs	r2, r3, r6
 800fa12:	d004      	beq.n	800fa1e <_dtoa_r+0x7ce>
 800fa14:	4659      	mov	r1, fp
 800fa16:	4620      	mov	r0, r4
 800fa18:	f001 f9b4 	bl	8010d84 <__pow5mult>
 800fa1c:	4683      	mov	fp, r0
 800fa1e:	2101      	movs	r1, #1
 800fa20:	4620      	mov	r0, r4
 800fa22:	f001 f8f3 	bl	8010c0c <__i2b>
 800fa26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	dd7c      	ble.n	800fb28 <_dtoa_r+0x8d8>
 800fa2e:	461a      	mov	r2, r3
 800fa30:	4601      	mov	r1, r0
 800fa32:	4620      	mov	r0, r4
 800fa34:	f001 f9a6 	bl	8010d84 <__pow5mult>
 800fa38:	9b05      	ldr	r3, [sp, #20]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	dd76      	ble.n	800fb2e <_dtoa_r+0x8de>
 800fa40:	2300      	movs	r3, #0
 800fa42:	9306      	str	r3, [sp, #24]
 800fa44:	6933      	ldr	r3, [r6, #16]
 800fa46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fa4a:	6918      	ldr	r0, [r3, #16]
 800fa4c:	f001 f88e 	bl	8010b6c <__hi0bits>
 800fa50:	f1c0 0020 	rsb	r0, r0, #32
 800fa54:	9b04      	ldr	r3, [sp, #16]
 800fa56:	4418      	add	r0, r3
 800fa58:	f010 001f 	ands.w	r0, r0, #31
 800fa5c:	f000 8086 	beq.w	800fb6c <_dtoa_r+0x91c>
 800fa60:	f1c0 0320 	rsb	r3, r0, #32
 800fa64:	2b04      	cmp	r3, #4
 800fa66:	dd7f      	ble.n	800fb68 <_dtoa_r+0x918>
 800fa68:	f1c0 001c 	rsb	r0, r0, #28
 800fa6c:	9b04      	ldr	r3, [sp, #16]
 800fa6e:	4403      	add	r3, r0
 800fa70:	4480      	add	r8, r0
 800fa72:	4405      	add	r5, r0
 800fa74:	9304      	str	r3, [sp, #16]
 800fa76:	f1b8 0f00 	cmp.w	r8, #0
 800fa7a:	dd05      	ble.n	800fa88 <_dtoa_r+0x838>
 800fa7c:	4659      	mov	r1, fp
 800fa7e:	4642      	mov	r2, r8
 800fa80:	4620      	mov	r0, r4
 800fa82:	f001 f9d9 	bl	8010e38 <__lshift>
 800fa86:	4683      	mov	fp, r0
 800fa88:	9b04      	ldr	r3, [sp, #16]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	dd05      	ble.n	800fa9a <_dtoa_r+0x84a>
 800fa8e:	4631      	mov	r1, r6
 800fa90:	461a      	mov	r2, r3
 800fa92:	4620      	mov	r0, r4
 800fa94:	f001 f9d0 	bl	8010e38 <__lshift>
 800fa98:	4606      	mov	r6, r0
 800fa9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d069      	beq.n	800fb74 <_dtoa_r+0x924>
 800faa0:	4631      	mov	r1, r6
 800faa2:	4658      	mov	r0, fp
 800faa4:	f001 fa34 	bl	8010f10 <__mcmp>
 800faa8:	2800      	cmp	r0, #0
 800faaa:	da63      	bge.n	800fb74 <_dtoa_r+0x924>
 800faac:	2300      	movs	r3, #0
 800faae:	4659      	mov	r1, fp
 800fab0:	220a      	movs	r2, #10
 800fab2:	4620      	mov	r0, r4
 800fab4:	f000 ffc6 	bl	8010a44 <__multadd>
 800fab8:	9b08      	ldr	r3, [sp, #32]
 800faba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fabe:	4683      	mov	fp, r0
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f000 818f 	beq.w	800fde4 <_dtoa_r+0xb94>
 800fac6:	4639      	mov	r1, r7
 800fac8:	2300      	movs	r3, #0
 800faca:	220a      	movs	r2, #10
 800facc:	4620      	mov	r0, r4
 800face:	f000 ffb9 	bl	8010a44 <__multadd>
 800fad2:	f1b9 0f00 	cmp.w	r9, #0
 800fad6:	4607      	mov	r7, r0
 800fad8:	f300 808e 	bgt.w	800fbf8 <_dtoa_r+0x9a8>
 800fadc:	9b05      	ldr	r3, [sp, #20]
 800fade:	2b02      	cmp	r3, #2
 800fae0:	dc50      	bgt.n	800fb84 <_dtoa_r+0x934>
 800fae2:	e089      	b.n	800fbf8 <_dtoa_r+0x9a8>
 800fae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800faea:	e75d      	b.n	800f9a8 <_dtoa_r+0x758>
 800faec:	9b01      	ldr	r3, [sp, #4]
 800faee:	1e5e      	subs	r6, r3, #1
 800faf0:	9b06      	ldr	r3, [sp, #24]
 800faf2:	42b3      	cmp	r3, r6
 800faf4:	bfbf      	itttt	lt
 800faf6:	9b06      	ldrlt	r3, [sp, #24]
 800faf8:	9606      	strlt	r6, [sp, #24]
 800fafa:	1af2      	sublt	r2, r6, r3
 800fafc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fafe:	bfb6      	itet	lt
 800fb00:	189b      	addlt	r3, r3, r2
 800fb02:	1b9e      	subge	r6, r3, r6
 800fb04:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fb06:	9b01      	ldr	r3, [sp, #4]
 800fb08:	bfb8      	it	lt
 800fb0a:	2600      	movlt	r6, #0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bfb5      	itete	lt
 800fb10:	eba8 0503 	sublt.w	r5, r8, r3
 800fb14:	9b01      	ldrge	r3, [sp, #4]
 800fb16:	2300      	movlt	r3, #0
 800fb18:	4645      	movge	r5, r8
 800fb1a:	e747      	b.n	800f9ac <_dtoa_r+0x75c>
 800fb1c:	9e06      	ldr	r6, [sp, #24]
 800fb1e:	9f08      	ldr	r7, [sp, #32]
 800fb20:	4645      	mov	r5, r8
 800fb22:	e74c      	b.n	800f9be <_dtoa_r+0x76e>
 800fb24:	9a06      	ldr	r2, [sp, #24]
 800fb26:	e775      	b.n	800fa14 <_dtoa_r+0x7c4>
 800fb28:	9b05      	ldr	r3, [sp, #20]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	dc18      	bgt.n	800fb60 <_dtoa_r+0x910>
 800fb2e:	9b02      	ldr	r3, [sp, #8]
 800fb30:	b9b3      	cbnz	r3, 800fb60 <_dtoa_r+0x910>
 800fb32:	9b03      	ldr	r3, [sp, #12]
 800fb34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb38:	b9a3      	cbnz	r3, 800fb64 <_dtoa_r+0x914>
 800fb3a:	9b03      	ldr	r3, [sp, #12]
 800fb3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb40:	0d1b      	lsrs	r3, r3, #20
 800fb42:	051b      	lsls	r3, r3, #20
 800fb44:	b12b      	cbz	r3, 800fb52 <_dtoa_r+0x902>
 800fb46:	9b04      	ldr	r3, [sp, #16]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	9304      	str	r3, [sp, #16]
 800fb4c:	f108 0801 	add.w	r8, r8, #1
 800fb50:	2301      	movs	r3, #1
 800fb52:	9306      	str	r3, [sp, #24]
 800fb54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f47f af74 	bne.w	800fa44 <_dtoa_r+0x7f4>
 800fb5c:	2001      	movs	r0, #1
 800fb5e:	e779      	b.n	800fa54 <_dtoa_r+0x804>
 800fb60:	2300      	movs	r3, #0
 800fb62:	e7f6      	b.n	800fb52 <_dtoa_r+0x902>
 800fb64:	9b02      	ldr	r3, [sp, #8]
 800fb66:	e7f4      	b.n	800fb52 <_dtoa_r+0x902>
 800fb68:	d085      	beq.n	800fa76 <_dtoa_r+0x826>
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	301c      	adds	r0, #28
 800fb6e:	e77d      	b.n	800fa6c <_dtoa_r+0x81c>
 800fb70:	40240000 	.word	0x40240000
 800fb74:	9b01      	ldr	r3, [sp, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	dc38      	bgt.n	800fbec <_dtoa_r+0x99c>
 800fb7a:	9b05      	ldr	r3, [sp, #20]
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	dd35      	ble.n	800fbec <_dtoa_r+0x99c>
 800fb80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fb84:	f1b9 0f00 	cmp.w	r9, #0
 800fb88:	d10d      	bne.n	800fba6 <_dtoa_r+0x956>
 800fb8a:	4631      	mov	r1, r6
 800fb8c:	464b      	mov	r3, r9
 800fb8e:	2205      	movs	r2, #5
 800fb90:	4620      	mov	r0, r4
 800fb92:	f000 ff57 	bl	8010a44 <__multadd>
 800fb96:	4601      	mov	r1, r0
 800fb98:	4606      	mov	r6, r0
 800fb9a:	4658      	mov	r0, fp
 800fb9c:	f001 f9b8 	bl	8010f10 <__mcmp>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	f73f adbd 	bgt.w	800f720 <_dtoa_r+0x4d0>
 800fba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fba8:	9d00      	ldr	r5, [sp, #0]
 800fbaa:	ea6f 0a03 	mvn.w	sl, r3
 800fbae:	f04f 0800 	mov.w	r8, #0
 800fbb2:	4631      	mov	r1, r6
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f000 ff23 	bl	8010a00 <_Bfree>
 800fbba:	2f00      	cmp	r7, #0
 800fbbc:	f43f aeb4 	beq.w	800f928 <_dtoa_r+0x6d8>
 800fbc0:	f1b8 0f00 	cmp.w	r8, #0
 800fbc4:	d005      	beq.n	800fbd2 <_dtoa_r+0x982>
 800fbc6:	45b8      	cmp	r8, r7
 800fbc8:	d003      	beq.n	800fbd2 <_dtoa_r+0x982>
 800fbca:	4641      	mov	r1, r8
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f000 ff17 	bl	8010a00 <_Bfree>
 800fbd2:	4639      	mov	r1, r7
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 ff13 	bl	8010a00 <_Bfree>
 800fbda:	e6a5      	b.n	800f928 <_dtoa_r+0x6d8>
 800fbdc:	2600      	movs	r6, #0
 800fbde:	4637      	mov	r7, r6
 800fbe0:	e7e1      	b.n	800fba6 <_dtoa_r+0x956>
 800fbe2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fbe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fbe8:	4637      	mov	r7, r6
 800fbea:	e599      	b.n	800f720 <_dtoa_r+0x4d0>
 800fbec:	9b08      	ldr	r3, [sp, #32]
 800fbee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f000 80fd 	beq.w	800fdf2 <_dtoa_r+0xba2>
 800fbf8:	2d00      	cmp	r5, #0
 800fbfa:	dd05      	ble.n	800fc08 <_dtoa_r+0x9b8>
 800fbfc:	4639      	mov	r1, r7
 800fbfe:	462a      	mov	r2, r5
 800fc00:	4620      	mov	r0, r4
 800fc02:	f001 f919 	bl	8010e38 <__lshift>
 800fc06:	4607      	mov	r7, r0
 800fc08:	9b06      	ldr	r3, [sp, #24]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d05c      	beq.n	800fcc8 <_dtoa_r+0xa78>
 800fc0e:	6879      	ldr	r1, [r7, #4]
 800fc10:	4620      	mov	r0, r4
 800fc12:	f000 feb5 	bl	8010980 <_Balloc>
 800fc16:	4605      	mov	r5, r0
 800fc18:	b928      	cbnz	r0, 800fc26 <_dtoa_r+0x9d6>
 800fc1a:	4b80      	ldr	r3, [pc, #512]	; (800fe1c <_dtoa_r+0xbcc>)
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fc22:	f7ff bb2e 	b.w	800f282 <_dtoa_r+0x32>
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	3202      	adds	r2, #2
 800fc2a:	0092      	lsls	r2, r2, #2
 800fc2c:	f107 010c 	add.w	r1, r7, #12
 800fc30:	300c      	adds	r0, #12
 800fc32:	f7fd fdf3 	bl	800d81c <memcpy>
 800fc36:	2201      	movs	r2, #1
 800fc38:	4629      	mov	r1, r5
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f001 f8fc 	bl	8010e38 <__lshift>
 800fc40:	9b00      	ldr	r3, [sp, #0]
 800fc42:	3301      	adds	r3, #1
 800fc44:	9301      	str	r3, [sp, #4]
 800fc46:	9b00      	ldr	r3, [sp, #0]
 800fc48:	444b      	add	r3, r9
 800fc4a:	9307      	str	r3, [sp, #28]
 800fc4c:	9b02      	ldr	r3, [sp, #8]
 800fc4e:	f003 0301 	and.w	r3, r3, #1
 800fc52:	46b8      	mov	r8, r7
 800fc54:	9306      	str	r3, [sp, #24]
 800fc56:	4607      	mov	r7, r0
 800fc58:	9b01      	ldr	r3, [sp, #4]
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	4658      	mov	r0, fp
 800fc60:	9302      	str	r3, [sp, #8]
 800fc62:	f7ff fa69 	bl	800f138 <quorem>
 800fc66:	4603      	mov	r3, r0
 800fc68:	3330      	adds	r3, #48	; 0x30
 800fc6a:	9004      	str	r0, [sp, #16]
 800fc6c:	4641      	mov	r1, r8
 800fc6e:	4658      	mov	r0, fp
 800fc70:	9308      	str	r3, [sp, #32]
 800fc72:	f001 f94d 	bl	8010f10 <__mcmp>
 800fc76:	463a      	mov	r2, r7
 800fc78:	4681      	mov	r9, r0
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f001 f963 	bl	8010f48 <__mdiff>
 800fc82:	68c2      	ldr	r2, [r0, #12]
 800fc84:	9b08      	ldr	r3, [sp, #32]
 800fc86:	4605      	mov	r5, r0
 800fc88:	bb02      	cbnz	r2, 800fccc <_dtoa_r+0xa7c>
 800fc8a:	4601      	mov	r1, r0
 800fc8c:	4658      	mov	r0, fp
 800fc8e:	f001 f93f 	bl	8010f10 <__mcmp>
 800fc92:	9b08      	ldr	r3, [sp, #32]
 800fc94:	4602      	mov	r2, r0
 800fc96:	4629      	mov	r1, r5
 800fc98:	4620      	mov	r0, r4
 800fc9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fc9e:	f000 feaf 	bl	8010a00 <_Bfree>
 800fca2:	9b05      	ldr	r3, [sp, #20]
 800fca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fca6:	9d01      	ldr	r5, [sp, #4]
 800fca8:	ea43 0102 	orr.w	r1, r3, r2
 800fcac:	9b06      	ldr	r3, [sp, #24]
 800fcae:	430b      	orrs	r3, r1
 800fcb0:	9b08      	ldr	r3, [sp, #32]
 800fcb2:	d10d      	bne.n	800fcd0 <_dtoa_r+0xa80>
 800fcb4:	2b39      	cmp	r3, #57	; 0x39
 800fcb6:	d029      	beq.n	800fd0c <_dtoa_r+0xabc>
 800fcb8:	f1b9 0f00 	cmp.w	r9, #0
 800fcbc:	dd01      	ble.n	800fcc2 <_dtoa_r+0xa72>
 800fcbe:	9b04      	ldr	r3, [sp, #16]
 800fcc0:	3331      	adds	r3, #49	; 0x31
 800fcc2:	9a02      	ldr	r2, [sp, #8]
 800fcc4:	7013      	strb	r3, [r2, #0]
 800fcc6:	e774      	b.n	800fbb2 <_dtoa_r+0x962>
 800fcc8:	4638      	mov	r0, r7
 800fcca:	e7b9      	b.n	800fc40 <_dtoa_r+0x9f0>
 800fccc:	2201      	movs	r2, #1
 800fcce:	e7e2      	b.n	800fc96 <_dtoa_r+0xa46>
 800fcd0:	f1b9 0f00 	cmp.w	r9, #0
 800fcd4:	db06      	blt.n	800fce4 <_dtoa_r+0xa94>
 800fcd6:	9905      	ldr	r1, [sp, #20]
 800fcd8:	ea41 0909 	orr.w	r9, r1, r9
 800fcdc:	9906      	ldr	r1, [sp, #24]
 800fcde:	ea59 0101 	orrs.w	r1, r9, r1
 800fce2:	d120      	bne.n	800fd26 <_dtoa_r+0xad6>
 800fce4:	2a00      	cmp	r2, #0
 800fce6:	ddec      	ble.n	800fcc2 <_dtoa_r+0xa72>
 800fce8:	4659      	mov	r1, fp
 800fcea:	2201      	movs	r2, #1
 800fcec:	4620      	mov	r0, r4
 800fcee:	9301      	str	r3, [sp, #4]
 800fcf0:	f001 f8a2 	bl	8010e38 <__lshift>
 800fcf4:	4631      	mov	r1, r6
 800fcf6:	4683      	mov	fp, r0
 800fcf8:	f001 f90a 	bl	8010f10 <__mcmp>
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	9b01      	ldr	r3, [sp, #4]
 800fd00:	dc02      	bgt.n	800fd08 <_dtoa_r+0xab8>
 800fd02:	d1de      	bne.n	800fcc2 <_dtoa_r+0xa72>
 800fd04:	07da      	lsls	r2, r3, #31
 800fd06:	d5dc      	bpl.n	800fcc2 <_dtoa_r+0xa72>
 800fd08:	2b39      	cmp	r3, #57	; 0x39
 800fd0a:	d1d8      	bne.n	800fcbe <_dtoa_r+0xa6e>
 800fd0c:	9a02      	ldr	r2, [sp, #8]
 800fd0e:	2339      	movs	r3, #57	; 0x39
 800fd10:	7013      	strb	r3, [r2, #0]
 800fd12:	462b      	mov	r3, r5
 800fd14:	461d      	mov	r5, r3
 800fd16:	3b01      	subs	r3, #1
 800fd18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fd1c:	2a39      	cmp	r2, #57	; 0x39
 800fd1e:	d050      	beq.n	800fdc2 <_dtoa_r+0xb72>
 800fd20:	3201      	adds	r2, #1
 800fd22:	701a      	strb	r2, [r3, #0]
 800fd24:	e745      	b.n	800fbb2 <_dtoa_r+0x962>
 800fd26:	2a00      	cmp	r2, #0
 800fd28:	dd03      	ble.n	800fd32 <_dtoa_r+0xae2>
 800fd2a:	2b39      	cmp	r3, #57	; 0x39
 800fd2c:	d0ee      	beq.n	800fd0c <_dtoa_r+0xabc>
 800fd2e:	3301      	adds	r3, #1
 800fd30:	e7c7      	b.n	800fcc2 <_dtoa_r+0xa72>
 800fd32:	9a01      	ldr	r2, [sp, #4]
 800fd34:	9907      	ldr	r1, [sp, #28]
 800fd36:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fd3a:	428a      	cmp	r2, r1
 800fd3c:	d02a      	beq.n	800fd94 <_dtoa_r+0xb44>
 800fd3e:	4659      	mov	r1, fp
 800fd40:	2300      	movs	r3, #0
 800fd42:	220a      	movs	r2, #10
 800fd44:	4620      	mov	r0, r4
 800fd46:	f000 fe7d 	bl	8010a44 <__multadd>
 800fd4a:	45b8      	cmp	r8, r7
 800fd4c:	4683      	mov	fp, r0
 800fd4e:	f04f 0300 	mov.w	r3, #0
 800fd52:	f04f 020a 	mov.w	r2, #10
 800fd56:	4641      	mov	r1, r8
 800fd58:	4620      	mov	r0, r4
 800fd5a:	d107      	bne.n	800fd6c <_dtoa_r+0xb1c>
 800fd5c:	f000 fe72 	bl	8010a44 <__multadd>
 800fd60:	4680      	mov	r8, r0
 800fd62:	4607      	mov	r7, r0
 800fd64:	9b01      	ldr	r3, [sp, #4]
 800fd66:	3301      	adds	r3, #1
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	e775      	b.n	800fc58 <_dtoa_r+0xa08>
 800fd6c:	f000 fe6a 	bl	8010a44 <__multadd>
 800fd70:	4639      	mov	r1, r7
 800fd72:	4680      	mov	r8, r0
 800fd74:	2300      	movs	r3, #0
 800fd76:	220a      	movs	r2, #10
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f000 fe63 	bl	8010a44 <__multadd>
 800fd7e:	4607      	mov	r7, r0
 800fd80:	e7f0      	b.n	800fd64 <_dtoa_r+0xb14>
 800fd82:	f1b9 0f00 	cmp.w	r9, #0
 800fd86:	9a00      	ldr	r2, [sp, #0]
 800fd88:	bfcc      	ite	gt
 800fd8a:	464d      	movgt	r5, r9
 800fd8c:	2501      	movle	r5, #1
 800fd8e:	4415      	add	r5, r2
 800fd90:	f04f 0800 	mov.w	r8, #0
 800fd94:	4659      	mov	r1, fp
 800fd96:	2201      	movs	r2, #1
 800fd98:	4620      	mov	r0, r4
 800fd9a:	9301      	str	r3, [sp, #4]
 800fd9c:	f001 f84c 	bl	8010e38 <__lshift>
 800fda0:	4631      	mov	r1, r6
 800fda2:	4683      	mov	fp, r0
 800fda4:	f001 f8b4 	bl	8010f10 <__mcmp>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	dcb2      	bgt.n	800fd12 <_dtoa_r+0xac2>
 800fdac:	d102      	bne.n	800fdb4 <_dtoa_r+0xb64>
 800fdae:	9b01      	ldr	r3, [sp, #4]
 800fdb0:	07db      	lsls	r3, r3, #31
 800fdb2:	d4ae      	bmi.n	800fd12 <_dtoa_r+0xac2>
 800fdb4:	462b      	mov	r3, r5
 800fdb6:	461d      	mov	r5, r3
 800fdb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fdbc:	2a30      	cmp	r2, #48	; 0x30
 800fdbe:	d0fa      	beq.n	800fdb6 <_dtoa_r+0xb66>
 800fdc0:	e6f7      	b.n	800fbb2 <_dtoa_r+0x962>
 800fdc2:	9a00      	ldr	r2, [sp, #0]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d1a5      	bne.n	800fd14 <_dtoa_r+0xac4>
 800fdc8:	f10a 0a01 	add.w	sl, sl, #1
 800fdcc:	2331      	movs	r3, #49	; 0x31
 800fdce:	e779      	b.n	800fcc4 <_dtoa_r+0xa74>
 800fdd0:	4b13      	ldr	r3, [pc, #76]	; (800fe20 <_dtoa_r+0xbd0>)
 800fdd2:	f7ff baaf 	b.w	800f334 <_dtoa_r+0xe4>
 800fdd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	f47f aa86 	bne.w	800f2ea <_dtoa_r+0x9a>
 800fdde:	4b11      	ldr	r3, [pc, #68]	; (800fe24 <_dtoa_r+0xbd4>)
 800fde0:	f7ff baa8 	b.w	800f334 <_dtoa_r+0xe4>
 800fde4:	f1b9 0f00 	cmp.w	r9, #0
 800fde8:	dc03      	bgt.n	800fdf2 <_dtoa_r+0xba2>
 800fdea:	9b05      	ldr	r3, [sp, #20]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	f73f aec9 	bgt.w	800fb84 <_dtoa_r+0x934>
 800fdf2:	9d00      	ldr	r5, [sp, #0]
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	4658      	mov	r0, fp
 800fdf8:	f7ff f99e 	bl	800f138 <quorem>
 800fdfc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fe00:	f805 3b01 	strb.w	r3, [r5], #1
 800fe04:	9a00      	ldr	r2, [sp, #0]
 800fe06:	1aaa      	subs	r2, r5, r2
 800fe08:	4591      	cmp	r9, r2
 800fe0a:	ddba      	ble.n	800fd82 <_dtoa_r+0xb32>
 800fe0c:	4659      	mov	r1, fp
 800fe0e:	2300      	movs	r3, #0
 800fe10:	220a      	movs	r2, #10
 800fe12:	4620      	mov	r0, r4
 800fe14:	f000 fe16 	bl	8010a44 <__multadd>
 800fe18:	4683      	mov	fp, r0
 800fe1a:	e7eb      	b.n	800fdf4 <_dtoa_r+0xba4>
 800fe1c:	0801338c 	.word	0x0801338c
 800fe20:	08013194 	.word	0x08013194
 800fe24:	08013309 	.word	0x08013309

0800fe28 <__sflush_r>:
 800fe28:	898a      	ldrh	r2, [r1, #12]
 800fe2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2e:	4605      	mov	r5, r0
 800fe30:	0710      	lsls	r0, r2, #28
 800fe32:	460c      	mov	r4, r1
 800fe34:	d458      	bmi.n	800fee8 <__sflush_r+0xc0>
 800fe36:	684b      	ldr	r3, [r1, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	dc05      	bgt.n	800fe48 <__sflush_r+0x20>
 800fe3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	dc02      	bgt.n	800fe48 <__sflush_r+0x20>
 800fe42:	2000      	movs	r0, #0
 800fe44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe4a:	2e00      	cmp	r6, #0
 800fe4c:	d0f9      	beq.n	800fe42 <__sflush_r+0x1a>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe54:	682f      	ldr	r7, [r5, #0]
 800fe56:	602b      	str	r3, [r5, #0]
 800fe58:	d032      	beq.n	800fec0 <__sflush_r+0x98>
 800fe5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe5c:	89a3      	ldrh	r3, [r4, #12]
 800fe5e:	075a      	lsls	r2, r3, #29
 800fe60:	d505      	bpl.n	800fe6e <__sflush_r+0x46>
 800fe62:	6863      	ldr	r3, [r4, #4]
 800fe64:	1ac0      	subs	r0, r0, r3
 800fe66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe68:	b10b      	cbz	r3, 800fe6e <__sflush_r+0x46>
 800fe6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe6c:	1ac0      	subs	r0, r0, r3
 800fe6e:	2300      	movs	r3, #0
 800fe70:	4602      	mov	r2, r0
 800fe72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe74:	6a21      	ldr	r1, [r4, #32]
 800fe76:	4628      	mov	r0, r5
 800fe78:	47b0      	blx	r6
 800fe7a:	1c43      	adds	r3, r0, #1
 800fe7c:	89a3      	ldrh	r3, [r4, #12]
 800fe7e:	d106      	bne.n	800fe8e <__sflush_r+0x66>
 800fe80:	6829      	ldr	r1, [r5, #0]
 800fe82:	291d      	cmp	r1, #29
 800fe84:	d82c      	bhi.n	800fee0 <__sflush_r+0xb8>
 800fe86:	4a2a      	ldr	r2, [pc, #168]	; (800ff30 <__sflush_r+0x108>)
 800fe88:	40ca      	lsrs	r2, r1
 800fe8a:	07d6      	lsls	r6, r2, #31
 800fe8c:	d528      	bpl.n	800fee0 <__sflush_r+0xb8>
 800fe8e:	2200      	movs	r2, #0
 800fe90:	6062      	str	r2, [r4, #4]
 800fe92:	04d9      	lsls	r1, r3, #19
 800fe94:	6922      	ldr	r2, [r4, #16]
 800fe96:	6022      	str	r2, [r4, #0]
 800fe98:	d504      	bpl.n	800fea4 <__sflush_r+0x7c>
 800fe9a:	1c42      	adds	r2, r0, #1
 800fe9c:	d101      	bne.n	800fea2 <__sflush_r+0x7a>
 800fe9e:	682b      	ldr	r3, [r5, #0]
 800fea0:	b903      	cbnz	r3, 800fea4 <__sflush_r+0x7c>
 800fea2:	6560      	str	r0, [r4, #84]	; 0x54
 800fea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fea6:	602f      	str	r7, [r5, #0]
 800fea8:	2900      	cmp	r1, #0
 800feaa:	d0ca      	beq.n	800fe42 <__sflush_r+0x1a>
 800feac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800feb0:	4299      	cmp	r1, r3
 800feb2:	d002      	beq.n	800feba <__sflush_r+0x92>
 800feb4:	4628      	mov	r0, r5
 800feb6:	f001 fa2d 	bl	8011314 <_free_r>
 800feba:	2000      	movs	r0, #0
 800febc:	6360      	str	r0, [r4, #52]	; 0x34
 800febe:	e7c1      	b.n	800fe44 <__sflush_r+0x1c>
 800fec0:	6a21      	ldr	r1, [r4, #32]
 800fec2:	2301      	movs	r3, #1
 800fec4:	4628      	mov	r0, r5
 800fec6:	47b0      	blx	r6
 800fec8:	1c41      	adds	r1, r0, #1
 800feca:	d1c7      	bne.n	800fe5c <__sflush_r+0x34>
 800fecc:	682b      	ldr	r3, [r5, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d0c4      	beq.n	800fe5c <__sflush_r+0x34>
 800fed2:	2b1d      	cmp	r3, #29
 800fed4:	d001      	beq.n	800feda <__sflush_r+0xb2>
 800fed6:	2b16      	cmp	r3, #22
 800fed8:	d101      	bne.n	800fede <__sflush_r+0xb6>
 800feda:	602f      	str	r7, [r5, #0]
 800fedc:	e7b1      	b.n	800fe42 <__sflush_r+0x1a>
 800fede:	89a3      	ldrh	r3, [r4, #12]
 800fee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fee4:	81a3      	strh	r3, [r4, #12]
 800fee6:	e7ad      	b.n	800fe44 <__sflush_r+0x1c>
 800fee8:	690f      	ldr	r7, [r1, #16]
 800feea:	2f00      	cmp	r7, #0
 800feec:	d0a9      	beq.n	800fe42 <__sflush_r+0x1a>
 800feee:	0793      	lsls	r3, r2, #30
 800fef0:	680e      	ldr	r6, [r1, #0]
 800fef2:	bf08      	it	eq
 800fef4:	694b      	ldreq	r3, [r1, #20]
 800fef6:	600f      	str	r7, [r1, #0]
 800fef8:	bf18      	it	ne
 800fefa:	2300      	movne	r3, #0
 800fefc:	eba6 0807 	sub.w	r8, r6, r7
 800ff00:	608b      	str	r3, [r1, #8]
 800ff02:	f1b8 0f00 	cmp.w	r8, #0
 800ff06:	dd9c      	ble.n	800fe42 <__sflush_r+0x1a>
 800ff08:	6a21      	ldr	r1, [r4, #32]
 800ff0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff0c:	4643      	mov	r3, r8
 800ff0e:	463a      	mov	r2, r7
 800ff10:	4628      	mov	r0, r5
 800ff12:	47b0      	blx	r6
 800ff14:	2800      	cmp	r0, #0
 800ff16:	dc06      	bgt.n	800ff26 <__sflush_r+0xfe>
 800ff18:	89a3      	ldrh	r3, [r4, #12]
 800ff1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	f04f 30ff 	mov.w	r0, #4294967295
 800ff24:	e78e      	b.n	800fe44 <__sflush_r+0x1c>
 800ff26:	4407      	add	r7, r0
 800ff28:	eba8 0800 	sub.w	r8, r8, r0
 800ff2c:	e7e9      	b.n	800ff02 <__sflush_r+0xda>
 800ff2e:	bf00      	nop
 800ff30:	20400001 	.word	0x20400001

0800ff34 <_fflush_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	690b      	ldr	r3, [r1, #16]
 800ff38:	4605      	mov	r5, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	b913      	cbnz	r3, 800ff44 <_fflush_r+0x10>
 800ff3e:	2500      	movs	r5, #0
 800ff40:	4628      	mov	r0, r5
 800ff42:	bd38      	pop	{r3, r4, r5, pc}
 800ff44:	b118      	cbz	r0, 800ff4e <_fflush_r+0x1a>
 800ff46:	6983      	ldr	r3, [r0, #24]
 800ff48:	b90b      	cbnz	r3, 800ff4e <_fflush_r+0x1a>
 800ff4a:	f000 f887 	bl	801005c <__sinit>
 800ff4e:	4b14      	ldr	r3, [pc, #80]	; (800ffa0 <_fflush_r+0x6c>)
 800ff50:	429c      	cmp	r4, r3
 800ff52:	d11b      	bne.n	800ff8c <_fflush_r+0x58>
 800ff54:	686c      	ldr	r4, [r5, #4]
 800ff56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d0ef      	beq.n	800ff3e <_fflush_r+0xa>
 800ff5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff60:	07d0      	lsls	r0, r2, #31
 800ff62:	d404      	bmi.n	800ff6e <_fflush_r+0x3a>
 800ff64:	0599      	lsls	r1, r3, #22
 800ff66:	d402      	bmi.n	800ff6e <_fflush_r+0x3a>
 800ff68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff6a:	f000 fc88 	bl	801087e <__retarget_lock_acquire_recursive>
 800ff6e:	4628      	mov	r0, r5
 800ff70:	4621      	mov	r1, r4
 800ff72:	f7ff ff59 	bl	800fe28 <__sflush_r>
 800ff76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff78:	07da      	lsls	r2, r3, #31
 800ff7a:	4605      	mov	r5, r0
 800ff7c:	d4e0      	bmi.n	800ff40 <_fflush_r+0xc>
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	059b      	lsls	r3, r3, #22
 800ff82:	d4dd      	bmi.n	800ff40 <_fflush_r+0xc>
 800ff84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff86:	f000 fc7b 	bl	8010880 <__retarget_lock_release_recursive>
 800ff8a:	e7d9      	b.n	800ff40 <_fflush_r+0xc>
 800ff8c:	4b05      	ldr	r3, [pc, #20]	; (800ffa4 <_fflush_r+0x70>)
 800ff8e:	429c      	cmp	r4, r3
 800ff90:	d101      	bne.n	800ff96 <_fflush_r+0x62>
 800ff92:	68ac      	ldr	r4, [r5, #8]
 800ff94:	e7df      	b.n	800ff56 <_fflush_r+0x22>
 800ff96:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <_fflush_r+0x74>)
 800ff98:	429c      	cmp	r4, r3
 800ff9a:	bf08      	it	eq
 800ff9c:	68ec      	ldreq	r4, [r5, #12]
 800ff9e:	e7da      	b.n	800ff56 <_fflush_r+0x22>
 800ffa0:	080133c0 	.word	0x080133c0
 800ffa4:	080133e0 	.word	0x080133e0
 800ffa8:	080133a0 	.word	0x080133a0

0800ffac <std>:
 800ffac:	2300      	movs	r3, #0
 800ffae:	b510      	push	{r4, lr}
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	e9c0 3300 	strd	r3, r3, [r0]
 800ffb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ffba:	6083      	str	r3, [r0, #8]
 800ffbc:	8181      	strh	r1, [r0, #12]
 800ffbe:	6643      	str	r3, [r0, #100]	; 0x64
 800ffc0:	81c2      	strh	r2, [r0, #14]
 800ffc2:	6183      	str	r3, [r0, #24]
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	2208      	movs	r2, #8
 800ffc8:	305c      	adds	r0, #92	; 0x5c
 800ffca:	f7fd fc35 	bl	800d838 <memset>
 800ffce:	4b05      	ldr	r3, [pc, #20]	; (800ffe4 <std+0x38>)
 800ffd0:	6263      	str	r3, [r4, #36]	; 0x24
 800ffd2:	4b05      	ldr	r3, [pc, #20]	; (800ffe8 <std+0x3c>)
 800ffd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ffd6:	4b05      	ldr	r3, [pc, #20]	; (800ffec <std+0x40>)
 800ffd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ffda:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <std+0x44>)
 800ffdc:	6224      	str	r4, [r4, #32]
 800ffde:	6323      	str	r3, [r4, #48]	; 0x30
 800ffe0:	bd10      	pop	{r4, pc}
 800ffe2:	bf00      	nop
 800ffe4:	08011751 	.word	0x08011751
 800ffe8:	08011773 	.word	0x08011773
 800ffec:	080117ab 	.word	0x080117ab
 800fff0:	080117cf 	.word	0x080117cf

0800fff4 <_cleanup_r>:
 800fff4:	4901      	ldr	r1, [pc, #4]	; (800fffc <_cleanup_r+0x8>)
 800fff6:	f000 b8af 	b.w	8010158 <_fwalk_reent>
 800fffa:	bf00      	nop
 800fffc:	0800ff35 	.word	0x0800ff35

08010000 <__sfmoreglue>:
 8010000:	b570      	push	{r4, r5, r6, lr}
 8010002:	1e4a      	subs	r2, r1, #1
 8010004:	2568      	movs	r5, #104	; 0x68
 8010006:	4355      	muls	r5, r2
 8010008:	460e      	mov	r6, r1
 801000a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801000e:	f001 f9d1 	bl	80113b4 <_malloc_r>
 8010012:	4604      	mov	r4, r0
 8010014:	b140      	cbz	r0, 8010028 <__sfmoreglue+0x28>
 8010016:	2100      	movs	r1, #0
 8010018:	e9c0 1600 	strd	r1, r6, [r0]
 801001c:	300c      	adds	r0, #12
 801001e:	60a0      	str	r0, [r4, #8]
 8010020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010024:	f7fd fc08 	bl	800d838 <memset>
 8010028:	4620      	mov	r0, r4
 801002a:	bd70      	pop	{r4, r5, r6, pc}

0801002c <__sfp_lock_acquire>:
 801002c:	4801      	ldr	r0, [pc, #4]	; (8010034 <__sfp_lock_acquire+0x8>)
 801002e:	f000 bc26 	b.w	801087e <__retarget_lock_acquire_recursive>
 8010032:	bf00      	nop
 8010034:	20009590 	.word	0x20009590

08010038 <__sfp_lock_release>:
 8010038:	4801      	ldr	r0, [pc, #4]	; (8010040 <__sfp_lock_release+0x8>)
 801003a:	f000 bc21 	b.w	8010880 <__retarget_lock_release_recursive>
 801003e:	bf00      	nop
 8010040:	20009590 	.word	0x20009590

08010044 <__sinit_lock_acquire>:
 8010044:	4801      	ldr	r0, [pc, #4]	; (801004c <__sinit_lock_acquire+0x8>)
 8010046:	f000 bc1a 	b.w	801087e <__retarget_lock_acquire_recursive>
 801004a:	bf00      	nop
 801004c:	2000958b 	.word	0x2000958b

08010050 <__sinit_lock_release>:
 8010050:	4801      	ldr	r0, [pc, #4]	; (8010058 <__sinit_lock_release+0x8>)
 8010052:	f000 bc15 	b.w	8010880 <__retarget_lock_release_recursive>
 8010056:	bf00      	nop
 8010058:	2000958b 	.word	0x2000958b

0801005c <__sinit>:
 801005c:	b510      	push	{r4, lr}
 801005e:	4604      	mov	r4, r0
 8010060:	f7ff fff0 	bl	8010044 <__sinit_lock_acquire>
 8010064:	69a3      	ldr	r3, [r4, #24]
 8010066:	b11b      	cbz	r3, 8010070 <__sinit+0x14>
 8010068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801006c:	f7ff bff0 	b.w	8010050 <__sinit_lock_release>
 8010070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010074:	6523      	str	r3, [r4, #80]	; 0x50
 8010076:	4b13      	ldr	r3, [pc, #76]	; (80100c4 <__sinit+0x68>)
 8010078:	4a13      	ldr	r2, [pc, #76]	; (80100c8 <__sinit+0x6c>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	62a2      	str	r2, [r4, #40]	; 0x28
 801007e:	42a3      	cmp	r3, r4
 8010080:	bf04      	itt	eq
 8010082:	2301      	moveq	r3, #1
 8010084:	61a3      	streq	r3, [r4, #24]
 8010086:	4620      	mov	r0, r4
 8010088:	f000 f820 	bl	80100cc <__sfp>
 801008c:	6060      	str	r0, [r4, #4]
 801008e:	4620      	mov	r0, r4
 8010090:	f000 f81c 	bl	80100cc <__sfp>
 8010094:	60a0      	str	r0, [r4, #8]
 8010096:	4620      	mov	r0, r4
 8010098:	f000 f818 	bl	80100cc <__sfp>
 801009c:	2200      	movs	r2, #0
 801009e:	60e0      	str	r0, [r4, #12]
 80100a0:	2104      	movs	r1, #4
 80100a2:	6860      	ldr	r0, [r4, #4]
 80100a4:	f7ff ff82 	bl	800ffac <std>
 80100a8:	68a0      	ldr	r0, [r4, #8]
 80100aa:	2201      	movs	r2, #1
 80100ac:	2109      	movs	r1, #9
 80100ae:	f7ff ff7d 	bl	800ffac <std>
 80100b2:	68e0      	ldr	r0, [r4, #12]
 80100b4:	2202      	movs	r2, #2
 80100b6:	2112      	movs	r1, #18
 80100b8:	f7ff ff78 	bl	800ffac <std>
 80100bc:	2301      	movs	r3, #1
 80100be:	61a3      	str	r3, [r4, #24]
 80100c0:	e7d2      	b.n	8010068 <__sinit+0xc>
 80100c2:	bf00      	nop
 80100c4:	08013180 	.word	0x08013180
 80100c8:	0800fff5 	.word	0x0800fff5

080100cc <__sfp>:
 80100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ce:	4607      	mov	r7, r0
 80100d0:	f7ff ffac 	bl	801002c <__sfp_lock_acquire>
 80100d4:	4b1e      	ldr	r3, [pc, #120]	; (8010150 <__sfp+0x84>)
 80100d6:	681e      	ldr	r6, [r3, #0]
 80100d8:	69b3      	ldr	r3, [r6, #24]
 80100da:	b913      	cbnz	r3, 80100e2 <__sfp+0x16>
 80100dc:	4630      	mov	r0, r6
 80100de:	f7ff ffbd 	bl	801005c <__sinit>
 80100e2:	3648      	adds	r6, #72	; 0x48
 80100e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	d503      	bpl.n	80100f4 <__sfp+0x28>
 80100ec:	6833      	ldr	r3, [r6, #0]
 80100ee:	b30b      	cbz	r3, 8010134 <__sfp+0x68>
 80100f0:	6836      	ldr	r6, [r6, #0]
 80100f2:	e7f7      	b.n	80100e4 <__sfp+0x18>
 80100f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100f8:	b9d5      	cbnz	r5, 8010130 <__sfp+0x64>
 80100fa:	4b16      	ldr	r3, [pc, #88]	; (8010154 <__sfp+0x88>)
 80100fc:	60e3      	str	r3, [r4, #12]
 80100fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010102:	6665      	str	r5, [r4, #100]	; 0x64
 8010104:	f000 fbba 	bl	801087c <__retarget_lock_init_recursive>
 8010108:	f7ff ff96 	bl	8010038 <__sfp_lock_release>
 801010c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010114:	6025      	str	r5, [r4, #0]
 8010116:	61a5      	str	r5, [r4, #24]
 8010118:	2208      	movs	r2, #8
 801011a:	4629      	mov	r1, r5
 801011c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010120:	f7fd fb8a 	bl	800d838 <memset>
 8010124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801012c:	4620      	mov	r0, r4
 801012e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010130:	3468      	adds	r4, #104	; 0x68
 8010132:	e7d9      	b.n	80100e8 <__sfp+0x1c>
 8010134:	2104      	movs	r1, #4
 8010136:	4638      	mov	r0, r7
 8010138:	f7ff ff62 	bl	8010000 <__sfmoreglue>
 801013c:	4604      	mov	r4, r0
 801013e:	6030      	str	r0, [r6, #0]
 8010140:	2800      	cmp	r0, #0
 8010142:	d1d5      	bne.n	80100f0 <__sfp+0x24>
 8010144:	f7ff ff78 	bl	8010038 <__sfp_lock_release>
 8010148:	230c      	movs	r3, #12
 801014a:	603b      	str	r3, [r7, #0]
 801014c:	e7ee      	b.n	801012c <__sfp+0x60>
 801014e:	bf00      	nop
 8010150:	08013180 	.word	0x08013180
 8010154:	ffff0001 	.word	0xffff0001

08010158 <_fwalk_reent>:
 8010158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801015c:	4606      	mov	r6, r0
 801015e:	4688      	mov	r8, r1
 8010160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010164:	2700      	movs	r7, #0
 8010166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801016a:	f1b9 0901 	subs.w	r9, r9, #1
 801016e:	d505      	bpl.n	801017c <_fwalk_reent+0x24>
 8010170:	6824      	ldr	r4, [r4, #0]
 8010172:	2c00      	cmp	r4, #0
 8010174:	d1f7      	bne.n	8010166 <_fwalk_reent+0xe>
 8010176:	4638      	mov	r0, r7
 8010178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801017c:	89ab      	ldrh	r3, [r5, #12]
 801017e:	2b01      	cmp	r3, #1
 8010180:	d907      	bls.n	8010192 <_fwalk_reent+0x3a>
 8010182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010186:	3301      	adds	r3, #1
 8010188:	d003      	beq.n	8010192 <_fwalk_reent+0x3a>
 801018a:	4629      	mov	r1, r5
 801018c:	4630      	mov	r0, r6
 801018e:	47c0      	blx	r8
 8010190:	4307      	orrs	r7, r0
 8010192:	3568      	adds	r5, #104	; 0x68
 8010194:	e7e9      	b.n	801016a <_fwalk_reent+0x12>

08010196 <rshift>:
 8010196:	6903      	ldr	r3, [r0, #16]
 8010198:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801019c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80101a4:	f100 0414 	add.w	r4, r0, #20
 80101a8:	dd45      	ble.n	8010236 <rshift+0xa0>
 80101aa:	f011 011f 	ands.w	r1, r1, #31
 80101ae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80101b2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80101b6:	d10c      	bne.n	80101d2 <rshift+0x3c>
 80101b8:	f100 0710 	add.w	r7, r0, #16
 80101bc:	4629      	mov	r1, r5
 80101be:	42b1      	cmp	r1, r6
 80101c0:	d334      	bcc.n	801022c <rshift+0x96>
 80101c2:	1a9b      	subs	r3, r3, r2
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	1eea      	subs	r2, r5, #3
 80101c8:	4296      	cmp	r6, r2
 80101ca:	bf38      	it	cc
 80101cc:	2300      	movcc	r3, #0
 80101ce:	4423      	add	r3, r4
 80101d0:	e015      	b.n	80101fe <rshift+0x68>
 80101d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80101d6:	f1c1 0820 	rsb	r8, r1, #32
 80101da:	40cf      	lsrs	r7, r1
 80101dc:	f105 0e04 	add.w	lr, r5, #4
 80101e0:	46a1      	mov	r9, r4
 80101e2:	4576      	cmp	r6, lr
 80101e4:	46f4      	mov	ip, lr
 80101e6:	d815      	bhi.n	8010214 <rshift+0x7e>
 80101e8:	1a9b      	subs	r3, r3, r2
 80101ea:	009a      	lsls	r2, r3, #2
 80101ec:	3a04      	subs	r2, #4
 80101ee:	3501      	adds	r5, #1
 80101f0:	42ae      	cmp	r6, r5
 80101f2:	bf38      	it	cc
 80101f4:	2200      	movcc	r2, #0
 80101f6:	18a3      	adds	r3, r4, r2
 80101f8:	50a7      	str	r7, [r4, r2]
 80101fa:	b107      	cbz	r7, 80101fe <rshift+0x68>
 80101fc:	3304      	adds	r3, #4
 80101fe:	1b1a      	subs	r2, r3, r4
 8010200:	42a3      	cmp	r3, r4
 8010202:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010206:	bf08      	it	eq
 8010208:	2300      	moveq	r3, #0
 801020a:	6102      	str	r2, [r0, #16]
 801020c:	bf08      	it	eq
 801020e:	6143      	streq	r3, [r0, #20]
 8010210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010214:	f8dc c000 	ldr.w	ip, [ip]
 8010218:	fa0c fc08 	lsl.w	ip, ip, r8
 801021c:	ea4c 0707 	orr.w	r7, ip, r7
 8010220:	f849 7b04 	str.w	r7, [r9], #4
 8010224:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010228:	40cf      	lsrs	r7, r1
 801022a:	e7da      	b.n	80101e2 <rshift+0x4c>
 801022c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010230:	f847 cf04 	str.w	ip, [r7, #4]!
 8010234:	e7c3      	b.n	80101be <rshift+0x28>
 8010236:	4623      	mov	r3, r4
 8010238:	e7e1      	b.n	80101fe <rshift+0x68>

0801023a <__hexdig_fun>:
 801023a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801023e:	2b09      	cmp	r3, #9
 8010240:	d802      	bhi.n	8010248 <__hexdig_fun+0xe>
 8010242:	3820      	subs	r0, #32
 8010244:	b2c0      	uxtb	r0, r0
 8010246:	4770      	bx	lr
 8010248:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801024c:	2b05      	cmp	r3, #5
 801024e:	d801      	bhi.n	8010254 <__hexdig_fun+0x1a>
 8010250:	3847      	subs	r0, #71	; 0x47
 8010252:	e7f7      	b.n	8010244 <__hexdig_fun+0xa>
 8010254:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010258:	2b05      	cmp	r3, #5
 801025a:	d801      	bhi.n	8010260 <__hexdig_fun+0x26>
 801025c:	3827      	subs	r0, #39	; 0x27
 801025e:	e7f1      	b.n	8010244 <__hexdig_fun+0xa>
 8010260:	2000      	movs	r0, #0
 8010262:	4770      	bx	lr

08010264 <__gethex>:
 8010264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010268:	ed2d 8b02 	vpush	{d8}
 801026c:	b089      	sub	sp, #36	; 0x24
 801026e:	ee08 0a10 	vmov	s16, r0
 8010272:	9304      	str	r3, [sp, #16]
 8010274:	4bbc      	ldr	r3, [pc, #752]	; (8010568 <__gethex+0x304>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	9301      	str	r3, [sp, #4]
 801027a:	4618      	mov	r0, r3
 801027c:	468b      	mov	fp, r1
 801027e:	4690      	mov	r8, r2
 8010280:	f7ef ffce 	bl	8000220 <strlen>
 8010284:	9b01      	ldr	r3, [sp, #4]
 8010286:	f8db 2000 	ldr.w	r2, [fp]
 801028a:	4403      	add	r3, r0
 801028c:	4682      	mov	sl, r0
 801028e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010292:	9305      	str	r3, [sp, #20]
 8010294:	1c93      	adds	r3, r2, #2
 8010296:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801029a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801029e:	32fe      	adds	r2, #254	; 0xfe
 80102a0:	18d1      	adds	r1, r2, r3
 80102a2:	461f      	mov	r7, r3
 80102a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80102a8:	9100      	str	r1, [sp, #0]
 80102aa:	2830      	cmp	r0, #48	; 0x30
 80102ac:	d0f8      	beq.n	80102a0 <__gethex+0x3c>
 80102ae:	f7ff ffc4 	bl	801023a <__hexdig_fun>
 80102b2:	4604      	mov	r4, r0
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d13a      	bne.n	801032e <__gethex+0xca>
 80102b8:	9901      	ldr	r1, [sp, #4]
 80102ba:	4652      	mov	r2, sl
 80102bc:	4638      	mov	r0, r7
 80102be:	f001 fa8a 	bl	80117d6 <strncmp>
 80102c2:	4605      	mov	r5, r0
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d168      	bne.n	801039a <__gethex+0x136>
 80102c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80102cc:	eb07 060a 	add.w	r6, r7, sl
 80102d0:	f7ff ffb3 	bl	801023a <__hexdig_fun>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d062      	beq.n	801039e <__gethex+0x13a>
 80102d8:	4633      	mov	r3, r6
 80102da:	7818      	ldrb	r0, [r3, #0]
 80102dc:	2830      	cmp	r0, #48	; 0x30
 80102de:	461f      	mov	r7, r3
 80102e0:	f103 0301 	add.w	r3, r3, #1
 80102e4:	d0f9      	beq.n	80102da <__gethex+0x76>
 80102e6:	f7ff ffa8 	bl	801023a <__hexdig_fun>
 80102ea:	2301      	movs	r3, #1
 80102ec:	fab0 f480 	clz	r4, r0
 80102f0:	0964      	lsrs	r4, r4, #5
 80102f2:	4635      	mov	r5, r6
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	463a      	mov	r2, r7
 80102f8:	4616      	mov	r6, r2
 80102fa:	3201      	adds	r2, #1
 80102fc:	7830      	ldrb	r0, [r6, #0]
 80102fe:	f7ff ff9c 	bl	801023a <__hexdig_fun>
 8010302:	2800      	cmp	r0, #0
 8010304:	d1f8      	bne.n	80102f8 <__gethex+0x94>
 8010306:	9901      	ldr	r1, [sp, #4]
 8010308:	4652      	mov	r2, sl
 801030a:	4630      	mov	r0, r6
 801030c:	f001 fa63 	bl	80117d6 <strncmp>
 8010310:	b980      	cbnz	r0, 8010334 <__gethex+0xd0>
 8010312:	b94d      	cbnz	r5, 8010328 <__gethex+0xc4>
 8010314:	eb06 050a 	add.w	r5, r6, sl
 8010318:	462a      	mov	r2, r5
 801031a:	4616      	mov	r6, r2
 801031c:	3201      	adds	r2, #1
 801031e:	7830      	ldrb	r0, [r6, #0]
 8010320:	f7ff ff8b 	bl	801023a <__hexdig_fun>
 8010324:	2800      	cmp	r0, #0
 8010326:	d1f8      	bne.n	801031a <__gethex+0xb6>
 8010328:	1bad      	subs	r5, r5, r6
 801032a:	00ad      	lsls	r5, r5, #2
 801032c:	e004      	b.n	8010338 <__gethex+0xd4>
 801032e:	2400      	movs	r4, #0
 8010330:	4625      	mov	r5, r4
 8010332:	e7e0      	b.n	80102f6 <__gethex+0x92>
 8010334:	2d00      	cmp	r5, #0
 8010336:	d1f7      	bne.n	8010328 <__gethex+0xc4>
 8010338:	7833      	ldrb	r3, [r6, #0]
 801033a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801033e:	2b50      	cmp	r3, #80	; 0x50
 8010340:	d13b      	bne.n	80103ba <__gethex+0x156>
 8010342:	7873      	ldrb	r3, [r6, #1]
 8010344:	2b2b      	cmp	r3, #43	; 0x2b
 8010346:	d02c      	beq.n	80103a2 <__gethex+0x13e>
 8010348:	2b2d      	cmp	r3, #45	; 0x2d
 801034a:	d02e      	beq.n	80103aa <__gethex+0x146>
 801034c:	1c71      	adds	r1, r6, #1
 801034e:	f04f 0900 	mov.w	r9, #0
 8010352:	7808      	ldrb	r0, [r1, #0]
 8010354:	f7ff ff71 	bl	801023a <__hexdig_fun>
 8010358:	1e43      	subs	r3, r0, #1
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b18      	cmp	r3, #24
 801035e:	d82c      	bhi.n	80103ba <__gethex+0x156>
 8010360:	f1a0 0210 	sub.w	r2, r0, #16
 8010364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010368:	f7ff ff67 	bl	801023a <__hexdig_fun>
 801036c:	1e43      	subs	r3, r0, #1
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b18      	cmp	r3, #24
 8010372:	d91d      	bls.n	80103b0 <__gethex+0x14c>
 8010374:	f1b9 0f00 	cmp.w	r9, #0
 8010378:	d000      	beq.n	801037c <__gethex+0x118>
 801037a:	4252      	negs	r2, r2
 801037c:	4415      	add	r5, r2
 801037e:	f8cb 1000 	str.w	r1, [fp]
 8010382:	b1e4      	cbz	r4, 80103be <__gethex+0x15a>
 8010384:	9b00      	ldr	r3, [sp, #0]
 8010386:	2b00      	cmp	r3, #0
 8010388:	bf14      	ite	ne
 801038a:	2700      	movne	r7, #0
 801038c:	2706      	moveq	r7, #6
 801038e:	4638      	mov	r0, r7
 8010390:	b009      	add	sp, #36	; 0x24
 8010392:	ecbd 8b02 	vpop	{d8}
 8010396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039a:	463e      	mov	r6, r7
 801039c:	4625      	mov	r5, r4
 801039e:	2401      	movs	r4, #1
 80103a0:	e7ca      	b.n	8010338 <__gethex+0xd4>
 80103a2:	f04f 0900 	mov.w	r9, #0
 80103a6:	1cb1      	adds	r1, r6, #2
 80103a8:	e7d3      	b.n	8010352 <__gethex+0xee>
 80103aa:	f04f 0901 	mov.w	r9, #1
 80103ae:	e7fa      	b.n	80103a6 <__gethex+0x142>
 80103b0:	230a      	movs	r3, #10
 80103b2:	fb03 0202 	mla	r2, r3, r2, r0
 80103b6:	3a10      	subs	r2, #16
 80103b8:	e7d4      	b.n	8010364 <__gethex+0x100>
 80103ba:	4631      	mov	r1, r6
 80103bc:	e7df      	b.n	801037e <__gethex+0x11a>
 80103be:	1bf3      	subs	r3, r6, r7
 80103c0:	3b01      	subs	r3, #1
 80103c2:	4621      	mov	r1, r4
 80103c4:	2b07      	cmp	r3, #7
 80103c6:	dc0b      	bgt.n	80103e0 <__gethex+0x17c>
 80103c8:	ee18 0a10 	vmov	r0, s16
 80103cc:	f000 fad8 	bl	8010980 <_Balloc>
 80103d0:	4604      	mov	r4, r0
 80103d2:	b940      	cbnz	r0, 80103e6 <__gethex+0x182>
 80103d4:	4b65      	ldr	r3, [pc, #404]	; (801056c <__gethex+0x308>)
 80103d6:	4602      	mov	r2, r0
 80103d8:	21de      	movs	r1, #222	; 0xde
 80103da:	4865      	ldr	r0, [pc, #404]	; (8010570 <__gethex+0x30c>)
 80103dc:	f001 fa2c 	bl	8011838 <__assert_func>
 80103e0:	3101      	adds	r1, #1
 80103e2:	105b      	asrs	r3, r3, #1
 80103e4:	e7ee      	b.n	80103c4 <__gethex+0x160>
 80103e6:	f100 0914 	add.w	r9, r0, #20
 80103ea:	f04f 0b00 	mov.w	fp, #0
 80103ee:	f1ca 0301 	rsb	r3, sl, #1
 80103f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80103f6:	f8cd b000 	str.w	fp, [sp]
 80103fa:	9306      	str	r3, [sp, #24]
 80103fc:	42b7      	cmp	r7, r6
 80103fe:	d340      	bcc.n	8010482 <__gethex+0x21e>
 8010400:	9802      	ldr	r0, [sp, #8]
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	f840 3b04 	str.w	r3, [r0], #4
 8010408:	eba0 0009 	sub.w	r0, r0, r9
 801040c:	1080      	asrs	r0, r0, #2
 801040e:	0146      	lsls	r6, r0, #5
 8010410:	6120      	str	r0, [r4, #16]
 8010412:	4618      	mov	r0, r3
 8010414:	f000 fbaa 	bl	8010b6c <__hi0bits>
 8010418:	1a30      	subs	r0, r6, r0
 801041a:	f8d8 6000 	ldr.w	r6, [r8]
 801041e:	42b0      	cmp	r0, r6
 8010420:	dd63      	ble.n	80104ea <__gethex+0x286>
 8010422:	1b87      	subs	r7, r0, r6
 8010424:	4639      	mov	r1, r7
 8010426:	4620      	mov	r0, r4
 8010428:	f000 ff44 	bl	80112b4 <__any_on>
 801042c:	4682      	mov	sl, r0
 801042e:	b1a8      	cbz	r0, 801045c <__gethex+0x1f8>
 8010430:	1e7b      	subs	r3, r7, #1
 8010432:	1159      	asrs	r1, r3, #5
 8010434:	f003 021f 	and.w	r2, r3, #31
 8010438:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801043c:	f04f 0a01 	mov.w	sl, #1
 8010440:	fa0a f202 	lsl.w	r2, sl, r2
 8010444:	420a      	tst	r2, r1
 8010446:	d009      	beq.n	801045c <__gethex+0x1f8>
 8010448:	4553      	cmp	r3, sl
 801044a:	dd05      	ble.n	8010458 <__gethex+0x1f4>
 801044c:	1eb9      	subs	r1, r7, #2
 801044e:	4620      	mov	r0, r4
 8010450:	f000 ff30 	bl	80112b4 <__any_on>
 8010454:	2800      	cmp	r0, #0
 8010456:	d145      	bne.n	80104e4 <__gethex+0x280>
 8010458:	f04f 0a02 	mov.w	sl, #2
 801045c:	4639      	mov	r1, r7
 801045e:	4620      	mov	r0, r4
 8010460:	f7ff fe99 	bl	8010196 <rshift>
 8010464:	443d      	add	r5, r7
 8010466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801046a:	42ab      	cmp	r3, r5
 801046c:	da4c      	bge.n	8010508 <__gethex+0x2a4>
 801046e:	ee18 0a10 	vmov	r0, s16
 8010472:	4621      	mov	r1, r4
 8010474:	f000 fac4 	bl	8010a00 <_Bfree>
 8010478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801047a:	2300      	movs	r3, #0
 801047c:	6013      	str	r3, [r2, #0]
 801047e:	27a3      	movs	r7, #163	; 0xa3
 8010480:	e785      	b.n	801038e <__gethex+0x12a>
 8010482:	1e73      	subs	r3, r6, #1
 8010484:	9a05      	ldr	r2, [sp, #20]
 8010486:	9303      	str	r3, [sp, #12]
 8010488:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801048c:	4293      	cmp	r3, r2
 801048e:	d019      	beq.n	80104c4 <__gethex+0x260>
 8010490:	f1bb 0f20 	cmp.w	fp, #32
 8010494:	d107      	bne.n	80104a6 <__gethex+0x242>
 8010496:	9b02      	ldr	r3, [sp, #8]
 8010498:	9a00      	ldr	r2, [sp, #0]
 801049a:	f843 2b04 	str.w	r2, [r3], #4
 801049e:	9302      	str	r3, [sp, #8]
 80104a0:	2300      	movs	r3, #0
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	469b      	mov	fp, r3
 80104a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80104aa:	f7ff fec6 	bl	801023a <__hexdig_fun>
 80104ae:	9b00      	ldr	r3, [sp, #0]
 80104b0:	f000 000f 	and.w	r0, r0, #15
 80104b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80104b8:	4303      	orrs	r3, r0
 80104ba:	9300      	str	r3, [sp, #0]
 80104bc:	f10b 0b04 	add.w	fp, fp, #4
 80104c0:	9b03      	ldr	r3, [sp, #12]
 80104c2:	e00d      	b.n	80104e0 <__gethex+0x27c>
 80104c4:	9b03      	ldr	r3, [sp, #12]
 80104c6:	9a06      	ldr	r2, [sp, #24]
 80104c8:	4413      	add	r3, r2
 80104ca:	42bb      	cmp	r3, r7
 80104cc:	d3e0      	bcc.n	8010490 <__gethex+0x22c>
 80104ce:	4618      	mov	r0, r3
 80104d0:	9901      	ldr	r1, [sp, #4]
 80104d2:	9307      	str	r3, [sp, #28]
 80104d4:	4652      	mov	r2, sl
 80104d6:	f001 f97e 	bl	80117d6 <strncmp>
 80104da:	9b07      	ldr	r3, [sp, #28]
 80104dc:	2800      	cmp	r0, #0
 80104de:	d1d7      	bne.n	8010490 <__gethex+0x22c>
 80104e0:	461e      	mov	r6, r3
 80104e2:	e78b      	b.n	80103fc <__gethex+0x198>
 80104e4:	f04f 0a03 	mov.w	sl, #3
 80104e8:	e7b8      	b.n	801045c <__gethex+0x1f8>
 80104ea:	da0a      	bge.n	8010502 <__gethex+0x29e>
 80104ec:	1a37      	subs	r7, r6, r0
 80104ee:	4621      	mov	r1, r4
 80104f0:	ee18 0a10 	vmov	r0, s16
 80104f4:	463a      	mov	r2, r7
 80104f6:	f000 fc9f 	bl	8010e38 <__lshift>
 80104fa:	1bed      	subs	r5, r5, r7
 80104fc:	4604      	mov	r4, r0
 80104fe:	f100 0914 	add.w	r9, r0, #20
 8010502:	f04f 0a00 	mov.w	sl, #0
 8010506:	e7ae      	b.n	8010466 <__gethex+0x202>
 8010508:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801050c:	42a8      	cmp	r0, r5
 801050e:	dd72      	ble.n	80105f6 <__gethex+0x392>
 8010510:	1b45      	subs	r5, r0, r5
 8010512:	42ae      	cmp	r6, r5
 8010514:	dc36      	bgt.n	8010584 <__gethex+0x320>
 8010516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801051a:	2b02      	cmp	r3, #2
 801051c:	d02a      	beq.n	8010574 <__gethex+0x310>
 801051e:	2b03      	cmp	r3, #3
 8010520:	d02c      	beq.n	801057c <__gethex+0x318>
 8010522:	2b01      	cmp	r3, #1
 8010524:	d115      	bne.n	8010552 <__gethex+0x2ee>
 8010526:	42ae      	cmp	r6, r5
 8010528:	d113      	bne.n	8010552 <__gethex+0x2ee>
 801052a:	2e01      	cmp	r6, #1
 801052c:	d10b      	bne.n	8010546 <__gethex+0x2e2>
 801052e:	9a04      	ldr	r2, [sp, #16]
 8010530:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010534:	6013      	str	r3, [r2, #0]
 8010536:	2301      	movs	r3, #1
 8010538:	6123      	str	r3, [r4, #16]
 801053a:	f8c9 3000 	str.w	r3, [r9]
 801053e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010540:	2762      	movs	r7, #98	; 0x62
 8010542:	601c      	str	r4, [r3, #0]
 8010544:	e723      	b.n	801038e <__gethex+0x12a>
 8010546:	1e71      	subs	r1, r6, #1
 8010548:	4620      	mov	r0, r4
 801054a:	f000 feb3 	bl	80112b4 <__any_on>
 801054e:	2800      	cmp	r0, #0
 8010550:	d1ed      	bne.n	801052e <__gethex+0x2ca>
 8010552:	ee18 0a10 	vmov	r0, s16
 8010556:	4621      	mov	r1, r4
 8010558:	f000 fa52 	bl	8010a00 <_Bfree>
 801055c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801055e:	2300      	movs	r3, #0
 8010560:	6013      	str	r3, [r2, #0]
 8010562:	2750      	movs	r7, #80	; 0x50
 8010564:	e713      	b.n	801038e <__gethex+0x12a>
 8010566:	bf00      	nop
 8010568:	0801346c 	.word	0x0801346c
 801056c:	0801338c 	.word	0x0801338c
 8010570:	08013400 	.word	0x08013400
 8010574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1eb      	bne.n	8010552 <__gethex+0x2ee>
 801057a:	e7d8      	b.n	801052e <__gethex+0x2ca>
 801057c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1d5      	bne.n	801052e <__gethex+0x2ca>
 8010582:	e7e6      	b.n	8010552 <__gethex+0x2ee>
 8010584:	1e6f      	subs	r7, r5, #1
 8010586:	f1ba 0f00 	cmp.w	sl, #0
 801058a:	d131      	bne.n	80105f0 <__gethex+0x38c>
 801058c:	b127      	cbz	r7, 8010598 <__gethex+0x334>
 801058e:	4639      	mov	r1, r7
 8010590:	4620      	mov	r0, r4
 8010592:	f000 fe8f 	bl	80112b4 <__any_on>
 8010596:	4682      	mov	sl, r0
 8010598:	117b      	asrs	r3, r7, #5
 801059a:	2101      	movs	r1, #1
 801059c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80105a0:	f007 071f 	and.w	r7, r7, #31
 80105a4:	fa01 f707 	lsl.w	r7, r1, r7
 80105a8:	421f      	tst	r7, r3
 80105aa:	4629      	mov	r1, r5
 80105ac:	4620      	mov	r0, r4
 80105ae:	bf18      	it	ne
 80105b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80105b4:	1b76      	subs	r6, r6, r5
 80105b6:	f7ff fdee 	bl	8010196 <rshift>
 80105ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80105be:	2702      	movs	r7, #2
 80105c0:	f1ba 0f00 	cmp.w	sl, #0
 80105c4:	d048      	beq.n	8010658 <__gethex+0x3f4>
 80105c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	d015      	beq.n	80105fa <__gethex+0x396>
 80105ce:	2b03      	cmp	r3, #3
 80105d0:	d017      	beq.n	8010602 <__gethex+0x39e>
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d109      	bne.n	80105ea <__gethex+0x386>
 80105d6:	f01a 0f02 	tst.w	sl, #2
 80105da:	d006      	beq.n	80105ea <__gethex+0x386>
 80105dc:	f8d9 0000 	ldr.w	r0, [r9]
 80105e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80105e4:	f01a 0f01 	tst.w	sl, #1
 80105e8:	d10e      	bne.n	8010608 <__gethex+0x3a4>
 80105ea:	f047 0710 	orr.w	r7, r7, #16
 80105ee:	e033      	b.n	8010658 <__gethex+0x3f4>
 80105f0:	f04f 0a01 	mov.w	sl, #1
 80105f4:	e7d0      	b.n	8010598 <__gethex+0x334>
 80105f6:	2701      	movs	r7, #1
 80105f8:	e7e2      	b.n	80105c0 <__gethex+0x35c>
 80105fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105fc:	f1c3 0301 	rsb	r3, r3, #1
 8010600:	9315      	str	r3, [sp, #84]	; 0x54
 8010602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010604:	2b00      	cmp	r3, #0
 8010606:	d0f0      	beq.n	80105ea <__gethex+0x386>
 8010608:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801060c:	f104 0314 	add.w	r3, r4, #20
 8010610:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010614:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010618:	f04f 0c00 	mov.w	ip, #0
 801061c:	4618      	mov	r0, r3
 801061e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010622:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010626:	d01c      	beq.n	8010662 <__gethex+0x3fe>
 8010628:	3201      	adds	r2, #1
 801062a:	6002      	str	r2, [r0, #0]
 801062c:	2f02      	cmp	r7, #2
 801062e:	f104 0314 	add.w	r3, r4, #20
 8010632:	d13f      	bne.n	80106b4 <__gethex+0x450>
 8010634:	f8d8 2000 	ldr.w	r2, [r8]
 8010638:	3a01      	subs	r2, #1
 801063a:	42b2      	cmp	r2, r6
 801063c:	d10a      	bne.n	8010654 <__gethex+0x3f0>
 801063e:	1171      	asrs	r1, r6, #5
 8010640:	2201      	movs	r2, #1
 8010642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010646:	f006 061f 	and.w	r6, r6, #31
 801064a:	fa02 f606 	lsl.w	r6, r2, r6
 801064e:	421e      	tst	r6, r3
 8010650:	bf18      	it	ne
 8010652:	4617      	movne	r7, r2
 8010654:	f047 0720 	orr.w	r7, r7, #32
 8010658:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801065a:	601c      	str	r4, [r3, #0]
 801065c:	9b04      	ldr	r3, [sp, #16]
 801065e:	601d      	str	r5, [r3, #0]
 8010660:	e695      	b.n	801038e <__gethex+0x12a>
 8010662:	4299      	cmp	r1, r3
 8010664:	f843 cc04 	str.w	ip, [r3, #-4]
 8010668:	d8d8      	bhi.n	801061c <__gethex+0x3b8>
 801066a:	68a3      	ldr	r3, [r4, #8]
 801066c:	459b      	cmp	fp, r3
 801066e:	db19      	blt.n	80106a4 <__gethex+0x440>
 8010670:	6861      	ldr	r1, [r4, #4]
 8010672:	ee18 0a10 	vmov	r0, s16
 8010676:	3101      	adds	r1, #1
 8010678:	f000 f982 	bl	8010980 <_Balloc>
 801067c:	4681      	mov	r9, r0
 801067e:	b918      	cbnz	r0, 8010688 <__gethex+0x424>
 8010680:	4b1a      	ldr	r3, [pc, #104]	; (80106ec <__gethex+0x488>)
 8010682:	4602      	mov	r2, r0
 8010684:	2184      	movs	r1, #132	; 0x84
 8010686:	e6a8      	b.n	80103da <__gethex+0x176>
 8010688:	6922      	ldr	r2, [r4, #16]
 801068a:	3202      	adds	r2, #2
 801068c:	f104 010c 	add.w	r1, r4, #12
 8010690:	0092      	lsls	r2, r2, #2
 8010692:	300c      	adds	r0, #12
 8010694:	f7fd f8c2 	bl	800d81c <memcpy>
 8010698:	4621      	mov	r1, r4
 801069a:	ee18 0a10 	vmov	r0, s16
 801069e:	f000 f9af 	bl	8010a00 <_Bfree>
 80106a2:	464c      	mov	r4, r9
 80106a4:	6923      	ldr	r3, [r4, #16]
 80106a6:	1c5a      	adds	r2, r3, #1
 80106a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106ac:	6122      	str	r2, [r4, #16]
 80106ae:	2201      	movs	r2, #1
 80106b0:	615a      	str	r2, [r3, #20]
 80106b2:	e7bb      	b.n	801062c <__gethex+0x3c8>
 80106b4:	6922      	ldr	r2, [r4, #16]
 80106b6:	455a      	cmp	r2, fp
 80106b8:	dd0b      	ble.n	80106d2 <__gethex+0x46e>
 80106ba:	2101      	movs	r1, #1
 80106bc:	4620      	mov	r0, r4
 80106be:	f7ff fd6a 	bl	8010196 <rshift>
 80106c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106c6:	3501      	adds	r5, #1
 80106c8:	42ab      	cmp	r3, r5
 80106ca:	f6ff aed0 	blt.w	801046e <__gethex+0x20a>
 80106ce:	2701      	movs	r7, #1
 80106d0:	e7c0      	b.n	8010654 <__gethex+0x3f0>
 80106d2:	f016 061f 	ands.w	r6, r6, #31
 80106d6:	d0fa      	beq.n	80106ce <__gethex+0x46a>
 80106d8:	449a      	add	sl, r3
 80106da:	f1c6 0620 	rsb	r6, r6, #32
 80106de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80106e2:	f000 fa43 	bl	8010b6c <__hi0bits>
 80106e6:	42b0      	cmp	r0, r6
 80106e8:	dbe7      	blt.n	80106ba <__gethex+0x456>
 80106ea:	e7f0      	b.n	80106ce <__gethex+0x46a>
 80106ec:	0801338c 	.word	0x0801338c

080106f0 <L_shift>:
 80106f0:	f1c2 0208 	rsb	r2, r2, #8
 80106f4:	0092      	lsls	r2, r2, #2
 80106f6:	b570      	push	{r4, r5, r6, lr}
 80106f8:	f1c2 0620 	rsb	r6, r2, #32
 80106fc:	6843      	ldr	r3, [r0, #4]
 80106fe:	6804      	ldr	r4, [r0, #0]
 8010700:	fa03 f506 	lsl.w	r5, r3, r6
 8010704:	432c      	orrs	r4, r5
 8010706:	40d3      	lsrs	r3, r2
 8010708:	6004      	str	r4, [r0, #0]
 801070a:	f840 3f04 	str.w	r3, [r0, #4]!
 801070e:	4288      	cmp	r0, r1
 8010710:	d3f4      	bcc.n	80106fc <L_shift+0xc>
 8010712:	bd70      	pop	{r4, r5, r6, pc}

08010714 <__match>:
 8010714:	b530      	push	{r4, r5, lr}
 8010716:	6803      	ldr	r3, [r0, #0]
 8010718:	3301      	adds	r3, #1
 801071a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801071e:	b914      	cbnz	r4, 8010726 <__match+0x12>
 8010720:	6003      	str	r3, [r0, #0]
 8010722:	2001      	movs	r0, #1
 8010724:	bd30      	pop	{r4, r5, pc}
 8010726:	f813 2b01 	ldrb.w	r2, [r3], #1
 801072a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801072e:	2d19      	cmp	r5, #25
 8010730:	bf98      	it	ls
 8010732:	3220      	addls	r2, #32
 8010734:	42a2      	cmp	r2, r4
 8010736:	d0f0      	beq.n	801071a <__match+0x6>
 8010738:	2000      	movs	r0, #0
 801073a:	e7f3      	b.n	8010724 <__match+0x10>

0801073c <__hexnan>:
 801073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010740:	680b      	ldr	r3, [r1, #0]
 8010742:	6801      	ldr	r1, [r0, #0]
 8010744:	115e      	asrs	r6, r3, #5
 8010746:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801074a:	f013 031f 	ands.w	r3, r3, #31
 801074e:	b087      	sub	sp, #28
 8010750:	bf18      	it	ne
 8010752:	3604      	addne	r6, #4
 8010754:	2500      	movs	r5, #0
 8010756:	1f37      	subs	r7, r6, #4
 8010758:	4682      	mov	sl, r0
 801075a:	4690      	mov	r8, r2
 801075c:	9301      	str	r3, [sp, #4]
 801075e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010762:	46b9      	mov	r9, r7
 8010764:	463c      	mov	r4, r7
 8010766:	9502      	str	r5, [sp, #8]
 8010768:	46ab      	mov	fp, r5
 801076a:	784a      	ldrb	r2, [r1, #1]
 801076c:	1c4b      	adds	r3, r1, #1
 801076e:	9303      	str	r3, [sp, #12]
 8010770:	b342      	cbz	r2, 80107c4 <__hexnan+0x88>
 8010772:	4610      	mov	r0, r2
 8010774:	9105      	str	r1, [sp, #20]
 8010776:	9204      	str	r2, [sp, #16]
 8010778:	f7ff fd5f 	bl	801023a <__hexdig_fun>
 801077c:	2800      	cmp	r0, #0
 801077e:	d14f      	bne.n	8010820 <__hexnan+0xe4>
 8010780:	9a04      	ldr	r2, [sp, #16]
 8010782:	9905      	ldr	r1, [sp, #20]
 8010784:	2a20      	cmp	r2, #32
 8010786:	d818      	bhi.n	80107ba <__hexnan+0x7e>
 8010788:	9b02      	ldr	r3, [sp, #8]
 801078a:	459b      	cmp	fp, r3
 801078c:	dd13      	ble.n	80107b6 <__hexnan+0x7a>
 801078e:	454c      	cmp	r4, r9
 8010790:	d206      	bcs.n	80107a0 <__hexnan+0x64>
 8010792:	2d07      	cmp	r5, #7
 8010794:	dc04      	bgt.n	80107a0 <__hexnan+0x64>
 8010796:	462a      	mov	r2, r5
 8010798:	4649      	mov	r1, r9
 801079a:	4620      	mov	r0, r4
 801079c:	f7ff ffa8 	bl	80106f0 <L_shift>
 80107a0:	4544      	cmp	r4, r8
 80107a2:	d950      	bls.n	8010846 <__hexnan+0x10a>
 80107a4:	2300      	movs	r3, #0
 80107a6:	f1a4 0904 	sub.w	r9, r4, #4
 80107aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80107ae:	f8cd b008 	str.w	fp, [sp, #8]
 80107b2:	464c      	mov	r4, r9
 80107b4:	461d      	mov	r5, r3
 80107b6:	9903      	ldr	r1, [sp, #12]
 80107b8:	e7d7      	b.n	801076a <__hexnan+0x2e>
 80107ba:	2a29      	cmp	r2, #41	; 0x29
 80107bc:	d156      	bne.n	801086c <__hexnan+0x130>
 80107be:	3102      	adds	r1, #2
 80107c0:	f8ca 1000 	str.w	r1, [sl]
 80107c4:	f1bb 0f00 	cmp.w	fp, #0
 80107c8:	d050      	beq.n	801086c <__hexnan+0x130>
 80107ca:	454c      	cmp	r4, r9
 80107cc:	d206      	bcs.n	80107dc <__hexnan+0xa0>
 80107ce:	2d07      	cmp	r5, #7
 80107d0:	dc04      	bgt.n	80107dc <__hexnan+0xa0>
 80107d2:	462a      	mov	r2, r5
 80107d4:	4649      	mov	r1, r9
 80107d6:	4620      	mov	r0, r4
 80107d8:	f7ff ff8a 	bl	80106f0 <L_shift>
 80107dc:	4544      	cmp	r4, r8
 80107de:	d934      	bls.n	801084a <__hexnan+0x10e>
 80107e0:	f1a8 0204 	sub.w	r2, r8, #4
 80107e4:	4623      	mov	r3, r4
 80107e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80107ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80107ee:	429f      	cmp	r7, r3
 80107f0:	d2f9      	bcs.n	80107e6 <__hexnan+0xaa>
 80107f2:	1b3b      	subs	r3, r7, r4
 80107f4:	f023 0303 	bic.w	r3, r3, #3
 80107f8:	3304      	adds	r3, #4
 80107fa:	3401      	adds	r4, #1
 80107fc:	3e03      	subs	r6, #3
 80107fe:	42b4      	cmp	r4, r6
 8010800:	bf88      	it	hi
 8010802:	2304      	movhi	r3, #4
 8010804:	4443      	add	r3, r8
 8010806:	2200      	movs	r2, #0
 8010808:	f843 2b04 	str.w	r2, [r3], #4
 801080c:	429f      	cmp	r7, r3
 801080e:	d2fb      	bcs.n	8010808 <__hexnan+0xcc>
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	b91b      	cbnz	r3, 801081c <__hexnan+0xe0>
 8010814:	4547      	cmp	r7, r8
 8010816:	d127      	bne.n	8010868 <__hexnan+0x12c>
 8010818:	2301      	movs	r3, #1
 801081a:	603b      	str	r3, [r7, #0]
 801081c:	2005      	movs	r0, #5
 801081e:	e026      	b.n	801086e <__hexnan+0x132>
 8010820:	3501      	adds	r5, #1
 8010822:	2d08      	cmp	r5, #8
 8010824:	f10b 0b01 	add.w	fp, fp, #1
 8010828:	dd06      	ble.n	8010838 <__hexnan+0xfc>
 801082a:	4544      	cmp	r4, r8
 801082c:	d9c3      	bls.n	80107b6 <__hexnan+0x7a>
 801082e:	2300      	movs	r3, #0
 8010830:	f844 3c04 	str.w	r3, [r4, #-4]
 8010834:	2501      	movs	r5, #1
 8010836:	3c04      	subs	r4, #4
 8010838:	6822      	ldr	r2, [r4, #0]
 801083a:	f000 000f 	and.w	r0, r0, #15
 801083e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010842:	6022      	str	r2, [r4, #0]
 8010844:	e7b7      	b.n	80107b6 <__hexnan+0x7a>
 8010846:	2508      	movs	r5, #8
 8010848:	e7b5      	b.n	80107b6 <__hexnan+0x7a>
 801084a:	9b01      	ldr	r3, [sp, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d0df      	beq.n	8010810 <__hexnan+0xd4>
 8010850:	f04f 32ff 	mov.w	r2, #4294967295
 8010854:	f1c3 0320 	rsb	r3, r3, #32
 8010858:	fa22 f303 	lsr.w	r3, r2, r3
 801085c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010860:	401a      	ands	r2, r3
 8010862:	f846 2c04 	str.w	r2, [r6, #-4]
 8010866:	e7d3      	b.n	8010810 <__hexnan+0xd4>
 8010868:	3f04      	subs	r7, #4
 801086a:	e7d1      	b.n	8010810 <__hexnan+0xd4>
 801086c:	2004      	movs	r0, #4
 801086e:	b007      	add	sp, #28
 8010870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010874 <_localeconv_r>:
 8010874:	4800      	ldr	r0, [pc, #0]	; (8010878 <_localeconv_r+0x4>)
 8010876:	4770      	bx	lr
 8010878:	20000184 	.word	0x20000184

0801087c <__retarget_lock_init_recursive>:
 801087c:	4770      	bx	lr

0801087e <__retarget_lock_acquire_recursive>:
 801087e:	4770      	bx	lr

08010880 <__retarget_lock_release_recursive>:
 8010880:	4770      	bx	lr

08010882 <__swhatbuf_r>:
 8010882:	b570      	push	{r4, r5, r6, lr}
 8010884:	460e      	mov	r6, r1
 8010886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801088a:	2900      	cmp	r1, #0
 801088c:	b096      	sub	sp, #88	; 0x58
 801088e:	4614      	mov	r4, r2
 8010890:	461d      	mov	r5, r3
 8010892:	da07      	bge.n	80108a4 <__swhatbuf_r+0x22>
 8010894:	2300      	movs	r3, #0
 8010896:	602b      	str	r3, [r5, #0]
 8010898:	89b3      	ldrh	r3, [r6, #12]
 801089a:	061a      	lsls	r2, r3, #24
 801089c:	d410      	bmi.n	80108c0 <__swhatbuf_r+0x3e>
 801089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108a2:	e00e      	b.n	80108c2 <__swhatbuf_r+0x40>
 80108a4:	466a      	mov	r2, sp
 80108a6:	f001 f807 	bl	80118b8 <_fstat_r>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	dbf2      	blt.n	8010894 <__swhatbuf_r+0x12>
 80108ae:	9a01      	ldr	r2, [sp, #4]
 80108b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80108b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80108b8:	425a      	negs	r2, r3
 80108ba:	415a      	adcs	r2, r3
 80108bc:	602a      	str	r2, [r5, #0]
 80108be:	e7ee      	b.n	801089e <__swhatbuf_r+0x1c>
 80108c0:	2340      	movs	r3, #64	; 0x40
 80108c2:	2000      	movs	r0, #0
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	b016      	add	sp, #88	; 0x58
 80108c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080108cc <__smakebuf_r>:
 80108cc:	898b      	ldrh	r3, [r1, #12]
 80108ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108d0:	079d      	lsls	r5, r3, #30
 80108d2:	4606      	mov	r6, r0
 80108d4:	460c      	mov	r4, r1
 80108d6:	d507      	bpl.n	80108e8 <__smakebuf_r+0x1c>
 80108d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108dc:	6023      	str	r3, [r4, #0]
 80108de:	6123      	str	r3, [r4, #16]
 80108e0:	2301      	movs	r3, #1
 80108e2:	6163      	str	r3, [r4, #20]
 80108e4:	b002      	add	sp, #8
 80108e6:	bd70      	pop	{r4, r5, r6, pc}
 80108e8:	ab01      	add	r3, sp, #4
 80108ea:	466a      	mov	r2, sp
 80108ec:	f7ff ffc9 	bl	8010882 <__swhatbuf_r>
 80108f0:	9900      	ldr	r1, [sp, #0]
 80108f2:	4605      	mov	r5, r0
 80108f4:	4630      	mov	r0, r6
 80108f6:	f000 fd5d 	bl	80113b4 <_malloc_r>
 80108fa:	b948      	cbnz	r0, 8010910 <__smakebuf_r+0x44>
 80108fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010900:	059a      	lsls	r2, r3, #22
 8010902:	d4ef      	bmi.n	80108e4 <__smakebuf_r+0x18>
 8010904:	f023 0303 	bic.w	r3, r3, #3
 8010908:	f043 0302 	orr.w	r3, r3, #2
 801090c:	81a3      	strh	r3, [r4, #12]
 801090e:	e7e3      	b.n	80108d8 <__smakebuf_r+0xc>
 8010910:	4b0d      	ldr	r3, [pc, #52]	; (8010948 <__smakebuf_r+0x7c>)
 8010912:	62b3      	str	r3, [r6, #40]	; 0x28
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	6020      	str	r0, [r4, #0]
 8010918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801091c:	81a3      	strh	r3, [r4, #12]
 801091e:	9b00      	ldr	r3, [sp, #0]
 8010920:	6163      	str	r3, [r4, #20]
 8010922:	9b01      	ldr	r3, [sp, #4]
 8010924:	6120      	str	r0, [r4, #16]
 8010926:	b15b      	cbz	r3, 8010940 <__smakebuf_r+0x74>
 8010928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801092c:	4630      	mov	r0, r6
 801092e:	f000 ffd5 	bl	80118dc <_isatty_r>
 8010932:	b128      	cbz	r0, 8010940 <__smakebuf_r+0x74>
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f023 0303 	bic.w	r3, r3, #3
 801093a:	f043 0301 	orr.w	r3, r3, #1
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	89a0      	ldrh	r0, [r4, #12]
 8010942:	4305      	orrs	r5, r0
 8010944:	81a5      	strh	r5, [r4, #12]
 8010946:	e7cd      	b.n	80108e4 <__smakebuf_r+0x18>
 8010948:	0800fff5 	.word	0x0800fff5

0801094c <malloc>:
 801094c:	4b02      	ldr	r3, [pc, #8]	; (8010958 <malloc+0xc>)
 801094e:	4601      	mov	r1, r0
 8010950:	6818      	ldr	r0, [r3, #0]
 8010952:	f000 bd2f 	b.w	80113b4 <_malloc_r>
 8010956:	bf00      	nop
 8010958:	2000002c 	.word	0x2000002c

0801095c <__ascii_mbtowc>:
 801095c:	b082      	sub	sp, #8
 801095e:	b901      	cbnz	r1, 8010962 <__ascii_mbtowc+0x6>
 8010960:	a901      	add	r1, sp, #4
 8010962:	b142      	cbz	r2, 8010976 <__ascii_mbtowc+0x1a>
 8010964:	b14b      	cbz	r3, 801097a <__ascii_mbtowc+0x1e>
 8010966:	7813      	ldrb	r3, [r2, #0]
 8010968:	600b      	str	r3, [r1, #0]
 801096a:	7812      	ldrb	r2, [r2, #0]
 801096c:	1e10      	subs	r0, r2, #0
 801096e:	bf18      	it	ne
 8010970:	2001      	movne	r0, #1
 8010972:	b002      	add	sp, #8
 8010974:	4770      	bx	lr
 8010976:	4610      	mov	r0, r2
 8010978:	e7fb      	b.n	8010972 <__ascii_mbtowc+0x16>
 801097a:	f06f 0001 	mvn.w	r0, #1
 801097e:	e7f8      	b.n	8010972 <__ascii_mbtowc+0x16>

08010980 <_Balloc>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010984:	4604      	mov	r4, r0
 8010986:	460d      	mov	r5, r1
 8010988:	b976      	cbnz	r6, 80109a8 <_Balloc+0x28>
 801098a:	2010      	movs	r0, #16
 801098c:	f7ff ffde 	bl	801094c <malloc>
 8010990:	4602      	mov	r2, r0
 8010992:	6260      	str	r0, [r4, #36]	; 0x24
 8010994:	b920      	cbnz	r0, 80109a0 <_Balloc+0x20>
 8010996:	4b18      	ldr	r3, [pc, #96]	; (80109f8 <_Balloc+0x78>)
 8010998:	4818      	ldr	r0, [pc, #96]	; (80109fc <_Balloc+0x7c>)
 801099a:	2166      	movs	r1, #102	; 0x66
 801099c:	f000 ff4c 	bl	8011838 <__assert_func>
 80109a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109a4:	6006      	str	r6, [r0, #0]
 80109a6:	60c6      	str	r6, [r0, #12]
 80109a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80109aa:	68f3      	ldr	r3, [r6, #12]
 80109ac:	b183      	cbz	r3, 80109d0 <_Balloc+0x50>
 80109ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80109b6:	b9b8      	cbnz	r0, 80109e8 <_Balloc+0x68>
 80109b8:	2101      	movs	r1, #1
 80109ba:	fa01 f605 	lsl.w	r6, r1, r5
 80109be:	1d72      	adds	r2, r6, #5
 80109c0:	0092      	lsls	r2, r2, #2
 80109c2:	4620      	mov	r0, r4
 80109c4:	f000 fc97 	bl	80112f6 <_calloc_r>
 80109c8:	b160      	cbz	r0, 80109e4 <_Balloc+0x64>
 80109ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80109ce:	e00e      	b.n	80109ee <_Balloc+0x6e>
 80109d0:	2221      	movs	r2, #33	; 0x21
 80109d2:	2104      	movs	r1, #4
 80109d4:	4620      	mov	r0, r4
 80109d6:	f000 fc8e 	bl	80112f6 <_calloc_r>
 80109da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109dc:	60f0      	str	r0, [r6, #12]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1e4      	bne.n	80109ae <_Balloc+0x2e>
 80109e4:	2000      	movs	r0, #0
 80109e6:	bd70      	pop	{r4, r5, r6, pc}
 80109e8:	6802      	ldr	r2, [r0, #0]
 80109ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109ee:	2300      	movs	r3, #0
 80109f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109f4:	e7f7      	b.n	80109e6 <_Balloc+0x66>
 80109f6:	bf00      	nop
 80109f8:	08013316 	.word	0x08013316
 80109fc:	08013480 	.word	0x08013480

08010a00 <_Bfree>:
 8010a00:	b570      	push	{r4, r5, r6, lr}
 8010a02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a04:	4605      	mov	r5, r0
 8010a06:	460c      	mov	r4, r1
 8010a08:	b976      	cbnz	r6, 8010a28 <_Bfree+0x28>
 8010a0a:	2010      	movs	r0, #16
 8010a0c:	f7ff ff9e 	bl	801094c <malloc>
 8010a10:	4602      	mov	r2, r0
 8010a12:	6268      	str	r0, [r5, #36]	; 0x24
 8010a14:	b920      	cbnz	r0, 8010a20 <_Bfree+0x20>
 8010a16:	4b09      	ldr	r3, [pc, #36]	; (8010a3c <_Bfree+0x3c>)
 8010a18:	4809      	ldr	r0, [pc, #36]	; (8010a40 <_Bfree+0x40>)
 8010a1a:	218a      	movs	r1, #138	; 0x8a
 8010a1c:	f000 ff0c 	bl	8011838 <__assert_func>
 8010a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a24:	6006      	str	r6, [r0, #0]
 8010a26:	60c6      	str	r6, [r0, #12]
 8010a28:	b13c      	cbz	r4, 8010a3a <_Bfree+0x3a>
 8010a2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a2c:	6862      	ldr	r2, [r4, #4]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a34:	6021      	str	r1, [r4, #0]
 8010a36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
 8010a3c:	08013316 	.word	0x08013316
 8010a40:	08013480 	.word	0x08013480

08010a44 <__multadd>:
 8010a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a48:	690e      	ldr	r6, [r1, #16]
 8010a4a:	4607      	mov	r7, r0
 8010a4c:	4698      	mov	r8, r3
 8010a4e:	460c      	mov	r4, r1
 8010a50:	f101 0014 	add.w	r0, r1, #20
 8010a54:	2300      	movs	r3, #0
 8010a56:	6805      	ldr	r5, [r0, #0]
 8010a58:	b2a9      	uxth	r1, r5
 8010a5a:	fb02 8101 	mla	r1, r2, r1, r8
 8010a5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010a62:	0c2d      	lsrs	r5, r5, #16
 8010a64:	fb02 c505 	mla	r5, r2, r5, ip
 8010a68:	b289      	uxth	r1, r1
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010a70:	429e      	cmp	r6, r3
 8010a72:	f840 1b04 	str.w	r1, [r0], #4
 8010a76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010a7a:	dcec      	bgt.n	8010a56 <__multadd+0x12>
 8010a7c:	f1b8 0f00 	cmp.w	r8, #0
 8010a80:	d022      	beq.n	8010ac8 <__multadd+0x84>
 8010a82:	68a3      	ldr	r3, [r4, #8]
 8010a84:	42b3      	cmp	r3, r6
 8010a86:	dc19      	bgt.n	8010abc <__multadd+0x78>
 8010a88:	6861      	ldr	r1, [r4, #4]
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	3101      	adds	r1, #1
 8010a8e:	f7ff ff77 	bl	8010980 <_Balloc>
 8010a92:	4605      	mov	r5, r0
 8010a94:	b928      	cbnz	r0, 8010aa2 <__multadd+0x5e>
 8010a96:	4602      	mov	r2, r0
 8010a98:	4b0d      	ldr	r3, [pc, #52]	; (8010ad0 <__multadd+0x8c>)
 8010a9a:	480e      	ldr	r0, [pc, #56]	; (8010ad4 <__multadd+0x90>)
 8010a9c:	21b5      	movs	r1, #181	; 0xb5
 8010a9e:	f000 fecb 	bl	8011838 <__assert_func>
 8010aa2:	6922      	ldr	r2, [r4, #16]
 8010aa4:	3202      	adds	r2, #2
 8010aa6:	f104 010c 	add.w	r1, r4, #12
 8010aaa:	0092      	lsls	r2, r2, #2
 8010aac:	300c      	adds	r0, #12
 8010aae:	f7fc feb5 	bl	800d81c <memcpy>
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7ff ffa3 	bl	8010a00 <_Bfree>
 8010aba:	462c      	mov	r4, r5
 8010abc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010ac0:	3601      	adds	r6, #1
 8010ac2:	f8c3 8014 	str.w	r8, [r3, #20]
 8010ac6:	6126      	str	r6, [r4, #16]
 8010ac8:	4620      	mov	r0, r4
 8010aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ace:	bf00      	nop
 8010ad0:	0801338c 	.word	0x0801338c
 8010ad4:	08013480 	.word	0x08013480

08010ad8 <__s2b>:
 8010ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010adc:	460c      	mov	r4, r1
 8010ade:	4615      	mov	r5, r2
 8010ae0:	461f      	mov	r7, r3
 8010ae2:	2209      	movs	r2, #9
 8010ae4:	3308      	adds	r3, #8
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010aec:	2100      	movs	r1, #0
 8010aee:	2201      	movs	r2, #1
 8010af0:	429a      	cmp	r2, r3
 8010af2:	db09      	blt.n	8010b08 <__s2b+0x30>
 8010af4:	4630      	mov	r0, r6
 8010af6:	f7ff ff43 	bl	8010980 <_Balloc>
 8010afa:	b940      	cbnz	r0, 8010b0e <__s2b+0x36>
 8010afc:	4602      	mov	r2, r0
 8010afe:	4b19      	ldr	r3, [pc, #100]	; (8010b64 <__s2b+0x8c>)
 8010b00:	4819      	ldr	r0, [pc, #100]	; (8010b68 <__s2b+0x90>)
 8010b02:	21ce      	movs	r1, #206	; 0xce
 8010b04:	f000 fe98 	bl	8011838 <__assert_func>
 8010b08:	0052      	lsls	r2, r2, #1
 8010b0a:	3101      	adds	r1, #1
 8010b0c:	e7f0      	b.n	8010af0 <__s2b+0x18>
 8010b0e:	9b08      	ldr	r3, [sp, #32]
 8010b10:	6143      	str	r3, [r0, #20]
 8010b12:	2d09      	cmp	r5, #9
 8010b14:	f04f 0301 	mov.w	r3, #1
 8010b18:	6103      	str	r3, [r0, #16]
 8010b1a:	dd16      	ble.n	8010b4a <__s2b+0x72>
 8010b1c:	f104 0909 	add.w	r9, r4, #9
 8010b20:	46c8      	mov	r8, r9
 8010b22:	442c      	add	r4, r5
 8010b24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010b28:	4601      	mov	r1, r0
 8010b2a:	3b30      	subs	r3, #48	; 0x30
 8010b2c:	220a      	movs	r2, #10
 8010b2e:	4630      	mov	r0, r6
 8010b30:	f7ff ff88 	bl	8010a44 <__multadd>
 8010b34:	45a0      	cmp	r8, r4
 8010b36:	d1f5      	bne.n	8010b24 <__s2b+0x4c>
 8010b38:	f1a5 0408 	sub.w	r4, r5, #8
 8010b3c:	444c      	add	r4, r9
 8010b3e:	1b2d      	subs	r5, r5, r4
 8010b40:	1963      	adds	r3, r4, r5
 8010b42:	42bb      	cmp	r3, r7
 8010b44:	db04      	blt.n	8010b50 <__s2b+0x78>
 8010b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b4a:	340a      	adds	r4, #10
 8010b4c:	2509      	movs	r5, #9
 8010b4e:	e7f6      	b.n	8010b3e <__s2b+0x66>
 8010b50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010b54:	4601      	mov	r1, r0
 8010b56:	3b30      	subs	r3, #48	; 0x30
 8010b58:	220a      	movs	r2, #10
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	f7ff ff72 	bl	8010a44 <__multadd>
 8010b60:	e7ee      	b.n	8010b40 <__s2b+0x68>
 8010b62:	bf00      	nop
 8010b64:	0801338c 	.word	0x0801338c
 8010b68:	08013480 	.word	0x08013480

08010b6c <__hi0bits>:
 8010b6c:	0c03      	lsrs	r3, r0, #16
 8010b6e:	041b      	lsls	r3, r3, #16
 8010b70:	b9d3      	cbnz	r3, 8010ba8 <__hi0bits+0x3c>
 8010b72:	0400      	lsls	r0, r0, #16
 8010b74:	2310      	movs	r3, #16
 8010b76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b7a:	bf04      	itt	eq
 8010b7c:	0200      	lsleq	r0, r0, #8
 8010b7e:	3308      	addeq	r3, #8
 8010b80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b84:	bf04      	itt	eq
 8010b86:	0100      	lsleq	r0, r0, #4
 8010b88:	3304      	addeq	r3, #4
 8010b8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010b8e:	bf04      	itt	eq
 8010b90:	0080      	lsleq	r0, r0, #2
 8010b92:	3302      	addeq	r3, #2
 8010b94:	2800      	cmp	r0, #0
 8010b96:	db05      	blt.n	8010ba4 <__hi0bits+0x38>
 8010b98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010b9c:	f103 0301 	add.w	r3, r3, #1
 8010ba0:	bf08      	it	eq
 8010ba2:	2320      	moveq	r3, #32
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	4770      	bx	lr
 8010ba8:	2300      	movs	r3, #0
 8010baa:	e7e4      	b.n	8010b76 <__hi0bits+0xa>

08010bac <__lo0bits>:
 8010bac:	6803      	ldr	r3, [r0, #0]
 8010bae:	f013 0207 	ands.w	r2, r3, #7
 8010bb2:	4601      	mov	r1, r0
 8010bb4:	d00b      	beq.n	8010bce <__lo0bits+0x22>
 8010bb6:	07da      	lsls	r2, r3, #31
 8010bb8:	d424      	bmi.n	8010c04 <__lo0bits+0x58>
 8010bba:	0798      	lsls	r0, r3, #30
 8010bbc:	bf49      	itett	mi
 8010bbe:	085b      	lsrmi	r3, r3, #1
 8010bc0:	089b      	lsrpl	r3, r3, #2
 8010bc2:	2001      	movmi	r0, #1
 8010bc4:	600b      	strmi	r3, [r1, #0]
 8010bc6:	bf5c      	itt	pl
 8010bc8:	600b      	strpl	r3, [r1, #0]
 8010bca:	2002      	movpl	r0, #2
 8010bcc:	4770      	bx	lr
 8010bce:	b298      	uxth	r0, r3
 8010bd0:	b9b0      	cbnz	r0, 8010c00 <__lo0bits+0x54>
 8010bd2:	0c1b      	lsrs	r3, r3, #16
 8010bd4:	2010      	movs	r0, #16
 8010bd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010bda:	bf04      	itt	eq
 8010bdc:	0a1b      	lsreq	r3, r3, #8
 8010bde:	3008      	addeq	r0, #8
 8010be0:	071a      	lsls	r2, r3, #28
 8010be2:	bf04      	itt	eq
 8010be4:	091b      	lsreq	r3, r3, #4
 8010be6:	3004      	addeq	r0, #4
 8010be8:	079a      	lsls	r2, r3, #30
 8010bea:	bf04      	itt	eq
 8010bec:	089b      	lsreq	r3, r3, #2
 8010bee:	3002      	addeq	r0, #2
 8010bf0:	07da      	lsls	r2, r3, #31
 8010bf2:	d403      	bmi.n	8010bfc <__lo0bits+0x50>
 8010bf4:	085b      	lsrs	r3, r3, #1
 8010bf6:	f100 0001 	add.w	r0, r0, #1
 8010bfa:	d005      	beq.n	8010c08 <__lo0bits+0x5c>
 8010bfc:	600b      	str	r3, [r1, #0]
 8010bfe:	4770      	bx	lr
 8010c00:	4610      	mov	r0, r2
 8010c02:	e7e8      	b.n	8010bd6 <__lo0bits+0x2a>
 8010c04:	2000      	movs	r0, #0
 8010c06:	4770      	bx	lr
 8010c08:	2020      	movs	r0, #32
 8010c0a:	4770      	bx	lr

08010c0c <__i2b>:
 8010c0c:	b510      	push	{r4, lr}
 8010c0e:	460c      	mov	r4, r1
 8010c10:	2101      	movs	r1, #1
 8010c12:	f7ff feb5 	bl	8010980 <_Balloc>
 8010c16:	4602      	mov	r2, r0
 8010c18:	b928      	cbnz	r0, 8010c26 <__i2b+0x1a>
 8010c1a:	4b05      	ldr	r3, [pc, #20]	; (8010c30 <__i2b+0x24>)
 8010c1c:	4805      	ldr	r0, [pc, #20]	; (8010c34 <__i2b+0x28>)
 8010c1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c22:	f000 fe09 	bl	8011838 <__assert_func>
 8010c26:	2301      	movs	r3, #1
 8010c28:	6144      	str	r4, [r0, #20]
 8010c2a:	6103      	str	r3, [r0, #16]
 8010c2c:	bd10      	pop	{r4, pc}
 8010c2e:	bf00      	nop
 8010c30:	0801338c 	.word	0x0801338c
 8010c34:	08013480 	.word	0x08013480

08010c38 <__multiply>:
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	4614      	mov	r4, r2
 8010c3e:	690a      	ldr	r2, [r1, #16]
 8010c40:	6923      	ldr	r3, [r4, #16]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	bfb8      	it	lt
 8010c46:	460b      	movlt	r3, r1
 8010c48:	460d      	mov	r5, r1
 8010c4a:	bfbc      	itt	lt
 8010c4c:	4625      	movlt	r5, r4
 8010c4e:	461c      	movlt	r4, r3
 8010c50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010c54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010c58:	68ab      	ldr	r3, [r5, #8]
 8010c5a:	6869      	ldr	r1, [r5, #4]
 8010c5c:	eb0a 0709 	add.w	r7, sl, r9
 8010c60:	42bb      	cmp	r3, r7
 8010c62:	b085      	sub	sp, #20
 8010c64:	bfb8      	it	lt
 8010c66:	3101      	addlt	r1, #1
 8010c68:	f7ff fe8a 	bl	8010980 <_Balloc>
 8010c6c:	b930      	cbnz	r0, 8010c7c <__multiply+0x44>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	4b42      	ldr	r3, [pc, #264]	; (8010d7c <__multiply+0x144>)
 8010c72:	4843      	ldr	r0, [pc, #268]	; (8010d80 <__multiply+0x148>)
 8010c74:	f240 115d 	movw	r1, #349	; 0x15d
 8010c78:	f000 fdde 	bl	8011838 <__assert_func>
 8010c7c:	f100 0614 	add.w	r6, r0, #20
 8010c80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010c84:	4633      	mov	r3, r6
 8010c86:	2200      	movs	r2, #0
 8010c88:	4543      	cmp	r3, r8
 8010c8a:	d31e      	bcc.n	8010cca <__multiply+0x92>
 8010c8c:	f105 0c14 	add.w	ip, r5, #20
 8010c90:	f104 0314 	add.w	r3, r4, #20
 8010c94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010c98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010c9c:	9202      	str	r2, [sp, #8]
 8010c9e:	ebac 0205 	sub.w	r2, ip, r5
 8010ca2:	3a15      	subs	r2, #21
 8010ca4:	f022 0203 	bic.w	r2, r2, #3
 8010ca8:	3204      	adds	r2, #4
 8010caa:	f105 0115 	add.w	r1, r5, #21
 8010cae:	458c      	cmp	ip, r1
 8010cb0:	bf38      	it	cc
 8010cb2:	2204      	movcc	r2, #4
 8010cb4:	9201      	str	r2, [sp, #4]
 8010cb6:	9a02      	ldr	r2, [sp, #8]
 8010cb8:	9303      	str	r3, [sp, #12]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d808      	bhi.n	8010cd0 <__multiply+0x98>
 8010cbe:	2f00      	cmp	r7, #0
 8010cc0:	dc55      	bgt.n	8010d6e <__multiply+0x136>
 8010cc2:	6107      	str	r7, [r0, #16]
 8010cc4:	b005      	add	sp, #20
 8010cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cca:	f843 2b04 	str.w	r2, [r3], #4
 8010cce:	e7db      	b.n	8010c88 <__multiply+0x50>
 8010cd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8010cd4:	f1ba 0f00 	cmp.w	sl, #0
 8010cd8:	d020      	beq.n	8010d1c <__multiply+0xe4>
 8010cda:	f105 0e14 	add.w	lr, r5, #20
 8010cde:	46b1      	mov	r9, r6
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010ce6:	f8d9 b000 	ldr.w	fp, [r9]
 8010cea:	b2a1      	uxth	r1, r4
 8010cec:	fa1f fb8b 	uxth.w	fp, fp
 8010cf0:	fb0a b101 	mla	r1, sl, r1, fp
 8010cf4:	4411      	add	r1, r2
 8010cf6:	f8d9 2000 	ldr.w	r2, [r9]
 8010cfa:	0c24      	lsrs	r4, r4, #16
 8010cfc:	0c12      	lsrs	r2, r2, #16
 8010cfe:	fb0a 2404 	mla	r4, sl, r4, r2
 8010d02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010d06:	b289      	uxth	r1, r1
 8010d08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010d0c:	45f4      	cmp	ip, lr
 8010d0e:	f849 1b04 	str.w	r1, [r9], #4
 8010d12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010d16:	d8e4      	bhi.n	8010ce2 <__multiply+0xaa>
 8010d18:	9901      	ldr	r1, [sp, #4]
 8010d1a:	5072      	str	r2, [r6, r1]
 8010d1c:	9a03      	ldr	r2, [sp, #12]
 8010d1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d22:	3304      	adds	r3, #4
 8010d24:	f1b9 0f00 	cmp.w	r9, #0
 8010d28:	d01f      	beq.n	8010d6a <__multiply+0x132>
 8010d2a:	6834      	ldr	r4, [r6, #0]
 8010d2c:	f105 0114 	add.w	r1, r5, #20
 8010d30:	46b6      	mov	lr, r6
 8010d32:	f04f 0a00 	mov.w	sl, #0
 8010d36:	880a      	ldrh	r2, [r1, #0]
 8010d38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010d3c:	fb09 b202 	mla	r2, r9, r2, fp
 8010d40:	4492      	add	sl, r2
 8010d42:	b2a4      	uxth	r4, r4
 8010d44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010d48:	f84e 4b04 	str.w	r4, [lr], #4
 8010d4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8010d50:	f8be 2000 	ldrh.w	r2, [lr]
 8010d54:	0c24      	lsrs	r4, r4, #16
 8010d56:	fb09 2404 	mla	r4, r9, r4, r2
 8010d5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010d5e:	458c      	cmp	ip, r1
 8010d60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010d64:	d8e7      	bhi.n	8010d36 <__multiply+0xfe>
 8010d66:	9a01      	ldr	r2, [sp, #4]
 8010d68:	50b4      	str	r4, [r6, r2]
 8010d6a:	3604      	adds	r6, #4
 8010d6c:	e7a3      	b.n	8010cb6 <__multiply+0x7e>
 8010d6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1a5      	bne.n	8010cc2 <__multiply+0x8a>
 8010d76:	3f01      	subs	r7, #1
 8010d78:	e7a1      	b.n	8010cbe <__multiply+0x86>
 8010d7a:	bf00      	nop
 8010d7c:	0801338c 	.word	0x0801338c
 8010d80:	08013480 	.word	0x08013480

08010d84 <__pow5mult>:
 8010d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d88:	4615      	mov	r5, r2
 8010d8a:	f012 0203 	ands.w	r2, r2, #3
 8010d8e:	4606      	mov	r6, r0
 8010d90:	460f      	mov	r7, r1
 8010d92:	d007      	beq.n	8010da4 <__pow5mult+0x20>
 8010d94:	4c25      	ldr	r4, [pc, #148]	; (8010e2c <__pow5mult+0xa8>)
 8010d96:	3a01      	subs	r2, #1
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d9e:	f7ff fe51 	bl	8010a44 <__multadd>
 8010da2:	4607      	mov	r7, r0
 8010da4:	10ad      	asrs	r5, r5, #2
 8010da6:	d03d      	beq.n	8010e24 <__pow5mult+0xa0>
 8010da8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010daa:	b97c      	cbnz	r4, 8010dcc <__pow5mult+0x48>
 8010dac:	2010      	movs	r0, #16
 8010dae:	f7ff fdcd 	bl	801094c <malloc>
 8010db2:	4602      	mov	r2, r0
 8010db4:	6270      	str	r0, [r6, #36]	; 0x24
 8010db6:	b928      	cbnz	r0, 8010dc4 <__pow5mult+0x40>
 8010db8:	4b1d      	ldr	r3, [pc, #116]	; (8010e30 <__pow5mult+0xac>)
 8010dba:	481e      	ldr	r0, [pc, #120]	; (8010e34 <__pow5mult+0xb0>)
 8010dbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010dc0:	f000 fd3a 	bl	8011838 <__assert_func>
 8010dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010dc8:	6004      	str	r4, [r0, #0]
 8010dca:	60c4      	str	r4, [r0, #12]
 8010dcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010dd4:	b94c      	cbnz	r4, 8010dea <__pow5mult+0x66>
 8010dd6:	f240 2171 	movw	r1, #625	; 0x271
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f7ff ff16 	bl	8010c0c <__i2b>
 8010de0:	2300      	movs	r3, #0
 8010de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010de6:	4604      	mov	r4, r0
 8010de8:	6003      	str	r3, [r0, #0]
 8010dea:	f04f 0900 	mov.w	r9, #0
 8010dee:	07eb      	lsls	r3, r5, #31
 8010df0:	d50a      	bpl.n	8010e08 <__pow5mult+0x84>
 8010df2:	4639      	mov	r1, r7
 8010df4:	4622      	mov	r2, r4
 8010df6:	4630      	mov	r0, r6
 8010df8:	f7ff ff1e 	bl	8010c38 <__multiply>
 8010dfc:	4639      	mov	r1, r7
 8010dfe:	4680      	mov	r8, r0
 8010e00:	4630      	mov	r0, r6
 8010e02:	f7ff fdfd 	bl	8010a00 <_Bfree>
 8010e06:	4647      	mov	r7, r8
 8010e08:	106d      	asrs	r5, r5, #1
 8010e0a:	d00b      	beq.n	8010e24 <__pow5mult+0xa0>
 8010e0c:	6820      	ldr	r0, [r4, #0]
 8010e0e:	b938      	cbnz	r0, 8010e20 <__pow5mult+0x9c>
 8010e10:	4622      	mov	r2, r4
 8010e12:	4621      	mov	r1, r4
 8010e14:	4630      	mov	r0, r6
 8010e16:	f7ff ff0f 	bl	8010c38 <__multiply>
 8010e1a:	6020      	str	r0, [r4, #0]
 8010e1c:	f8c0 9000 	str.w	r9, [r0]
 8010e20:	4604      	mov	r4, r0
 8010e22:	e7e4      	b.n	8010dee <__pow5mult+0x6a>
 8010e24:	4638      	mov	r0, r7
 8010e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e2a:	bf00      	nop
 8010e2c:	080135d0 	.word	0x080135d0
 8010e30:	08013316 	.word	0x08013316
 8010e34:	08013480 	.word	0x08013480

08010e38 <__lshift>:
 8010e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	6849      	ldr	r1, [r1, #4]
 8010e40:	6923      	ldr	r3, [r4, #16]
 8010e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e46:	68a3      	ldr	r3, [r4, #8]
 8010e48:	4607      	mov	r7, r0
 8010e4a:	4691      	mov	r9, r2
 8010e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e50:	f108 0601 	add.w	r6, r8, #1
 8010e54:	42b3      	cmp	r3, r6
 8010e56:	db0b      	blt.n	8010e70 <__lshift+0x38>
 8010e58:	4638      	mov	r0, r7
 8010e5a:	f7ff fd91 	bl	8010980 <_Balloc>
 8010e5e:	4605      	mov	r5, r0
 8010e60:	b948      	cbnz	r0, 8010e76 <__lshift+0x3e>
 8010e62:	4602      	mov	r2, r0
 8010e64:	4b28      	ldr	r3, [pc, #160]	; (8010f08 <__lshift+0xd0>)
 8010e66:	4829      	ldr	r0, [pc, #164]	; (8010f0c <__lshift+0xd4>)
 8010e68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010e6c:	f000 fce4 	bl	8011838 <__assert_func>
 8010e70:	3101      	adds	r1, #1
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	e7ee      	b.n	8010e54 <__lshift+0x1c>
 8010e76:	2300      	movs	r3, #0
 8010e78:	f100 0114 	add.w	r1, r0, #20
 8010e7c:	f100 0210 	add.w	r2, r0, #16
 8010e80:	4618      	mov	r0, r3
 8010e82:	4553      	cmp	r3, sl
 8010e84:	db33      	blt.n	8010eee <__lshift+0xb6>
 8010e86:	6920      	ldr	r0, [r4, #16]
 8010e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e8c:	f104 0314 	add.w	r3, r4, #20
 8010e90:	f019 091f 	ands.w	r9, r9, #31
 8010e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010e9c:	d02b      	beq.n	8010ef6 <__lshift+0xbe>
 8010e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8010ea2:	468a      	mov	sl, r1
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	6818      	ldr	r0, [r3, #0]
 8010ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8010eac:	4302      	orrs	r2, r0
 8010eae:	f84a 2b04 	str.w	r2, [sl], #4
 8010eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb6:	459c      	cmp	ip, r3
 8010eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8010ebc:	d8f3      	bhi.n	8010ea6 <__lshift+0x6e>
 8010ebe:	ebac 0304 	sub.w	r3, ip, r4
 8010ec2:	3b15      	subs	r3, #21
 8010ec4:	f023 0303 	bic.w	r3, r3, #3
 8010ec8:	3304      	adds	r3, #4
 8010eca:	f104 0015 	add.w	r0, r4, #21
 8010ece:	4584      	cmp	ip, r0
 8010ed0:	bf38      	it	cc
 8010ed2:	2304      	movcc	r3, #4
 8010ed4:	50ca      	str	r2, [r1, r3]
 8010ed6:	b10a      	cbz	r2, 8010edc <__lshift+0xa4>
 8010ed8:	f108 0602 	add.w	r6, r8, #2
 8010edc:	3e01      	subs	r6, #1
 8010ede:	4638      	mov	r0, r7
 8010ee0:	612e      	str	r6, [r5, #16]
 8010ee2:	4621      	mov	r1, r4
 8010ee4:	f7ff fd8c 	bl	8010a00 <_Bfree>
 8010ee8:	4628      	mov	r0, r5
 8010eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	e7c5      	b.n	8010e82 <__lshift+0x4a>
 8010ef6:	3904      	subs	r1, #4
 8010ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010efc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f00:	459c      	cmp	ip, r3
 8010f02:	d8f9      	bhi.n	8010ef8 <__lshift+0xc0>
 8010f04:	e7ea      	b.n	8010edc <__lshift+0xa4>
 8010f06:	bf00      	nop
 8010f08:	0801338c 	.word	0x0801338c
 8010f0c:	08013480 	.word	0x08013480

08010f10 <__mcmp>:
 8010f10:	b530      	push	{r4, r5, lr}
 8010f12:	6902      	ldr	r2, [r0, #16]
 8010f14:	690c      	ldr	r4, [r1, #16]
 8010f16:	1b12      	subs	r2, r2, r4
 8010f18:	d10e      	bne.n	8010f38 <__mcmp+0x28>
 8010f1a:	f100 0314 	add.w	r3, r0, #20
 8010f1e:	3114      	adds	r1, #20
 8010f20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f30:	42a5      	cmp	r5, r4
 8010f32:	d003      	beq.n	8010f3c <__mcmp+0x2c>
 8010f34:	d305      	bcc.n	8010f42 <__mcmp+0x32>
 8010f36:	2201      	movs	r2, #1
 8010f38:	4610      	mov	r0, r2
 8010f3a:	bd30      	pop	{r4, r5, pc}
 8010f3c:	4283      	cmp	r3, r0
 8010f3e:	d3f3      	bcc.n	8010f28 <__mcmp+0x18>
 8010f40:	e7fa      	b.n	8010f38 <__mcmp+0x28>
 8010f42:	f04f 32ff 	mov.w	r2, #4294967295
 8010f46:	e7f7      	b.n	8010f38 <__mcmp+0x28>

08010f48 <__mdiff>:
 8010f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4c:	460c      	mov	r4, r1
 8010f4e:	4606      	mov	r6, r0
 8010f50:	4611      	mov	r1, r2
 8010f52:	4620      	mov	r0, r4
 8010f54:	4617      	mov	r7, r2
 8010f56:	f7ff ffdb 	bl	8010f10 <__mcmp>
 8010f5a:	1e05      	subs	r5, r0, #0
 8010f5c:	d110      	bne.n	8010f80 <__mdiff+0x38>
 8010f5e:	4629      	mov	r1, r5
 8010f60:	4630      	mov	r0, r6
 8010f62:	f7ff fd0d 	bl	8010980 <_Balloc>
 8010f66:	b930      	cbnz	r0, 8010f76 <__mdiff+0x2e>
 8010f68:	4b39      	ldr	r3, [pc, #228]	; (8011050 <__mdiff+0x108>)
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	f240 2132 	movw	r1, #562	; 0x232
 8010f70:	4838      	ldr	r0, [pc, #224]	; (8011054 <__mdiff+0x10c>)
 8010f72:	f000 fc61 	bl	8011838 <__assert_func>
 8010f76:	2301      	movs	r3, #1
 8010f78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f80:	bfa4      	itt	ge
 8010f82:	463b      	movge	r3, r7
 8010f84:	4627      	movge	r7, r4
 8010f86:	4630      	mov	r0, r6
 8010f88:	6879      	ldr	r1, [r7, #4]
 8010f8a:	bfa6      	itte	ge
 8010f8c:	461c      	movge	r4, r3
 8010f8e:	2500      	movge	r5, #0
 8010f90:	2501      	movlt	r5, #1
 8010f92:	f7ff fcf5 	bl	8010980 <_Balloc>
 8010f96:	b920      	cbnz	r0, 8010fa2 <__mdiff+0x5a>
 8010f98:	4b2d      	ldr	r3, [pc, #180]	; (8011050 <__mdiff+0x108>)
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010fa0:	e7e6      	b.n	8010f70 <__mdiff+0x28>
 8010fa2:	693e      	ldr	r6, [r7, #16]
 8010fa4:	60c5      	str	r5, [r0, #12]
 8010fa6:	6925      	ldr	r5, [r4, #16]
 8010fa8:	f107 0114 	add.w	r1, r7, #20
 8010fac:	f104 0914 	add.w	r9, r4, #20
 8010fb0:	f100 0e14 	add.w	lr, r0, #20
 8010fb4:	f107 0210 	add.w	r2, r7, #16
 8010fb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010fbc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010fc0:	46f2      	mov	sl, lr
 8010fc2:	2700      	movs	r7, #0
 8010fc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010fcc:	fa1f f883 	uxth.w	r8, r3
 8010fd0:	fa17 f78b 	uxtah	r7, r7, fp
 8010fd4:	0c1b      	lsrs	r3, r3, #16
 8010fd6:	eba7 0808 	sub.w	r8, r7, r8
 8010fda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010fde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010fe2:	fa1f f888 	uxth.w	r8, r8
 8010fe6:	141f      	asrs	r7, r3, #16
 8010fe8:	454d      	cmp	r5, r9
 8010fea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010fee:	f84a 3b04 	str.w	r3, [sl], #4
 8010ff2:	d8e7      	bhi.n	8010fc4 <__mdiff+0x7c>
 8010ff4:	1b2b      	subs	r3, r5, r4
 8010ff6:	3b15      	subs	r3, #21
 8010ff8:	f023 0303 	bic.w	r3, r3, #3
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	3415      	adds	r4, #21
 8011000:	42a5      	cmp	r5, r4
 8011002:	bf38      	it	cc
 8011004:	2304      	movcc	r3, #4
 8011006:	4419      	add	r1, r3
 8011008:	4473      	add	r3, lr
 801100a:	469e      	mov	lr, r3
 801100c:	460d      	mov	r5, r1
 801100e:	4565      	cmp	r5, ip
 8011010:	d30e      	bcc.n	8011030 <__mdiff+0xe8>
 8011012:	f10c 0203 	add.w	r2, ip, #3
 8011016:	1a52      	subs	r2, r2, r1
 8011018:	f022 0203 	bic.w	r2, r2, #3
 801101c:	3903      	subs	r1, #3
 801101e:	458c      	cmp	ip, r1
 8011020:	bf38      	it	cc
 8011022:	2200      	movcc	r2, #0
 8011024:	441a      	add	r2, r3
 8011026:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801102a:	b17b      	cbz	r3, 801104c <__mdiff+0x104>
 801102c:	6106      	str	r6, [r0, #16]
 801102e:	e7a5      	b.n	8010f7c <__mdiff+0x34>
 8011030:	f855 8b04 	ldr.w	r8, [r5], #4
 8011034:	fa17 f488 	uxtah	r4, r7, r8
 8011038:	1422      	asrs	r2, r4, #16
 801103a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801103e:	b2a4      	uxth	r4, r4
 8011040:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011044:	f84e 4b04 	str.w	r4, [lr], #4
 8011048:	1417      	asrs	r7, r2, #16
 801104a:	e7e0      	b.n	801100e <__mdiff+0xc6>
 801104c:	3e01      	subs	r6, #1
 801104e:	e7ea      	b.n	8011026 <__mdiff+0xde>
 8011050:	0801338c 	.word	0x0801338c
 8011054:	08013480 	.word	0x08013480

08011058 <__ulp>:
 8011058:	b082      	sub	sp, #8
 801105a:	ed8d 0b00 	vstr	d0, [sp]
 801105e:	9b01      	ldr	r3, [sp, #4]
 8011060:	4912      	ldr	r1, [pc, #72]	; (80110ac <__ulp+0x54>)
 8011062:	4019      	ands	r1, r3
 8011064:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011068:	2900      	cmp	r1, #0
 801106a:	dd05      	ble.n	8011078 <__ulp+0x20>
 801106c:	2200      	movs	r2, #0
 801106e:	460b      	mov	r3, r1
 8011070:	ec43 2b10 	vmov	d0, r2, r3
 8011074:	b002      	add	sp, #8
 8011076:	4770      	bx	lr
 8011078:	4249      	negs	r1, r1
 801107a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801107e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011082:	f04f 0200 	mov.w	r2, #0
 8011086:	f04f 0300 	mov.w	r3, #0
 801108a:	da04      	bge.n	8011096 <__ulp+0x3e>
 801108c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011090:	fa41 f300 	asr.w	r3, r1, r0
 8011094:	e7ec      	b.n	8011070 <__ulp+0x18>
 8011096:	f1a0 0114 	sub.w	r1, r0, #20
 801109a:	291e      	cmp	r1, #30
 801109c:	bfda      	itte	le
 801109e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80110a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80110a6:	2101      	movgt	r1, #1
 80110a8:	460a      	mov	r2, r1
 80110aa:	e7e1      	b.n	8011070 <__ulp+0x18>
 80110ac:	7ff00000 	.word	0x7ff00000

080110b0 <__b2d>:
 80110b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b2:	6905      	ldr	r5, [r0, #16]
 80110b4:	f100 0714 	add.w	r7, r0, #20
 80110b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80110bc:	1f2e      	subs	r6, r5, #4
 80110be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80110c2:	4620      	mov	r0, r4
 80110c4:	f7ff fd52 	bl	8010b6c <__hi0bits>
 80110c8:	f1c0 0320 	rsb	r3, r0, #32
 80110cc:	280a      	cmp	r0, #10
 80110ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801114c <__b2d+0x9c>
 80110d2:	600b      	str	r3, [r1, #0]
 80110d4:	dc14      	bgt.n	8011100 <__b2d+0x50>
 80110d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80110da:	fa24 f10e 	lsr.w	r1, r4, lr
 80110de:	42b7      	cmp	r7, r6
 80110e0:	ea41 030c 	orr.w	r3, r1, ip
 80110e4:	bf34      	ite	cc
 80110e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80110ea:	2100      	movcs	r1, #0
 80110ec:	3015      	adds	r0, #21
 80110ee:	fa04 f000 	lsl.w	r0, r4, r0
 80110f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80110f6:	ea40 0201 	orr.w	r2, r0, r1
 80110fa:	ec43 2b10 	vmov	d0, r2, r3
 80110fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011100:	42b7      	cmp	r7, r6
 8011102:	bf3a      	itte	cc
 8011104:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011108:	f1a5 0608 	subcc.w	r6, r5, #8
 801110c:	2100      	movcs	r1, #0
 801110e:	380b      	subs	r0, #11
 8011110:	d017      	beq.n	8011142 <__b2d+0x92>
 8011112:	f1c0 0c20 	rsb	ip, r0, #32
 8011116:	fa04 f500 	lsl.w	r5, r4, r0
 801111a:	42be      	cmp	r6, r7
 801111c:	fa21 f40c 	lsr.w	r4, r1, ip
 8011120:	ea45 0504 	orr.w	r5, r5, r4
 8011124:	bf8c      	ite	hi
 8011126:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801112a:	2400      	movls	r4, #0
 801112c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011130:	fa01 f000 	lsl.w	r0, r1, r0
 8011134:	fa24 f40c 	lsr.w	r4, r4, ip
 8011138:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801113c:	ea40 0204 	orr.w	r2, r0, r4
 8011140:	e7db      	b.n	80110fa <__b2d+0x4a>
 8011142:	ea44 030c 	orr.w	r3, r4, ip
 8011146:	460a      	mov	r2, r1
 8011148:	e7d7      	b.n	80110fa <__b2d+0x4a>
 801114a:	bf00      	nop
 801114c:	3ff00000 	.word	0x3ff00000

08011150 <__d2b>:
 8011150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011154:	4689      	mov	r9, r1
 8011156:	2101      	movs	r1, #1
 8011158:	ec57 6b10 	vmov	r6, r7, d0
 801115c:	4690      	mov	r8, r2
 801115e:	f7ff fc0f 	bl	8010980 <_Balloc>
 8011162:	4604      	mov	r4, r0
 8011164:	b930      	cbnz	r0, 8011174 <__d2b+0x24>
 8011166:	4602      	mov	r2, r0
 8011168:	4b25      	ldr	r3, [pc, #148]	; (8011200 <__d2b+0xb0>)
 801116a:	4826      	ldr	r0, [pc, #152]	; (8011204 <__d2b+0xb4>)
 801116c:	f240 310a 	movw	r1, #778	; 0x30a
 8011170:	f000 fb62 	bl	8011838 <__assert_func>
 8011174:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801117c:	bb35      	cbnz	r5, 80111cc <__d2b+0x7c>
 801117e:	2e00      	cmp	r6, #0
 8011180:	9301      	str	r3, [sp, #4]
 8011182:	d028      	beq.n	80111d6 <__d2b+0x86>
 8011184:	4668      	mov	r0, sp
 8011186:	9600      	str	r6, [sp, #0]
 8011188:	f7ff fd10 	bl	8010bac <__lo0bits>
 801118c:	9900      	ldr	r1, [sp, #0]
 801118e:	b300      	cbz	r0, 80111d2 <__d2b+0x82>
 8011190:	9a01      	ldr	r2, [sp, #4]
 8011192:	f1c0 0320 	rsb	r3, r0, #32
 8011196:	fa02 f303 	lsl.w	r3, r2, r3
 801119a:	430b      	orrs	r3, r1
 801119c:	40c2      	lsrs	r2, r0
 801119e:	6163      	str	r3, [r4, #20]
 80111a0:	9201      	str	r2, [sp, #4]
 80111a2:	9b01      	ldr	r3, [sp, #4]
 80111a4:	61a3      	str	r3, [r4, #24]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	bf14      	ite	ne
 80111aa:	2202      	movne	r2, #2
 80111ac:	2201      	moveq	r2, #1
 80111ae:	6122      	str	r2, [r4, #16]
 80111b0:	b1d5      	cbz	r5, 80111e8 <__d2b+0x98>
 80111b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80111b6:	4405      	add	r5, r0
 80111b8:	f8c9 5000 	str.w	r5, [r9]
 80111bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80111c0:	f8c8 0000 	str.w	r0, [r8]
 80111c4:	4620      	mov	r0, r4
 80111c6:	b003      	add	sp, #12
 80111c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80111d0:	e7d5      	b.n	801117e <__d2b+0x2e>
 80111d2:	6161      	str	r1, [r4, #20]
 80111d4:	e7e5      	b.n	80111a2 <__d2b+0x52>
 80111d6:	a801      	add	r0, sp, #4
 80111d8:	f7ff fce8 	bl	8010bac <__lo0bits>
 80111dc:	9b01      	ldr	r3, [sp, #4]
 80111de:	6163      	str	r3, [r4, #20]
 80111e0:	2201      	movs	r2, #1
 80111e2:	6122      	str	r2, [r4, #16]
 80111e4:	3020      	adds	r0, #32
 80111e6:	e7e3      	b.n	80111b0 <__d2b+0x60>
 80111e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80111ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111f0:	f8c9 0000 	str.w	r0, [r9]
 80111f4:	6918      	ldr	r0, [r3, #16]
 80111f6:	f7ff fcb9 	bl	8010b6c <__hi0bits>
 80111fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80111fe:	e7df      	b.n	80111c0 <__d2b+0x70>
 8011200:	0801338c 	.word	0x0801338c
 8011204:	08013480 	.word	0x08013480

08011208 <__ratio>:
 8011208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	4688      	mov	r8, r1
 801120e:	4669      	mov	r1, sp
 8011210:	4681      	mov	r9, r0
 8011212:	f7ff ff4d 	bl	80110b0 <__b2d>
 8011216:	a901      	add	r1, sp, #4
 8011218:	4640      	mov	r0, r8
 801121a:	ec55 4b10 	vmov	r4, r5, d0
 801121e:	f7ff ff47 	bl	80110b0 <__b2d>
 8011222:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011226:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801122a:	eba3 0c02 	sub.w	ip, r3, r2
 801122e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011232:	1a9b      	subs	r3, r3, r2
 8011234:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011238:	ec51 0b10 	vmov	r0, r1, d0
 801123c:	2b00      	cmp	r3, #0
 801123e:	bfd6      	itet	le
 8011240:	460a      	movle	r2, r1
 8011242:	462a      	movgt	r2, r5
 8011244:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011248:	468b      	mov	fp, r1
 801124a:	462f      	mov	r7, r5
 801124c:	bfd4      	ite	le
 801124e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011252:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011256:	4620      	mov	r0, r4
 8011258:	ee10 2a10 	vmov	r2, s0
 801125c:	465b      	mov	r3, fp
 801125e:	4639      	mov	r1, r7
 8011260:	f7ef fb1c 	bl	800089c <__aeabi_ddiv>
 8011264:	ec41 0b10 	vmov	d0, r0, r1
 8011268:	b003      	add	sp, #12
 801126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801126e <__copybits>:
 801126e:	3901      	subs	r1, #1
 8011270:	b570      	push	{r4, r5, r6, lr}
 8011272:	1149      	asrs	r1, r1, #5
 8011274:	6914      	ldr	r4, [r2, #16]
 8011276:	3101      	adds	r1, #1
 8011278:	f102 0314 	add.w	r3, r2, #20
 801127c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011280:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011284:	1f05      	subs	r5, r0, #4
 8011286:	42a3      	cmp	r3, r4
 8011288:	d30c      	bcc.n	80112a4 <__copybits+0x36>
 801128a:	1aa3      	subs	r3, r4, r2
 801128c:	3b11      	subs	r3, #17
 801128e:	f023 0303 	bic.w	r3, r3, #3
 8011292:	3211      	adds	r2, #17
 8011294:	42a2      	cmp	r2, r4
 8011296:	bf88      	it	hi
 8011298:	2300      	movhi	r3, #0
 801129a:	4418      	add	r0, r3
 801129c:	2300      	movs	r3, #0
 801129e:	4288      	cmp	r0, r1
 80112a0:	d305      	bcc.n	80112ae <__copybits+0x40>
 80112a2:	bd70      	pop	{r4, r5, r6, pc}
 80112a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80112a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80112ac:	e7eb      	b.n	8011286 <__copybits+0x18>
 80112ae:	f840 3b04 	str.w	r3, [r0], #4
 80112b2:	e7f4      	b.n	801129e <__copybits+0x30>

080112b4 <__any_on>:
 80112b4:	f100 0214 	add.w	r2, r0, #20
 80112b8:	6900      	ldr	r0, [r0, #16]
 80112ba:	114b      	asrs	r3, r1, #5
 80112bc:	4298      	cmp	r0, r3
 80112be:	b510      	push	{r4, lr}
 80112c0:	db11      	blt.n	80112e6 <__any_on+0x32>
 80112c2:	dd0a      	ble.n	80112da <__any_on+0x26>
 80112c4:	f011 011f 	ands.w	r1, r1, #31
 80112c8:	d007      	beq.n	80112da <__any_on+0x26>
 80112ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80112ce:	fa24 f001 	lsr.w	r0, r4, r1
 80112d2:	fa00 f101 	lsl.w	r1, r0, r1
 80112d6:	428c      	cmp	r4, r1
 80112d8:	d10b      	bne.n	80112f2 <__any_on+0x3e>
 80112da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80112de:	4293      	cmp	r3, r2
 80112e0:	d803      	bhi.n	80112ea <__any_on+0x36>
 80112e2:	2000      	movs	r0, #0
 80112e4:	bd10      	pop	{r4, pc}
 80112e6:	4603      	mov	r3, r0
 80112e8:	e7f7      	b.n	80112da <__any_on+0x26>
 80112ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112ee:	2900      	cmp	r1, #0
 80112f0:	d0f5      	beq.n	80112de <__any_on+0x2a>
 80112f2:	2001      	movs	r0, #1
 80112f4:	e7f6      	b.n	80112e4 <__any_on+0x30>

080112f6 <_calloc_r>:
 80112f6:	b513      	push	{r0, r1, r4, lr}
 80112f8:	434a      	muls	r2, r1
 80112fa:	4611      	mov	r1, r2
 80112fc:	9201      	str	r2, [sp, #4]
 80112fe:	f000 f859 	bl	80113b4 <_malloc_r>
 8011302:	4604      	mov	r4, r0
 8011304:	b118      	cbz	r0, 801130e <_calloc_r+0x18>
 8011306:	9a01      	ldr	r2, [sp, #4]
 8011308:	2100      	movs	r1, #0
 801130a:	f7fc fa95 	bl	800d838 <memset>
 801130e:	4620      	mov	r0, r4
 8011310:	b002      	add	sp, #8
 8011312:	bd10      	pop	{r4, pc}

08011314 <_free_r>:
 8011314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011316:	2900      	cmp	r1, #0
 8011318:	d048      	beq.n	80113ac <_free_r+0x98>
 801131a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801131e:	9001      	str	r0, [sp, #4]
 8011320:	2b00      	cmp	r3, #0
 8011322:	f1a1 0404 	sub.w	r4, r1, #4
 8011326:	bfb8      	it	lt
 8011328:	18e4      	addlt	r4, r4, r3
 801132a:	f000 faf9 	bl	8011920 <__malloc_lock>
 801132e:	4a20      	ldr	r2, [pc, #128]	; (80113b0 <_free_r+0x9c>)
 8011330:	9801      	ldr	r0, [sp, #4]
 8011332:	6813      	ldr	r3, [r2, #0]
 8011334:	4615      	mov	r5, r2
 8011336:	b933      	cbnz	r3, 8011346 <_free_r+0x32>
 8011338:	6063      	str	r3, [r4, #4]
 801133a:	6014      	str	r4, [r2, #0]
 801133c:	b003      	add	sp, #12
 801133e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011342:	f000 baf3 	b.w	801192c <__malloc_unlock>
 8011346:	42a3      	cmp	r3, r4
 8011348:	d90b      	bls.n	8011362 <_free_r+0x4e>
 801134a:	6821      	ldr	r1, [r4, #0]
 801134c:	1862      	adds	r2, r4, r1
 801134e:	4293      	cmp	r3, r2
 8011350:	bf04      	itt	eq
 8011352:	681a      	ldreq	r2, [r3, #0]
 8011354:	685b      	ldreq	r3, [r3, #4]
 8011356:	6063      	str	r3, [r4, #4]
 8011358:	bf04      	itt	eq
 801135a:	1852      	addeq	r2, r2, r1
 801135c:	6022      	streq	r2, [r4, #0]
 801135e:	602c      	str	r4, [r5, #0]
 8011360:	e7ec      	b.n	801133c <_free_r+0x28>
 8011362:	461a      	mov	r2, r3
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	b10b      	cbz	r3, 801136c <_free_r+0x58>
 8011368:	42a3      	cmp	r3, r4
 801136a:	d9fa      	bls.n	8011362 <_free_r+0x4e>
 801136c:	6811      	ldr	r1, [r2, #0]
 801136e:	1855      	adds	r5, r2, r1
 8011370:	42a5      	cmp	r5, r4
 8011372:	d10b      	bne.n	801138c <_free_r+0x78>
 8011374:	6824      	ldr	r4, [r4, #0]
 8011376:	4421      	add	r1, r4
 8011378:	1854      	adds	r4, r2, r1
 801137a:	42a3      	cmp	r3, r4
 801137c:	6011      	str	r1, [r2, #0]
 801137e:	d1dd      	bne.n	801133c <_free_r+0x28>
 8011380:	681c      	ldr	r4, [r3, #0]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	6053      	str	r3, [r2, #4]
 8011386:	4421      	add	r1, r4
 8011388:	6011      	str	r1, [r2, #0]
 801138a:	e7d7      	b.n	801133c <_free_r+0x28>
 801138c:	d902      	bls.n	8011394 <_free_r+0x80>
 801138e:	230c      	movs	r3, #12
 8011390:	6003      	str	r3, [r0, #0]
 8011392:	e7d3      	b.n	801133c <_free_r+0x28>
 8011394:	6825      	ldr	r5, [r4, #0]
 8011396:	1961      	adds	r1, r4, r5
 8011398:	428b      	cmp	r3, r1
 801139a:	bf04      	itt	eq
 801139c:	6819      	ldreq	r1, [r3, #0]
 801139e:	685b      	ldreq	r3, [r3, #4]
 80113a0:	6063      	str	r3, [r4, #4]
 80113a2:	bf04      	itt	eq
 80113a4:	1949      	addeq	r1, r1, r5
 80113a6:	6021      	streq	r1, [r4, #0]
 80113a8:	6054      	str	r4, [r2, #4]
 80113aa:	e7c7      	b.n	801133c <_free_r+0x28>
 80113ac:	b003      	add	sp, #12
 80113ae:	bd30      	pop	{r4, r5, pc}
 80113b0:	2000022c 	.word	0x2000022c

080113b4 <_malloc_r>:
 80113b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113b6:	1ccd      	adds	r5, r1, #3
 80113b8:	f025 0503 	bic.w	r5, r5, #3
 80113bc:	3508      	adds	r5, #8
 80113be:	2d0c      	cmp	r5, #12
 80113c0:	bf38      	it	cc
 80113c2:	250c      	movcc	r5, #12
 80113c4:	2d00      	cmp	r5, #0
 80113c6:	4606      	mov	r6, r0
 80113c8:	db01      	blt.n	80113ce <_malloc_r+0x1a>
 80113ca:	42a9      	cmp	r1, r5
 80113cc:	d903      	bls.n	80113d6 <_malloc_r+0x22>
 80113ce:	230c      	movs	r3, #12
 80113d0:	6033      	str	r3, [r6, #0]
 80113d2:	2000      	movs	r0, #0
 80113d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113d6:	f000 faa3 	bl	8011920 <__malloc_lock>
 80113da:	4921      	ldr	r1, [pc, #132]	; (8011460 <_malloc_r+0xac>)
 80113dc:	680a      	ldr	r2, [r1, #0]
 80113de:	4614      	mov	r4, r2
 80113e0:	b99c      	cbnz	r4, 801140a <_malloc_r+0x56>
 80113e2:	4f20      	ldr	r7, [pc, #128]	; (8011464 <_malloc_r+0xb0>)
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	b923      	cbnz	r3, 80113f2 <_malloc_r+0x3e>
 80113e8:	4621      	mov	r1, r4
 80113ea:	4630      	mov	r0, r6
 80113ec:	f000 f9a0 	bl	8011730 <_sbrk_r>
 80113f0:	6038      	str	r0, [r7, #0]
 80113f2:	4629      	mov	r1, r5
 80113f4:	4630      	mov	r0, r6
 80113f6:	f000 f99b 	bl	8011730 <_sbrk_r>
 80113fa:	1c43      	adds	r3, r0, #1
 80113fc:	d123      	bne.n	8011446 <_malloc_r+0x92>
 80113fe:	230c      	movs	r3, #12
 8011400:	6033      	str	r3, [r6, #0]
 8011402:	4630      	mov	r0, r6
 8011404:	f000 fa92 	bl	801192c <__malloc_unlock>
 8011408:	e7e3      	b.n	80113d2 <_malloc_r+0x1e>
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	1b5b      	subs	r3, r3, r5
 801140e:	d417      	bmi.n	8011440 <_malloc_r+0x8c>
 8011410:	2b0b      	cmp	r3, #11
 8011412:	d903      	bls.n	801141c <_malloc_r+0x68>
 8011414:	6023      	str	r3, [r4, #0]
 8011416:	441c      	add	r4, r3
 8011418:	6025      	str	r5, [r4, #0]
 801141a:	e004      	b.n	8011426 <_malloc_r+0x72>
 801141c:	6863      	ldr	r3, [r4, #4]
 801141e:	42a2      	cmp	r2, r4
 8011420:	bf0c      	ite	eq
 8011422:	600b      	streq	r3, [r1, #0]
 8011424:	6053      	strne	r3, [r2, #4]
 8011426:	4630      	mov	r0, r6
 8011428:	f000 fa80 	bl	801192c <__malloc_unlock>
 801142c:	f104 000b 	add.w	r0, r4, #11
 8011430:	1d23      	adds	r3, r4, #4
 8011432:	f020 0007 	bic.w	r0, r0, #7
 8011436:	1ac2      	subs	r2, r0, r3
 8011438:	d0cc      	beq.n	80113d4 <_malloc_r+0x20>
 801143a:	1a1b      	subs	r3, r3, r0
 801143c:	50a3      	str	r3, [r4, r2]
 801143e:	e7c9      	b.n	80113d4 <_malloc_r+0x20>
 8011440:	4622      	mov	r2, r4
 8011442:	6864      	ldr	r4, [r4, #4]
 8011444:	e7cc      	b.n	80113e0 <_malloc_r+0x2c>
 8011446:	1cc4      	adds	r4, r0, #3
 8011448:	f024 0403 	bic.w	r4, r4, #3
 801144c:	42a0      	cmp	r0, r4
 801144e:	d0e3      	beq.n	8011418 <_malloc_r+0x64>
 8011450:	1a21      	subs	r1, r4, r0
 8011452:	4630      	mov	r0, r6
 8011454:	f000 f96c 	bl	8011730 <_sbrk_r>
 8011458:	3001      	adds	r0, #1
 801145a:	d1dd      	bne.n	8011418 <_malloc_r+0x64>
 801145c:	e7cf      	b.n	80113fe <_malloc_r+0x4a>
 801145e:	bf00      	nop
 8011460:	2000022c 	.word	0x2000022c
 8011464:	20000230 	.word	0x20000230

08011468 <__sfputc_r>:
 8011468:	6893      	ldr	r3, [r2, #8]
 801146a:	3b01      	subs	r3, #1
 801146c:	2b00      	cmp	r3, #0
 801146e:	b410      	push	{r4}
 8011470:	6093      	str	r3, [r2, #8]
 8011472:	da08      	bge.n	8011486 <__sfputc_r+0x1e>
 8011474:	6994      	ldr	r4, [r2, #24]
 8011476:	42a3      	cmp	r3, r4
 8011478:	db01      	blt.n	801147e <__sfputc_r+0x16>
 801147a:	290a      	cmp	r1, #10
 801147c:	d103      	bne.n	8011486 <__sfputc_r+0x1e>
 801147e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011482:	f7fd bd99 	b.w	800efb8 <__swbuf_r>
 8011486:	6813      	ldr	r3, [r2, #0]
 8011488:	1c58      	adds	r0, r3, #1
 801148a:	6010      	str	r0, [r2, #0]
 801148c:	7019      	strb	r1, [r3, #0]
 801148e:	4608      	mov	r0, r1
 8011490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011494:	4770      	bx	lr

08011496 <__sfputs_r>:
 8011496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011498:	4606      	mov	r6, r0
 801149a:	460f      	mov	r7, r1
 801149c:	4614      	mov	r4, r2
 801149e:	18d5      	adds	r5, r2, r3
 80114a0:	42ac      	cmp	r4, r5
 80114a2:	d101      	bne.n	80114a8 <__sfputs_r+0x12>
 80114a4:	2000      	movs	r0, #0
 80114a6:	e007      	b.n	80114b8 <__sfputs_r+0x22>
 80114a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ac:	463a      	mov	r2, r7
 80114ae:	4630      	mov	r0, r6
 80114b0:	f7ff ffda 	bl	8011468 <__sfputc_r>
 80114b4:	1c43      	adds	r3, r0, #1
 80114b6:	d1f3      	bne.n	80114a0 <__sfputs_r+0xa>
 80114b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080114bc <_vfiprintf_r>:
 80114bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	460d      	mov	r5, r1
 80114c2:	b09d      	sub	sp, #116	; 0x74
 80114c4:	4614      	mov	r4, r2
 80114c6:	4698      	mov	r8, r3
 80114c8:	4606      	mov	r6, r0
 80114ca:	b118      	cbz	r0, 80114d4 <_vfiprintf_r+0x18>
 80114cc:	6983      	ldr	r3, [r0, #24]
 80114ce:	b90b      	cbnz	r3, 80114d4 <_vfiprintf_r+0x18>
 80114d0:	f7fe fdc4 	bl	801005c <__sinit>
 80114d4:	4b89      	ldr	r3, [pc, #548]	; (80116fc <_vfiprintf_r+0x240>)
 80114d6:	429d      	cmp	r5, r3
 80114d8:	d11b      	bne.n	8011512 <_vfiprintf_r+0x56>
 80114da:	6875      	ldr	r5, [r6, #4]
 80114dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114de:	07d9      	lsls	r1, r3, #31
 80114e0:	d405      	bmi.n	80114ee <_vfiprintf_r+0x32>
 80114e2:	89ab      	ldrh	r3, [r5, #12]
 80114e4:	059a      	lsls	r2, r3, #22
 80114e6:	d402      	bmi.n	80114ee <_vfiprintf_r+0x32>
 80114e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114ea:	f7ff f9c8 	bl	801087e <__retarget_lock_acquire_recursive>
 80114ee:	89ab      	ldrh	r3, [r5, #12]
 80114f0:	071b      	lsls	r3, r3, #28
 80114f2:	d501      	bpl.n	80114f8 <_vfiprintf_r+0x3c>
 80114f4:	692b      	ldr	r3, [r5, #16]
 80114f6:	b9eb      	cbnz	r3, 8011534 <_vfiprintf_r+0x78>
 80114f8:	4629      	mov	r1, r5
 80114fa:	4630      	mov	r0, r6
 80114fc:	f7fd fdae 	bl	800f05c <__swsetup_r>
 8011500:	b1c0      	cbz	r0, 8011534 <_vfiprintf_r+0x78>
 8011502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011504:	07dc      	lsls	r4, r3, #31
 8011506:	d50e      	bpl.n	8011526 <_vfiprintf_r+0x6a>
 8011508:	f04f 30ff 	mov.w	r0, #4294967295
 801150c:	b01d      	add	sp, #116	; 0x74
 801150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011512:	4b7b      	ldr	r3, [pc, #492]	; (8011700 <_vfiprintf_r+0x244>)
 8011514:	429d      	cmp	r5, r3
 8011516:	d101      	bne.n	801151c <_vfiprintf_r+0x60>
 8011518:	68b5      	ldr	r5, [r6, #8]
 801151a:	e7df      	b.n	80114dc <_vfiprintf_r+0x20>
 801151c:	4b79      	ldr	r3, [pc, #484]	; (8011704 <_vfiprintf_r+0x248>)
 801151e:	429d      	cmp	r5, r3
 8011520:	bf08      	it	eq
 8011522:	68f5      	ldreq	r5, [r6, #12]
 8011524:	e7da      	b.n	80114dc <_vfiprintf_r+0x20>
 8011526:	89ab      	ldrh	r3, [r5, #12]
 8011528:	0598      	lsls	r0, r3, #22
 801152a:	d4ed      	bmi.n	8011508 <_vfiprintf_r+0x4c>
 801152c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801152e:	f7ff f9a7 	bl	8010880 <__retarget_lock_release_recursive>
 8011532:	e7e9      	b.n	8011508 <_vfiprintf_r+0x4c>
 8011534:	2300      	movs	r3, #0
 8011536:	9309      	str	r3, [sp, #36]	; 0x24
 8011538:	2320      	movs	r3, #32
 801153a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801153e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011542:	2330      	movs	r3, #48	; 0x30
 8011544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011708 <_vfiprintf_r+0x24c>
 8011548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801154c:	f04f 0901 	mov.w	r9, #1
 8011550:	4623      	mov	r3, r4
 8011552:	469a      	mov	sl, r3
 8011554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011558:	b10a      	cbz	r2, 801155e <_vfiprintf_r+0xa2>
 801155a:	2a25      	cmp	r2, #37	; 0x25
 801155c:	d1f9      	bne.n	8011552 <_vfiprintf_r+0x96>
 801155e:	ebba 0b04 	subs.w	fp, sl, r4
 8011562:	d00b      	beq.n	801157c <_vfiprintf_r+0xc0>
 8011564:	465b      	mov	r3, fp
 8011566:	4622      	mov	r2, r4
 8011568:	4629      	mov	r1, r5
 801156a:	4630      	mov	r0, r6
 801156c:	f7ff ff93 	bl	8011496 <__sfputs_r>
 8011570:	3001      	adds	r0, #1
 8011572:	f000 80aa 	beq.w	80116ca <_vfiprintf_r+0x20e>
 8011576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011578:	445a      	add	r2, fp
 801157a:	9209      	str	r2, [sp, #36]	; 0x24
 801157c:	f89a 3000 	ldrb.w	r3, [sl]
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 80a2 	beq.w	80116ca <_vfiprintf_r+0x20e>
 8011586:	2300      	movs	r3, #0
 8011588:	f04f 32ff 	mov.w	r2, #4294967295
 801158c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011590:	f10a 0a01 	add.w	sl, sl, #1
 8011594:	9304      	str	r3, [sp, #16]
 8011596:	9307      	str	r3, [sp, #28]
 8011598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801159c:	931a      	str	r3, [sp, #104]	; 0x68
 801159e:	4654      	mov	r4, sl
 80115a0:	2205      	movs	r2, #5
 80115a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115a6:	4858      	ldr	r0, [pc, #352]	; (8011708 <_vfiprintf_r+0x24c>)
 80115a8:	f7ee fe42 	bl	8000230 <memchr>
 80115ac:	9a04      	ldr	r2, [sp, #16]
 80115ae:	b9d8      	cbnz	r0, 80115e8 <_vfiprintf_r+0x12c>
 80115b0:	06d1      	lsls	r1, r2, #27
 80115b2:	bf44      	itt	mi
 80115b4:	2320      	movmi	r3, #32
 80115b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115ba:	0713      	lsls	r3, r2, #28
 80115bc:	bf44      	itt	mi
 80115be:	232b      	movmi	r3, #43	; 0x2b
 80115c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115c4:	f89a 3000 	ldrb.w	r3, [sl]
 80115c8:	2b2a      	cmp	r3, #42	; 0x2a
 80115ca:	d015      	beq.n	80115f8 <_vfiprintf_r+0x13c>
 80115cc:	9a07      	ldr	r2, [sp, #28]
 80115ce:	4654      	mov	r4, sl
 80115d0:	2000      	movs	r0, #0
 80115d2:	f04f 0c0a 	mov.w	ip, #10
 80115d6:	4621      	mov	r1, r4
 80115d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115dc:	3b30      	subs	r3, #48	; 0x30
 80115de:	2b09      	cmp	r3, #9
 80115e0:	d94e      	bls.n	8011680 <_vfiprintf_r+0x1c4>
 80115e2:	b1b0      	cbz	r0, 8011612 <_vfiprintf_r+0x156>
 80115e4:	9207      	str	r2, [sp, #28]
 80115e6:	e014      	b.n	8011612 <_vfiprintf_r+0x156>
 80115e8:	eba0 0308 	sub.w	r3, r0, r8
 80115ec:	fa09 f303 	lsl.w	r3, r9, r3
 80115f0:	4313      	orrs	r3, r2
 80115f2:	9304      	str	r3, [sp, #16]
 80115f4:	46a2      	mov	sl, r4
 80115f6:	e7d2      	b.n	801159e <_vfiprintf_r+0xe2>
 80115f8:	9b03      	ldr	r3, [sp, #12]
 80115fa:	1d19      	adds	r1, r3, #4
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	9103      	str	r1, [sp, #12]
 8011600:	2b00      	cmp	r3, #0
 8011602:	bfbb      	ittet	lt
 8011604:	425b      	neglt	r3, r3
 8011606:	f042 0202 	orrlt.w	r2, r2, #2
 801160a:	9307      	strge	r3, [sp, #28]
 801160c:	9307      	strlt	r3, [sp, #28]
 801160e:	bfb8      	it	lt
 8011610:	9204      	strlt	r2, [sp, #16]
 8011612:	7823      	ldrb	r3, [r4, #0]
 8011614:	2b2e      	cmp	r3, #46	; 0x2e
 8011616:	d10c      	bne.n	8011632 <_vfiprintf_r+0x176>
 8011618:	7863      	ldrb	r3, [r4, #1]
 801161a:	2b2a      	cmp	r3, #42	; 0x2a
 801161c:	d135      	bne.n	801168a <_vfiprintf_r+0x1ce>
 801161e:	9b03      	ldr	r3, [sp, #12]
 8011620:	1d1a      	adds	r2, r3, #4
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	9203      	str	r2, [sp, #12]
 8011626:	2b00      	cmp	r3, #0
 8011628:	bfb8      	it	lt
 801162a:	f04f 33ff 	movlt.w	r3, #4294967295
 801162e:	3402      	adds	r4, #2
 8011630:	9305      	str	r3, [sp, #20]
 8011632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011718 <_vfiprintf_r+0x25c>
 8011636:	7821      	ldrb	r1, [r4, #0]
 8011638:	2203      	movs	r2, #3
 801163a:	4650      	mov	r0, sl
 801163c:	f7ee fdf8 	bl	8000230 <memchr>
 8011640:	b140      	cbz	r0, 8011654 <_vfiprintf_r+0x198>
 8011642:	2340      	movs	r3, #64	; 0x40
 8011644:	eba0 000a 	sub.w	r0, r0, sl
 8011648:	fa03 f000 	lsl.w	r0, r3, r0
 801164c:	9b04      	ldr	r3, [sp, #16]
 801164e:	4303      	orrs	r3, r0
 8011650:	3401      	adds	r4, #1
 8011652:	9304      	str	r3, [sp, #16]
 8011654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011658:	482c      	ldr	r0, [pc, #176]	; (801170c <_vfiprintf_r+0x250>)
 801165a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801165e:	2206      	movs	r2, #6
 8011660:	f7ee fde6 	bl	8000230 <memchr>
 8011664:	2800      	cmp	r0, #0
 8011666:	d03f      	beq.n	80116e8 <_vfiprintf_r+0x22c>
 8011668:	4b29      	ldr	r3, [pc, #164]	; (8011710 <_vfiprintf_r+0x254>)
 801166a:	bb1b      	cbnz	r3, 80116b4 <_vfiprintf_r+0x1f8>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	3307      	adds	r3, #7
 8011670:	f023 0307 	bic.w	r3, r3, #7
 8011674:	3308      	adds	r3, #8
 8011676:	9303      	str	r3, [sp, #12]
 8011678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801167a:	443b      	add	r3, r7
 801167c:	9309      	str	r3, [sp, #36]	; 0x24
 801167e:	e767      	b.n	8011550 <_vfiprintf_r+0x94>
 8011680:	fb0c 3202 	mla	r2, ip, r2, r3
 8011684:	460c      	mov	r4, r1
 8011686:	2001      	movs	r0, #1
 8011688:	e7a5      	b.n	80115d6 <_vfiprintf_r+0x11a>
 801168a:	2300      	movs	r3, #0
 801168c:	3401      	adds	r4, #1
 801168e:	9305      	str	r3, [sp, #20]
 8011690:	4619      	mov	r1, r3
 8011692:	f04f 0c0a 	mov.w	ip, #10
 8011696:	4620      	mov	r0, r4
 8011698:	f810 2b01 	ldrb.w	r2, [r0], #1
 801169c:	3a30      	subs	r2, #48	; 0x30
 801169e:	2a09      	cmp	r2, #9
 80116a0:	d903      	bls.n	80116aa <_vfiprintf_r+0x1ee>
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d0c5      	beq.n	8011632 <_vfiprintf_r+0x176>
 80116a6:	9105      	str	r1, [sp, #20]
 80116a8:	e7c3      	b.n	8011632 <_vfiprintf_r+0x176>
 80116aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80116ae:	4604      	mov	r4, r0
 80116b0:	2301      	movs	r3, #1
 80116b2:	e7f0      	b.n	8011696 <_vfiprintf_r+0x1da>
 80116b4:	ab03      	add	r3, sp, #12
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	462a      	mov	r2, r5
 80116ba:	4b16      	ldr	r3, [pc, #88]	; (8011714 <_vfiprintf_r+0x258>)
 80116bc:	a904      	add	r1, sp, #16
 80116be:	4630      	mov	r0, r6
 80116c0:	f7fc f962 	bl	800d988 <_printf_float>
 80116c4:	4607      	mov	r7, r0
 80116c6:	1c78      	adds	r0, r7, #1
 80116c8:	d1d6      	bne.n	8011678 <_vfiprintf_r+0x1bc>
 80116ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116cc:	07d9      	lsls	r1, r3, #31
 80116ce:	d405      	bmi.n	80116dc <_vfiprintf_r+0x220>
 80116d0:	89ab      	ldrh	r3, [r5, #12]
 80116d2:	059a      	lsls	r2, r3, #22
 80116d4:	d402      	bmi.n	80116dc <_vfiprintf_r+0x220>
 80116d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116d8:	f7ff f8d2 	bl	8010880 <__retarget_lock_release_recursive>
 80116dc:	89ab      	ldrh	r3, [r5, #12]
 80116de:	065b      	lsls	r3, r3, #25
 80116e0:	f53f af12 	bmi.w	8011508 <_vfiprintf_r+0x4c>
 80116e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116e6:	e711      	b.n	801150c <_vfiprintf_r+0x50>
 80116e8:	ab03      	add	r3, sp, #12
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	462a      	mov	r2, r5
 80116ee:	4b09      	ldr	r3, [pc, #36]	; (8011714 <_vfiprintf_r+0x258>)
 80116f0:	a904      	add	r1, sp, #16
 80116f2:	4630      	mov	r0, r6
 80116f4:	f7fc fbec 	bl	800ded0 <_printf_i>
 80116f8:	e7e4      	b.n	80116c4 <_vfiprintf_r+0x208>
 80116fa:	bf00      	nop
 80116fc:	080133c0 	.word	0x080133c0
 8011700:	080133e0 	.word	0x080133e0
 8011704:	080133a0 	.word	0x080133a0
 8011708:	080135dc 	.word	0x080135dc
 801170c:	080135e6 	.word	0x080135e6
 8011710:	0800d989 	.word	0x0800d989
 8011714:	08011497 	.word	0x08011497
 8011718:	080135e2 	.word	0x080135e2
 801171c:	00000000 	.word	0x00000000

08011720 <nan>:
 8011720:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011728 <nan+0x8>
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	00000000 	.word	0x00000000
 801172c:	7ff80000 	.word	0x7ff80000

08011730 <_sbrk_r>:
 8011730:	b538      	push	{r3, r4, r5, lr}
 8011732:	4d06      	ldr	r5, [pc, #24]	; (801174c <_sbrk_r+0x1c>)
 8011734:	2300      	movs	r3, #0
 8011736:	4604      	mov	r4, r0
 8011738:	4608      	mov	r0, r1
 801173a:	602b      	str	r3, [r5, #0]
 801173c:	f7f4 f802 	bl	8005744 <_sbrk>
 8011740:	1c43      	adds	r3, r0, #1
 8011742:	d102      	bne.n	801174a <_sbrk_r+0x1a>
 8011744:	682b      	ldr	r3, [r5, #0]
 8011746:	b103      	cbz	r3, 801174a <_sbrk_r+0x1a>
 8011748:	6023      	str	r3, [r4, #0]
 801174a:	bd38      	pop	{r3, r4, r5, pc}
 801174c:	20009594 	.word	0x20009594

08011750 <__sread>:
 8011750:	b510      	push	{r4, lr}
 8011752:	460c      	mov	r4, r1
 8011754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011758:	f000 f8ee 	bl	8011938 <_read_r>
 801175c:	2800      	cmp	r0, #0
 801175e:	bfab      	itete	ge
 8011760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011762:	89a3      	ldrhlt	r3, [r4, #12]
 8011764:	181b      	addge	r3, r3, r0
 8011766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801176a:	bfac      	ite	ge
 801176c:	6563      	strge	r3, [r4, #84]	; 0x54
 801176e:	81a3      	strhlt	r3, [r4, #12]
 8011770:	bd10      	pop	{r4, pc}

08011772 <__swrite>:
 8011772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011776:	461f      	mov	r7, r3
 8011778:	898b      	ldrh	r3, [r1, #12]
 801177a:	05db      	lsls	r3, r3, #23
 801177c:	4605      	mov	r5, r0
 801177e:	460c      	mov	r4, r1
 8011780:	4616      	mov	r6, r2
 8011782:	d505      	bpl.n	8011790 <__swrite+0x1e>
 8011784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011788:	2302      	movs	r3, #2
 801178a:	2200      	movs	r2, #0
 801178c:	f000 f8b6 	bl	80118fc <_lseek_r>
 8011790:	89a3      	ldrh	r3, [r4, #12]
 8011792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801179a:	81a3      	strh	r3, [r4, #12]
 801179c:	4632      	mov	r2, r6
 801179e:	463b      	mov	r3, r7
 80117a0:	4628      	mov	r0, r5
 80117a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117a6:	f000 b835 	b.w	8011814 <_write_r>

080117aa <__sseek>:
 80117aa:	b510      	push	{r4, lr}
 80117ac:	460c      	mov	r4, r1
 80117ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b2:	f000 f8a3 	bl	80118fc <_lseek_r>
 80117b6:	1c43      	adds	r3, r0, #1
 80117b8:	89a3      	ldrh	r3, [r4, #12]
 80117ba:	bf15      	itete	ne
 80117bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80117be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117c6:	81a3      	strheq	r3, [r4, #12]
 80117c8:	bf18      	it	ne
 80117ca:	81a3      	strhne	r3, [r4, #12]
 80117cc:	bd10      	pop	{r4, pc}

080117ce <__sclose>:
 80117ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117d2:	f000 b84f 	b.w	8011874 <_close_r>

080117d6 <strncmp>:
 80117d6:	b510      	push	{r4, lr}
 80117d8:	b16a      	cbz	r2, 80117f6 <strncmp+0x20>
 80117da:	3901      	subs	r1, #1
 80117dc:	1884      	adds	r4, r0, r2
 80117de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80117e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80117e6:	4293      	cmp	r3, r2
 80117e8:	d103      	bne.n	80117f2 <strncmp+0x1c>
 80117ea:	42a0      	cmp	r0, r4
 80117ec:	d001      	beq.n	80117f2 <strncmp+0x1c>
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1f5      	bne.n	80117de <strncmp+0x8>
 80117f2:	1a98      	subs	r0, r3, r2
 80117f4:	bd10      	pop	{r4, pc}
 80117f6:	4610      	mov	r0, r2
 80117f8:	e7fc      	b.n	80117f4 <strncmp+0x1e>

080117fa <__ascii_wctomb>:
 80117fa:	b149      	cbz	r1, 8011810 <__ascii_wctomb+0x16>
 80117fc:	2aff      	cmp	r2, #255	; 0xff
 80117fe:	bf85      	ittet	hi
 8011800:	238a      	movhi	r3, #138	; 0x8a
 8011802:	6003      	strhi	r3, [r0, #0]
 8011804:	700a      	strbls	r2, [r1, #0]
 8011806:	f04f 30ff 	movhi.w	r0, #4294967295
 801180a:	bf98      	it	ls
 801180c:	2001      	movls	r0, #1
 801180e:	4770      	bx	lr
 8011810:	4608      	mov	r0, r1
 8011812:	4770      	bx	lr

08011814 <_write_r>:
 8011814:	b538      	push	{r3, r4, r5, lr}
 8011816:	4d07      	ldr	r5, [pc, #28]	; (8011834 <_write_r+0x20>)
 8011818:	4604      	mov	r4, r0
 801181a:	4608      	mov	r0, r1
 801181c:	4611      	mov	r1, r2
 801181e:	2200      	movs	r2, #0
 8011820:	602a      	str	r2, [r5, #0]
 8011822:	461a      	mov	r2, r3
 8011824:	f7f3 ff3d 	bl	80056a2 <_write>
 8011828:	1c43      	adds	r3, r0, #1
 801182a:	d102      	bne.n	8011832 <_write_r+0x1e>
 801182c:	682b      	ldr	r3, [r5, #0]
 801182e:	b103      	cbz	r3, 8011832 <_write_r+0x1e>
 8011830:	6023      	str	r3, [r4, #0]
 8011832:	bd38      	pop	{r3, r4, r5, pc}
 8011834:	20009594 	.word	0x20009594

08011838 <__assert_func>:
 8011838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801183a:	4614      	mov	r4, r2
 801183c:	461a      	mov	r2, r3
 801183e:	4b09      	ldr	r3, [pc, #36]	; (8011864 <__assert_func+0x2c>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4605      	mov	r5, r0
 8011844:	68d8      	ldr	r0, [r3, #12]
 8011846:	b14c      	cbz	r4, 801185c <__assert_func+0x24>
 8011848:	4b07      	ldr	r3, [pc, #28]	; (8011868 <__assert_func+0x30>)
 801184a:	9100      	str	r1, [sp, #0]
 801184c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011850:	4906      	ldr	r1, [pc, #24]	; (801186c <__assert_func+0x34>)
 8011852:	462b      	mov	r3, r5
 8011854:	f000 f81e 	bl	8011894 <fiprintf>
 8011858:	f000 f880 	bl	801195c <abort>
 801185c:	4b04      	ldr	r3, [pc, #16]	; (8011870 <__assert_func+0x38>)
 801185e:	461c      	mov	r4, r3
 8011860:	e7f3      	b.n	801184a <__assert_func+0x12>
 8011862:	bf00      	nop
 8011864:	2000002c 	.word	0x2000002c
 8011868:	080135ed 	.word	0x080135ed
 801186c:	080135fa 	.word	0x080135fa
 8011870:	08013628 	.word	0x08013628

08011874 <_close_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4d06      	ldr	r5, [pc, #24]	; (8011890 <_close_r+0x1c>)
 8011878:	2300      	movs	r3, #0
 801187a:	4604      	mov	r4, r0
 801187c:	4608      	mov	r0, r1
 801187e:	602b      	str	r3, [r5, #0]
 8011880:	f7f3 ff2b 	bl	80056da <_close>
 8011884:	1c43      	adds	r3, r0, #1
 8011886:	d102      	bne.n	801188e <_close_r+0x1a>
 8011888:	682b      	ldr	r3, [r5, #0]
 801188a:	b103      	cbz	r3, 801188e <_close_r+0x1a>
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	bd38      	pop	{r3, r4, r5, pc}
 8011890:	20009594 	.word	0x20009594

08011894 <fiprintf>:
 8011894:	b40e      	push	{r1, r2, r3}
 8011896:	b503      	push	{r0, r1, lr}
 8011898:	4601      	mov	r1, r0
 801189a:	ab03      	add	r3, sp, #12
 801189c:	4805      	ldr	r0, [pc, #20]	; (80118b4 <fiprintf+0x20>)
 801189e:	f853 2b04 	ldr.w	r2, [r3], #4
 80118a2:	6800      	ldr	r0, [r0, #0]
 80118a4:	9301      	str	r3, [sp, #4]
 80118a6:	f7ff fe09 	bl	80114bc <_vfiprintf_r>
 80118aa:	b002      	add	sp, #8
 80118ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80118b0:	b003      	add	sp, #12
 80118b2:	4770      	bx	lr
 80118b4:	2000002c 	.word	0x2000002c

080118b8 <_fstat_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4d07      	ldr	r5, [pc, #28]	; (80118d8 <_fstat_r+0x20>)
 80118bc:	2300      	movs	r3, #0
 80118be:	4604      	mov	r4, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	4611      	mov	r1, r2
 80118c4:	602b      	str	r3, [r5, #0]
 80118c6:	f7f3 ff14 	bl	80056f2 <_fstat>
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	d102      	bne.n	80118d4 <_fstat_r+0x1c>
 80118ce:	682b      	ldr	r3, [r5, #0]
 80118d0:	b103      	cbz	r3, 80118d4 <_fstat_r+0x1c>
 80118d2:	6023      	str	r3, [r4, #0]
 80118d4:	bd38      	pop	{r3, r4, r5, pc}
 80118d6:	bf00      	nop
 80118d8:	20009594 	.word	0x20009594

080118dc <_isatty_r>:
 80118dc:	b538      	push	{r3, r4, r5, lr}
 80118de:	4d06      	ldr	r5, [pc, #24]	; (80118f8 <_isatty_r+0x1c>)
 80118e0:	2300      	movs	r3, #0
 80118e2:	4604      	mov	r4, r0
 80118e4:	4608      	mov	r0, r1
 80118e6:	602b      	str	r3, [r5, #0]
 80118e8:	f7f3 ff13 	bl	8005712 <_isatty>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d102      	bne.n	80118f6 <_isatty_r+0x1a>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	b103      	cbz	r3, 80118f6 <_isatty_r+0x1a>
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	bd38      	pop	{r3, r4, r5, pc}
 80118f8:	20009594 	.word	0x20009594

080118fc <_lseek_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4d07      	ldr	r5, [pc, #28]	; (801191c <_lseek_r+0x20>)
 8011900:	4604      	mov	r4, r0
 8011902:	4608      	mov	r0, r1
 8011904:	4611      	mov	r1, r2
 8011906:	2200      	movs	r2, #0
 8011908:	602a      	str	r2, [r5, #0]
 801190a:	461a      	mov	r2, r3
 801190c:	f7f3 ff0c 	bl	8005728 <_lseek>
 8011910:	1c43      	adds	r3, r0, #1
 8011912:	d102      	bne.n	801191a <_lseek_r+0x1e>
 8011914:	682b      	ldr	r3, [r5, #0]
 8011916:	b103      	cbz	r3, 801191a <_lseek_r+0x1e>
 8011918:	6023      	str	r3, [r4, #0]
 801191a:	bd38      	pop	{r3, r4, r5, pc}
 801191c:	20009594 	.word	0x20009594

08011920 <__malloc_lock>:
 8011920:	4801      	ldr	r0, [pc, #4]	; (8011928 <__malloc_lock+0x8>)
 8011922:	f7fe bfac 	b.w	801087e <__retarget_lock_acquire_recursive>
 8011926:	bf00      	nop
 8011928:	2000958c 	.word	0x2000958c

0801192c <__malloc_unlock>:
 801192c:	4801      	ldr	r0, [pc, #4]	; (8011934 <__malloc_unlock+0x8>)
 801192e:	f7fe bfa7 	b.w	8010880 <__retarget_lock_release_recursive>
 8011932:	bf00      	nop
 8011934:	2000958c 	.word	0x2000958c

08011938 <_read_r>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4d07      	ldr	r5, [pc, #28]	; (8011958 <_read_r+0x20>)
 801193c:	4604      	mov	r4, r0
 801193e:	4608      	mov	r0, r1
 8011940:	4611      	mov	r1, r2
 8011942:	2200      	movs	r2, #0
 8011944:	602a      	str	r2, [r5, #0]
 8011946:	461a      	mov	r2, r3
 8011948:	f7f3 fe8e 	bl	8005668 <_read>
 801194c:	1c43      	adds	r3, r0, #1
 801194e:	d102      	bne.n	8011956 <_read_r+0x1e>
 8011950:	682b      	ldr	r3, [r5, #0]
 8011952:	b103      	cbz	r3, 8011956 <_read_r+0x1e>
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	bd38      	pop	{r3, r4, r5, pc}
 8011958:	20009594 	.word	0x20009594

0801195c <abort>:
 801195c:	b508      	push	{r3, lr}
 801195e:	2006      	movs	r0, #6
 8011960:	f000 f82c 	bl	80119bc <raise>
 8011964:	2001      	movs	r0, #1
 8011966:	f7f3 fe75 	bl	8005654 <_exit>

0801196a <_raise_r>:
 801196a:	291f      	cmp	r1, #31
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	4604      	mov	r4, r0
 8011970:	460d      	mov	r5, r1
 8011972:	d904      	bls.n	801197e <_raise_r+0x14>
 8011974:	2316      	movs	r3, #22
 8011976:	6003      	str	r3, [r0, #0]
 8011978:	f04f 30ff 	mov.w	r0, #4294967295
 801197c:	bd38      	pop	{r3, r4, r5, pc}
 801197e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011980:	b112      	cbz	r2, 8011988 <_raise_r+0x1e>
 8011982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011986:	b94b      	cbnz	r3, 801199c <_raise_r+0x32>
 8011988:	4620      	mov	r0, r4
 801198a:	f000 f831 	bl	80119f0 <_getpid_r>
 801198e:	462a      	mov	r2, r5
 8011990:	4601      	mov	r1, r0
 8011992:	4620      	mov	r0, r4
 8011994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011998:	f000 b818 	b.w	80119cc <_kill_r>
 801199c:	2b01      	cmp	r3, #1
 801199e:	d00a      	beq.n	80119b6 <_raise_r+0x4c>
 80119a0:	1c59      	adds	r1, r3, #1
 80119a2:	d103      	bne.n	80119ac <_raise_r+0x42>
 80119a4:	2316      	movs	r3, #22
 80119a6:	6003      	str	r3, [r0, #0]
 80119a8:	2001      	movs	r0, #1
 80119aa:	e7e7      	b.n	801197c <_raise_r+0x12>
 80119ac:	2400      	movs	r4, #0
 80119ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119b2:	4628      	mov	r0, r5
 80119b4:	4798      	blx	r3
 80119b6:	2000      	movs	r0, #0
 80119b8:	e7e0      	b.n	801197c <_raise_r+0x12>
	...

080119bc <raise>:
 80119bc:	4b02      	ldr	r3, [pc, #8]	; (80119c8 <raise+0xc>)
 80119be:	4601      	mov	r1, r0
 80119c0:	6818      	ldr	r0, [r3, #0]
 80119c2:	f7ff bfd2 	b.w	801196a <_raise_r>
 80119c6:	bf00      	nop
 80119c8:	2000002c 	.word	0x2000002c

080119cc <_kill_r>:
 80119cc:	b538      	push	{r3, r4, r5, lr}
 80119ce:	4d07      	ldr	r5, [pc, #28]	; (80119ec <_kill_r+0x20>)
 80119d0:	2300      	movs	r3, #0
 80119d2:	4604      	mov	r4, r0
 80119d4:	4608      	mov	r0, r1
 80119d6:	4611      	mov	r1, r2
 80119d8:	602b      	str	r3, [r5, #0]
 80119da:	f7f3 fe2b 	bl	8005634 <_kill>
 80119de:	1c43      	adds	r3, r0, #1
 80119e0:	d102      	bne.n	80119e8 <_kill_r+0x1c>
 80119e2:	682b      	ldr	r3, [r5, #0]
 80119e4:	b103      	cbz	r3, 80119e8 <_kill_r+0x1c>
 80119e6:	6023      	str	r3, [r4, #0]
 80119e8:	bd38      	pop	{r3, r4, r5, pc}
 80119ea:	bf00      	nop
 80119ec:	20009594 	.word	0x20009594

080119f0 <_getpid_r>:
 80119f0:	f7f3 be18 	b.w	8005624 <_getpid>

080119f4 <round>:
 80119f4:	ec51 0b10 	vmov	r0, r1, d0
 80119f8:	b570      	push	{r4, r5, r6, lr}
 80119fa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80119fe:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011a02:	2c13      	cmp	r4, #19
 8011a04:	ee10 2a10 	vmov	r2, s0
 8011a08:	460b      	mov	r3, r1
 8011a0a:	dc19      	bgt.n	8011a40 <round+0x4c>
 8011a0c:	2c00      	cmp	r4, #0
 8011a0e:	da09      	bge.n	8011a24 <round+0x30>
 8011a10:	3401      	adds	r4, #1
 8011a12:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011a16:	d103      	bne.n	8011a20 <round+0x2c>
 8011a18:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011a1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011a20:	2100      	movs	r1, #0
 8011a22:	e028      	b.n	8011a76 <round+0x82>
 8011a24:	4d15      	ldr	r5, [pc, #84]	; (8011a7c <round+0x88>)
 8011a26:	4125      	asrs	r5, r4
 8011a28:	ea01 0605 	and.w	r6, r1, r5
 8011a2c:	4332      	orrs	r2, r6
 8011a2e:	d00e      	beq.n	8011a4e <round+0x5a>
 8011a30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011a34:	fa42 f404 	asr.w	r4, r2, r4
 8011a38:	4423      	add	r3, r4
 8011a3a:	ea23 0305 	bic.w	r3, r3, r5
 8011a3e:	e7ef      	b.n	8011a20 <round+0x2c>
 8011a40:	2c33      	cmp	r4, #51	; 0x33
 8011a42:	dd07      	ble.n	8011a54 <round+0x60>
 8011a44:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011a48:	d101      	bne.n	8011a4e <round+0x5a>
 8011a4a:	f7ee fc47 	bl	80002dc <__adddf3>
 8011a4e:	ec41 0b10 	vmov	d0, r0, r1
 8011a52:	bd70      	pop	{r4, r5, r6, pc}
 8011a54:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011a58:	f04f 35ff 	mov.w	r5, #4294967295
 8011a5c:	40f5      	lsrs	r5, r6
 8011a5e:	4228      	tst	r0, r5
 8011a60:	d0f5      	beq.n	8011a4e <round+0x5a>
 8011a62:	2101      	movs	r1, #1
 8011a64:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011a68:	fa01 f404 	lsl.w	r4, r1, r4
 8011a6c:	1912      	adds	r2, r2, r4
 8011a6e:	bf28      	it	cs
 8011a70:	185b      	addcs	r3, r3, r1
 8011a72:	ea22 0105 	bic.w	r1, r2, r5
 8011a76:	4608      	mov	r0, r1
 8011a78:	4619      	mov	r1, r3
 8011a7a:	e7e8      	b.n	8011a4e <round+0x5a>
 8011a7c:	000fffff 	.word	0x000fffff

08011a80 <fmaxf>:
 8011a80:	b508      	push	{r3, lr}
 8011a82:	ed2d 8b02 	vpush	{d8}
 8011a86:	eeb0 8a40 	vmov.f32	s16, s0
 8011a8a:	eef0 8a60 	vmov.f32	s17, s1
 8011a8e:	f000 f82d 	bl	8011aec <__fpclassifyf>
 8011a92:	b148      	cbz	r0, 8011aa8 <fmaxf+0x28>
 8011a94:	eeb0 0a68 	vmov.f32	s0, s17
 8011a98:	f000 f828 	bl	8011aec <__fpclassifyf>
 8011a9c:	b130      	cbz	r0, 8011aac <fmaxf+0x2c>
 8011a9e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa6:	dc01      	bgt.n	8011aac <fmaxf+0x2c>
 8011aa8:	eeb0 8a68 	vmov.f32	s16, s17
 8011aac:	eeb0 0a48 	vmov.f32	s0, s16
 8011ab0:	ecbd 8b02 	vpop	{d8}
 8011ab4:	bd08      	pop	{r3, pc}

08011ab6 <fminf>:
 8011ab6:	b508      	push	{r3, lr}
 8011ab8:	ed2d 8b02 	vpush	{d8}
 8011abc:	eeb0 8a40 	vmov.f32	s16, s0
 8011ac0:	eef0 8a60 	vmov.f32	s17, s1
 8011ac4:	f000 f812 	bl	8011aec <__fpclassifyf>
 8011ac8:	b148      	cbz	r0, 8011ade <fminf+0x28>
 8011aca:	eeb0 0a68 	vmov.f32	s0, s17
 8011ace:	f000 f80d 	bl	8011aec <__fpclassifyf>
 8011ad2:	b130      	cbz	r0, 8011ae2 <fminf+0x2c>
 8011ad4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011adc:	d401      	bmi.n	8011ae2 <fminf+0x2c>
 8011ade:	eeb0 8a68 	vmov.f32	s16, s17
 8011ae2:	eeb0 0a48 	vmov.f32	s0, s16
 8011ae6:	ecbd 8b02 	vpop	{d8}
 8011aea:	bd08      	pop	{r3, pc}

08011aec <__fpclassifyf>:
 8011aec:	ee10 3a10 	vmov	r3, s0
 8011af0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011af4:	d00d      	beq.n	8011b12 <__fpclassifyf+0x26>
 8011af6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011afa:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011afe:	d30a      	bcc.n	8011b16 <__fpclassifyf+0x2a>
 8011b00:	4b07      	ldr	r3, [pc, #28]	; (8011b20 <__fpclassifyf+0x34>)
 8011b02:	1e42      	subs	r2, r0, #1
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d908      	bls.n	8011b1a <__fpclassifyf+0x2e>
 8011b08:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011b0c:	4258      	negs	r0, r3
 8011b0e:	4158      	adcs	r0, r3
 8011b10:	4770      	bx	lr
 8011b12:	2002      	movs	r0, #2
 8011b14:	4770      	bx	lr
 8011b16:	2004      	movs	r0, #4
 8011b18:	4770      	bx	lr
 8011b1a:	2003      	movs	r0, #3
 8011b1c:	4770      	bx	lr
 8011b1e:	bf00      	nop
 8011b20:	007ffffe 	.word	0x007ffffe
 8011b24:	00000000 	.word	0x00000000

08011b28 <exp>:
 8011b28:	b538      	push	{r3, r4, r5, lr}
 8011b2a:	ed2d 8b02 	vpush	{d8}
 8011b2e:	ec55 4b10 	vmov	r4, r5, d0
 8011b32:	f000 f899 	bl	8011c68 <__ieee754_exp>
 8011b36:	4b22      	ldr	r3, [pc, #136]	; (8011bc0 <exp+0x98>)
 8011b38:	eeb0 8a40 	vmov.f32	s16, s0
 8011b3c:	eef0 8a60 	vmov.f32	s17, s1
 8011b40:	f993 3000 	ldrsb.w	r3, [r3]
 8011b44:	3301      	adds	r3, #1
 8011b46:	d012      	beq.n	8011b6e <exp+0x46>
 8011b48:	ec45 4b10 	vmov	d0, r4, r5
 8011b4c:	f000 fa8b 	bl	8012066 <finite>
 8011b50:	b168      	cbz	r0, 8011b6e <exp+0x46>
 8011b52:	a313      	add	r3, pc, #76	; (adr r3, 8011ba0 <exp+0x78>)
 8011b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b58:	4620      	mov	r0, r4
 8011b5a:	4629      	mov	r1, r5
 8011b5c:	f7ef f804 	bl	8000b68 <__aeabi_dcmpgt>
 8011b60:	b160      	cbz	r0, 8011b7c <exp+0x54>
 8011b62:	f7fb fe31 	bl	800d7c8 <__errno>
 8011b66:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011ba8 <exp+0x80>
 8011b6a:	2322      	movs	r3, #34	; 0x22
 8011b6c:	6003      	str	r3, [r0, #0]
 8011b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8011b72:	eef0 0a68 	vmov.f32	s1, s17
 8011b76:	ecbd 8b02 	vpop	{d8}
 8011b7a:	bd38      	pop	{r3, r4, r5, pc}
 8011b7c:	a30c      	add	r3, pc, #48	; (adr r3, 8011bb0 <exp+0x88>)
 8011b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b82:	4620      	mov	r0, r4
 8011b84:	4629      	mov	r1, r5
 8011b86:	f7ee ffd1 	bl	8000b2c <__aeabi_dcmplt>
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d0ef      	beq.n	8011b6e <exp+0x46>
 8011b8e:	f7fb fe1b 	bl	800d7c8 <__errno>
 8011b92:	2322      	movs	r3, #34	; 0x22
 8011b94:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8011bb8 <exp+0x90>
 8011b98:	6003      	str	r3, [r0, #0]
 8011b9a:	e7e8      	b.n	8011b6e <exp+0x46>
 8011b9c:	f3af 8000 	nop.w
 8011ba0:	fefa39ef 	.word	0xfefa39ef
 8011ba4:	40862e42 	.word	0x40862e42
 8011ba8:	00000000 	.word	0x00000000
 8011bac:	7ff00000 	.word	0x7ff00000
 8011bb0:	d52d3051 	.word	0xd52d3051
 8011bb4:	c0874910 	.word	0xc0874910
	...
 8011bc0:	20000200 	.word	0x20000200

08011bc4 <fmodf>:
 8011bc4:	b508      	push	{r3, lr}
 8011bc6:	ed2d 8b02 	vpush	{d8}
 8011bca:	eef0 8a40 	vmov.f32	s17, s0
 8011bce:	eeb0 8a60 	vmov.f32	s16, s1
 8011bd2:	f000 f9c3 	bl	8011f5c <__ieee754_fmodf>
 8011bd6:	4b0f      	ldr	r3, [pc, #60]	; (8011c14 <fmodf+0x50>)
 8011bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	d016      	beq.n	8011c0e <fmodf+0x4a>
 8011be0:	eeb4 8a48 	vcmp.f32	s16, s16
 8011be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be8:	d611      	bvs.n	8011c0e <fmodf+0x4a>
 8011bea:	eef4 8a68 	vcmp.f32	s17, s17
 8011bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf2:	d60c      	bvs.n	8011c0e <fmodf+0x4a>
 8011bf4:	eddf 8a08 	vldr	s17, [pc, #32]	; 8011c18 <fmodf+0x54>
 8011bf8:	eeb4 8a68 	vcmp.f32	s16, s17
 8011bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c00:	d105      	bne.n	8011c0e <fmodf+0x4a>
 8011c02:	f7fb fde1 	bl	800d7c8 <__errno>
 8011c06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011c0a:	2321      	movs	r3, #33	; 0x21
 8011c0c:	6003      	str	r3, [r0, #0]
 8011c0e:	ecbd 8b02 	vpop	{d8}
 8011c12:	bd08      	pop	{r3, pc}
 8011c14:	20000200 	.word	0x20000200
 8011c18:	00000000 	.word	0x00000000

08011c1c <sqrtf>:
 8011c1c:	b508      	push	{r3, lr}
 8011c1e:	ed2d 8b02 	vpush	{d8}
 8011c22:	eeb0 8a40 	vmov.f32	s16, s0
 8011c26:	f000 fa1b 	bl	8012060 <__ieee754_sqrtf>
 8011c2a:	4b0d      	ldr	r3, [pc, #52]	; (8011c60 <sqrtf+0x44>)
 8011c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8011c30:	3301      	adds	r3, #1
 8011c32:	d011      	beq.n	8011c58 <sqrtf+0x3c>
 8011c34:	eeb4 8a48 	vcmp.f32	s16, s16
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3c:	d60c      	bvs.n	8011c58 <sqrtf+0x3c>
 8011c3e:	eddf 8a09 	vldr	s17, [pc, #36]	; 8011c64 <sqrtf+0x48>
 8011c42:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4a:	d505      	bpl.n	8011c58 <sqrtf+0x3c>
 8011c4c:	f7fb fdbc 	bl	800d7c8 <__errno>
 8011c50:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011c54:	2321      	movs	r3, #33	; 0x21
 8011c56:	6003      	str	r3, [r0, #0]
 8011c58:	ecbd 8b02 	vpop	{d8}
 8011c5c:	bd08      	pop	{r3, pc}
 8011c5e:	bf00      	nop
 8011c60:	20000200 	.word	0x20000200
 8011c64:	00000000 	.word	0x00000000

08011c68 <__ieee754_exp>:
 8011c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c6c:	ec55 4b10 	vmov	r4, r5, d0
 8011c70:	49b1      	ldr	r1, [pc, #708]	; (8011f38 <__ieee754_exp+0x2d0>)
 8011c72:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011c76:	428b      	cmp	r3, r1
 8011c78:	ed2d 8b04 	vpush	{d8-d9}
 8011c7c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011c80:	d937      	bls.n	8011cf2 <__ieee754_exp+0x8a>
 8011c82:	49ae      	ldr	r1, [pc, #696]	; (8011f3c <__ieee754_exp+0x2d4>)
 8011c84:	428b      	cmp	r3, r1
 8011c86:	d916      	bls.n	8011cb6 <__ieee754_exp+0x4e>
 8011c88:	ee10 3a10 	vmov	r3, s0
 8011c8c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8011c90:	4313      	orrs	r3, r2
 8011c92:	d009      	beq.n	8011ca8 <__ieee754_exp+0x40>
 8011c94:	ee10 2a10 	vmov	r2, s0
 8011c98:	462b      	mov	r3, r5
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	f7ee fb1d 	bl	80002dc <__adddf3>
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	460d      	mov	r5, r1
 8011ca6:	e000      	b.n	8011caa <__ieee754_exp+0x42>
 8011ca8:	bb06      	cbnz	r6, 8011cec <__ieee754_exp+0x84>
 8011caa:	ecbd 8b04 	vpop	{d8-d9}
 8011cae:	ec45 4b10 	vmov	d0, r4, r5
 8011cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cb6:	a38a      	add	r3, pc, #552	; (adr r3, 8011ee0 <__ieee754_exp+0x278>)
 8011cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbc:	ee10 0a10 	vmov	r0, s0
 8011cc0:	4629      	mov	r1, r5
 8011cc2:	f7ee ff51 	bl	8000b68 <__aeabi_dcmpgt>
 8011cc6:	b138      	cbz	r0, 8011cd8 <__ieee754_exp+0x70>
 8011cc8:	a387      	add	r3, pc, #540	; (adr r3, 8011ee8 <__ieee754_exp+0x280>)
 8011cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cce:	4610      	mov	r0, r2
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	f7ee fcb9 	bl	8000648 <__aeabi_dmul>
 8011cd6:	e7e4      	b.n	8011ca2 <__ieee754_exp+0x3a>
 8011cd8:	a385      	add	r3, pc, #532	; (adr r3, 8011ef0 <__ieee754_exp+0x288>)
 8011cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cde:	4620      	mov	r0, r4
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	f7ee ff23 	bl	8000b2c <__aeabi_dcmplt>
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	f000 8087 	beq.w	8011dfa <__ieee754_exp+0x192>
 8011cec:	2400      	movs	r4, #0
 8011cee:	2500      	movs	r5, #0
 8011cf0:	e7db      	b.n	8011caa <__ieee754_exp+0x42>
 8011cf2:	4a93      	ldr	r2, [pc, #588]	; (8011f40 <__ieee754_exp+0x2d8>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	f240 80ac 	bls.w	8011e52 <__ieee754_exp+0x1ea>
 8011cfa:	4a92      	ldr	r2, [pc, #584]	; (8011f44 <__ieee754_exp+0x2dc>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d87c      	bhi.n	8011dfa <__ieee754_exp+0x192>
 8011d00:	4b91      	ldr	r3, [pc, #580]	; (8011f48 <__ieee754_exp+0x2e0>)
 8011d02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0a:	ee10 0a10 	vmov	r0, s0
 8011d0e:	4629      	mov	r1, r5
 8011d10:	f7ee fae2 	bl	80002d8 <__aeabi_dsub>
 8011d14:	4b8d      	ldr	r3, [pc, #564]	; (8011f4c <__ieee754_exp+0x2e4>)
 8011d16:	00f7      	lsls	r7, r6, #3
 8011d18:	443b      	add	r3, r7
 8011d1a:	ed93 7b00 	vldr	d7, [r3]
 8011d1e:	f1c6 0a01 	rsb	sl, r6, #1
 8011d22:	4680      	mov	r8, r0
 8011d24:	4689      	mov	r9, r1
 8011d26:	ebaa 0a06 	sub.w	sl, sl, r6
 8011d2a:	eeb0 8a47 	vmov.f32	s16, s14
 8011d2e:	eef0 8a67 	vmov.f32	s17, s15
 8011d32:	ec53 2b18 	vmov	r2, r3, d8
 8011d36:	4640      	mov	r0, r8
 8011d38:	4649      	mov	r1, r9
 8011d3a:	f7ee facd 	bl	80002d8 <__aeabi_dsub>
 8011d3e:	4604      	mov	r4, r0
 8011d40:	460d      	mov	r5, r1
 8011d42:	4622      	mov	r2, r4
 8011d44:	462b      	mov	r3, r5
 8011d46:	4620      	mov	r0, r4
 8011d48:	4629      	mov	r1, r5
 8011d4a:	f7ee fc7d 	bl	8000648 <__aeabi_dmul>
 8011d4e:	a36a      	add	r3, pc, #424	; (adr r3, 8011ef8 <__ieee754_exp+0x290>)
 8011d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d54:	4606      	mov	r6, r0
 8011d56:	460f      	mov	r7, r1
 8011d58:	f7ee fc76 	bl	8000648 <__aeabi_dmul>
 8011d5c:	a368      	add	r3, pc, #416	; (adr r3, 8011f00 <__ieee754_exp+0x298>)
 8011d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d62:	f7ee fab9 	bl	80002d8 <__aeabi_dsub>
 8011d66:	4632      	mov	r2, r6
 8011d68:	463b      	mov	r3, r7
 8011d6a:	f7ee fc6d 	bl	8000648 <__aeabi_dmul>
 8011d6e:	a366      	add	r3, pc, #408	; (adr r3, 8011f08 <__ieee754_exp+0x2a0>)
 8011d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d74:	f7ee fab2 	bl	80002dc <__adddf3>
 8011d78:	4632      	mov	r2, r6
 8011d7a:	463b      	mov	r3, r7
 8011d7c:	f7ee fc64 	bl	8000648 <__aeabi_dmul>
 8011d80:	a363      	add	r3, pc, #396	; (adr r3, 8011f10 <__ieee754_exp+0x2a8>)
 8011d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d86:	f7ee faa7 	bl	80002d8 <__aeabi_dsub>
 8011d8a:	4632      	mov	r2, r6
 8011d8c:	463b      	mov	r3, r7
 8011d8e:	f7ee fc5b 	bl	8000648 <__aeabi_dmul>
 8011d92:	a361      	add	r3, pc, #388	; (adr r3, 8011f18 <__ieee754_exp+0x2b0>)
 8011d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d98:	f7ee faa0 	bl	80002dc <__adddf3>
 8011d9c:	4632      	mov	r2, r6
 8011d9e:	463b      	mov	r3, r7
 8011da0:	f7ee fc52 	bl	8000648 <__aeabi_dmul>
 8011da4:	4602      	mov	r2, r0
 8011da6:	460b      	mov	r3, r1
 8011da8:	4620      	mov	r0, r4
 8011daa:	4629      	mov	r1, r5
 8011dac:	f7ee fa94 	bl	80002d8 <__aeabi_dsub>
 8011db0:	4602      	mov	r2, r0
 8011db2:	460b      	mov	r3, r1
 8011db4:	4606      	mov	r6, r0
 8011db6:	460f      	mov	r7, r1
 8011db8:	4620      	mov	r0, r4
 8011dba:	4629      	mov	r1, r5
 8011dbc:	f7ee fc44 	bl	8000648 <__aeabi_dmul>
 8011dc0:	ec41 0b19 	vmov	d9, r0, r1
 8011dc4:	f1ba 0f00 	cmp.w	sl, #0
 8011dc8:	d15d      	bne.n	8011e86 <__ieee754_exp+0x21e>
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	4639      	mov	r1, r7
 8011dd4:	f7ee fa80 	bl	80002d8 <__aeabi_dsub>
 8011dd8:	4602      	mov	r2, r0
 8011dda:	460b      	mov	r3, r1
 8011ddc:	ec51 0b19 	vmov	r0, r1, d9
 8011de0:	f7ee fd5c 	bl	800089c <__aeabi_ddiv>
 8011de4:	4622      	mov	r2, r4
 8011de6:	462b      	mov	r3, r5
 8011de8:	f7ee fa76 	bl	80002d8 <__aeabi_dsub>
 8011dec:	4602      	mov	r2, r0
 8011dee:	460b      	mov	r3, r1
 8011df0:	2000      	movs	r0, #0
 8011df2:	4957      	ldr	r1, [pc, #348]	; (8011f50 <__ieee754_exp+0x2e8>)
 8011df4:	f7ee fa70 	bl	80002d8 <__aeabi_dsub>
 8011df8:	e753      	b.n	8011ca2 <__ieee754_exp+0x3a>
 8011dfa:	4856      	ldr	r0, [pc, #344]	; (8011f54 <__ieee754_exp+0x2ec>)
 8011dfc:	a348      	add	r3, pc, #288	; (adr r3, 8011f20 <__ieee754_exp+0x2b8>)
 8011dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e02:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011e06:	4629      	mov	r1, r5
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f7ee fc1d 	bl	8000648 <__aeabi_dmul>
 8011e0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e12:	f7ee fa63 	bl	80002dc <__adddf3>
 8011e16:	f7ee fec7 	bl	8000ba8 <__aeabi_d2iz>
 8011e1a:	4682      	mov	sl, r0
 8011e1c:	f7ee fbaa 	bl	8000574 <__aeabi_i2d>
 8011e20:	a341      	add	r3, pc, #260	; (adr r3, 8011f28 <__ieee754_exp+0x2c0>)
 8011e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e26:	4606      	mov	r6, r0
 8011e28:	460f      	mov	r7, r1
 8011e2a:	f7ee fc0d 	bl	8000648 <__aeabi_dmul>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	460b      	mov	r3, r1
 8011e32:	4620      	mov	r0, r4
 8011e34:	4629      	mov	r1, r5
 8011e36:	f7ee fa4f 	bl	80002d8 <__aeabi_dsub>
 8011e3a:	a33d      	add	r3, pc, #244	; (adr r3, 8011f30 <__ieee754_exp+0x2c8>)
 8011e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e40:	4680      	mov	r8, r0
 8011e42:	4689      	mov	r9, r1
 8011e44:	4630      	mov	r0, r6
 8011e46:	4639      	mov	r1, r7
 8011e48:	f7ee fbfe 	bl	8000648 <__aeabi_dmul>
 8011e4c:	ec41 0b18 	vmov	d8, r0, r1
 8011e50:	e76f      	b.n	8011d32 <__ieee754_exp+0xca>
 8011e52:	4a41      	ldr	r2, [pc, #260]	; (8011f58 <__ieee754_exp+0x2f0>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d811      	bhi.n	8011e7c <__ieee754_exp+0x214>
 8011e58:	a323      	add	r3, pc, #140	; (adr r3, 8011ee8 <__ieee754_exp+0x280>)
 8011e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5e:	ee10 0a10 	vmov	r0, s0
 8011e62:	4629      	mov	r1, r5
 8011e64:	f7ee fa3a 	bl	80002dc <__adddf3>
 8011e68:	4b39      	ldr	r3, [pc, #228]	; (8011f50 <__ieee754_exp+0x2e8>)
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f7ee fe7c 	bl	8000b68 <__aeabi_dcmpgt>
 8011e70:	b138      	cbz	r0, 8011e82 <__ieee754_exp+0x21a>
 8011e72:	4b37      	ldr	r3, [pc, #220]	; (8011f50 <__ieee754_exp+0x2e8>)
 8011e74:	2200      	movs	r2, #0
 8011e76:	4620      	mov	r0, r4
 8011e78:	4629      	mov	r1, r5
 8011e7a:	e710      	b.n	8011c9e <__ieee754_exp+0x36>
 8011e7c:	f04f 0a00 	mov.w	sl, #0
 8011e80:	e75f      	b.n	8011d42 <__ieee754_exp+0xda>
 8011e82:	4682      	mov	sl, r0
 8011e84:	e75d      	b.n	8011d42 <__ieee754_exp+0xda>
 8011e86:	4632      	mov	r2, r6
 8011e88:	463b      	mov	r3, r7
 8011e8a:	2000      	movs	r0, #0
 8011e8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8011e90:	f7ee fa22 	bl	80002d8 <__aeabi_dsub>
 8011e94:	4602      	mov	r2, r0
 8011e96:	460b      	mov	r3, r1
 8011e98:	ec51 0b19 	vmov	r0, r1, d9
 8011e9c:	f7ee fcfe 	bl	800089c <__aeabi_ddiv>
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	460b      	mov	r3, r1
 8011ea4:	ec51 0b18 	vmov	r0, r1, d8
 8011ea8:	f7ee fa16 	bl	80002d8 <__aeabi_dsub>
 8011eac:	4642      	mov	r2, r8
 8011eae:	464b      	mov	r3, r9
 8011eb0:	f7ee fa12 	bl	80002d8 <__aeabi_dsub>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	2000      	movs	r0, #0
 8011eba:	4925      	ldr	r1, [pc, #148]	; (8011f50 <__ieee754_exp+0x2e8>)
 8011ebc:	f7ee fa0c 	bl	80002d8 <__aeabi_dsub>
 8011ec0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8011ec4:	4592      	cmp	sl, r2
 8011ec6:	db02      	blt.n	8011ece <__ieee754_exp+0x266>
 8011ec8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011ecc:	e6e9      	b.n	8011ca2 <__ieee754_exp+0x3a>
 8011ece:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8011ed2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8011edc:	e6f9      	b.n	8011cd2 <__ieee754_exp+0x6a>
 8011ede:	bf00      	nop
 8011ee0:	fefa39ef 	.word	0xfefa39ef
 8011ee4:	40862e42 	.word	0x40862e42
 8011ee8:	8800759c 	.word	0x8800759c
 8011eec:	7e37e43c 	.word	0x7e37e43c
 8011ef0:	d52d3051 	.word	0xd52d3051
 8011ef4:	c0874910 	.word	0xc0874910
 8011ef8:	72bea4d0 	.word	0x72bea4d0
 8011efc:	3e663769 	.word	0x3e663769
 8011f00:	c5d26bf1 	.word	0xc5d26bf1
 8011f04:	3ebbbd41 	.word	0x3ebbbd41
 8011f08:	af25de2c 	.word	0xaf25de2c
 8011f0c:	3f11566a 	.word	0x3f11566a
 8011f10:	16bebd93 	.word	0x16bebd93
 8011f14:	3f66c16c 	.word	0x3f66c16c
 8011f18:	5555553e 	.word	0x5555553e
 8011f1c:	3fc55555 	.word	0x3fc55555
 8011f20:	652b82fe 	.word	0x652b82fe
 8011f24:	3ff71547 	.word	0x3ff71547
 8011f28:	fee00000 	.word	0xfee00000
 8011f2c:	3fe62e42 	.word	0x3fe62e42
 8011f30:	35793c76 	.word	0x35793c76
 8011f34:	3dea39ef 	.word	0x3dea39ef
 8011f38:	40862e41 	.word	0x40862e41
 8011f3c:	7fefffff 	.word	0x7fefffff
 8011f40:	3fd62e42 	.word	0x3fd62e42
 8011f44:	3ff0a2b1 	.word	0x3ff0a2b1
 8011f48:	08013640 	.word	0x08013640
 8011f4c:	08013650 	.word	0x08013650
 8011f50:	3ff00000 	.word	0x3ff00000
 8011f54:	08013630 	.word	0x08013630
 8011f58:	3e2fffff 	.word	0x3e2fffff

08011f5c <__ieee754_fmodf>:
 8011f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f5e:	ee10 6a90 	vmov	r6, s1
 8011f62:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8011f66:	d009      	beq.n	8011f7c <__ieee754_fmodf+0x20>
 8011f68:	ee10 2a10 	vmov	r2, s0
 8011f6c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011f70:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011f74:	da02      	bge.n	8011f7c <__ieee754_fmodf+0x20>
 8011f76:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011f7a:	dd04      	ble.n	8011f86 <__ieee754_fmodf+0x2a>
 8011f7c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011f80:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f86:	42ab      	cmp	r3, r5
 8011f88:	dbfc      	blt.n	8011f84 <__ieee754_fmodf+0x28>
 8011f8a:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8011f8e:	d106      	bne.n	8011f9e <__ieee754_fmodf+0x42>
 8011f90:	4a32      	ldr	r2, [pc, #200]	; (801205c <__ieee754_fmodf+0x100>)
 8011f92:	0fe3      	lsrs	r3, r4, #31
 8011f94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f98:	ed93 0a00 	vldr	s0, [r3]
 8011f9c:	e7f2      	b.n	8011f84 <__ieee754_fmodf+0x28>
 8011f9e:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8011fa2:	d13f      	bne.n	8012024 <__ieee754_fmodf+0xc8>
 8011fa4:	0219      	lsls	r1, r3, #8
 8011fa6:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011faa:	2900      	cmp	r1, #0
 8011fac:	dc37      	bgt.n	801201e <__ieee754_fmodf+0xc2>
 8011fae:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8011fb2:	d13d      	bne.n	8012030 <__ieee754_fmodf+0xd4>
 8011fb4:	022f      	lsls	r7, r5, #8
 8011fb6:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8011fba:	2f00      	cmp	r7, #0
 8011fbc:	da35      	bge.n	801202a <__ieee754_fmodf+0xce>
 8011fbe:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8011fc2:	bfbb      	ittet	lt
 8011fc4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011fc8:	1a12      	sublt	r2, r2, r0
 8011fca:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8011fce:	4093      	lsllt	r3, r2
 8011fd0:	bfa8      	it	ge
 8011fd2:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8011fd6:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011fda:	bfb5      	itete	lt
 8011fdc:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8011fe0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8011fe4:	1a52      	sublt	r2, r2, r1
 8011fe6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8011fea:	bfb8      	it	lt
 8011fec:	4095      	lsllt	r5, r2
 8011fee:	1a40      	subs	r0, r0, r1
 8011ff0:	1b5a      	subs	r2, r3, r5
 8011ff2:	bb00      	cbnz	r0, 8012036 <__ieee754_fmodf+0xda>
 8011ff4:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8011ff8:	bf38      	it	cc
 8011ffa:	4613      	movcc	r3, r2
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d0c7      	beq.n	8011f90 <__ieee754_fmodf+0x34>
 8012000:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012004:	db1f      	blt.n	8012046 <__ieee754_fmodf+0xea>
 8012006:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801200a:	db1f      	blt.n	801204c <__ieee754_fmodf+0xf0>
 801200c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012010:	317f      	adds	r1, #127	; 0x7f
 8012012:	4323      	orrs	r3, r4
 8012014:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8012018:	ee00 3a10 	vmov	s0, r3
 801201c:	e7b2      	b.n	8011f84 <__ieee754_fmodf+0x28>
 801201e:	3801      	subs	r0, #1
 8012020:	0049      	lsls	r1, r1, #1
 8012022:	e7c2      	b.n	8011faa <__ieee754_fmodf+0x4e>
 8012024:	15d8      	asrs	r0, r3, #23
 8012026:	387f      	subs	r0, #127	; 0x7f
 8012028:	e7c1      	b.n	8011fae <__ieee754_fmodf+0x52>
 801202a:	3901      	subs	r1, #1
 801202c:	007f      	lsls	r7, r7, #1
 801202e:	e7c4      	b.n	8011fba <__ieee754_fmodf+0x5e>
 8012030:	15e9      	asrs	r1, r5, #23
 8012032:	397f      	subs	r1, #127	; 0x7f
 8012034:	e7c3      	b.n	8011fbe <__ieee754_fmodf+0x62>
 8012036:	2a00      	cmp	r2, #0
 8012038:	da02      	bge.n	8012040 <__ieee754_fmodf+0xe4>
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	3801      	subs	r0, #1
 801203e:	e7d7      	b.n	8011ff0 <__ieee754_fmodf+0x94>
 8012040:	d0a6      	beq.n	8011f90 <__ieee754_fmodf+0x34>
 8012042:	0053      	lsls	r3, r2, #1
 8012044:	e7fa      	b.n	801203c <__ieee754_fmodf+0xe0>
 8012046:	005b      	lsls	r3, r3, #1
 8012048:	3901      	subs	r1, #1
 801204a:	e7d9      	b.n	8012000 <__ieee754_fmodf+0xa4>
 801204c:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8012050:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8012054:	3182      	adds	r1, #130	; 0x82
 8012056:	410b      	asrs	r3, r1
 8012058:	4323      	orrs	r3, r4
 801205a:	e7dd      	b.n	8012018 <__ieee754_fmodf+0xbc>
 801205c:	08013660 	.word	0x08013660

08012060 <__ieee754_sqrtf>:
 8012060:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012064:	4770      	bx	lr

08012066 <finite>:
 8012066:	b082      	sub	sp, #8
 8012068:	ed8d 0b00 	vstr	d0, [sp]
 801206c:	9801      	ldr	r0, [sp, #4]
 801206e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012072:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012076:	0fc0      	lsrs	r0, r0, #31
 8012078:	b002      	add	sp, #8
 801207a:	4770      	bx	lr

0801207c <_init>:
 801207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207e:	bf00      	nop
 8012080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012082:	bc08      	pop	{r3}
 8012084:	469e      	mov	lr, r3
 8012086:	4770      	bx	lr

08012088 <_fini>:
 8012088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208a:	bf00      	nop
 801208c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801208e:	bc08      	pop	{r3}
 8012090:	469e      	mov	lr, r3
 8012092:	4770      	bx	lr
