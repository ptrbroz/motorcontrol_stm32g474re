
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb8  08005bb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc0  08005bc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000000c  08005bd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005bd4  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ed8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002854  00000000  00000000  00038f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0003b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  0003cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281bf  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ba0  00000000  00000000  0006677f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112aa7  00000000  00000000  0007e31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190dc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  00190e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b60 	.word	0x08005b60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005b60 	.word	0x08005b60

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fd6d 	bl	8000ff2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f80f 	bl	800053a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fac0 	bl	8000aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000520:	f000 f868 	bl	80005f4 <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8000524:	f000 f8de 	bl	80006e4 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8000528:	f000 f920 	bl	800076c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800052c:	f000 fa6c 	bl	8000a08 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000530:	f000 f95a 	bl	80007e8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000534:	f000 f996 	bl	8000864 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x28>

0800053a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b0a8      	sub	sp, #160	; 0xa0
 800053e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000540:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000544:	2238      	movs	r2, #56	; 0x38
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f005 fb01 	bl	8005b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055e:	463b      	mov	r3, r7
 8000560:	2254      	movs	r2, #84	; 0x54
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f005 faf3 	bl	8005b50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f002 fafb 	bl	8002b68 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2340      	movs	r3, #64	; 0x40
 800057e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fba0 	bl	8002cd0 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000596:	f000 faf1 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059e:	2301      	movs	r3, #1
 80005a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fea3 	bl	8003300 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005c0:	f000 fadc 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80005c4:	f249 0302 	movw	r3, #36866	; 0x9002
 80005c8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80005ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80005d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f8ab 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005e8:	f000 fac8 	bl	8000b7c <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	37a0      	adds	r7, #160	; 0xa0
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2220      	movs	r2, #32
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f005 fa9f 	bl	8005b50 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800061a:	4b30      	ldr	r3, [pc, #192]	; (80006dc <MX_ADC1_Init+0xe8>)
 800061c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000620:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_ADC1_Init+0xe8>)
 800063c:	2204      	movs	r2, #4
 800063e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_ADC1_Init+0xe8>)
 800064e:	2201      	movs	r2, #1
 8000650:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <MX_ADC1_Init+0xe8>)
 800067e:	f000 feff 	bl	8001480 <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000688:	f000 fa78 	bl	8000b7c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000698:	f001 fd1a 	bl	80020d0 <HAL_ADCEx_MultiModeConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006a2:	f000 fa6b 	bl	8000b7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_ADC1_Init+0xec>)
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006aa:	2306      	movs	r3, #6
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b2:	237f      	movs	r3, #127	; 0x7f
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b6:	2304      	movs	r3, #4
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0xe8>)
 80006c4:	f001 f89e 	bl	8001804 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fa55 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3730      	adds	r7, #48	; 0x30
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	19200040 	.word	0x19200040

080006e4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_FDCAN2_Init+0x80>)
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <MX_FDCAN2_Init+0x84>)
 80006ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_FDCAN2_Init+0x80>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_FDCAN2_Init+0x80>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_FDCAN2_Init+0x80>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000702:	2200      	movs	r2, #0
 8000704:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000708:	2200      	movs	r2, #0
 800070a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_FDCAN2_Init+0x80>)
 800070e:	2201      	movs	r2, #1
 8000710:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000714:	2201      	movs	r2, #1
 8000716:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_FDCAN2_Init+0x80>)
 800071a:	2202      	movs	r2, #2
 800071c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000720:	2202      	movs	r2, #2
 8000722:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000726:	2201      	movs	r2, #1
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_FDCAN2_Init+0x80>)
 800072c:	2201      	movs	r2, #1
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000732:	2201      	movs	r2, #1
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000738:	2201      	movs	r2, #1
 800073a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_FDCAN2_Init+0x80>)
 800073e:	2200      	movs	r2, #0
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000744:	2200      	movs	r2, #0
 8000746:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_FDCAN2_Init+0x80>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_FDCAN2_Init+0x80>)
 8000750:	f001 feaa 	bl	80024a8 <HAL_FDCAN_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 800075a:	f000 fa0f 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000238 	.word	0x20000238
 8000768:	40006800 	.word	0x40006800

0800076c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_SPI1_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_SPI1_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_SPI1_Init+0x74>)
 8000778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_SPI1_Init+0x74>)
 8000786:	f44f 7240 	mov.w	r2, #768	; 0x300
 800078a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_SPI1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_SPI1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_SPI1_Init+0x74>)
 800079a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007ba:	2207      	movs	r2, #7
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007c6:	2208      	movs	r2, #8
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_SPI1_Init+0x74>)
 80007cc:	f003 fa00 	bl	8003bd0 <HAL_SPI_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f9d1 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000144 	.word	0x20000144
 80007e4:	40013000 	.word	0x40013000

080007e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_SPI3_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_SPI3_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_SPI3_Init+0x74>)
 80007f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_SPI3_Init+0x74>)
 8000802:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000806:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_SPI3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI3_Init+0x74>)
 8000816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI3_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI3_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_SPI3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI3_Init+0x74>)
 8000836:	2207      	movs	r2, #7
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_SPI3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI3_Init+0x74>)
 8000842:	2208      	movs	r2, #8
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_SPI3_Init+0x74>)
 8000848:	f003 f9c2 	bl	8003bd0 <HAL_SPI_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 f993 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000028 	.word	0x20000028
 8000860:	40003c00 	.word	0x40003c00

08000864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09c      	sub	sp, #112	; 0x70
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2234      	movs	r2, #52	; 0x34
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 f956 	bl	8005b50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008a6:	4a57      	ldr	r2, [pc, #348]	; (8000a04 <MX_TIM1_Init+0x1a0>)
 80008a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008aa:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b6:	4b52      	ldr	r3, [pc, #328]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008be:	4b50      	ldr	r3, [pc, #320]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008d0:	484b      	ldr	r0, [pc, #300]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008d2:	f003 fa28 	bl	8003d26 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f94e 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008ea:	4619      	mov	r1, r3
 80008ec:	4844      	ldr	r0, [pc, #272]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008ee:	f003 fcb9 	bl	8004264 <HAL_TIM_ConfigClockSource>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008f8:	f000 f940 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008fc:	4840      	ldr	r0, [pc, #256]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80008fe:	f003 faca 	bl	8003e96 <HAL_TIM_PWM_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000908:	f000 f938 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800090c:	483c      	ldr	r0, [pc, #240]	; (8000a00 <MX_TIM1_Init+0x19c>)
 800090e:	f003 fa61 	bl	8003dd4 <HAL_TIM_OC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000918:	f000 f930 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800092c:	4619      	mov	r1, r3
 800092e:	4834      	ldr	r0, [pc, #208]	; (8000a00 <MX_TIM1_Init+0x19c>)
 8000930:	f004 fa18 	bl	8004d64 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800093a:	f000 f91f 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093e:	2360      	movs	r3, #96	; 0x60
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	4827      	ldr	r0, [pc, #156]	; (8000a00 <MX_TIM1_Init+0x19c>)
 8000964:	f003 fb6e 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800096e:	f000 f905 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000972:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000976:	2204      	movs	r2, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_TIM1_Init+0x19c>)
 800097c:	f003 fb62 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000986:	f000 f8f9 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000992:	2208      	movs	r2, #8
 8000994:	4619      	mov	r1, r3
 8000996:	481a      	ldr	r0, [pc, #104]	; (8000a00 <MX_TIM1_Init+0x19c>)
 8000998:	f003 fade 	bl	8003f58 <HAL_TIM_OC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009a2:	f000 f8eb 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4807      	ldr	r0, [pc, #28]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80009e4:	f004 fa54 	bl	8004e90 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 80009ee:	f000 f8c5 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <MX_TIM1_Init+0x19c>)
 80009f4:	f000 fa1e 	bl	8000e34 <HAL_TIM_MspPostInit>

}
 80009f8:	bf00      	nop
 80009fa:	3770      	adds	r7, #112	; 0x70
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000f8 	.word	0x200000f8
 8000a04:	40012c00 	.word	0x40012c00

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a50:	4811      	ldr	r0, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a52:	f004 facf 	bl	8004ff4 <HAL_UART_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 f88e 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a64:	f004 ff86 	bl	8005974 <HAL_UARTEx_SetTxFifoThreshold>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6e:	f000 f885 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a76:	f004 ffbb 	bl	80059f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a80:	f000 f87c 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_USART2_UART_Init+0x90>)
 8000a86:	f004 ff3c 	bl	8005902 <HAL_UARTEx_DisableFifoMode>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a90:	f000 f874 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001a8 	.word	0x200001a8
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a2e      	ldr	r2, [pc, #184]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0320 	and.w	r3, r3, #32
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210c      	movs	r1, #12
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b1c:	f002 f80c 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f002 f805 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b46:	f001 fe75 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000b4a:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f001 fe65 	bl	8002834 <HAL_GPIO_Init>

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000800 	.word	0x48000800

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bbe:	f002 f877 	bl	8002cb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bf0:	d13b      	bne.n	8000c6a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_ADC_MspInit+0xa4>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480a      	ldr	r0, [pc, #40]	; (8000c78 <HAL_ADC_MspInit+0xa8>)
 8000c4e:	f001 fdf1 	bl	8002834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c56:	2303      	movs	r3, #3
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_ADC_MspInit+0xac>)
 8000c66:	f001 fde5 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	48000400 	.word	0x48000400

08000c80 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_FDCAN_MspInit+0x7c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d127      	bne.n	8000cf2 <HAL_FDCAN_MspInit+0x72>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_FDCAN_MspInit+0x80>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_FDCAN_MspInit+0x80>)
 8000ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_FDCAN_MspInit+0x80>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_FDCAN_MspInit+0x80>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_FDCAN_MspInit+0x80>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_FDCAN_MspInit+0x80>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cd2:	2360      	movs	r3, #96	; 0x60
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000ce2:	2309      	movs	r3, #9
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_FDCAN_MspInit+0x84>)
 8000cee:	f001 fda1 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40006800 	.word	0x40006800
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400

08000d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	; 0x30
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <HAL_SPI_MspInit+0xdc>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d129      	bne.n	8000d7e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	4a2e      	ldr	r2, [pc, #184]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	6613      	str	r3, [r2, #96]	; 0x60
 8000d36:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d5a:	23e0      	movs	r3, #224	; 0xe0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f001 fd5c 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d7c:	e02d      	b.n	8000dda <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_SPI_MspInit+0xe4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d128      	bne.n	8000dda <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d92:	6593      	str	r3, [r2, #88]	; 0x58
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_SPI_MspInit+0xe0>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000db8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <HAL_SPI_MspInit+0xe8>)
 8000dd6:	f001 fd2d 	bl	8002834 <HAL_GPIO_Init>
}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	48000800 	.word	0x48000800

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x38>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10b      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e10:	6613      	str	r3, [r2, #96]	; 0x60
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40012c00 	.word	0x40012c00
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_TIM_MspPostInit+0x68>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d11d      	bne.n	8000e92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_TIM_MspPostInit+0x6c>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_TIM_MspPostInit+0x6c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_TIM_MspPostInit+0x6c>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e6e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e80:	2306      	movs	r3, #6
 8000e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f001 fcd1 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012c00 	.word	0x40012c00
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0x7c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d128      	bne.n	8000f18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_UART_MspInit+0x80>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f06:	2307      	movs	r3, #7
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fc8e 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f890 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fca:	f7ff ffd7 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f004 fd9b 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fd2:	f7ff fa9d 	bl	8000510 <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   r0, =_estack
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe4:	08005bc8 	.word	0x08005bc8
  ldr r2, =_sbss
 8000fe8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fec:	200002a0 	.word	0x200002a0

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>

08000ff2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f001 fa21 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f80e 	bl	8001024 <HAL_InitTick>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e001      	b.n	8001018 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001014:	f7ff fdb8 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001018:	79fb      	ldrb	r3, [r7, #7]

}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_InitTick+0x68>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d022      	beq.n	800107e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_InitTick+0x6c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_InitTick+0x68>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001044:	fbb1 f3f3 	udiv	r3, r1, r3
 8001048:	fbb2 f3f3 	udiv	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fa1e 	bl	800248e <HAL_SYSTICK_Config>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10f      	bne.n	8001078 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	d809      	bhi.n	8001072 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105e:	2200      	movs	r2, #0
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	f001 f9f8 	bl	800245a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_InitTick+0x70>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e007      	b.n	8001082 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e004      	b.n	8001082 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000008 	.word	0x20000008
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x1c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x20>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <HAL_IncTick+0x1c>)
 80010a8:	6013      	str	r3, [r2, #0]
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	2000029c 	.word	0x2000029c
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000029c 	.word	0x2000029c

080010d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3360      	adds	r3, #96	; 0x60
 800114e:	461a      	mov	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <LL_ADC_SetOffset+0x44>)
 800115e:	4013      	ands	r3, r2
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	4313      	orrs	r3, r2
 800116c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	03fff000 	.word	0x03fff000

08001184 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3360      	adds	r3, #96	; 0x60
 8001192:	461a      	mov	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3360      	adds	r3, #96	; 0x60
 80011c0:	461a      	mov	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	431a      	orrs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011da:	bf00      	nop
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3360      	adds	r3, #96	; 0x60
 80011f6:	461a      	mov	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	431a      	orrs	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3360      	adds	r3, #96	; 0x60
 800122c:	461a      	mov	r2, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	431a      	orrs	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001246:	bf00      	nop
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	615a      	str	r2, [r3, #20]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3330      	adds	r3, #48	; 0x30
 8001288:	461a      	mov	r2, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	4413      	add	r3, r2
 8001296:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	211f      	movs	r1, #31
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	0e9b      	lsrs	r3, r3, #26
 80012b0:	f003 011f 	and.w	r1, r3, #31
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3314      	adds	r3, #20
 80012e0:	461a      	mov	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0e5b      	lsrs	r3, r3, #25
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	4413      	add	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	0d1b      	lsrs	r3, r3, #20
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	2107      	movs	r1, #7
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	401a      	ands	r2, r3
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	0d1b      	lsrs	r3, r3, #20
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0318 	and.w	r3, r3, #24
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <LL_ADC_SetChannelSingleDiff+0x44>)
 800134c:	40d9      	lsrs	r1, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	400b      	ands	r3, r1
 8001352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001356:	431a      	orrs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	0007ffff 	.word	0x0007ffff

08001370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001380:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6093      	str	r3, [r2, #8]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013a8:	d101      	bne.n	80013ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013f8:	d101      	bne.n	80013fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <LL_ADC_IsEnabled+0x18>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <LL_ADC_IsEnabled+0x1a>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b04      	cmp	r3, #4
 8001444:	d101      	bne.n	800144a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b08      	cmp	r3, #8
 800146a:	d101      	bne.n	8001470 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1af      	b.n	80017fa <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d109      	bne.n	80014bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fb91 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff67 	bl	8001394 <LL_ADC_IsDeepPowerDownEnabled>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff4d 	bl	8001370 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff82 	bl	80013e4 <LL_ADC_IsInternalRegulatorEnabled>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d115      	bne.n	8001512 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff66 	bl	80013bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014f0:	4b9f      	ldr	r3, [pc, #636]	; (8001770 <HAL_ADC_Init+0x2f0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	4a9f      	ldr	r2, [pc, #636]	; (8001774 <HAL_ADC_Init+0x2f4>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	3301      	adds	r3, #1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001504:	e002      	b.n	800150c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3b01      	subs	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f9      	bne.n	8001506 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff64 	bl	80013e4 <LL_ADC_IsInternalRegulatorEnabled>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	f043 0210 	orr.w	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff75 	bl	8001432 <LL_ADC_REG_IsConversionOngoing>
 8001548:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 8148 	bne.w	80017e8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 8144 	bne.w	80017e8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001568:	f043 0202 	orr.w	r2, r3, #2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff49 	bl	800140c <LL_ADC_IsEnabled>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d141      	bne.n	8001604 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001588:	d004      	beq.n	8001594 <HAL_ADC_Init+0x114>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_ADC_Init+0x2f8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d10f      	bne.n	80015b4 <HAL_ADC_Init+0x134>
 8001594:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001598:	f7ff ff38 	bl	800140c <LL_ADC_IsEnabled>
 800159c:	4604      	mov	r4, r0
 800159e:	4876      	ldr	r0, [pc, #472]	; (8001778 <HAL_ADC_Init+0x2f8>)
 80015a0:	f7ff ff34 	bl	800140c <LL_ADC_IsEnabled>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4323      	orrs	r3, r4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	e012      	b.n	80015da <HAL_ADC_Init+0x15a>
 80015b4:	4871      	ldr	r0, [pc, #452]	; (800177c <HAL_ADC_Init+0x2fc>)
 80015b6:	f7ff ff29 	bl	800140c <LL_ADC_IsEnabled>
 80015ba:	4604      	mov	r4, r0
 80015bc:	4870      	ldr	r0, [pc, #448]	; (8001780 <HAL_ADC_Init+0x300>)
 80015be:	f7ff ff25 	bl	800140c <LL_ADC_IsEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	431c      	orrs	r4, r3
 80015c6:	486f      	ldr	r0, [pc, #444]	; (8001784 <HAL_ADC_Init+0x304>)
 80015c8:	f7ff ff20 	bl	800140c <LL_ADC_IsEnabled>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4323      	orrs	r3, r4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d012      	beq.n	8001604 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e6:	d004      	beq.n	80015f2 <HAL_ADC_Init+0x172>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a62      	ldr	r2, [pc, #392]	; (8001778 <HAL_ADC_Init+0x2f8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x176>
 80015f2:	4a65      	ldr	r2, [pc, #404]	; (8001788 <HAL_ADC_Init+0x308>)
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_Init+0x178>
 80015f6:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_ADC_Init+0x30c>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7ff fd68 	bl	80010d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7f5b      	ldrb	r3, [r3, #29]
 8001608:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800160e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001614:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800161a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001622:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162e:	2b01      	cmp	r3, #1
 8001630:	d106      	bne.n	8001640 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	3b01      	subs	r3, #1
 8001638:	045b      	lsls	r3, r3, #17
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	4b4b      	ldr	r3, [pc, #300]	; (8001790 <HAL_ADC_Init+0x310>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	430b      	orrs	r3, r1
 800166e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fed1 	bl	8001432 <LL_ADC_REG_IsConversionOngoing>
 8001690:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fede 	bl	8001458 <LL_ADC_INJ_IsConversionOngoing>
 800169c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d17f      	bne.n	80017a4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d17c      	bne.n	80017a4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016b6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016c6:	f023 0302 	bic.w	r3, r3, #2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d017      	beq.n	800170c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6911      	ldr	r1, [r2, #16]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	430b      	orrs	r3, r1
 8001706:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800170a:	e013      	b.n	8001734 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800171a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800172c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001730:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800173a:	2b01      	cmp	r3, #1
 800173c:	d12a      	bne.n	8001794 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001754:	4311      	orrs	r1, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001760:	430a      	orrs	r2, r1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	e019      	b.n	80017a4 <HAL_ADC_Init+0x324>
 8001770:	20000000 	.word	0x20000000
 8001774:	053e2d63 	.word	0x053e2d63
 8001778:	50000100 	.word	0x50000100
 800177c:	50000400 	.word	0x50000400
 8001780:	50000500 	.word	0x50000500
 8001784:	50000600 	.word	0x50000600
 8001788:	50000300 	.word	0x50000300
 800178c:	50000700 	.word	0x50000700
 8001790:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10c      	bne.n	80017c6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f023 010f 	bic.w	r1, r3, #15
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
 80017c4:	e007      	b.n	80017d6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020f 	bic.w	r2, r2, #15
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017e6:	e007      	b.n	80017f8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	f043 0210 	orr.w	r2, r3, #16
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop

08001804 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0b6      	sub	sp, #216	; 0xd8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800181e:	2b01      	cmp	r3, #1
 8001820:	d102      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x24>
 8001822:	2302      	movs	r3, #2
 8001824:	f000 bc13 	b.w	800204e <HAL_ADC_ConfigChannel+0x84a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fdfc 	bl	8001432 <LL_ADC_REG_IsConversionOngoing>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 83f3 	bne.w	8002028 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6859      	ldr	r1, [r3, #4]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f7ff fd12 	bl	8001278 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fdea 	bl	8001432 <LL_ADC_REG_IsConversionOngoing>
 800185e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fdf6 	bl	8001458 <LL_ADC_INJ_IsConversionOngoing>
 800186c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001870:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 81d9 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800187a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 81d4 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800188c:	d10f      	bne.n	80018ae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff fd19 	bl	80012d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fcd3 	bl	8001252 <LL_ADC_SetSamplingTimeCommonConfig>
 80018ac:	e00e      	b.n	80018cc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f7ff fd08 	bl	80012d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fcc3 	bl	8001252 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	08db      	lsrs	r3, r3, #3
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d022      	beq.n	8001934 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018fe:	f7ff fc1d 	bl	800113c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6919      	ldr	r1, [r3, #16]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	461a      	mov	r2, r3
 8001910:	f7ff fc69 	bl	80011e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6919      	ldr	r1, [r3, #16]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	7f1b      	ldrb	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d102      	bne.n	800192a <HAL_ADC_ConfigChannel+0x126>
 8001924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001928:	e000      	b.n	800192c <HAL_ADC_ConfigChannel+0x128>
 800192a:	2300      	movs	r3, #0
 800192c:	461a      	mov	r2, r3
 800192e:	f7ff fc75 	bl	800121c <LL_ADC_SetOffsetSaturation>
 8001932:	e17b      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fc22 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x15c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fc17 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	f003 021f 	and.w	r2, r3, #31
 800195e:	e01e      	b.n	800199e <HAL_ADC_ConfigChannel+0x19a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fc0c 	bl	8001184 <LL_ADC_GetOffsetChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800197e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e004      	b.n	800199c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001992:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x1b2>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	e018      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x1e4>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80019da:	2320      	movs	r3, #32
 80019dc:	e004      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80019de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d106      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fbdb 	bl	80011b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2101      	movs	r1, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fbbf 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x222>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fbb4 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	0e9b      	lsrs	r3, r3, #26
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	e01e      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x260>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fba9 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e004      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001a58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x278>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	e018      	b.n	8001aae <HAL_ADC_ConfigChannel+0x2aa>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	e004      	b.n	8001aae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d106      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2101      	movs	r1, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fb78 	bl	80011b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fb5c 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10a      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x2e8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2102      	movs	r1, #2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fb51 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	f003 021f 	and.w	r2, r3, #31
 8001aea:	e01e      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x326>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2102      	movs	r1, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fb46 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	e004      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x33e>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0e9b      	lsrs	r3, r3, #26
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	e016      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x36c>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001b62:	2320      	movs	r3, #32
 8001b64:	e004      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d106      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fb17 	bl	80011b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2103      	movs	r1, #3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fafb 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x3aa>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff faf0 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	e017      	b.n	8001bde <HAL_ADC_ConfigChannel+0x3da>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fae5 	bl	8001184 <LL_ADC_GetOffsetChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e003      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x3f2>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	e011      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x416>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e003      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d106      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	2103      	movs	r1, #3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fac2 	bl	80011b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fbeb 	bl	800140c <LL_ADC_IsEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 813d 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f7ff fb6c 	bl	8001328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4aa2      	ldr	r2, [pc, #648]	; (8001ee0 <HAL_ADC_ConfigChannel+0x6dc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 812e 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10b      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x480>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e019      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x4b4>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c94:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	bf94      	ite	ls
 8001cb2:	2301      	movls	r3, #1
 8001cb4:	2300      	movhi	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d079      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x4d4>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0e9b      	lsrs	r3, r3, #26
 8001cce:	3301      	adds	r3, #1
 8001cd0:	069b      	lsls	r3, r3, #26
 8001cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd6:	e015      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x500>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ce8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	e003      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	069b      	lsls	r3, r3, #26
 8001d00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x520>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0e9b      	lsrs	r3, r3, #26
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	e017      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x550>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e003      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	ea42 0103 	orr.w	r1, r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x576>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	051b      	lsls	r3, r3, #20
 8001d78:	e018      	b.n	8001dac <HAL_ADC_ConfigChannel+0x5a8>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e003      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dac:	430b      	orrs	r3, r1
 8001dae:	e07e      	b.n	8001eae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x5c8>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	069b      	lsls	r3, r3, #26
 8001dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dca:	e015      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x5f4>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	069b      	lsls	r3, r3, #26
 8001df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x614>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	e017      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x644>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	61fb      	str	r3, [r7, #28]
  return result;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x670>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	051b      	lsls	r3, r3, #20
 8001e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e72:	e01b      	b.n	8001eac <HAL_ADC_ConfigChannel+0x6a8>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	613b      	str	r3, [r7, #16]
  return result;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e003      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	051b      	lsls	r3, r3, #20
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eac:	430b      	orrs	r3, r1
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	6892      	ldr	r2, [r2, #8]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff fa0c 	bl	80012d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_ADC_ConfigChannel+0x6e0>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80be 	beq.w	8002042 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ece:	d004      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x6d6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_ADC_ConfigChannel+0x6e4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x6ec>
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_ADC_ConfigChannel+0x6e8>)
 8001edc:	e009      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x6ee>
 8001ede:	bf00      	nop
 8001ee0:	407f0000 	.word	0x407f0000
 8001ee4:	80080000 	.word	0x80080000
 8001ee8:	50000100 	.word	0x50000100
 8001eec:	50000300 	.word	0x50000300
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_ADC_ConfigChannel+0x854>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f914 	bl	8001120 <LL_ADC_GetCommonPathInternalCh>
 8001ef8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_ADC_ConfigChannel+0x858>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_ADC_ConfigChannel+0x70c>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a55      	ldr	r2, [pc, #340]	; (8002060 <HAL_ADC_ConfigChannel+0x85c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d13a      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d134      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f24:	d005      	beq.n	8001f32 <HAL_ADC_ConfigChannel+0x72e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4e      	ldr	r2, [pc, #312]	; (8002064 <HAL_ADC_ConfigChannel+0x860>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	f040 8085 	bne.w	800203c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x742>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <HAL_ADC_ConfigChannel+0x864>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x746>
 8001f46:	4a49      	ldr	r2, [pc, #292]	; (800206c <HAL_ADC_ConfigChannel+0x868>)
 8001f48:	e000      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x748>
 8001f4a:	4a43      	ldr	r2, [pc, #268]	; (8002058 <HAL_ADC_ConfigChannel+0x854>)
 8001f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f7ff f8cf 	bl	80010fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_ADC_ConfigChannel+0x86c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	4a44      	ldr	r2, [pc, #272]	; (8002074 <HAL_ADC_ConfigChannel+0x870>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f76:	e002      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f84:	e05a      	b.n	800203c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_ADC_ConfigChannel+0x874>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d125      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x7d8>
 8001f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d11f      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a31      	ldr	r2, [pc, #196]	; (8002068 <HAL_ADC_ConfigChannel+0x864>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d104      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x7ac>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a34      	ldr	r2, [pc, #208]	; (800207c <HAL_ADC_ConfigChannel+0x878>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d047      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb8:	d004      	beq.n	8001fc4 <HAL_ADC_ConfigChannel+0x7c0>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_ADC_ConfigChannel+0x864>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x7c4>
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_ADC_ConfigChannel+0x868>)
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_ConfigChannel+0x7c6>
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <HAL_ADC_ConfigChannel+0x854>)
 8001fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	f7ff f890 	bl	80010fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fda:	e031      	b.n	8002040 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_ADC_ConfigChannel+0x87c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d12d      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d127      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_ADC_ConfigChannel+0x864>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002004:	d004      	beq.n	8002010 <HAL_ADC_ConfigChannel+0x80c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_ADC_ConfigChannel+0x864>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x810>
 8002010:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_ADC_ConfigChannel+0x868>)
 8002012:	e000      	b.n	8002016 <HAL_ADC_ConfigChannel+0x812>
 8002014:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_ADC_ConfigChannel+0x854>)
 8002016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800201a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f7ff f86a 	bl	80010fa <LL_ADC_SetCommonPathInternalCh>
 8002026:	e00c      	b.n	8002042 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800203a:	e002      	b.n	8002042 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002040:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800204a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800204e:	4618      	mov	r0, r3
 8002050:	37d8      	adds	r7, #216	; 0xd8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	50000700 	.word	0x50000700
 800205c:	c3210000 	.word	0xc3210000
 8002060:	90c00010 	.word	0x90c00010
 8002064:	50000600 	.word	0x50000600
 8002068:	50000100 	.word	0x50000100
 800206c:	50000300 	.word	0x50000300
 8002070:	20000000 	.word	0x20000000
 8002074:	053e2d63 	.word	0x053e2d63
 8002078:	c7520000 	.word	0xc7520000
 800207c:	50000500 	.word	0x50000500
 8002080:	cb840000 	.word	0xcb840000

08002084 <LL_ADC_IsEnabled>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <LL_ADC_IsEnabled+0x18>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_ADC_IsEnabled+0x1a>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_ADC_REG_IsConversionOngoing>:
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d101      	bne.n	80020c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b0a1      	sub	sp, #132	; 0x84
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e0e7      	b.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80020f6:	2300      	movs	r3, #0
 80020f8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80020fa:	2300      	movs	r3, #0
 80020fc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002106:	d102      	bne.n	800210e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002108:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	e009      	b.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d102      	bne.n	800211e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002118:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	e001      	b.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10b      	bne.n	8002140 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0be      	b.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ffb1 	bl	80020aa <LL_ADC_REG_IsConversionOngoing>
 8002148:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ffab 	bl	80020aa <LL_ADC_REG_IsConversionOngoing>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 80a0 	bne.w	800229c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800215c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 809c 	bne.w	800229c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216c:	d004      	beq.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a55      	ldr	r2, [pc, #340]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002178:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800217a:	e000      	b.n	800217e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800217c:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800217e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d04b      	beq.n	8002220 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800219a:	035b      	lsls	r3, r3, #13
 800219c:	430b      	orrs	r3, r1
 800219e:	431a      	orrs	r2, r3
 80021a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ac:	d004      	beq.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a45      	ldr	r2, [pc, #276]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10f      	bne.n	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80021b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021bc:	f7ff ff62 	bl	8002084 <LL_ADC_IsEnabled>
 80021c0:	4604      	mov	r4, r0
 80021c2:	4841      	ldr	r0, [pc, #260]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021c4:	f7ff ff5e 	bl	8002084 <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4323      	orrs	r3, r4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e012      	b.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80021d8:	483c      	ldr	r0, [pc, #240]	; (80022cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80021da:	f7ff ff53 	bl	8002084 <LL_ADC_IsEnabled>
 80021de:	4604      	mov	r4, r0
 80021e0:	483b      	ldr	r0, [pc, #236]	; (80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80021e2:	f7ff ff4f 	bl	8002084 <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	431c      	orrs	r4, r3
 80021ea:	483c      	ldr	r0, [pc, #240]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80021ec:	f7ff ff4a 	bl	8002084 <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4323      	orrs	r3, r4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d056      	beq.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800220a:	f023 030f 	bic.w	r3, r3, #15
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	6811      	ldr	r1, [r2, #0]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	6892      	ldr	r2, [r2, #8]
 8002216:	430a      	orrs	r2, r1
 8002218:	431a      	orrs	r2, r3
 800221a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800221e:	e047      	b.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d004      	beq.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d10f      	bne.n	8002260 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002240:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002244:	f7ff ff1e 	bl	8002084 <LL_ADC_IsEnabled>
 8002248:	4604      	mov	r4, r0
 800224a:	481f      	ldr	r0, [pc, #124]	; (80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800224c:	f7ff ff1a 	bl	8002084 <LL_ADC_IsEnabled>
 8002250:	4603      	mov	r3, r0
 8002252:	4323      	orrs	r3, r4
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e012      	b.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002260:	481a      	ldr	r0, [pc, #104]	; (80022cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002262:	f7ff ff0f 	bl	8002084 <LL_ADC_IsEnabled>
 8002266:	4604      	mov	r4, r0
 8002268:	4819      	ldr	r0, [pc, #100]	; (80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800226a:	f7ff ff0b 	bl	8002084 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	431c      	orrs	r4, r3
 8002272:	481a      	ldr	r0, [pc, #104]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002274:	f7ff ff06 	bl	8002084 <LL_ADC_IsEnabled>
 8002278:	4603      	mov	r3, r0
 800227a:	4323      	orrs	r3, r4
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d012      	beq.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800228a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002292:	f023 030f 	bic.w	r3, r3, #15
 8002296:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002298:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800229a:	e009      	b.n	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022ae:	e000      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80022ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3784      	adds	r7, #132	; 0x84
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	50000100 	.word	0x50000100
 80022cc:	50000400 	.word	0x50000400
 80022d0:	50000500 	.word	0x50000500
 80022d4:	50000300 	.word	0x50000300
 80022d8:	50000700 	.word	0x50000700
 80022dc:	50000600 	.word	0x50000600

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff8e 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff47 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff5e 	bl	8002328 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff90 	bl	8002398 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5f 	bl	8002344 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffb2 	bl	8002400 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e147      	b.n	800274a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fbd6 	bl	8000c80 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0210 	bic.w	r2, r2, #16
 80024e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e4:	f7fe fdea 	bl	80010bc <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80024ea:	e012      	b.n	8002512 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80024ec:	f7fe fde6 	bl	80010bc <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d90b      	bls.n	8002512 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	f043 0201 	orr.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2203      	movs	r2, #3
 800250a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e11b      	b.n	800274a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b08      	cmp	r3, #8
 800251e:	d0e5      	beq.n	80024ec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002530:	f7fe fdc4 	bl	80010bc <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002536:	e012      	b.n	800255e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002538:	f7fe fdc0 	bl	80010bc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b0a      	cmp	r3, #10
 8002544:	d90b      	bls.n	800255e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2203      	movs	r2, #3
 8002556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0f5      	b.n	800274a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0e5      	beq.n	8002538 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0202 	orr.w	r2, r2, #2
 800257a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a74      	ldr	r2, [pc, #464]	; (8002754 <HAL_FDCAN_Init+0x2ac>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d103      	bne.n	800258e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002586:	4a74      	ldr	r2, [pc, #464]	; (8002758 <HAL_FDCAN_Init+0x2b0>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7c1b      	ldrb	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	e007      	b.n	80025b8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7c5b      	ldrb	r3, [r3, #17]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ce:	619a      	str	r2, [r3, #24]
 80025d0:	e007      	b.n	80025e2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7c9b      	ldrb	r3, [r3, #18]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	e007      	b.n	800260c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800260a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002630:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0210 	bic.w	r2, r2, #16
 8002640:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0204 	orr.w	r2, r2, #4
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	e02c      	b.n	80026b6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d028      	beq.n	80026b6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d01c      	beq.n	80026a6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800267a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0210 	orr.w	r2, r2, #16
 800268a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d110      	bne.n	80026b6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	e007      	b.n	80026b6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0220 	orr.w	r2, r2, #32
 80026b4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026c6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80026ce:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80026de:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80026e0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ea:	d115      	bne.n	8002718 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	3b01      	subs	r3, #1
 80026f8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80026fa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	3b01      	subs	r3, #1
 8002702:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002704:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	3b01      	subs	r3, #1
 800270e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002714:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002716:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f814 	bl	800275c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40006400 	.word	0x40006400
 8002758:	40006500 	.word	0x40006500

0800275c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002766:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2f      	ldr	r2, [pc, #188]	; (800282c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d103      	bne.n	800277a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002778:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d103      	bne.n	800278c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800278a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800279a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	041a      	lsls	r2, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	061a      	lsls	r2, r3, #24
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e005      	b.n	800280e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3304      	adds	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3f3      	bcc.n	8002802 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	4000a400 	.word	0x4000a400
 800282c:	40006800 	.word	0x40006800
 8002830:	40006c00 	.word	0x40006c00

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002842:	e15a      	b.n	8002afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 814c 	beq.w	8002af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d00b      	beq.n	800287c <HAL_GPIO_Init+0x48>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d007      	beq.n	800287c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002870:	2b11      	cmp	r3, #17
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b12      	cmp	r3, #18
 800287a:	d130      	bne.n	80028de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028b2:	2201      	movs	r2, #1
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 0201 	and.w	r2, r3, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0xea>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b12      	cmp	r3, #18
 800291c:	d123      	bne.n	8002966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	08da      	lsrs	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3208      	adds	r2, #8
 8002926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0203 	and.w	r2, r3, #3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80a6 	beq.w	8002af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a8:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <HAL_GPIO_Init+0x2e4>)
 80029aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ac:	4a5a      	ldr	r2, [pc, #360]	; (8002b18 <HAL_GPIO_Init+0x2e4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6613      	str	r3, [r2, #96]	; 0x60
 80029b4:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_GPIO_Init+0x2e4>)
 80029b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c0:	4a56      	ldr	r2, [pc, #344]	; (8002b1c <HAL_GPIO_Init+0x2e8>)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	3302      	adds	r3, #2
 80029c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	220f      	movs	r2, #15
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ea:	d01f      	beq.n	8002a2c <HAL_GPIO_Init+0x1f8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_GPIO_Init+0x2ec>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d019      	beq.n	8002a28 <HAL_GPIO_Init+0x1f4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a4b      	ldr	r2, [pc, #300]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_GPIO_Init+0x1f0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <HAL_GPIO_Init+0x2f4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00d      	beq.n	8002a20 <HAL_GPIO_Init+0x1ec>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a49      	ldr	r2, [pc, #292]	; (8002b2c <HAL_GPIO_Init+0x2f8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <HAL_GPIO_Init+0x1e8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a48      	ldr	r2, [pc, #288]	; (8002b30 <HAL_GPIO_Init+0x2fc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d101      	bne.n	8002a18 <HAL_GPIO_Init+0x1e4>
 8002a14:	2305      	movs	r3, #5
 8002a16:	e00a      	b.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a18:	2306      	movs	r3, #6
 8002a1a:	e008      	b.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a20:	2303      	movs	r3, #3
 8002a22:	e004      	b.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_GPIO_Init+0x1fa>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4093      	lsls	r3, r2
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3e:	4937      	ldr	r1, [pc, #220]	; (8002b1c <HAL_GPIO_Init+0x2e8>)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a4c:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a70:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a76:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a9a:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa0:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aee:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <HAL_GPIO_Init+0x300>)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3301      	adds	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f47f ae9d 	bne.w	8002844 <HAL_GPIO_Init+0x10>
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	48000400 	.word	0x48000400
 8002b24:	48000800 	.word	0x48000800
 8002b28:	48000c00 	.word	0x48000c00
 8002b2c:	48001000 	.word	0x48001000
 8002b30:	48001400 	.word	0x48001400
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d141      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b76:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b82:	d131      	bne.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b84:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8a:	4a46      	ldr	r2, [pc, #280]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9c:	4a41      	ldr	r2, [pc, #260]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba4:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2232      	movs	r2, #50	; 0x32
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	4a3f      	ldr	r2, [pc, #252]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	0c9b      	lsrs	r3, r3, #18
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bba:	e002      	b.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	d102      	bne.n	8002bd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f2      	bne.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd6:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d158      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e057      	b.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bee:	4a2d      	ldr	r2, [pc, #180]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bf8:	e04d      	b.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d141      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d131      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c28:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2232      	movs	r2, #50	; 0x32
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	0c9b      	lsrs	r3, r3, #18
 8002c42:	3301      	adds	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c46:	e002      	b.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5a:	d102      	bne.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f2      	bne.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6e:	d112      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e011      	b.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c84:	e007      	b.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cbe:	6093      	str	r3, [r2, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e308      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d075      	beq.n	8002dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cee:	4ba3      	ldr	r3, [pc, #652]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf8:	4ba0      	ldr	r3, [pc, #640]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3e>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d002      	beq.n	8002d14 <HAL_RCC_OscConfig+0x44>
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	4b99      	ldr	r3, [pc, #612]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d05b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x108>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d157      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e2e3      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x74>
 8002d36:	4b91      	ldr	r3, [pc, #580]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a90      	ldr	r2, [pc, #576]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e01d      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x98>
 8002d4e:	4b8b      	ldr	r3, [pc, #556]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a8a      	ldr	r2, [pc, #552]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a87      	ldr	r2, [pc, #540]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d68:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a83      	ldr	r2, [pc, #524]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a80      	ldr	r2, [pc, #512]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f998 	bl	80010bc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe f994 	bl	80010bc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e2a8      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da2:	4b76      	ldr	r3, [pc, #472]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0xc0>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe f984 	bl	80010bc <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe f980 	bl	80010bc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e294      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0xe8>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d075      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de6:	4b65      	ldr	r3, [pc, #404]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df0:	4b62      	ldr	r3, [pc, #392]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_OscConfig+0x136>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_OscConfig+0x13c>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d11f      	bne.n	8002e4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_OscConfig+0x154>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e267      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b55      	ldr	r3, [pc, #340]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	4952      	ldr	r1, [pc, #328]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e38:	4b51      	ldr	r3, [pc, #324]	; (8002f80 <HAL_RCC_OscConfig+0x2b0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe f8f1 	bl	8001024 <HAL_InitTick>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d043      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e253      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e54:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe f92c 	bl	80010bc <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe f928 	bl	80010bc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e23c      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7a:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	061b      	lsls	r3, r3, #24
 8002e94:	4939      	ldr	r1, [pc, #228]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
 8002e9a:	e01a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a36      	ldr	r2, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe f908 	bl	80010bc <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe f904 	bl	80010bc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e218      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1e0>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d03c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe f8e1 	bl	80010bc <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efe:	f7fe f8dd 	bl	80010bc <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1f1      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ef      	beq.n	8002efe <HAL_RCC_OscConfig+0x22e>
 8002f1e:	e01b      	b.n	8002f58 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe f8c4 	bl	80010bc <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe f8c0 	bl	80010bc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1d4      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ef      	bne.n	8002f38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80ab 	beq.w	80030bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2b4>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e005      	b.n	8002f86 <HAL_RCC_OscConfig+0x2b6>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	20000004 	.word	0x20000004
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	4baf      	ldr	r3, [pc, #700]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	4aae      	ldr	r2, [pc, #696]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6593      	str	r3, [r2, #88]	; 0x58
 8002f96:	4bac      	ldr	r3, [pc, #688]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa6:	4ba9      	ldr	r3, [pc, #676]	; (800324c <HAL_RCC_OscConfig+0x57c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d118      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb2:	4ba6      	ldr	r3, [pc, #664]	; (800324c <HAL_RCC_OscConfig+0x57c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4aa5      	ldr	r2, [pc, #660]	; (800324c <HAL_RCC_OscConfig+0x57c>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f87d 	bl	80010bc <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe f879 	bl	80010bc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e18d      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd8:	4b9c      	ldr	r3, [pc, #624]	; (800324c <HAL_RCC_OscConfig+0x57c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d108      	bne.n	8002ffe <HAL_RCC_OscConfig+0x32e>
 8002fec:	4b96      	ldr	r3, [pc, #600]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	4a95      	ldr	r2, [pc, #596]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ffc:	e024      	b.n	8003048 <HAL_RCC_OscConfig+0x378>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d110      	bne.n	8003028 <HAL_RCC_OscConfig+0x358>
 8003006:	4b90      	ldr	r3, [pc, #576]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	4a8e      	ldr	r2, [pc, #568]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003016:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	4a8a      	ldr	r2, [pc, #552]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003026:	e00f      	b.n	8003048 <HAL_RCC_OscConfig+0x378>
 8003028:	4b87      	ldr	r3, [pc, #540]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	4a86      	ldr	r2, [pc, #536]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003038:	4b83      	ldr	r3, [pc, #524]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	4a82      	ldr	r2, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe f834 	bl	80010bc <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe f830 	bl	80010bc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e142      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ed      	beq.n	8003058 <HAL_RCC_OscConfig+0x388>
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7fe f81d 	bl	80010bc <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe f819 	bl	80010bc <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e12b      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ed      	bne.n	8003086 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a64      	ldr	r2, [pc, #400]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03c      	beq.n	8003142 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01c      	beq.n	800310a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030d0:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80030d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d6:	4a5c      	ldr	r2, [pc, #368]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd ffec 	bl	80010bc <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e8:	f7fd ffe8 	bl	80010bc <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0fc      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80030fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <HAL_RCC_OscConfig+0x418>
 8003108:	e01b      	b.n	8003142 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800310a:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800310c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003110:	4a4d      	ldr	r2, [pc, #308]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fd ffcf 	bl	80010bc <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003122:	f7fd ffcb 	bl	80010bc <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0df      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ef      	bne.n	8003122 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80d3 	beq.w	80032f2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b0c      	cmp	r3, #12
 8003156:	f000 808d 	beq.w	8003274 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d15a      	bne.n	8003218 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a38      	ldr	r2, [pc, #224]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800316c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fd ffa5 	bl	80010bc <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003176:	f7fd ffa1 	bl	80010bc <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0b5      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_OscConfig+0x580>)
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6a11      	ldr	r1, [r2, #32]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a4:	3a01      	subs	r2, #1
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031ae:	0212      	lsls	r2, r2, #8
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031b6:	0852      	lsrs	r2, r2, #1
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0552      	lsls	r2, r2, #21
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031c2:	0852      	lsrs	r2, r2, #1
 80031c4:	3a01      	subs	r2, #1
 80031c6:	0652      	lsls	r2, r2, #25
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031ce:	06d2      	lsls	r2, r2, #27
 80031d0:	430a      	orrs	r2, r1
 80031d2:	491d      	ldr	r1, [pc, #116]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80031de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 80031ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fd ff64 	bl	80010bc <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fd ff60 	bl	80010bc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e074      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x528>
 8003216:	e06c      	b.n	80032f2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800321e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003222:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_RCC_OscConfig+0x578>)
 8003236:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd ff3c 	bl	80010bc <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003246:	e00e      	b.n	8003266 <HAL_RCC_OscConfig+0x596>
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
 8003250:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fd ff32 	bl	80010bc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e046      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <HAL_RCC_OscConfig+0x62c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x584>
 8003272:	e03e      	b.n	80032f2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e039      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003280:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <HAL_RCC_OscConfig+0x62c>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0203 	and.w	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	429a      	cmp	r2, r3
 8003292:	d12c      	bne.n	80032ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	3b01      	subs	r3, #1
 80032a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d123      	bne.n	80032ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d11b      	bne.n	80032ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d113      	bne.n	80032ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000

08003300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e11e      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b91      	ldr	r3, [pc, #580]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b8e      	ldr	r3, [pc, #568]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 020f 	bic.w	r2, r3, #15
 800332e:	498c      	ldr	r1, [pc, #560]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b8a      	ldr	r3, [pc, #552]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e106      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d073      	beq.n	800343c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d129      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335c:	4b81      	ldr	r3, [pc, #516]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0f4      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800336c:	f000 f99e 	bl	80036ac <RCC_GetSysClockFreqFromPLLSource>
 8003370:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_RCC_ClockConfig+0x268>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d93f      	bls.n	80033fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800337a:	4b7a      	ldr	r3, [pc, #488]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d033      	beq.n	80033fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12f      	bne.n	80033fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800339a:	4b72      	ldr	r3, [pc, #456]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a2:	4a70      	ldr	r2, [pc, #448]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e024      	b.n	80033fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b8:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0c6      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c8:	4b66      	ldr	r3, [pc, #408]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0be      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033d8:	f000 f8ce 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4a61      	ldr	r2, [pc, #388]	; (8003568 <HAL_RCC_ClockConfig+0x268>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d909      	bls.n	80033fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033e6:	4b5f      	ldr	r3, [pc, #380]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ee:	4a5d      	ldr	r2, [pc, #372]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033fa:	4b5a      	ldr	r3, [pc, #360]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f023 0203 	bic.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4957      	ldr	r1, [pc, #348]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340c:	f7fd fe56 	bl	80010bc <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	e00a      	b.n	800342a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003414:	f7fd fe52 	bl	80010bc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e095      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 020c 	and.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	429a      	cmp	r2, r3
 800343a:	d1eb      	bne.n	8003414 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d023      	beq.n	8003490 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003454:	4b43      	ldr	r3, [pc, #268]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a42      	ldr	r2, [pc, #264]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800345a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800345e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800346c:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003474:	4a3b      	ldr	r2, [pc, #236]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4936      	ldr	r1, [pc, #216]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
 800348e:	e008      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d105      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4a32      	ldr	r2, [pc, #200]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 800349c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a2:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d21d      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 020f 	bic.w	r2, r3, #15
 80034b8:	4929      	ldr	r1, [pc, #164]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c0:	f7fd fdfc 	bl	80010bc <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fd fdf8 	bl	80010bc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e03b      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1ed      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4917      	ldr	r1, [pc, #92]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490f      	ldr	r1, [pc, #60]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352a:	f000 f825 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490c      	ldr	r1, [pc, #48]	; (800356c <HAL_RCC_ClockConfig+0x26c>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x270>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fd68 	bl	8001024 <HAL_InitTick>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000
 8003564:	40021000 	.word	0x40021000
 8003568:	04c4b400 	.word	0x04c4b400
 800356c:	08005b78 	.word	0x08005b78
 8003570:	20000000 	.word	0x20000000
 8003574:	20000004 	.word	0x20000004

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d102      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800358a:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_RCC_GetSysClockFreq+0xbc>)
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e047      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d102      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e03e      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d136      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3301      	adds	r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d10c      	bne.n	80035e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d6:	68d2      	ldr	r2, [r2, #12]
 80035d8:	0a12      	lsrs	r2, r2, #8
 80035da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e00c      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e6:	4a13      	ldr	r2, [pc, #76]	; (8003634 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	4a10      	ldr	r2, [pc, #64]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	0a12      	lsrs	r2, r2, #8
 80035f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	0e5b      	lsrs	r3, r3, #25
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	3301      	adds	r3, #1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e001      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003620:	693b      	ldr	r3, [r7, #16]
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	00f42400 	.word	0x00f42400
 8003638:	007a1200 	.word	0x007a1200

0800363c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <HAL_RCC_GetHCLKFreq+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003658:	f7ff fff0 	bl	800363c <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4904      	ldr	r1, [pc, #16]	; (800367c <HAL_RCC_GetPCLK1Freq+0x28>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	08005b88 	.word	0x08005b88

08003680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003684:	f7ff ffda 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0adb      	lsrs	r3, r3, #11
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4904      	ldr	r1, [pc, #16]	; (80036a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08005b88 	.word	0x08005b88

080036ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d10c      	bne.n	80036ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036da:	68d2      	ldr	r2, [r2, #12]
 80036dc:	0a12      	lsrs	r2, r2, #8
 80036de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
    break;
 80036e8:	e00c      	b.n	8003704 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f4:	68d2      	ldr	r2, [r2, #12]
 80036f6:	0a12      	lsrs	r2, r2, #8
 80036f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    break;
 8003702:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0e5b      	lsrs	r3, r3, #25
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	3301      	adds	r3, #1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800371e:	687b      	ldr	r3, [r7, #4]
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000
 8003730:	007a1200 	.word	0x007a1200
 8003734:	00f42400 	.word	0x00f42400

08003738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003740:	2300      	movs	r3, #0
 8003742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003744:	2300      	movs	r3, #0
 8003746:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8098 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b43      	ldr	r3, [pc, #268]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b40      	ldr	r3, [pc, #256]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	4a3f      	ldr	r2, [pc, #252]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	; 0x58
 8003772:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003782:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a39      	ldr	r2, [pc, #228]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800378e:	f7fd fc95 	bl	80010bc <HAL_GetTick>
 8003792:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003794:	e009      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fd fc91 	bl	80010bc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d902      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	74fb      	strb	r3, [r7, #19]
        break;
 80037a8:	e005      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ef      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d159      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037bc:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d019      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d8:	4b23      	ldr	r3, [pc, #140]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fd fc51 	bl	80010bc <HAL_GetTick>
 800381a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381c:	e00b      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fd fc4d 	bl	80010bc <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d902      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	74fb      	strb	r3, [r7, #19]
            break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ec      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003860:	e008      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	74bb      	strb	r3, [r7, #18]
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003874:	7c7b      	ldrb	r3, [r7, #17]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4baf      	ldr	r3, [pc, #700]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	4aae      	ldr	r2, [pc, #696]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003892:	4ba9      	ldr	r3, [pc, #676]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f023 0203 	bic.w	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	49a5      	ldr	r1, [pc, #660]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b4:	4ba0      	ldr	r3, [pc, #640]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f023 020c 	bic.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	499d      	ldr	r1, [pc, #628]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d6:	4b98      	ldr	r3, [pc, #608]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4994      	ldr	r1, [pc, #592]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f8:	4b8f      	ldr	r3, [pc, #572]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	498c      	ldr	r1, [pc, #560]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800391a:	4b87      	ldr	r3, [pc, #540]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	4983      	ldr	r1, [pc, #524]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393c:	4b7e      	ldr	r3, [pc, #504]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	497b      	ldr	r1, [pc, #492]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	4972      	ldr	r1, [pc, #456]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003980:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	496a      	ldr	r1, [pc, #424]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	4961      	ldr	r1, [pc, #388]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039c4:	4b5c      	ldr	r3, [pc, #368]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ca:	f023 0203 	bic.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	4959      	ldr	r1, [pc, #356]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e6:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4950      	ldr	r1, [pc, #320]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4948      	ldr	r1, [pc, #288]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a26:	d105      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a28:	4b43      	ldr	r3, [pc, #268]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a40:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	493a      	ldr	r1, [pc, #232]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a78:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	492c      	ldr	r1, [pc, #176]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	491e      	ldr	r1, [pc, #120]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ada:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4910      	ldr	r1, [pc, #64]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b06:	d105      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d018      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	4902      	ldr	r1, [pc, #8]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003b38:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b44:	d105      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d015      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b64:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6c:	4917      	ldr	r1, [pc, #92]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d105      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d015      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba4:	4909      	ldr	r1, [pc, #36]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bb4:	d105      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e09d      	b.n	8003d1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf2:	d009      	beq.n	8003c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	e005      	b.n	8003c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd f870 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c48:	d902      	bls.n	8003c50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e002      	b.n	8003c56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_Init+0xa0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	ea42 0103 	orr.w	r1, r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 0204 	and.w	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cec:	ea42 0103 	orr.w	r1, r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e049      	b.n	8003dcc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fd f851 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fb8f 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e049      	b.n	8003e7a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f841 	bl	8003e82 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 fb38 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e049      	b.n	8003f3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f841 	bl	8003f44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f000 fad7 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e064      	b.n	800403c <HAL_TIM_OC_ConfigChannel+0xe4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b14      	cmp	r3, #20
 8003f7e:	d857      	bhi.n	8004030 <HAL_TIM_OC_ConfigChannel+0xd8>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fdd 	.word	0x08003fdd
 8003f8c:	08004031 	.word	0x08004031
 8003f90:	08004031 	.word	0x08004031
 8003f94:	08004031 	.word	0x08004031
 8003f98:	08003feb 	.word	0x08003feb
 8003f9c:	08004031 	.word	0x08004031
 8003fa0:	08004031 	.word	0x08004031
 8003fa4:	08004031 	.word	0x08004031
 8003fa8:	08003ff9 	.word	0x08003ff9
 8003fac:	08004031 	.word	0x08004031
 8003fb0:	08004031 	.word	0x08004031
 8003fb4:	08004031 	.word	0x08004031
 8003fb8:	08004007 	.word	0x08004007
 8003fbc:	08004031 	.word	0x08004031
 8003fc0:	08004031 	.word	0x08004031
 8003fc4:	08004031 	.word	0x08004031
 8003fc8:	08004015 	.word	0x08004015
 8003fcc:	08004031 	.word	0x08004031
 8003fd0:	08004031 	.word	0x08004031
 8003fd4:	08004031 	.word	0x08004031
 8003fd8:	08004023 	.word	0x08004023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 faf8 	bl	80045d8 <TIM_OC1_SetConfig>
      break;
 8003fe8:	e023      	b.n	8004032 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fb8b 	bl	800470c <TIM_OC2_SetConfig>
      break;
 8003ff6:	e01c      	b.n	8004032 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fc18 	bl	8004834 <TIM_OC3_SetConfig>
      break;
 8004004:	e015      	b.n	8004032 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fca3 	bl	8004958 <TIM_OC4_SetConfig>
      break;
 8004012:	e00e      	b.n	8004032 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fd30 	bl	8004a80 <TIM_OC5_SetConfig>
      break;
 8004020:	e007      	b.n	8004032 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fd93 	bl	8004b54 <TIM_OC6_SetConfig>
      break;
 800402e:	e000      	b.n	8004032 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004030:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800405a:	2302      	movs	r3, #2
 800405c:	e0fd      	b.n	800425a <HAL_TIM_PWM_ConfigChannel+0x216>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b14      	cmp	r3, #20
 800406a:	f200 80f0 	bhi.w	800424e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040c9 	.word	0x080040c9
 8004078:	0800424f 	.word	0x0800424f
 800407c:	0800424f 	.word	0x0800424f
 8004080:	0800424f 	.word	0x0800424f
 8004084:	08004109 	.word	0x08004109
 8004088:	0800424f 	.word	0x0800424f
 800408c:	0800424f 	.word	0x0800424f
 8004090:	0800424f 	.word	0x0800424f
 8004094:	0800414b 	.word	0x0800414b
 8004098:	0800424f 	.word	0x0800424f
 800409c:	0800424f 	.word	0x0800424f
 80040a0:	0800424f 	.word	0x0800424f
 80040a4:	0800418b 	.word	0x0800418b
 80040a8:	0800424f 	.word	0x0800424f
 80040ac:	0800424f 	.word	0x0800424f
 80040b0:	0800424f 	.word	0x0800424f
 80040b4:	080041cd 	.word	0x080041cd
 80040b8:	0800424f 	.word	0x0800424f
 80040bc:	0800424f 	.word	0x0800424f
 80040c0:	0800424f 	.word	0x0800424f
 80040c4:	0800420d 	.word	0x0800420d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fa82 	bl	80045d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6999      	ldr	r1, [r3, #24]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	619a      	str	r2, [r3, #24]
      break;
 8004106:	e0a3      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fafc 	bl	800470c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6999      	ldr	r1, [r3, #24]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	619a      	str	r2, [r3, #24]
      break;
 8004148:	e082      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fb6f 	bl	8004834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0208 	orr.w	r2, r2, #8
 8004164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0204 	bic.w	r2, r2, #4
 8004174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69d9      	ldr	r1, [r3, #28]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	61da      	str	r2, [r3, #28]
      break;
 8004188:	e062      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fbe1 	bl	8004958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69d9      	ldr	r1, [r3, #28]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	61da      	str	r2, [r3, #28]
      break;
 80041ca:	e041      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fc54 	bl	8004a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0208 	orr.w	r2, r2, #8
 80041e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0204 	bic.w	r2, r2, #4
 80041f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800420a:	e021      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fc9e 	bl	8004b54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004226:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004236:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800424c:	e000      	b.n	8004250 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800424e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIM_ConfigClockSource+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e0f5      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x204>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800429a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800429e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a6e      	ldr	r2, [pc, #440]	; (8004470 <HAL_TIM_ConfigClockSource+0x20c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f000 80c1 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 80042bc:	4a6c      	ldr	r2, [pc, #432]	; (8004470 <HAL_TIM_ConfigClockSource+0x20c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f200 80c6 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 80042c4:	4a6b      	ldr	r2, [pc, #428]	; (8004474 <HAL_TIM_ConfigClockSource+0x210>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f000 80b9 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 80042cc:	4a69      	ldr	r2, [pc, #420]	; (8004474 <HAL_TIM_ConfigClockSource+0x210>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	f200 80be 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 80042d4:	4a68      	ldr	r2, [pc, #416]	; (8004478 <HAL_TIM_ConfigClockSource+0x214>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f000 80b1 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 80042dc:	4a66      	ldr	r2, [pc, #408]	; (8004478 <HAL_TIM_ConfigClockSource+0x214>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	f200 80b6 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 80042e4:	4a65      	ldr	r2, [pc, #404]	; (800447c <HAL_TIM_ConfigClockSource+0x218>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f000 80a9 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 80042ec:	4a63      	ldr	r2, [pc, #396]	; (800447c <HAL_TIM_ConfigClockSource+0x218>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f200 80ae 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 80042f4:	4a62      	ldr	r2, [pc, #392]	; (8004480 <HAL_TIM_ConfigClockSource+0x21c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	f000 80a1 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 80042fc:	4a60      	ldr	r2, [pc, #384]	; (8004480 <HAL_TIM_ConfigClockSource+0x21c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f200 80a6 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004304:	4a5f      	ldr	r2, [pc, #380]	; (8004484 <HAL_TIM_ConfigClockSource+0x220>)
 8004306:	4293      	cmp	r3, r2
 8004308:	f000 8099 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 800430c:	4a5d      	ldr	r2, [pc, #372]	; (8004484 <HAL_TIM_ConfigClockSource+0x220>)
 800430e:	4293      	cmp	r3, r2
 8004310:	f200 809e 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004314:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004318:	f000 8091 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 800431c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004320:	f200 8096 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004328:	f000 8089 	beq.w	800443e <HAL_TIM_ConfigClockSource+0x1da>
 800432c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004330:	f200 808e 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004338:	d03e      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0x154>
 800433a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433e:	f200 8087 	bhi.w	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	f000 8085 	beq.w	8004454 <HAL_TIM_ConfigClockSource+0x1f0>
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	d87f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004350:	2b70      	cmp	r3, #112	; 0x70
 8004352:	d01a      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x126>
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d87b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004358:	2b60      	cmp	r3, #96	; 0x60
 800435a:	d050      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x19a>
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d877      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004360:	2b50      	cmp	r3, #80	; 0x50
 8004362:	d03c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x17a>
 8004364:	2b50      	cmp	r3, #80	; 0x50
 8004366:	d873      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d058      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x1ba>
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d86f      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004370:	2b30      	cmp	r3, #48	; 0x30
 8004372:	d064      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1da>
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d86b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d060      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1da>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d867      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1da>
 8004384:	2b10      	cmp	r3, #16
 8004386:	d05a      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004388:	e062      	b.n	8004450 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 fcc3 	bl	8004d24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
      break;
 80043b6:	e04e      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f000 fcac 	bl	8004d24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043da:	609a      	str	r2, [r3, #8]
      break;
 80043dc:	e03b      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 fc1e 	bl	8004c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2150      	movs	r1, #80	; 0x50
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fc77 	bl	8004cea <TIM_ITRx_SetConfig>
      break;
 80043fc:	e02b      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	461a      	mov	r2, r3
 800440c:	f000 fc3d 	bl	8004c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2160      	movs	r1, #96	; 0x60
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fc67 	bl	8004cea <TIM_ITRx_SetConfig>
      break;
 800441c:	e01b      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 fbfe 	bl	8004c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fc57 	bl	8004cea <TIM_ITRx_SetConfig>
      break;
 800443c:	e00b      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f000 fc4e 	bl	8004cea <TIM_ITRx_SetConfig>
        break;
 800444e:	e002      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8004454:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00100070 	.word	0x00100070
 8004474:	00100060 	.word	0x00100060
 8004478:	00100050 	.word	0x00100050
 800447c:	00100040 	.word	0x00100040
 8004480:	00100030 	.word	0x00100030
 8004484:	00100020 	.word	0x00100020

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a46      	ldr	r2, [pc, #280]	; (80045b4 <TIM_Base_SetConfig+0x12c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d017      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a6:	d013      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a43      	ldr	r2, [pc, #268]	; (80045b8 <TIM_Base_SetConfig+0x130>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00f      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a42      	ldr	r2, [pc, #264]	; (80045bc <TIM_Base_SetConfig+0x134>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a41      	ldr	r2, [pc, #260]	; (80045c0 <TIM_Base_SetConfig+0x138>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <TIM_Base_SetConfig+0x13c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0x48>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3f      	ldr	r2, [pc, #252]	; (80045c8 <TIM_Base_SetConfig+0x140>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a33      	ldr	r2, [pc, #204]	; (80045b4 <TIM_Base_SetConfig+0x12c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d023      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a30      	ldr	r2, [pc, #192]	; (80045b8 <TIM_Base_SetConfig+0x130>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <TIM_Base_SetConfig+0x134>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2e      	ldr	r2, [pc, #184]	; (80045c0 <TIM_Base_SetConfig+0x138>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <TIM_Base_SetConfig+0x13c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2d      	ldr	r2, [pc, #180]	; (80045cc <TIM_Base_SetConfig+0x144>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2c      	ldr	r2, [pc, #176]	; (80045d0 <TIM_Base_SetConfig+0x148>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2b      	ldr	r2, [pc, #172]	; (80045d4 <TIM_Base_SetConfig+0x14c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0xaa>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <TIM_Base_SetConfig+0x140>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <TIM_Base_SetConfig+0x12c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <TIM_Base_SetConfig+0x13c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00f      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a14      	ldr	r2, [pc, #80]	; (80045cc <TIM_Base_SetConfig+0x144>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <TIM_Base_SetConfig+0x148>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <TIM_Base_SetConfig+0x14c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x110>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <TIM_Base_SetConfig+0x140>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40012c00 	.word	0x40012c00
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40015000 	.word	0x40015000
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800

080045d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0201 	bic.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0302 	bic.w	r3, r3, #2
 8004624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a30      	ldr	r2, [pc, #192]	; (80046f4 <TIM_OC1_SetConfig+0x11c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <TIM_OC1_SetConfig+0x88>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <TIM_OC1_SetConfig+0x120>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00f      	beq.n	8004660 <TIM_OC1_SetConfig+0x88>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a2e      	ldr	r2, [pc, #184]	; (80046fc <TIM_OC1_SetConfig+0x124>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00b      	beq.n	8004660 <TIM_OC1_SetConfig+0x88>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a2d      	ldr	r2, [pc, #180]	; (8004700 <TIM_OC1_SetConfig+0x128>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_OC1_SetConfig+0x88>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a2c      	ldr	r2, [pc, #176]	; (8004704 <TIM_OC1_SetConfig+0x12c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_OC1_SetConfig+0x88>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a2b      	ldr	r2, [pc, #172]	; (8004708 <TIM_OC1_SetConfig+0x130>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0308 	bic.w	r3, r3, #8
 8004666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <TIM_OC1_SetConfig+0x11c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <TIM_OC1_SetConfig+0xd2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <TIM_OC1_SetConfig+0x120>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00f      	beq.n	80046aa <TIM_OC1_SetConfig+0xd2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <TIM_OC1_SetConfig+0x124>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00b      	beq.n	80046aa <TIM_OC1_SetConfig+0xd2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <TIM_OC1_SetConfig+0x128>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <TIM_OC1_SetConfig+0xd2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <TIM_OC1_SetConfig+0x12c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <TIM_OC1_SetConfig+0xd2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <TIM_OC1_SetConfig+0x130>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d111      	bne.n	80046ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40013400 	.word	0x40013400
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800
 8004708:	40015000 	.word	0x40015000

0800470c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0210 	bic.w	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0320 	bic.w	r3, r3, #32
 800475a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <TIM_OC2_SetConfig+0x110>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_OC2_SetConfig+0x74>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <TIM_OC2_SetConfig+0x114>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC2_SetConfig+0x74>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <TIM_OC2_SetConfig+0x118>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10d      	bne.n	800479c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a1f      	ldr	r2, [pc, #124]	; (800481c <TIM_OC2_SetConfig+0x110>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <TIM_OC2_SetConfig+0xc0>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <TIM_OC2_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00f      	beq.n	80047cc <TIM_OC2_SetConfig+0xc0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <TIM_OC2_SetConfig+0x11c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_OC2_SetConfig+0xc0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <TIM_OC2_SetConfig+0x120>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC2_SetConfig+0xc0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <TIM_OC2_SetConfig+0x124>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC2_SetConfig+0xc0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a17      	ldr	r2, [pc, #92]	; (8004824 <TIM_OC2_SetConfig+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d113      	bne.n	80047f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40015000 	.word	0x40015000
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800

08004834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2b      	ldr	r2, [pc, #172]	; (8004940 <TIM_OC3_SetConfig+0x10c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <TIM_OC3_SetConfig+0x72>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <TIM_OC3_SetConfig+0x110>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d003      	beq.n	80048a6 <TIM_OC3_SetConfig+0x72>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a29      	ldr	r2, [pc, #164]	; (8004948 <TIM_OC3_SetConfig+0x114>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10d      	bne.n	80048c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <TIM_OC3_SetConfig+0x10c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <TIM_OC3_SetConfig+0xbe>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <TIM_OC3_SetConfig+0x110>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00f      	beq.n	80048f2 <TIM_OC3_SetConfig+0xbe>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <TIM_OC3_SetConfig+0x118>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <TIM_OC3_SetConfig+0xbe>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <TIM_OC3_SetConfig+0x11c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <TIM_OC3_SetConfig+0xbe>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <TIM_OC3_SetConfig+0x120>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d003      	beq.n	80048f2 <TIM_OC3_SetConfig+0xbe>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a16      	ldr	r2, [pc, #88]	; (8004948 <TIM_OC3_SetConfig+0x114>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d113      	bne.n	800491a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40013400 	.word	0x40013400
 8004948:	40015000 	.word	0x40015000
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800

08004958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	031b      	lsls	r3, r3, #12
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a2c      	ldr	r2, [pc, #176]	; (8004a68 <TIM_OC4_SetConfig+0x110>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_OC4_SetConfig+0x74>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <TIM_OC4_SetConfig+0x114>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC4_SetConfig+0x74>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2a      	ldr	r2, [pc, #168]	; (8004a70 <TIM_OC4_SetConfig+0x118>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d10d      	bne.n	80049e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <TIM_OC4_SetConfig+0x110>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <TIM_OC4_SetConfig+0xc0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <TIM_OC4_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00f      	beq.n	8004a18 <TIM_OC4_SetConfig+0xc0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a1e      	ldr	r2, [pc, #120]	; (8004a74 <TIM_OC4_SetConfig+0x11c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_OC4_SetConfig+0xc0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <TIM_OC4_SetConfig+0x120>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_OC4_SetConfig+0xc0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <TIM_OC4_SetConfig+0x124>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_OC4_SetConfig+0xc0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <TIM_OC4_SetConfig+0x118>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d113      	bne.n	8004a40 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	019b      	lsls	r3, r3, #6
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40013400 	.word	0x40013400
 8004a70:	40015000 	.word	0x40015000
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800

08004a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <TIM_OC5_SetConfig+0xbc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <TIM_OC5_SetConfig+0x82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <TIM_OC5_SetConfig+0xc0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_OC5_SetConfig+0x82>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <TIM_OC5_SetConfig+0xc4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_OC5_SetConfig+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC5_SetConfig+0xc8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_OC5_SetConfig+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC5_SetConfig+0xcc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC5_SetConfig+0x82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <TIM_OC5_SetConfig+0xd0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d109      	bne.n	8004b16 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	621a      	str	r2, [r3, #32]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40013400 	.word	0x40013400
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800
 8004b50:	40015000 	.word	0x40015000

08004b54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	051b      	lsls	r3, r3, #20
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1a      	ldr	r2, [pc, #104]	; (8004c14 <TIM_OC6_SetConfig+0xc0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x84>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <TIM_OC6_SetConfig+0xc4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00f      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x84>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <TIM_OC6_SetConfig+0xc8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x84>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <TIM_OC6_SetConfig+0xcc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x84>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a16      	ldr	r2, [pc, #88]	; (8004c24 <TIM_OC6_SetConfig+0xd0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_OC6_SetConfig+0x84>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <TIM_OC6_SetConfig+0xd4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d109      	bne.n	8004bec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800
 8004c28:	40015000 	.word	0x40015000

08004c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 030a 	bic.w	r3, r3, #10
 8004c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f023 0210 	bic.w	r2, r3, #16
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	031b      	lsls	r3, r3, #12
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f043 0307 	orr.w	r3, r3, #7
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	021a      	lsls	r2, r3, #8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e074      	b.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a33      	ldr	r2, [pc, #204]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d01d      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d10c      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40015000 	.word	0x40015000
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40014000 	.word	0x40014000

08004e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e096      	b.n	8004fda <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2f      	ldr	r2, [pc, #188]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d106      	bne.n	8004f52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a24      	ldr	r2, [pc, #144]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a22      	ldr	r2, [pc, #136]	; (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a21      	ldr	r2, [pc, #132]	; (8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d12b      	bne.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	051b      	lsls	r3, r3, #20
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a10      	ldr	r2, [pc, #64]	; (8004fec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40013400 	.word	0x40013400
 8004ff0:	40015000 	.word	0x40015000

08004ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e042      	b.n	800508c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fb ff43 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2224      	movs	r2, #36	; 0x24
 8005022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f82c 	bl	8005094 <UART_SetConfig>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e022      	b.n	800508c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 faea 	bl	8005628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fb71 	bl	800576c <UART_CheckIdleState>
 800508a:	4603      	mov	r3, r0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4bb1      	ldr	r3, [pc, #708]	; (8005384 <UART_SetConfig+0x2f0>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4aa6      	ldr	r2, [pc, #664]	; (8005388 <UART_SetConfig+0x2f4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005106:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	69f9      	ldr	r1, [r7, #28]
 8005110:	430b      	orrs	r3, r1
 8005112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	f023 010f 	bic.w	r1, r3, #15
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a97      	ldr	r2, [pc, #604]	; (800538c <UART_SetConfig+0x2f8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d120      	bne.n	8005176 <UART_SetConfig+0xe2>
 8005134:	4b96      	ldr	r3, [pc, #600]	; (8005390 <UART_SetConfig+0x2fc>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d816      	bhi.n	8005170 <UART_SetConfig+0xdc>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0xb4>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005159 	.word	0x08005159
 800514c:	08005165 	.word	0x08005165
 8005150:	0800515f 	.word	0x0800515f
 8005154:	0800516b 	.word	0x0800516b
 8005158:	2301      	movs	r3, #1
 800515a:	76fb      	strb	r3, [r7, #27]
 800515c:	e0e7      	b.n	800532e <UART_SetConfig+0x29a>
 800515e:	2302      	movs	r3, #2
 8005160:	76fb      	strb	r3, [r7, #27]
 8005162:	e0e4      	b.n	800532e <UART_SetConfig+0x29a>
 8005164:	2304      	movs	r3, #4
 8005166:	76fb      	strb	r3, [r7, #27]
 8005168:	e0e1      	b.n	800532e <UART_SetConfig+0x29a>
 800516a:	2308      	movs	r3, #8
 800516c:	76fb      	strb	r3, [r7, #27]
 800516e:	e0de      	b.n	800532e <UART_SetConfig+0x29a>
 8005170:	2310      	movs	r3, #16
 8005172:	76fb      	strb	r3, [r7, #27]
 8005174:	e0db      	b.n	800532e <UART_SetConfig+0x29a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a86      	ldr	r2, [pc, #536]	; (8005394 <UART_SetConfig+0x300>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d132      	bne.n	80051e6 <UART_SetConfig+0x152>
 8005180:	4b83      	ldr	r3, [pc, #524]	; (8005390 <UART_SetConfig+0x2fc>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f003 030c 	and.w	r3, r3, #12
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d828      	bhi.n	80051e0 <UART_SetConfig+0x14c>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <UART_SetConfig+0x100>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051c9 	.word	0x080051c9
 8005198:	080051e1 	.word	0x080051e1
 800519c:	080051e1 	.word	0x080051e1
 80051a0:	080051e1 	.word	0x080051e1
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051e1 	.word	0x080051e1
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	080051e1 	.word	0x080051e1
 80051b4:	080051cf 	.word	0x080051cf
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051e1 	.word	0x080051e1
 80051c4:	080051db 	.word	0x080051db
 80051c8:	2300      	movs	r3, #0
 80051ca:	76fb      	strb	r3, [r7, #27]
 80051cc:	e0af      	b.n	800532e <UART_SetConfig+0x29a>
 80051ce:	2302      	movs	r3, #2
 80051d0:	76fb      	strb	r3, [r7, #27]
 80051d2:	e0ac      	b.n	800532e <UART_SetConfig+0x29a>
 80051d4:	2304      	movs	r3, #4
 80051d6:	76fb      	strb	r3, [r7, #27]
 80051d8:	e0a9      	b.n	800532e <UART_SetConfig+0x29a>
 80051da:	2308      	movs	r3, #8
 80051dc:	76fb      	strb	r3, [r7, #27]
 80051de:	e0a6      	b.n	800532e <UART_SetConfig+0x29a>
 80051e0:	2310      	movs	r3, #16
 80051e2:	76fb      	strb	r3, [r7, #27]
 80051e4:	e0a3      	b.n	800532e <UART_SetConfig+0x29a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6b      	ldr	r2, [pc, #428]	; (8005398 <UART_SetConfig+0x304>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d120      	bne.n	8005232 <UART_SetConfig+0x19e>
 80051f0:	4b67      	ldr	r3, [pc, #412]	; (8005390 <UART_SetConfig+0x2fc>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051fa:	2b30      	cmp	r3, #48	; 0x30
 80051fc:	d013      	beq.n	8005226 <UART_SetConfig+0x192>
 80051fe:	2b30      	cmp	r3, #48	; 0x30
 8005200:	d814      	bhi.n	800522c <UART_SetConfig+0x198>
 8005202:	2b20      	cmp	r3, #32
 8005204:	d009      	beq.n	800521a <UART_SetConfig+0x186>
 8005206:	2b20      	cmp	r3, #32
 8005208:	d810      	bhi.n	800522c <UART_SetConfig+0x198>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <UART_SetConfig+0x180>
 800520e:	2b10      	cmp	r3, #16
 8005210:	d006      	beq.n	8005220 <UART_SetConfig+0x18c>
 8005212:	e00b      	b.n	800522c <UART_SetConfig+0x198>
 8005214:	2300      	movs	r3, #0
 8005216:	76fb      	strb	r3, [r7, #27]
 8005218:	e089      	b.n	800532e <UART_SetConfig+0x29a>
 800521a:	2302      	movs	r3, #2
 800521c:	76fb      	strb	r3, [r7, #27]
 800521e:	e086      	b.n	800532e <UART_SetConfig+0x29a>
 8005220:	2304      	movs	r3, #4
 8005222:	76fb      	strb	r3, [r7, #27]
 8005224:	e083      	b.n	800532e <UART_SetConfig+0x29a>
 8005226:	2308      	movs	r3, #8
 8005228:	76fb      	strb	r3, [r7, #27]
 800522a:	e080      	b.n	800532e <UART_SetConfig+0x29a>
 800522c:	2310      	movs	r3, #16
 800522e:	76fb      	strb	r3, [r7, #27]
 8005230:	e07d      	b.n	800532e <UART_SetConfig+0x29a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a59      	ldr	r2, [pc, #356]	; (800539c <UART_SetConfig+0x308>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d120      	bne.n	800527e <UART_SetConfig+0x1ea>
 800523c:	4b54      	ldr	r3, [pc, #336]	; (8005390 <UART_SetConfig+0x2fc>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005246:	2bc0      	cmp	r3, #192	; 0xc0
 8005248:	d013      	beq.n	8005272 <UART_SetConfig+0x1de>
 800524a:	2bc0      	cmp	r3, #192	; 0xc0
 800524c:	d814      	bhi.n	8005278 <UART_SetConfig+0x1e4>
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d009      	beq.n	8005266 <UART_SetConfig+0x1d2>
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d810      	bhi.n	8005278 <UART_SetConfig+0x1e4>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <UART_SetConfig+0x1cc>
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d006      	beq.n	800526c <UART_SetConfig+0x1d8>
 800525e:	e00b      	b.n	8005278 <UART_SetConfig+0x1e4>
 8005260:	2300      	movs	r3, #0
 8005262:	76fb      	strb	r3, [r7, #27]
 8005264:	e063      	b.n	800532e <UART_SetConfig+0x29a>
 8005266:	2302      	movs	r3, #2
 8005268:	76fb      	strb	r3, [r7, #27]
 800526a:	e060      	b.n	800532e <UART_SetConfig+0x29a>
 800526c:	2304      	movs	r3, #4
 800526e:	76fb      	strb	r3, [r7, #27]
 8005270:	e05d      	b.n	800532e <UART_SetConfig+0x29a>
 8005272:	2308      	movs	r3, #8
 8005274:	76fb      	strb	r3, [r7, #27]
 8005276:	e05a      	b.n	800532e <UART_SetConfig+0x29a>
 8005278:	2310      	movs	r3, #16
 800527a:	76fb      	strb	r3, [r7, #27]
 800527c:	e057      	b.n	800532e <UART_SetConfig+0x29a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a47      	ldr	r2, [pc, #284]	; (80053a0 <UART_SetConfig+0x30c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d125      	bne.n	80052d4 <UART_SetConfig+0x240>
 8005288:	4b41      	ldr	r3, [pc, #260]	; (8005390 <UART_SetConfig+0x2fc>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005296:	d017      	beq.n	80052c8 <UART_SetConfig+0x234>
 8005298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529c:	d817      	bhi.n	80052ce <UART_SetConfig+0x23a>
 800529e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a2:	d00b      	beq.n	80052bc <UART_SetConfig+0x228>
 80052a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a8:	d811      	bhi.n	80052ce <UART_SetConfig+0x23a>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <UART_SetConfig+0x222>
 80052ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b2:	d006      	beq.n	80052c2 <UART_SetConfig+0x22e>
 80052b4:	e00b      	b.n	80052ce <UART_SetConfig+0x23a>
 80052b6:	2300      	movs	r3, #0
 80052b8:	76fb      	strb	r3, [r7, #27]
 80052ba:	e038      	b.n	800532e <UART_SetConfig+0x29a>
 80052bc:	2302      	movs	r3, #2
 80052be:	76fb      	strb	r3, [r7, #27]
 80052c0:	e035      	b.n	800532e <UART_SetConfig+0x29a>
 80052c2:	2304      	movs	r3, #4
 80052c4:	76fb      	strb	r3, [r7, #27]
 80052c6:	e032      	b.n	800532e <UART_SetConfig+0x29a>
 80052c8:	2308      	movs	r3, #8
 80052ca:	76fb      	strb	r3, [r7, #27]
 80052cc:	e02f      	b.n	800532e <UART_SetConfig+0x29a>
 80052ce:	2310      	movs	r3, #16
 80052d0:	76fb      	strb	r3, [r7, #27]
 80052d2:	e02c      	b.n	800532e <UART_SetConfig+0x29a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2b      	ldr	r2, [pc, #172]	; (8005388 <UART_SetConfig+0x2f4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d125      	bne.n	800532a <UART_SetConfig+0x296>
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <UART_SetConfig+0x2fc>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ec:	d017      	beq.n	800531e <UART_SetConfig+0x28a>
 80052ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f2:	d817      	bhi.n	8005324 <UART_SetConfig+0x290>
 80052f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f8:	d00b      	beq.n	8005312 <UART_SetConfig+0x27e>
 80052fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fe:	d811      	bhi.n	8005324 <UART_SetConfig+0x290>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <UART_SetConfig+0x278>
 8005304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005308:	d006      	beq.n	8005318 <UART_SetConfig+0x284>
 800530a:	e00b      	b.n	8005324 <UART_SetConfig+0x290>
 800530c:	2300      	movs	r3, #0
 800530e:	76fb      	strb	r3, [r7, #27]
 8005310:	e00d      	b.n	800532e <UART_SetConfig+0x29a>
 8005312:	2302      	movs	r3, #2
 8005314:	76fb      	strb	r3, [r7, #27]
 8005316:	e00a      	b.n	800532e <UART_SetConfig+0x29a>
 8005318:	2304      	movs	r3, #4
 800531a:	76fb      	strb	r3, [r7, #27]
 800531c:	e007      	b.n	800532e <UART_SetConfig+0x29a>
 800531e:	2308      	movs	r3, #8
 8005320:	76fb      	strb	r3, [r7, #27]
 8005322:	e004      	b.n	800532e <UART_SetConfig+0x29a>
 8005324:	2310      	movs	r3, #16
 8005326:	76fb      	strb	r3, [r7, #27]
 8005328:	e001      	b.n	800532e <UART_SetConfig+0x29a>
 800532a:	2310      	movs	r3, #16
 800532c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <UART_SetConfig+0x2f4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	f040 809f 	bne.w	8005478 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800533a:	7efb      	ldrb	r3, [r7, #27]
 800533c:	2b08      	cmp	r3, #8
 800533e:	d837      	bhi.n	80053b0 <UART_SetConfig+0x31c>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <UART_SetConfig+0x2b4>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	0800536d 	.word	0x0800536d
 800534c:	080053b1 	.word	0x080053b1
 8005350:	08005375 	.word	0x08005375
 8005354:	080053b1 	.word	0x080053b1
 8005358:	0800537b 	.word	0x0800537b
 800535c:	080053b1 	.word	0x080053b1
 8005360:	080053b1 	.word	0x080053b1
 8005364:	080053b1 	.word	0x080053b1
 8005368:	080053a9 	.word	0x080053a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800536c:	f7fe f972 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8005370:	6178      	str	r0, [r7, #20]
        break;
 8005372:	e022      	b.n	80053ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <UART_SetConfig+0x310>)
 8005376:	617b      	str	r3, [r7, #20]
        break;
 8005378:	e01f      	b.n	80053ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537a:	f7fe f8fd 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 800537e:	6178      	str	r0, [r7, #20]
        break;
 8005380:	e01b      	b.n	80053ba <UART_SetConfig+0x326>
 8005382:	bf00      	nop
 8005384:	cfff69f3 	.word	0xcfff69f3
 8005388:	40008000 	.word	0x40008000
 800538c:	40013800 	.word	0x40013800
 8005390:	40021000 	.word	0x40021000
 8005394:	40004400 	.word	0x40004400
 8005398:	40004800 	.word	0x40004800
 800539c:	40004c00 	.word	0x40004c00
 80053a0:	40005000 	.word	0x40005000
 80053a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ac:	617b      	str	r3, [r7, #20]
        break;
 80053ae:	e004      	b.n	80053ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	76bb      	strb	r3, [r7, #26]
        break;
 80053b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 811b 	beq.w	80055f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	4a96      	ldr	r2, [pc, #600]	; (8005620 <UART_SetConfig+0x58c>)
 80053c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053cc:	461a      	mov	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d305      	bcc.n	80053f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d902      	bls.n	80053f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	76bb      	strb	r3, [r7, #26]
 80053f6:	e0ff      	b.n	80055f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	4a86      	ldr	r2, [pc, #536]	; (8005620 <UART_SetConfig+0x58c>)
 8005406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540a:	b29a      	uxth	r2, r3
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	f7fa ff02 	bl	8000218 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	020b      	lsls	r3, r1, #8
 8005426:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800542a:	0202      	lsls	r2, r0, #8
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	6849      	ldr	r1, [r1, #4]
 8005430:	0849      	lsrs	r1, r1, #1
 8005432:	4608      	mov	r0, r1
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	1814      	adds	r4, r2, r0
 800543a:	eb43 0501 	adc.w	r5, r3, r1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	461a      	mov	r2, r3
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	4620      	mov	r0, r4
 800544a:	4629      	mov	r1, r5
 800544c:	f7fa fee4 	bl	8000218 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4613      	mov	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545e:	d308      	bcc.n	8005472 <UART_SetConfig+0x3de>
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005466:	d204      	bcs.n	8005472 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e0c2      	b.n	80055f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	76bb      	strb	r3, [r7, #26]
 8005476:	e0bf      	b.n	80055f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005480:	d165      	bne.n	800554e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8005482:	7efb      	ldrb	r3, [r7, #27]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d828      	bhi.n	80054da <UART_SetConfig+0x446>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0x3fc>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054c5 	.word	0x080054c5
 800549c:	080054db 	.word	0x080054db
 80054a0:	080054cb 	.word	0x080054cb
 80054a4:	080054db 	.word	0x080054db
 80054a8:	080054db 	.word	0x080054db
 80054ac:	080054db 	.word	0x080054db
 80054b0:	080054d3 	.word	0x080054d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b4:	f7fe f8ce 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80054b8:	6178      	str	r0, [r7, #20]
        break;
 80054ba:	e013      	b.n	80054e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054bc:	f7fe f8e0 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 80054c0:	6178      	str	r0, [r7, #20]
        break;
 80054c2:	e00f      	b.n	80054e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c4:	4b57      	ldr	r3, [pc, #348]	; (8005624 <UART_SetConfig+0x590>)
 80054c6:	617b      	str	r3, [r7, #20]
        break;
 80054c8:	e00c      	b.n	80054e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	f7fe f855 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 80054ce:	6178      	str	r0, [r7, #20]
        break;
 80054d0:	e008      	b.n	80054e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d6:	617b      	str	r3, [r7, #20]
        break;
 80054d8:	e004      	b.n	80054e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	76bb      	strb	r3, [r7, #26]
        break;
 80054e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8086 	beq.w	80055f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	4a4b      	ldr	r2, [pc, #300]	; (8005620 <UART_SetConfig+0x58c>)
 80054f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f6:	461a      	mov	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fe:	005a      	lsls	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	441a      	add	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	b29b      	uxth	r3, r3
 8005512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d916      	bls.n	8005548 <UART_SetConfig+0x4b4>
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005520:	d212      	bcs.n	8005548 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f023 030f 	bic.w	r3, r3, #15
 800552a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	b29b      	uxth	r3, r3
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	b29a      	uxth	r2, r3
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	4313      	orrs	r3, r2
 800553c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	89fa      	ldrh	r2, [r7, #14]
 8005544:	60da      	str	r2, [r3, #12]
 8005546:	e057      	b.n	80055f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	76bb      	strb	r3, [r7, #26]
 800554c:	e054      	b.n	80055f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554e:	7efb      	ldrb	r3, [r7, #27]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d828      	bhi.n	80055a6 <UART_SetConfig+0x512>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x4c8>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe f868 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8005584:	6178      	str	r0, [r7, #20]
        break;
 8005586:	e013      	b.n	80055b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fe f87a 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 800558c:	6178      	str	r0, [r7, #20]
        break;
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b24      	ldr	r3, [pc, #144]	; (8005624 <UART_SetConfig+0x590>)
 8005592:	617b      	str	r3, [r7, #20]
        break;
 8005594:	e00c      	b.n	80055b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fd ffef 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 800559a:	6178      	str	r0, [r7, #20]
        break;
 800559c:	e008      	b.n	80055b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a2:	617b      	str	r3, [r7, #20]
        break;
 80055a4:	e004      	b.n	80055b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	76bb      	strb	r3, [r7, #26]
        break;
 80055ae:	bf00      	nop
    }

    if (pclk != 0U)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	4a19      	ldr	r2, [pc, #100]	; (8005620 <UART_SetConfig+0x58c>)
 80055bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c0:	461a      	mov	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	441a      	add	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	b29b      	uxth	r3, r3
 80055da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	d908      	bls.n	80055f4 <UART_SetConfig+0x560>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d204      	bcs.n	80055f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	e001      	b.n	80055f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005614:	7ebb      	ldrb	r3, [r7, #26]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bdb0      	pop	{r4, r5, r7, pc}
 800561e:	bf00      	nop
 8005620:	08005b90 	.word	0x08005b90
 8005624:	00f42400 	.word	0x00f42400

08005628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01a      	beq.n	800573e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005726:	d10a      	bne.n	800573e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af02      	add	r7, sp, #8
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800577c:	f7fb fc9e 	bl	80010bc <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b08      	cmp	r3, #8
 800578e:	d10e      	bne.n	80057ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f82f 	bl	8005802 <UART_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e025      	b.n	80057fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d10e      	bne.n	80057da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f819 	bl	8005802 <UART_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e00f      	b.n	80057fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	e062      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d05e      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581c:	f7fb fc4e 	bl	80010bc <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <UART_WaitOnFlagUntilTimeout+0x30>
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11d      	bne.n	800586e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005840:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e045      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d02e      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588a:	d126      	bne.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005894:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0201 	bic.w	r2, r2, #1
 80058b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e00f      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d08d      	beq.n	8005814 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_UARTEx_DisableFifoMode+0x16>
 8005914:	2302      	movs	r3, #2
 8005916:	e027      	b.n	8005968 <HAL_UARTEx_DisableFifoMode+0x66>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2224      	movs	r2, #36	; 0x24
 8005924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005946:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005988:	2302      	movs	r3, #2
 800598a:	e02d      	b.n	80059e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	; 0x24
 8005998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f84f 	bl	8005a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e02d      	b.n	8005a64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f811 	bl	8005a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d108      	bne.n	8005a8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a8c:	e031      	b.n	8005af2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a8e:	2308      	movs	r3, #8
 8005a90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a92:	2308      	movs	r3, #8
 8005a94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	0e5b      	lsrs	r3, r3, #25
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	0f5b      	lsrs	r3, r3, #29
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	7b3a      	ldrb	r2, [r7, #12]
 8005aba:	4911      	ldr	r1, [pc, #68]	; (8005b00 <UARTEx_SetNbDataToProcess+0x94>)
 8005abc:	5c8a      	ldrb	r2, [r1, r2]
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ac2:	7b3a      	ldrb	r2, [r7, #12]
 8005ac4:	490f      	ldr	r1, [pc, #60]	; (8005b04 <UARTEx_SetNbDataToProcess+0x98>)
 8005ac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	7b7a      	ldrb	r2, [r7, #13]
 8005ad8:	4909      	ldr	r1, [pc, #36]	; (8005b00 <UARTEx_SetNbDataToProcess+0x94>)
 8005ada:	5c8a      	ldrb	r2, [r1, r2]
 8005adc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ae0:	7b7a      	ldrb	r2, [r7, #13]
 8005ae2:	4908      	ldr	r1, [pc, #32]	; (8005b04 <UARTEx_SetNbDataToProcess+0x98>)
 8005ae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ae6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	08005ba8 	.word	0x08005ba8
 8005b04:	08005bb0 	.word	0x08005bb0

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	; (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	; (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	; (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	; (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f000 f820 	bl	8005b60 <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	08005bc0 	.word	0x08005bc0
 8005b44:	08005bc0 	.word	0x08005bc0
 8005b48:	08005bc0 	.word	0x08005bc0
 8005b4c:	08005bc4 	.word	0x08005bc4

08005b50 <memset>:
 8005b50:	4402      	add	r2, r0
 8005b52:	4603      	mov	r3, r0
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d100      	bne.n	8005b5a <memset+0xa>
 8005b58:	4770      	bx	lr
 8005b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b5e:	e7f9      	b.n	8005b54 <memset+0x4>

08005b60 <_init>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr

08005b6c <_fini>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr
