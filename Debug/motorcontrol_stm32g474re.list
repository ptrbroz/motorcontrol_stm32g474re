
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de68  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  0800e048  0800e048  0001e048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa10  0800fa10  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa10  0800fa10  0001fa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa18  0800fa18  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa18  0800fa18  0001fa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa1c  0800fa1c  0001fa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800fa20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009398  20000208  0800fc24  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200095a0  0800fc24  000295a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f8e5  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c46  00000000  00000000  0005fb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002053f  00000000  00000000  0006675f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  00086ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003ee8  00000000  00000000  00088398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002de4a  00000000  00000000  0008c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003183c  00000000  00000000  000ba0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011b4d3  00000000  00000000  000eb906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00206dd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b0  00000000  00000000  00206e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e030 	.word	0x0800e030

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800e030 	.word	0x0800e030

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	2400      	movs	r4, #0
{
 8001040:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	4621      	mov	r1, r4
 8001044:	2220      	movs	r2, #32
 8001046:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001048:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800104c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	f008 fbe9 	bl	8009824 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001054:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001058:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105c:	2204      	movs	r2, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800105e:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001060:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001066:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	e9c0 5100 	strd	r5, r1, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001072:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800107c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	6182      	str	r2, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	f003 fbea 	bl	800485c <HAL_ADC_Init>
 8001088:	b9c8      	cbnz	r0, 80010be <MX_ADC1_Init+0x82>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108a:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC1_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001090:	a901      	add	r1, sp, #4
 8001092:	f004 fb29 	bl	80056e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001096:	b9c8      	cbnz	r0, 80010cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_6;
 800109c:	2306      	movs	r3, #6
 800109e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010a2:	2400      	movs	r4, #0
 80010a4:	257f      	movs	r5, #127	; 0x7f
 80010a6:	2204      	movs	r2, #4
 80010a8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_6;
 80010ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80010b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	f003 fefc 	bl	8004eb0 <HAL_ADC_ConfigChannel>
 80010b8:	b920      	cbnz	r0, 80010c4 <MX_ADC1_Init+0x88>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ba:	b00d      	add	sp, #52	; 0x34
 80010bc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010be:	f002 fd99 	bl	8003bf4 <Error_Handler>
 80010c2:	e7e2      	b.n	800108a <MX_ADC1_Init+0x4e>
    Error_Handler();
 80010c4:	f002 fd96 	bl	8003bf4 <Error_Handler>
}
 80010c8:	b00d      	add	sp, #52	; 0x34
 80010ca:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010cc:	f002 fd92 	bl	8003bf4 <Error_Handler>
 80010d0:	e7e2      	b.n	8001098 <MX_ADC1_Init+0x5c>
 80010d2:	bf00      	nop
 80010d4:	200002a0 	.word	0x200002a0
 80010d8:	19200040 	.word	0x19200040
 80010dc:	00000000 	.word	0x00000000

080010e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4668      	mov	r0, sp
 80010ea:	f008 fb9b 	bl	8009824 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_ADC2_Init+0x88>)
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC2_Init+0x8c>)
 80010f2:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010f8:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010fa:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	2104      	movs	r1, #4
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 80010fe:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001100:	8383      	strh	r3, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	6181      	str	r1, [r0, #24]
  hadc2.Init.NbrOfConversion = 1;
 8001110:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001112:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001116:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001120:	f003 fb9c 	bl	800485c <HAL_ADC_Init>
 8001124:	b998      	cbnz	r0, 800114e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001126:	a30e      	add	r3, pc, #56	; (adr r3, 8001160 <MX_ADC2_Init+0x80>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	2400      	movs	r4, #0
 800112e:	e9cd 2300 	strd	r2, r3, [sp]
 8001132:	257f      	movs	r5, #127	; 0x7f
 8001134:	2204      	movs	r2, #4
 8001136:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_ADC2_Init+0x88>)
 800113a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_7;
 800113c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001140:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001144:	f003 feb4 	bl	8004eb0 <HAL_ADC_ConfigChannel>
 8001148:	b920      	cbnz	r0, 8001154 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800114a:	b009      	add	sp, #36	; 0x24
 800114c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800114e:	f002 fd51 	bl	8003bf4 <Error_Handler>
 8001152:	e7e8      	b.n	8001126 <MX_ADC2_Init+0x46>
    Error_Handler();
 8001154:	f002 fd4e 	bl	8003bf4 <Error_Handler>
}
 8001158:	b009      	add	sp, #36	; 0x24
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	1d500080 	.word	0x1d500080
 8001164:	00000006 	.word	0x00000006
 8001168:	20000234 	.word	0x20000234
 800116c:	50000100 	.word	0x50000100

08001170 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001170:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001172:	2400      	movs	r4, #0
{
 8001174:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	4621      	mov	r1, r4
 8001178:	2220      	movs	r2, #32
 800117a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800117c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001180:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	f008 fb4f 	bl	8009824 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <MX_ADC3_Init+0xa0>)
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_ADC3_Init+0xa4>)
 800118a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
  hadc3.Init.Resolution = ADC_RESOLUTION_6B;
 8001190:	2118      	movs	r1, #24
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.GainCompensation = 0;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8001194:	2301      	movs	r3, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001196:	8384      	strh	r4, [r0, #28]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.Resolution = ADC_RESOLUTION_6B;
 80011a0:	e9c0 5101 	strd	r5, r1, [r0, #4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a4:	60c4      	str	r4, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011aa:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ae:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011b0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b4:	6182      	str	r2, [r0, #24]
  hadc3.Init.NbrOfConversion = 1;
 80011b6:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b8:	f003 fb50 	bl	800485c <HAL_ADC_Init>
 80011bc:	b9d0      	cbnz	r0, 80011f4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <MX_ADC3_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c2:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c4:	a901      	add	r1, sp, #4
 80011c6:	f004 fa8f 	bl	80056e8 <HAL_ADCEx_MultiModeConfigChannel>
 80011ca:	b9d0      	cbnz	r0, 8001202 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011cc:	a30e      	add	r3, pc, #56	; (adr r3, 8001208 <MX_ADC3_Init+0x98>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	2407      	movs	r4, #7
 80011d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011d8:	257f      	movs	r5, #127	; 0x7f
 80011da:	2204      	movs	r2, #4
 80011dc:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_ADC3_Init+0xa0>)
 80011e0:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_12;
 80011e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80011e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ea:	f003 fe61 	bl	8004eb0 <HAL_ADC_ConfigChannel>
 80011ee:	b920      	cbnz	r0, 80011fa <MX_ADC3_Init+0x8a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f0:	b00d      	add	sp, #52	; 0x34
 80011f2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011f4:	f002 fcfe 	bl	8003bf4 <Error_Handler>
 80011f8:	e7e1      	b.n	80011be <MX_ADC3_Init+0x4e>
    Error_Handler();
 80011fa:	f002 fcfb 	bl	8003bf4 <Error_Handler>
}
 80011fe:	b00d      	add	sp, #52	; 0x34
 8001200:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001202:	f002 fcf7 	bl	8003bf4 <Error_Handler>
 8001206:	e7e1      	b.n	80011cc <MX_ADC3_Init+0x5c>
 8001208:	32601000 	.word	0x32601000
 800120c:	00000006 	.word	0x00000006
 8001210:	2000030c 	.word	0x2000030c
 8001214:	50000400 	.word	0x50000400

08001218 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001218:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800121a:	6803      	ldr	r3, [r0, #0]
{
 800121c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8001220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001228:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800122c:	940a      	str	r4, [sp, #40]	; 0x28
  if(adcHandle->Instance==ADC1)
 800122e:	d023      	beq.n	8001278 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001230:	4a3d      	ldr	r2, [pc, #244]	; (8001328 <HAL_ADC_MspInit+0x110>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d004      	beq.n	8001240 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001236:	4a3d      	ldr	r2, [pc, #244]	; (800132c <HAL_ADC_MspInit+0x114>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d04f      	beq.n	80012dc <HAL_ADC_MspInit+0xc4>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800123c:	b00d      	add	sp, #52	; 0x34
 800123e:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001240:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <HAL_ADC_MspInit+0x118>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001246:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124a:	d03c      	beq.n	80012c6 <HAL_ADC_MspInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <HAL_ADC_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	483a      	ldr	r0, [pc, #232]	; (8001338 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001252:	f042 0204 	orr.w	r2, r2, #4
 8001256:	64da      	str	r2, [r3, #76]	; 0x4c
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001260:	2202      	movs	r2, #2
 8001262:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001268:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f005 f984 	bl	800657c <HAL_GPIO_Init>
}
 8001274:	b00d      	add	sp, #52	; 0x34
 8001276:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001278:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <HAL_ADC_MspInit+0x118>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800127e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001280:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001282:	d015      	beq.n	80012b0 <HAL_ADC_MspInit+0x98>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_ADC_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	482c      	ldr	r0, [pc, #176]	; (8001338 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800128a:	f042 0204 	orr.w	r2, r2, #4
 800128e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001298:	2201      	movs	r2, #1
 800129a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f005 f968 	bl	800657c <HAL_GPIO_Init>
}
 80012ac:	b00d      	add	sp, #52	; 0x34
 80012ae:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_ADC_MspInit+0x11c>)
 80012b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]
 80012c4:	e7de      	b.n	8001284 <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_ADC_MspInit+0x11c>)
 80012c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	9b02      	ldr	r3, [sp, #8]
 80012da:	e7b7      	b.n	800124c <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_ADC_MspInit+0x11c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	4817      	ldr	r0, [pc, #92]	; (800133c <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80012e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ee:	9204      	str	r2, [sp, #16]
 80012f0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012f4:	f042 0202 	orr.w	r2, r2, #2
 80012f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001306:	2303      	movs	r3, #3
 8001308:	2201      	movs	r2, #1
 800130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	9d05      	ldr	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f005 f934 	bl	800657c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 1, 0);
 8001314:	4622      	mov	r2, r4
 8001316:	2101      	movs	r1, #1
 8001318:	202f      	movs	r0, #47	; 0x2f
 800131a:	f004 faab 	bl	8005874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800131e:	202f      	movs	r0, #47	; 0x2f
 8001320:	f004 fae0 	bl	80058e4 <HAL_NVIC_EnableIRQ>
}
 8001324:	e78a      	b.n	800123c <HAL_ADC_MspInit+0x24>
 8001326:	bf00      	nop
 8001328:	50000100 	.word	0x50000100
 800132c:	50000400 	.word	0x50000400
 8001330:	20000224 	.word	0x20000224
 8001334:	40021000 	.word	0x40021000
 8001338:	48000800 	.word	0x48000800
 800133c:	48000400 	.word	0x48000400

08001340 <order_phases>:
#include "math_ops.h"

#include "structs.h"
#include "drv8353.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001344:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80014ec <order_phases+0x1ac>
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001348:	ed2d 8b02 	vpush	{d8}
	PHASE_ORDER = 0;
 800134c:	f04f 0900 	mov.w	r9, #0
 8001350:	f8c8 9000 	str.w	r9, [r8]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001354:	4614      	mov	r4, r2

	if(!cal->started){
 8001356:	7c12      	ldrb	r2, [r2, #16]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001358:	b085      	sub	sp, #20
 800135a:	4607      	mov	r7, r0
 800135c:	460e      	mov	r6, r1
 800135e:	461d      	mov	r5, r3
	if(!cal->started){
 8001360:	2a00      	cmp	r2, #0
 8001362:	d072      	beq.n	800144a <order_phases+0x10a>
		printf("Checking phase sign, pole pairs\r\n");
		cal->started = 1;
		cal->start_count = loop_count;
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001364:	68e3      	ldr	r3, [r4, #12]
 8001366:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80014c4 <order_phases+0x184>

    if(cal->time < T1){
 800136a:	eddf 6a57 	vldr	s13, [pc, #348]	; 80014c8 <order_phases+0x188>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800136e:	1aed      	subs	r5, r5, r3
 8001370:	ee07 5a90 	vmov	s15, r5
 8001374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001378:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 800137c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001384:	ed84 7a05 	vstr	s14, [r4, #20]
    if(cal->time < T1){
 8001388:	d467      	bmi.n	800145a <order_phases+0x11a>
        controller->i_q_des = 0.0f;
        commutate(controller, &cal->cal_position);
    	cal->theta_start = encoder->angle_multiturn[0];
    	return;
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800138a:	eddf 6a50 	vldr	s13, [pc, #320]	; 80014cc <order_phases+0x18c>
 800138e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d47d      	bmi.n	8001494 <order_phases+0x154>
    	cal->cal_position.elec_angle = cal->theta_ref;
		commutate(controller, &cal->cal_position);
    	return;
    }

	reset_foc(controller);
 8001398:	4608      	mov	r0, r1
 800139a:	f001 f855 	bl	8002448 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800139e:	ed97 8a03 	vldr	s16, [r7, #12]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80013a2:	edd4 8a06 	vldr	s17, [r4, #24]
 80013a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80014d0 <order_phases+0x190>
 80013aa:	ee78 7a68 	vsub.f32	s15, s16, s17
 80013ae:	eef0 7ae7 	vabs.f32	s15, s15
 80013b2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80013b6:	ee17 0a90 	vmov	r0, s15
 80013ba:	f7ff f8ed 	bl	8000598 <__aeabi_f2d>
 80013be:	ec41 0b10 	vmov	d0, r0, r1
 80013c2:	f00c fb6b 	bl	800da9c <round>
 80013c6:	ec51 0b10 	vmov	r0, r1, d0
 80013ca:	f7ff fc15 	bl	8000bf8 <__aeabi_d2uiz>

	if(cal->theta_start < theta_end){
 80013ce:	eef4 8ac8 	vcmpe.f32	s17, s16
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80013d6:	7020      	strb	r0, [r4, #0]
	if(cal->theta_start < theta_end){
 80013d8:	d431      	bmi.n	800143e <order_phases+0xfe>
		cal->phase_order = 0;
		printf("Phase order correct\r\n");
	}
	else{
		cal->phase_order = 1;
 80013da:	2301      	movs	r3, #1
		printf("Swapping phase sign\r\n");
 80013dc:	483d      	ldr	r0, [pc, #244]	; (80014d4 <order_phases+0x194>)
		cal->phase_order = 1;
 80013de:	f884 3020 	strb.w	r3, [r4, #32]
		printf("Swapping phase sign\r\n");
 80013e2:	f008 ff2d 	bl	800a240 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80013e6:	7821      	ldrb	r1, [r4, #0]
 80013e8:	483b      	ldr	r0, [pc, #236]	; (80014d8 <order_phases+0x198>)
 80013ea:	f008 fe8d 	bl	800a108 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80013ee:	69a0      	ldr	r0, [r4, #24]
 80013f0:	f7ff f8d2 	bl	8000598 <__aeabi_f2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	ee18 0a10 	vmov	r0, s16
 80013fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001400:	f7ff f8ca 	bl	8000598 <__aeabi_f2d>
 8001404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001408:	e9cd 0100 	strd	r0, r1, [sp]
 800140c:	4833      	ldr	r0, [pc, #204]	; (80014dc <order_phases+0x19c>)
 800140e:	f008 fe7b 	bl	800a108 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001412:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001416:	f8c8 3000 	str.w	r3, [r8]
    PPAIRS = (float)cal->ppairs;
 800141a:	7823      	ldrb	r3, [r4, #0]
 800141c:	4930      	ldr	r1, [pc, #192]	; (80014e0 <order_phases+0x1a0>)
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cal->started = 0;
 8001426:	2200      	movs	r2, #0
    cal->done_ordering = 1;	// Finished checking phase order
 8001428:	2301      	movs	r3, #1
    PPAIRS = (float)cal->ppairs;
 800142a:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
    cal->started = 0;
 800142e:	7422      	strb	r2, [r4, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001430:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8001434:	b005      	add	sp, #20
 8001436:	ecbd 8b02 	vpop	{d8}
 800143a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cal->phase_order = 0;
 800143e:	f884 9020 	strb.w	r9, [r4, #32]
		printf("Phase order correct\r\n");
 8001442:	4828      	ldr	r0, [pc, #160]	; (80014e4 <order_phases+0x1a4>)
 8001444:	f008 fefc 	bl	800a240 <puts>
 8001448:	e7cd      	b.n	80013e6 <order_phases+0xa6>
		printf("Checking phase sign, pole pairs\r\n");
 800144a:	4827      	ldr	r0, [pc, #156]	; (80014e8 <order_phases+0x1a8>)
 800144c:	f008 fef8 	bl	800a240 <puts>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001450:	2200      	movs	r2, #0
		cal->started = 1;
 8001452:	2301      	movs	r3, #1
		cal->start_count = loop_count;
 8001454:	60e5      	str	r5, [r4, #12]
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001456:	6162      	str	r2, [r4, #20]
		cal->started = 1;
 8001458:	7423      	strb	r3, [r4, #16]
        cal->cal_position.elec_angle = cal->theta_ref;
 800145a:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
    	cal->theta_ref = 0;//W_CAL*cal->time;
 800145e:	2300      	movs	r3, #0
 8001460:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001462:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        cal->cal_position.elec_velocity = 0;
 8001466:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        controller->i_d_des = I_CAL;
 800146a:	491d      	ldr	r1, [pc, #116]	; (80014e0 <order_phases+0x1a0>)
        cal->cal_position.elec_velocity = 0;
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        controller->i_d_des = I_CAL;
 8001470:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8001472:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
        commutate(controller, &cal->cal_position);
 8001476:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 800147a:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 800147e:	4630      	mov	r0, r6
 8001480:	312c      	adds	r1, #44	; 0x2c
 8001482:	f001 f857 	bl	8002534 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	61a3      	str	r3, [r4, #24]
}
 800148a:	b005      	add	sp, #20
 800148c:	ecbd 8b02 	vpop	{d8}
 8001490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001494:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001498:	ee37 7a67 	vsub.f32	s14, s14, s15
    	cal->cal_position.elec_angle = cal->theta_ref;
 800149c:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80014a0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80014a4:	ee27 7a27 	vmul.f32	s14, s14, s15
		commutate(controller, &cal->cal_position);
 80014a8:	4619      	mov	r1, r3
 80014aa:	4630      	mov	r0, r6
 80014ac:	312c      	adds	r1, #44	; 0x2c
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80014ae:	ed84 7a02 	vstr	s14, [r4, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80014b2:	ed83 7a22 	vstr	s14, [r3, #136]	; 0x88
}
 80014b6:	b005      	add	sp, #20
 80014b8:	ecbd 8b02 	vpop	{d8}
 80014bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		commutate(controller, &cal->cal_position);
 80014c0:	f001 b838 	b.w	8002534 <commutate>
 80014c4:	3827c5ac 	.word	0x3827c5ac
 80014c8:	46c35000 	.word	0x46c35000
 80014cc:	471f03f7 	.word	0x471f03f7
 80014d0:	40c90fdb 	.word	0x40c90fdb
 80014d4:	0800e084 	.word	0x0800e084
 80014d8:	0800e09c 	.word	0x0800e09c
 80014dc:	0800e0b0 	.word	0x0800e0b0
 80014e0:	20000684 	.word	0x20000684
 80014e4:	0800e06c 	.word	0x0800e06c
 80014e8:	0800e048 	.word	0x0800e048
 80014ec:	20008f40 	.word	0x20008f40

080014f0 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80014f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f4:	ed2d 8b02 	vpush	{d8}
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 80014f8:	7c17      	ldrb	r7, [r2, #16]
void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80014fa:	b082      	sub	sp, #8
 80014fc:	4614      	mov	r4, r2
 80014fe:	4680      	mov	r8, r0
 8001500:	460d      	mov	r5, r1
 8001502:	461e      	mov	r6, r3
	if(!cal->started){
 8001504:	2f00      	cmp	r7, #0
 8001506:	f000 80cf 	beq.w	80016a8 <calibrate_encoder+0x1b8>
			cal->start_count = loop_count;
			cal->next_sample_time = T1;
			cal->sample_count = 0;
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800150a:	68d3      	ldr	r3, [r2, #12]
 800150c:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 8001870 <calibrate_encoder+0x380>

    if(cal->time < T1){
 8001510:	eddf 6ad8 	vldr	s13, [pc, #864]	; 8001874 <calibrate_encoder+0x384>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001514:	1af6      	subs	r6, r6, r3
 8001516:	ee07 6a90 	vmov	s15, r6
 800151a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151e:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 8001522:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800152a:	ed82 7a05 	vstr	s14, [r2, #20]
    if(cal->time < T1){
 800152e:	f100 80c7 	bmi.w	80016c0 <calibrate_encoder+0x1d0>

    	cal->theta_start = encoder->angle_multiturn[0];
    	cal->next_sample_time = cal->time;
    	return;
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001532:	4ed1      	ldr	r6, [pc, #836]	; (8001878 <calibrate_encoder+0x388>)
 8001534:	ed9f 6ad1 	vldr	s12, [pc, #836]	; 800187c <calibrate_encoder+0x38c>
 8001538:	edd6 6a0a 	vldr	s13, [r6, #40]	; 0x28
 800153c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001540:	eef0 5a67 	vmov.f32	s11, s15
 8001544:	eee6 5a86 	vfma.f32	s11, s13, s12
 8001548:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	f100 80d2 	bmi.w	80016f8 <calibrate_encoder+0x208>
			cal->sample_count++;

		}
		return;
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001554:	ed9f 6aca 	vldr	s12, [pc, #808]	; 8001880 <calibrate_encoder+0x390>
 8001558:	eee6 7a86 	vfma.f32	s15, s13, s12
 800155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	f100 8126 	bmi.w	80017b4 <calibrate_encoder+0x2c4>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
    }

    reset_foc(controller);
 8001568:	4608      	mov	r0, r1
 800156a:	f000 ff6d 	bl	8002448 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800156e:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 8001572:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001576:	ee17 3a10 	vmov	r3, s14
 800157a:	01da      	lsls	r2, r3, #7
 800157c:	2a00      	cmp	r2, #0
 800157e:	f340 8173 	ble.w	8001868 <calibrate_encoder+0x378>
 8001582:	eb04 2343 	add.w	r3, r4, r3, lsl #9
 8001586:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800158a:	f104 0128 	add.w	r1, r4, #40	; 0x28
    int ezero_mean = 0;
 800158e:	2300      	movs	r3, #0
		ezero_mean += cal->error_arr[i];
 8001590:	f851 0f04 	ldr.w	r0, [r1, #4]!
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001594:	4291      	cmp	r1, r2
		ezero_mean += cal->error_arr[i];
 8001596:	4403      	add	r3, r0
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001598:	d1fa      	bne.n	8001590 <calibrate_encoder+0xa0>
 800159a:	ee07 3a10 	vmov	s14, r3
 800159e:	eeba 7aec 	vcvt.f32.s32	s14, s14, #7
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80015a2:	eec7 6a27 	vdiv.f32	s13, s14, s15

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80015a6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
			}
			moving_avg = moving_avg/window;
			int lut_index = lut_offset + i;
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80015a8:	4fb6      	ldr	r7, [pc, #728]	; (8001884 <calibrate_encoder+0x394>)
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80015aa:	f5d5 3580 	rsbs	r5, r5, #65536	; 0x10000
 80015ae:	bf48      	it	mi
 80015b0:	f205 15ff 	addwmi	r5, r5, #511	; 0x1ff
 80015b4:	126d      	asrs	r5, r5, #9
	for(int i = 0; i<N_LUT; i++){
 80015b6:	f04f 0800 	mov.w	r8, #0
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 80015ba:	eddf 8ab3 	vldr	s17, [pc, #716]	; 8001888 <calibrate_encoder+0x398>
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80015be:	eebd 7ae6 	vcvt.s32.f32	s14, s13
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 80015c2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80015c6:	ee17 2a10 	vmov	r2, s14
 80015ca:	ed84 7a07 	vstr	s14, [r4, #28]
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80015ce:	ee07 8a10 	vmov	s14, r8
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 80015d2:	ee27 6aa8 	vmul.f32	s12, s15, s17
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80015d6:	eef8 5ac7 	vcvt.f32.s32	s11, s14
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 80015da:	ee36 5a48 	vsub.f32	s10, s12, s16
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 80015de:	ee65 5aa7 	vmul.f32	s11, s11, s15
			for(int j = (-window)/2; j<(window)/2; j++){
 80015e2:	f06f 013f 	mvn.w	r1, #63	; 0x3f
			int moving_avg = 0;
 80015e6:	2000      	movs	r0, #0
 80015e8:	e011      	b.n	800160e <calibrate_encoder+0x11e>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 80015ea:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80015ee:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	bf48      	it	mi
 80015f8:	eefd 7ae6 	vcvtmi.s32.f32	s15, s13
				moving_avg += cal->error_arr[index];
 80015fc:	ee17 3a90 	vmov	r3, s15
 8001600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			for(int j = (-window)/2; j<(window)/2; j++){
 8001604:	3101      	adds	r1, #1
				moving_avg += cal->error_arr[index];
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			for(int j = (-window)/2; j<(window)/2; j++){
 8001608:	2940      	cmp	r1, #64	; 0x40
				moving_avg += cal->error_arr[index];
 800160a:	4418      	add	r0, r3
			for(int j = (-window)/2; j<(window)/2; j++){
 800160c:	d012      	beq.n	8001634 <calibrate_encoder+0x144>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 800160e:	ee07 1a90 	vmov	s15, r1
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800161a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 800161e:	ee17 3a90 	vmov	r3, s15
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001622:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001626:	2b00      	cmp	r3, #0
 8001628:	ee36 7a86 	vadd.f32	s14, s13, s12
 800162c:	dadd      	bge.n	80015ea <calibrate_encoder+0xfa>
 800162e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001632:	e7e3      	b.n	80015fc <calibrate_encoder+0x10c>
			moving_avg = moving_avg/window;
 8001634:	2800      	cmp	r0, #0
 8001636:	bfb8      	it	lt
 8001638:	307f      	addlt	r0, #127	; 0x7f
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 800163a:	2d7f      	cmp	r5, #127	; 0x7f
			moving_avg = moving_avg/window;
 800163c:	ea4f 10e0 	mov.w	r0, r0, asr #7
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001640:	dd16      	ble.n	8001670 <calibrate_encoder+0x180>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001642:	f505 53fc 	add.w	r3, r5, #8064	; 0x1f80
 8001646:	330a      	adds	r3, #10
 8001648:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800164c:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 800164e:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
	for(int i = 0; i<N_LUT; i++){
 8001652:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001656:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001658:	4638      	mov	r0, r7
 800165a:	f008 fd55 	bl	800a108 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 800165e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8001662:	f105 0501 	add.w	r5, r5, #1
 8001666:	d015      	beq.n	8001694 <calibrate_encoder+0x1a4>
 8001668:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 800166c:	69e2      	ldr	r2, [r4, #28]
 800166e:	e7ae      	b.n	80015ce <calibrate_encoder+0xde>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001670:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 8001674:	330a      	adds	r3, #10
 8001676:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800167a:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 800167c:	4629      	mov	r1, r5
	for(int i = 0; i<N_LUT; i++){
 800167e:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001682:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001684:	4638      	mov	r0, r7
 8001686:	f008 fd3f 	bl	800a108 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 800168a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800168e:	f105 0501 	add.w	r5, r5, #1
 8001692:	d1e9      	bne.n	8001668 <calibrate_encoder+0x178>

		}

	cal->started = 0;
 8001694:	2200      	movs	r2, #0
	cal->done_cal = 1;
 8001696:	2301      	movs	r3, #1
	cal->started = 0;
 8001698:	7422      	strb	r2, [r4, #16]
	cal->done_cal = 1;
 800169a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 800169e:	b002      	add	sp, #8
 80016a0:	ecbd 8b02 	vpop	{d8}
 80016a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Starting offset cal and linearization\r\n");
 80016a8:	4878      	ldr	r0, [pc, #480]	; (800188c <calibrate_encoder+0x39c>)
 80016aa:	f008 fdc9 	bl	800a240 <puts>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80016ae:	2100      	movs	r1, #0
			cal->started = 1;
 80016b0:	2201      	movs	r2, #1
			cal->next_sample_time = T1;
 80016b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
			cal->start_count = loop_count;
 80016b6:	60e6      	str	r6, [r4, #12]
			cal->sample_count = 0;
 80016b8:	84a7      	strh	r7, [r4, #36]	; 0x24
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80016ba:	6161      	str	r1, [r4, #20]
			cal->started = 1;
 80016bc:	7422      	strb	r2, [r4, #16]
			cal->next_sample_time = T1;
 80016be:	62a3      	str	r3, [r4, #40]	; 0x28
        cal->cal_position.elec_angle = cal->theta_ref;
 80016c0:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        cal->theta_ref = 0;//W_CAL*cal->time;
 80016c4:	2300      	movs	r3, #0
        controller->i_d_des = I_CAL;
 80016c6:	496c      	ldr	r1, [pc, #432]	; (8001878 <calibrate_encoder+0x388>)
        cal->theta_ref = 0;//W_CAL*cal->time;
 80016c8:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80016ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        controller->i_d_des = I_CAL;
 80016ce:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80016d0:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
        commutate(controller, &cal->cal_position);
 80016d4:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 80016d8:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
        commutate(controller, &cal->cal_position);
 80016dc:	4628      	mov	r0, r5
 80016de:	312c      	adds	r1, #44	; 0x2c
 80016e0:	f000 ff28 	bl	8002534 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80016e4:	f8d8 200c 	ldr.w	r2, [r8, #12]
    	cal->next_sample_time = cal->time;
 80016e8:	6963      	ldr	r3, [r4, #20]
    	cal->theta_start = encoder->angle_multiturn[0];
 80016ea:	61a2      	str	r2, [r4, #24]
    	cal->next_sample_time = cal->time;
 80016ec:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80016ee:	b002      	add	sp, #8
 80016f0:	ecbd 8b02 	vpop	{d8}
 80016f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80016f8:	edd2 7a02 	vldr	s15, [r2, #8]
 80016fc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001890 <calibrate_encoder+0x3a0>
		cal->cal_position.elec_angle = cal->theta_ref;
 8001700:	f502 4302 	add.w	r3, r2, #33280	; 0x8200
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001704:	ee77 7a87 	vadd.f32	s15, s15, s14
		commutate(controller, &cal->cal_position);
 8001708:	4619      	mov	r1, r3
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 800170a:	edc2 7a02 	vstr	s15, [r2, #8]
		commutate(controller, &cal->cal_position);
 800170e:	4628      	mov	r0, r5
		cal->cal_position.elec_angle = cal->theta_ref;
 8001710:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 8001714:	312c      	adds	r1, #44	; 0x2c
 8001716:	f000 ff0d 	bl	8002534 <commutate>
		if(cal->time > cal->next_sample_time){
 800171a:	ed94 7a05 	vldr	s14, [r4, #20]
 800171e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8001722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	ddb8      	ble.n	800169e <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800172c:	ed94 7a02 	vldr	s14, [r4, #8]
 8001730:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001894 <calibrate_encoder+0x3a4>
 8001734:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001738:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800173c:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001740:	ee67 7a27 	vmul.f32	s15, s14, s15
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001744:	eb04 0288 	add.w	r2, r4, r8, lsl #2
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001748:	eec7 6a86 	vdiv.f32	s13, s15, s12
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800174c:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001750:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001754:	ee17 7a90 	vmov	r7, s15
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001758:	1bdb      	subs	r3, r3, r7
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800175a:	13dd      	asrs	r5, r3, #15
 800175c:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 8001760:	441d      	add	r5, r3
 8001762:	62d5      	str	r5, [r2, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001764:	f7fe ff18 	bl	8000598 <__aeabi_f2d>
 8001768:	462b      	mov	r3, r5
 800176a:	e9cd 0100 	strd	r0, r1, [sp]
 800176e:	463a      	mov	r2, r7
 8001770:	4849      	ldr	r0, [pc, #292]	; (8001898 <calibrate_encoder+0x3a8>)
 8001772:	4641      	mov	r1, r8
 8001774:	f008 fcc8 	bl	800a108 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001778:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800177c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800189c <calibrate_encoder+0x3ac>
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001780:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001888 <calibrate_encoder+0x398>
 8001784:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001786:	ee37 7a27 	vadd.f32	s14, s14, s15
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 800178a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800178e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001792:	ed96 7a0a 	vldr	s14, [r6, #40]	; 0x28
 8001796:	eee7 7a26 	vfma.f32	s15, s14, s13
 800179a:	ee07 3a10 	vmov	s14, r3
 800179e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	f43f af78 	beq.w	800169e <calibrate_encoder+0x1ae>
			cal->sample_count++;
 80017ae:	3301      	adds	r3, #1
 80017b0:	84a3      	strh	r3, [r4, #36]	; 0x24
 80017b2:	e774      	b.n	800169e <calibrate_encoder+0x1ae>
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017b4:	edd2 7a02 	vldr	s15, [r2, #8]
 80017b8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001890 <calibrate_encoder+0x3a0>
 80017bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
		controller->i_q_des = 0.0f;
 80017c0:	2300      	movs	r3, #0
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017c2:	edc2 7a02 	vstr	s15, [r2, #8]
		controller->i_d_des = I_CAL;
 80017c6:	6cb2      	ldr	r2, [r6, #72]	; 0x48
		controller->i_q_des = 0.0f;
 80017c8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
		cal->cal_position.elec_angle = cal->theta_ref;
 80017cc:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
		controller->i_d_des = I_CAL;
 80017d0:	f8c1 20ac 	str.w	r2, [r1, #172]	; 0xac
		commutate(controller, &cal->cal_position);
 80017d4:	4619      	mov	r1, r3
		cal->cal_position.elec_angle = cal->theta_ref;
 80017d6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 80017da:	4628      	mov	r0, r5
 80017dc:	312c      	adds	r1, #44	; 0x2c
 80017de:	f000 fea9 	bl	8002534 <commutate>
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017e2:	ed94 7a05 	vldr	s14, [r4, #20]
 80017e6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80017ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	f77f af54 	ble.w	800169e <calibrate_encoder+0x1ae>
 80017f6:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 80017f8:	2f00      	cmp	r7, #0
 80017fa:	f43f af50 	beq.w	800169e <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017fe:	ed94 7a02 	vldr	s14, [r4, #8]
 8001802:	eddf 7a24 	vldr	s15, [pc, #144]	; 8001894 <calibrate_encoder+0x3a4>
 8001806:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;// - encoder->raw;
 800180a:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 8001816:	eec7 6a86 	vdiv.f32	s13, s15, s12
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800181a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800181c:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001820:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001824:	ee17 6a90 	vmov	r6, s15
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001828:	1b9b      	subs	r3, r3, r6
			error = error + ENC_CPR*(error<0);
 800182a:	13dd      	asrs	r5, r3, #15
 800182c:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 8001830:	441d      	add	r5, r3
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001832:	4415      	add	r5, r2
 8001834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001838:	106d      	asrs	r5, r5, #1
 800183a:	62cd      	str	r5, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800183c:	f7fe feac 	bl	8000598 <__aeabi_f2d>
 8001840:	462b      	mov	r3, r5
 8001842:	e9cd 0100 	strd	r0, r1, [sp]
 8001846:	4632      	mov	r2, r6
 8001848:	4813      	ldr	r0, [pc, #76]	; (8001898 <calibrate_encoder+0x3a8>)
 800184a:	4639      	mov	r1, r7
 800184c:	f008 fc5c 	bl	800a108 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001850:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8001854:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800189c <calibrate_encoder+0x3ac>
			cal->sample_count--;
 8001858:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800185a:	ee77 7a87 	vadd.f32	s15, s15, s14
			cal->sample_count--;
 800185e:	3b01      	subs	r3, #1
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001860:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
			cal->sample_count--;
 8001864:	84a3      	strh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001866:	e71a      	b.n	800169e <calibrate_encoder+0x1ae>
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001868:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80018a0 <calibrate_encoder+0x3b0>
 800186c:	e699      	b.n	80015a2 <calibrate_encoder+0xb2>
 800186e:	bf00      	nop
 8001870:	3827c5ac 	.word	0x3827c5ac
 8001874:	46c35000 	.word	0x46c35000
 8001878:	20000684 	.word	0x20000684
 800187c:	3f20d97c 	.word	0x3f20d97c
 8001880:	3fa0d97c 	.word	0x3fa0d97c
 8001884:	0800e104 	.word	0x0800e104
 8001888:	43000000 	.word	0x43000000
 800188c:	0800e0cc 	.word	0x0800e0cc
 8001890:	39d1b717 	.word	0x39d1b717
 8001894:	4622f983 	.word	0x4622f983
 8001898:	0800e0f4 	.word	0x0800e0f4
 800189c:	3ba0d97c 	.word	0x3ba0d97c
 80018a0:	00000000 	.word	0x00000000

080018a4 <drv_write_DCR>:
}
void drv_write_register(DRVStruct drv, int reg, int val){
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, (reg<<11)|val);
}
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018a4:	b530      	push	{r4, r5, lr}
 80018a6:	b085      	sub	sp, #20
 80018a8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018ac:	ea44 2242 	orr.w	r2, r4, r2, lsl #9
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018b2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018b8:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018be:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018c4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018c8:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018ca:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 80018ce:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80018d2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018d6:	ac02      	add	r4, sp, #8
 80018d8:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80018e0:	2200      	movs	r2, #0
 80018e2:	2110      	movs	r1, #16
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 80018e8:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80018ec:	f004 ff3a 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80018f0:	2364      	movs	r3, #100	; 0x64
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <drv_write_DCR+0x78>)
 80018f6:	2301      	movs	r3, #1
 80018f8:	4621      	mov	r1, r4
 80018fa:	f10d 020a 	add.w	r2, sp, #10
 80018fe:	f005 fe89 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <drv_write_DCR+0x78>)
 8001904:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001908:	2a02      	cmp	r2, #2
 800190a:	d0fb      	beq.n	8001904 <drv_write_DCR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 800190c:	2201      	movs	r2, #1
 800190e:	2110      	movs	r1, #16
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f004 ff26 	bl	8006764 <HAL_GPIO_WritePin>
	uint16_t mask = 0x07FF;
	//printf("spi w %d, data being %d \n\r", val, (val&mask));
	uint16_t retval = drv_spi_write(&drv, val);
	//printf("loop retval = %d\n\r", (retval&mask));
}
 8001918:	b005      	add	sp, #20
 800191a:	bd30      	pop	{r4, r5, pc}
 800191c:	2000944c 	.word	0x2000944c

08001920 <drv_write_OCPCR>:
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001920:	b530      	push	{r4, r5, lr}
 8001922:	b085      	sub	sp, #20
 8001924:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001928:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 800192c:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 800192e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001932:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
 8001936:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 800193a:	ac02      	add	r4, sp, #8
 800193c:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001940:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001944:	2200      	movs	r2, #0
 8001946:	2110      	movs	r1, #16
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 800194c:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001950:	f004 ff08 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001954:	2364      	movs	r3, #100	; 0x64
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <drv_write_OCPCR+0x60>)
 800195a:	2301      	movs	r3, #1
 800195c:	4621      	mov	r1, r4
 800195e:	f10d 020a 	add.w	r2, sp, #10
 8001962:	f005 fe57 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <drv_write_OCPCR+0x60>)
 8001968:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800196c:	2a02      	cmp	r2, #2
 800196e:	d0fb      	beq.n	8001968 <drv_write_OCPCR+0x48>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001970:	2201      	movs	r2, #1
 8001972:	2110      	movs	r1, #16
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001978:	f004 fef4 	bl	8006764 <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 800197c:	b005      	add	sp, #20
 800197e:	bd30      	pop	{r4, r5, pc}
 8001980:	2000944c 	.word	0x2000944c

08001984 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001984:	b530      	push	{r4, r5, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 800198c:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001990:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001992:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001996:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001998:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 800199c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 800199e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019a4:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019a8:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019aa:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80019ae:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80019b2:	ea42 2343 	orr.w	r3, r2, r3, lsl #9
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019b6:	ac02      	add	r4, sp, #8
 80019b8:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019bc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80019c0:	2200      	movs	r2, #0
 80019c2:	2110      	movs	r1, #16
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 80019c8:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80019cc:	f004 feca 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <drv_write_CSACR+0x78>)
 80019d6:	2301      	movs	r3, #1
 80019d8:	4621      	mov	r1, r4
 80019da:	f10d 020a 	add.w	r2, sp, #10
 80019de:	f005 fe19 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <drv_write_CSACR+0x78>)
 80019e4:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80019e8:	2a02      	cmp	r2, #2
 80019ea:	d0fb      	beq.n	80019e4 <drv_write_CSACR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80019ec:	2201      	movs	r2, #1
 80019ee:	2110      	movs	r1, #16
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f004 feb6 	bl	8006764 <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 80019f8:	b005      	add	sp, #20
 80019fa:	bd30      	pop	{r4, r5, pc}
 80019fc:	2000944c 	.word	0x2000944c

08001a00 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8001a00:	b530      	push	{r4, r5, lr}
 8001a02:	b087      	sub	sp, #28
 8001a04:	ac02      	add	r4, sp, #8
 8001a06:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001a0e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001a12:	9004      	str	r0, [sp, #16]
 8001a14:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a20:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a24:	f004 fe9e 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <drv_enable_gd+0xa0>)
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	a904      	add	r1, sp, #16
 8001a30:	f10d 0212 	add.w	r2, sp, #18
 8001a34:	2301      	movs	r3, #1
 8001a36:	4605      	mov	r5, r0
 8001a38:	f005 fdec 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001a3c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d0fb      	beq.n	8001a3c <drv_enable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001a44:	2201      	movs	r2, #1
 8001a46:	2110      	movs	r1, #16
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f004 fe8a 	bl	8006764 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001a50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a54:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001a58:	f8ad 1014 	strh.w	r1, [sp, #20]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
	drv_spi_write(&drv, (reg<<11)|val);
 8001a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a64:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a6e:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a72:	f004 fe77 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a76:	2364      	movs	r3, #100	; 0x64
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <drv_enable_gd+0xa0>)
 8001a7c:	f10d 0212 	add.w	r2, sp, #18
 8001a80:	a904      	add	r1, sp, #16
 8001a82:	2301      	movs	r3, #1
 8001a84:	f005 fdc6 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001a88:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d0fb      	beq.n	8001a88 <drv_enable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001a90:	2201      	movs	r2, #1
 8001a92:	2110      	movs	r1, #16
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f004 fe64 	bl	8006764 <HAL_GPIO_WritePin>
}
 8001a9c:	b007      	add	sp, #28
 8001a9e:	bd30      	pop	{r4, r5, pc}
 8001aa0:	2000944c 	.word	0x2000944c

08001aa4 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8001aa4:	b530      	push	{r4, r5, lr}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	ac02      	add	r4, sp, #8
 8001aaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aae:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001ab2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001ab6:	9004      	str	r0, [sp, #16]
 8001ab8:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001abc:	2200      	movs	r2, #0
 8001abe:	2110      	movs	r1, #16
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001ac4:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001ac8:	f004 fe4c 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001acc:	2364      	movs	r3, #100	; 0x64
 8001ace:	481d      	ldr	r0, [pc, #116]	; (8001b44 <drv_disable_gd+0xa0>)
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	a904      	add	r1, sp, #16
 8001ad4:	f10d 0212 	add.w	r2, sp, #18
 8001ad8:	2301      	movs	r3, #1
 8001ada:	4605      	mov	r5, r0
 8001adc:	f005 fd9a 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001ae0:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d0fb      	beq.n	8001ae0 <drv_disable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2110      	movs	r1, #16
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f004 fe38 	bl	8006764 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001af4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001afc:	f8ad 1014 	strh.w	r1, [sp, #20]
	drv_spi_write(&drv, (reg<<11)|val);
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b12:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b16:	f004 fe25 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b1a:	2364      	movs	r3, #100	; 0x64
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4809      	ldr	r0, [pc, #36]	; (8001b44 <drv_disable_gd+0xa0>)
 8001b20:	f10d 0212 	add.w	r2, sp, #18
 8001b24:	a904      	add	r1, sp, #16
 8001b26:	2301      	movs	r3, #1
 8001b28:	f005 fd74 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b2c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d0fb      	beq.n	8001b2c <drv_disable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b34:	2201      	movs	r2, #1
 8001b36:	2110      	movs	r1, #16
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f004 fe12 	bl	8006764 <HAL_GPIO_WritePin>
}
 8001b40:	b007      	add	sp, #28
 8001b42:	bd30      	pop	{r4, r5, pc}
 8001b44:	2000944c 	.word	0x2000944c

08001b48 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	ac02      	add	r4, sp, #8
 8001b4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b52:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b5a:	9004      	str	r0, [sp, #16]
 8001b5c:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b60:	2200      	movs	r2, #0
 8001b62:	2110      	movs	r1, #16
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b68:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b6c:	f004 fdfa 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b70:	2364      	movs	r3, #100	; 0x64
 8001b72:	486a      	ldr	r0, [pc, #424]	; (8001d1c <drv_print_faults+0x1d4>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	a904      	add	r1, sp, #16
 8001b78:	f10d 0212 	add.w	r2, sp, #18
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	4606      	mov	r6, r0
 8001b80:	f005 fd48 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b84:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d0fb      	beq.n	8001b84 <drv_print_faults+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2110      	movs	r1, #16
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b94:	f004 fde6 	bl	8006764 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001b98:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001b9c:	f248 0301 	movw	r3, #32769	; 0x8001
	return drv->spi_rx_word;
 8001ba0:	f8bd 5012 	ldrh.w	r5, [sp, #18]
    uint16_t val1 = drv_read_FSR1(drv);
    uint16_t val2 = drv_read_FSR2(drv);
 8001ba4:	f8ad 1014 	strh.w	r1, [sp, #20]
	drv->spi_tx_word = val;
 8001ba8:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001baa:	2200      	movs	r2, #0
 8001bac:	2110      	movs	r1, #16
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001bb2:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bb6:	f004 fdd5 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001bba:	2364      	movs	r3, #100	; 0x64
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4857      	ldr	r0, [pc, #348]	; (8001d1c <drv_print_faults+0x1d4>)
 8001bc0:	f10d 0212 	add.w	r2, sp, #18
 8001bc4:	a904      	add	r1, sp, #16
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f005 fd24 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001bcc:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d0fb      	beq.n	8001bcc <drv_print_faults+0x84>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f004 fdc2 	bl	8006764 <HAL_GPIO_WritePin>

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001be0:	056e      	lsls	r6, r5, #21
	return drv->spi_rx_word;
 8001be2:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001be6:	d42b      	bmi.n	8001c40 <drv_print_faults+0xf8>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001be8:	05a8      	lsls	r0, r5, #22
 8001bea:	d42e      	bmi.n	8001c4a <drv_print_faults+0x102>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001bec:	05e9      	lsls	r1, r5, #23
 8001bee:	d431      	bmi.n	8001c54 <drv_print_faults+0x10c>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001bf0:	062a      	lsls	r2, r5, #24
 8001bf2:	d434      	bmi.n	8001c5e <drv_print_faults+0x116>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001bf4:	066b      	lsls	r3, r5, #25
 8001bf6:	d437      	bmi.n	8001c68 <drv_print_faults+0x120>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001bf8:	06ae      	lsls	r6, r5, #26
 8001bfa:	d43a      	bmi.n	8001c72 <drv_print_faults+0x12a>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001bfc:	06e8      	lsls	r0, r5, #27
 8001bfe:	d43d      	bmi.n	8001c7c <drv_print_faults+0x134>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001c00:	0729      	lsls	r1, r5, #28
 8001c02:	d440      	bmi.n	8001c86 <drv_print_faults+0x13e>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001c04:	076a      	lsls	r2, r5, #29
 8001c06:	d443      	bmi.n	8001c90 <drv_print_faults+0x148>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001c08:	07ab      	lsls	r3, r5, #30
 8001c0a:	d446      	bmi.n	8001c9a <drv_print_faults+0x152>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001c0c:	07ee      	lsls	r6, r5, #31
 8001c0e:	d449      	bmi.n	8001ca4 <drv_print_faults+0x15c>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001c10:	0565      	lsls	r5, r4, #21
 8001c12:	d44c      	bmi.n	8001cae <drv_print_faults+0x166>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001c14:	05a0      	lsls	r0, r4, #22
 8001c16:	d44f      	bmi.n	8001cb8 <drv_print_faults+0x170>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001c18:	05e1      	lsls	r1, r4, #23
 8001c1a:	d452      	bmi.n	8001cc2 <drv_print_faults+0x17a>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001c1c:	0622      	lsls	r2, r4, #24
 8001c1e:	d455      	bmi.n	8001ccc <drv_print_faults+0x184>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001c20:	0663      	lsls	r3, r4, #25
 8001c22:	d458      	bmi.n	8001cd6 <drv_print_faults+0x18e>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001c24:	06a6      	lsls	r6, r4, #26
 8001c26:	d45b      	bmi.n	8001ce0 <drv_print_faults+0x198>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001c28:	06e5      	lsls	r5, r4, #27
 8001c2a:	d45e      	bmi.n	8001cea <drv_print_faults+0x1a2>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001c2c:	0720      	lsls	r0, r4, #28
 8001c2e:	d461      	bmi.n	8001cf4 <drv_print_faults+0x1ac>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8001c30:	0761      	lsls	r1, r4, #29
 8001c32:	d464      	bmi.n	8001cfe <drv_print_faults+0x1b6>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8001c34:	07a2      	lsls	r2, r4, #30
 8001c36:	d467      	bmi.n	8001d08 <drv_print_faults+0x1c0>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8001c38:	07e3      	lsls	r3, r4, #31
 8001c3a:	d46a      	bmi.n	8001d12 <drv_print_faults+0x1ca>

}
 8001c3c:	b006      	add	sp, #24
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001c40:	4837      	ldr	r0, [pc, #220]	; (8001d20 <drv_print_faults+0x1d8>)
 8001c42:	f008 fa61 	bl	800a108 <iprintf>
    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001c46:	05a8      	lsls	r0, r5, #22
 8001c48:	d5d0      	bpl.n	8001bec <drv_print_faults+0xa4>
 8001c4a:	4836      	ldr	r0, [pc, #216]	; (8001d24 <drv_print_faults+0x1dc>)
 8001c4c:	f008 fa5c 	bl	800a108 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001c50:	05e9      	lsls	r1, r5, #23
 8001c52:	d5cd      	bpl.n	8001bf0 <drv_print_faults+0xa8>
 8001c54:	4834      	ldr	r0, [pc, #208]	; (8001d28 <drv_print_faults+0x1e0>)
 8001c56:	f008 fa57 	bl	800a108 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001c5a:	062a      	lsls	r2, r5, #24
 8001c5c:	d5ca      	bpl.n	8001bf4 <drv_print_faults+0xac>
 8001c5e:	4833      	ldr	r0, [pc, #204]	; (8001d2c <drv_print_faults+0x1e4>)
 8001c60:	f008 fa52 	bl	800a108 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001c64:	066b      	lsls	r3, r5, #25
 8001c66:	d5c7      	bpl.n	8001bf8 <drv_print_faults+0xb0>
 8001c68:	4831      	ldr	r0, [pc, #196]	; (8001d30 <drv_print_faults+0x1e8>)
 8001c6a:	f008 fa4d 	bl	800a108 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001c6e:	06ae      	lsls	r6, r5, #26
 8001c70:	d5c4      	bpl.n	8001bfc <drv_print_faults+0xb4>
 8001c72:	4830      	ldr	r0, [pc, #192]	; (8001d34 <drv_print_faults+0x1ec>)
 8001c74:	f008 fa48 	bl	800a108 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001c78:	06e8      	lsls	r0, r5, #27
 8001c7a:	d5c1      	bpl.n	8001c00 <drv_print_faults+0xb8>
 8001c7c:	482e      	ldr	r0, [pc, #184]	; (8001d38 <drv_print_faults+0x1f0>)
 8001c7e:	f008 fa43 	bl	800a108 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001c82:	0729      	lsls	r1, r5, #28
 8001c84:	d5be      	bpl.n	8001c04 <drv_print_faults+0xbc>
 8001c86:	482d      	ldr	r0, [pc, #180]	; (8001d3c <drv_print_faults+0x1f4>)
 8001c88:	f008 fa3e 	bl	800a108 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001c8c:	076a      	lsls	r2, r5, #29
 8001c8e:	d5bb      	bpl.n	8001c08 <drv_print_faults+0xc0>
 8001c90:	482b      	ldr	r0, [pc, #172]	; (8001d40 <drv_print_faults+0x1f8>)
 8001c92:	f008 fa39 	bl	800a108 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001c96:	07ab      	lsls	r3, r5, #30
 8001c98:	d5b8      	bpl.n	8001c0c <drv_print_faults+0xc4>
 8001c9a:	482a      	ldr	r0, [pc, #168]	; (8001d44 <drv_print_faults+0x1fc>)
 8001c9c:	f008 fa34 	bl	800a108 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001ca0:	07ee      	lsls	r6, r5, #31
 8001ca2:	d5b5      	bpl.n	8001c10 <drv_print_faults+0xc8>
 8001ca4:	4828      	ldr	r0, [pc, #160]	; (8001d48 <drv_print_faults+0x200>)
 8001ca6:	f008 fa2f 	bl	800a108 <iprintf>
    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001caa:	0565      	lsls	r5, r4, #21
 8001cac:	d5b2      	bpl.n	8001c14 <drv_print_faults+0xcc>
 8001cae:	4827      	ldr	r0, [pc, #156]	; (8001d4c <drv_print_faults+0x204>)
 8001cb0:	f008 fa2a 	bl	800a108 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001cb4:	05a0      	lsls	r0, r4, #22
 8001cb6:	d5af      	bpl.n	8001c18 <drv_print_faults+0xd0>
 8001cb8:	4825      	ldr	r0, [pc, #148]	; (8001d50 <drv_print_faults+0x208>)
 8001cba:	f008 fa25 	bl	800a108 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001cbe:	05e1      	lsls	r1, r4, #23
 8001cc0:	d5ac      	bpl.n	8001c1c <drv_print_faults+0xd4>
 8001cc2:	4824      	ldr	r0, [pc, #144]	; (8001d54 <drv_print_faults+0x20c>)
 8001cc4:	f008 fa20 	bl	800a108 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001cc8:	0622      	lsls	r2, r4, #24
 8001cca:	d5a9      	bpl.n	8001c20 <drv_print_faults+0xd8>
 8001ccc:	4822      	ldr	r0, [pc, #136]	; (8001d58 <drv_print_faults+0x210>)
 8001cce:	f008 fa1b 	bl	800a108 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001cd2:	0663      	lsls	r3, r4, #25
 8001cd4:	d5a6      	bpl.n	8001c24 <drv_print_faults+0xdc>
 8001cd6:	4821      	ldr	r0, [pc, #132]	; (8001d5c <drv_print_faults+0x214>)
 8001cd8:	f008 fa16 	bl	800a108 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001cdc:	06a6      	lsls	r6, r4, #26
 8001cde:	d5a3      	bpl.n	8001c28 <drv_print_faults+0xe0>
 8001ce0:	481f      	ldr	r0, [pc, #124]	; (8001d60 <drv_print_faults+0x218>)
 8001ce2:	f008 fa11 	bl	800a108 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001ce6:	06e5      	lsls	r5, r4, #27
 8001ce8:	d5a0      	bpl.n	8001c2c <drv_print_faults+0xe4>
 8001cea:	481e      	ldr	r0, [pc, #120]	; (8001d64 <drv_print_faults+0x21c>)
 8001cec:	f008 fa0c 	bl	800a108 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001cf0:	0720      	lsls	r0, r4, #28
 8001cf2:	d59d      	bpl.n	8001c30 <drv_print_faults+0xe8>
 8001cf4:	481c      	ldr	r0, [pc, #112]	; (8001d68 <drv_print_faults+0x220>)
 8001cf6:	f008 fa07 	bl	800a108 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8001cfa:	0761      	lsls	r1, r4, #29
 8001cfc:	d59a      	bpl.n	8001c34 <drv_print_faults+0xec>
 8001cfe:	481b      	ldr	r0, [pc, #108]	; (8001d6c <drv_print_faults+0x224>)
 8001d00:	f008 fa02 	bl	800a108 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8001d04:	07a2      	lsls	r2, r4, #30
 8001d06:	d597      	bpl.n	8001c38 <drv_print_faults+0xf0>
 8001d08:	4819      	ldr	r0, [pc, #100]	; (8001d70 <drv_print_faults+0x228>)
 8001d0a:	f008 f9fd 	bl	800a108 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8001d0e:	07e3      	lsls	r3, r4, #31
 8001d10:	d594      	bpl.n	8001c3c <drv_print_faults+0xf4>
 8001d12:	4818      	ldr	r0, [pc, #96]	; (8001d74 <drv_print_faults+0x22c>)
 8001d14:	f008 f9f8 	bl	800a108 <iprintf>
}
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	2000944c 	.word	0x2000944c
 8001d20:	0800e110 	.word	0x0800e110
 8001d24:	0800e11c 	.word	0x0800e11c
 8001d28:	0800e128 	.word	0x0800e128
 8001d2c:	0800e130 	.word	0x0800e130
 8001d30:	0800e138 	.word	0x0800e138
 8001d34:	0800e140 	.word	0x0800e140
 8001d38:	0800e14c 	.word	0x0800e14c
 8001d3c:	0800e158 	.word	0x0800e158
 8001d40:	0800e164 	.word	0x0800e164
 8001d44:	0800e170 	.word	0x0800e170
 8001d48:	0800e17c 	.word	0x0800e17c
 8001d4c:	0800e188 	.word	0x0800e188
 8001d50:	0800e190 	.word	0x0800e190
 8001d54:	0800e198 	.word	0x0800e198
 8001d58:	0800e1a0 	.word	0x0800e1a0
 8001d5c:	0800e1a8 	.word	0x0800e1a8
 8001d60:	0800e1b0 	.word	0x0800e1b0
 8001d64:	0800e1bc 	.word	0x0800e1bc
 8001d68:	0800e1c8 	.word	0x0800e1c8
 8001d6c:	0800e1d4 	.word	0x0800e1d4
 8001d70:	0800e1e0 	.word	0x0800e1e0
 8001d74:	0800e1ec 	.word	0x0800e1ec

08001d78 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <MX_FDCAN2_Init+0x40>)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_FDCAN2_Init+0x44>)
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d7c:	2200      	movs	r2, #0
{
 8001d7e:	b510      	push	{r4, lr}
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 1;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 12;
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001d80:	2103      	movs	r1, #3
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001d82:	240c      	movs	r4, #12
  hfdcan2.Instance = FDCAN2;
 8001d84:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001d86:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.NominalPrescaler = 1;
 8001d88:	2301      	movs	r3, #1
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001d8a:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001d8e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001d92:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hfdcan2.Init.DataTimeSeg1 = 12;
  hfdcan2.Init.DataTimeSeg2 = 3;
  hfdcan2.Init.StdFiltersNbr = 1;
  hfdcan2.Init.ExtFiltersNbr = 1;
 8001d96:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.ProtocolException = DISABLE;
 8001d9a:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d9c:	63c2      	str	r2, [r0, #60]	; 0x3c
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001d9e:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001da0:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001da2:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001da4:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001da6:	f003 fe3f 	bl	8005a28 <HAL_FDCAN_Init>
 8001daa:	b900      	cbnz	r0, 8001dae <MX_FDCAN2_Init+0x36>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001db2:	f001 bf1f 	b.w	8003bf4 <Error_Handler>
 8001db6:	bf00      	nop
 8001db8:	20000378 	.word	0x20000378
 8001dbc:	40006800 	.word	0x40006800

08001dc0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001dc0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(fdcanHandle->Instance==FDCAN2)
 8001dc2:	6802      	ldr	r2, [r0, #0]
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_FDCAN_MspInit+0x74>)
{
 8001dc6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	2400      	movs	r4, #0
  if(fdcanHandle->Instance==FDCAN2)
 8001dca:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001dd0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001dd4:	9406      	str	r4, [sp, #24]
  if(fdcanHandle->Instance==FDCAN2)
 8001dd6:	d001      	beq.n	8001ddc <HAL_FDCAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001dd8:	b008      	add	sp, #32
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ddc:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	a902      	add	r1, sp, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	4814      	ldr	r0, [pc, #80]	; (8001e38 <HAL_FDCAN_MspInit+0x78>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001de6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001dea:	659a      	str	r2, [r3, #88]	; 0x58
 8001dec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dee:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df8:	f042 0202 	orr.w	r2, r2, #2
 8001dfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e06:	2260      	movs	r2, #96	; 0x60
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e0e:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e10:	2300      	movs	r3, #0
 8001e12:	2200      	movs	r2, #0
 8001e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e1a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f004 fbae 	bl	800657c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 1, 0);
 8001e20:	4622      	mov	r2, r4
 8001e22:	2101      	movs	r1, #1
 8001e24:	2056      	movs	r0, #86	; 0x56
 8001e26:	f003 fd25 	bl	8005874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001e2a:	2056      	movs	r0, #86	; 0x56
 8001e2c:	f003 fd5a 	bl	80058e4 <HAL_NVIC_EnableIRQ>
}
 8001e30:	b008      	add	sp, #32
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	40006800 	.word	0x40006800
 8001e38:	48000400 	.word	0x48000400

08001e3c <can_rx_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8001e3c:	b530      	push	{r4, r5, lr}
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <can_rx_init+0x3c>)
	msg->filter.IdType = FDCAN_STANDARD_ID;
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	//msg->filter.FilterConfig = FDCAN_FILTER_DISABLE;


	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001e40:	4d0e      	ldr	r5, [pc, #56]	; (8001e7c <can_rx_init+0x40>)
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001e42:	685c      	ldr	r4, [r3, #4]
 8001e44:	6444      	str	r4, [r0, #68]	; 0x44
void can_rx_init(CANRxMessage *msg){
 8001e46:	b083      	sub	sp, #12
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001e48:	2402      	movs	r4, #2
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001e4a:	2201      	movs	r2, #1
	msg->filter.FilterIndex = 0;
 8001e4c:	2300      	movs	r3, #0
	msg->filter.FilterID2 = 0x7FF;
 8001e4e:	f240 71ff 	movw	r1, #2047	; 0x7ff
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8001e52:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
	msg->filter.FilterID2 = 0x7FF;
 8001e56:	6481      	str	r1, [r0, #72]	; 0x48
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001e58:	6402      	str	r2, [r0, #64]	; 0x40
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001e5a:	63c4      	str	r4, [r0, #60]	; 0x3c
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001e5c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001e60:	4628      	mov	r0, r5
 8001e62:	f003 ff61 	bl	8005d28 <HAL_FDCAN_ConfigFilter>

	//HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT);
 8001e66:	9400      	str	r4, [sp, #0]
 8001e68:	4628      	mov	r0, r5
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	4621      	mov	r1, r4
 8001e70:	f003 ff8c 	bl	8005d8c <HAL_FDCAN_ConfigGlobalFilter>
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
	msg->filter.FilterActivation=ENABLE;
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
	*/
}
 8001e74:	b003      	add	sp, #12
 8001e76:	bd30      	pop	{r4, r5, pc}
 8001e78:	20008f40 	.word	0x20008f40
 8001e7c:	20000378 	.word	0x20000378

08001e80 <can_tx_init>:
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001e80:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <can_tx_init+0x24>)
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001e82:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001e86:	6891      	ldr	r1, [r2, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001e88:	6143      	str	r3, [r0, #20]
	msg->tx_header.MessageMarker = 0; //???
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001e8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001e8e:	2300      	movs	r3, #0
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
 8001e90:	e9c0 3306 	strd	r3, r3, [r0, #24]
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001e94:	6081      	str	r1, [r0, #8]
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001e96:	6242      	str	r2, [r0, #36]	; 0x24
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001e98:	6203      	str	r3, [r0, #32]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 8001e9a:	60c3      	str	r3, [r0, #12]
	msg->tx_header.MessageMarker = 0; //???
 8001e9c:	6283      	str	r3, [r0, #40]	; 0x28
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8001e9e:	6103      	str	r3, [r0, #16]
	msg->tx_header.DLC = 6; 			// message size of 8 byte - DataLength
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard - TxFrameType
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request? - ???
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID - ??? Probably Identifier
	*/
}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20008f40 	.word	0x20008f40

08001ea8 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eae:	ed2d 8b02 	vpush	{d8}
 8001eb2:	ac0a      	add	r4, sp, #40	; 0x28
 8001eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001eb8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8001ebc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001ec0:	f8bd 0029 	ldrh.w	r0, [sp, #41]	; 0x29
 8001ec4:	4c2f      	ldr	r4, [pc, #188]	; (8001f84 <unpack_cmd+0xdc>)
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001ec6:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001eca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001ece:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001ed2:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001ed6:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 8001eda:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001ede:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8001f88 <unpack_cmd+0xe0>
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001ee2:	ea4f 2902 	mov.w	r9, r2, lsl #8
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001ee6:	ea4f 2803 	mov.w	r8, r3, lsl #8
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001eea:	ba40      	rev16	r0, r0
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001eec:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001ef0:	091b      	lsrs	r3, r3, #4
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001ef2:	0912      	lsrs	r2, r2, #4
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001ef4:	ea49 0901 	orr.w	r9, r9, r1
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001ef8:	b280      	uxth	r0, r0
 8001efa:	2110      	movs	r1, #16
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001efc:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f00:	ea42 1606 	orr.w	r6, r2, r6, lsl #4
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001f04:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f08:	ea48 0807 	orr.w	r8, r8, r7
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001f0c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f0e:	f001 fed1 	bl	8003cb4 <uint_to_float>
 8001f12:	ed87 0a00 	vstr	s0, [r7]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001f16:	edd4 0a16 	vldr	s1, [r4, #88]	; 0x58
 8001f1a:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8001f1e:	4630      	mov	r0, r6
 8001f20:	210c      	movs	r1, #12
 8001f22:	f001 fec7 	bl	8003cb4 <uint_to_float>
 8001f26:	ed87 0a01 	vstr	s0, [r7, #4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001f2a:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
 8001f2e:	4648      	mov	r0, r9
 8001f30:	eeb0 0a48 	vmov.f32	s0, s16
 8001f34:	210c      	movs	r1, #12
 8001f36:	f001 febd 	bl	8003cb4 <uint_to_float>
 8001f3a:	ed87 0a02 	vstr	s0, [r7, #8]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001f3e:	edd4 0a18 	vldr	s1, [r4, #96]	; 0x60
 8001f42:	4628      	mov	r0, r5
 8001f44:	eeb0 0a48 	vmov.f32	s0, s16
 8001f48:	210c      	movs	r1, #12
 8001f4a:	f001 feb3 	bl	8003cb4 <uint_to_float>
 8001f4e:	ed87 0a03 	vstr	s0, [r7, #12]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001f52:	edd4 0a03 	vldr	s1, [r4, #12]
 8001f56:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8001f5a:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8001f5e:	ee60 0a87 	vmul.f32	s1, s1, s14
 8001f62:	4640      	mov	r0, r8
 8001f64:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001f68:	210c      	movs	r1, #12
 8001f6a:	eeb1 0a60 	vneg.f32	s0, s1
 8001f6e:	f001 fea1 	bl	8003cb4 <uint_to_float>

    }
 8001f72:	ecbd 8b02 	vpop	{d8}
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001f76:	ed87 0a04 	vstr	s0, [r7, #16]
    }
 8001f7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f7e:	b004      	add	sp, #16
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000684 	.word	0x20000684
 8001f88:	00000000 	.word	0x00000000

08001f8c <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 8001f8c:	b410      	push	{r4}
 8001f8e:	4c16      	ldr	r4, [pc, #88]	; (8001fe8 <load_from_flash+0x5c>)
 8001f90:	f1c4 6000 	rsb	r0, r4, #134217728	; 0x8000000
 8001f94:	4623      	mov	r3, r4
 8001f96:	f500 20fb 	add.w	r0, r0, #514048	; 0x7d800
 8001f9a:	f504 7480 	add.w	r4, r4, #256	; 0x100
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
    	uint32_t address = FLOATS_ADDR + i*4;
    	uint64_t doubleWord = *((uint64_t*)(address));
 8001f9e:	18c2      	adds	r2, r0, r3
 8001fa0:	58c1      	ldr	r1, [r0, r3]
 8001fa2:	6852      	ldr	r2, [r2, #4]

    	float float1 = *((float*)(&word1));
    	float float2 = *((float*)(&word2));

    	__float_reg[i] =   float1;
    	__float_reg[i+1] = float2;
 8001fa4:	605a      	str	r2, [r3, #4]
    	__float_reg[i] =   float1;
 8001fa6:	6019      	str	r1, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 8001fa8:	3308      	adds	r3, #8
 8001faa:	429c      	cmp	r4, r3
 8001fac:	d1f7      	bne.n	8001f9e <load_from_flash+0x12>
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <load_from_flash+0x60>)
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <load_from_flash+0x64>)

    }
    for(int i = 0;i<INTSCOUNT;i=i+2){
 8001fb2:	4810      	ldr	r0, [pc, #64]	; (8001ff4 <load_from_flash+0x68>)
 8001fb4:	1d11      	adds	r1, r2, #4
    	uint64_t doubleWord = *((uint64_t*)(address));

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;

		float int1 = *((int*)(&word1));
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		float int2 = *((int*)(&word2));
 8001fbe:	edd3 7a01 	vldr	s15, [r3, #4]

		__int_reg[i] =   int1;
 8001fc2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		float int2 = *((int*)(&word2));
 8001fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		__int_reg[i] =   int1;
 8001fca:	ee17 4a10 	vmov	r4, s14
		__int_reg[i+1] = int2;
 8001fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		__int_reg[i] =   int1;
 8001fd2:	50d4      	str	r4, [r2, r3]
		__int_reg[i+1] = int2;
 8001fd4:	ee17 4a90 	vmov	r4, s15
 8001fd8:	50cc      	str	r4, [r1, r3]
    for(int i = 0;i<INTSCOUNT;i=i+2){
 8001fda:	3308      	adds	r3, #8
 8001fdc:	4283      	cmp	r3, r0
 8001fde:	d1ea      	bne.n	8001fb6 <load_from_flash+0x2a>
    }
}
 8001fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000684 	.word	0x20000684
 8001fec:	17f8b640 	.word	0x17f8b640
 8001ff0:	0807d900 	.word	0x0807d900
 8001ff4:	0807dd00 	.word	0x0807dd00

08001ff8 <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	b087      	sub	sp, #28

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8001ffc:	f004 f97a 	bl	80062f4 <HAL_FLASH_Unlock>
	if(status!=HAL_OK) return 1;
 8002000:	b110      	cbz	r0, 8002008 <save_to_flash+0x10>
 8002002:	2001      	movs	r0, #1
    }
    HAL_FLASH_Lock();
    HAL_FLASH_OB_Lock();
    printf("SaveToFlash All Ok\n");
    return 0;
}
 8002004:	b007      	add	sp, #28
 8002006:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = HAL_FLASH_OB_Unlock();
 8002008:	f004 f994 	bl	8006334 <HAL_FLASH_OB_Unlock>
	if(status!=HAL_OK) return 2;
 800200c:	2800      	cmp	r0, #0
 800200e:	d134      	bne.n	800207a <save_to_flash+0x82>
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002010:	2305      	movs	r3, #5
 8002012:	227b      	movs	r2, #123	; 0x7b
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8002014:	a901      	add	r1, sp, #4
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002016:	2400      	movs	r4, #0
 8002018:	2502      	movs	r5, #2
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 800201a:	a802      	add	r0, sp, #8
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800201c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002020:	e9cd 4502 	strd	r4, r5, [sp, #8]
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8002024:	f004 f9d2 	bl	80063cc <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 8002028:	4827      	ldr	r0, [pc, #156]	; (80020c8 <save_to_flash+0xd0>)
 800202a:	f008 f86d 	bl	800a108 <iprintf>
    return error;
 800202e:	9b01      	ldr	r3, [sp, #4]
    if(eraseError!=0xFFFFFFFF) return 3;
 8002030:	3301      	adds	r3, #1
 8002032:	d002      	beq.n	800203a <save_to_flash+0x42>
 8002034:	2003      	movs	r0, #3
}
 8002036:	b007      	add	sp, #28
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <save_to_flash+0xd4>)
 800203c:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8002040:	611a      	str	r2, [r3, #16]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002046:	f004 f997 	bl	8006378 <FLASH_WaitForLastOperation>
    if(status!=HAL_OK) return 5;
 800204a:	bb90      	cbnz	r0, 80020b2 <save_to_flash+0xba>
 800204c:	4c20      	ldr	r4, [pc, #128]	; (80020d0 <save_to_flash+0xd8>)
 800204e:	4e21      	ldr	r6, [pc, #132]	; (80020d4 <save_to_flash+0xdc>)
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 8002050:	4605      	mov	r5, r0
 8002052:	e002      	b.n	800205a <save_to_flash+0x62>
 8002054:	3502      	adds	r5, #2
 8002056:	2d40      	cmp	r5, #64	; 0x40
 8002058:	d012      	beq.n	8002080 <save_to_flash+0x88>
        uint64_t doubleWord = *((uint64_t*) (__float_reg + i)); //read two floats from array as one uint64
 800205a:	1933      	adds	r3, r6, r4
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 800205c:	4621      	mov	r1, r4
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	2000      	movs	r0, #0
 8002064:	f004 f898 	bl	8006198 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing float #%d", i);return 6;}
 8002068:	3408      	adds	r4, #8
 800206a:	2800      	cmp	r0, #0
 800206c:	d0f2      	beq.n	8002054 <save_to_flash+0x5c>
 800206e:	481a      	ldr	r0, [pc, #104]	; (80020d8 <save_to_flash+0xe0>)
 8002070:	4629      	mov	r1, r5
 8002072:	f008 f849 	bl	800a108 <iprintf>
 8002076:	2006      	movs	r0, #6
 8002078:	e7c4      	b.n	8002004 <save_to_flash+0xc>
	if(status!=HAL_OK) return 2;
 800207a:	2002      	movs	r0, #2
}
 800207c:	b007      	add	sp, #28
 800207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002080:	4e16      	ldr	r6, [pc, #88]	; (80020dc <save_to_flash+0xe4>)
 8002082:	4f17      	ldr	r7, [pc, #92]	; (80020e0 <save_to_flash+0xe8>)
    for(int i=0;i<INTSCOUNT;i=i+2){
 8002084:	4604      	mov	r4, r0
 8002086:	e003      	b.n	8002090 <save_to_flash+0x98>
 8002088:	3402      	adds	r4, #2
 800208a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800208e:	d012      	beq.n	80020b6 <save_to_flash+0xbe>
        uint64_t doubleWord = *((uint64_t*) (__int_reg + i));
 8002090:	19bb      	adds	r3, r7, r6
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, INTS_ADDR + i*sizeof(int), doubleWord);
 8002092:	4631      	mov	r1, r6
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	2000      	movs	r0, #0
 800209a:	f004 f87d 	bl	8006198 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing int #%d", i);return 7;}
 800209e:	3608      	adds	r6, #8
 80020a0:	4605      	mov	r5, r0
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d0f0      	beq.n	8002088 <save_to_flash+0x90>
 80020a6:	480f      	ldr	r0, [pc, #60]	; (80020e4 <save_to_flash+0xec>)
 80020a8:	4621      	mov	r1, r4
 80020aa:	f008 f82d 	bl	800a108 <iprintf>
 80020ae:	2007      	movs	r0, #7
 80020b0:	e7a8      	b.n	8002004 <save_to_flash+0xc>
    if(status!=HAL_OK) return 5;
 80020b2:	2005      	movs	r0, #5
 80020b4:	e7a6      	b.n	8002004 <save_to_flash+0xc>
    HAL_FLASH_Lock();
 80020b6:	f004 f931 	bl	800631c <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 80020ba:	f004 f94f 	bl	800635c <HAL_FLASH_OB_Lock>
    printf("SaveToFlash All Ok\n");
 80020be:	480a      	ldr	r0, [pc, #40]	; (80020e8 <save_to_flash+0xf0>)
 80020c0:	f008 f8be 	bl	800a240 <puts>
    return 0;
 80020c4:	4628      	mov	r0, r5
 80020c6:	e79d      	b.n	8002004 <save_to_flash+0xc>
 80020c8:	0800e1f8 	.word	0x0800e1f8
 80020cc:	40022000 	.word	0x40022000
 80020d0:	0807d800 	.word	0x0807d800
 80020d4:	17f82e84 	.word	0x17f82e84
 80020d8:	0800e210 	.word	0x0800e210
 80020dc:	0807d900 	.word	0x0807d900
 80020e0:	17f8b640 	.word	0x17f8b640
 80020e4:	0800e234 	.word	0x0800e234
 80020e8:	0800e258 	.word	0x0800e258

080020ec <set_dtc>:

	//printf("foc setDtcs: %f %f %f \n\r", dtc_u, dtc_v, dtc_w);


	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <set_dtc+0x94>)
	float dtc_u = controller->dtc_u;
 80020ee:	ed90 6a19 	vldr	s12, [r0, #100]	; 0x64
	float dtc_v = controller->dtc_v;
 80020f2:	ed90 7a1a 	vldr	s14, [r0, #104]	; 0x68
	float dtc_w = controller->dtc_w;
 80020f6:	edd0 5a1b 	vldr	s11, [r0, #108]	; 0x6c
	if(!PHASE_ORDER){
 80020fa:	681b      	ldr	r3, [r3, #0]
		dtc_u = 1.0f - controller->dtc_u;
 80020fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002100:	ee37 6ac6 	vsub.f32	s12, s15, s12
		dtc_v = 1.0f - controller->dtc_v;
 8002104:	ee77 6ac7 	vsub.f32	s13, s15, s14
		dtc_w = 1.0f - controller->dtc_w;
 8002108:	ee77 7ae5 	vsub.f32	s15, s15, s11
	if(!PHASE_ORDER){
 800210c:	bb03      	cbnz	r3, 8002150 <set_dtc+0x64>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <set_dtc+0x98>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002116:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800211a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800211e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002122:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002126:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800212a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800212e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002132:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002136:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
		 * 				ch_w <- dtc_v  | ch_u <- dtc_v
		 * 				ch_v <- dtc_w  | ch_w <- dtc_w
		 */
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800213a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800213e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
}
 800214e:	4770      	bx	lr
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <set_dtc+0x98>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002158:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800215c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002160:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002164:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002168:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800216c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002170:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002174:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002178:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
 800217c:	e7dd      	b.n	800213a <set_dtc+0x4e>
 800217e:	bf00      	nop
 8002180:	20008f40 	.word	0x20008f40
 8002184:	200094b0 	.word	0x200094b0

08002188 <analog_sample>:
    //vbus raw reading moved to interrupt
    controller->v_bus = controller->adc_vbus_raw*V_SCALE;
    */
}

void analog_sample (ControllerStruct *controller){
 8002188:	b510      	push	{r4, lr}
	/* Sample ADCs */

	//ADC sampling attempt to move closer to Ben's code

	HAL_GPIO_WritePin(LED2, GPIO_PIN_SET );
 800218a:	2201      	movs	r2, #1
void analog_sample (ControllerStruct *controller){
 800218c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(LED2, GPIO_PIN_SET );
 800218e:	2108      	movs	r1, #8
 8002190:	4828      	ldr	r0, [pc, #160]	; (8002234 <analog_sample+0xac>)
 8002192:	f004 fae7 	bl	8006764 <HAL_GPIO_WritePin>

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <analog_sample+0xb0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d141      	bne.n	8002222 <analog_sample+0x9a>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800219e:	4827      	ldr	r0, [pc, #156]	; (800223c <analog_sample+0xb4>)
 80021a0:	f002 fd26 	bl	8004bf0 <HAL_ADC_GetValue>
 80021a4:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80021a6:	4826      	ldr	r0, [pc, #152]	; (8002240 <analog_sample+0xb8>)
 80021a8:	f002 fd22 	bl	8004bf0 <HAL_ADC_GetValue>
 80021ac:	60a0      	str	r0, [r4, #8]
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
		//adc_ch_ic = ADC_CH_IB;
	}

	HAL_GPIO_WritePin(LED2, GPIO_PIN_RESET );
 80021ae:	2200      	movs	r2, #0
 80021b0:	2108      	movs	r1, #8
 80021b2:	4820      	ldr	r0, [pc, #128]	; (8002234 <analog_sample+0xac>)
 80021b4:	f004 fad6 	bl	8006764 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&ADC_CH_IA);
 80021b8:	4820      	ldr	r0, [pc, #128]	; (800223c <analog_sample+0xb4>)
 80021ba:	f003 f94b 	bl	8005454 <HAL_ADC_Start>
	HAL_ADC_Start(&ADC_CH_IB);
 80021be:	4820      	ldr	r0, [pc, #128]	; (8002240 <analog_sample+0xb8>)
 80021c0:	f003 f948 	bl	8005454 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_IA, HAL_MAX_DELAY);
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	481c      	ldr	r0, [pc, #112]	; (800223c <analog_sample+0xb4>)
 80021ca:	f002 fc6f 	bl	8004aac <HAL_ADC_PollForConversion>
	HAL_ADC_PollForConversion(&ADC_CH_IB, HAL_MAX_DELAY);
 80021ce:	f04f 31ff 	mov.w	r1, #4294967295
 80021d2:	481b      	ldr	r0, [pc, #108]	; (8002240 <analog_sample+0xb8>)
 80021d4:	f002 fc6a 	bl	8004aac <HAL_ADC_PollForConversion>

	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);
 80021d8:	6862      	ldr	r2, [r4, #4]
 80021da:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80021de:	68a3      	ldr	r3, [r4, #8]
 80021e0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);
 80021e4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002244 <analog_sample+0xbc>
 80021e8:	1a12      	subs	r2, r2, r0
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80021ea:	1a5b      	subs	r3, r3, r1
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);
 80021ec:	ee07 2a10 	vmov	s14, r2
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80021f0:	ee07 3a90 	vmov	s15, r3
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);
 80021f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80021f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);
 80021fc:	ee27 7a26 	vmul.f32	s14, s14, s13
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002200:	ee67 7aa6 	vmul.f32	s15, s15, s13
	controller->i_a_un = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);
 8002204:	ed84 7a08 	vstr	s14, [r4, #32]
	//filter_currents(controller->i_a_un, controller->i_b_un, &controller->i_a, &controller->i_b);
	controller->i_a = controller->i_a_un;
	controller->i_b = controller->i_b_un;


	controller->i_c = -controller->i_a - controller->i_b;
 8002208:	ee77 6a27 	vadd.f32	s13, s14, s15
	controller->i_a = controller->i_a_un;
 800220c:	ed84 7a05 	vstr	s14, [r4, #20]
	controller->i_c = -controller->i_a - controller->i_b;
 8002210:	eeb1 7a66 	vneg.f32	s14, s13
 8002214:	ed84 7a07 	vstr	s14, [r4, #28]
	controller->i_b_un = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002218:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	controller->i_b = controller->i_b_un;
 800221c:	edc4 7a06 	vstr	s15, [r4, #24]


    //vbus raw reading moved to interrupt
}
 8002220:	bd10      	pop	{r4, pc}
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002222:	4807      	ldr	r0, [pc, #28]	; (8002240 <analog_sample+0xb8>)
 8002224:	f002 fce4 	bl	8004bf0 <HAL_ADC_GetValue>
 8002228:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800222a:	4804      	ldr	r0, [pc, #16]	; (800223c <analog_sample+0xb4>)
 800222c:	f002 fce0 	bl	8004bf0 <HAL_ADC_GetValue>
 8002230:	60a0      	str	r0, [r4, #8]
 8002232:	e7bc      	b.n	80021ae <analog_sample+0x26>
 8002234:	48000800 	.word	0x48000800
 8002238:	20008f40 	.word	0x20008f40
 800223c:	200002a0 	.word	0x200002a0
 8002240:	20000234 	.word	0x20000234
 8002244:	3ca50000 	.word	0x3ca50000

08002248 <svm>:
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);


    }

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	ed2d 8b0a 	vpush	{d8-d12}
 800224e:	eef0 9a60 	vmov.f32	s19, s1
 8002252:	eeb0 9a41 	vmov.f32	s18, s2
 8002256:	eeb0 ca40 	vmov.f32	s24, s0
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 800225a:	eeb0 0a60 	vmov.f32	s0, s1
 800225e:	eef0 0a41 	vmov.f32	s1, s2
 8002262:	eeb0 1a61 	vmov.f32	s2, s3
void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002266:	eef0 8a61 	vmov.f32	s17, s3
 800226a:	4606      	mov	r6, r0
 800226c:	460d      	mov	r5, r1
 800226e:	4614      	mov	r4, r2
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002270:	f001 fcea 	bl	8003c48 <fminf3>
 8002274:	eeb0 1a68 	vmov.f32	s2, s17
 8002278:	eef0 0a49 	vmov.f32	s1, s18
 800227c:	eeb0 8a40 	vmov.f32	s16, s0
 8002280:	eeb0 0a69 	vmov.f32	s0, s19
 8002284:	f001 fcc8 	bl	8003c18 <fmaxf3>
 8002288:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002310 <svm+0xc8>
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800228c:	ed9f ba21 	vldr	s22, [pc, #132]	; 8002314 <svm+0xcc>
 8002290:	eddf aa21 	vldr	s21, [pc, #132]	; 8002318 <svm+0xd0>
 8002294:	ed9f aa21 	vldr	s20, [pc, #132]	; 800231c <svm+0xd4>
 8002298:	eec7 ba8c 	vdiv.f32	s23, s15, s24
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 800229c:	ee38 8a00 	vadd.f32	s16, s16, s0
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022a0:	eeb6 ca00 	vmov.f32	s24, #96	; 0x3f000000  0.5
 80022a4:	eee8 9a4c 	vfms.f32	s19, s16, s24
 80022a8:	eeb0 0a4b 	vmov.f32	s0, s22
 80022ac:	eef0 0a6a 	vmov.f32	s1, s21
 80022b0:	eea9 0aab 	vfma.f32	s0, s19, s23
 80022b4:	f001 fca0 	bl	8003bf8 <fast_fmaxf>
 80022b8:	eeb1 8a48 	vneg.f32	s16, s16
 80022bc:	eef0 0a4a 	vmov.f32	s1, s20
 80022c0:	f001 fca2 	bl	8003c08 <fast_fminf>
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022c4:	eea8 9a0c 	vfma.f32	s18, s16, s24
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022c8:	ed86 0a00 	vstr	s0, [r6]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022cc:	eeb0 0a4b 	vmov.f32	s0, s22
 80022d0:	eef0 0a6a 	vmov.f32	s1, s21
 80022d4:	eea9 0a2b 	vfma.f32	s0, s18, s23
 80022d8:	f001 fc8e 	bl	8003bf8 <fast_fmaxf>
 80022dc:	eef0 0a4a 	vmov.f32	s1, s20
 80022e0:	f001 fc92 	bl	8003c08 <fast_fminf>
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022e4:	eee8 8a0c 	vfma.f32	s17, s16, s24
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022e8:	ed85 0a00 	vstr	s0, [r5]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022ec:	eeb0 0a4b 	vmov.f32	s0, s22
 80022f0:	eef0 0a6a 	vmov.f32	s1, s21
 80022f4:	eea8 0aab 	vfma.f32	s0, s17, s23
 80022f8:	f001 fc7e 	bl	8003bf8 <fast_fmaxf>
 80022fc:	eef0 0a4a 	vmov.f32	s1, s20
 8002300:	f001 fc82 	bl	8003c08 <fast_fminf>

    }
 8002304:	ecbd 8b0a 	vpop	{d8-d12}
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002308:	ed84 0a00 	vstr	s0, [r4]
    }
 800230c:	bd70      	pop	{r4, r5, r6, pc}
 800230e:	bf00      	nop
 8002310:	3f133333 	.word	0x3f133333
 8002314:	3ef0a3d7 	.word	0x3ef0a3d7
 8002318:	00000000 	.word	0x00000000
 800231c:	3f70a3d7 	.word	0x3f70a3d7

08002320 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
    int adc_b_offset = 0;
    int n = 1000;
    controller->dtc_u = 0.f;
 8002322:	2300      	movs	r3, #0
 8002324:	6643      	str	r3, [r0, #100]	; 0x64
    controller->dtc_v = 0.f;
 8002326:	6683      	str	r3, [r0, #104]	; 0x68
    controller->dtc_w = 0.f;
 8002328:	66c3      	str	r3, [r0, #108]	; 0x6c
void zero_current(ControllerStruct *controller){
 800232a:	4604      	mov	r4, r0
    set_dtc(controller);
 800232c:	f7ff fede 	bl	80020ec <set_dtc>
    int adc_b_offset = 0;
 8002330:	2600      	movs	r6, #0
    int adc_a_offset = 0;
 8002332:	4637      	mov	r7, r6
    set_dtc(controller);
 8002334:	f44f 757a 	mov.w	r5, #1000	; 0x3e8

    for (int i = 0; i<n; i++){               // Average n samples
    	analog_sample(controller);
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff ff25 	bl	8002188 <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
    	adc_b_offset += controller->adc_b_raw;
 800233e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    for (int i = 0; i<n; i++){               // Average n samples
 8002342:	3d01      	subs	r5, #1
    	adc_a_offset +=  controller->adc_a_raw;
 8002344:	4417      	add	r7, r2
    	adc_b_offset += controller->adc_b_raw;
 8002346:	441e      	add	r6, r3
    for (int i = 0; i<n; i++){               // Average n samples
 8002348:	d1f6      	bne.n	8002338 <zero_current+0x18>
     }
    controller->adc_a_offset = adc_a_offset/n;
 800234a:	4907      	ldr	r1, [pc, #28]	; (8002368 <zero_current+0x48>)
 800234c:	17fa      	asrs	r2, r7, #31
 800234e:	fb81 3007 	smull	r3, r0, r1, r7
    controller->adc_b_offset = adc_b_offset/n;
 8002352:	fb81 3106 	smull	r3, r1, r1, r6
 8002356:	17f3      	asrs	r3, r6, #31
    controller->adc_a_offset = adc_a_offset/n;
 8002358:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
    controller->adc_b_offset = adc_b_offset/n;
 800235c:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 8002360:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c

    }
 8002364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002366:	bf00      	nop
 8002368:	10624dd3 	.word	0x10624dd3

0800236c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 800236c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    controller->ki_q = KI_Q;
    controller->k_d = K_SCALE*I_BW;
    controller->k_q = K_SCALE*I_BW;
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
    controller->ki_fw = .1f*controller->ki_d;
    controller->phase_order = PHASE_ORDER;
 8002370:	492b      	ldr	r1, [pc, #172]	; (8002420 <init_controller_params+0xb4>)
	controller->ki_d = KI_D;
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <init_controller_params+0xb8>)
    controller->k_d = K_SCALE*I_BW;
 8002374:	4d2c      	ldr	r5, [pc, #176]	; (8002428 <init_controller_params+0xbc>)
    controller->phase_order = PHASE_ORDER;
 8002376:	6809      	ldr	r1, [r1, #0]
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002378:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800242c <init_controller_params+0xc0>
    controller->k_d = K_SCALE*I_BW;
 800237c:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8002430 <init_controller_params+0xc4>
    controller->ki_fw = .1f*controller->ki_d;
 8002380:	4c2c      	ldr	r4, [pc, #176]	; (8002434 <init_controller_params+0xc8>)
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002382:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <init_controller_params+0xcc>)
 8002384:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002444 <init_controller_params+0xd8>
 8002388:	4f2c      	ldr	r7, [pc, #176]	; (800243c <init_controller_params+0xd0>)
void init_controller_params(ControllerStruct *controller){
 800238a:	ed2d 8b02 	vpush	{d8}
	controller->ki_d = KI_D;
 800238e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    controller->ki_q = KI_Q;
 8002392:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    controller->k_d = K_SCALE*I_BW;
 8002396:	edd5 7a02 	vldr	s15, [r5, #8]
 800239a:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8002440 <init_controller_params+0xd4>
    controller->ki_fw = .1f*controller->ki_d;
 800239e:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80023a2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80023a6:	eee7 6a87 	vfma.f32	s13, s15, s14
    controller->phase_order = PHASE_ORDER;
 80023aa:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
 80023ae:	f500 7580 	add.w	r5, r0, #256	; 0x100
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80023b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80023b6:	ee86 7a26 	vdiv.f32	s14, s12, s13
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80023ba:	2401      	movs	r4, #1
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80023bc:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80023c0:	2600      	movs	r6, #0
 80023c2:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
    controller->k_d = K_SCALE*I_BW;
 80023c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80023ca:	ee37 7a06 	vadd.f32	s14, s14, s12
    controller->k_d = K_SCALE*I_BW;
 80023ce:	edc0 7a1f 	vstr	s15, [r0, #124]	; 0x7c
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80023d2:	ed80 7a24 	vstr	s14, [r0, #144]	; 0x90
    controller->k_q = K_SCALE*I_BW;
 80023d6:	edc0 7a20 	vstr	s15, [r0, #128]	; 0x80
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80023da:	ee07 4a90 	vmov	s15, r4
 80023de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e2:	3401      	adds	r4, #1
 80023e4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80023e8:	ee17 0a90 	vmov	r0, s15
 80023ec:	f7fe f8d4 	bl	8000598 <__aeabi_f2d>
 80023f0:	ec41 0b10 	vmov	d0, r0, r1
 80023f4:	f00b fb98 	bl	800db28 <exp>
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80023f8:	4642      	mov	r2, r8
 80023fa:	ec51 0b10 	vmov	r0, r1, d0
 80023fe:	464b      	mov	r3, r9
 8002400:	f7fe f922 	bl	8000648 <__aeabi_dmul>
 8002404:	4632      	mov	r2, r6
 8002406:	463b      	mov	r3, r7
 8002408:	f7fd ff68 	bl	80002dc <__adddf3>
 800240c:	f7fe fc14 	bl	8000c38 <__aeabi_d2f>
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002410:	2c80      	cmp	r4, #128	; 0x80
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002412:	f845 0b04 	str.w	r0, [r5], #4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002416:	d1e0      	bne.n	80023da <init_controller_params+0x6e>
    }

    }
 8002418:	ecbd 8b02 	vpop	{d8}
 800241c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002420:	20008f40 	.word	0x20008f40
 8002424:	3d3851ec 	.word	0x3d3851ec
 8002428:	20000684 	.word	0x20000684
 800242c:	3983c498 	.word	0x3983c498
 8002430:	38d1b717 	.word	0x38d1b717
 8002434:	3b9374bd 	.word	0x3b9374bd
 8002438:	400ccccd 	.word	0x400ccccd
 800243c:	3ff00000 	.word	0x3ff00000
 8002440:	be79ffff 	.word	0xbe79ffff
 8002444:	3ff33333 	.word	0x3ff33333

08002448 <reset_foc>:

void reset_foc(ControllerStruct *controller){

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002448:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <reset_foc+0x6c>)
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8002450:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002454:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002458:	ee27 7a26 	vmul.f32	s14, s14, s13
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
    controller->i_d_des = 0;
 800245c:	2300      	movs	r3, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800245e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    controller->q_int = 0;
    controller->d_int = 0;
    controller->v_q = 0;
    controller->v_d = 0;
    controller->fw_int = 0;
    controller->otw_flag = 0;
 8002462:	2100      	movs	r1, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002464:	ed82 7a0f 	vstr	s14, [r2, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002468:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 800246c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002470:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002474:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002478:	ed82 7a0d 	vstr	s14, [r2, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800247c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002484:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248c:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
    controller->otw_flag = 0;
 8002490:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
    controller->i_d_des = 0;
 8002494:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    controller->i_q_des = 0;
 8002498:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    controller->i_d = 0;
 800249c:	6483      	str	r3, [r0, #72]	; 0x48
    controller->i_q = 0;
 800249e:	64c3      	str	r3, [r0, #76]	; 0x4c
    controller->i_q_filt = 0;
 80024a0:	6503      	str	r3, [r0, #80]	; 0x50
    controller->q_int = 0;
 80024a2:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    controller->d_int = 0;
 80024a6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    controller->v_q = 0;
 80024aa:	6603      	str	r3, [r0, #96]	; 0x60
    controller->v_d = 0;
 80024ac:	65c3      	str	r3, [r0, #92]	; 0x5c
    controller->fw_int = 0;
 80024ae:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0

    }
 80024b2:	4770      	bx	lr
 80024b4:	200094b0 	.word	0x200094b0

080024b8 <field_weaken>:

void field_weaken(ControllerStruct *controller)
{
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80024b8:	edd0 7a3a 	vldr	s15, [r0, #232]	; 0xe8
 80024bc:	edd0 6a3b 	vldr	s13, [r0, #236]	; 0xec
 80024c0:	ed90 0a3c 	vldr	s0, [r0, #240]	; 0xf0
 80024c4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002528 <field_weaken+0x70>
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80024c8:	eddf 0a18 	vldr	s1, [pc, #96]	; 800252c <field_weaken+0x74>
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80024cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
{
 80024d0:	b510      	push	{r4, lr}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80024d2:	eea7 0a87 	vfma.f32	s0, s15, s14
{
 80024d6:	4604      	mov	r4, r0
 80024d8:	ed2d 8b02 	vpush	{d8}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80024dc:	ed80 0a3c 	vstr	s0, [r0, #240]	; 0xf0
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80024e0:	f001 fb92 	bl	8003c08 <fast_fminf>
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <field_weaken+0x78>)
 80024e6:	edd3 0a06 	vldr	s1, [r3, #24]
 80024ea:	eef1 0a60 	vneg.f32	s1, s1
 80024ee:	f001 fb83 	bl	8003bf8 <fast_fmaxf>
       controller->i_d_des = controller->fw_int;
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80024f2:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80024f6:	ed84 0a3c 	vstr	s0, [r4, #240]	; 0xf0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80024fa:	ee60 7a40 	vnmul.f32	s15, s0, s0
       controller->i_d_des = controller->fw_int;
 80024fe:	ed84 0a2b 	vstr	s0, [r4, #172]	; 0xac
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002502:	eee7 7a07 	vfma.f32	s15, s14, s14
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002506:	ed94 0a2c 	vldr	s0, [r4, #176]	; 0xb0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 800250a:	eeb1 8ae7 	vsqrt.f32	s16, s15
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 800250e:	eef0 0a48 	vmov.f32	s1, s16
 8002512:	f001 fb79 	bl	8003c08 <fast_fminf>
 8002516:	eef1 0a48 	vneg.f32	s1, s16
 800251a:	f001 fb6d 	bl	8003bf8 <fast_fmaxf>


}
 800251e:	ecbd 8b02 	vpop	{d8}
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8002522:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
}
 8002526:	bd10      	pop	{r4, pc}
 8002528:	3ba3d70a 	.word	0x3ba3d70a
 800252c:	00000000 	.word	0x00000000
 8002530:	20000684 	.word	0x20000684

08002534 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	ed2d 8b08 	vpush	{d8-d11}
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800253a:	ed91 aa17 	vldr	s20, [r1, #92]	; 0x5c
		controller->dtheta_elec = encoder->elec_velocity;
 800253e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 8002540:	4da6      	ldr	r5, [pc, #664]	; (80027dc <commutate+0x2a8>)
 8002542:	ed91 6a18 	vldr	s12, [r1, #96]	; 0x60
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002546:	edd1 6a03 	vldr	s13, [r1, #12]
		controller->dtheta_elec = encoder->elec_velocity;
 800254a:	6403      	str	r3, [r0, #64]	; 0x40
		controller->theta_elec = encoder->elec_angle;
 800254c:	ed80 aa0e 	vstr	s20, [r0, #56]	; 0x38
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 8002550:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002554:	edd0 aa05 	vldr	s21, [r0, #20]
 8002558:	edd0 ba06 	vldr	s23, [r0, #24]
 800255c:	ed90 ba07 	vldr	s22, [r0, #28]
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002560:	eddf 9a9f 	vldr	s19, [pc, #636]	; 80027e0 <commutate+0x2ac>
 8002564:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 80027e4 <commutate+0x2b0>
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 8002568:	eec6 7a07 	vdiv.f32	s15, s12, s14
{
 800256c:	4604      	mov	r4, r0
    float cf = cos_lut(theta);
 800256e:	eeb0 0a4a 	vmov.f32	s0, s20
		controller->dtheta_mech = encoder->velocity/GR;    //ben bugfix change * to /
 8002572:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002576:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44
 800257a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800257e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002582:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    float cf = cos_lut(theta);
 8002586:	f001 fbd1 	bl	8003d2c <cos_lut>
 800258a:	eeb0 9a40 	vmov.f32	s18, s0
    float sf = sin_lut(theta);
 800258e:	eeb0 0a4a 	vmov.f32	s0, s20
 8002592:	f001 fba5 	bl	8003ce0 <sin_lut>
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002596:	ee69 6a29 	vmul.f32	s13, s18, s19
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800259a:	ee28 6ac9 	vnmul.f32	s12, s17, s18
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800259e:	eeb0 7a66 	vmov.f32	s14, s13
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80025a2:	eef0 7a46 	vmov.f32	s15, s12
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80025a6:	eea0 7a28 	vfma.f32	s14, s0, s17
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80025aa:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 80025ae:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80025b2:	eee0 7a08 	vfma.f32	s15, s0, s16
 80025b6:	eea0 6a29 	vfma.f32	s12, s0, s19
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80025ba:	ee2b 7a87 	vmul.f32	s14, s23, s14
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80025be:	ee6b 7a27 	vmul.f32	s15, s22, s15
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80025c2:	eed0 6a28 	vfnms.f32	s13, s0, s17
 80025c6:	eeaa 7ac0 	vfms.f32	s14, s21, s0
 80025ca:	eeeb 7a86 	vfma.f32	s15, s23, s12
 80025ce:	eeab 7a26 	vfma.f32	s14, s22, s13
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80025d2:	eeea 7a89 	vfma.f32	s15, s21, s18
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80025d6:	ed9f 2a84 	vldr	s4, [pc, #528]	; 80027e8 <commutate+0x2b4>
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80025da:	ed9f 5a84 	vldr	s10, [pc, #528]	; 80027ec <commutate+0x2b8>
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80025de:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80025e2:	edd4 2a0c 	vldr	s5, [r4, #48]	; 0x30
 80025e6:	ed9f 3a82 	vldr	s6, [pc, #520]	; 80027f0 <commutate+0x2bc>
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80025ea:	ed9f 6a82 	vldr	s12, [pc, #520]	; 80027f4 <commutate+0x2c0>
 80025ee:	edd4 3a14 	vldr	s7, [r4, #80]	; 0x50
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80025f2:	ed94 4a15 	vldr	s8, [r4, #84]	; 0x54
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80025f6:	eddf 4a80 	vldr	s9, [pc, #512]	; 80027f8 <commutate+0x2c4>
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80025fa:	eddf 5a80 	vldr	s11, [pc, #512]	; 80027fc <commutate+0x2c8>
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80025fe:	ee66 6a82 	vmul.f32	s13, s13, s4
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002602:	ee67 7a85 	vmul.f32	s15, s15, s10
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002606:	ee27 7a05 	vmul.f32	s14, s14, s10
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 800260a:	eee2 6a83 	vfma.f32	s13, s5, s6
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800260e:	ee27 5a06 	vmul.f32	s10, s14, s12
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002612:	ee27 6a86 	vmul.f32	s12, s15, s12
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002616:	eea3 5aa4 	vfma.f32	s10, s7, s9
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 800261a:	eea4 6a24 	vfma.f32	s12, s8, s9
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800261e:	ee66 5aa5 	vmul.f32	s11, s13, s11
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002622:	ed84 5a14 	vstr	s10, [r4, #80]	; 0x50
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002626:	ed84 6a15 	vstr	s12, [r4, #84]	; 0x54
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 800262a:	edc4 5a3a 	vstr	s11, [r4, #232]	; 0xe8
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800262e:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002632:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002636:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 800263a:	ed95 0a03 	vldr	s0, [r5, #12]
 800263e:	ed84 0a3e 	vstr	s0, [r4, #248]	; 0xf8
       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002642:	f001 fb19 	bl	8003c78 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002646:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
 800264a:	ed94 aa2b 	vldr	s20, [r4, #172]	; 0xac

       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800264e:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8002652:	ed94 0a25 	vldr	s0, [r4, #148]	; 0x94
       float i_q_error = controller->i_q_des - controller->i_q;
 8002656:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 800265a:	ed94 9a2c 	vldr	s18, [r4, #176]	; 0xb0
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800265e:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
       float i_d_error = controller->i_d_des - controller->i_d;
 8002662:	ee3a aa66 	vsub.f32	s20, s20, s13
       float i_q_error = controller->i_q_des - controller->i_q;
 8002666:	ee39 9a47 	vsub.f32	s18, s18, s14
       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800266a:	eea7 0a8a 	vfma.f32	s0, s15, s20
 800266e:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002672:	f001 fac9 	bl	8003c08 <fast_fminf>
 8002676:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 800267a:	eef1 0a60 	vneg.f32	s1, s1
 800267e:	f001 fabb 	bl	8003bf8 <fast_fmaxf>

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002682:	edd4 6a21 	vldr	s13, [r4, #132]	; 0x84
 8002686:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
 800268a:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800268e:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002692:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002696:	ee27 7a26 	vmul.f32	s14, s14, s13
 800269a:	eee7 7a0a 	vfma.f32	s15, s14, s20
 800269e:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 80026a2:	eeb0 0a67 	vmov.f32	s0, s15
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80026a6:	f001 faaf 	bl	8003c08 <fast_fminf>
 80026aa:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 80026ae:	eef1 0a60 	vneg.f32	s1, s1
 80026b2:	f001 faa1 	bl	8003bf8 <fast_fmaxf>
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80026b6:	ed94 6a20 	vldr	s12, [r4, #128]	; 0x80
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80026ba:	edd4 6a22 	vldr	s13, [r4, #136]	; 0x88
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80026be:	ed94 7a26 	vldr	s14, [r4, #152]	; 0x98
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80026c2:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80026c6:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 80026ca:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80026ce:	ee66 6a26 	vmul.f32	s13, s12, s13
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80026d2:	eef0 5a47 	vmov.f32	s11, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80026d6:	ee67 7ae7 	vnmul.f32	s15, s15, s15
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80026da:	eee6 5a09 	vfma.f32	s11, s12, s18
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80026de:	eea6 7a89 	vfma.f32	s14, s13, s18
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80026e2:	eee0 7aa0 	vfma.f32	s15, s1, s1
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80026e6:	edc4 5a18 	vstr	s11, [r4, #96]	; 0x60
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80026ea:	ed84 7a26 	vstr	s14, [r4, #152]	; 0x98
 80026ee:	eeb0 0a47 	vmov.f32	s0, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80026f2:	eeb1 9ae7 	vsqrt.f32	s18, s15
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80026f6:	f001 fa87 	bl	8003c08 <fast_fminf>
 80026fa:	edd4 0a3a 	vldr	s1, [r4, #232]	; 0xe8
 80026fe:	eef1 0a60 	vneg.f32	s1, s1
 8002702:	f001 fa79 	bl	8003bf8 <fast_fmaxf>
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002706:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 800270a:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 800270e:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002712:	ee67 7a07 	vmul.f32	s15, s14, s14
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002716:	eeb0 0a47 	vmov.f32	s0, s14
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 800271a:	eee6 7aa6 	vfma.f32	s15, s13, s13
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800271e:	eef0 0a49 	vmov.f32	s1, s18
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002722:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8002726:	ed84 7a3b 	vstr	s14, [r4, #236]	; 0xec
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800272a:	f001 fa6d 	bl	8003c08 <fast_fminf>
 800272e:	eef1 0a49 	vneg.f32	s1, s18
 8002732:	f001 fa61 	bl	8003bf8 <fast_fmaxf>

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002736:	f104 0160 	add.w	r1, r4, #96	; 0x60
 800273a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800273e:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002742:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 8002746:	f001 fa97 	bl	8003c78 <limit_norm>
		   controller->v_q = 1.0;
		   controller->v_d = 0.0;
       }


       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800274a:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800274e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8002800 <commutate+0x2cc>
 8002752:	ed94 aa0e 	vldr	s20, [r4, #56]	; 0x38
 8002756:	edd4 aa17 	vldr	s21, [r4, #92]	; 0x5c
 800275a:	ed94 ba18 	vldr	s22, [r4, #96]	; 0x60
 800275e:	eea7 aa27 	vfma.f32	s20, s14, s15
    float cf = cos_lut(theta);
 8002762:	eeb0 0a4a 	vmov.f32	s0, s20
 8002766:	f001 fae1 	bl	8003d2c <cos_lut>
 800276a:	eeb0 9a40 	vmov.f32	s18, s0
    float sf = sin_lut(theta);
 800276e:	eeb0 0a4a 	vmov.f32	s0, s20
 8002772:	f001 fab5 	bl	8003ce0 <sin_lut>
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002776:	ee69 1a29 	vmul.f32	s3, s18, s19
 800277a:	ee68 7ac9 	vnmul.f32	s15, s17, s18
 800277e:	eeb0 1a61 	vmov.f32	s2, s3
 8002782:	eea0 1a28 	vfma.f32	s2, s0, s17

       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002786:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800278a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800278e:	eed0 1a28 	vfnms.f32	s3, s0, s17
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002792:	f104 0168 	add.w	r1, r4, #104	; 0x68
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002796:	eeb0 7a67 	vmov.f32	s14, s15
 800279a:	eea0 7a29 	vfma.f32	s14, s0, s19
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800279e:	eee0 7a08 	vfma.f32	s15, s0, s16
    *a = cf*d - sf*q;
 80027a2:	ee60 0a4b 	vnmul.f32	s1, s0, s22
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80027a6:	ee2b 1a01 	vmul.f32	s2, s22, s2
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80027aa:	ee6b 1a21 	vmul.f32	s3, s22, s3
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80027ae:	eeaa 1a87 	vfma.f32	s2, s21, s14
    *a = cf*d - sf*q;
 80027b2:	eeea 0a89 	vfma.f32	s1, s21, s18
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80027b6:	eeea 1aa7 	vfma.f32	s3, s21, s15
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80027ba:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
    *a = cf*d - sf*q;
 80027be:	edc4 0a1c 	vstr	s1, [r4, #112]	; 0x70
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80027c2:	ed84 1a1d 	vstr	s2, [r4, #116]	; 0x74
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80027c6:	edc4 1a1e 	vstr	s3, [r4, #120]	; 0x78
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 80027ca:	f7ff fd3d 	bl	8002248 <svm>
       //DEBUG zeros
       //svm(controller->v_max, 0*(controller->v_u), 0*(controller->v_v), 0*(controller->v_w), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

       set_dtc(controller);

    }
 80027ce:	ecbd 8b08 	vpop	{d8-d11}
       set_dtc(controller);
 80027d2:	4620      	mov	r0, r4
    }
 80027d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       set_dtc(controller);
 80027d8:	f7ff bc88 	b.w	80020ec <set_dtc>
 80027dc:	20000684 	.word	0x20000684
 80027e0:	3f5db3d7 	.word	0x3f5db3d7
 80027e4:	bf5db3d7 	.word	0xbf5db3d7
 80027e8:	3dcccccd 	.word	0x3dcccccd
 80027ec:	3f2aaaab 	.word	0x3f2aaaab
 80027f0:	3f666666 	.word	0x3f666666
 80027f4:	3c23d70a 	.word	0x3c23d70a
 80027f8:	3f7d70a4 	.word	0x3f7d70a4
 80027fc:	3f1fc60a 	.word	0x3f1fc60a
 8002800:	387ba882 	.word	0x387ba882

08002804 <torque_control>:


void torque_control(ControllerStruct *controller){

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002804:	edd0 7a36 	vldr	s15, [r0, #216]	; 0xd8
 8002808:	edd0 3a0f 	vldr	s7, [r0, #60]	; 0x3c
 800280c:	edd0 4a38 	vldr	s9, [r0, #224]	; 0xe0
 8002810:	edd0 6a35 	vldr	s13, [r0, #212]	; 0xd4
 8002814:	ed90 4a0d 	vldr	s8, [r0, #52]	; 0x34
 8002818:	edd0 5a37 	vldr	s11, [r0, #220]	; 0xdc
    controller->i_q_des = torque_des/(KT*GR);
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <torque_control+0x50>)
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 800281e:	ed90 6a39 	vldr	s12, [r0, #228]	; 0xe4
    controller->i_q_des = torque_des/(KT*GR);
 8002822:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002826:	ed93 5a11 	vldr	s10, [r3, #68]	; 0x44
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 800282a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 800282e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8002832:	ee67 7aa4 	vmul.f32	s15, s15, s9
    controller->i_q_des = torque_des/(KT*GR);
 8002836:	ee27 7a05 	vmul.f32	s14, s14, s10
 800283a:	eee5 7aa6 	vfma.f32	s15, s11, s13
    controller->i_d_des = 0.0f;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002844:	ee77 7a86 	vadd.f32	s15, s15, s12
    controller->i_q_des = torque_des/(KT*GR);
 8002848:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800284c:	edc0 6a2c 	vstr	s13, [r0, #176]	; 0xb0

    }
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000684 	.word	0x20000684

08002858 <zero_commands>:



void zero_commands(ControllerStruct * controller){
	//printf("ZERO COMMANDS!!");
	controller->t_ff = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	controller->kp = 0;
 800285e:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	controller->kd = 0;
 8002862:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
	controller->p_des = 0;
 8002866:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	controller->v_des = 0;
 800286a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
	controller->i_q_des = 0;
 800286e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
}
 8002872:	4770      	bx	lr

08002874 <enter_setup_state>:
	    printf(" esc - Exit to Menu\n\r");

	    //gpio.led->write(0);
 }

 void enter_setup_state(void){
 8002874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("\r\n Configuration Options \n\r");
 8002878:	486b      	ldr	r0, [pc, #428]	; (8002a28 <enter_setup_state+0x1b4>)
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
	    printf("\r\n Motor:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 800287a:	4c6c      	ldr	r4, [pc, #432]	; (8002a2c <enter_setup_state+0x1b8>)
 800287c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8002b04 <enter_setup_state+0x290>
 8002880:	4f6b      	ldr	r7, [pc, #428]	; (8002a30 <enter_setup_state+0x1bc>)
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
	    printf("\r\n Control:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8002882:	4d6c      	ldr	r5, [pc, #432]	; (8002a34 <enter_setup_state+0x1c0>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8002884:	4e6c      	ldr	r6, [pc, #432]	; (8002a38 <enter_setup_state+0x1c4>)
 8002886:	f8df b280 	ldr.w	fp, [pc, #640]	; 8002b08 <enter_setup_state+0x294>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
	    printf("\r\n CAN:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 800288a:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8002b0c <enter_setup_state+0x298>
 800288e:	f8df a280 	ldr.w	sl, [pc, #640]	; 8002b10 <enter_setup_state+0x29c>
 void enter_setup_state(void){
 8002892:	b085      	sub	sp, #20
	    printf("\r\n Configuration Options \n\r");
 8002894:	f007 fc38 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <enter_setup_state+0x1c8>)
 800289a:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <enter_setup_state+0x1cc>)
 800289c:	4969      	ldr	r1, [pc, #420]	; (8002a44 <enter_setup_state+0x1d0>)
 800289e:	486a      	ldr	r0, [pc, #424]	; (8002a48 <enter_setup_state+0x1d4>)
 80028a0:	e9cd 3200 	strd	r3, r2, [sp]
 80028a4:	4b69      	ldr	r3, [pc, #420]	; (8002a4c <enter_setup_state+0x1d8>)
 80028a6:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <enter_setup_state+0x1dc>)
 80028a8:	f007 fc2e 	bl	800a108 <iprintf>
	    printf("\r\n Motor:\r\n");
 80028ac:	4869      	ldr	r0, [pc, #420]	; (8002a54 <enter_setup_state+0x1e0>)
 80028ae:	f007 fcc7 	bl	800a240 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 80028b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80028b4:	f7fd fe70 	bl	8000598 <__aeabi_f2d>
 80028b8:	4643      	mov	r3, r8
 80028ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028be:	4a66      	ldr	r2, [pc, #408]	; (8002a58 <enter_setup_state+0x1e4>)
 80028c0:	9700      	str	r7, [sp, #0]
 80028c2:	4966      	ldr	r1, [pc, #408]	; (8002a5c <enter_setup_state+0x1e8>)
 80028c4:	4866      	ldr	r0, [pc, #408]	; (8002a60 <enter_setup_state+0x1ec>)
 80028c6:	f007 fc1f 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 80028ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028cc:	f7fd fe64 	bl	8000598 <__aeabi_f2d>
 80028d0:	4643      	mov	r3, r8
 80028d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028d6:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <enter_setup_state+0x1f0>)
 80028d8:	4963      	ldr	r1, [pc, #396]	; (8002a68 <enter_setup_state+0x1f4>)
 80028da:	9700      	str	r7, [sp, #0]
 80028dc:	4863      	ldr	r0, [pc, #396]	; (8002a6c <enter_setup_state+0x1f8>)
 80028de:	f007 fc13 	bl	800a108 <iprintf>
	    printf("\r\n Control:\r\n");
 80028e2:	4863      	ldr	r0, [pc, #396]	; (8002a70 <enter_setup_state+0x1fc>)
 80028e4:	f007 fcac 	bl	800a240 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 80028e8:	68a0      	ldr	r0, [r4, #8]
 80028ea:	f7fd fe55 	bl	8000598 <__aeabi_f2d>
 80028ee:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <enter_setup_state+0x200>)
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <enter_setup_state+0x204>)
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <enter_setup_state+0x208>)
 80028fa:	4961      	ldr	r1, [pc, #388]	; (8002a80 <enter_setup_state+0x20c>)
 80028fc:	4628      	mov	r0, r5
 80028fe:	f007 fc03 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8002902:	68e0      	ldr	r0, [r4, #12]
 8002904:	f7fd fe48 	bl	8000598 <__aeabi_f2d>
 8002908:	4633      	mov	r3, r6
 800290a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800290e:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <enter_setup_state+0x210>)
 8002910:	495d      	ldr	r1, [pc, #372]	; (8002a88 <enter_setup_state+0x214>)
 8002912:	f8cd b000 	str.w	fp, [sp]
 8002916:	4628      	mov	r0, r5
 8002918:	f007 fbf6 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 800291c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800291e:	f7fd fe3b 	bl	8000598 <__aeabi_f2d>
 8002922:	463b      	mov	r3, r7
 8002924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <enter_setup_state+0x218>)
 800292a:	9700      	str	r7, [sp, #0]
 800292c:	4958      	ldr	r1, [pc, #352]	; (8002a90 <enter_setup_state+0x21c>)
 800292e:	4628      	mov	r0, r5
 8002930:	f007 fbea 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8002934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002936:	f7fd fe2f 	bl	8000598 <__aeabi_f2d>
 800293a:	463b      	mov	r3, r7
 800293c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002940:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <enter_setup_state+0x220>)
 8002942:	9700      	str	r7, [sp, #0]
 8002944:	4954      	ldr	r1, [pc, #336]	; (8002a98 <enter_setup_state+0x224>)
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8002946:	4f55      	ldr	r7, [pc, #340]	; (8002a9c <enter_setup_state+0x228>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8002948:	4628      	mov	r0, r5
 800294a:	f007 fbdd 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 800294e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002950:	f7fd fe22 	bl	8000598 <__aeabi_f2d>
 8002954:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <enter_setup_state+0x22c>)
 8002956:	4a53      	ldr	r2, [pc, #332]	; (8002aa4 <enter_setup_state+0x230>)
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800295e:	4633      	mov	r3, r6
 8002960:	4951      	ldr	r1, [pc, #324]	; (8002aa8 <enter_setup_state+0x234>)
 8002962:	4628      	mov	r0, r5
 8002964:	f007 fbd0 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8002968:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800296a:	f7fd fe15 	bl	8000598 <__aeabi_f2d>
 800296e:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <enter_setup_state+0x238>)
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <enter_setup_state+0x23c>)
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002978:	4633      	mov	r3, r6
 800297a:	494e      	ldr	r1, [pc, #312]	; (8002ab4 <enter_setup_state+0x240>)
 800297c:	4628      	mov	r0, r5
 800297e:	f007 fbc3 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8002982:	69a0      	ldr	r0, [r4, #24]
 8002984:	f7fd fe08 	bl	8000598 <__aeabi_f2d>
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <enter_setup_state+0x244>)
 800298a:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <enter_setup_state+0x248>)
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002992:	4633      	mov	r3, r6
 8002994:	494a      	ldr	r1, [pc, #296]	; (8002ac0 <enter_setup_state+0x24c>)
 8002996:	4628      	mov	r0, r5
 8002998:	f007 fbb6 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 800299c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800299e:	f7fd fdfb 	bl	8000598 <__aeabi_f2d>
 80029a2:	4633      	mov	r3, r6
 80029a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029a8:	4a46      	ldr	r2, [pc, #280]	; (8002ac4 <enter_setup_state+0x250>)
 80029aa:	4947      	ldr	r1, [pc, #284]	; (8002ac8 <enter_setup_state+0x254>)
 80029ac:	f8cd b000 	str.w	fp, [sp]
 80029b0:	4628      	mov	r0, r5
 80029b2:	f007 fba9 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 80029b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80029b8:	f7fd fdee 	bl	8000598 <__aeabi_f2d>
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <enter_setup_state+0x258>)
 80029be:	4a44      	ldr	r2, [pc, #272]	; (8002ad0 <enter_setup_state+0x25c>)
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029c6:	4633      	mov	r3, r6
 80029c8:	4942      	ldr	r1, [pc, #264]	; (8002ad4 <enter_setup_state+0x260>)
 80029ca:	4628      	mov	r0, r5
 80029cc:	f007 fb9c 	bl	800a108 <iprintf>
	    printf("\r\n CAN:\r\n");
 80029d0:	4841      	ldr	r0, [pc, #260]	; (8002ad8 <enter_setup_state+0x264>)
 80029d2:	f007 fc35 	bl	800a240 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 80029d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	4a3f      	ldr	r2, [pc, #252]	; (8002adc <enter_setup_state+0x268>)
 80029de:	4940      	ldr	r1, [pc, #256]	; (8002ae0 <enter_setup_state+0x26c>)
 80029e0:	9700      	str	r7, [sp, #0]
 80029e2:	4643      	mov	r3, r8
 80029e4:	4650      	mov	r0, sl
 80029e6:	f007 fb8f 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER); //ben bugfix change MASTER to TX in string
 80029ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	4a3c      	ldr	r2, [pc, #240]	; (8002ae4 <enter_setup_state+0x270>)
 80029f2:	493d      	ldr	r1, [pc, #244]	; (8002ae8 <enter_setup_state+0x274>)
 80029f4:	9700      	str	r7, [sp, #0]
 80029f6:	4643      	mov	r3, r8
 80029f8:	4650      	mov	r0, sl
 80029fa:	f007 fb85 	bl	800a108 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 80029fe:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <enter_setup_state+0x278>)
 8002a04:	493a      	ldr	r1, [pc, #232]	; (8002af0 <enter_setup_state+0x27c>)
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	9200      	str	r2, [sp, #0]
 8002a0a:	4643      	mov	r3, r8
 8002a0c:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <enter_setup_state+0x280>)
 8002a0e:	483a      	ldr	r0, [pc, #232]	; (8002af8 <enter_setup_state+0x284>)
 8002a10:	f007 fb7a 	bl	800a108 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8002a14:	4839      	ldr	r0, [pc, #228]	; (8002afc <enter_setup_state+0x288>)
 8002a16:	f007 fb77 	bl	800a108 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8002a1a:	4839      	ldr	r0, [pc, #228]	; (8002b00 <enter_setup_state+0x28c>)
 }
 8002a1c:	b005      	add	sp, #20
 8002a1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8002a22:	f007 bb71 	b.w	800a108 <iprintf>
 8002a26:	bf00      	nop
 8002a28:	0800e3c8 	.word	0x0800e3c8
 8002a2c:	20000684 	.word	0x20000684
 8002a30:	0800e470 	.word	0x0800e470
 8002a34:	0800e4e0 	.word	0x0800e4e0
 8002a38:	0800e508 	.word	0x0800e508
 8002a3c:	0800e41c 	.word	0x0800e41c
 8002a40:	0800e42c 	.word	0x0800e42c
 8002a44:	0800e3f4 	.word	0x0800e3f4
 8002a48:	0800e3fc 	.word	0x0800e3fc
 8002a4c:	0800e3e4 	.word	0x0800e3e4
 8002a50:	0800e3e8 	.word	0x0800e3e8
 8002a54:	0800e430 	.word	0x0800e430
 8002a58:	0800e440 	.word	0x0800e440
 8002a5c:	0800e44c 	.word	0x0800e44c
 8002a60:	0800e450 	.word	0x0800e450
 8002a64:	0800e474 	.word	0x0800e474
 8002a68:	0800e48c 	.word	0x0800e48c
 8002a6c:	0800e490 	.word	0x0800e490
 8002a70:	0800e4b0 	.word	0x0800e4b0
 8002a74:	0800e500 	.word	0x0800e500
 8002a78:	0800e4c4 	.word	0x0800e4c4
 8002a7c:	0800e4c0 	.word	0x0800e4c0
 8002a80:	0800e4dc 	.word	0x0800e4dc
 8002a84:	0800e50c 	.word	0x0800e50c
 8002a88:	0800e520 	.word	0x0800e520
 8002a8c:	0800e52c 	.word	0x0800e52c
 8002a90:	0800e548 	.word	0x0800e548
 8002a94:	0800e54c 	.word	0x0800e54c
 8002a98:	0800e56c 	.word	0x0800e56c
 8002a9c:	0800e658 	.word	0x0800e658
 8002aa0:	0800e590 	.word	0x0800e590
 8002aa4:	0800e570 	.word	0x0800e570
 8002aa8:	0800e58c 	.word	0x0800e58c
 8002aac:	0800e5bc 	.word	0x0800e5bc
 8002ab0:	0800e598 	.word	0x0800e598
 8002ab4:	0800e5b8 	.word	0x0800e5b8
 8002ab8:	0800e5d8 	.word	0x0800e5d8
 8002abc:	0800e5c0 	.word	0x0800e5c0
 8002ac0:	0800f498 	.word	0x0800f498
 8002ac4:	0800e5e0 	.word	0x0800e5e0
 8002ac8:	0800e5f8 	.word	0x0800e5f8
 8002acc:	0800e618 	.word	0x0800e618
 8002ad0:	0800e5fc 	.word	0x0800e5fc
 8002ad4:	0800e614 	.word	0x0800e614
 8002ad8:	0800e620 	.word	0x0800e620
 8002adc:	0800e62c 	.word	0x0800e62c
 8002ae0:	0800e634 	.word	0x0800e634
 8002ae4:	0800e65c 	.word	0x0800e65c
 8002ae8:	0800e668 	.word	0x0800e668
 8002aec:	0800e6ac 	.word	0x0800e6ac
 8002af0:	0800e68c 	.word	0x0800e68c
 8002af4:	0800e66c 	.word	0x0800e66c
 8002af8:	0800e690 	.word	0x0800e690
 8002afc:	0800e6b4 	.word	0x0800e6b4
 8002b00:	0800e700 	.word	0x0800e700
 8002b04:	0800e43c 	.word	0x0800e43c
 8002b08:	0800e524 	.word	0x0800e524
 8002b0c:	20008f40 	.word	0x20008f40
 8002b10:	0800e638 	.word	0x0800e638

08002b14 <run_fsm>:
 void run_fsm(FSMStruct * fsmstate){
 8002b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 if(fsmstate->next_state != fsmstate->state){
 8002b18:	7842      	ldrb	r2, [r0, #1]
 8002b1a:	7803      	ldrb	r3, [r0, #0]
 8002b1c:	429a      	cmp	r2, r3
 void run_fsm(FSMStruct * fsmstate){
 8002b1e:	4604      	mov	r4, r0
	 if(fsmstate->next_state != fsmstate->state){
 8002b20:	d107      	bne.n	8002b32 <run_fsm+0x1e>
	 switch(fsmstate->state){
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d021      	beq.n	8002b6a <run_fsm+0x56>
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d04f      	beq.n	8002bca <run_fsm+0xb6>
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d03e      	beq.n	8002bac <run_fsm+0x98>
 }
 8002b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch(fsmstate->state){
 8002b32:	2b07      	cmp	r3, #7
 8002b34:	d812      	bhi.n	8002b5c <run_fsm+0x48>
 8002b36:	e8df f003 	tbb	[pc, r3]
 8002b3a:	4e2e      	.short	0x4e2e
 8002b3c:	2e2e1104 	.word	0x2e2e1104
 8002b40:	2e11      	.short	0x2e11
				drv_disable_gd(drv);
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <run_fsm+0x1f8>)
				fsmstate->ready = 1;
 8002b44:	2201      	movs	r2, #1
 8002b46:	70c2      	strb	r2, [r0, #3]
				drv_disable_gd(drv);
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	8899      	ldrh	r1, [r3, #4]
 8002b4c:	f7fe ffaa 	bl	8001aa4 <drv_disable_gd>
				reset_foc(&controller);
 8002b50:	486f      	ldr	r0, [pc, #444]	; (8002d10 <run_fsm+0x1fc>)
 8002b52:	f7ff fc79 	bl	8002448 <reset_foc>
				zero_commands(&controller);		// Set commands to zero
 8002b56:	486e      	ldr	r0, [pc, #440]	; (8002d10 <run_fsm+0x1fc>)
 8002b58:	f7ff fe7e 	bl	8002858 <zero_commands>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8002b5c:	78e3      	ldrb	r3, [r4, #3]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 80d2 	bne.w	8002d08 <run_fsm+0x1f4>
				break;
 8002b64:	7823      	ldrb	r3, [r4, #0]
	 switch(fsmstate->state){
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d1dd      	bne.n	8002b26 <run_fsm+0x12>
			 controller.kd = 1; //todo remove
 8002b6a:	4c69      	ldr	r4, [pc, #420]	; (8002d10 <run_fsm+0x1fc>)
 8002b6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
				 torque_control(&controller);
 8002b70:	4620      	mov	r0, r4
			 controller.kd = 1; //todo remove
 8002b72:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
				 torque_control(&controller);
 8002b76:	f7ff fe45 	bl	8002804 <torque_control>
				 field_weaken(&controller);
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7ff fc9c 	bl	80024b8 <field_weaken>
					 commutate(&controller, &comm_encoder);
 8002b80:	4964      	ldr	r1, [pc, #400]	; (8002d14 <run_fsm+0x200>)
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff fcd6 	bl	8002534 <commutate>
			 controller.timeout ++;
 8002b88:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 }
 8002b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				fsmstate->ready = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	70c3      	strb	r3, [r0, #3]
			 fsmstate->state = fsmstate->next_state;
 8002b9a:	7022      	strb	r2, [r4, #0]
		switch(fsmstate->state){
 8002b9c:	2a04      	cmp	r2, #4
 8002b9e:	f200 80b1 	bhi.w	8002d04 <run_fsm+0x1f0>
 8002ba2:	e8df f002 	tbb	[pc, r2]
 8002ba6:	9566      	.short	0x9566
 8002ba8:	afab      	.short	0xafab
 8002baa:	62          	.byte	0x62
 8002bab:	00          	.byte	0x00
			 if(!comm_encoder_cal.done_ordering){
 8002bac:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <run_fsm+0x204>)
 8002bae:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002bb2:	b1cb      	cbz	r3, 8002be8 <run_fsm+0xd4>
			 else if(!comm_encoder_cal.done_cal){
 8002bb4:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8002bb8:	b9f3      	cbnz	r3, 8002bf8 <run_fsm+0xe4>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002bba:	4955      	ldr	r1, [pc, #340]	; (8002d10 <run_fsm+0x1fc>)
 8002bbc:	4855      	ldr	r0, [pc, #340]	; (8002d14 <run_fsm+0x200>)
 8002bbe:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 }
 8002bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002bc6:	f7fe bc93 	b.w	80014f0 <calibrate_encoder>
 }
 8002bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			 ps_print(&comm_encoder, 100);
 8002bce:	4851      	ldr	r0, [pc, #324]	; (8002d14 <run_fsm+0x200>)
 8002bd0:	2164      	movs	r1, #100	; 0x64
 8002bd2:	f001 b9dd 	b.w	8003f90 <ps_print>
				drv_disable_gd(drv);
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <run_fsm+0x1f8>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	8899      	ldrh	r1, [r3, #4]
 8002bdc:	f7fe ff62 	bl	8001aa4 <drv_disable_gd>
				fsmstate->ready = 1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	7862      	ldrb	r2, [r4, #1]
 8002be4:	70e3      	strb	r3, [r4, #3]
				break;
 8002be6:	e7d8      	b.n	8002b9a <run_fsm+0x86>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002be8:	4949      	ldr	r1, [pc, #292]	; (8002d10 <run_fsm+0x1fc>)
 8002bea:	484a      	ldr	r0, [pc, #296]	; (8002d14 <run_fsm+0x200>)
 8002bec:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 }
 8002bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002bf4:	f7fe bba4 	b.w	8001340 <order_phases>
				 E_ZERO = comm_encoder_cal.ezero;
 8002bf8:	69d5      	ldr	r5, [r2, #28]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002bfa:	4f46      	ldr	r7, [pc, #280]	; (8002d14 <run_fsm+0x200>)
 8002bfc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002d1c <run_fsm+0x208>
 8002c00:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
				 E_ZERO = comm_encoder_cal.ezero;
 8002c04:	4e46      	ldr	r6, [pc, #280]	; (8002d20 <run_fsm+0x20c>)
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002c06:	426b      	negs	r3, r5
 8002c08:	ee00 3a10 	vmov	s0, r3
 8002c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c10:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002c14:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002c18:	ee20 0a27 	vmul.f32	s0, s0, s15
				 E_ZERO = comm_encoder_cal.ezero;
 8002c1c:	6175      	str	r5, [r6, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002c1e:	f00a ffd1 	bl	800dbc4 <fmodf>
 8002c22:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002d24 <run_fsm+0x210>
 8002c26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002c2a:	ee17 0a90 	vmov	r0, s15
 8002c2e:	f7fd fcb3 	bl	8000598 <__aeabi_f2d>
 8002c32:	460b      	mov	r3, r1
 8002c34:	4602      	mov	r2, r0
 8002c36:	4629      	mov	r1, r5
 8002c38:	483b      	ldr	r0, [pc, #236]	; (8002d28 <run_fsm+0x214>)
 8002c3a:	f007 fa65 	bl	800a108 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8002c3e:	493b      	ldr	r1, [pc, #236]	; (8002d2c <run_fsm+0x218>)
 8002c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c44:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002c48:	f006 fdc4 	bl	80097d4 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8002c4c:	4937      	ldr	r1, [pc, #220]	; (8002d2c <run_fsm+0x218>)
 8002c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c52:	f106 0018 	add.w	r0, r6, #24
 8002c56:	f006 fdbd 	bl	80097d4 <memcpy>
				 save_to_flash();
 8002c5a:	f7ff f9cd 	bl	8001ff8 <save_to_flash>
				 load_from_flash();
 8002c5e:	f7ff f995 	bl	8001f8c <load_from_flash>
		fsmstate->next_state = MENU_MODE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	7063      	strb	r3, [r4, #1]
		fsmstate->ready = 0;
 8002c66:	70e3      	strb	r3, [r4, #3]
		return;
 8002c68:	e761      	b.n	8002b2e <run_fsm+0x1a>
				enter_setup_state();
 8002c6a:	f7ff fe03 	bl	8002874 <enter_setup_state>
				break;
 8002c6e:	7823      	ldrb	r3, [r4, #0]
 8002c70:	e757      	b.n	8002b22 <run_fsm+0xe>
	    printf("\n\r\n\r");
 8002c72:	482f      	ldr	r0, [pc, #188]	; (8002d30 <run_fsm+0x21c>)
 8002c74:	f007 fa48 	bl	800a108 <iprintf>
	    printf(" Commands:\n\r");
 8002c78:	482e      	ldr	r0, [pc, #184]	; (8002d34 <run_fsm+0x220>)
 8002c7a:	f007 fa45 	bl	800a108 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8002c7e:	482e      	ldr	r0, [pc, #184]	; (8002d38 <run_fsm+0x224>)
 8002c80:	f007 fa42 	bl	800a108 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8002c84:	482d      	ldr	r0, [pc, #180]	; (8002d3c <run_fsm+0x228>)
 8002c86:	f007 fa3f 	bl	800a108 <iprintf>
	    printf(" s - Setup\n\r");
 8002c8a:	482d      	ldr	r0, [pc, #180]	; (8002d40 <run_fsm+0x22c>)
 8002c8c:	f007 fa3c 	bl	800a108 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8002c90:	482c      	ldr	r0, [pc, #176]	; (8002d44 <run_fsm+0x230>)
 8002c92:	f007 fa39 	bl	800a108 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8002c96:	482c      	ldr	r0, [pc, #176]	; (8002d48 <run_fsm+0x234>)
 8002c98:	f007 fa36 	bl	800a108 <iprintf>
	    printf(" f - Factory reset flash vars\n\r");
 8002c9c:	482b      	ldr	r0, [pc, #172]	; (8002d4c <run_fsm+0x238>)
 8002c9e:	f007 fa33 	bl	800a108 <iprintf>
	    printf(" d - Variable dump\n\r");
 8002ca2:	482b      	ldr	r0, [pc, #172]	; (8002d50 <run_fsm+0x23c>)
 8002ca4:	f007 fa30 	bl	800a108 <iprintf>
	    printf(" i - Increment vdes\n\r");
 8002ca8:	482a      	ldr	r0, [pc, #168]	; (8002d54 <run_fsm+0x240>)
 8002caa:	f007 fa2d 	bl	800a108 <iprintf>
	    printf(" j - Decrement vdes\n\r");
 8002cae:	482a      	ldr	r0, [pc, #168]	; (8002d58 <run_fsm+0x244>)
 8002cb0:	f007 fa2a 	bl	800a108 <iprintf>
	    printf(" p - Increment pos des\n\r");
 8002cb4:	4829      	ldr	r0, [pc, #164]	; (8002d5c <run_fsm+0x248>)
 8002cb6:	f007 fa27 	bl	800a108 <iprintf>
	    printf(" l - Decrement pos des\n\r");
 8002cba:	4829      	ldr	r0, [pc, #164]	; (8002d60 <run_fsm+0x24c>)
 8002cbc:	f007 fa24 	bl	800a108 <iprintf>
	    printf(" o - Swap phase order\n\r");
 8002cc0:	4828      	ldr	r0, [pc, #160]	; (8002d64 <run_fsm+0x250>)
 8002cc2:	f007 fa21 	bl	800a108 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8002cc6:	4828      	ldr	r0, [pc, #160]	; (8002d68 <run_fsm+0x254>)
 8002cc8:	f007 fa1e 	bl	800a108 <iprintf>
 8002ccc:	7823      	ldrb	r3, [r4, #0]
 }
 8002cce:	e728      	b.n	8002b22 <run_fsm+0xe>
				comm_encoder.e_zero = 0;
 8002cd0:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <run_fsm+0x200>)
				comm_encoder_cal.done_cal = 0;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <run_fsm+0x204>)
 8002cd4:	2100      	movs	r1, #0
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002cd6:	f102 008c 	add.w	r0, r2, #140	; 0x8c
				comm_encoder.e_zero = 0;
 8002cda:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
				comm_encoder_cal.done_cal = 0;
 8002ce2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8002ce6:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8002cea:	7419      	strb	r1, [r3, #16]
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002cec:	f006 fd9a 	bl	8009824 <memset>
				drv_enable_gd(drv);
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <run_fsm+0x1f8>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	8899      	ldrh	r1, [r3, #4]
 8002cf6:	f7fe fe83 	bl	8001a00 <drv_enable_gd>
 8002cfa:	e733      	b.n	8002b64 <run_fsm+0x50>
				reset_foc(&controller);
 8002cfc:	4804      	ldr	r0, [pc, #16]	; (8002d10 <run_fsm+0x1fc>)
 8002cfe:	f7ff fba3 	bl	8002448 <reset_foc>
				drv_enable_gd(drv);
 8002d02:	e7f5      	b.n	8002cf0 <run_fsm+0x1dc>
			 fsmstate->state = fsmstate->next_state;
 8002d04:	4613      	mov	r3, r2
 8002d06:	e70e      	b.n	8002b26 <run_fsm+0x12>
 8002d08:	7862      	ldrb	r2, [r4, #1]
 8002d0a:	e746      	b.n	8002b9a <run_fsm+0x86>
 8002d0c:	2000936c 	.word	0x2000936c
 8002d10:	20000784 	.word	0x20000784
 8002d14:	200003e0 	.word	0x200003e0
 8002d18:	20000a84 	.word	0x20000a84
 8002d1c:	37800000 	.word	0x37800000
 8002d20:	20008f40 	.word	0x20008f40
 8002d24:	40c90fdb 	.word	0x40c90fdb
 8002d28:	0800e72c 	.word	0x0800e72c
 8002d2c:	20008ab0 	.word	0x20008ab0
 8002d30:	0800e26c 	.word	0x0800e26c
 8002d34:	0800e274 	.word	0x0800e274
 8002d38:	0800e284 	.word	0x0800e284
 8002d3c:	0800e298 	.word	0x0800e298
 8002d40:	0800e2b4 	.word	0x0800e2b4
 8002d44:	0800e2c4 	.word	0x0800e2c4
 8002d48:	0800e2dc 	.word	0x0800e2dc
 8002d4c:	0800e2f8 	.word	0x0800e2f8
 8002d50:	0800e318 	.word	0x0800e318
 8002d54:	0800e330 	.word	0x0800e330
 8002d58:	0800e348 	.word	0x0800e348
 8002d5c:	0800e360 	.word	0x0800e360
 8002d60:	0800e37c 	.word	0x0800e37c
 8002d64:	0800e398 	.word	0x0800e398
 8002d68:	0800e3b0 	.word	0x0800e3b0

08002d6c <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	7b43      	ldrb	r3, [r0, #13]
 8002d70:	3b61      	subs	r3, #97	; 0x61
 8002d72:	4604      	mov	r4, r0
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
			 V_MIN = -V_MAX;
			 printf("V_MAX set to %f\r\n", V_MAX);
			 break;
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8002d74:	1d05      	adds	r5, r0, #4
 8002d76:	2b17      	cmp	r3, #23
 8002d78:	d819      	bhi.n	8002dae <process_user_input+0x42>
 8002d7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002d7e:	0028      	.short	0x0028
 8002d80:	00780050 	.word	0x00780050
 8002d84:	001800a0 	.word	0x001800a0
 8002d88:	00e700bf 	.word	0x00e700bf
 8002d8c:	012e0106 	.word	0x012e0106
 8002d90:	01380018 	.word	0x01380018
 8002d94:	017f0157 	.word	0x017f0157
 8002d98:	00180018 	.word	0x00180018
 8002d9c:	00180189 	.word	0x00180189
 8002da0:	00180018 	.word	0x00180018
 8002da4:	001801ac 	.word	0x001801ac
 8002da8:	001801b6 	.word	0x001801b6
 8002dac:	020b      	.short	0x020b
 8002dae:	48e0      	ldr	r0, [pc, #896]	; (8003130 <process_user_input+0x3c4>)
 8002db0:	4629      	mov	r1, r5
 8002db2:	f007 f9a9 	bl	800a108 <iprintf>
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 8002db6:	f7ff f91f 	bl	8001ff8 <save_to_flash>
	 load_from_flash();
 8002dba:	f7ff f8e7 	bl	8001f8c <load_from_flash>
	 enter_setup_state();
 8002dbe:	f7ff fd59 	bl	8002874 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	7323      	strb	r3, [r4, #12]
	 fsmstate->cmd_id = 0;
 8002dc6:	7363      	strb	r3, [r4, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8002dc8:	602b      	str	r3, [r5, #0]
 8002dca:	606b      	str	r3, [r5, #4]
 }
 8002dcc:	bd38      	pop	{r3, r4, r5, pc}
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f006 fcce 	bl	8009770 <atof>
 8002dd4:	ec51 0b10 	vmov	r0, r1, d0
 8002dd8:	f7fd ff2e 	bl	8000c38 <__aeabi_d2f>
 8002ddc:	ee07 0a90 	vmov	s15, r0
 8002de0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	bf88      	it	hi
 8002dee:	eef0 7a47 	vmovhi.f32	s15, s14
 8002df2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002df6:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 8003190 <process_user_input+0x424>
 8002dfa:	4bce      	ldr	r3, [pc, #824]	; (8003134 <process_user_input+0x3c8>)
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	bfb8      	it	lt
 8002e02:	eef0 7a47 	vmovlt.f32	s15, s14
 8002e06:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8002e0a:	ee17 0a90 	vmov	r0, s15
 8002e0e:	f7fd fbc3 	bl	8000598 <__aeabi_f2d>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	48c8      	ldr	r0, [pc, #800]	; (8003138 <process_user_input+0x3cc>)
 8002e18:	f007 f976 	bl	800a108 <iprintf>
			 break;
 8002e1c:	e7cb      	b.n	8002db6 <process_user_input+0x4a>
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f006 fca6 	bl	8009770 <atof>
 8002e24:	ec51 0b10 	vmov	r0, r1, d0
 8002e28:	f7fd ff06 	bl	8000c38 <__aeabi_d2f>
 8002e2c:	eddf 6ac3 	vldr	s13, [pc, #780]	; 800313c <process_user_input+0x3d0>
 8002e30:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8003140 <process_user_input+0x3d4>
 8002e34:	4bbf      	ldr	r3, [pc, #764]	; (8003134 <process_user_input+0x3c8>)
 8002e36:	ee07 0a90 	vmov	s15, r0
 8002e3a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	bf88      	it	hi
 8002e44:	eef0 7a66 	vmovhi.f32	s15, s13
 8002e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	bfb8      	it	lt
 8002e52:	eef0 7a47 	vmovlt.f32	s15, s14
 8002e56:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8002e5a:	ee17 0a90 	vmov	r0, s15
 8002e5e:	f7fd fb9b 	bl	8000598 <__aeabi_f2d>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	48b7      	ldr	r0, [pc, #732]	; (8003144 <process_user_input+0x3d8>)
 8002e68:	f007 f94e 	bl	800a108 <iprintf>
			 break;
 8002e6c:	e7a3      	b.n	8002db6 <process_user_input+0x4a>
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f006 fc7e 	bl	8009770 <atof>
 8002e74:	ec51 0b10 	vmov	r0, r1, d0
 8002e78:	f7fd fede 	bl	8000c38 <__aeabi_d2f>
 8002e7c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003148 <process_user_input+0x3dc>
 8002e80:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8003190 <process_user_input+0x424>
 8002e84:	4bab      	ldr	r3, [pc, #684]	; (8003134 <process_user_input+0x3c8>)
 8002e86:	ee07 0a90 	vmov	s15, r0
 8002e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e92:	bf88      	it	hi
 8002e94:	eef0 7a47 	vmovhi.f32	s15, s14
 8002e98:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	bfb8      	it	lt
 8002ea2:	eef0 7a66 	vmovlt.f32	s15, s13
 8002ea6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8002eaa:	ee17 0a90 	vmov	r0, s15
 8002eae:	f7fd fb73 	bl	8000598 <__aeabi_f2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	48a5      	ldr	r0, [pc, #660]	; (800314c <process_user_input+0x3e0>)
 8002eb8:	f007 f926 	bl	800a108 <iprintf>
			 break;
 8002ebc:	e77b      	b.n	8002db6 <process_user_input+0x4a>
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f006 fc56 	bl	8009770 <atof>
 8002ec4:	ec51 0b10 	vmov	r0, r1, d0
 8002ec8:	f7fd feb6 	bl	8000c38 <__aeabi_d2f>
 8002ecc:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8003190 <process_user_input+0x424>
 8002ed0:	4b98      	ldr	r3, [pc, #608]	; (8003134 <process_user_input+0x3c8>)
 8002ed2:	ee07 0a90 	vmov	s15, r0
 8002ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ede:	bfb8      	it	lt
 8002ee0:	eef0 7a47 	vmovlt.f32	s15, s14
 8002ee4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8002ee8:	ee17 0a90 	vmov	r0, s15
 8002eec:	f7fd fb54 	bl	8000598 <__aeabi_f2d>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4896      	ldr	r0, [pc, #600]	; (8003150 <process_user_input+0x3e4>)
 8002ef6:	f007 f907 	bl	800a108 <iprintf>
			 break;
 8002efa:	e75c      	b.n	8002db6 <process_user_input+0x4a>
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8002efc:	4628      	mov	r0, r5
 8002efe:	f006 fc37 	bl	8009770 <atof>
 8002f02:	ec51 0b10 	vmov	r0, r1, d0
 8002f06:	f7fd fe97 	bl	8000c38 <__aeabi_d2f>
 8002f0a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003154 <process_user_input+0x3e8>
 8002f0e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003190 <process_user_input+0x424>
 8002f12:	4b88      	ldr	r3, [pc, #544]	; (8003134 <process_user_input+0x3c8>)
 8002f14:	ee07 0a90 	vmov	s15, r0
 8002f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	bf88      	it	hi
 8002f22:	eef0 7a47 	vmovhi.f32	s15, s14
 8002f26:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	bfb8      	it	lt
 8002f30:	eef0 7a66 	vmovlt.f32	s15, s13
 8002f34:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8002f38:	ee17 0a90 	vmov	r0, s15
 8002f3c:	f7fd fb2c 	bl	8000598 <__aeabi_f2d>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4884      	ldr	r0, [pc, #528]	; (8003158 <process_user_input+0x3ec>)
 8002f46:	f007 f8df 	bl	800a108 <iprintf>
			 break;
 8002f4a:	e734      	b.n	8002db6 <process_user_input+0x4a>
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f006 fc0f 	bl	8009770 <atof>
 8002f52:	ec51 0b10 	vmov	r0, r1, d0
 8002f56:	f7fd fe6f 	bl	8000c38 <__aeabi_d2f>
 8002f5a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800315c <process_user_input+0x3f0>
 8002f5e:	4b75      	ldr	r3, [pc, #468]	; (8003134 <process_user_input+0x3c8>)
 8002f60:	ee07 0a90 	vmov	s15, r0
 8002f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6c:	bfb8      	it	lt
 8002f6e:	eef0 7a47 	vmovlt.f32	s15, s14
 8002f72:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8002f76:	ee17 0a90 	vmov	r0, s15
 8002f7a:	f7fd fb0d 	bl	8000598 <__aeabi_f2d>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4877      	ldr	r0, [pc, #476]	; (8003160 <process_user_input+0x3f4>)
 8002f84:	f007 f8c0 	bl	800a108 <iprintf>
			 break;
 8002f88:	e715      	b.n	8002db6 <process_user_input+0x4a>
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f006 fbf0 	bl	8009770 <atof>
 8002f90:	ec51 0b10 	vmov	r0, r1, d0
 8002f94:	f7fd fe50 	bl	8000c38 <__aeabi_d2f>
 8002f98:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003164 <process_user_input+0x3f8>
 8002f9c:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003190 <process_user_input+0x424>
 8002fa0:	4b64      	ldr	r3, [pc, #400]	; (8003134 <process_user_input+0x3c8>)
 8002fa2:	ee07 0a90 	vmov	s15, r0
 8002fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	bf88      	it	hi
 8002fb0:	eef0 7a47 	vmovhi.f32	s15, s14
 8002fb4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	bfb8      	it	lt
 8002fbe:	eef0 7a66 	vmovlt.f32	s15, s13
 8002fc2:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8002fc6:	ee17 0a90 	vmov	r0, s15
 8002fca:	f7fd fae5 	bl	8000598 <__aeabi_f2d>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4865      	ldr	r0, [pc, #404]	; (8003168 <process_user_input+0x3fc>)
 8002fd4:	f007 f898 	bl	800a108 <iprintf>
			 break;
 8002fd8:	e6ed      	b.n	8002db6 <process_user_input+0x4a>
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f006 fbcb 	bl	8009776 <atoi>
 8002fe0:	4b62      	ldr	r3, [pc, #392]	; (800316c <process_user_input+0x400>)
 8002fe2:	4601      	mov	r1, r0
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8002fe4:	4862      	ldr	r0, [pc, #392]	; (8003170 <process_user_input+0x404>)
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8002fe6:	6059      	str	r1, [r3, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8002fe8:	f007 f88e 	bl	800a108 <iprintf>
			 break;
 8002fec:	e6e3      	b.n	8002db6 <process_user_input+0x4a>
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f006 fbbe 	bl	8009770 <atof>
 8002ff4:	ec51 0b10 	vmov	r0, r1, d0
 8002ff8:	f7fd fe1e 	bl	8000c38 <__aeabi_d2f>
 8002ffc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003174 <process_user_input+0x408>
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <process_user_input+0x3c8>)
 8003002:	ee07 0a90 	vmov	s15, r0
 8003006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300e:	bfb8      	it	lt
 8003010:	eef0 7a47 	vmovlt.f32	s15, s14
 8003014:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8003018:	ee17 0a90 	vmov	r0, s15
 800301c:	f7fd fabc 	bl	8000598 <__aeabi_f2d>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4854      	ldr	r0, [pc, #336]	; (8003178 <process_user_input+0x40c>)
 8003026:	f007 f86f 	bl	800a108 <iprintf>
			 break;
 800302a:	e6c4      	b.n	8002db6 <process_user_input+0x4a>
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 800302c:	4628      	mov	r0, r5
 800302e:	f006 fb9f 	bl	8009770 <atof>
 8003032:	ec51 0b10 	vmov	r0, r1, d0
 8003036:	f7fd fdff 	bl	8000c38 <__aeabi_d2f>
 800303a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003148 <process_user_input+0x3dc>
 800303e:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003190 <process_user_input+0x424>
 8003042:	4b3c      	ldr	r3, [pc, #240]	; (8003134 <process_user_input+0x3c8>)
 8003044:	ee07 0a90 	vmov	s15, r0
 8003048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	bf88      	it	hi
 8003052:	eef0 7a47 	vmovhi.f32	s15, s14
 8003056:	eef4 7ae6 	vcmpe.f32	s15, s13
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	bfb8      	it	lt
 8003060:	eef0 7a66 	vmovlt.f32	s15, s13
 8003064:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003068:	ee17 0a90 	vmov	r0, s15
 800306c:	f7fd fa94 	bl	8000598 <__aeabi_f2d>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4841      	ldr	r0, [pc, #260]	; (800317c <process_user_input+0x410>)
 8003076:	f007 f847 	bl	800a108 <iprintf>
			 break;
 800307a:	e69c      	b.n	8002db6 <process_user_input+0x4a>
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 800307c:	4628      	mov	r0, r5
 800307e:	f006 fb7a 	bl	8009776 <atoi>
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <process_user_input+0x400>)
 8003084:	4601      	mov	r1, r0
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER); //ben bugfix MASTER to TX_ID in string
 8003086:	483e      	ldr	r0, [pc, #248]	; (8003180 <process_user_input+0x414>)
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003088:	6099      	str	r1, [r3, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER); //ben bugfix MASTER to TX_ID in string
 800308a:	f007 f83d 	bl	800a108 <iprintf>
			 break;
 800308e:	e692      	b.n	8002db6 <process_user_input+0x4a>
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003090:	4628      	mov	r0, r5
 8003092:	f006 fb6d 	bl	8009770 <atof>
 8003096:	ec51 0b10 	vmov	r0, r1, d0
 800309a:	f7fd fdcd 	bl	8000c38 <__aeabi_d2f>
 800309e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003190 <process_user_input+0x424>
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <process_user_input+0x3c8>)
 80030a4:	ee07 0a90 	vmov	s15, r0
 80030a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	bfb8      	it	lt
 80030b2:	eef0 7a47 	vmovlt.f32	s15, s14
			 P_MIN = -P_MAX;
 80030b6:	eeb1 7a67 	vneg.f32	s14, s15
 80030ba:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80030be:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 printf("P_MAX set to %f\r\n", P_MAX);
 80030c2:	ee17 0a90 	vmov	r0, s15
 80030c6:	f7fd fa67 	bl	8000598 <__aeabi_f2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	482d      	ldr	r0, [pc, #180]	; (8003184 <process_user_input+0x418>)
 80030d0:	f007 f81a 	bl	800a108 <iprintf>
			 break;
 80030d4:	e66f      	b.n	8002db6 <process_user_input+0x4a>
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80030d6:	4628      	mov	r0, r5
 80030d8:	f006 fb4d 	bl	8009776 <atoi>
 80030dc:	4b23      	ldr	r3, [pc, #140]	; (800316c <process_user_input+0x400>)
 80030de:	4601      	mov	r1, r0
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80030e0:	4829      	ldr	r0, [pc, #164]	; (8003188 <process_user_input+0x41c>)
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80030e2:	60d9      	str	r1, [r3, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80030e4:	f007 f810 	bl	800a108 <iprintf>
			 break;
 80030e8:	e665      	b.n	8002db6 <process_user_input+0x4a>
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80030ea:	4628      	mov	r0, r5
 80030ec:	f006 fb40 	bl	8009770 <atof>
 80030f0:	ec51 0b10 	vmov	r0, r1, d0
 80030f4:	f7fd fda0 	bl	8000c38 <__aeabi_d2f>
 80030f8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003190 <process_user_input+0x424>
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <process_user_input+0x3c8>)
 80030fe:	ee07 0a90 	vmov	s15, r0
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	bfb8      	it	lt
 800310c:	eef0 7a47 	vmovlt.f32	s15, s14
			 V_MIN = -V_MAX;
 8003110:	eeb1 7a67 	vneg.f32	s14, s15
 8003114:	ed83 7a15 	vstr	s14, [r3, #84]	; 0x54
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003118:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("V_MAX set to %f\r\n", V_MAX);
 800311c:	ee17 0a90 	vmov	r0, s15
 8003120:	f7fd fa3a 	bl	8000598 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4818      	ldr	r0, [pc, #96]	; (800318c <process_user_input+0x420>)
 800312a:	f006 ffed 	bl	800a108 <iprintf>
			 break;
 800312e:	e642      	b.n	8002db6 <process_user_input+0x4a>
 8003130:	0800e878 	.word	0x0800e878
 8003134:	20000684 	.word	0x20000684
 8003138:	0800e7f4 	.word	0x0800e7f4
 800313c:	44fa0000 	.word	0x44fa0000
 8003140:	42c80000 	.word	0x42c80000
 8003144:	0800e740 	.word	0x0800e740
 8003148:	42200000 	.word	0x42200000
 800314c:	0800e7dc 	.word	0x0800e7dc
 8003150:	0800e83c 	.word	0x0800e83c
 8003154:	42040000 	.word	0x42040000
 8003158:	0800e794 	.word	0x0800e794
 800315c:	3a83126f 	.word	0x3a83126f
 8003160:	0800e808 	.word	0x0800e808
 8003164:	43160000 	.word	0x43160000
 8003168:	0800e7c4 	.word	0x0800e7c4
 800316c:	20008f40 	.word	0x20008f40
 8003170:	0800e754 	.word	0x0800e754
 8003174:	38d1b717 	.word	0x38d1b717
 8003178:	0800e818 	.word	0x0800e818
 800317c:	0800e780 	.word	0x0800e780
 8003180:	0800e768 	.word	0x0800e768
 8003184:	0800e850 	.word	0x0800e850
 8003188:	0800e7ac 	.word	0x0800e7ac
 800318c:	0800e864 	.word	0x0800e864
 8003190:	00000000 	.word	0x00000000
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003194:	4628      	mov	r0, r5
 8003196:	f006 faeb 	bl	8009770 <atof>
 800319a:	ec51 0b10 	vmov	r0, r1, d0
 800319e:	f7fd fd4b 	bl	8000c38 <__aeabi_d2f>
 80031a2:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003190 <process_user_input+0x424>
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <process_user_input+0x468>)
 80031a8:	ee07 0a90 	vmov	s15, r0
 80031ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	bfb8      	it	lt
 80031b6:	eef0 7a47 	vmovlt.f32	s15, s14
 80031ba:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80031be:	ee17 0a90 	vmov	r0, s15
 80031c2:	f7fd f9e9 	bl	8000598 <__aeabi_f2d>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4803      	ldr	r0, [pc, #12]	; (80031d8 <process_user_input+0x46c>)
 80031cc:	f006 ff9c 	bl	800a108 <iprintf>
			 break;
 80031d0:	e5f1      	b.n	8002db6 <process_user_input+0x4a>
 80031d2:	bf00      	nop
 80031d4:	20000684 	.word	0x20000684
 80031d8:	0800e828 	.word	0x0800e828

080031dc <update_fsm>:
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80031dc:	291b      	cmp	r1, #27
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80031de:	4603      	mov	r3, r0
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80031e0:	d040      	beq.n	8003264 <update_fsm+0x88>
	switch(fsmstate->state){
 80031e2:	7802      	ldrb	r2, [r0, #0]
 80031e4:	2a04      	cmp	r2, #4
 80031e6:	d041      	beq.n	800326c <update_fsm+0x90>
 80031e8:	2a07      	cmp	r2, #7
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80031ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(fsmstate->state){
 80031ee:	d047      	beq.n	8003280 <update_fsm+0xa4>
 80031f0:	b10a      	cbz	r2, 80031f6 <update_fsm+0x1a>
 }
 80031f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switch (fsm_input){
 80031f6:	3963      	subs	r1, #99	; 0x63
 80031f8:	2917      	cmp	r1, #23
 80031fa:	d8fa      	bhi.n	80031f2 <update_fsm+0x16>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <update_fsm+0x28>)
 80031fe:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003639 	.word	0x08003639
 8003208:	08003469 	.word	0x08003469
 800320c:	08003401 	.word	0x08003401
 8003210:	080033ed 	.word	0x080033ed
 8003214:	080031f3 	.word	0x080031f3
 8003218:	080031f3 	.word	0x080031f3
 800321c:	080033d7 	.word	0x080033d7
 8003220:	080033a9 	.word	0x080033a9
 8003224:	080031f3 	.word	0x080031f3
 8003228:	08003393 	.word	0x08003393
 800322c:	08003389 	.word	0x08003389
 8003230:	080031f3 	.word	0x080031f3
 8003234:	08003369 	.word	0x08003369
 8003238:	0800333b 	.word	0x0800333b
 800323c:	080031f3 	.word	0x080031f3
 8003240:	080031f3 	.word	0x080031f3
 8003244:	08003331 	.word	0x08003331
 8003248:	080031f3 	.word	0x080031f3
 800324c:	080031f3 	.word	0x080031f3
 8003250:	080031f3 	.word	0x080031f3
 8003254:	080031f3 	.word	0x080031f3
 8003258:	080031f3 	.word	0x080031f3
 800325c:	080031f3 	.word	0x080031f3
 8003260:	080032f9 	.word	0x080032f9
		fsmstate->next_state = MENU_MODE;
 8003264:	2200      	movs	r2, #0
 8003266:	7042      	strb	r2, [r0, #1]
		fsmstate->ready = 0;
 8003268:	70c2      	strb	r2, [r0, #3]
		return;
 800326a:	4770      	bx	lr
			if(fsm_input == ENTER_CMD){
 800326c:	290d      	cmp	r1, #13
 800326e:	f000 81e8 	beq.w	8003642 <update_fsm+0x466>
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003272:	7b02      	ldrb	r2, [r0, #12]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d13c      	bne.n	80032f2 <update_fsm+0x116>
 8003278:	7341      	strb	r1, [r0, #13]
			fsmstate->bytecount++;
 800327a:	3201      	adds	r2, #1
 800327c:	731a      	strb	r2, [r3, #12]
			break;
 800327e:	4770      	bx	lr
			if(fsm_input == 'Y'){
 8003280:	2959      	cmp	r1, #89	; 0x59
 8003282:	d1b6      	bne.n	80031f2 <update_fsm+0x16>
				I_BW = 1000;
 8003284:	4b61      	ldr	r3, [pc, #388]	; (800340c <update_fsm+0x230>)
				PHASE_ORDER = 0;
 8003286:	4a62      	ldr	r2, [pc, #392]	; (8003410 <update_fsm+0x234>)
				I_BW = 1000;
 8003288:	4962      	ldr	r1, [pc, #392]	; (8003414 <update_fsm+0x238>)
 800328a:	6099      	str	r1, [r3, #8]
				CAN_ID = 1;
 800328c:	2001      	movs	r0, #1
				PHASE_ORDER = 0;
 800328e:	2100      	movs	r1, #0
				CAN_ID = 1;
 8003290:	6050      	str	r0, [r2, #4]
				CAN_TIMEOUT = 1000;
 8003292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				M_ZERO = 0;
 8003296:	e9c2 1104 	strd	r1, r1, [r2, #16]
				PHASE_ORDER = 0;
 800329a:	6011      	str	r1, [r2, #0]
				CAN_MASTER = 0;
 800329c:	6091      	str	r1, [r2, #8]
				CAN_TIMEOUT = 1000;
 800329e:	60d0      	str	r0, [r2, #12]
 80032a0:	f102 0018 	add.w	r0, r2, #24
				PPAIRS = 21.0f;
 80032a4:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <update_fsm+0x23c>)
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
				P_MAX = 12.5f;
 80032a8:	4a5c      	ldr	r2, [pc, #368]	; (800341c <update_fsm+0x240>)
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50
				I_MAX=40;
 80032ac:	4d5c      	ldr	r5, [pc, #368]	; (8003420 <update_fsm+0x244>)
				TEMP_MAX = 125.0f;
 80032ae:	4c5d      	ldr	r4, [pc, #372]	; (8003424 <update_fsm+0x248>)
				P_MIN = -12.5f;
 80032b0:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <update_fsm+0x24c>)
				I_MAX=40;
 80032b2:	60dd      	str	r5, [r3, #12]
				TEMP_MAX = 125.0f;
 80032b4:	621c      	str	r4, [r3, #32]
				P_MIN = -12.5f;
 80032b6:	64da      	str	r2, [r3, #76]	; 0x4c
				V_MAX = 65.0f;
 80032b8:	4d5c      	ldr	r5, [pc, #368]	; (800342c <update_fsm+0x250>)
				V_MIN = -65.0f;
 80032ba:	4c5d      	ldr	r4, [pc, #372]	; (8003430 <update_fsm+0x254>)
				V_MAX = 65.0f;
 80032bc:	659d      	str	r5, [r3, #88]	; 0x58
				I_FW_MAX=0;
 80032be:	2200      	movs	r2, #0
				V_MIN = -65.0f;
 80032c0:	655c      	str	r4, [r3, #84]	; 0x54
				I_FW_MAX=0;
 80032c2:	619a      	str	r2, [r3, #24]
				R_NOMINAL = 0.0f;
 80032c4:	61da      	str	r2, [r3, #28]
				I_CAL = 5.0f;
 80032c6:	4d5b      	ldr	r5, [pc, #364]	; (8003434 <update_fsm+0x258>)
				KP_MAX = 500.0f;
 80032c8:	4e5b      	ldr	r6, [pc, #364]	; (8003438 <update_fsm+0x25c>)
 80032ca:	65de      	str	r6, [r3, #92]	; 0x5c
				GR = 1.0f;
 80032cc:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80032d0:	f44f 7200 	mov.w	r2, #512	; 0x200
				I_CAL = 5.0f;
 80032d4:	649d      	str	r5, [r3, #72]	; 0x48
				KD_MAX = 5.0f;
 80032d6:	661d      	str	r5, [r3, #96]	; 0x60
				GR = 1.0f;
 80032d8:	645c      	str	r4, [r3, #68]	; 0x44
				KT = 1.0f;
 80032da:	639c      	str	r4, [r3, #56]	; 0x38
				for(int i = 0; i < 128; i++){
 80032dc:	f006 faa2 	bl	8009824 <memset>
				save_to_flash();
 80032e0:	f7fe fe8a 	bl	8001ff8 <save_to_flash>
				load_from_flash();
 80032e4:	f7fe fe52 	bl	8001f8c <load_from_flash>
 }
 80032e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				printf("\n\r  FLASH variables reset. \n\r Please cycle power. \n\r\n\r");
 80032ec:	4853      	ldr	r0, [pc, #332]	; (800343c <update_fsm+0x260>)
 80032ee:	f006 bf0b 	b.w	800a108 <iprintf>
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80032f2:	4410      	add	r0, r2
 80032f4:	70c1      	strb	r1, [r0, #3]
 80032f6:	e7c0      	b.n	800327a <update_fsm+0x9e>
					comm_encoder.m_zero = 0;
 80032f8:	4c51      	ldr	r4, [pc, #324]	; (8003440 <update_fsm+0x264>)
					printf("Zero pos command entry\n\r");
 80032fa:	4852      	ldr	r0, [pc, #328]	; (8003444 <update_fsm+0x268>)
					M_ZERO = zero_count;				 //ben bugfix
 80032fc:	4d44      	ldr	r5, [pc, #272]	; (8003410 <update_fsm+0x234>)
					printf("Zero pos command entry\n\r");
 80032fe:	f006 ff03 	bl	800a108 <iprintf>
					ps_sample(&comm_encoder, DT);
 8003302:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8003448 <update_fsm+0x26c>
					comm_encoder.m_zero = 0;
 8003306:	2300      	movs	r3, #0
					ps_sample(&comm_encoder, DT);
 8003308:	4620      	mov	r0, r4
					comm_encoder.m_zero = 0;
 800330a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 800330e:	f000 fd67 	bl	8003de0 <ps_sample>
					HAL_Delay(20);
 8003312:	2014      	movs	r0, #20
 8003314:	f001 fa90 	bl	8004838 <HAL_Delay>
					M_ZERO = zero_count;				 //ben bugfix
 8003318:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800331a:	612b      	str	r3, [r5, #16]
					save_to_flash();
 800331c:	f7fe fe6c 	bl	8001ff8 <save_to_flash>
					load_from_flash();
 8003320:	f7fe fe34 	bl	8001f8c <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 8003324:	6929      	ldr	r1, [r5, #16]
 8003326:	4849      	ldr	r0, [pc, #292]	; (800344c <update_fsm+0x270>)
 }
 8003328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 800332c:	f006 beec 	b.w	800a108 <iprintf>
					fsmstate->next_state = SETUP_MODE;
 8003330:	2104      	movs	r1, #4
					fsmstate->ready = 0;
 8003332:	2200      	movs	r2, #0
					fsmstate->next_state = SETUP_MODE;
 8003334:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 8003336:	70c2      	strb	r2, [r0, #3]
					break;
 8003338:	e75b      	b.n	80031f2 <update_fsm+0x16>
					printf(" ");
 800333a:	2020      	movs	r0, #32
 800333c:	f006 fefc 	bl	800a138 <putchar>
					controller.p_des = controller.p_des + 0.5;
 8003340:	4b43      	ldr	r3, [pc, #268]	; (8003450 <update_fsm+0x274>)
 8003342:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003346:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800334a:	ee77 7a87 	vadd.f32	s15, s15, s14
					controller.p_des = controller.p_des - 0.5;
 800334e:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
					printf("OK, new P_des is %f\n\r", controller.p_des);
 8003352:	ee17 0a90 	vmov	r0, s15
 8003356:	f7fd f91f 	bl	8000598 <__aeabi_f2d>
 }
 800335a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("OK, new P_des is %f\n\r", controller.p_des);
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	483c      	ldr	r0, [pc, #240]	; (8003454 <update_fsm+0x278>)
 8003364:	f006 bed0 	b.w	800a108 <iprintf>
					PHASE_ORDER = !PHASE_ORDER;
 8003368:	4c29      	ldr	r4, [pc, #164]	; (8003410 <update_fsm+0x234>)
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	6023      	str	r3, [r4, #0]
					save_to_flash();
 8003374:	f7fe fe40 	bl	8001ff8 <save_to_flash>
					load_from_flash();
 8003378:	f7fe fe08 	bl	8001f8c <load_from_flash>
					printf("Phase order is now %d. Please cycle power.\n\r", PHASE_ORDER);
 800337c:	6821      	ldr	r1, [r4, #0]
 800337e:	4836      	ldr	r0, [pc, #216]	; (8003458 <update_fsm+0x27c>)
 }
 8003380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("Phase order is now %d. Please cycle power.\n\r", PHASE_ORDER);
 8003384:	f006 bec0 	b.w	800a108 <iprintf>
					fsmstate->next_state = MOTOR_MODE;
 8003388:	2102      	movs	r1, #2
					fsmstate->ready = 0;
 800338a:	2200      	movs	r2, #0
					fsmstate->next_state = MOTOR_MODE;
 800338c:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 800338e:	70c2      	strb	r2, [r0, #3]
					break;
 8003390:	e72f      	b.n	80031f2 <update_fsm+0x16>
					printf(" ");
 8003392:	2020      	movs	r0, #32
 8003394:	f006 fed0 	bl	800a138 <putchar>
					controller.p_des = controller.p_des - 0.5;
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <update_fsm+0x274>)
 800339a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800339e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033a6:	e7d2      	b.n	800334e <update_fsm+0x172>
					printf(" ");
 80033a8:	2020      	movs	r0, #32
 80033aa:	f006 fec5 	bl	800a138 <putchar>
					controller.v_des = controller.v_des - 0.5;
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <update_fsm+0x274>)
 80033b0:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80033b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033bc:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
					printf("OK, new V_des is %f\n\r", controller.v_des);
 80033c0:	ee17 0a90 	vmov	r0, s15
 80033c4:	f7fd f8e8 	bl	8000598 <__aeabi_f2d>
 }
 80033c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("OK, new V_des is %f\n\r", controller.v_des);
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4822      	ldr	r0, [pc, #136]	; (800345c <update_fsm+0x280>)
 80033d2:	f006 be99 	b.w	800a108 <iprintf>
					printf(" ");
 80033d6:	2020      	movs	r0, #32
 80033d8:	f006 feae 	bl	800a138 <putchar>
					controller.v_des = controller.v_des + 0.5;
 80033dc:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <update_fsm+0x274>)
 80033de:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80033e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033ea:	e7e7      	b.n	80033bc <update_fsm+0x1e0>
					fsmstate->next_state = FRESET_MODE;
 80033ec:	2207      	movs	r2, #7
 80033ee:	7042      	strb	r2, [r0, #1]
					printf("Are you sure you want to factory reset all stored flash variables?\n\r");
 80033f0:	481b      	ldr	r0, [pc, #108]	; (8003460 <update_fsm+0x284>)
 80033f2:	f006 fe89 	bl	800a108 <iprintf>
 }
 80033f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("Press Y (case sensitive) to perform reset or Esc to cancel.\n\r");
 80033fa:	481a      	ldr	r0, [pc, #104]	; (8003464 <update_fsm+0x288>)
 80033fc:	f006 be84 	b.w	800a108 <iprintf>
					fsmstate->next_state = ENCODER_MODE;
 8003400:	2105      	movs	r1, #5
					fsmstate->ready = 0;
 8003402:	2200      	movs	r2, #0
					fsmstate->next_state = ENCODER_MODE;
 8003404:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 8003406:	70c2      	strb	r2, [r0, #3]
					break;
 8003408:	e6f3      	b.n	80031f2 <update_fsm+0x16>
 800340a:	bf00      	nop
 800340c:	20000684 	.word	0x20000684
 8003410:	20008f40 	.word	0x20008f40
 8003414:	447a0000 	.word	0x447a0000
 8003418:	41a80000 	.word	0x41a80000
 800341c:	41480000 	.word	0x41480000
 8003420:	42200000 	.word	0x42200000
 8003424:	42fa0000 	.word	0x42fa0000
 8003428:	c1480000 	.word	0xc1480000
 800342c:	42820000 	.word	0x42820000
 8003430:	c2820000 	.word	0xc2820000
 8003434:	40a00000 	.word	0x40a00000
 8003438:	43fa0000 	.word	0x43fa0000
 800343c:	0800ebbc 	.word	0x0800ebbc
 8003440:	200003e0 	.word	0x200003e0
 8003444:	0800e8a0 	.word	0x0800e8a0
 8003448:	3827c5ac 	.word	0x3827c5ac
 800344c:	0800e8bc 	.word	0x0800e8bc
 8003450:	20000784 	.word	0x20000784
 8003454:	0800e984 	.word	0x0800e984
 8003458:	0800e99c 	.word	0x0800e99c
 800345c:	0800e96c 	.word	0x0800e96c
 8003460:	0800e8e4 	.word	0x0800e8e4
 8003464:	0800e92c 	.word	0x0800e92c
						printf("%d ", encLut[i]);
 8003468:	f8df 8264 	ldr.w	r8, [pc, #612]	; 80036d0 <update_fsm+0x4f4>
					printf("Variable dump:\n\r");
 800346c:	4876      	ldr	r0, [pc, #472]	; (8003648 <update_fsm+0x46c>)
						printf("%d ", encLut[i]);
 800346e:	4e77      	ldr	r6, [pc, #476]	; (800364c <update_fsm+0x470>)
							printf("\n\r");
 8003470:	4f77      	ldr	r7, [pc, #476]	; (8003650 <update_fsm+0x474>)
						printf("%d ", encLut[i]);
 8003472:	4645      	mov	r5, r8
					printf("Variable dump:\n\r");
 8003474:	f006 fe48 	bl	800a108 <iprintf>
					printf("---Enc. LUT:---\n\r");
 8003478:	4876      	ldr	r0, [pc, #472]	; (8003654 <update_fsm+0x478>)
 800347a:	f006 fe45 	bl	800a108 <iprintf>
						printf("%d ", encLut[i]);
 800347e:	f855 1f18 	ldr.w	r1, [r5, #24]!
 8003482:	4630      	mov	r0, r6
 8003484:	f006 fe40 	bl	800a108 <iprintf>
						i++;
 8003488:	2401      	movs	r4, #1
						printf("%d ", encLut[i]);
 800348a:	f855 1f04 	ldr.w	r1, [r5, #4]!
						i++;
 800348e:	3401      	adds	r4, #1
						printf("%d ", encLut[i]);
 8003490:	4630      	mov	r0, r6
 8003492:	f006 fe39 	bl	800a108 <iprintf>
						if(i%8==0){
 8003496:	0763      	lsls	r3, r4, #29
 8003498:	d102      	bne.n	80034a0 <update_fsm+0x2c4>
							printf("\n\r");
 800349a:	4638      	mov	r0, r7
 800349c:	f006 fe34 	bl	800a108 <iprintf>
					for(int i = 0; i < 128;){
 80034a0:	2c80      	cmp	r4, #128	; 0x80
 80034a2:	d1f2      	bne.n	800348a <update_fsm+0x2ae>
					printf("---Int regs:---\n\r");
 80034a4:	486c      	ldr	r0, [pc, #432]	; (8003658 <update_fsm+0x47c>)
					printf("I_BW %f \n\r", I_BW);
 80034a6:	4c6d      	ldr	r4, [pc, #436]	; (800365c <update_fsm+0x480>)
					printf("---Int regs:---\n\r");
 80034a8:	f006 fe2e 	bl	800a108 <iprintf>
					printf("PHASE_ORDER %d \n\r", PHASE_ORDER);
 80034ac:	f8d8 1000 	ldr.w	r1, [r8]
 80034b0:	486b      	ldr	r0, [pc, #428]	; (8003660 <update_fsm+0x484>)
 80034b2:	f006 fe29 	bl	800a108 <iprintf>
					printf("CAN_ID %d \n\r", CAN_ID);
 80034b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80034ba:	486a      	ldr	r0, [pc, #424]	; (8003664 <update_fsm+0x488>)
 80034bc:	f006 fe24 	bl	800a108 <iprintf>
					printf("CAN_MASTER %d \n\r", CAN_MASTER);
 80034c0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80034c4:	4868      	ldr	r0, [pc, #416]	; (8003668 <update_fsm+0x48c>)
 80034c6:	f006 fe1f 	bl	800a108 <iprintf>
					printf("CAN_TIMEOUT %d \n\r", CAN_TIMEOUT);
 80034ca:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80034ce:	4867      	ldr	r0, [pc, #412]	; (800366c <update_fsm+0x490>)
 80034d0:	f006 fe1a 	bl	800a108 <iprintf>
					printf("M_ZERO %d \n\r", M_ZERO);
 80034d4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80034d8:	4865      	ldr	r0, [pc, #404]	; (8003670 <update_fsm+0x494>)
 80034da:	f006 fe15 	bl	800a108 <iprintf>
					printf("E_ZERO %d \n\r", E_ZERO);
 80034de:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80034e2:	4864      	ldr	r0, [pc, #400]	; (8003674 <update_fsm+0x498>)
 80034e4:	f006 fe10 	bl	800a108 <iprintf>
					printf("--Float regs:--\n\r");
 80034e8:	4863      	ldr	r0, [pc, #396]	; (8003678 <update_fsm+0x49c>)
 80034ea:	f006 fe0d 	bl	800a108 <iprintf>
					printf("I_BW %f \n\r", I_BW);
 80034ee:	68a0      	ldr	r0, [r4, #8]
 80034f0:	f7fd f852 	bl	8000598 <__aeabi_f2d>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4860      	ldr	r0, [pc, #384]	; (800367c <update_fsm+0x4a0>)
 80034fa:	f006 fe05 	bl	800a108 <iprintf>
					printf("I_MAX %f \n\r", I_MAX);
 80034fe:	68e0      	ldr	r0, [r4, #12]
 8003500:	f7fd f84a 	bl	8000598 <__aeabi_f2d>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	485d      	ldr	r0, [pc, #372]	; (8003680 <update_fsm+0x4a4>)
 800350a:	f006 fdfd 	bl	800a108 <iprintf>
					printf("THETA_MIN %f \n\r", THETA_MIN);
 800350e:	6920      	ldr	r0, [r4, #16]
 8003510:	f7fd f842 	bl	8000598 <__aeabi_f2d>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	485a      	ldr	r0, [pc, #360]	; (8003684 <update_fsm+0x4a8>)
 800351a:	f006 fdf5 	bl	800a108 <iprintf>
					printf("THETA_MAX %f \n\r", THETA_MAX);
 800351e:	6960      	ldr	r0, [r4, #20]
 8003520:	f7fd f83a 	bl	8000598 <__aeabi_f2d>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4857      	ldr	r0, [pc, #348]	; (8003688 <update_fsm+0x4ac>)
 800352a:	f006 fded 	bl	800a108 <iprintf>
					printf("I_FW_MAX %f \n\r", I_FW_MAX);
 800352e:	69a0      	ldr	r0, [r4, #24]
 8003530:	f7fd f832 	bl	8000598 <__aeabi_f2d>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4854      	ldr	r0, [pc, #336]	; (800368c <update_fsm+0x4b0>)
 800353a:	f006 fde5 	bl	800a108 <iprintf>
					printf("R_NOMINAL %f \n\r", R_NOMINAL);
 800353e:	69e0      	ldr	r0, [r4, #28]
 8003540:	f7fd f82a 	bl	8000598 <__aeabi_f2d>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4851      	ldr	r0, [pc, #324]	; (8003690 <update_fsm+0x4b4>)
 800354a:	f006 fddd 	bl	800a108 <iprintf>
					printf("TEMP_MAX %f \n\r", TEMP_MAX);
 800354e:	6a20      	ldr	r0, [r4, #32]
 8003550:	f7fd f822 	bl	8000598 <__aeabi_f2d>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	484e      	ldr	r0, [pc, #312]	; (8003694 <update_fsm+0x4b8>)
 800355a:	f006 fdd5 	bl	800a108 <iprintf>
					printf("I_MAX_CONT %f \n\r", I_MAX_CONT);
 800355e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003560:	f7fd f81a 	bl	8000598 <__aeabi_f2d>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	484b      	ldr	r0, [pc, #300]	; (8003698 <update_fsm+0x4bc>)
 800356a:	f006 fdcd 	bl	800a108 <iprintf>
					printf("PPAIRS %f \n\r", PPAIRS);
 800356e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003570:	f7fd f812 	bl	8000598 <__aeabi_f2d>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4848      	ldr	r0, [pc, #288]	; (800369c <update_fsm+0x4c0>)
 800357a:	f006 fdc5 	bl	800a108 <iprintf>
					printf("R_PHASE %f \n\r", R_PHASE);
 800357e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003580:	f7fd f80a 	bl	8000598 <__aeabi_f2d>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4845      	ldr	r0, [pc, #276]	; (80036a0 <update_fsm+0x4c4>)
 800358a:	f006 fdbd 	bl	800a108 <iprintf>
					printf("KT %f \n\r", KT);
 800358e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003590:	f7fd f802 	bl	8000598 <__aeabi_f2d>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4842      	ldr	r0, [pc, #264]	; (80036a4 <update_fsm+0x4c8>)
 800359a:	f006 fdb5 	bl	800a108 <iprintf>
					printf("C_TH %f \n\r", C_TH);
 800359e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80035a0:	f7fc fffa 	bl	8000598 <__aeabi_f2d>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	483f      	ldr	r0, [pc, #252]	; (80036a8 <update_fsm+0x4cc>)
 80035aa:	f006 fdad 	bl	800a108 <iprintf>
					printf("GR %f \n\r", GR);
 80035ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80035b0:	f7fc fff2 	bl	8000598 <__aeabi_f2d>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	483c      	ldr	r0, [pc, #240]	; (80036ac <update_fsm+0x4d0>)
 80035ba:	f006 fda5 	bl	800a108 <iprintf>
					printf("I_CAL %f \n\r", I_CAL);
 80035be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80035c0:	f7fc ffea 	bl	8000598 <__aeabi_f2d>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4839      	ldr	r0, [pc, #228]	; (80036b0 <update_fsm+0x4d4>)
 80035ca:	f006 fd9d 	bl	800a108 <iprintf>
					printf("P_MIN %f \n\r", P_MIN);
 80035ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80035d0:	f7fc ffe2 	bl	8000598 <__aeabi_f2d>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4836      	ldr	r0, [pc, #216]	; (80036b4 <update_fsm+0x4d8>)
 80035da:	f006 fd95 	bl	800a108 <iprintf>
					printf("P_MAX %f \n\r", P_MAX);
 80035de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80035e0:	f7fc ffda 	bl	8000598 <__aeabi_f2d>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4833      	ldr	r0, [pc, #204]	; (80036b8 <update_fsm+0x4dc>)
 80035ea:	f006 fd8d 	bl	800a108 <iprintf>
					printf("V_MIN %f \n\r", V_MIN);
 80035ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035f0:	f7fc ffd2 	bl	8000598 <__aeabi_f2d>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4830      	ldr	r0, [pc, #192]	; (80036bc <update_fsm+0x4e0>)
 80035fa:	f006 fd85 	bl	800a108 <iprintf>
					printf("V_MAX %f \n\r", V_MAX);
 80035fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003600:	f7fc ffca 	bl	8000598 <__aeabi_f2d>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	482d      	ldr	r0, [pc, #180]	; (80036c0 <update_fsm+0x4e4>)
 800360a:	f006 fd7d 	bl	800a108 <iprintf>
					printf("KP_MAX %f \n\r", KP_MAX);
 800360e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003610:	f7fc ffc2 	bl	8000598 <__aeabi_f2d>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	482a      	ldr	r0, [pc, #168]	; (80036c4 <update_fsm+0x4e8>)
 800361a:	f006 fd75 	bl	800a108 <iprintf>
					printf("KD_MAX %f \n\r", KD_MAX);
 800361e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003620:	f7fc ffba 	bl	8000598 <__aeabi_f2d>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4827      	ldr	r0, [pc, #156]	; (80036c8 <update_fsm+0x4ec>)
 800362a:	f006 fd6d 	bl	800a108 <iprintf>
 }
 800362e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("----------------\n\r");
 8003632:	4826      	ldr	r0, [pc, #152]	; (80036cc <update_fsm+0x4f0>)
 8003634:	f006 bd68 	b.w	800a108 <iprintf>
					fsmstate->next_state = CALIBRATION_MODE;
 8003638:	2101      	movs	r1, #1
					fsmstate->ready = 0;
 800363a:	2200      	movs	r2, #0
					fsmstate->next_state = CALIBRATION_MODE;
 800363c:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 800363e:	70c2      	strb	r2, [r0, #3]
					break;
 8003640:	e5d7      	b.n	80031f2 <update_fsm+0x16>
				process_user_input(fsmstate);
 8003642:	f7ff bb93 	b.w	8002d6c <process_user_input>
 8003646:	bf00      	nop
 8003648:	0800e9cc 	.word	0x0800e9cc
 800364c:	0800e9f4 	.word	0x0800e9f4
 8003650:	0800ebf0 	.word	0x0800ebf0
 8003654:	0800e9e0 	.word	0x0800e9e0
 8003658:	0800e9f8 	.word	0x0800e9f8
 800365c:	20000684 	.word	0x20000684
 8003660:	0800ea0c 	.word	0x0800ea0c
 8003664:	0800ea20 	.word	0x0800ea20
 8003668:	0800ea30 	.word	0x0800ea30
 800366c:	0800ea44 	.word	0x0800ea44
 8003670:	0800ea58 	.word	0x0800ea58
 8003674:	0800ea68 	.word	0x0800ea68
 8003678:	0800ea78 	.word	0x0800ea78
 800367c:	0800ea8c 	.word	0x0800ea8c
 8003680:	0800ea98 	.word	0x0800ea98
 8003684:	0800eaa4 	.word	0x0800eaa4
 8003688:	0800eab4 	.word	0x0800eab4
 800368c:	0800eac4 	.word	0x0800eac4
 8003690:	0800ead4 	.word	0x0800ead4
 8003694:	0800eae4 	.word	0x0800eae4
 8003698:	0800eaf4 	.word	0x0800eaf4
 800369c:	0800eb08 	.word	0x0800eb08
 80036a0:	0800eb18 	.word	0x0800eb18
 80036a4:	0800eb28 	.word	0x0800eb28
 80036a8:	0800eb34 	.word	0x0800eb34
 80036ac:	0800eb40 	.word	0x0800eb40
 80036b0:	0800eb4c 	.word	0x0800eb4c
 80036b4:	0800eb58 	.word	0x0800eb58
 80036b8:	0800eb64 	.word	0x0800eb64
 80036bc:	0800eb70 	.word	0x0800eb70
 80036c0:	0800eb7c 	.word	0x0800eb7c
 80036c4:	0800eb88 	.word	0x0800eb88
 80036c8:	0800eb98 	.word	0x0800eb98
 80036cc:	0800eba8 	.word	0x0800eba8
 80036d0:	20008f40 	.word	0x20008f40

080036d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80036d4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d6:	2400      	movs	r4, #0
{
 80036d8:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036da:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80036de:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <MX_GPIO_Init+0xcc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80036e8:	4f2e      	ldr	r7, [pc, #184]	; (80037a4 <MX_GPIO_Init+0xd0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80036ea:	4e2f      	ldr	r6, [pc, #188]	; (80037a8 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ec:	f042 0220 	orr.w	r2, r2, #32
 80036f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80036f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036f4:	f002 0220 	and.w	r2, r2, #32
 80036f8:	9200      	str	r2, [sp, #0]
 80036fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036fe:	f042 0204 	orr.w	r2, r2, #4
 8003702:	64da      	str	r2, [r3, #76]	; 0x4c
 8003704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003706:	f002 0204 	and.w	r2, r2, #4
 800370a:	9201      	str	r2, [sp, #4]
 800370c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800370e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c
 8003716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003718:	f002 0201 	and.w	r2, r2, #1
 800371c:	9202      	str	r2, [sp, #8]
 800371e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003722:	f042 0202 	orr.w	r2, r2, #2
 8003726:	64da      	str	r2, [r3, #76]	; 0x4c
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003730:	4622      	mov	r2, r4
 8003732:	4638      	mov	r0, r7
 8003734:	210c      	movs	r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003738:	f003 f814 	bl	8006764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800373c:	4622      	mov	r2, r4
 800373e:	f648 0110 	movw	r1, #34832	; 0x8810
 8003742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003746:	f003 f80d 	bl	8006764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800374a:	4622      	mov	r2, r4
 800374c:	4630      	mov	r0, r6
 800374e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003752:	f003 f807 	bl	8006764 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003756:	2400      	movs	r4, #0
 8003758:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375a:	4638      	mov	r0, r7
 800375c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800375e:	220c      	movs	r2, #12
 8003760:	2301      	movs	r3, #1
 8003762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003766:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376a:	f002 ff07 	bl	800657c <HAL_GPIO_Init>
  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003770:	f648 0210 	movw	r2, #34832	; 0x8810
 8003774:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800377a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800377e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003782:	f002 fefb 	bl	800657c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800378a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	a904      	add	r1, sp, #16
 800378e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003790:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003794:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	f002 fef0 	bl	800657c <HAL_GPIO_Init>

}
 800379c:	b00b      	add	sp, #44	; 0x2c
 800379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	48000800 	.word	0x48000800
 80037a8:	48000400 	.word	0x48000400

080037ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ae:	2100      	movs	r1, #0
{
 80037b0:	b0ab      	sub	sp, #172	; 0xac
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037b2:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b4:	a806      	add	r0, sp, #24
 80037b6:	2238      	movs	r2, #56	; 0x38
 80037b8:	f006 f834 	bl	8009824 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037bc:	4621      	mov	r1, r4
 80037be:	2254      	movs	r2, #84	; 0x54
 80037c0:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c2:	e9cd 4400 	strd	r4, r4, [sp]
 80037c6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80037ca:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037cc:	f006 f82a 	bl	8009824 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80037d0:	4620      	mov	r0, r4
 80037d2:	f002 ffcd 	bl	8006770 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037d6:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037d8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037da:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 80037dc:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037de:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037e0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80037e4:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037e8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ec:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80037ee:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037f0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037f2:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 85;
 80037f4:	9210      	str	r2, [sp, #64]	; 0x40
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f6:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f8:	f003 f840 	bl	800687c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037fc:	2703      	movs	r7, #3
 80037fe:	2200      	movs	r2, #0
 8003800:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003804:	4668      	mov	r0, sp
 8003806:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800380c:	e9cd 6700 	strd	r6, r7, [sp]
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8003810:	4d09      	ldr	r5, [pc, #36]	; (8003838 <SystemClock_Config+0x8c>)
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003812:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003814:	f003 fab6 	bl	8006d84 <HAL_RCC_ClockConfig>
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800381c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003824:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003826:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800382a:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800382c:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800382e:	9123      	str	r1, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003830:	f003 fbde 	bl	8006ff0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003834:	b02b      	add	sp, #172	; 0xac
 8003836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003838:	00019002 	.word	0x00019002
 800383c:	00000000 	.word	0x00000000

08003840 <main>:
{
 8003840:	b580      	push	{r7, lr}
  if(E_ZERO==-1){E_ZERO = 0;}
 8003842:	4ecd      	ldr	r6, [pc, #820]	; (8003b78 <main+0x338>)
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003844:	4dcd      	ldr	r5, [pc, #820]	; (8003b7c <main+0x33c>)
  init_controller_params(&controller);
 8003846:	f8df 8398 	ldr.w	r8, [pc, #920]	; 8003be0 <main+0x3a0>
  comm_encoder.m_zero = M_ZERO;
 800384a:	4fcd      	ldr	r7, [pc, #820]	; (8003b80 <main+0x340>)
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 800384c:	4ccd      	ldr	r4, [pc, #820]	; (8003b84 <main+0x344>)
{
 800384e:	b088      	sub	sp, #32
  HAL_Init();
 8003850:	f000 ffd0 	bl	80047f4 <HAL_Init>
  SystemClock_Config();
 8003854:	f7ff ffaa 	bl	80037ac <SystemClock_Config>
  MX_GPIO_Init();
 8003858:	f7ff ff3c 	bl	80036d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800385c:	f7fd fbee 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8003860:	f7fe fa8a 	bl	8001d78 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8003864:	f000 fbca 	bl	8003ffc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003868:	f000 fed8 	bl	800461c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800386c:	f000 fbee 	bl	800404c <MX_SPI3_Init>
  MX_TIM1_Init();
 8003870:	f000 fdee 	bl	8004450 <MX_TIM1_Init>
  MX_ADC2_Init();
 8003874:	f7fd fc34 	bl	80010e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003878:	f7fd fc7a 	bl	8001170 <MX_ADC3_Init>
    load_from_flash();
 800387c:	f7fe fb86 	bl	8001f8c <load_from_flash>
  if(E_ZERO==-1){E_ZERO = 0;}
 8003880:	6973      	ldr	r3, [r6, #20]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003882:	ed95 7a02 	vldr	s14, [r5, #8]
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8003886:	48c0      	ldr	r0, [pc, #768]	; (8003b88 <main+0x348>)
  if(E_ZERO==-1){E_ZERO = 0;}
 8003888:	3301      	adds	r3, #1
 800388a:	bf04      	itt	eq
 800388c:	2300      	moveq	r3, #0
 800388e:	6173      	streq	r3, [r6, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003890:	6933      	ldr	r3, [r6, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003892:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(M_ZERO==-1){M_ZERO = 0;}
 8003896:	3301      	adds	r3, #1
 8003898:	bf08      	it	eq
 800389a:	2300      	moveq	r3, #0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800389c:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80038a0:	ed95 7a03 	vldr	s14, [r5, #12]
  if(M_ZERO==-1){M_ZERO = 0;}
 80038a4:	bf08      	it	eq
 80038a6:	6133      	streq	r3, [r6, #16]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80038a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	bf04      	itt	eq
 80038b2:	4bb6      	ldreq	r3, [pc, #728]	; (8003b8c <main+0x34c>)
 80038b4:	60ab      	streq	r3, [r5, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80038b6:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 80038ba:	ed95 7a06 	vldr	s14, [r5, #24]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 80038c2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80038c6:	bf04      	itt	eq
 80038c8:	4bb1      	ldreq	r3, [pc, #708]	; (8003b90 <main+0x350>)
 80038ca:	60eb      	streq	r3, [r5, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 80038cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80038d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d4:	bf04      	itt	eq
 80038d6:	2300      	moveq	r3, #0
 80038d8:	61ab      	streq	r3, [r5, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 80038da:	6873      	ldr	r3, [r6, #4]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80038dc:	ed95 7a07 	vldr	s14, [r5, #28]
  if(CAN_ID==-1){CAN_ID = 1;}
 80038e0:	3301      	adds	r3, #1
 80038e2:	bf04      	itt	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	6073      	streq	r3, [r6, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80038e8:	68b3      	ldr	r3, [r6, #8]
 80038ea:	3301      	adds	r3, #1
 80038ec:	bf04      	itt	eq
 80038ee:	2300      	moveq	r3, #0
 80038f0:	60b3      	streq	r3, [r6, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80038f2:	68f3      	ldr	r3, [r6, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80038f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80038f8:	3301      	adds	r3, #1
 80038fa:	bf08      	it	eq
 80038fc:	f44f 737a 	moveq.w	r3, #1000	; 0x3e8
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003900:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003904:	ed95 7a08 	vldr	s14, [r5, #32]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8003908:	bf08      	it	eq
 800390a:	60f3      	streq	r3, [r6, #12]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800390c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	bf08      	it	eq
 8003916:	2300      	moveq	r3, #0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003918:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 800391c:	ed95 7a09 	vldr	s14, [r5, #36]	; 0x24
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003920:	bf08      	it	eq
 8003922:	61eb      	streq	r3, [r5, #28]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003924:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	bf04      	itt	eq
 800392e:	4b99      	ldreq	r3, [pc, #612]	; (8003b94 <main+0x354>)
 8003930:	622b      	streq	r3, [r5, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003932:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003936:	ed95 7a12 	vldr	s14, [r5, #72]	; 0x48
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 800393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800393e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003942:	bf04      	itt	eq
 8003944:	4b94      	ldreq	r3, [pc, #592]	; (8003b98 <main+0x358>)
 8003946:	626b      	streq	r3, [r5, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003948:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800394c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003954:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003958:	bf04      	itt	eq
 800395a:	4b90      	ldreq	r3, [pc, #576]	; (8003b9c <main+0x35c>)
 800395c:	64ab      	streq	r3, [r5, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800395e:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003962:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800396a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800396e:	bf04      	itt	eq
 8003970:	4b8b      	ldreq	r3, [pc, #556]	; (8003ba0 <main+0x360>)
 8003972:	62ab      	streq	r3, [r5, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003974:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003978:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003980:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003984:	bf08      	it	eq
 8003986:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800398a:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800398e:	ed95 7a17 	vldr	s14, [r5, #92]	; 0x5c
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003992:	bf08      	it	eq
 8003994:	646b      	streq	r3, [r5, #68]	; 0x44
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003996:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399e:	bf08      	it	eq
 80039a0:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80039a4:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 80039a8:	bf08      	it	eq
 80039aa:	63ab      	streq	r3, [r5, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80039ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b0:	bf04      	itt	eq
 80039b2:	4b7c      	ldreq	r3, [pc, #496]	; (8003ba4 <main+0x364>)
 80039b4:	65eb      	streq	r3, [r5, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 80039b6:	ed95 7a18 	vldr	s14, [r5, #96]	; 0x60
 80039ba:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80039be:	eeb4 7a67 	vcmp.f32	s14, s15
 80039c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c6:	bf04      	itt	eq
 80039c8:	4b74      	ldreq	r3, [pc, #464]	; (8003b9c <main+0x35c>)
 80039ca:	662b      	streq	r3, [r5, #96]	; 0x60
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 80039cc:	a368      	add	r3, pc, #416	; (adr r3, 8003b70 <main+0x330>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f006 fb99 	bl	800a108 <iprintf>
  init_controller_params(&controller);
 80039d6:	4640      	mov	r0, r8
 80039d8:	f7fe fcc8 	bl	800236c <init_controller_params>
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80039dc:	f44f 7224 	mov.w	r2, #656	; 0x290
 80039e0:	2100      	movs	r1, #0
 80039e2:	4871      	ldr	r0, [pc, #452]	; (8003ba8 <main+0x368>)
 80039e4:	f005 ff1e 	bl	8009824 <memset>
  comm_encoder.m_zero = M_ZERO;
 80039e8:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  comm_encoder.ppairs = PPAIRS;
 80039ec:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80039ee:	66b9      	str	r1, [r7, #104]	; 0x68
  comm_encoder.m_zero = M_ZERO;
 80039f0:	e9c7 2321 	strd	r2, r3, [r7, #132]	; 0x84
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 80039f4:	4638      	mov	r0, r7
 80039f6:	2164      	movs	r1, #100	; 0x64
 80039f8:	f000 f9c4 	bl	8003d84 <ps_warmup>
  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 80039fc:	496b      	ldr	r1, [pc, #428]	; (8003bac <main+0x36c>)
 80039fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a02:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003a06:	f005 fee5 	bl	80097d4 <memcpy>
  HAL_ADC_Start(&hadc1);
 8003a0a:	4869      	ldr	r0, [pc, #420]	; (8003bb0 <main+0x370>)
 8003a0c:	f001 fd22 	bl	8005454 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8003a10:	4868      	ldr	r0, [pc, #416]	; (8003bb4 <main+0x374>)
 8003a12:	f001 fd1f 	bl	8005454 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8003a16:	4868      	ldr	r0, [pc, #416]	; (8003bb8 <main+0x378>)
 8003a18:	f001 fd1c 	bl	8005454 <HAL_ADC_Start>
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2110      	movs	r1, #16
 8003a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a24:	f002 fe9e 	bl	8006764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003a32:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8003a34:	f002 fe96 	bl	8006764 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003a38:	2001      	movs	r0, #1
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003a3a:	2500      	movs	r5, #0
  HAL_Delay(1);
 8003a3c:	f000 fefc 	bl	8004838 <HAL_Delay>
  HAL_Delay(1);
 8003a40:	4630      	mov	r0, r6
 8003a42:	f000 fef9 	bl	8004838 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003a46:	88a1      	ldrh	r1, [r4, #4]
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	9606      	str	r6, [sp, #24]
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	462a      	mov	r2, r5
 8003a50:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a54:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8003a58:	9601      	str	r6, [sp, #4]
 8003a5a:	9500      	str	r5, [sp, #0]
 8003a5c:	f7fd ff22 	bl	80018a4 <drv_write_DCR>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8003a60:	2703      	movs	r7, #3
  HAL_Delay(1);
 8003a62:	4630      	mov	r0, r6
 8003a64:	f000 fee8 	bl	8004838 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8003a68:	88a1      	ldrh	r1, [r4, #4]
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	9500      	str	r5, [sp, #0]
 8003a6e:	4633      	mov	r3, r6
 8003a70:	462a      	mov	r2, r5
 8003a72:	e9cd 6604 	strd	r6, r6, [sp, #16]
 8003a76:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8003a7a:	9706      	str	r7, [sp, #24]
 8003a7c:	9701      	str	r7, [sp, #4]
 8003a7e:	f7fd ff81 	bl	8001984 <drv_write_CSACR>
  HAL_Delay(1);
 8003a82:	4630      	mov	r0, r6
 8003a84:	f000 fed8 	bl	8004838 <HAL_Delay>
  zero_current(&controller);
 8003a88:	4640      	mov	r0, r8
 8003a8a:	f7fe fc49 	bl	8002320 <zero_current>
  HAL_Delay(1);
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f000 fed2 	bl	8004838 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8003a94:	88a1      	ldrh	r1, [r4, #4]
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	9500      	str	r5, [sp, #0]
 8003a9a:	4633      	mov	r3, r6
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	e9cd 5705 	strd	r5, r7, [sp, #20]
 8003aa2:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8003aa6:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8003aaa:	f7fd ff6b 	bl	8001984 <drv_write_CSACR>
  HAL_Delay(1);
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f000 fec2 	bl	8004838 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 8003ab4:	f04f 0c0e 	mov.w	ip, #14
 8003ab8:	f8cd c008 	str.w	ip, [sp, #8]
 8003abc:	462b      	mov	r3, r5
 8003abe:	4632      	mov	r2, r6
 8003ac0:	88a1      	ldrh	r1, [r4, #4]
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	e9cd 7700 	strd	r7, r7, [sp]
 8003ac8:	f7fd ff2a 	bl	8001920 <drv_write_OCPCR>
  HAL_Delay(1);
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 feb3 	bl	8004838 <HAL_Delay>
  drv_disable_gd(drv);
 8003ad2:	88a1      	ldrh	r1, [r4, #4]
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	f7fd ffe5 	bl	8001aa4 <drv_disable_gd>
  HAL_Delay(1);
 8003ada:	4630      	mov	r0, r6
 8003adc:	f000 feac 	bl	8004838 <HAL_Delay>
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8003ae0:	e9d8 1227 	ldrd	r1, r2, [r8, #156]	; 0x9c
 8003ae4:	4835      	ldr	r0, [pc, #212]	; (8003bbc <main+0x37c>)
 8003ae6:	f006 fb0f 	bl	800a108 <iprintf>
  HAL_GPIO_WritePin(LED1, 1 );
 8003aea:	4632      	mov	r2, r6
 8003aec:	4834      	ldr	r0, [pc, #208]	; (8003bc0 <main+0x380>)
 8003aee:	2104      	movs	r1, #4
 8003af0:	f002 fe38 	bl	8006764 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003af4:	4629      	mov	r1, r5
 8003af6:	4833      	ldr	r0, [pc, #204]	; (8003bc4 <main+0x384>)
 8003af8:	f004 f972 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003afc:	2104      	movs	r1, #4
 8003afe:	4831      	ldr	r0, [pc, #196]	; (8003bc4 <main+0x384>)
 8003b00:	f004 f96e 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003b04:	2108      	movs	r1, #8
 8003b06:	482f      	ldr	r0, [pc, #188]	; (8003bc4 <main+0x384>)
 8003b08:	f004 f96a 	bl	8007de0 <HAL_TIM_PWM_Start>
  can_rx_init(&can_rx);
 8003b0c:	482e      	ldr	r0, [pc, #184]	; (8003bc8 <main+0x388>)
 8003b0e:	f7fe f995 	bl	8001e3c <can_rx_init>
  can_tx_init(&can_tx);
 8003b12:	482e      	ldr	r0, [pc, #184]	; (8003bcc <main+0x38c>)
 8003b14:	f7fe f9b4 	bl	8001e80 <can_tx_init>
  HAL_FDCAN_Start(&CAN_H);
 8003b18:	482d      	ldr	r0, [pc, #180]	; (8003bd0 <main+0x390>)
 8003b1a:	f002 f957 	bl	8005dcc <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8003b1e:	462a      	mov	r2, r5
 8003b20:	4631      	mov	r1, r6
 8003b22:	482b      	ldr	r0, [pc, #172]	; (8003bd0 <main+0x390>)
 8003b24:	f002 f9e8 	bl	8005ef8 <HAL_FDCAN_ActivateNotification>
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0);
 8003b28:	462a      	mov	r2, r5
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	2019      	movs	r0, #25
 8003b2e:	f001 fea1 	bl	8005874 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8003b32:	4632      	mov	r2, r6
 8003b34:	4631      	mov	r1, r6
 8003b36:	2056      	movs	r0, #86	; 0x56
 8003b38:	f001 fe9c 	bl	8005874 <HAL_NVIC_SetPriority>
  state.state = MENU_MODE;
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <main+0x394>)
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003b3e:	4926      	ldr	r1, [pc, #152]	; (8003bd8 <main+0x398>)
 8003b40:	4826      	ldr	r0, [pc, #152]	; (8003bdc <main+0x39c>)
  state.ready = 1;
 8003b42:	70de      	strb	r6, [r3, #3]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003b44:	4632      	mov	r2, r6
  state.state = MENU_MODE;
 8003b46:	701d      	strb	r5, [r3, #0]
  state.next_state = MENU_MODE;
 8003b48:	705d      	strb	r5, [r3, #1]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003b4a:	f004 fdd1 	bl	80086f0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003b4e:	481d      	ldr	r0, [pc, #116]	; (8003bc4 <main+0x384>)
 8003b50:	f004 f86a 	bl	8007c28 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&ADC_CH_VBUS);
 8003b54:	4818      	ldr	r0, [pc, #96]	; (8003bb8 <main+0x378>)
 8003b56:	f001 fd01 	bl	800555c <HAL_ADC_Start_IT>
  HAL_GPIO_WritePin(LED1, 0 );
 8003b5a:	4819      	ldr	r0, [pc, #100]	; (8003bc0 <main+0x380>)
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	2104      	movs	r1, #4
 8003b60:	f002 fe00 	bl	8006764 <HAL_GPIO_WritePin>
  controller.v_des = 0;//todo remove!
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
 8003b6a:	e03b      	b.n	8003be4 <main+0x3a4>
 8003b6c:	f3af 8000 	nop.w
 8003b70:	c0000000 	.word	0xc0000000
 8003b74:	4000cccc 	.word	0x4000cccc
 8003b78:	20008f40 	.word	0x20008f40
 8003b7c:	20000684 	.word	0x20000684
 8003b80:	200003e0 	.word	0x200003e0
 8003b84:	2000936c 	.word	0x2000936c
 8003b88:	0800ebf4 	.word	0x0800ebf4
 8003b8c:	447a0000 	.word	0x447a0000
 8003b90:	42200000 	.word	0x42200000
 8003b94:	42fa0000 	.word	0x42fa0000
 8003b98:	41600000 	.word	0x41600000
 8003b9c:	40a00000 	.word	0x40a00000
 8003ba0:	41a80000 	.word	0x41a80000
 8003ba4:	43fa0000 	.word	0x43fa0000
 8003ba8:	20008cb0 	.word	0x20008cb0
 8003bac:	20008f58 	.word	0x20008f58
 8003bb0:	200002a0 	.word	0x200002a0
 8003bb4:	20000234 	.word	0x20000234
 8003bb8:	2000030c 	.word	0x2000030c
 8003bbc:	0800ec18 	.word	0x0800ec18
 8003bc0:	48000800 	.word	0x48000800
 8003bc4:	200094b0 	.word	0x200094b0
 8003bc8:	20009374 	.word	0x20009374
 8003bcc:	20009340 	.word	0x20009340
 8003bd0:	20000378 	.word	0x20000378
 8003bd4:	20000674 	.word	0x20000674
 8003bd8:	20000670 	.word	0x20000670
 8003bdc:	200094fc 	.word	0x200094fc
 8003be0:	20000784 	.word	0x20000784
	  HAL_Delay(100);
 8003be4:	2064      	movs	r0, #100	; 0x64
 8003be6:	f000 fe27 	bl	8004838 <HAL_Delay>
	  if(! (DRV_DISABLED||DRV_NOPRINT) ) drv_print_faults(drv);
 8003bea:	6820      	ldr	r0, [r4, #0]
 8003bec:	88a1      	ldrh	r1, [r4, #4]
 8003bee:	f7fd ffab 	bl	8001b48 <drv_print_faults>
	  if(state.state==MOTOR_MODE){
 8003bf2:	e7f7      	b.n	8003be4 <main+0x3a4>

08003bf4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop

08003bf8 <fast_fmaxf>:
#include "lookup.h"


float fast_fmaxf(float x, float y){
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8003bf8:	eef4 0ac0 	vcmpe.f32	s1, s0
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 8003c00:	bfa8      	it	ge
 8003c02:	eeb0 0a60 	vmovge.f32	s0, s1
 8003c06:	4770      	bx	lr

08003c08 <fast_fminf>:

float fast_fminf(float x, float y){
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8003c08:	eef4 0ac0 	vcmpe.f32	s1, s0
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 8003c10:	bf98      	it	ls
 8003c12:	eeb0 0a60 	vmovls.f32	s0, s1
 8003c16:	4770      	bx	lr

08003c18 <fmaxf3>:

float fmaxf3(float x, float y, float z){
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8003c18:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	dd07      	ble.n	8003c32 <fmaxf3+0x1a>
 8003c22:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2a:	bfb8      	it	lt
 8003c2c:	eeb0 0a41 	vmovlt.f32	s0, s2
 8003c30:	4770      	bx	lr
 8003c32:	eef4 0ac1 	vcmpe.f32	s1, s2
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	bfb4      	ite	lt
 8003c3c:	eeb0 0a41 	vmovlt.f32	s0, s2
 8003c40:	eeb0 0a60 	vmovge.f32	s0, s1
    }
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop

08003c48 <fminf3>:

float fminf3(float x, float y, float z){
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8003c48:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d507      	bpl.n	8003c62 <fminf3+0x1a>
 8003c52:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5a:	bf88      	it	hi
 8003c5c:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003c60:	4770      	bx	lr
 8003c62:	eef4 0ac1 	vcmpe.f32	s1, s2
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	bf8c      	ite	hi
 8003c6c:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003c70:	eeb0 0a60 	vmovls.f32	s0, s1
    }
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <limit_norm>:
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8003c78:	edd1 7a00 	vldr	s15, [r1]
 8003c7c:	ed90 7a00 	vldr	s14, [r0]
 8003c80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c84:	eee7 7a07 	vfma.f32	s15, s14, s14
 8003c88:	eef1 6ae7 	vsqrt.f32	s13, s15
    if(norm > limit){
 8003c8c:	eef4 6ac0 	vcmpe.f32	s13, s0
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	dd0d      	ble.n	8003cb2 <limit_norm+0x3a>
        *x = *x * limit/norm;
 8003c96:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c9e:	edc0 7a00 	vstr	s15, [r0]
        *y = *y * limit/norm;
 8003ca2:	edd1 7a00 	vldr	s15, [r1]
 8003ca6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003caa:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8003cae:	edc1 7a00 	vstr	s15, [r1]
        }
    }
 8003cb2:	4770      	bx	lr

08003cb4 <uint_to_float>:
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	ee07 0a90 	vmov	s15, r0
 8003cba:	fa03 f101 	lsl.w	r1, r3, r1
 8003cbe:	3901      	subs	r1, #1
 8003cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float span = x_max - x_min;
 8003cc4:	ee70 0ac0 	vsub.f32	s1, s1, s0
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003cc8:	ee07 1a90 	vmov	s15, r1
 8003ccc:	ee67 0a20 	vmul.f32	s1, s14, s1
 8003cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd4:	ee80 7aa7 	vdiv.f32	s14, s1, s15
    }
 8003cd8:	ee37 0a00 	vadd.f32	s0, s14, s0
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <sin_lut>:

float sin_lut(float theta){
 8003ce0:	b508      	push	{r3, lr}
 8003ce2:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 8003ce6:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 8003d20 <sin_lut+0x40>
 8003cea:	eef0 0a48 	vmov.f32	s1, s16
 8003cee:	f009 ff69 	bl	800dbc4 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8003cf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	bf48      	it	mi
 8003cfc:	ee30 0a08 	vaddmi.f32	s0, s0, s16

	return sin_tab[(int) (LUT_MULT*theta)];
 8003d00:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003d24 <sin_lut+0x44>
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <sin_lut+0x48>)
 8003d06:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8003d0a:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8003d0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003d12:	ee10 2a10 	vmov	r2, s0
 8003d16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8003d1a:	ed93 0a00 	vldr	s0, [r3]
 8003d1e:	bd08      	pop	{r3, pc}
 8003d20:	40c90fdb 	.word	0x40c90fdb
 8003d24:	42a2f983 	.word	0x42a2f983
 8003d28:	0800ec40 	.word	0x0800ec40

08003d2c <cos_lut>:

float cos_lut(float theta){
 8003d2c:	b508      	push	{r3, lr}
	return sin_lut(PI_OVER_2_F - theta);
 8003d2e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003d74 <cos_lut+0x48>
float cos_lut(float theta){
 8003d32:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 8003d36:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8003d78 <cos_lut+0x4c>
 8003d3a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003d3e:	eef0 0a48 	vmov.f32	s1, s16
 8003d42:	f009 ff3f 	bl	800dbc4 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8003d46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4e:	bf48      	it	mi
 8003d50:	ee30 0a08 	vaddmi.f32	s0, s0, s16
	return sin_tab[(int) (LUT_MULT*theta)];
 8003d54:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003d7c <cos_lut+0x50>
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <cos_lut+0x54>)
 8003d5a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8003d5e:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8003d62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003d66:	ee10 2a10 	vmov	r2, s0
 8003d6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8003d6e:	ed93 0a00 	vldr	s0, [r3]
 8003d72:	bd08      	pop	{r3, pc}
 8003d74:	3fc90fdb 	.word	0x3fc90fdb
 8003d78:	40c90fdb 	.word	0x40c90fdb
 8003d7c:	42a2f983 	.word	0x42a2f983
 8003d80:	0800ec40 	.word	0x0800ec40

08003d84 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8003d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8003d88:	1e0f      	subs	r7, r1, #0
void ps_warmup(EncoderStruct * encoder, int n){
 8003d8a:	b082      	sub	sp, #8
	for(int i = 0; i<n; i++){
 8003d8c:	dd22      	ble.n	8003dd4 <ps_warmup+0x50>
 8003d8e:	4c13      	ldr	r4, [pc, #76]	; (8003ddc <ps_warmup+0x58>)
 8003d90:	4606      	mov	r6, r0
 8003d92:	f100 0802 	add.w	r8, r0, #2
 8003d96:	2500      	movs	r5, #0
		encoder->spi_tx_word = 0x0000;
 8003d98:	2200      	movs	r2, #0
 8003d9a:	8032      	strh	r2, [r6, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8003d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da4:	f002 fcde 	bl	8006764 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8003da8:	2364      	movs	r3, #100	; 0x64
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	480b      	ldr	r0, [pc, #44]	; (8003ddc <ps_warmup+0x58>)
 8003dae:	2301      	movs	r3, #1
 8003db0:	4642      	mov	r2, r8
 8003db2:	4631      	mov	r1, r6
 8003db4:	f003 fc2e 	bl	8007614 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8003db8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d0fb      	beq.n	8003db8 <ps_warmup+0x34>
	for(int i = 0; i<n; i++){
 8003dc0:	3501      	adds	r5, #1
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dcc:	f002 fcca 	bl	8006764 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8003dd0:	42af      	cmp	r7, r5
 8003dd2:	d1e1      	bne.n	8003d98 <ps_warmup+0x14>
	}
}
 8003dd4:	b002      	add	sp, #8
 8003dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dda:	bf00      	nop
 8003ddc:	200093e8 	.word	0x200093e8

08003de0 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8003de0:	b530      	push	{r4, r5, lr}
 8003de2:	ed2d 8b02 	vpush	{d8}
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8003de6:	6843      	ldr	r3, [r0, #4]
 8003de8:	6083      	str	r3, [r0, #8]
void ps_sample(EncoderStruct * encoder, float dt){
 8003dea:	4604      	mov	r4, r0
 8003dec:	b083      	sub	sp, #12
 8003dee:	f100 010c 	add.w	r1, r0, #12
 8003df2:	224c      	movs	r2, #76	; 0x4c
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8003df4:	4625      	mov	r5, r4
 8003df6:	3010      	adds	r0, #16
void ps_sample(EncoderStruct * encoder, float dt){
 8003df8:	eeb0 8a40 	vmov.f32	s16, s0
 8003dfc:	f005 fcf8 	bl	80097f0 <memmove>
	encoder->spi_tx_word = ENC_READ_WORD;
 8003e00:	2200      	movs	r2, #0
 8003e02:	f825 2b02 	strh.w	r2, [r5], #2
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8003e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e0e:	f002 fca9 	bl	8006764 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
 8003e12:	2364      	movs	r3, #100	; 0x64
 8003e14:	462a      	mov	r2, r5
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	4856      	ldr	r0, [pc, #344]	; (8003f74 <ps_sample+0x194>)
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f003 fbf9 	bl	8007614 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8003e22:	4a54      	ldr	r2, [pc, #336]	; (8003f74 <ps_sample+0x194>)
 8003e24:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d0fb      	beq.n	8003e24 <ps_sample+0x44>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e36:	f002 fc95 	bl	8006764 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8003e3a:	8861      	ldrh	r1, [r4, #2]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
	encoder->count = encoder->raw + off_interp;

	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8003e3c:	4d4e      	ldr	r5, [pc, #312]	; (8003f78 <ps_sample+0x198>)
	encoder->raw = encoder ->spi_rx_word;
 8003e3e:	6761      	str	r1, [r4, #116]	; 0x74
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003e40:	124b      	asrs	r3, r1, #9
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003e4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8003e50:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	int int_angle = encoder->angle_singleturn;
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003e58:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f7c <ps_sample+0x19c>
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003e5c:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8003f80 <ps_sample+0x1a0>
	int_angle = (int)encoder->elec_angle;
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003e60:	eddf 5a46 	vldr	s11, [pc, #280]	; 8003f7c <ps_sample+0x19c>
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8003e64:	1ac0      	subs	r0, r0, r3
 8003e66:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8003e6a:	fb02 f200 	mul.w	r2, r2, r0
 8003e6e:	eb03 2362 	add.w	r3, r3, r2, asr #9
	encoder->count = encoder->raw + off_interp;
 8003e72:	440b      	add	r3, r1
 8003e74:	67a3      	str	r3, [r4, #120]	; 0x78
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8003e76:	692a      	ldr	r2, [r5, #16]
 8003e78:	1a9a      	subs	r2, r3, r2
 8003e7a:	ee07 2a10 	vmov	s14, r2
 8003e7e:	eeba 7ac8 	vcvt.f32.s32	s14, s14, #16
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003e82:	696a      	ldr	r2, [r5, #20]
	int int_angle = encoder->angle_singleturn;
 8003e84:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003e88:	1a9b      	subs	r3, r3, r2
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003e92:	ee07 3a90 	vmov	s15, r3
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003e96:	ee27 7a26 	vmul.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8003e9e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea6:	bf48      	it	mi
 8003ea8:	ee37 7a26 	vaddmi.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003eac:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8003eb0:	ed84 7a01 	vstr	s14, [r4, #4]
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003eb4:	ee26 6a86 	vmul.f32	s12, s13, s12
 8003eb8:	ee67 7a86 	vmul.f32	s15, s15, s12
	int_angle = (int)encoder->elec_angle;
 8003ebc:	eebd 6ae7 	vcvt.s32.f32	s12, s15
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003ec0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003ec4:	ee77 7ac6 	vsub.f32	s15, s15, s12
	//if(angle_diff > PI_F){encoder->turns--;}
	//else if(angle_diff < -PI_F){encoder->turns++;}

	//ben bugfix added
	int rollover = 0;
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8003ec8:	ed94 6a02 	vldr	s12, [r4, #8]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003ecc:	ee67 7aa5 	vmul.f32	s15, s15, s11
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8003ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed8:	bf48      	it	mi
 8003eda:	ee77 7aa5 	vaddmi.f32	s15, s15, s11
	if(angle_diff > PI_F){rollover = -1;}
 8003ede:	eddf 5a29 	vldr	s11, [pc, #164]	; 8003f84 <ps_sample+0x1a4>
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8003ee2:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8003ee6:	ee77 7a46 	vsub.f32	s15, s14, s12
	if(angle_diff > PI_F){rollover = -1;}
 8003eea:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	dc2e      	bgt.n	8003f52 <ps_sample+0x172>
	else if(angle_diff < -PI_F){rollover = 1;}
 8003ef4:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8003f88 <ps_sample+0x1a8>
	encoder->turns += rollover;
 8003ef8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80

	if(!encoder->first_sample){
 8003efc:	f894 228c 	ldrb.w	r2, [r4, #652]	; 0x28c
	else if(angle_diff < -PI_F){rollover = 1;}
 8003f00:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f08:	bf4c      	ite	mi
 8003f0a:	2301      	movmi	r3, #1
 8003f0c:	2300      	movpl	r3, #0
	encoder->turns += rollover;
 8003f0e:	440b      	add	r3, r1
 8003f10:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 8003f14:	b342      	cbz	r2, 8003f68 <ps_sample+0x188>
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8003f7c <ps_sample+0x19c>
 8003f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f22:	eea7 7a86 	vfma.f32	s14, s15, s12
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003f26:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
 8003f2a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003f8c <ps_sample+0x1ac>
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8003f2e:	ed84 7a03 	vstr	s14, [r4, #12]
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003f32:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f3a:	eec7 7a08 	vdiv.f32	s15, s14, s16
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8003f3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003f42:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8003f46:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64

}
 8003f4a:	b003      	add	sp, #12
 8003f4c:	ecbd 8b02 	vpop	{d8}
 8003f50:	bd30      	pop	{r4, r5, pc}
	encoder->turns += rollover;
 8003f52:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 8003f56:	f894 228c 	ldrb.w	r2, [r4, #652]	; 0x28c
	if(angle_diff > PI_F){rollover = -1;}
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
	encoder->turns += rollover;
 8003f5e:	440b      	add	r3, r1
 8003f60:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	d1d6      	bne.n	8003f16 <ps_sample+0x136>
		encoder->first_sample = 1;
 8003f68:	2301      	movs	r3, #1
		encoder->turns = 0;
 8003f6a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		encoder->first_sample = 1;
 8003f6e:	f884 328c 	strb.w	r3, [r4, #652]	; 0x28c
 8003f72:	e7d8      	b.n	8003f26 <ps_sample+0x146>
 8003f74:	200093e8 	.word	0x200093e8
 8003f78:	20008f40 	.word	0x20008f40
 8003f7c:	40c90fdb 	.word	0x40c90fdb
 8003f80:	37800000 	.word	0x37800000
 8003f84:	40490fdb 	.word	0x40490fdb
 8003f88:	c0490fdb 	.word	0xc0490fdb
 8003f8c:	3d579436 	.word	0x3d579436

08003f90 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8003f90:	b510      	push	{r4, lr}
 8003f92:	4604      	mov	r4, r0
	printf("Raw: %d", encoder->raw);
 8003f94:	4813      	ldr	r0, [pc, #76]	; (8003fe4 <ps_print+0x54>)
 8003f96:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003f98:	f006 f8b6 	bl	800a108 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8003f9c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003f9e:	4812      	ldr	r0, [pc, #72]	; (8003fe8 <ps_print+0x58>)
 8003fa0:	f006 f8b2 	bl	800a108 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8003fa4:	6860      	ldr	r0, [r4, #4]
 8003fa6:	f7fc faf7 	bl	8000598 <__aeabi_f2d>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	480f      	ldr	r0, [pc, #60]	; (8003fec <ps_print+0x5c>)
 8003fb0:	f006 f8aa 	bl	800a108 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8003fb4:	68e0      	ldr	r0, [r4, #12]
 8003fb6:	f7fc faef 	bl	8000598 <__aeabi_f2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <ps_print+0x60>)
 8003fc0:	f006 f8a2 	bl	800a108 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8003fc4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003fc6:	f7fc fae7 	bl	8000598 <__aeabi_f2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4809      	ldr	r0, [pc, #36]	; (8003ff4 <ps_print+0x64>)
 8003fd0:	f006 f89a 	bl	800a108 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8003fd4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003fd8:	4807      	ldr	r0, [pc, #28]	; (8003ff8 <ps_print+0x68>)
	//HAL_Delay(dt_ms);
}
 8003fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("   Turns:  %d\r\n", encoder->turns);
 8003fde:	f006 b893 	b.w	800a108 <iprintf>
 8003fe2:	bf00      	nop
 8003fe4:	0800f440 	.word	0x0800f440
 8003fe8:	0800f448 	.word	0x0800f448
 8003fec:	0800f460 	.word	0x0800f460
 8003ff0:	0800f474 	.word	0x0800f474
 8003ff4:	0800f488 	.word	0x0800f488
 8003ff8:	0800f49c 	.word	0x0800f49c

08003ffc <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ffc:	4811      	ldr	r0, [pc, #68]	; (8004044 <MX_SPI1_Init+0x48>)
{
 8003ffe:	b538      	push	{r3, r4, r5, lr}
  hspi1.Instance = SPI1;
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <MX_SPI1_Init+0x4c>)
 8004002:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004004:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004008:	2301      	movs	r3, #1
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800400a:	f44f 6570 	mov.w	r5, #3840	; 0xf00
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800400e:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004012:	2130      	movs	r1, #48	; 0x30
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004014:	6042      	str	r2, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004016:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004018:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800401a:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800401c:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004020:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004024:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004028:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 7;
 800402a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800402c:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800402e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004030:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004032:	f003 fa69 	bl	8007508 <HAL_SPI_Init>
 8004036:	b900      	cbnz	r0, 800403a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004038:	bd38      	pop	{r3, r4, r5, pc}
 800403a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800403e:	f7ff bdd9 	b.w	8003bf4 <Error_Handler>
 8004042:	bf00      	nop
 8004044:	2000944c 	.word	0x2000944c
 8004048:	40013000 	.word	0x40013000

0800404c <MX_SPI3_Init>:
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800404c:	4810      	ldr	r0, [pc, #64]	; (8004090 <MX_SPI3_Init+0x44>)
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <MX_SPI3_Init+0x48>)
{
 8004050:	b510      	push	{r4, lr}
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004052:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi3.Instance = SPI3;
 8004056:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004058:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800405c:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8004060:	2107      	movs	r1, #7
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004062:	6043      	str	r3, [r0, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004064:	60c2      	str	r2, [r0, #12]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004066:	2300      	movs	r3, #0
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004068:	2208      	movs	r2, #8
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800406a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800406e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004072:	6184      	str	r4, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8004074:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004076:	6083      	str	r3, [r0, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004078:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800407a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800407c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800407e:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004080:	f003 fa42 	bl	8007508 <HAL_SPI_Init>
 8004084:	b900      	cbnz	r0, 8004088 <MX_SPI3_Init+0x3c>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004086:	bd10      	pop	{r4, pc}
 8004088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800408c:	f7ff bdb2 	b.w	8003bf4 <Error_Handler>
 8004090:	200093e8 	.word	0x200093e8
 8004094:	40003c00 	.word	0x40003c00

08004098 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004098:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800409a:	6802      	ldr	r2, [r0, #0]
 800409c:	492d      	ldr	r1, [pc, #180]	; (8004154 <HAL_SPI_MspInit+0xbc>)
{
 800409e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 80040a2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80040a8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80040ac:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80040ae:	d004      	beq.n	80040ba <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 80040b0:	4b29      	ldr	r3, [pc, #164]	; (8004158 <HAL_SPI_MspInit+0xc0>)
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d028      	beq.n	8004108 <HAL_SPI_MspInit+0x70>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80040b6:	b00a      	add	sp, #40	; 0x28
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040c2:	2005      	movs	r0, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60
 80040cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040d2:	9200      	str	r2, [sp, #0]
 80040d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80040de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040e0:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040e8:	2200      	movs	r2, #0
 80040ea:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ec:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040ee:	24e0      	movs	r4, #224	; 0xe0
 80040f0:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80040fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fe:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004100:	f002 fa3c 	bl	800657c <HAL_GPIO_Init>
}
 8004104:	b00a      	add	sp, #40	; 0x28
 8004106:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004108:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800410c:	4813      	ldr	r0, [pc, #76]	; (800415c <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800410e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004114:	659a      	str	r2, [r3, #88]	; 0x58
 8004116:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004118:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800411c:	9202      	str	r2, [sp, #8]
 800411e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004120:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004122:	f042 0204 	orr.w	r2, r2, #4
 8004126:	64da      	str	r2, [r3, #76]	; 0x4c
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004130:	2306      	movs	r3, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004132:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004134:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004136:	2200      	movs	r2, #0
 8004138:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800413c:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
 8004140:	2502      	movs	r5, #2
 8004142:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004146:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414a:	f002 fa17 	bl	800657c <HAL_GPIO_Init>
}
 800414e:	b00a      	add	sp, #40	; 0x28
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	bf00      	nop
 8004154:	40013000 	.word	0x40013000
 8004158:	40003c00 	.word	0x40003c00
 800415c:	48000800 	.word	0x48000800

08004160 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_MspInit+0x30>)
 8004162:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	661a      	str	r2, [r3, #96]	; 0x60
 800416a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800416c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416e:	f002 0201 	and.w	r2, r2, #1
 8004172:	9200      	str	r2, [sp, #0]
 8004174:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004178:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800417c:	659a      	str	r2, [r3, #88]	; 0x58
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004188:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 800418a:	f002 bb6f 	b.w	800686c <HAL_PWREx_DisableUCPDDeadBattery>
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000

08004194 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004194:	e7fe      	b.n	8004194 <NMI_Handler>
 8004196:	bf00      	nop

08004198 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <HardFault_Handler>
 800419a:	bf00      	nop

0800419c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800419c:	e7fe      	b.n	800419c <MemManage_Handler>
 800419e:	bf00      	nop

080041a0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041a0:	e7fe      	b.n	80041a0 <BusFault_Handler>
 80041a2:	bf00      	nop

080041a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <UsageFault_Handler>
 80041a6:	bf00      	nop

080041a8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <DebugMon_Handler>:
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <PendSV_Handler>:
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop

080041b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041b4:	f000 bb2e 	b.w	8004814 <HAL_IncTick>

080041b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80041b8:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  HAL_GPIO_WritePin(LED1, 1);
 80041ba:	4d10      	ldr	r5, [pc, #64]	; (80041fc <TIM1_UP_TIM16_IRQHandler+0x44>)

  analog_sample(&controller);
 80041bc:	4c10      	ldr	r4, [pc, #64]	; (8004200 <TIM1_UP_TIM16_IRQHandler+0x48>)
  HAL_GPIO_WritePin(LED1, 1);
 80041be:	2201      	movs	r2, #1
 80041c0:	2104      	movs	r1, #4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f002 face 	bl	8006764 <HAL_GPIO_WritePin>
  analog_sample(&controller);
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7fd ffdd 	bl	8002188 <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 80041ce:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004204 <TIM1_UP_TIM16_IRQHandler+0x4c>
 80041d2:	480d      	ldr	r0, [pc, #52]	; (8004208 <TIM1_UP_TIM16_IRQHandler+0x50>)
 80041d4:	f7ff fe04 	bl	8003de0 <ps_sample>

  /* Run Finite State Machine */
  run_fsm(&state);
 80041d8:	480c      	ldr	r0, [pc, #48]	; (800420c <TIM1_UP_TIM16_IRQHandler+0x54>)
 80041da:	f7fe fc9b 	bl	8002b14 <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 80041de:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc


  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041e2:	480b      	ldr	r0, [pc, #44]	; (8004210 <TIM1_UP_TIM16_IRQHandler+0x58>)
  controller.loop_count++;
 80041e4:	3301      	adds	r3, #1
 80041e6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  HAL_TIM_IRQHandler(&htim1);
 80041ea:	f003 ff71 	bl	80080d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_GPIO_WritePin(LED1, 0);
 80041ee:	4628      	mov	r0, r5
 80041f0:	2200      	movs	r2, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80041f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1, 0);
 80041f6:	2104      	movs	r1, #4
 80041f8:	f002 bab4 	b.w	8006764 <HAL_GPIO_WritePin>
 80041fc:	48000800 	.word	0x48000800
 8004200:	20000784 	.word	0x20000784
 8004204:	3827c5ac 	.word	0x3827c5ac
 8004208:	200003e0 	.word	0x200003e0
 800420c:	20000674 	.word	0x20000674
 8004210:	200094b0 	.word	0x200094b0

08004214 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004216:	4805      	ldr	r0, [pc, #20]	; (800422c <USART2_IRQHandler+0x18>)
 8004218:	f004 fb24 	bl	8008864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <USART2_IRQHandler+0x1c>)
  update_fsm(&state, c);
 800421e:	4805      	ldr	r0, [pc, #20]	; (8004234 <USART2_IRQHandler+0x20>)
 8004220:	7819      	ldrb	r1, [r3, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8004222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  update_fsm(&state, c);
 8004226:	f7fe bfd9 	b.w	80031dc <update_fsm>
 800422a:	bf00      	nop
 800422c:	200094fc 	.word	0x200094fc
 8004230:	20000670 	.word	0x20000670
 8004234:	20000674 	.word	0x20000674

08004238 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8004238:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800423a:	4c0f      	ldr	r4, [pc, #60]	; (8004278 <ADC3_IRQHandler+0x40>)
  /* USER CODE BEGIN ADC3_IRQn 1 */
  controller.adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 800423c:	4d0f      	ldr	r5, [pc, #60]	; (800427c <ADC3_IRQHandler+0x44>)
  HAL_ADC_IRQHandler(&hadc3);
 800423e:	4620      	mov	r0, r4
 8004240:	f000 fce0 	bl	8004c04 <HAL_ADC_IRQHandler>
  controller.adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8004244:	4620      	mov	r0, r4
 8004246:	f000 fcd3 	bl	8004bf0 <HAL_ADC_GetValue>
 800424a:	6128      	str	r0, [r5, #16]
  controller.v_bus = controller.adc_vbus_raw*V_SCALE;
 800424c:	f7fc f992 	bl	8000574 <__aeabi_i2d>
 8004250:	a307      	add	r3, pc, #28	; (adr r3, 8004270 <ADC3_IRQHandler+0x38>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f7fc f9f7 	bl	8000648 <__aeabi_dmul>
 800425a:	f7fc fced 	bl	8000c38 <__aeabi_d2f>
 800425e:	4603      	mov	r3, r0
 8004260:	62eb      	str	r3, [r5, #44]	; 0x2c
  HAL_ADC_Start_IT(&ADC_CH_VBUS);
 8004262:	4620      	mov	r0, r4
  /* USER CODE END ADC3_IRQn 1 */
}
 8004264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_ADC_Start_IT(&ADC_CH_VBUS);
 8004268:	f001 b978 	b.w	800555c <HAL_ADC_Start_IT>
 800426c:	f3af 8000 	nop.w
 8004270:	60000000 	.word	0x60000000
 8004274:	3fea6666 	.word	0x3fea6666
 8004278:	2000030c 	.word	0x2000030c
 800427c:	20000784 	.word	0x20000784

08004280 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004284:	4838      	ldr	r0, [pc, #224]	; (8004368 <FDCAN2_IT0_IRQHandler+0xe8>)
  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  //TODO send again
  //HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8004286:	4c39      	ldr	r4, [pc, #228]	; (800436c <FDCAN2_IT0_IRQHandler+0xec>)
{
 8004288:	b090      	sub	sp, #64	; 0x40
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800428a:	f001 febd 	bl	8006008 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800428e:	4b38      	ldr	r3, [pc, #224]	; (8004370 <FDCAN2_IT0_IRQHandler+0xf0>)
 8004290:	4835      	ldr	r0, [pc, #212]	; (8004368 <FDCAN2_IT0_IRQHandler+0xe8>)
 8004292:	f103 020b 	add.w	r2, r3, #11
 8004296:	2140      	movs	r1, #64	; 0x40
 8004298:	f001 fdb0 	bl	8005dfc <HAL_FDCAN_GetRxMessage>
  printf("CAN tx disabled!!\n\r");
 800429c:	4835      	ldr	r0, [pc, #212]	; (8004374 <FDCAN2_IT0_IRQHandler+0xf4>)
 800429e:	f005 ff33 	bl	800a108 <iprintf>
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80042a2:	7926      	ldrb	r6, [r4, #4]
 80042a4:	7963      	ldrb	r3, [r4, #5]
 80042a6:	79a0      	ldrb	r0, [r4, #6]
 80042a8:	7862      	ldrb	r2, [r4, #1]
 80042aa:	f894 c002 	ldrb.w	ip, [r4, #2]
 80042ae:	78e5      	ldrb	r5, [r4, #3]
 80042b0:	79e7      	ldrb	r7, [r4, #7]
 80042b2:	ea06 0103 	and.w	r1, r6, r3
 80042b6:	4001      	ands	r1, r0
 80042b8:	ea02 020c 	and.w	r2, r2, ip
 80042bc:	402a      	ands	r2, r5
 80042be:	4039      	ands	r1, r7
 80042c0:	4011      	ands	r1, r2
 80042c2:	29ff      	cmp	r1, #255	; 0xff
 80042c4:	7a25      	ldrb	r5, [r4, #8]
 80042c6:	d101      	bne.n	80042cc <FDCAN2_IT0_IRQHandler+0x4c>
 80042c8:	2dfc      	cmp	r5, #252	; 0xfc
 80042ca:	d025      	beq.n	8004318 <FDCAN2_IT0_IRQHandler+0x98>
	  update_fsm(&state, MOTOR_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80042cc:	f1a6 06ff 	sub.w	r6, r6, #255	; 0xff
 80042d0:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
 80042d4:	fab6 f686 	clz	r6, r6
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	0976      	lsrs	r6, r6, #5
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	4038      	ands	r0, r7
 80042e2:	4002      	ands	r2, r0
 80042e4:	fb03 f306 	mul.w	r3, r3, r6
 80042e8:	2aff      	cmp	r2, #255	; 0xff
 80042ea:	bf14      	ite	ne
 80042ec:	2300      	movne	r3, #0
 80042ee:	f003 0301 	andeq.w	r3, r3, #1
 80042f2:	2dfd      	cmp	r5, #253	; 0xfd
 80042f4:	bf14      	ite	ne
 80042f6:	2200      	movne	r2, #0
 80042f8:	f003 0201 	andeq.w	r2, r3, #1
 80042fc:	b99a      	cbnz	r2, 8004326 <FDCAN2_IT0_IRQHandler+0xa6>
	  update_fsm(&state, MENU_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80042fe:	2dfe      	cmp	r5, #254	; 0xfe
 8004300:	bf14      	ite	ne
 8004302:	2500      	movne	r5, #0
 8004304:	f003 0501 	andeq.w	r5, r3, #1
 8004308:	b1a5      	cbz	r5, 8004334 <FDCAN2_IT0_IRQHandler+0xb4>
	  update_fsm(&state, ZERO_CMD);
 800430a:	481b      	ldr	r0, [pc, #108]	; (8004378 <FDCAN2_IT0_IRQHandler+0xf8>)
 800430c:	217a      	movs	r1, #122	; 0x7a
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800430e:	b010      	add	sp, #64	; 0x40
 8004310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004314:	f7fe bf62 	b.w	80031dc <update_fsm>
 8004318:	4817      	ldr	r0, [pc, #92]	; (8004378 <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MOTOR_CMD);
 800431a:	216d      	movs	r1, #109	; 0x6d
}
 800431c:	b010      	add	sp, #64	; 0x40
 800431e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004322:	f7fe bf5b 	b.w	80031dc <update_fsm>
 8004326:	4814      	ldr	r0, [pc, #80]	; (8004378 <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MENU_CMD);
 8004328:	211b      	movs	r1, #27
}
 800432a:	b010      	add	sp, #64	; 0x40
 800432c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004330:	f7fe bf54 	b.w	80031dc <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8004334:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8004380 <FDCAN2_IT0_IRQHandler+0x100>
 8004338:	4f10      	ldr	r7, [pc, #64]	; (800437c <FDCAN2_IT0_IRQHandler+0xfc>)
 800433a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800433e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004340:	466e      	mov	r6, sp
 8004342:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004344:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004346:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004348:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800434a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800434c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004350:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8004354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004358:	f7fd fda6 	bl	8001ea8 <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 800435c:	f848 5c14 	str.w	r5, [r8, #-20]
}
 8004360:	b010      	add	sp, #64	; 0x40
 8004362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004366:	bf00      	nop
 8004368:	20000378 	.word	0x20000378
 800436c:	20009374 	.word	0x20009374
 8004370:	20009375 	.word	0x20009375
 8004374:	0800f4ac 	.word	0x0800f4ac
 8004378:	20000674 	.word	0x20000674
 800437c:	20009384 	.word	0x20009384
 8004380:	20000858 	.word	0x20000858

08004384 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004384:	2001      	movs	r0, #1
 8004386:	4770      	bx	lr

08004388 <_kill>:

int _kill(int pid, int sig)
{
 8004388:	b508      	push	{r3, lr}
	errno = EINVAL;
 800438a:	f005 f9f9 	bl	8009780 <__errno>
 800438e:	2316      	movs	r3, #22
 8004390:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004392:	f04f 30ff 	mov.w	r0, #4294967295
 8004396:	bd08      	pop	{r3, pc}

08004398 <_exit>:

void _exit (int status)
{
 8004398:	b508      	push	{r3, lr}
	errno = EINVAL;
 800439a:	f005 f9f1 	bl	8009780 <__errno>
 800439e:	2316      	movs	r3, #22
 80043a0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80043a2:	e7fe      	b.n	80043a2 <_exit+0xa>

080043a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a6:	1e16      	subs	r6, r2, #0
 80043a8:	dd07      	ble.n	80043ba <_read+0x16>
 80043aa:	460c      	mov	r4, r1
 80043ac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80043ae:	f3af 8000 	nop.w
 80043b2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b6:	42a5      	cmp	r5, r4
 80043b8:	d1f9      	bne.n	80043ae <_read+0xa>
	}

return len;
}
 80043ba:	4630      	mov	r0, r6
 80043bc:	bd70      	pop	{r4, r5, r6, pc}
 80043be:	bf00      	nop

080043c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c2:	1e16      	subs	r6, r2, #0
 80043c4:	dd07      	ble.n	80043d6 <_write+0x16>
 80043c6:	460c      	mov	r4, r1
 80043c8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80043ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80043ce:	f000 f9a7 	bl	8004720 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d2:	42ac      	cmp	r4, r5
 80043d4:	d1f9      	bne.n	80043ca <_write+0xa>
	}
	return len;
}
 80043d6:	4630      	mov	r0, r6
 80043d8:	bd70      	pop	{r4, r5, r6, pc}
 80043da:	bf00      	nop

080043dc <_close>:

int _close(int file)
{
	return -1;
}
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop

080043e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80043e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043e8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80043ea:	2000      	movs	r0, #0
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop

080043f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80043f0:	2001      	movs	r0, #1
 80043f2:	4770      	bx	lr

080043f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80043f4:	2000      	movs	r0, #0
 80043f6:	4770      	bx	lr

080043f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f8:	490c      	ldr	r1, [pc, #48]	; (800442c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043fa:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80043fc:	680b      	ldr	r3, [r1, #0]
{
 80043fe:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004400:	4c0c      	ldr	r4, [pc, #48]	; (8004434 <_sbrk+0x3c>)
 8004402:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004404:	b12b      	cbz	r3, 8004412 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004406:	4418      	add	r0, r3
 8004408:	4290      	cmp	r0, r2
 800440a:	d807      	bhi.n	800441c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800440c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800440e:	4618      	mov	r0, r3
 8004410:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004412:	4b09      	ldr	r3, [pc, #36]	; (8004438 <_sbrk+0x40>)
 8004414:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004416:	4418      	add	r0, r3
 8004418:	4290      	cmp	r0, r2
 800441a:	d9f7      	bls.n	800440c <_sbrk+0x14>
    errno = ENOMEM;
 800441c:	f005 f9b0 	bl	8009780 <__errno>
 8004420:	230c      	movs	r3, #12
 8004422:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd10      	pop	{r4, pc}
 800442c:	20000228 	.word	0x20000228
 8004430:	20020000 	.word	0x20020000
 8004434:	00000400 	.word	0x00000400
 8004438:	200095a0 	.word	0x200095a0

0800443c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800443c:	4a03      	ldr	r2, [pc, #12]	; (800444c <SystemInit+0x10>)
 800443e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004446:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004452:	2400      	movs	r4, #0
{
 8004454:	b0a7      	sub	sp, #156	; 0x9c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004456:	4d5f      	ldr	r5, [pc, #380]	; (80045d4 <MX_TIM1_Init+0x184>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004458:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800445a:	4621      	mov	r1, r4
 800445c:	2234      	movs	r2, #52	; 0x34
 800445e:	a818      	add	r0, sp, #96	; 0x60
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004460:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004464:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004468:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 800446c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8004470:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004474:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004476:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004478:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800447a:	f005 f9d3 	bl	8009824 <memset>
  htim1.Instance = TIM1;
 800447e:	4b56      	ldr	r3, [pc, #344]	; (80045d8 <MX_TIM1_Init+0x188>)
 8004480:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004482:	2020      	movs	r0, #32
  htim1.Init.Period = 3400;
 8004484:	f640 5148 	movw	r1, #3400	; 0xd48
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 1;
 8004488:	2201      	movs	r2, #1
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800448a:	2380      	movs	r3, #128	; 0x80
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800448c:	60a8      	str	r0, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800448e:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004490:	e9c5 2305 	strd	r2, r3, [r5, #20]
  htim1.Init.Prescaler = 0;
 8004494:	606c      	str	r4, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004496:	612c      	str	r4, [r5, #16]
  htim1.Init.Period = 3400;
 8004498:	60e9      	str	r1, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800449a:	f003 fb2d 	bl	8007af8 <HAL_TIM_Base_Init>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d160      	bne.n	8004564 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044a6:	484b      	ldr	r0, [pc, #300]	; (80045d4 <MX_TIM1_Init+0x184>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a8:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044aa:	a906      	add	r1, sp, #24
 80044ac:	f003 fd36 	bl	8007f1c <HAL_TIM_ConfigClockSource>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d16c      	bne.n	800458e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044b4:	4847      	ldr	r0, [pc, #284]	; (80045d4 <MX_TIM1_Init+0x184>)
 80044b6:	f003 fbfb 	bl	8007cb0 <HAL_TIM_PWM_Init>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d164      	bne.n	8004588 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044be:	2600      	movs	r6, #0
 80044c0:	2700      	movs	r7, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044c4:	4843      	ldr	r0, [pc, #268]	; (80045d4 <MX_TIM1_Init+0x184>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c6:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044c8:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044ce:	f004 f84d 	bl	800856c <HAL_TIMEx_MasterConfigSynchronization>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d155      	bne.n	8004582 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044d6:	2660      	movs	r6, #96	; 0x60
 80044d8:	2700      	movs	r7, #0
 80044da:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80044de:	2602      	movs	r6, #2
 80044e0:	2700      	movs	r7, #0
 80044e2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044e6:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044e8:	2604      	movs	r6, #4
 80044ea:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044ec:	4839      	ldr	r0, [pc, #228]	; (80045d4 <MX_TIM1_Init+0x184>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044ee:	9216      	str	r2, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044f0:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044f2:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044f6:	f003 ff37 	bl	8008368 <HAL_TIM_PWM_ConfigChannel>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d13e      	bne.n	800457c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044fe:	4835      	ldr	r0, [pc, #212]	; (80045d4 <MX_TIM1_Init+0x184>)
 8004500:	2204      	movs	r2, #4
 8004502:	a910      	add	r1, sp, #64	; 0x40
 8004504:	f003 ff30 	bl	8008368 <HAL_TIM_PWM_ConfigChannel>
 8004508:	bba8      	cbnz	r0, 8004576 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800450a:	4832      	ldr	r0, [pc, #200]	; (80045d4 <MX_TIM1_Init+0x184>)
 800450c:	a910      	add	r1, sp, #64	; 0x40
 800450e:	2208      	movs	r2, #8
 8004510:	f003 ff2a 	bl	8008368 <HAL_TIM_PWM_ConfigChannel>
 8004514:	bb60      	cbnz	r0, 8004570 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004516:	2200      	movs	r2, #0
 8004518:	2300      	movs	r3, #0
 800451a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800451e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8004522:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8004526:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800452a:	2200      	movs	r2, #0
 800452c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004530:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004534:	2400      	movs	r4, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004536:	2200      	movs	r2, #0
 8004538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800453c:	4825      	ldr	r0, [pc, #148]	; (80045d4 <MX_TIM1_Init+0x184>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800453e:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004540:	a918      	add	r1, sp, #96	; 0x60
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004542:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004546:	f004 f875 	bl	8008634 <HAL_TIMEx_ConfigBreakDeadTime>
 800454a:	b970      	cbnz	r0, 800456a <MX_TIM1_Init+0x11a>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 800454c:	6829      	ldr	r1, [r5, #0]
 800454e:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <MX_TIM1_Init+0x188>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004550:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8004552:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004554:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8004558:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800455c:	930e      	str	r3, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM1)
 800455e:	d019      	beq.n	8004594 <MX_TIM1_Init+0x144>
}
 8004560:	b027      	add	sp, #156	; 0x9c
 8004562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004564:	f7ff fb46 	bl	8003bf4 <Error_Handler>
 8004568:	e79b      	b.n	80044a2 <MX_TIM1_Init+0x52>
    Error_Handler();
 800456a:	f7ff fb43 	bl	8003bf4 <Error_Handler>
 800456e:	e7ed      	b.n	800454c <MX_TIM1_Init+0xfc>
    Error_Handler();
 8004570:	f7ff fb40 	bl	8003bf4 <Error_Handler>
 8004574:	e7cf      	b.n	8004516 <MX_TIM1_Init+0xc6>
    Error_Handler();
 8004576:	f7ff fb3d 	bl	8003bf4 <Error_Handler>
 800457a:	e7c6      	b.n	800450a <MX_TIM1_Init+0xba>
    Error_Handler();
 800457c:	f7ff fb3a 	bl	8003bf4 <Error_Handler>
 8004580:	e7bd      	b.n	80044fe <MX_TIM1_Init+0xae>
    Error_Handler();
 8004582:	f7ff fb37 	bl	8003bf4 <Error_Handler>
 8004586:	e7a6      	b.n	80044d6 <MX_TIM1_Init+0x86>
    Error_Handler();
 8004588:	f7ff fb34 	bl	8003bf4 <Error_Handler>
 800458c:	e797      	b.n	80044be <MX_TIM1_Init+0x6e>
    Error_Handler();
 800458e:	f7ff fb31 	bl	8003bf4 <Error_Handler>
 8004592:	e78f      	b.n	80044b4 <MX_TIM1_Init+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004598:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800459c:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80045a8:	900e      	str	r0, [sp, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045b0:	2200      	movs	r2, #0
 80045b2:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045b6:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 80045ba:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045c0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80045c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c8:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ca:	f001 ffd7 	bl	800657c <HAL_GPIO_Init>
}
 80045ce:	b027      	add	sp, #156	; 0x9c
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200094b0 	.word	0x200094b0
 80045d8:	40012c00 	.word	0x40012c00

080045dc <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_TIM_Base_MspInit+0x3c>)
 80045de:	6802      	ldr	r2, [r0, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d000      	beq.n	80045e6 <HAL_TIM_Base_MspInit+0xa>
 80045e4:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045e6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 80045ea:	b500      	push	{lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
 80045f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 80045f6:	b083      	sub	sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2101      	movs	r1, #1
 8004602:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004604:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004606:	f001 f935 	bl	8005874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800460a:	2019      	movs	r0, #25
}
 800460c:	b003      	add	sp, #12
 800460e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004612:	f001 b967 	b.w	80058e4 <HAL_NVIC_EnableIRQ>
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00

0800461c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800461c:	481f      	ldr	r0, [pc, #124]	; (800469c <MX_USART2_UART_Init+0x80>)
{
 800461e:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <MX_USART2_UART_Init+0x84>)
 8004622:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004624:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004628:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800462a:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800462c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004630:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004634:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 115200;
 8004638:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800463a:	6142      	str	r2, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800463c:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800463e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004640:	f004 fd1e 	bl	8009080 <HAL_UART_Init>
 8004644:	b970      	cbnz	r0, 8004664 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004646:	4815      	ldr	r0, [pc, #84]	; (800469c <MX_USART2_UART_Init+0x80>)
 8004648:	2100      	movs	r1, #0
 800464a:	f005 f815 	bl	8009678 <HAL_UARTEx_SetTxFifoThreshold>
 800464e:	b988      	cbnz	r0, 8004674 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004650:	4812      	ldr	r0, [pc, #72]	; (800469c <MX_USART2_UART_Init+0x80>)
 8004652:	2100      	movs	r1, #0
 8004654:	f005 f84e 	bl	80096f4 <HAL_UARTEx_SetRxFifoThreshold>
 8004658:	b9a0      	cbnz	r0, 8004684 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800465a:	4810      	ldr	r0, [pc, #64]	; (800469c <MX_USART2_UART_Init+0x80>)
 800465c:	f004 ffee 	bl	800963c <HAL_UARTEx_DisableFifoMode>
 8004660:	b9b8      	cbnz	r0, 8004692 <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004662:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004664:	f7ff fac6 	bl	8003bf4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004668:	480c      	ldr	r0, [pc, #48]	; (800469c <MX_USART2_UART_Init+0x80>)
 800466a:	2100      	movs	r1, #0
 800466c:	f005 f804 	bl	8009678 <HAL_UARTEx_SetTxFifoThreshold>
 8004670:	2800      	cmp	r0, #0
 8004672:	d0ed      	beq.n	8004650 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8004674:	f7ff fabe 	bl	8003bf4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004678:	4808      	ldr	r0, [pc, #32]	; (800469c <MX_USART2_UART_Init+0x80>)
 800467a:	2100      	movs	r1, #0
 800467c:	f005 f83a 	bl	80096f4 <HAL_UARTEx_SetRxFifoThreshold>
 8004680:	2800      	cmp	r0, #0
 8004682:	d0ea      	beq.n	800465a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8004684:	f7ff fab6 	bl	8003bf4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004688:	4804      	ldr	r0, [pc, #16]	; (800469c <MX_USART2_UART_Init+0x80>)
 800468a:	f004 ffd7 	bl	800963c <HAL_UARTEx_DisableFifoMode>
 800468e:	2800      	cmp	r0, #0
 8004690:	d0e7      	beq.n	8004662 <MX_USART2_UART_Init+0x46>
}
 8004692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004696:	f7ff baad 	b.w	8003bf4 <Error_Handler>
 800469a:	bf00      	nop
 800469c:	200094fc 	.word	0x200094fc
 80046a0:	40004400 	.word	0x40004400

080046a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046a4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 80046a6:	6802      	ldr	r2, [r0, #0]
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_UART_MspInit+0x78>)
{
 80046aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ac:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 80046ae:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80046b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80046b8:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 80046ba:	d001      	beq.n	80046c0 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80046bc:	b008      	add	sp, #32
 80046be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80046c0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80046c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046cc:	659a      	str	r2, [r3, #88]	; 0x58
 80046ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046d0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80046d4:	9200      	str	r2, [sp, #0]
 80046d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	64da      	str	r2, [r3, #76]	; 0x4c
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046e8:	220c      	movs	r2, #12
 80046ea:	2302      	movs	r3, #2
 80046ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046f0:	2507      	movs	r5, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046f2:	2300      	movs	r3, #0
 80046f4:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fe:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004700:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004702:	f001 ff3b 	bl	800657c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004706:	4622      	mov	r2, r4
 8004708:	2101      	movs	r1, #1
 800470a:	2026      	movs	r0, #38	; 0x26
 800470c:	f001 f8b2 	bl	8005874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004710:	2026      	movs	r0, #38	; 0x26
 8004712:	f001 f8e7 	bl	80058e4 <HAL_NVIC_EnableIRQ>
}
 8004716:	b008      	add	sp, #32
 8004718:	bd70      	pop	{r4, r5, r6, pc}
 800471a:	bf00      	nop
 800471c:	40004400 	.word	0x40004400

08004720 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8004720:	b500      	push	{lr}
 8004722:	b083      	sub	sp, #12
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8004724:	f64f 73ff 	movw	r3, #65535	; 0xffff
int __io_putchar(int ch) {
 8004728:	9001      	str	r0, [sp, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 800472a:	2201      	movs	r2, #1
 800472c:	a901      	add	r1, sp, #4
 800472e:	4803      	ldr	r0, [pc, #12]	; (800473c <__io_putchar+0x1c>)
 8004730:	f004 fed8 	bl	80094e4 <HAL_UART_Transmit>
return 0;
}
 8004734:	2000      	movs	r0, #0
 8004736:	b003      	add	sp, #12
 8004738:	f85d fb04 	ldr.w	pc, [sp], #4
 800473c:	200094fc 	.word	0x200094fc

08004740 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004740:	4902      	ldr	r1, [pc, #8]	; (800474c <HAL_UART_RxCpltCallback+0xc>)
 8004742:	4803      	ldr	r0, [pc, #12]	; (8004750 <HAL_UART_RxCpltCallback+0x10>)
 8004744:	2201      	movs	r2, #1
 8004746:	f003 bfd3 	b.w	80086f0 <HAL_UART_Receive_IT>
 800474a:	bf00      	nop
 800474c:	20000670 	.word	0x20000670
 8004750:	200094fc 	.word	0x200094fc

08004754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004754:	480d      	ldr	r0, [pc, #52]	; (800478c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004758:	480d      	ldr	r0, [pc, #52]	; (8004790 <LoopForever+0x6>)
  ldr r1, =_edata
 800475a:	490e      	ldr	r1, [pc, #56]	; (8004794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800475c:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <LoopForever+0xe>)
  movs r3, #0
 800475e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004760:	e002      	b.n	8004768 <LoopCopyDataInit>

08004762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004766:	3304      	adds	r3, #4

08004768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800476a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800476c:	d3f9      	bcc.n	8004762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800476e:	4a0b      	ldr	r2, [pc, #44]	; (800479c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004770:	4c0b      	ldr	r4, [pc, #44]	; (80047a0 <LoopForever+0x16>)
  movs r3, #0
 8004772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004774:	e001      	b.n	800477a <LoopFillZerobss>

08004776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004778:	3204      	adds	r2, #4

0800477a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800477a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800477c:	d3fb      	bcc.n	8004776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800477e:	f7ff fe5d 	bl	800443c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004782:	f005 f803 	bl	800978c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004786:	f7ff f85b 	bl	8003840 <main>

0800478a <LoopForever>:

LoopForever:
    b LoopForever
 800478a:	e7fe      	b.n	800478a <LoopForever>
  ldr   r0, =_estack
 800478c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004794:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004798:	0800fa20 	.word	0x0800fa20
  ldr r2, =_sbss
 800479c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80047a0:	200095a0 	.word	0x200095a0

080047a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047a4:	e7fe      	b.n	80047a4 <ADC1_2_IRQHandler>
	...

080047a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047a8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <HAL_InitTick+0x40>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	b90b      	cbnz	r3, 80047b4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80047b0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80047b4:	490d      	ldr	r1, [pc, #52]	; (80047ec <HAL_InitTick+0x44>)
 80047b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047ba:	4605      	mov	r5, r0
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80047c6:	f001 f89b 	bl	8005900 <HAL_SYSTICK_Config>
 80047ca:	4604      	mov	r4, r0
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d1ef      	bne.n	80047b0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047d0:	2d0f      	cmp	r5, #15
 80047d2:	d8ed      	bhi.n	80047b0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047d4:	4602      	mov	r2, r0
 80047d6:	4629      	mov	r1, r5
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	f001 f84a 	bl	8005874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_InitTick+0x48>)
 80047e2:	4620      	mov	r0, r4
 80047e4:	601d      	str	r5, [r3, #0]
}
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	20000004 	.word	0x20000004
 80047ec:	20000000 	.word	0x20000000
 80047f0:	20000008 	.word	0x20000008

080047f4 <HAL_Init>:
{
 80047f4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047f6:	2003      	movs	r0, #3
 80047f8:	f001 f828 	bl	800584c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7ff ffd3 	bl	80047a8 <HAL_InitTick>
 8004802:	b110      	cbz	r0, 800480a <HAL_Init+0x16>
    status = HAL_ERROR;
 8004804:	2401      	movs	r4, #1
}
 8004806:	4620      	mov	r0, r4
 8004808:	bd10      	pop	{r4, pc}
 800480a:	4604      	mov	r4, r0
    HAL_MspInit();
 800480c:	f7ff fca8 	bl	8004160 <HAL_MspInit>
}
 8004810:	4620      	mov	r0, r4
 8004812:	bd10      	pop	{r4, pc}

08004814 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004814:	4a03      	ldr	r2, [pc, #12]	; (8004824 <HAL_IncTick+0x10>)
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_IncTick+0x14>)
 8004818:	6813      	ldr	r3, [r2, #0]
 800481a:	6809      	ldr	r1, [r1, #0]
 800481c:	440b      	add	r3, r1
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2000958c 	.word	0x2000958c
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800482c:	4b01      	ldr	r3, [pc, #4]	; (8004834 <HAL_GetTick+0x8>)
 800482e:	6818      	ldr	r0, [r3, #0]
}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000958c 	.word	0x2000958c

08004838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800483c:	f7ff fff6 	bl	800482c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004840:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004842:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004844:	d002      	beq.n	800484c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004846:	4b04      	ldr	r3, [pc, #16]	; (8004858 <HAL_Delay+0x20>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800484c:	f7ff ffee 	bl	800482c <HAL_GetTick>
 8004850:	1b43      	subs	r3, r0, r5
 8004852:	42a3      	cmp	r3, r4
 8004854:	d3fa      	bcc.n	800484c <HAL_Delay+0x14>
  {
  }
}
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	20000004 	.word	0x20000004

0800485c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004860:	2300      	movs	r3, #0
 8004862:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004864:	2800      	cmp	r0, #0
 8004866:	f000 80d6 	beq.w	8004a16 <HAL_ADC_Init+0x1ba>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800486a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800486c:	4604      	mov	r4, r0
 800486e:	2d00      	cmp	r5, #0
 8004870:	f000 809f 	beq.w	80049b2 <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004874:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004876:	6893      	ldr	r3, [r2, #8]
 8004878:	0099      	lsls	r1, r3, #2
 800487a:	d505      	bpl.n	8004888 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800487c:	6893      	ldr	r3, [r2, #8]
 800487e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004882:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004886:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004888:	6893      	ldr	r3, [r2, #8]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	d419      	bmi.n	80048c2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800488e:	4b7f      	ldr	r3, [pc, #508]	; (8004a8c <HAL_ADC_Init+0x230>)
 8004890:	487f      	ldr	r0, [pc, #508]	; (8004a90 <HAL_ADC_Init+0x234>)
 8004892:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004894:	6891      	ldr	r1, [r2, #8]
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	fba0 0303 	umull	r0, r3, r0, r3
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80048a2:	3301      	adds	r3, #1
 80048a4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80048ae:	6091      	str	r1, [r2, #8]
 80048b0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80048b2:	9b01      	ldr	r3, [sp, #4]
 80048b4:	b12b      	cbz	r3, 80048c2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80048b6:	9b01      	ldr	r3, [sp, #4]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80048bc:	9b01      	ldr	r3, [sp, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f9      	bne.n	80048b6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048c2:	6893      	ldr	r3, [r2, #8]
 80048c4:	00de      	lsls	r6, r3, #3
 80048c6:	d466      	bmi.n	8004996 <HAL_ADC_Init+0x13a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048ca:	f043 0310 	orr.w	r3, r3, #16
 80048ce:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048d8:	6893      	ldr	r3, [r2, #8]
 80048da:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 80048de:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048e4:	d15e      	bne.n	80049a4 <HAL_ADC_Init+0x148>
 80048e6:	06dd      	lsls	r5, r3, #27
 80048e8:	d45c      	bmi.n	80049a4 <HAL_ADC_Init+0x148>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048f0:	f043 0302 	orr.w	r3, r3, #2
 80048f4:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048f6:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048f8:	07d9      	lsls	r1, r3, #31
 80048fa:	d419      	bmi.n	8004930 <HAL_ADC_Init+0xd4>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048fc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004900:	f000 80a1 	beq.w	8004a46 <HAL_ADC_Init+0x1ea>
 8004904:	4b63      	ldr	r3, [pc, #396]	; (8004a94 <HAL_ADC_Init+0x238>)
 8004906:	429a      	cmp	r2, r3
 8004908:	f000 80a6 	beq.w	8004a58 <HAL_ADC_Init+0x1fc>
 800490c:	4d62      	ldr	r5, [pc, #392]	; (8004a98 <HAL_ADC_Init+0x23c>)
 800490e:	4963      	ldr	r1, [pc, #396]	; (8004a9c <HAL_ADC_Init+0x240>)
 8004910:	68ad      	ldr	r5, [r5, #8]
 8004912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	6889      	ldr	r1, [r1, #8]
 800491a:	432b      	orrs	r3, r5
 800491c:	430b      	orrs	r3, r1
 800491e:	07db      	lsls	r3, r3, #31
 8004920:	d406      	bmi.n	8004930 <HAL_ADC_Init+0xd4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004922:	495f      	ldr	r1, [pc, #380]	; (8004aa0 <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004924:	688b      	ldr	r3, [r1, #8]
 8004926:	6865      	ldr	r5, [r4, #4]
 8004928:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800492c:	432b      	orrs	r3, r5
 800492e:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004930:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8004934:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004936:	432b      	orrs	r3, r5
 8004938:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800493a:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800493c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004940:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004944:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004946:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800494a:	d05f      	beq.n	8004a0c <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800494c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800494e:	b121      	cbz	r1, 800495a <HAL_ADC_Init+0xfe>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004950:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004952:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004956:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004958:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800495a:	68d6      	ldr	r6, [r2, #12]
 800495c:	4951      	ldr	r1, [pc, #324]	; (8004aa4 <HAL_ADC_Init+0x248>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800495e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004960:	4031      	ands	r1, r6
 8004962:	430b      	orrs	r3, r1
 8004964:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004966:	6913      	ldr	r3, [r2, #16]
 8004968:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800496c:	432b      	orrs	r3, r5
 800496e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004970:	6893      	ldr	r3, [r2, #8]
 8004972:	075e      	lsls	r6, r3, #29
 8004974:	d523      	bpl.n	80049be <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004976:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004978:	6963      	ldr	r3, [r4, #20]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d04e      	beq.n	8004a1c <HAL_ADC_Init+0x1c0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800497e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004980:	f023 030f 	bic.w	r3, r3, #15
 8004984:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004986:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004988:	f023 0303 	bic.w	r3, r3, #3
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004992:	b002      	add	sp, #8
 8004994:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004996:	6893      	ldr	r3, [r2, #8]
 8004998:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499c:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049a2:	d0a0      	beq.n	80048e6 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80049a6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a8:	f043 0310 	orr.w	r3, r3, #16
 80049ac:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80049ae:	b002      	add	sp, #8
 80049b0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80049b2:	f7fc fc31 	bl	8001218 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80049b6:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80049b8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80049bc:	e75a      	b.n	8004874 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049be:	6893      	ldr	r3, [r2, #8]
 80049c0:	071d      	lsls	r5, r3, #28
 80049c2:	d4d9      	bmi.n	8004978 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049c4:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049ca:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 80049cc:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049ce:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049d2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049d4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80049d8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049dc:	430b      	orrs	r3, r1
 80049de:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80049e0:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80049e2:	bb1d      	cbnz	r5, 8004a2c <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80049ea:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80049ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80049fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d033      	beq.n	8004a6a <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a02:	6913      	ldr	r3, [r2, #16]
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	6113      	str	r3, [r2, #16]
 8004a0a:	e7b5      	b.n	8004978 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a0e:	3901      	subs	r1, #1
 8004a10:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004a14:	e79a      	b.n	800494c <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 8004a16:	2001      	movs	r0, #1
}
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a1c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a1e:	6a23      	ldr	r3, [r4, #32]
 8004a20:	f021 010f 	bic.w	r1, r1, #15
 8004a24:	3b01      	subs	r3, #1
 8004a26:	430b      	orrs	r3, r1
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2a:	e7ac      	b.n	8004986 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004a32:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004a36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a3e:	432b      	orrs	r3, r5
 8004a40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004a44:	e7d9      	b.n	80049fa <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a46:	4913      	ldr	r1, [pc, #76]	; (8004a94 <HAL_ADC_Init+0x238>)
 8004a48:	6893      	ldr	r3, [r2, #8]
 8004a4a:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	07d9      	lsls	r1, r3, #31
 8004a50:	f53f af6e 	bmi.w	8004930 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a54:	4914      	ldr	r1, [pc, #80]	; (8004aa8 <HAL_ADC_Init+0x24c>)
 8004a56:	e765      	b.n	8004924 <HAL_ADC_Init+0xc8>
 8004a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a60:	430b      	orrs	r3, r1
 8004a62:	07db      	lsls	r3, r3, #31
 8004a64:	f53f af64 	bmi.w	8004930 <HAL_ADC_Init+0xd4>
 8004a68:	e7f4      	b.n	8004a54 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a6a:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8004a6e:	6911      	ldr	r1, [r2, #16]
 8004a70:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004a72:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004a76:	f021 0104 	bic.w	r1, r1, #4
 8004a7a:	4333      	orrs	r3, r6
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a80:	432b      	orrs	r3, r5
 8004a82:	430b      	orrs	r3, r1
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6113      	str	r3, [r2, #16]
 8004a8a:	e775      	b.n	8004978 <HAL_ADC_Init+0x11c>
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	053e2d63 	.word	0x053e2d63
 8004a94:	50000100 	.word	0x50000100
 8004a98:	50000400 	.word	0x50000400
 8004a9c:	50000600 	.word	0x50000600
 8004aa0:	50000700 	.word	0x50000700
 8004aa4:	fff04007 	.word	0xfff04007
 8004aa8:	50000300 	.word	0x50000300

08004aac <HAL_ADC_PollForConversion>:
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aac:	6803      	ldr	r3, [r0, #0]
 8004aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aba:	d06f      	beq.n	8004b9c <HAL_ADC_PollForConversion+0xf0>
 8004abc:	4848      	ldr	r0, [pc, #288]	; (8004be0 <HAL_ADC_PollForConversion+0x134>)
 8004abe:	4a49      	ldr	r2, [pc, #292]	; (8004be4 <HAL_ADC_PollForConversion+0x138>)
 8004ac0:	4949      	ldr	r1, [pc, #292]	; (8004be8 <HAL_ADC_PollForConversion+0x13c>)
 8004ac2:	4283      	cmp	r3, r0
 8004ac4:	bf18      	it	ne
 8004ac6:	460a      	movne	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004ac8:	69ac      	ldr	r4, [r5, #24]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004aca:	6897      	ldr	r7, [r2, #8]
 8004acc:	2c08      	cmp	r4, #8
 8004ace:	f007 071f 	and.w	r7, r7, #31
 8004ad2:	d00a      	beq.n	8004aea <HAL_ADC_PollForConversion+0x3e>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ad4:	2f09      	cmp	r7, #9
 8004ad6:	d863      	bhi.n	8004ba0 <HAL_ADC_PollForConversion+0xf4>
 8004ad8:	f240 2221 	movw	r2, #545	; 0x221
 8004adc:	40fa      	lsrs	r2, r7
 8004ade:	07d1      	lsls	r1, r2, #31
 8004ae0:	d55e      	bpl.n	8004ba0 <HAL_ADC_PollForConversion+0xf4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	07da      	lsls	r2, r3, #31
 8004ae6:	d469      	bmi.n	8004bbc <HAL_ADC_PollForConversion+0x110>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004ae8:	2404      	movs	r4, #4
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004aea:	f7ff fe9f 	bl	800482c <HAL_GetTick>
 8004aee:	682a      	ldr	r2, [r5, #0]
 8004af0:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004af2:	1c73      	adds	r3, r6, #1
 8004af4:	d12c      	bne.n	8004b50 <HAL_ADC_PollForConversion+0xa4>
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	421c      	tst	r4, r3
 8004afa:	d0fc      	beq.n	8004af6 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004afc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b02:	65eb      	str	r3, [r5, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004b04:	68d3      	ldr	r3, [r2, #12]
 8004b06:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8004b0a:	d10f      	bne.n	8004b2c <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004b0c:	7f6b      	ldrb	r3, [r5, #29]
 8004b0e:	b96b      	cbnz	r3, 8004b2c <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b10:	6813      	ldr	r3, [r2, #0]
 8004b12:	0718      	lsls	r0, r3, #28
 8004b14:	d50a      	bpl.n	8004b2c <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b16:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b1c:	65eb      	str	r3, [r5, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b1e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004b20:	04d9      	lsls	r1, r3, #19
 8004b22:	d403      	bmi.n	8004b2c <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b24:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	65eb      	str	r3, [r5, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b2c:	4b2c      	ldr	r3, [pc, #176]	; (8004be0 <HAL_ADC_PollForConversion+0x134>)
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d029      	beq.n	8004b86 <HAL_ADC_PollForConversion+0xda>
 8004b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d04e      	beq.n	8004bd8 <HAL_ADC_PollForConversion+0x12c>
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004b3a:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b3c:	68d0      	ldr	r0, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004b3e:	d029      	beq.n	8004b94 <HAL_ADC_PollForConversion+0xe8>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004b40:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b44:	bf06      	itte	eq
 8004b46:	230c      	moveq	r3, #12
 8004b48:	6013      	streq	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b4a:	2000      	movne	r0, #0
}
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004b50:	6813      	ldr	r3, [r2, #0]
 8004b52:	4223      	tst	r3, r4
 8004b54:	d1d2      	bne.n	8004afc <HAL_ADC_PollForConversion+0x50>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004b56:	f7ff fe69 	bl	800482c <HAL_GetTick>
 8004b5a:	eba0 0008 	sub.w	r0, r0, r8
 8004b5e:	42b0      	cmp	r0, r6
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004b60:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004b62:	d90a      	bls.n	8004b7a <HAL_ADC_PollForConversion+0xce>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	4023      	ands	r3, r4
 8004b68:	d1c3      	bne.n	8004af2 <HAL_ADC_PollForConversion+0x46>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b6a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
          __HAL_UNLOCK(hadc);
 8004b6c:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b70:	f042 0204 	orr.w	r2, r2, #4
 8004b74:	65ea      	str	r2, [r5, #92]	; 0x5c
          return HAL_TIMEOUT;
 8004b76:	2003      	movs	r0, #3
 8004b78:	e7e8      	b.n	8004b4c <HAL_ADC_PollForConversion+0xa0>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004b7a:	2e00      	cmp	r6, #0
 8004b7c:	d1b9      	bne.n	8004af2 <HAL_ADC_PollForConversion+0x46>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	4023      	ands	r3, r4
 8004b82:	d1b6      	bne.n	8004af2 <HAL_ADC_PollForConversion+0x46>
 8004b84:	e7f1      	b.n	8004b6a <HAL_ADC_PollForConversion+0xbe>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b86:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b8a:	2f09      	cmp	r7, #9
 8004b8c:	d91d      	bls.n	8004bca <HAL_ADC_PollForConversion+0x11e>
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004b8e:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004b90:	68c8      	ldr	r0, [r1, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004b92:	d1d5      	bne.n	8004b40 <HAL_ADC_PollForConversion+0x94>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004b94:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8004b96:	2000      	movs	r0, #0
}
 8004b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b9c:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <HAL_ADC_PollForConversion+0x138>)
 8004b9e:	e793      	b.n	8004ac8 <HAL_ADC_PollForConversion+0x1c>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ba4:	d01a      	beq.n	8004bdc <HAL_ADC_PollForConversion+0x130>
 8004ba6:	480e      	ldr	r0, [pc, #56]	; (8004be0 <HAL_ADC_PollForConversion+0x134>)
 8004ba8:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <HAL_ADC_PollForConversion+0x138>)
 8004baa:	490f      	ldr	r1, [pc, #60]	; (8004be8 <HAL_ADC_PollForConversion+0x13c>)
 8004bac:	4283      	cmp	r3, r0
 8004bae:	bf0c      	ite	eq
 8004bb0:	4613      	moveq	r3, r2
 8004bb2:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8004bba:	d095      	beq.n	8004ae8 <HAL_ADC_PollForConversion+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bbc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8004bbe:	f043 0320 	orr.w	r3, r3, #32
 8004bc2:	65eb      	str	r3, [r5, #92]	; 0x5c
        return HAL_ERROR;
 8004bc4:	2001      	movs	r0, #1
}
 8004bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bca:	f240 2321 	movw	r3, #545	; 0x221
 8004bce:	fa23 f707 	lsr.w	r7, r3, r7
 8004bd2:	07fb      	lsls	r3, r7, #31
 8004bd4:	d5db      	bpl.n	8004b8e <HAL_ADC_PollForConversion+0xe2>
 8004bd6:	e7b0      	b.n	8004b3a <HAL_ADC_PollForConversion+0x8e>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bd8:	4904      	ldr	r1, [pc, #16]	; (8004bec <HAL_ADC_PollForConversion+0x140>)
 8004bda:	e7d6      	b.n	8004b8a <HAL_ADC_PollForConversion+0xde>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004bdc:	4b01      	ldr	r3, [pc, #4]	; (8004be4 <HAL_ADC_PollForConversion+0x138>)
 8004bde:	e7e9      	b.n	8004bb4 <HAL_ADC_PollForConversion+0x108>
 8004be0:	50000100 	.word	0x50000100
 8004be4:	50000300 	.word	0x50000300
 8004be8:	50000700 	.word	0x50000700
 8004bec:	50000400 	.word	0x50000400

08004bf0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004bf0:	6803      	ldr	r3, [r0, #0]
 8004bf2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop

08004bf8 <HAL_ADC_ConvCpltCallback>:
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop

08004bfc <HAL_ADC_LevelOutOfWindowCallback>:
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <HAL_ADC_ErrorCallback>:
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004c06:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004c0c:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004c0e:	685f      	ldr	r7, [r3, #4]
{
 8004c10:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c12:	f000 80d2 	beq.w	8004dba <HAL_ADC_IRQHandler+0x1b6>
 8004c16:	48a2      	ldr	r0, [pc, #648]	; (8004ea0 <HAL_ADC_IRQHandler+0x29c>)
 8004c18:	4aa2      	ldr	r2, [pc, #648]	; (8004ea4 <HAL_ADC_IRQHandler+0x2a0>)
 8004c1a:	49a3      	ldr	r1, [pc, #652]	; (8004ea8 <HAL_ADC_IRQHandler+0x2a4>)
 8004c1c:	4283      	cmp	r3, r0
 8004c1e:	bf08      	it	eq
 8004c20:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c22:	6895      	ldr	r5, [r2, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004c24:	07b1      	lsls	r1, r6, #30
 8004c26:	f005 051f 	and.w	r5, r5, #31
 8004c2a:	d502      	bpl.n	8004c32 <HAL_ADC_IRQHandler+0x2e>
 8004c2c:	07ba      	lsls	r2, r7, #30
 8004c2e:	f100 80b6 	bmi.w	8004d9e <HAL_ADC_IRQHandler+0x19a>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c32:	0770      	lsls	r0, r6, #29
 8004c34:	f140 8086 	bpl.w	8004d44 <HAL_ADC_IRQHandler+0x140>
 8004c38:	0779      	lsls	r1, r7, #29
 8004c3a:	f140 8083 	bpl.w	8004d44 <HAL_ADC_IRQHandler+0x140>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c40:	06d1      	lsls	r1, r2, #27
 8004c42:	d403      	bmi.n	8004c4c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c44:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004c52:	d121      	bne.n	8004c98 <HAL_ADC_IRQHandler+0x94>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c54:	4a92      	ldr	r2, [pc, #584]	; (8004ea0 <HAL_ADC_IRQHandler+0x29c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f000 80ec 	beq.w	8004e34 <HAL_ADC_IRQHandler+0x230>
 8004c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c60:	4293      	cmp	r3, r2
 8004c62:	f000 810f 	beq.w	8004e84 <HAL_ADC_IRQHandler+0x280>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c66:	68da      	ldr	r2, [r3, #12]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004c68:	0490      	lsls	r0, r2, #18
 8004c6a:	d415      	bmi.n	8004c98 <HAL_ADC_IRQHandler+0x94>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	0711      	lsls	r1, r2, #28
 8004c70:	d512      	bpl.n	8004c98 <HAL_ADC_IRQHandler+0x94>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	0752      	lsls	r2, r2, #29
 8004c76:	f100 80fc 	bmi.w	8004e72 <HAL_ADC_IRQHandler+0x26e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	f022 020c 	bic.w	r2, r2, #12
 8004c80:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	65e3      	str	r3, [r4, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c8c:	04db      	lsls	r3, r3, #19
 8004c8e:	d403      	bmi.n	8004c98 <HAL_ADC_IRQHandler+0x94>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	65e3      	str	r3, [r4, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7ff ffad 	bl	8004bf8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	220c      	movs	r2, #12
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ca4:	06b0      	lsls	r0, r6, #26
 8004ca6:	d554      	bpl.n	8004d52 <HAL_ADC_IRQHandler+0x14e>
 8004ca8:	06b9      	lsls	r1, r7, #26
 8004caa:	d552      	bpl.n	8004d52 <HAL_ADC_IRQHandler+0x14e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004cae:	06d1      	lsls	r1, r2, #27
 8004cb0:	d403      	bmi.n	8004cba <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004cb2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb8:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cba:	4979      	ldr	r1, [pc, #484]	; (8004ea0 <HAL_ADC_IRQHandler+0x29c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004cbe:	68d8      	ldr	r0, [r3, #12]
 8004cc0:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004cc2:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8004cc6:	f000 80bb 	beq.w	8004e40 <HAL_ADC_IRQHandler+0x23c>
 8004cca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cce:	428b      	cmp	r3, r1
 8004cd0:	f000 80c2 	beq.w	8004e58 <HAL_ADC_IRQHandler+0x254>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004cd4:	68d9      	ldr	r1, [r3, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004cd6:	b9d2      	cbnz	r2, 8004d0e <HAL_ADC_IRQHandler+0x10a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004cd8:	018a      	lsls	r2, r1, #6
 8004cda:	f100 80a3 	bmi.w	8004e24 <HAL_ADC_IRQHandler+0x220>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	0650      	lsls	r0, r2, #25
 8004ce2:	d514      	bpl.n	8004d0e <HAL_ADC_IRQHandler+0x10a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004ce4:	0289      	lsls	r1, r1, #10
 8004ce6:	d412      	bmi.n	8004d0e <HAL_ADC_IRQHandler+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	0712      	lsls	r2, r2, #28
 8004cec:	f100 80ce 	bmi.w	8004e8c <HAL_ADC_IRQHandler+0x288>
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cf6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004cf8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfe:	65e3      	str	r3, [r4, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004d00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d02:	05d8      	lsls	r0, r3, #23
 8004d04:	d403      	bmi.n	8004d0e <HAL_ADC_IRQHandler+0x10a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	65e3      	str	r3, [r4, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f000 fce0 	bl	80056d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	2260      	movs	r2, #96	; 0x60
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004d1a:	0631      	lsls	r1, r6, #24
 8004d1c:	d501      	bpl.n	8004d22 <HAL_ADC_IRQHandler+0x11e>
 8004d1e:	063a      	lsls	r2, r7, #24
 8004d20:	d459      	bmi.n	8004dd6 <HAL_ADC_IRQHandler+0x1d2>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004d22:	05f0      	lsls	r0, r6, #23
 8004d24:	d501      	bpl.n	8004d2a <HAL_ADC_IRQHandler+0x126>
 8004d26:	05f9      	lsls	r1, r7, #23
 8004d28:	d460      	bmi.n	8004dec <HAL_ADC_IRQHandler+0x1e8>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004d2a:	05b2      	lsls	r2, r6, #22
 8004d2c:	d501      	bpl.n	8004d32 <HAL_ADC_IRQHandler+0x12e>
 8004d2e:	05b8      	lsls	r0, r7, #22
 8004d30:	d445      	bmi.n	8004dbe <HAL_ADC_IRQHandler+0x1ba>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004d32:	06f1      	lsls	r1, r6, #27
 8004d34:	d501      	bpl.n	8004d3a <HAL_ADC_IRQHandler+0x136>
 8004d36:	06fa      	lsls	r2, r7, #27
 8004d38:	d410      	bmi.n	8004d5c <HAL_ADC_IRQHandler+0x158>
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004d3a:	0571      	lsls	r1, r6, #21
 8004d3c:	d501      	bpl.n	8004d42 <HAL_ADC_IRQHandler+0x13e>
 8004d3e:	057a      	lsls	r2, r7, #21
 8004d40:	d460      	bmi.n	8004e04 <HAL_ADC_IRQHandler+0x200>
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d44:	0732      	lsls	r2, r6, #28
 8004d46:	d5ad      	bpl.n	8004ca4 <HAL_ADC_IRQHandler+0xa0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d48:	0738      	lsls	r0, r7, #28
 8004d4a:	f53f af78 	bmi.w	8004c3e <HAL_ADC_IRQHandler+0x3a>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d4e:	06b0      	lsls	r0, r6, #26
 8004d50:	d4aa      	bmi.n	8004ca8 <HAL_ADC_IRQHandler+0xa4>
 8004d52:	0672      	lsls	r2, r6, #25
 8004d54:	d5e1      	bpl.n	8004d1a <HAL_ADC_IRQHandler+0x116>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d56:	0678      	lsls	r0, r7, #25
 8004d58:	d5df      	bpl.n	8004d1a <HAL_ADC_IRQHandler+0x116>
 8004d5a:	e7a7      	b.n	8004cac <HAL_ADC_IRQHandler+0xa8>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004d5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d5e:	b17a      	cbz	r2, 8004d80 <HAL_ADC_IRQHandler+0x17c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	d07c      	beq.n	8004e5e <HAL_ADC_IRQHandler+0x25a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d68:	f000 808e 	beq.w	8004e88 <HAL_ADC_IRQHandler+0x284>
 8004d6c:	484c      	ldr	r0, [pc, #304]	; (8004ea0 <HAL_ADC_IRQHandler+0x29c>)
 8004d6e:	4a4d      	ldr	r2, [pc, #308]	; (8004ea4 <HAL_ADC_IRQHandler+0x2a0>)
 8004d70:	494d      	ldr	r1, [pc, #308]	; (8004ea8 <HAL_ADC_IRQHandler+0x2a4>)
 8004d72:	4283      	cmp	r3, r0
 8004d74:	bf08      	it	eq
 8004d76:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004d78:	6892      	ldr	r2, [r2, #8]
 8004d7a:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8004d7e:	d00b      	beq.n	8004d98 <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004d80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d86:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d88:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004d8a:	f043 0302 	orr.w	r3, r3, #2
 8004d8e:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff ff35 	bl	8004c00 <HAL_ADC_ErrorCallback>
 8004d96:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d98:	2210      	movs	r2, #16
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e7cd      	b.n	8004d3a <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004da0:	06db      	lsls	r3, r3, #27
 8004da2:	d403      	bmi.n	8004dac <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004da4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004da6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004daa:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 fc99 	bl	80056e4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	2202      	movs	r2, #2
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e73b      	b.n	8004c32 <HAL_ADC_IRQHandler+0x2e>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dba:	4a3b      	ldr	r2, [pc, #236]	; (8004ea8 <HAL_ADC_IRQHandler+0x2a4>)
 8004dbc:	e731      	b.n	8004c22 <HAL_ADC_IRQHandler+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004dbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc4:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f000 fc8a 	bl	80056e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e7ad      	b.n	8004d32 <HAL_ADC_IRQHandler+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004dd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7ff ff0c 	bl	8004bfc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e79a      	b.n	8004d22 <HAL_ADC_IRQHandler+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004dec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 fc71 	bl	80056dc <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e792      	b.n	8004d2a <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004e04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e0a:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004e0c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004e18:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004e1a:	6019      	str	r1, [r3, #0]
}
 8004e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004e20:	f000 bc5a 	b.w	80056d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004e24:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004e28:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e2c:	4302      	orrs	r2, r0
 8004e2e:	f47f af6e 	bne.w	8004d0e <HAL_ADC_IRQHandler+0x10a>
 8004e32:	e754      	b.n	8004cde <HAL_ADC_IRQHandler+0xda>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e34:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e38:	2d09      	cmp	r5, #9
 8004e3a:	d914      	bls.n	8004e66 <HAL_ADC_IRQHandler+0x262>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e3c:	68ca      	ldr	r2, [r1, #12]
 8004e3e:	e713      	b.n	8004c68 <HAL_ADC_IRQHandler+0x64>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e40:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	f43f af45 	beq.w	8004cd4 <HAL_ADC_IRQHandler+0xd0>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004e4a:	1fa9      	subs	r1, r5, #6
 8004e4c:	2901      	cmp	r1, #1
 8004e4e:	f67f af41 	bls.w	8004cd4 <HAL_ADC_IRQHandler+0xd0>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e52:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8004e56:	e73e      	b.n	8004cd6 <HAL_ADC_IRQHandler+0xd2>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e58:	f8df c050 	ldr.w	ip, [pc, #80]	; 8004eac <HAL_ADC_IRQHandler+0x2a8>
 8004e5c:	e7f2      	b.n	8004e44 <HAL_ADC_IRQHandler+0x240>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	07d0      	lsls	r0, r2, #31
 8004e62:	d599      	bpl.n	8004d98 <HAL_ADC_IRQHandler+0x194>
 8004e64:	e78c      	b.n	8004d80 <HAL_ADC_IRQHandler+0x17c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e66:	f240 2221 	movw	r2, #545	; 0x221
 8004e6a:	40ea      	lsrs	r2, r5
 8004e6c:	07d2      	lsls	r2, r2, #31
 8004e6e:	d5e5      	bpl.n	8004e3c <HAL_ADC_IRQHandler+0x238>
 8004e70:	e6f9      	b.n	8004c66 <HAL_ADC_IRQHandler+0x62>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e74:	f043 0310 	orr.w	r3, r3, #16
 8004e78:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	6623      	str	r3, [r4, #96]	; 0x60
 8004e82:	e709      	b.n	8004c98 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e84:	4909      	ldr	r1, [pc, #36]	; (8004eac <HAL_ADC_IRQHandler+0x2a8>)
 8004e86:	e7d7      	b.n	8004e38 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e88:	4a07      	ldr	r2, [pc, #28]	; (8004ea8 <HAL_ADC_IRQHandler+0x2a4>)
 8004e8a:	e775      	b.n	8004d78 <HAL_ADC_IRQHandler+0x174>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e8e:	f043 0310 	orr.w	r3, r3, #16
 8004e92:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6623      	str	r3, [r4, #96]	; 0x60
 8004e9c:	e737      	b.n	8004d0e <HAL_ADC_IRQHandler+0x10a>
 8004e9e:	bf00      	nop
 8004ea0:	50000100 	.word	0x50000100
 8004ea4:	50000700 	.word	0x50000700
 8004ea8:	50000300 	.word	0x50000300
 8004eac:	50000400 	.word	0x50000400

08004eb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004eba:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004ebc:	f04f 0000 	mov.w	r0, #0
 8004ec0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004ec2:	f000 8150 	beq.w	8005166 <HAL_ADC_ConfigChannel+0x2b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ec6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004ec8:	2001      	movs	r0, #1
 8004eca:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ece:	6894      	ldr	r4, [r2, #8]
 8004ed0:	0766      	lsls	r6, r4, #29
 8004ed2:	d450      	bmi.n	8004f76 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(*preg,
 8004ed4:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004ed8:	09a6      	lsrs	r6, r4, #6
 8004eda:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004ede:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8004ee2:	f004 041f 	and.w	r4, r4, #31
 8004ee6:	5977      	ldr	r7, [r6, r5]
 8004ee8:	f04f 0c1f 	mov.w	ip, #31
 8004eec:	fa0c fc04 	lsl.w	ip, ip, r4
 8004ef0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004ef4:	ea27 070c 	bic.w	r7, r7, ip
 8004ef8:	40a0      	lsls	r0, r4
 8004efa:	4338      	orrs	r0, r7
 8004efc:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004efe:	6890      	ldr	r0, [r2, #8]
 8004f00:	0745      	lsls	r5, r0, #29
 8004f02:	f140 80a5 	bpl.w	8005050 <HAL_ADC_ConfigChannel+0x1a0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f06:	6890      	ldr	r0, [r2, #8]
 8004f08:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f0a:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f0c:	07e4      	lsls	r4, r4, #31
 8004f0e:	d53b      	bpl.n	8004f88 <HAL_ADC_ConfigChannel+0xd8>
 8004f10:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f12:	49c2      	ldr	r1, [pc, #776]	; (800521c <HAL_ADC_ConfigChannel+0x36c>)
 8004f14:	420c      	tst	r4, r1
 8004f16:	d02c      	beq.n	8004f72 <HAL_ADC_ConfigChannel+0xc2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f18:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004f1c:	f000 8121 	beq.w	8005162 <HAL_ADC_ConfigChannel+0x2b2>
 8004f20:	4dbf      	ldr	r5, [pc, #764]	; (8005220 <HAL_ADC_ConfigChannel+0x370>)
 8004f22:	49c0      	ldr	r1, [pc, #768]	; (8005224 <HAL_ADC_ConfigChannel+0x374>)
 8004f24:	48c0      	ldr	r0, [pc, #768]	; (8005228 <HAL_ADC_ConfigChannel+0x378>)
 8004f26:	42aa      	cmp	r2, r5
 8004f28:	bf18      	it	ne
 8004f2a:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004f2c:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f2e:	49bf      	ldr	r1, [pc, #764]	; (800522c <HAL_ADC_ConfigChannel+0x37c>)
 8004f30:	428c      	cmp	r4, r1
 8004f32:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8004f36:	f000 8119 	beq.w	800516c <HAL_ADC_ConfigChannel+0x2bc>
 8004f3a:	49bd      	ldr	r1, [pc, #756]	; (8005230 <HAL_ADC_ConfigChannel+0x380>)
 8004f3c:	428c      	cmp	r4, r1
 8004f3e:	f000 8115 	beq.w	800516c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f42:	49bc      	ldr	r1, [pc, #752]	; (8005234 <HAL_ADC_ConfigChannel+0x384>)
 8004f44:	428c      	cmp	r4, r1
 8004f46:	f040 814d 	bne.w	80051e4 <HAL_ADC_ConfigChannel+0x334>
 8004f4a:	01c0      	lsls	r0, r0, #7
 8004f4c:	d411      	bmi.n	8004f72 <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f4e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004f52:	f000 822c 	beq.w	80053ae <HAL_ADC_ConfigChannel+0x4fe>
 8004f56:	4cb2      	ldr	r4, [pc, #712]	; (8005220 <HAL_ADC_ConfigChannel+0x370>)
 8004f58:	49b2      	ldr	r1, [pc, #712]	; (8005224 <HAL_ADC_ConfigChannel+0x374>)
 8004f5a:	48b3      	ldr	r0, [pc, #716]	; (8005228 <HAL_ADC_ConfigChannel+0x378>)
 8004f5c:	42a2      	cmp	r2, r4
 8004f5e:	bf0c      	ite	eq
 8004f60:	460a      	moveq	r2, r1
 8004f62:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004f64:	6891      	ldr	r1, [r2, #8]
 8004f66:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004f6a:	430d      	orrs	r5, r1
 8004f6c:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 8004f70:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f72:	2000      	movs	r0, #0
}
 8004f74:	e003      	b.n	8004f7e <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f78:	f042 0220 	orr.w	r2, r2, #32
 8004f7c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004f84:	b003      	add	sp, #12
 8004f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f88:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004f8a:	4cab      	ldr	r4, [pc, #684]	; (8005238 <HAL_ADC_ConfigChannel+0x388>)
 8004f8c:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f90:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 800524c <HAL_ADC_ConfigChannel+0x39c>
 8004f94:	f006 0718 	and.w	r7, r6, #24
 8004f98:	40fc      	lsrs	r4, r7
 8004f9a:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8004f9e:	4004      	ands	r4, r0
 8004fa0:	ea25 0507 	bic.w	r5, r5, r7
 8004fa4:	432c      	orrs	r4, r5
 8004fa6:	4566      	cmp	r6, ip
 8004fa8:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004fac:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fae:	d1b0      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fb0:	2f00      	cmp	r7, #0
 8004fb2:	f000 8104 	beq.w	80051be <HAL_ADC_ConfigChannel+0x30e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	f000 819c 	beq.w	80052f8 <HAL_ADC_ConfigChannel+0x448>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004fc0:	fab4 f484 	clz	r4, r4
 8004fc4:	3401      	adds	r4, #1
 8004fc6:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fca:	2c09      	cmp	r4, #9
 8004fcc:	f240 8194 	bls.w	80052f8 <HAL_ADC_ConfigChannel+0x448>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004fd4:	2d00      	cmp	r5, #0
 8004fd6:	f000 81f0 	beq.w	80053ba <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8004fda:	fab5 f585 	clz	r5, r5
 8004fde:	3501      	adds	r5, #1
 8004fe0:	06ad      	lsls	r5, r5, #26
 8004fe2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004fea:	2c00      	cmp	r4, #0
 8004fec:	f000 81e3 	beq.w	80053b6 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8004ff0:	fab4 f484 	clz	r4, r4
 8004ff4:	3401      	adds	r4, #1
 8004ff6:	f004 041f 	and.w	r4, r4, #31
 8004ffa:	2601      	movs	r6, #1
 8004ffc:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005000:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005006:	2800      	cmp	r0, #0
 8005008:	f000 81d3 	beq.w	80053b2 <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 800500c:	fab0 f480 	clz	r4, r0
 8005010:	3401      	adds	r4, #1
 8005012:	f004 041f 	and.w	r4, r4, #31
 8005016:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800501a:	f1a4 001e 	sub.w	r0, r4, #30
 800501e:	0500      	lsls	r0, r0, #20
 8005020:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005024:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005026:	0dc7      	lsrs	r7, r0, #23
 8005028:	f007 0704 	and.w	r7, r7, #4
 800502c:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8005030:	688e      	ldr	r6, [r1, #8]
 8005032:	597c      	ldr	r4, [r7, r5]
 8005034:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005038:	f04f 0c07 	mov.w	ip, #7
 800503c:	fa0c fc00 	lsl.w	ip, ip, r0
 8005040:	ea24 040c 	bic.w	r4, r4, ip
 8005044:	fa06 f000 	lsl.w	r0, r6, r0
 8005048:	4320      	orrs	r0, r4
 800504a:	5178      	str	r0, [r7, r5]
 800504c:	680c      	ldr	r4, [r1, #0]
}
 800504e:	e760      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005050:	6890      	ldr	r0, [r2, #8]
 8005052:	f010 0008 	ands.w	r0, r0, #8
 8005056:	f040 8082 	bne.w	800515e <HAL_ADC_ConfigChannel+0x2ae>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800505a:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800505c:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800505e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005062:	f000 80f7 	beq.w	8005254 <HAL_ADC_ConfigChannel+0x3a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005066:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 800506a:	f00c 0c04 	and.w	ip, ip, #4
 800506e:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8005072:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005076:	f85c 5007 	ldr.w	r5, [ip, r7]
 800507a:	f04f 0e07 	mov.w	lr, #7
 800507e:	fa0e fe06 	lsl.w	lr, lr, r6
 8005082:	40b4      	lsls	r4, r6
 8005084:	ea25 050e 	bic.w	r5, r5, lr
 8005088:	432c      	orrs	r4, r5
 800508a:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800508e:	6954      	ldr	r4, [r2, #20]
 8005090:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005094:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005096:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800509a:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800509c:	f1bc 0f04 	cmp.w	ip, #4
 80050a0:	d02e      	beq.n	8005100 <HAL_ADC_ConfigChannel+0x250>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050a2:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 80050a6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8005250 <HAL_ADC_ConfigChannel+0x3a0>
 80050aa:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 80050ae:	680f      	ldr	r7, [r1, #0]
 80050b0:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050b4:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80050b8:	694d      	ldr	r5, [r1, #20]
 80050ba:	0076      	lsls	r6, r6, #1
 80050bc:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80050c0:	40b5      	lsls	r5, r6
 80050c2:	ea47 070e 	orr.w	r7, r7, lr
 80050c6:	433d      	orrs	r5, r7
 80050c8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80050cc:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050d0:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80050d2:	698e      	ldr	r6, [r1, #24]
 80050d4:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 80050d8:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80050dc:	4335      	orrs	r5, r6
 80050de:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80050e2:	690e      	ldr	r6, [r1, #16]
 80050e4:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 80050e6:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 80050ea:	2f01      	cmp	r7, #1
 80050ec:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80050f0:	bf08      	it	eq
 80050f2:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 80050f6:	4328      	orrs	r0, r5
 80050f8:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80050fc:	6808      	ldr	r0, [r1, #0]
}
 80050fe:	e704      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005100:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005102:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005104:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005106:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800510a:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800510e:	2d00      	cmp	r5, #0
 8005110:	f040 80b4 	bne.w	800527c <HAL_ADC_ConfigChannel+0x3cc>
 8005114:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005118:	42ac      	cmp	r4, r5
 800511a:	f000 8111 	beq.w	8005340 <HAL_ADC_ConfigChannel+0x490>
 800511e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005120:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005122:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005126:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800512a:	f102 0764 	add.w	r7, r2, #100	; 0x64
 800512e:	42ae      	cmp	r6, r5
 8005130:	f000 812b 	beq.w	800538a <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005134:	68a6      	ldr	r6, [r4, #8]
 8005136:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005138:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800513c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005140:	42ae      	cmp	r6, r5
 8005142:	f000 8111 	beq.w	8005368 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005146:	68e6      	ldr	r6, [r4, #12]
 8005148:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800514a:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800514c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005150:	42b5      	cmp	r5, r6
 8005152:	f47f aeda 	bne.w	8004f0a <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8005156:	6820      	ldr	r0, [r4, #0]
 8005158:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800515c:	6020      	str	r0, [r4, #0]
 800515e:	6808      	ldr	r0, [r1, #0]
}
 8005160:	e6d3      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x5a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005162:	4930      	ldr	r1, [pc, #192]	; (8005224 <HAL_ADC_ConfigChannel+0x374>)
 8005164:	e6e2      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8005166:	2002      	movs	r0, #2
}
 8005168:	b003      	add	sp, #12
 800516a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800516c:	0201      	lsls	r1, r0, #8
 800516e:	f53f af00 	bmi.w	8004f72 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005172:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005176:	d033      	beq.n	80051e0 <HAL_ADC_ConfigChannel+0x330>
 8005178:	4930      	ldr	r1, [pc, #192]	; (800523c <HAL_ADC_ConfigChannel+0x38c>)
 800517a:	428a      	cmp	r2, r1
 800517c:	f47f aef9 	bne.w	8004f72 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005180:	4829      	ldr	r0, [pc, #164]	; (8005228 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005182:	4a2f      	ldr	r2, [pc, #188]	; (8005240 <HAL_ADC_ConfigChannel+0x390>)
 8005184:	4c2f      	ldr	r4, [pc, #188]	; (8005244 <HAL_ADC_ConfigChannel+0x394>)
 8005186:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005188:	6881      	ldr	r1, [r0, #8]
 800518a:	0992      	lsrs	r2, r2, #6
 800518c:	fba4 4202 	umull	r4, r2, r4, r2
 8005190:	0992      	lsrs	r2, r2, #6
 8005192:	3201      	adds	r2, #1
 8005194:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005198:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800519c:	430d      	orrs	r5, r1
 800519e:	0092      	lsls	r2, r2, #2
 80051a0:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 80051a4:	6085      	str	r5, [r0, #8]
 80051a6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80051a8:	9a01      	ldr	r2, [sp, #4]
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	f43f aee1 	beq.w	8004f72 <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 80051b0:	9a01      	ldr	r2, [sp, #4]
 80051b2:	3a01      	subs	r2, #1
 80051b4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80051b6:	9a01      	ldr	r2, [sp, #4]
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d1f9      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x300>
 80051bc:	e6d9      	b.n	8004f72 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051be:	0e80      	lsrs	r0, r0, #26
 80051c0:	1c44      	adds	r4, r0, #1
 80051c2:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051c6:	2e09      	cmp	r6, #9
 80051c8:	f200 8088 	bhi.w	80052dc <HAL_ADC_ConfigChannel+0x42c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051cc:	06a5      	lsls	r5, r4, #26
 80051ce:	2401      	movs	r4, #1
 80051d0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80051d4:	40b4      	lsls	r4, r6
 80051d6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80051da:	4325      	orrs	r5, r4
 80051dc:	0500      	lsls	r0, r0, #20
 80051de:	e721      	b.n	8005024 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051e0:	4810      	ldr	r0, [pc, #64]	; (8005224 <HAL_ADC_ConfigChannel+0x374>)
 80051e2:	e7ce      	b.n	8005182 <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80051e4:	4918      	ldr	r1, [pc, #96]	; (8005248 <HAL_ADC_ConfigChannel+0x398>)
 80051e6:	428c      	cmp	r4, r1
 80051e8:	f47f aec3 	bne.w	8004f72 <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051ec:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80051f0:	f47f aebf 	bne.w	8004f72 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_VREFINT_INSTANCE(hadc))
 80051f4:	490a      	ldr	r1, [pc, #40]	; (8005220 <HAL_ADC_ConfigChannel+0x370>)
 80051f6:	428a      	cmp	r2, r1
 80051f8:	f43f aebb 	beq.w	8004f72 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051fc:	4c0a      	ldr	r4, [pc, #40]	; (8005228 <HAL_ADC_ConfigChannel+0x378>)
 80051fe:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8005202:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005206:	bf18      	it	ne
 8005208:	4621      	movne	r1, r4
 800520a:	688a      	ldr	r2, [r1, #8]
 800520c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005210:	432a      	orrs	r2, r5
 8005212:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005216:	608a      	str	r2, [r1, #8]
}
 8005218:	e6b1      	b.n	8004f7e <HAL_ADC_ConfigChannel+0xce>
 800521a:	bf00      	nop
 800521c:	80080000 	.word	0x80080000
 8005220:	50000100 	.word	0x50000100
 8005224:	50000300 	.word	0x50000300
 8005228:	50000700 	.word	0x50000700
 800522c:	c3210000 	.word	0xc3210000
 8005230:	90c00010 	.word	0x90c00010
 8005234:	c7520000 	.word	0xc7520000
 8005238:	0007ffff 	.word	0x0007ffff
 800523c:	50000600 	.word	0x50000600
 8005240:	20000000 	.word	0x20000000
 8005244:	053e2d63 	.word	0x053e2d63
 8005248:	cb840000 	.word	0xcb840000
 800524c:	407f0000 	.word	0x407f0000
 8005250:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005254:	0df5      	lsrs	r5, r6, #23
 8005256:	f102 0414 	add.w	r4, r2, #20
 800525a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800525e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005262:	592f      	ldr	r7, [r5, r4]
 8005264:	f04f 0c07 	mov.w	ip, #7
 8005268:	fa0c f606 	lsl.w	r6, ip, r6
 800526c:	ea27 0606 	bic.w	r6, r7, r6
 8005270:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005272:	6954      	ldr	r4, [r2, #20]
 8005274:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005278:	6154      	str	r4, [r2, #20]
}
 800527a:	e70c      	b.n	8005096 <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005280:	b11d      	cbz	r5, 800528a <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8005282:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005286:	42ac      	cmp	r4, r5
 8005288:	d05a      	beq.n	8005340 <HAL_ADC_ConfigChannel+0x490>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800528a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800528c:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800528e:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005292:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005296:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800529e:	b11d      	cbz	r5, 80052a8 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80052a0:	fab5 f585 	clz	r5, r5
 80052a4:	42ae      	cmp	r6, r5
 80052a6:	d070      	beq.n	800538a <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052a8:	68a5      	ldr	r5, [r4, #8]
 80052aa:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052ac:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052b0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80052b8:	b11d      	cbz	r5, 80052c2 <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 80052ba:	fab5 f585 	clz	r5, r5
 80052be:	42ae      	cmp	r6, r5
 80052c0:	d052      	beq.n	8005368 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052c2:	68e5      	ldr	r5, [r4, #12]
 80052c4:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052c6:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052c8:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80052d0:	2d00      	cmp	r5, #0
 80052d2:	f43f ae1a 	beq.w	8004f0a <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 80052d6:	fab5 f585 	clz	r5, r5
 80052da:	e739      	b.n	8005150 <HAL_ADC_ConfigChannel+0x2a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052dc:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80052e0:	06a5      	lsls	r5, r4, #26
 80052e2:	381e      	subs	r0, #30
 80052e4:	2401      	movs	r4, #1
 80052e6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80052ea:	fa04 f606 	lsl.w	r6, r4, r6
 80052ee:	0500      	lsls	r0, r0, #20
 80052f0:	4335      	orrs	r5, r6
 80052f2:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80052f6:	e695      	b.n	8005024 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	d064      	beq.n	80053ca <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8005300:	fab5 f585 	clz	r5, r5
 8005304:	3501      	adds	r5, #1
 8005306:	06ad      	lsls	r5, r5, #26
 8005308:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005310:	2c00      	cmp	r4, #0
 8005312:	d058      	beq.n	80053c6 <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8005314:	fab4 f484 	clz	r4, r4
 8005318:	3401      	adds	r4, #1
 800531a:	f004 041f 	and.w	r4, r4, #31
 800531e:	2601      	movs	r6, #1
 8005320:	fa06 f404 	lsl.w	r4, r6, r4
 8005324:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800532a:	2800      	cmp	r0, #0
 800532c:	d048      	beq.n	80053c0 <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 800532e:	fab0 f480 	clz	r4, r0
 8005332:	3401      	adds	r4, #1
 8005334:	f004 041f 	and.w	r4, r4, #31
 8005338:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800533c:	0520      	lsls	r0, r4, #20
 800533e:	e671      	b.n	8005024 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 8005340:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005342:	4614      	mov	r4, r2
 8005344:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005348:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800534c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800534e:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8005350:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005352:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005356:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800535a:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800535e:	2d00      	cmp	r5, #0
 8005360:	d19b      	bne.n	800529a <HAL_ADC_ConfigChannel+0x3ea>
 8005362:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005366:	e6e2      	b.n	800512e <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8005368:	6838      	ldr	r0, [r7, #0]
 800536a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800536e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005370:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005372:	68e5      	ldr	r5, [r4, #12]
 8005374:	68e6      	ldr	r6, [r4, #12]
 8005376:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800537a:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800537e:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005380:	2d00      	cmp	r5, #0
 8005382:	d1a3      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x41c>
 8005384:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005388:	e6e2      	b.n	8005150 <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(*preg,
 800538a:	6838      	ldr	r0, [r7, #0]
 800538c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005390:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005392:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005394:	68a5      	ldr	r5, [r4, #8]
 8005396:	68a6      	ldr	r6, [r4, #8]
 8005398:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800539c:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053a0:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	d185      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x404>
 80053a8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80053ac:	e6c8      	b.n	8005140 <HAL_ADC_ConfigChannel+0x290>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053ae:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <HAL_ADC_ConfigChannel+0x520>)
 80053b0:	e5d8      	b.n	8004f64 <HAL_ADC_ConfigChannel+0xb4>
 80053b2:	4808      	ldr	r0, [pc, #32]	; (80053d4 <HAL_ADC_ConfigChannel+0x524>)
 80053b4:	e636      	b.n	8005024 <HAL_ADC_ConfigChannel+0x174>
 80053b6:	2402      	movs	r4, #2
 80053b8:	e622      	b.n	8005000 <HAL_ADC_ConfigChannel+0x150>
 80053ba:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80053be:	e612      	b.n	8004fe6 <HAL_ADC_ConfigChannel+0x136>
 80053c0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80053c4:	e62e      	b.n	8005024 <HAL_ADC_ConfigChannel+0x174>
 80053c6:	2402      	movs	r4, #2
 80053c8:	e7ac      	b.n	8005324 <HAL_ADC_ConfigChannel+0x474>
 80053ca:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80053ce:	e79d      	b.n	800530c <HAL_ADC_ConfigChannel+0x45c>
 80053d0:	50000300 	.word	0x50000300
 80053d4:	fe500000 	.word	0xfe500000

080053d8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053d8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	07d1      	lsls	r1, r2, #31
 80053de:	d501      	bpl.n	80053e4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053e0:	2000      	movs	r0, #0
}
 80053e2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053e4:	6899      	ldr	r1, [r3, #8]
 80053e6:	4a19      	ldr	r2, [pc, #100]	; (800544c <ADC_Enable+0x74>)
 80053e8:	4211      	tst	r1, r2
{
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053ee:	d122      	bne.n	8005436 <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	4d17      	ldr	r5, [pc, #92]	; (8005450 <ADC_Enable+0x78>)
 80053f4:	402a      	ands	r2, r5
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80053fc:	f7ff fa16 	bl	800482c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005400:	6833      	ldr	r3, [r6, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 8005406:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005408:	d413      	bmi.n	8005432 <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800540a:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800540c:	07d0      	lsls	r0, r2, #31
 800540e:	d404      	bmi.n	800541a <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	402a      	ands	r2, r5
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800541a:	f7ff fa07 	bl	800482c <HAL_GetTick>
 800541e:	1b03      	subs	r3, r0, r4
 8005420:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005422:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005424:	d902      	bls.n	800542c <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	07d1      	lsls	r1, r2, #31
 800542a:	d504      	bpl.n	8005436 <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	07d2      	lsls	r2, r2, #31
 8005430:	d5eb      	bpl.n	800540a <ADC_Enable+0x32>
  return HAL_OK;
 8005432:	2000      	movs	r0, #0
}
 8005434:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005436:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005438:	f043 0310 	orr.w	r3, r3, #16
 800543c:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800543e:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8005446:	2001      	movs	r0, #1
}
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	bf00      	nop
 800544c:	8000003f 	.word	0x8000003f
 8005450:	7fffffc0 	.word	0x7fffffc0

08005454 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005454:	6803      	ldr	r3, [r0, #0]
 8005456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800545a:	b570      	push	{r4, r5, r6, lr}
 800545c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800545e:	d04d      	beq.n	80054fc <HAL_ADC_Start+0xa8>
 8005460:	483a      	ldr	r0, [pc, #232]	; (800554c <HAL_ADC_Start+0xf8>)
 8005462:	4a3b      	ldr	r2, [pc, #236]	; (8005550 <HAL_ADC_Start+0xfc>)
 8005464:	493b      	ldr	r1, [pc, #236]	; (8005554 <HAL_ADC_Start+0x100>)
 8005466:	4283      	cmp	r3, r0
 8005468:	bf18      	it	ne
 800546a:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800546c:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800546e:	689d      	ldr	r5, [r3, #8]
 8005470:	f015 0504 	ands.w	r5, r5, #4
 8005474:	d140      	bne.n	80054f8 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8005476:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800547a:	2b01      	cmp	r3, #1
 800547c:	d03c      	beq.n	80054f8 <HAL_ADC_Start+0xa4>
 800547e:	2301      	movs	r3, #1
 8005480:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8005484:	4620      	mov	r0, r4
 8005486:	f7ff ffa7 	bl	80053d8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800548a:	2800      	cmp	r0, #0
 800548c:	d138      	bne.n	8005500 <HAL_ADC_Start+0xac>
      ADC_STATE_CLR_SET(hadc->State,
 800548e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	492e      	ldr	r1, [pc, #184]	; (800554c <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 8005494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054a0:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80054a2:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 80054a6:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054a8:	d045      	beq.n	8005536 <HAL_ADC_Start+0xe2>
 80054aa:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <HAL_ADC_Start+0x104>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d047      	beq.n	8005540 <HAL_ADC_Start+0xec>
 80054b0:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054b8:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054bc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054c0:	bf1c      	itt	ne
 80054c2:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80054c4:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80054c8:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054ca:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 80054cc:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054ce:	428a      	cmp	r2, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054d0:	6015      	str	r5, [r2, #0]
      __HAL_UNLOCK(hadc);
 80054d2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054d6:	d01c      	beq.n	8005512 <HAL_ADC_Start+0xbe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054d8:	2e09      	cmp	r6, #9
 80054da:	d914      	bls.n	8005506 <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80054e4:	68cb      	ldr	r3, [r1, #12]
 80054e6:	019b      	lsls	r3, r3, #6
 80054e8:	d505      	bpl.n	80054f6 <HAL_ADC_Start+0xa2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054f4:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 80054f8:	2002      	movs	r0, #2
}
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <HAL_ADC_Start+0xfc>)
 80054fe:	e7b5      	b.n	800546c <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 8005500:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8005504:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005506:	f240 2321 	movw	r3, #545	; 0x221
 800550a:	fa23 f606 	lsr.w	r6, r3, r6
 800550e:	07f5      	lsls	r5, r6, #31
 8005510:	d5e4      	bpl.n	80054dc <HAL_ADC_Start+0x88>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005512:	68d3      	ldr	r3, [r2, #12]
 8005514:	0199      	lsls	r1, r3, #6
 8005516:	d505      	bpl.n	8005524 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005518:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800551a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800551e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005522:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8005524:	6893      	ldr	r3, [r2, #8]
 8005526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800552a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	6093      	str	r3, [r2, #8]
}
 8005534:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005536:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800553a:	2e00      	cmp	r6, #0
 800553c:	d1bd      	bne.n	80054ba <HAL_ADC_Start+0x66>
 800553e:	e7b8      	b.n	80054b2 <HAL_ADC_Start+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005540:	f501 7140 	add.w	r1, r1, #768	; 0x300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005544:	2e00      	cmp	r6, #0
 8005546:	d1b8      	bne.n	80054ba <HAL_ADC_Start+0x66>
 8005548:	e7b3      	b.n	80054b2 <HAL_ADC_Start+0x5e>
 800554a:	bf00      	nop
 800554c:	50000100 	.word	0x50000100
 8005550:	50000300 	.word	0x50000300
 8005554:	50000700 	.word	0x50000700
 8005558:	50000500 	.word	0x50000500

0800555c <HAL_ADC_Start_IT>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800555c:	6803      	ldr	r3, [r0, #0]
 800555e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005562:	b570      	push	{r4, r5, r6, lr}
 8005564:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005566:	d06a      	beq.n	800563e <HAL_ADC_Start_IT+0xe2>
 8005568:	4855      	ldr	r0, [pc, #340]	; (80056c0 <HAL_ADC_Start_IT+0x164>)
 800556a:	4a56      	ldr	r2, [pc, #344]	; (80056c4 <HAL_ADC_Start_IT+0x168>)
 800556c:	4956      	ldr	r1, [pc, #344]	; (80056c8 <HAL_ADC_Start_IT+0x16c>)
 800556e:	4283      	cmp	r3, r0
 8005570:	bf18      	it	ne
 8005572:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005574:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005576:	689d      	ldr	r5, [r3, #8]
 8005578:	f015 0504 	ands.w	r5, r5, #4
 800557c:	d15d      	bne.n	800563a <HAL_ADC_Start_IT+0xde>
    __HAL_LOCK(hadc);
 800557e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005582:	2b01      	cmp	r3, #1
 8005584:	d059      	beq.n	800563a <HAL_ADC_Start_IT+0xde>
 8005586:	2301      	movs	r3, #1
 8005588:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff ff23 	bl	80053d8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005592:	2800      	cmp	r0, #0
 8005594:	d155      	bne.n	8005642 <HAL_ADC_Start_IT+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 8005596:	6de2      	ldr	r2, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	4949      	ldr	r1, [pc, #292]	; (80056c0 <HAL_ADC_Start_IT+0x164>)
      ADC_STATE_CLR_SET(hadc->State,
 800559c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055a8:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80055aa:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 80055ae:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055b0:	d06c      	beq.n	800568c <HAL_ADC_Start_IT+0x130>
 80055b2:	4a46      	ldr	r2, [pc, #280]	; (80056cc <HAL_ADC_Start_IT+0x170>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d06e      	beq.n	8005696 <HAL_ADC_Start_IT+0x13a>
 80055b8:	461d      	mov	r5, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80055bc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80055c0:	65e2      	str	r2, [r4, #92]	; 0x5c
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80055c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80055c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80055c8:	bf1c      	itt	ne
 80055ca:	6e22      	ldrne	r2, [r4, #96]	; 0x60
 80055cc:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80055d0:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055d2:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80055d4:	2200      	movs	r2, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055d6:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hadc);
 80055d8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80055dc:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80055de:	69a1      	ldr	r1, [r4, #24]
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80055e0:	f022 021c 	bic.w	r2, r2, #28
 80055e4:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80055e6:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80055e8:	2908      	cmp	r1, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80055ea:	bf0c      	ite	eq
 80055ec:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80055f0:	f042 0204 	orrne.w	r2, r2, #4
 80055f4:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80055f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80055f8:	b91a      	cbnz	r2, 8005602 <HAL_ADC_Start_IT+0xa6>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	f042 0210 	orr.w	r2, r2, #16
 8005600:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005602:	42ab      	cmp	r3, r5
 8005604:	d026      	beq.n	8005654 <HAL_ADC_Start_IT+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005606:	2e09      	cmp	r6, #9
 8005608:	d91e      	bls.n	8005648 <HAL_ADC_Start_IT+0xec>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800560a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800560c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005610:	65e2      	str	r2, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005612:	68ea      	ldr	r2, [r5, #12]
 8005614:	0192      	lsls	r2, r2, #6
 8005616:	d50f      	bpl.n	8005638 <HAL_ADC_Start_IT+0xdc>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005618:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800561a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800561e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005622:	65e2      	str	r2, [r4, #92]	; 0x5c
          switch (hadc->Init.EOCSelection)
 8005624:	2908      	cmp	r1, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005626:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8005628:	d041      	beq.n	80056ae <HAL_ADC_Start_IT+0x152>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800562a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	f042 0220 	orr.w	r2, r2, #32
 8005636:	605a      	str	r2, [r3, #4]
}
 8005638:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 800563a:	2002      	movs	r0, #2
}
 800563c:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_ADC_Start_IT+0x168>)
 8005640:	e798      	b.n	8005574 <HAL_ADC_Start_IT+0x18>
      __HAL_UNLOCK(hadc);
 8005642:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8005646:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005648:	f240 2221 	movw	r2, #545	; 0x221
 800564c:	fa22 f606 	lsr.w	r6, r2, r6
 8005650:	07f6      	lsls	r6, r6, #31
 8005652:	d5da      	bpl.n	800560a <HAL_ADC_Start_IT+0xae>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	0195      	lsls	r5, r2, #6
 8005658:	d50f      	bpl.n	800567a <HAL_ADC_Start_IT+0x11e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800565a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800565c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005664:	65e2      	str	r2, [r4, #92]	; 0x5c
          switch (hadc->Init.EOCSelection)
 8005666:	2908      	cmp	r1, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005668:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 800566a:	d018      	beq.n	800569e <HAL_ADC_Start_IT+0x142>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800566c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005670:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	f042 0220 	orr.w	r2, r2, #32
 8005678:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005680:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005684:	f042 0204 	orr.w	r2, r2, #4
 8005688:	609a      	str	r2, [r3, #8]
}
 800568a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800568c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005690:	2e00      	cmp	r6, #0
 8005692:	d196      	bne.n	80055c2 <HAL_ADC_Start_IT+0x66>
 8005694:	e791      	b.n	80055ba <HAL_ADC_Start_IT+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005696:	4d0e      	ldr	r5, [pc, #56]	; (80056d0 <HAL_ADC_Start_IT+0x174>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005698:	2e00      	cmp	r6, #0
 800569a:	d192      	bne.n	80055c2 <HAL_ADC_Start_IT+0x66>
 800569c:	e78d      	b.n	80055ba <HAL_ADC_Start_IT+0x5e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800569e:	f022 0220 	bic.w	r2, r2, #32
 80056a2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056aa:	605a      	str	r2, [r3, #4]
              break;
 80056ac:	e7e5      	b.n	800567a <HAL_ADC_Start_IT+0x11e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80056ae:	f022 0220 	bic.w	r2, r2, #32
 80056b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ba:	605a      	str	r2, [r3, #4]
}
 80056bc:	bd70      	pop	{r4, r5, r6, pc}
 80056be:	bf00      	nop
 80056c0:	50000100 	.word	0x50000100
 80056c4:	50000300 	.word	0x50000300
 80056c8:	50000700 	.word	0x50000700
 80056cc:	50000500 	.word	0x50000500
 80056d0:	50000400 	.word	0x50000400

080056d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop

080056d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop

080056dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop

080056e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop

080056e4 <HAL_ADCEx_EndOfSamplingCallback>:
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop

080056e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056e8:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056ea:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056ee:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80056f0:	2b01      	cmp	r3, #1
{
 80056f2:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 80056f4:	d04d      	beq.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0xaa>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056f6:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80056f8:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80056fa:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056fc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005700:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005702:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005706:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005708:	d00c      	beq.n	8005724 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 800570a:	4d4a      	ldr	r5, [pc, #296]	; (8005834 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800570c:	42aa      	cmp	r2, r5
 800570e:	d03e      	beq.n	800578e <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005710:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005712:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005716:	f042 0220 	orr.w	r2, r2, #32
 800571a:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800571c:	4618      	mov	r0, r3
 800571e:	b01c      	add	sp, #112	; 0x70
 8005720:	bcf0      	pop	{r4, r5, r6, r7}
 8005722:	4770      	bx	lr
 8005724:	4b44      	ldr	r3, [pc, #272]	; (8005838 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	075b      	lsls	r3, r3, #29
 800572a:	d50c      	bpl.n	8005746 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 800572c:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800572e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005730:	f043 0320 	orr.w	r3, r3, #32
 8005734:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8005738:	2200      	movs	r2, #0
 800573a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 800573e:	4618      	mov	r0, r3
 8005740:	b01c      	add	sp, #112	; 0x70
 8005742:	bcf0      	pop	{r4, r5, r6, r7}
 8005744:	4770      	bx	lr
 8005746:	6893      	ldr	r3, [r2, #8]
 8005748:	075c      	lsls	r4, r3, #29
 800574a:	d4f0      	bmi.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800574c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005750:	d024      	beq.n	800579c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8005752:	4b39      	ldr	r3, [pc, #228]	; (8005838 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d021      	beq.n	800579c <HAL_ADCEx_MultiModeConfigChannel+0xb4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005758:	2e00      	cmp	r6, #0
 800575a:	d153      	bne.n	8005804 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800575c:	4a37      	ldr	r2, [pc, #220]	; (800583c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800575e:	4c35      	ldr	r4, [pc, #212]	; (8005834 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005760:	6893      	ldr	r3, [r2, #8]
 8005762:	4d37      	ldr	r5, [pc, #220]	; (8005840 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005764:	4937      	ldr	r1, [pc, #220]	; (8005844 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005766:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800576a:	6093      	str	r3, [r2, #8]
 800576c:	68a4      	ldr	r4, [r4, #8]
 800576e:	68ab      	ldr	r3, [r5, #8]
 8005770:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005772:	4323      	orrs	r3, r4
 8005774:	430b      	orrs	r3, r1
 8005776:	43db      	mvns	r3, r3
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	b37b      	cbz	r3, 80057de <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800577e:	6893      	ldr	r3, [r2, #8]
 8005780:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005784:	f023 030f 	bic.w	r3, r3, #15
 8005788:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e7d4      	b.n	8005738 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 800578e:	4b2c      	ldr	r3, [pc, #176]	; (8005840 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005790:	e7c9      	b.n	8005726 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8005792:	2302      	movs	r3, #2
}
 8005794:	4618      	mov	r0, r3
 8005796:	b01c      	add	sp, #112	; 0x70
 8005798:	bcf0      	pop	{r4, r5, r6, r7}
 800579a:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800579c:	b30e      	cbz	r6, 80057e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800579e:	4a2a      	ldr	r2, [pc, #168]	; (8005848 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 80057a0:	684d      	ldr	r5, [r1, #4]
 80057a2:	6893      	ldr	r3, [r2, #8]
 80057a4:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 80057a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80057ac:	432b      	orrs	r3, r5
 80057ae:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 80057b2:	6093      	str	r3, [r2, #8]
 80057b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80057ba:	6894      	ldr	r4, [r2, #8]
 80057bc:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057be:	4323      	orrs	r3, r4
 80057c0:	43db      	mvns	r3, r3
 80057c2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	b143      	cbz	r3, 80057de <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        MODIFY_REG(tmpADC_Common->CCR,
 80057cc:	6894      	ldr	r4, [r2, #8]
 80057ce:	688b      	ldr	r3, [r1, #8]
 80057d0:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 80057d4:	431e      	orrs	r6, r3
 80057d6:	f021 010f 	bic.w	r1, r1, #15
 80057da:	430e      	orrs	r6, r1
 80057dc:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e7aa      	b.n	8005738 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80057e2:	4a19      	ldr	r2, [pc, #100]	; (8005848 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 80057e4:	6893      	ldr	r3, [r2, #8]
 80057e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80057ea:	6093      	str	r3, [r2, #8]
 80057ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80057f2:	6891      	ldr	r1, [r2, #8]
 80057f4:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	43db      	mvns	r3, r3
 80057fa:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	e7bb      	b.n	800577c <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005804:	4a0d      	ldr	r2, [pc, #52]	; (800583c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005806:	684d      	ldr	r5, [r1, #4]
 8005808:	6893      	ldr	r3, [r2, #8]
 800580a:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800580e:	4f0c      	ldr	r7, [pc, #48]	; (8005840 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005810:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005814:	432b      	orrs	r3, r5
 8005816:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 800581a:	4d06      	ldr	r5, [pc, #24]	; (8005834 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800581c:	6093      	str	r3, [r2, #8]
 800581e:	4c09      	ldr	r4, [pc, #36]	; (8005844 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005820:	68ad      	ldr	r5, [r5, #8]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	68a4      	ldr	r4, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005826:	432b      	orrs	r3, r5
 8005828:	4323      	orrs	r3, r4
 800582a:	43db      	mvns	r3, r3
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	e7cb      	b.n	80057ca <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8005832:	bf00      	nop
 8005834:	50000400 	.word	0x50000400
 8005838:	50000100 	.word	0x50000100
 800583c:	50000700 	.word	0x50000700
 8005840:	50000500 	.word	0x50000500
 8005844:	50000600 	.word	0x50000600
 8005848:	50000300 	.word	0x50000300

0800584c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800584c:	4908      	ldr	r1, [pc, #32]	; (8005870 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800584e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005850:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005852:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005854:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005858:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800585a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800585e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005868:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800586c:	60cb      	str	r3, [r1, #12]
 800586e:	4770      	bx	lr
 8005870:	e000ed00 	.word	0xe000ed00

08005874 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005874:	4b19      	ldr	r3, [pc, #100]	; (80058dc <HAL_NVIC_SetPriority+0x68>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800587c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800587e:	f1c3 0507 	rsb	r5, r3, #7
 8005882:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005884:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005888:	bf28      	it	cs
 800588a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800588c:	2c06      	cmp	r4, #6
 800588e:	d919      	bls.n	80058c4 <HAL_NVIC_SetPriority+0x50>
 8005890:	3b03      	subs	r3, #3
 8005892:	f04f 34ff 	mov.w	r4, #4294967295
 8005896:	409c      	lsls	r4, r3
 8005898:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800589c:	f04f 34ff 	mov.w	r4, #4294967295
 80058a0:	40ac      	lsls	r4, r5
 80058a2:	ea21 0104 	bic.w	r1, r1, r4
 80058a6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80058a8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058aa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80058ae:	db0c      	blt.n	80058ca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80058b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80058b8:	0109      	lsls	r1, r1, #4
 80058ba:	b2c9      	uxtb	r1, r1
 80058bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80058c0:	bc30      	pop	{r4, r5}
 80058c2:	4770      	bx	lr
 80058c4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058c6:	4613      	mov	r3, r2
 80058c8:	e7e8      	b.n	800589c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_NVIC_SetPriority+0x6c>)
 80058cc:	f000 000f 	and.w	r0, r0, #15
 80058d0:	0109      	lsls	r1, r1, #4
 80058d2:	4403      	add	r3, r0
 80058d4:	b2c9      	uxtb	r1, r1
 80058d6:	7619      	strb	r1, [r3, #24]
 80058d8:	bc30      	pop	{r4, r5}
 80058da:	4770      	bx	lr
 80058dc:	e000ed00 	.word	0xe000ed00
 80058e0:	e000ecfc 	.word	0xe000ecfc

080058e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80058e4:	2800      	cmp	r0, #0
 80058e6:	db07      	blt.n	80058f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e8:	4a04      	ldr	r2, [pc, #16]	; (80058fc <HAL_NVIC_EnableIRQ+0x18>)
 80058ea:	f000 011f 	and.w	r1, r0, #31
 80058ee:	2301      	movs	r3, #1
 80058f0:	0940      	lsrs	r0, r0, #5
 80058f2:	408b      	lsls	r3, r1
 80058f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	e000e100 	.word	0xe000e100

08005900 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005900:	3801      	subs	r0, #1
 8005902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005906:	d20e      	bcs.n	8005926 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005908:	4b08      	ldr	r3, [pc, #32]	; (800592c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800590a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800590c:	4c08      	ldr	r4, [pc, #32]	; (8005930 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800590e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005910:	20f0      	movs	r0, #240	; 0xf0
 8005912:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005916:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005918:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800591a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800591c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800591e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005922:	6019      	str	r1, [r3, #0]
 8005924:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005926:	2001      	movs	r0, #1
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	e000e010 	.word	0xe000e010
 8005930:	e000ed00 	.word	0xe000ed00

08005934 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005934:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005938:	2a02      	cmp	r2, #2
{
 800593a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800593c:	d009      	beq.n	8005952 <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800593e:	2204      	movs	r2, #4
 8005940:	63c2      	str	r2, [r0, #60]	; 0x3c
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005942:	2101      	movs	r1, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005944:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8005946:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005948:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800594c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8005950:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005952:	6802      	ldr	r2, [r0, #0]
{
 8005954:	b470      	push	{r4, r5, r6}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005956:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005958:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800595a:	6cde      	ldr	r6, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800595c:	f020 000e 	bic.w	r0, r0, #14
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005960:	e9d3 5110 	ldrd	r5, r1, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005964:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800596c:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 800596e:	6814      	ldr	r4, [r2, #0]
     if (hdma->DMAmuxRequestGen != 0U)
 8005970:	6d58      	ldr	r0, [r3, #84]	; 0x54
     __HAL_DMA_DISABLE(hdma);
 8005972:	f024 0401 	bic.w	r4, r4, #1
 8005976:	6014      	str	r4, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005978:	f001 011f 	and.w	r1, r1, #31
 800597c:	2201      	movs	r2, #1
 800597e:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005980:	6d19      	ldr	r1, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005982:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005984:	6071      	str	r1, [r6, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005986:	b138      	cbz	r0, 8005998 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005988:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800598a:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800598e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005992:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005996:	604c      	str	r4, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8005998:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 800599a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 800599c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80059a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80059a4:	bc70      	pop	{r4, r5, r6}
 80059a6:	4770      	bx	lr

080059a8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059a8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80059ac:	2a02      	cmp	r2, #2
{
 80059ae:	4603      	mov	r3, r0
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059b0:	d009      	beq.n	80059c6 <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059b2:	2201      	movs	r2, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059b4:	2004      	movs	r0, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059b6:	2100      	movs	r1, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059b8:	63d8      	str	r0, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80059ba:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80059be:	4610      	mov	r0, r2
    hdma->State = HAL_DMA_STATE_READY;
 80059c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80059c4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059c6:	6802      	ldr	r2, [r0, #0]
{
 80059c8:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059ca:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059cc:	6810      	ldr	r0, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059ce:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059d0:	f020 000e 	bic.w	r0, r0, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059d4:	e9d3 4110 	ldrd	r4, r1, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059d8:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80059da:	6810      	ldr	r0, [r2, #0]
 80059dc:	f020 0001 	bic.w	r0, r0, #1
 80059e0:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059e2:	682a      	ldr	r2, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80059e4:	6d58      	ldr	r0, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ea:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059ec:	f001 011f 	and.w	r1, r1, #31
 80059f0:	2201      	movs	r2, #1
 80059f2:	408a      	lsls	r2, r1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059f6:	6062      	str	r2, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059f8:	6071      	str	r1, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80059fa:	b130      	cbz	r0, 8005a0a <HAL_DMA_Abort_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059fc:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059fe:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a06:	6002      	str	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a08:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8005a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005a0c:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8005a0e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005a10:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005a14:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8005a18:	b11a      	cbz	r2, 8005a22 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8005a1e:	4620      	mov	r0, r4
}
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005a22:	4610      	mov	r0, r2
}
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
 8005a26:	bf00      	nop

08005a28 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	f000 8143 	beq.w	8005cb4 <HAL_FDCAN_Init+0x28c>
{
 8005a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a32:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005a36:	4604      	mov	r4, r0
 8005a38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d073      	beq.n	8005b28 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a40:	6822      	ldr	r2, [r4, #0]
 8005a42:	6993      	ldr	r3, [r2, #24]
 8005a44:	f023 0310 	bic.w	r3, r3, #16
 8005a48:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a4a:	f7fe feef 	bl	800482c <HAL_GetTick>
 8005a4e:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a50:	e004      	b.n	8005a5c <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a52:	f7fe feeb 	bl	800482c <HAL_GetTick>
 8005a56:	1b43      	subs	r3, r0, r5
 8005a58:	2b0a      	cmp	r3, #10
 8005a5a:	d85b      	bhi.n	8005b14 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	0712      	lsls	r2, r2, #28
 8005a62:	d4f6      	bmi.n	8005a52 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a6c:	f7fe fede 	bl	800482c <HAL_GetTick>
 8005a70:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a72:	e004      	b.n	8005a7e <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a74:	f7fe feda 	bl	800482c <HAL_GetTick>
 8005a78:	1b40      	subs	r0, r0, r5
 8005a7a:	280a      	cmp	r0, #10
 8005a7c:	d84a      	bhi.n	8005b14 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	6993      	ldr	r3, [r2, #24]
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	d5f6      	bpl.n	8005a74 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005a86:	6993      	ldr	r3, [r2, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005a88:	4993      	ldr	r1, [pc, #588]	; (8005cd8 <HAL_FDCAN_Init+0x2b0>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005a8a:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8005a8e:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005a90:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 8005a92:	f000 810b 	beq.w	8005cac <HAL_FDCAN_Init+0x284>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005a96:	7c23      	ldrb	r3, [r4, #16]
 8005a98:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a9a:	6993      	ldr	r3, [r2, #24]
 8005a9c:	bf0c      	ite	eq
 8005a9e:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005aa2:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005aa6:	6193      	str	r3, [r2, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005aa8:	7c63      	ldrb	r3, [r4, #17]
 8005aaa:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005aac:	6993      	ldr	r3, [r2, #24]
 8005aae:	bf0c      	ite	eq
 8005ab0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ab4:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8005ab8:	6193      	str	r3, [r2, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005aba:	7ca3      	ldrb	r3, [r4, #18]
 8005abc:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005abe:	6993      	ldr	r3, [r2, #24]
 8005ac0:	bf0c      	ite	eq
 8005ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aca:	6193      	str	r3, [r2, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005acc:	6993      	ldr	r3, [r2, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ace:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	432b      	orrs	r3, r5
 8005ad8:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005ada:	6993      	ldr	r3, [r2, #24]
 8005adc:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8005ae0:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ae2:	6913      	ldr	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ae4:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005aec:	d021      	beq.n	8005b32 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005aee:	b321      	cbz	r1, 8005b3a <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005af0:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005af2:	6993      	ldr	r3, [r2, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005af4:	f000 80ec 	beq.w	8005cd0 <HAL_FDCAN_Init+0x2a8>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afc:	6193      	str	r3, [r2, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005afe:	6913      	ldr	r3, [r2, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b00:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b02:	f043 0310 	orr.w	r3, r3, #16
 8005b06:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b08:	d117      	bne.n	8005b3a <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b0a:	6993      	ldr	r3, [r2, #24]
 8005b0c:	f043 0320 	orr.w	r3, r3, #32
 8005b10:	6193      	str	r3, [r2, #24]
 8005b12:	e012      	b.n	8005b3a <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b14:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b16:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b1e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005b22:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005b28:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005b2c:	f7fc f948 	bl	8001dc0 <HAL_FDCAN_MspInit>
 8005b30:	e786      	b.n	8005a40 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005b32:	6993      	ldr	r3, [r2, #24]
 8005b34:	f043 0304 	orr.w	r3, r3, #4
 8005b38:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b3a:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b3e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b40:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b42:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b44:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b46:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005b4a:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b4c:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b4e:	4303      	orrs	r3, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005b50:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005b56:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b5a:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005b5c:	d10e      	bne.n	8005b7c <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b5e:	e9d4 530b 	ldrd	r5, r3, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005b62:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b66:	3b01      	subs	r3, #1
 8005b68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b6a:	3d01      	subs	r5, #1
 8005b6c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b70:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b72:	4303      	orrs	r3, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005b74:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b7a:	60d3      	str	r3, [r2, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005b7c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005b80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005b82:	4956      	ldr	r1, [pc, #344]	; (8005cdc <HAL_FDCAN_Init+0x2b4>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005b84:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 8005b86:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005b88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8005b8c:	f000 8094 	beq.w	8005cb8 <HAL_FDCAN_Init+0x290>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005b90:	4d53      	ldr	r5, [pc, #332]	; (8005ce0 <HAL_FDCAN_Init+0x2b8>)
 8005b92:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <HAL_FDCAN_Init+0x2bc>)
 8005b94:	4b54      	ldr	r3, [pc, #336]	; (8005ce8 <HAL_FDCAN_Init+0x2c0>)
 8005b96:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8005d04 <HAL_FDCAN_Init+0x2dc>
 8005b9a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8005d08 <HAL_FDCAN_Init+0x2e0>
 8005b9e:	4f53      	ldr	r7, [pc, #332]	; (8005cec <HAL_FDCAN_Init+0x2c4>)
 8005ba0:	f8df c168 	ldr.w	ip, [pc, #360]	; 8005d0c <HAL_FDCAN_Init+0x2e4>
 8005ba4:	f8df e168 	ldr.w	lr, [pc, #360]	; 8005d10 <HAL_FDCAN_Init+0x2e8>
 8005ba8:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8005d14 <HAL_FDCAN_Init+0x2ec>
 8005bac:	4e50      	ldr	r6, [pc, #320]	; (8005cf0 <HAL_FDCAN_Init+0x2c8>)
 8005bae:	42aa      	cmp	r2, r5
 8005bb0:	f501 4186 	add.w	r1, r1, #17152	; 0x4300
 8005bb4:	f505 5561 	add.w	r5, r5, #14400	; 0x3840
 8005bb8:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8005bbc:	bf18      	it	ne
 8005bbe:	4607      	movne	r7, r0
 8005bc0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005bc4:	f100 00d8 	add.w	r0, r0, #216	; 0xd8
 8005bc8:	bf18      	it	ne
 8005bca:	4698      	movne	r8, r3
 8005bcc:	f1a3 03b0 	sub.w	r3, r3, #176	; 0xb0
 8005bd0:	bf03      	ittte	eq
 8005bd2:	46c6      	moveq	lr, r8
 8005bd4:	46d4      	moveq	ip, sl
 8005bd6:	4688      	moveq	r8, r1
 8005bd8:	46a9      	movne	r9, r5
 8005bda:	f1a1 01b0 	sub.w	r1, r1, #176	; 0xb0
 8005bde:	bf1c      	itt	ne
 8005be0:	4606      	movne	r6, r0
 8005be2:	4619      	movne	r1, r3

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005be4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8005be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005bea:	6421      	str	r1, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005bec:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8005bf0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8005bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005bf8:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 8005bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005bfe:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005c02:	1e70      	subs	r0, r6, #1
 8005c04:	1a40      	subs	r0, r0, r1
 8005c06:	f025 6970 	bic.w	r9, r5, #251658240	; 0xf000000
 8005c0a:	0885      	lsrs	r5, r0, #2
 8005c0c:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
 8005c10:	3501      	adds	r5, #1
 8005c12:	f101 0901 	add.w	r9, r1, #1
 8005c16:	454e      	cmp	r6, r9
 8005c18:	bf38      	it	cc
 8005c1a:	2501      	movcc	r5, #1
 8005c1c:	2817      	cmp	r0, #23
 8005c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005c22:	e9c4 8e12 	strd	r8, lr, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005c26:	e9c4 c714 	strd	ip, r7, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c2a:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8005c2e:	d91a      	bls.n	8005c66 <HAL_FDCAN_Init+0x23e>
 8005c30:	454e      	cmp	r6, r9
 8005c32:	bf2c      	ite	cs
 8005c34:	2200      	movcs	r2, #0
 8005c36:	2201      	movcc	r2, #1
 8005c38:	b9aa      	cbnz	r2, 8005c66 <HAL_FDCAN_Init+0x23e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c3a:	460f      	mov	r7, r1
 8005c3c:	b10b      	cbz	r3, 8005c42 <HAL_FDCAN_Init+0x21a>
 8005c3e:	f847 2b04 	str.w	r2, [r7], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c42:	1aed      	subs	r5, r5, r3
 8005c44:	086a      	lsrs	r2, r5, #1
 8005c46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005c4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c4e:	2000      	movs	r0, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d1fb      	bne.n	8005c52 <HAL_FDCAN_Init+0x22a>
 8005c5a:	f025 0301 	bic.w	r3, r5, #1
 8005c5e:	429d      	cmp	r5, r3
 8005c60:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8005c64:	d01a      	beq.n	8005c9c <HAL_FDCAN_Init+0x274>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c66:	460a      	mov	r2, r1
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f842 3b04 	str.w	r3, [r2], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c6e:	4296      	cmp	r6, r2
 8005c70:	d914      	bls.n	8005c9c <HAL_FDCAN_Init+0x274>
 8005c72:	f101 0208 	add.w	r2, r1, #8
 8005c76:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c78:	604b      	str	r3, [r1, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c7a:	d90f      	bls.n	8005c9c <HAL_FDCAN_Init+0x274>
 8005c7c:	f101 020c 	add.w	r2, r1, #12
 8005c80:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c82:	608b      	str	r3, [r1, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c84:	d90a      	bls.n	8005c9c <HAL_FDCAN_Init+0x274>
 8005c86:	f101 0210 	add.w	r2, r1, #16
 8005c8a:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c8c:	60cb      	str	r3, [r1, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c8e:	d905      	bls.n	8005c9c <HAL_FDCAN_Init+0x274>
 8005c90:	f101 0214 	add.w	r2, r1, #20
 8005c94:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c96:	610b      	str	r3, [r1, #16]
 8005c98:	bf88      	it	hi
 8005c9a:	614b      	strhi	r3, [r1, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8005c9c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005c9e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ca0:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ca2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ca6:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <HAL_FDCAN_Init+0x2cc>)
 8005cae:	6861      	ldr	r1, [r4, #4]
 8005cb0:	6019      	str	r1, [r3, #0]
 8005cb2:	e6f0      	b.n	8005a96 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8005cb4:	2001      	movs	r0, #1
}
 8005cb6:	4770      	bx	lr
 8005cb8:	4f0f      	ldr	r7, [pc, #60]	; (8005cf8 <HAL_FDCAN_Init+0x2d0>)
 8005cba:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005d18 <HAL_FDCAN_Init+0x2f0>
 8005cbe:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8005d1c <HAL_FDCAN_Init+0x2f4>
 8005cc2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005d20 <HAL_FDCAN_Init+0x2f8>
 8005cc6:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8005d24 <HAL_FDCAN_Init+0x2fc>
 8005cca:	4e0c      	ldr	r6, [pc, #48]	; (8005cfc <HAL_FDCAN_Init+0x2d4>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005ccc:	490c      	ldr	r1, [pc, #48]	; (8005d00 <HAL_FDCAN_Init+0x2d8>)
 8005cce:	e789      	b.n	8005be4 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	6193      	str	r3, [r2, #24]
 8005cd6:	e730      	b.n	8005b3a <HAL_FDCAN_Init+0x112>
 8005cd8:	40006400 	.word	0x40006400
 8005cdc:	40006800 	.word	0x40006800
 8005ce0:	40006c00 	.word	0x40006c00
 8005ce4:	4000a678 	.word	0x4000a678
 8005ce8:	4000a4b0 	.word	0x4000a4b0
 8005cec:	4000ad18 	.word	0x4000ad18
 8005cf0:	4000adf0 	.word	0x4000adf0
 8005cf4:	40006500 	.word	0x40006500
 8005cf8:	4000a9c8 	.word	0x4000a9c8
 8005cfc:	4000aaa0 	.word	0x4000aaa0
 8005d00:	4000a750 	.word	0x4000a750
 8005d04:	4000ac28 	.word	0x4000ac28
 8005d08:	4000ad00 	.word	0x4000ad00
 8005d0c:	4000a660 	.word	0x4000a660
 8005d10:	4000a588 	.word	0x4000a588
 8005d14:	4000ab10 	.word	0x4000ab10
 8005d18:	4000a9b0 	.word	0x4000a9b0
 8005d1c:	4000a8d8 	.word	0x4000a8d8
 8005d20:	4000a800 	.word	0x4000a800
 8005d24:	4000a7c0 	.word	0x4000a7c0

08005d28 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d28:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d905      	bls.n	8005d3e <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005d32:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005d34:	f043 0302 	orr.w	r3, r3, #2
 8005d38:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005d3a:	2001      	movs	r0, #1
}
 8005d3c:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005d3e:	680b      	ldr	r3, [r1, #0]
{
 8005d40:	b470      	push	{r4, r5, r6}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005d42:	b983      	cbnz	r3, 8005d66 <HAL_FDCAN_ConfigFilter+0x3e>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005d44:	e9d1 6202 	ldrd	r6, r2, [r1, #8]
 8005d48:	694d      	ldr	r5, [r1, #20]
      *FilterAddress = FilterElementW1;
 8005d4a:	6c04      	ldr	r4, [r0, #64]	; 0x40
                         (sFilterConfig->FilterID1 << 16U)    |
 8005d4c:	6908      	ldr	r0, [r1, #16]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005d4e:	6849      	ldr	r1, [r1, #4]
                         (sFilterConfig->FilterConfig << 27U) |
 8005d50:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005d52:	ea42 7286 	orr.w	r2, r2, r6, lsl #30
 8005d56:	432a      	orrs	r2, r5
 8005d58:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      *FilterAddress = FilterElementW1;
 8005d5c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    return HAL_OK;
 8005d60:	4618      	mov	r0, r3
}
 8005d62:	bc70      	pop	{r4, r5, r6}
 8005d64:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005d66:	e9d1 6203 	ldrd	r6, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005d6a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005d6c:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005d6e:	688d      	ldr	r5, [r1, #8]
 8005d70:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005d72:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005d76:	ea42 7246 	orr.w	r2, r2, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005d7a:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
      *FilterAddress = FilterElementW1;
 8005d7e:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8005d82:	2000      	movs	r0, #0
}
 8005d84:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 8005d86:	604b      	str	r3, [r1, #4]
}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop

08005d8c <HAL_FDCAN_ConfigGlobalFilter>:
{
 8005d8c:	b470      	push	{r4, r5, r6}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005d8e:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
 8005d92:	2e01      	cmp	r6, #1
 8005d94:	d006      	beq.n	8005da4 <HAL_FDCAN_ConfigGlobalFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005d96:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005d98:	f043 0304 	orr.w	r3, r3, #4
 8005d9c:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005d9e:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 8005da0:	2001      	movs	r0, #1
}
 8005da2:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005da4:	6806      	ldr	r6, [r0, #0]
 8005da6:	4615      	mov	r5, r2
 8005da8:	9a03      	ldr	r2, [sp, #12]
 8005daa:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 8005dae:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8005db2:	ea43 0285 	orr.w	r2, r3, r5, lsl #2
 8005db6:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8005dba:	f020 033f 	bic.w	r3, r0, #63	; 0x3f
 8005dbe:	4319      	orrs	r1, r3
 8005dc0:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
    return HAL_OK;
 8005dc4:	2000      	movs	r0, #0
}
 8005dc6:	bc70      	pop	{r4, r5, r6}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop

08005dcc <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005dcc:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8005dd0:	2a01      	cmp	r2, #1
{
 8005dd2:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005dd4:	d005      	beq.n	8005de2 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005dd6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005dd8:	f042 0204 	orr.w	r2, r2, #4
 8005ddc:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005dde:	2001      	movs	r0, #1
}
 8005de0:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005de2:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005dea:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005dec:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8005df4:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005df6:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop

08005dfc <HAL_FDCAN_GetRxMessage>:
{
 8005dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005dfe:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8005e02:	2c02      	cmp	r4, #2
 8005e04:	d10c      	bne.n	8005e20 <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e06:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e08:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e0a:	d00f      	beq.n	8005e2c <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005e0c:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 8005e10:	0724      	lsls	r4, r4, #28
 8005e12:	d15c      	bne.n	8005ece <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e14:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1a:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8005e1c:	2001      	movs	r0, #1
}
 8005e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e20:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005e22:	f043 0308 	orr.w	r3, r3, #8
 8005e26:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005e28:	2001      	movs	r0, #1
}
 8005e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e2c:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 8005e30:	0725      	lsls	r5, r4, #28
 8005e32:	d0ef      	beq.n	8005e14 <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005e34:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005e38:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005e3a:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005e3e:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8005e42:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005e46:	683c      	ldr	r4, [r7, #0]
 8005e48:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8005e4c:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005e4e:	2c00      	cmp	r4, #0
 8005e50:	d14c      	bne.n	8005eec <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005e52:	683c      	ldr	r4, [r7, #0]
 8005e54:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8005e58:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e5a:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005e5c:	f8df c094 	ldr.w	ip, [pc, #148]	; 8005ef4 <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e60:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8005e64:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005e66:	683c      	ldr	r4, [r7, #0]
 8005e68:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8005e6c:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005e6e:	88bc      	ldrh	r4, [r7, #4]
 8005e70:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005e72:	687c      	ldr	r4, [r7, #4]
 8005e74:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8005e78:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005e7a:	687d      	ldr	r5, [r7, #4]
 8005e7c:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8005e80:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005e82:	687d      	ldr	r5, [r7, #4]
 8005e84:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8005e88:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005e8a:	79fd      	ldrb	r5, [r7, #7]
 8005e8c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005e90:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005e92:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005e94:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005e96:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005e9a:	0fed      	lsrs	r5, r5, #31
 8005e9c:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005e9e:	b174      	cbz	r4, 8005ebe <HAL_FDCAN_GetRxMessage+0xc2>
 8005ea0:	1e5d      	subs	r5, r3, #1
 8005ea2:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8005eaa:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005eae:	89d6      	ldrh	r6, [r2, #14]
 8005eb0:	3b06      	subs	r3, #6
 8005eb2:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8005eb6:	1bdb      	subs	r3, r3, r7
 8005eb8:	429e      	cmp	r6, r3
 8005eba:	d8f3      	bhi.n	8005ea4 <HAL_FDCAN_GetRxMessage+0xa8>
 8005ebc:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ebe:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8005ec0:	bf0c      	ite	eq
 8005ec2:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8005ec6:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 8005eca:	2000      	movs	r0, #0
}
 8005ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005ece:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005ed2:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005ed4:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005ed8:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8005edc:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005ee0:	683c      	ldr	r4, [r7, #0]
 8005ee2:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8005ee6:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005ee8:	2c00      	cmp	r4, #0
 8005eea:	d0b2      	beq.n	8005e52 <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005eec:	683c      	ldr	r4, [r7, #0]
 8005eee:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8005ef2:	e7b1      	b.n	8005e58 <HAL_FDCAN_GetRxMessage+0x5c>
 8005ef4:	0800f4d8 	.word	0x0800f4d8

08005ef8 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ef8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005efc:	3b01      	subs	r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d905      	bls.n	8005f0e <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005f02:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005f04:	f043 0302 	orr.w	r3, r3, #2
 8005f08:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005f0a:	2001      	movs	r0, #1
}
 8005f0c:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005f0e:	6803      	ldr	r3, [r0, #0]
{
 8005f10:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005f12:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005f16:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005f18:	d03d      	beq.n	8005f96 <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005f1a:	07c4      	lsls	r4, r0, #31
 8005f1c:	d43b      	bmi.n	8005f96 <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005f1e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8005f20:	f044 0401 	orr.w	r4, r4, #1
 8005f24:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005f26:	b1cd      	cbz	r5, 8005f5c <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f28:	07c5      	lsls	r5, r0, #31
 8005f2a:	d517      	bpl.n	8005f5c <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005f2c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005f2e:	f040 0002 	orr.w	r0, r0, #2
 8005f32:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005f34:	060c      	lsls	r4, r1, #24
 8005f36:	d504      	bpl.n	8005f42 <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005f38:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8005f3c:	4310      	orrs	r0, r2
 8005f3e:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005f42:	05c8      	lsls	r0, r1, #23
 8005f44:	d504      	bpl.n	8005f50 <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005f46:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005f4a:	4302      	orrs	r2, r0
 8005f4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f52:	4311      	orrs	r1, r2
    return HAL_OK;
 8005f54:	2000      	movs	r0, #0
}
 8005f56:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005f58:	6559      	str	r1, [r3, #84]	; 0x54
}
 8005f5a:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f5c:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005f60:	d001      	beq.n	8005f66 <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f62:	0784      	lsls	r4, r0, #30
 8005f64:	d4e2      	bmi.n	8005f2c <HAL_FDCAN_ActivateNotification+0x34>
 8005f66:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005f6a:	d131      	bne.n	8005fd0 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f6c:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005f70:	d001      	beq.n	8005f76 <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f72:	0704      	lsls	r4, r0, #28
 8005f74:	d4da      	bmi.n	8005f2c <HAL_FDCAN_ActivateNotification+0x34>
 8005f76:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005f7a:	d001      	beq.n	8005f80 <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005f7c:	06c5      	lsls	r5, r0, #27
 8005f7e:	d4d5      	bmi.n	8005f2c <HAL_FDCAN_ActivateNotification+0x34>
 8005f80:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005f84:	d001      	beq.n	8005f8a <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005f86:	0684      	lsls	r4, r0, #26
 8005f88:	d4d0      	bmi.n	8005f2c <HAL_FDCAN_ActivateNotification+0x34>
 8005f8a:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005f8e:	d0d1      	beq.n	8005f34 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005f90:	0645      	lsls	r5, r0, #25
 8005f92:	d5cf      	bpl.n	8005f34 <HAL_FDCAN_ActivateNotification+0x3c>
 8005f94:	e7ca      	b.n	8005f2c <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005f96:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005f9a:	d001      	beq.n	8005fa0 <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005f9c:	0784      	lsls	r4, r0, #30
 8005f9e:	d5be      	bpl.n	8005f1e <HAL_FDCAN_ActivateNotification+0x26>
 8005fa0:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005fa4:	d117      	bne.n	8005fd6 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005fa6:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005faa:	d001      	beq.n	8005fb0 <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005fac:	0704      	lsls	r4, r0, #28
 8005fae:	d5b6      	bpl.n	8005f1e <HAL_FDCAN_ActivateNotification+0x26>
 8005fb0:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005fb4:	d001      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005fb6:	06c4      	lsls	r4, r0, #27
 8005fb8:	d5b1      	bpl.n	8005f1e <HAL_FDCAN_ActivateNotification+0x26>
 8005fba:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005fbe:	d001      	beq.n	8005fc4 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005fc0:	0684      	lsls	r4, r0, #26
 8005fc2:	d5ac      	bpl.n	8005f1e <HAL_FDCAN_ActivateNotification+0x26>
 8005fc4:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005fc8:	d0ad      	beq.n	8005f26 <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005fca:	0644      	lsls	r4, r0, #25
 8005fcc:	d4ab      	bmi.n	8005f26 <HAL_FDCAN_ActivateNotification+0x2e>
 8005fce:	e7a6      	b.n	8005f1e <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005fd0:	0745      	lsls	r5, r0, #29
 8005fd2:	d4ab      	bmi.n	8005f2c <HAL_FDCAN_ActivateNotification+0x34>
 8005fd4:	e7ca      	b.n	8005f6c <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005fd6:	0744      	lsls	r4, r0, #29
 8005fd8:	d5a1      	bpl.n	8005f1e <HAL_FDCAN_ActivateNotification+0x26>
 8005fda:	e7e4      	b.n	8005fa6 <HAL_FDCAN_ActivateNotification+0xae>

08005fdc <HAL_FDCAN_TxEventFifoCallback>:
}
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop

08005fe0 <HAL_FDCAN_RxFifo0Callback>:
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop

08005fe4 <HAL_FDCAN_RxFifo1Callback>:
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <HAL_FDCAN_TxFifoEmptyCallback>:
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop

08005fec <HAL_FDCAN_TxBufferCompleteCallback>:
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop

08005ff0 <HAL_FDCAN_TxBufferAbortCallback>:
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop

08005ff4 <HAL_FDCAN_TimestampWraparoundCallback>:
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop

08005ff8 <HAL_FDCAN_TimeoutOccurredCallback>:
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop

08005ffc <HAL_FDCAN_HighPriorityMessageCallback>:
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop

08006000 <HAL_FDCAN_ErrorCallback>:
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop

08006004 <HAL_FDCAN_ErrorStatusCallback>:
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop

08006008 <HAL_FDCAN_IRQHandler>:
{
 8006008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800600c:	6803      	ldr	r3, [r0, #0]
 800600e:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006012:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006016:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 800601a:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800601c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 800601e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006020:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006022:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006026:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006028:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 800602c:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 800602e:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006032:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8006036:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 800603a:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800603c:	0652      	lsls	r2, r2, #25
{
 800603e:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006040:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006044:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006048:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 800604c:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006050:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006054:	d502      	bpl.n	800605c <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006056:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006058:	0651      	lsls	r1, r2, #25
 800605a:	d473      	bmi.n	8006144 <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800605c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800605e:	05d2      	lsls	r2, r2, #23
 8006060:	d502      	bpl.n	8006068 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006064:	05d0      	lsls	r0, r2, #23
 8006066:	d45d      	bmi.n	8006124 <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 8006068:	f1b9 0f00 	cmp.w	r9, #0
 800606c:	d14a      	bne.n	8006104 <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 800606e:	f1b8 0f00 	cmp.w	r8, #0
 8006072:	d137      	bne.n	80060e4 <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 8006074:	2f00      	cmp	r7, #0
 8006076:	d13e      	bne.n	80060f6 <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800607a:	0591      	lsls	r1, r2, #22
 800607c:	d502      	bpl.n	8006084 <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800607e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006080:	0592      	lsls	r2, r2, #22
 8006082:	d475      	bmi.n	8006170 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006086:	0617      	lsls	r7, r2, #24
 8006088:	d502      	bpl.n	8006090 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800608a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800608c:	0610      	lsls	r0, r2, #24
 800608e:	d477      	bmi.n	8006180 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006092:	0491      	lsls	r1, r2, #18
 8006094:	d502      	bpl.n	800609c <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006098:	0492      	lsls	r2, r2, #18
 800609a:	d459      	bmi.n	8006150 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800609c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609e:	0417      	lsls	r7, r2, #16
 80060a0:	d502      	bpl.n	80060a8 <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80060a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060a4:	0410      	lsls	r0, r2, #16
 80060a6:	d45b      	bmi.n	8006160 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80060a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060aa:	0451      	lsls	r1, r2, #17
 80060ac:	d509      	bpl.n	80060c2 <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80060ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b0:	0452      	lsls	r2, r2, #17
 80060b2:	d506      	bpl.n	80060c2 <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80060b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060b8:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80060ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80060bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060c0:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80060c2:	b94e      	cbnz	r6, 80060d8 <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 80060c4:	b125      	cbz	r5, 80060d0 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80060ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060cc:	431d      	orrs	r5, r3
 80060ce:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80060d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80060d2:	bb13      	cbnz	r3, 800611a <HAL_FDCAN_IRQHandler+0x112>
}
 80060d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80060d8:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80060da:	4631      	mov	r1, r6
 80060dc:	4620      	mov	r0, r4
 80060de:	f7ff ff91 	bl	8006004 <HAL_FDCAN_ErrorStatusCallback>
 80060e2:	e7ef      	b.n	80060c4 <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80060e4:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80060e8:	4641      	mov	r1, r8
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7ff ff78 	bl	8005fe0 <HAL_FDCAN_RxFifo0Callback>
 80060f0:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 80060f2:	2f00      	cmp	r7, #0
 80060f4:	d0c0      	beq.n	8006078 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80060f6:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80060f8:	4639      	mov	r1, r7
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff ff72 	bl	8005fe4 <HAL_FDCAN_RxFifo1Callback>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	e7b9      	b.n	8006078 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006104:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006108:	4649      	mov	r1, r9
 800610a:	4620      	mov	r0, r4
 800610c:	f7ff ff66 	bl	8005fdc <HAL_FDCAN_TxEventFifoCallback>
 8006110:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	d0ad      	beq.n	8006074 <HAL_FDCAN_IRQHandler+0x6c>
 8006118:	e7e4      	b.n	80060e4 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 800611a:	4620      	mov	r0, r4
 800611c:	f7ff ff70 	bl	8006000 <HAL_FDCAN_ErrorCallback>
}
 8006120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006124:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006128:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800612c:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006130:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006132:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff ff5b 	bl	8005ff0 <HAL_FDCAN_TxBufferAbortCallback>
 800613a:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	d095      	beq.n	800606e <HAL_FDCAN_IRQHandler+0x66>
 8006142:	e7df      	b.n	8006104 <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006144:	2240      	movs	r2, #64	; 0x40
 8006146:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006148:	f7ff ff58 	bl	8005ffc <HAL_FDCAN_HighPriorityMessageCallback>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	e785      	b.n	800605c <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006150:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006154:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006156:	4620      	mov	r0, r4
 8006158:	f7ff ff4c 	bl	8005ff4 <HAL_FDCAN_TimestampWraparoundCallback>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	e79d      	b.n	800609c <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006160:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006164:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006166:	4620      	mov	r0, r4
 8006168:	f7ff ff46 	bl	8005ff8 <HAL_FDCAN_TimeoutOccurredCallback>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	e79b      	b.n	80060a8 <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006174:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006176:	4620      	mov	r0, r4
 8006178:	f7ff ff36 	bl	8005fe8 <HAL_FDCAN_TxFifoEmptyCallback>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	e781      	b.n	8006084 <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006180:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006184:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006188:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800618a:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800618e:	4620      	mov	r0, r4
 8006190:	f7ff ff2c 	bl	8005fec <HAL_FDCAN_TxBufferCompleteCallback>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	e77b      	b.n	8006090 <HAL_FDCAN_IRQHandler+0x88>

08006198 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800619c:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80062f0 <HAL_FLASH_Program+0x158>
 80061a0:	f899 4000 	ldrb.w	r4, [r9]
 80061a4:	2c01      	cmp	r4, #1
 80061a6:	d04f      	beq.n	8006248 <HAL_FLASH_Program+0xb0>
 80061a8:	469b      	mov	fp, r3
 80061aa:	2301      	movs	r3, #1
 80061ac:	4682      	mov	sl, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	4690      	mov	r8, r2
 80061b2:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80061b6:	f7fe fb39 	bl	800482c <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80061ba:	4e4c      	ldr	r6, [pc, #304]	; (80062ec <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 80061bc:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80061be:	e005      	b.n	80061cc <HAL_FLASH_Program+0x34>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80061c0:	f7fe fb34 	bl	800482c <HAL_GetTick>
 80061c4:	1b44      	subs	r4, r0, r5
 80061c6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80061ca:	d837      	bhi.n	800623c <HAL_FLASH_Program+0xa4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80061cc:	6933      	ldr	r3, [r6, #16]
 80061ce:	03d8      	lsls	r0, r3, #15
 80061d0:	d4f6      	bmi.n	80061c0 <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80061d2:	6934      	ldr	r4, [r6, #16]
 80061d4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 80061d8:	401c      	ands	r4, r3
 80061da:	d147      	bne.n	800626c <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80061dc:	6933      	ldr	r3, [r6, #16]
 80061de:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80061e0:	bf44      	itt	mi
 80061e2:	2301      	movmi	r3, #1
 80061e4:	6133      	strmi	r3, [r6, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c9 3004 	str.w	r3, [r9, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80061ec:	f1ba 0f00 	cmp.w	sl, #0
 80061f0:	d02d      	beq.n	800624e <HAL_FLASH_Program+0xb6>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80061f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d940      	bls.n	800627c <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 80061fa:	f7fe fb17 	bl	800482c <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80061fe:	4e3b      	ldr	r6, [pc, #236]	; (80062ec <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8006200:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006202:	e005      	b.n	8006210 <HAL_FLASH_Program+0x78>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006204:	f7fe fb12 	bl	800482c <HAL_GetTick>
 8006208:	1b40      	subs	r0, r0, r5
 800620a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800620e:	d82b      	bhi.n	8006268 <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006210:	6933      	ldr	r3, [r6, #16]
 8006212:	03db      	lsls	r3, r3, #15
 8006214:	d4f6      	bmi.n	8006204 <HAL_FLASH_Program+0x6c>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006216:	6933      	ldr	r3, [r6, #16]
 8006218:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 800621c:	4013      	ands	r3, r2
 800621e:	d152      	bne.n	80062c6 <HAL_FLASH_Program+0x12e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006220:	6930      	ldr	r0, [r6, #16]
 8006222:	f010 0001 	ands.w	r0, r0, #1
 8006226:	d002      	beq.n	800622e <HAL_FLASH_Program+0x96>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006228:	2201      	movs	r2, #1
 800622a:	4618      	mov	r0, r3
 800622c:	6132      	str	r2, [r6, #16]
    if (prog_bit != 0U)
 800622e:	b134      	cbz	r4, 800623e <HAL_FLASH_Program+0xa6>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006230:	4a2e      	ldr	r2, [pc, #184]	; (80062ec <HAL_FLASH_Program+0x154>)
 8006232:	6953      	ldr	r3, [r2, #20]
 8006234:	ea23 0404 	bic.w	r4, r3, r4
 8006238:	6154      	str	r4, [r2, #20]
 800623a:	e000      	b.n	800623e <HAL_FLASH_Program+0xa6>
 800623c:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 800623e:	2300      	movs	r3, #0
 8006240:	f889 3000 	strb.w	r3, [r9]
}
 8006244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8006248:	2002      	movs	r0, #2
}
 800624a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800624e:	4a27      	ldr	r2, [pc, #156]	; (80062ec <HAL_FLASH_Program+0x154>)
 8006250:	6953      	ldr	r3, [r2, #20]
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006258:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 800625c:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8006260:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006262:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 8006266:	e7c8      	b.n	80061fa <HAL_FLASH_Program+0x62>
      return HAL_TIMEOUT;
 8006268:	2003      	movs	r0, #3
 800626a:	e7e0      	b.n	800622e <HAL_FLASH_Program+0x96>
    pFlash.ErrorCode |= error;
 800626c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006270:	4323      	orrs	r3, r4
 8006272:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 8006276:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8006278:	6134      	str	r4, [r6, #16]
  if (status == HAL_OK)
 800627a:	e7e0      	b.n	800623e <HAL_FLASH_Program+0xa6>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800627c:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <HAL_FLASH_Program+0x154>)
 800627e:	6953      	ldr	r3, [r2, #20]
 8006280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006284:	6153      	str	r3, [r2, #20]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006286:	4643      	mov	r3, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006288:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800628c:	b672      	cpsid	i
 800628e:	1dfa      	adds	r2, r7, #7
 8006290:	eba2 0208 	sub.w	r2, r2, r8
 8006294:	2a0e      	cmp	r2, #14
 8006296:	d91e      	bls.n	80062d6 <HAL_FLASH_Program+0x13e>
 8006298:	ea47 0208 	orr.w	r2, r7, r8
 800629c:	0752      	lsls	r2, r2, #29
 800629e:	d11a      	bne.n	80062d6 <HAL_FLASH_Program+0x13e>
 80062a0:	1aff      	subs	r7, r7, r3
 80062a2:	f508 7880 	add.w	r8, r8, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80062a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062aa:	18fa      	adds	r2, r7, r3
 80062ac:	3308      	adds	r3, #8
 80062ae:	4543      	cmp	r3, r8
 80062b0:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 80062b4:	d1f7      	bne.n	80062a6 <HAL_FLASH_Program+0x10e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b6:	f385 8810 	msr	PRIMASK, r5
        prog_bit = FLASH_CR_FSTPG;
 80062ba:	f1ba 0f02 	cmp.w	sl, #2
 80062be:	bf08      	it	eq
 80062c0:	f44f 2480 	moveq.w	r4, #262144	; 0x40000
 80062c4:	e799      	b.n	80061fa <HAL_FLASH_Program+0x62>
    pFlash.ErrorCode |= error;
 80062c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 80062d0:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80062d2:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 80062d4:	e7ab      	b.n	800622e <HAL_FLASH_Program+0x96>
 80062d6:	eba7 0708 	sub.w	r7, r7, r8
 80062da:	f508 7880 	add.w	r8, r8, #256	; 0x100
    *dest_addr = *src_addr;
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	51da      	str	r2, [r3, r7]
    src_addr++;
 80062e2:	3304      	adds	r3, #4
  while (row_index != 0U);
 80062e4:	4598      	cmp	r8, r3
 80062e6:	d1fa      	bne.n	80062de <HAL_FLASH_Program+0x146>
 80062e8:	e7e5      	b.n	80062b6 <HAL_FLASH_Program+0x11e>
 80062ea:	bf00      	nop
 80062ec:	40022000 	.word	0x40022000
 80062f0:	2000000c 	.word	0x2000000c

080062f4 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <HAL_FLASH_Unlock+0x1c>)
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	2a00      	cmp	r2, #0
 80062fa:	db01      	blt.n	8006300 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2000      	movs	r0, #0
}
 80062fe:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006300:	4904      	ldr	r1, [pc, #16]	; (8006314 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006302:	4a05      	ldr	r2, [pc, #20]	; (8006318 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006304:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006306:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006308:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	0fc0      	lsrs	r0, r0, #31
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40022000 	.word	0x40022000
 8006314:	45670123 	.word	0x45670123
 8006318:	cdef89ab 	.word	0xcdef89ab

0800631c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800631c:	4b04      	ldr	r3, [pc, #16]	; (8006330 <HAL_FLASH_Lock+0x14>)
 800631e:	695a      	ldr	r2, [r3, #20]
 8006320:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006324:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006326:	6958      	ldr	r0, [r3, #20]
}
 8006328:	43c0      	mvns	r0, r0
 800632a:	0fc0      	lsrs	r0, r0, #31
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40022000 	.word	0x40022000

08006334 <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <HAL_FLASH_OB_Unlock+0x1c>)
 8006336:	6958      	ldr	r0, [r3, #20]
 8006338:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800633c:	d006      	beq.n	800634c <HAL_FLASH_OB_Unlock+0x18>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800633e:	4905      	ldr	r1, [pc, #20]	; (8006354 <HAL_FLASH_OB_Unlock+0x20>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8006340:	4a05      	ldr	r2, [pc, #20]	; (8006358 <HAL_FLASH_OB_Unlock+0x24>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8006342:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8006344:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8006346:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8006348:	f3c0 7080 	ubfx	r0, r0, #30, #1
}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40022000 	.word	0x40022000
 8006354:	08192a3b 	.word	0x08192a3b
 8006358:	4c5d6e7f 	.word	0x4c5d6e7f

0800635c <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_FLASH_OB_Lock+0x18>)
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006364:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8006366:	6958      	ldr	r0, [r3, #20]
 8006368:	f080 4080 	eor.w	r0, r0, #1073741824	; 0x40000000
}
 800636c:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40022000 	.word	0x40022000

08006378 <FLASH_WaitForLastOperation>:
{
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800637c:	f7fe fa56 	bl	800482c <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006380:	4e10      	ldr	r6, [pc, #64]	; (80063c4 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8006382:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006384:	e004      	b.n	8006390 <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006386:	f7fe fa51 	bl	800482c <HAL_GetTick>
 800638a:	1b03      	subs	r3, r0, r4
 800638c:	42ab      	cmp	r3, r5
 800638e:	d80f      	bhi.n	80063b0 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006390:	6933      	ldr	r3, [r6, #16]
 8006392:	03db      	lsls	r3, r3, #15
 8006394:	d4f7      	bmi.n	8006386 <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006396:	6933      	ldr	r3, [r6, #16]
 8006398:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 800639c:	4013      	ands	r3, r2
 800639e:	d109      	bne.n	80063b4 <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80063a0:	6930      	ldr	r0, [r6, #16]
 80063a2:	f010 0001 	ands.w	r0, r0, #1
 80063a6:	d002      	beq.n	80063ae <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80063a8:	2201      	movs	r2, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	6132      	str	r2, [r6, #16]
}
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80063b0:	2003      	movs	r0, #3
}
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 80063b4:	4904      	ldr	r1, [pc, #16]	; (80063c8 <FLASH_WaitForLastOperation+0x50>)
 80063b6:	684a      	ldr	r2, [r1, #4]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 80063bc:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80063be:	6133      	str	r3, [r6, #16]
}
 80063c0:	bd70      	pop	{r4, r5, r6, pc}
 80063c2:	bf00      	nop
 80063c4:	40022000 	.word	0x40022000
 80063c8:	2000000c 	.word	0x2000000c

080063cc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80063d0:	4f67      	ldr	r7, [pc, #412]	; (8006570 <HAL_FLASHEx_Erase+0x1a4>)
 80063d2:	783b      	ldrb	r3, [r7, #0]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d062      	beq.n	800649e <HAL_FLASHEx_Erase+0xd2>
 80063d8:	4682      	mov	sl, r0
 80063da:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063e0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80063e2:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063e4:	f7ff ffc8 	bl	8006378 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 80063e8:	4606      	mov	r6, r0
 80063ea:	b120      	cbz	r0, 80063f6 <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80063ec:	2300      	movs	r3, #0
 80063ee:	703b      	strb	r3, [r7, #0]

  return status;
}
 80063f0:	4630      	mov	r0, r6
 80063f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80063f6:	4b5f      	ldr	r3, [pc, #380]	; (8006574 <HAL_FLASHEx_Erase+0x1a8>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80063f8:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006400:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006402:	d150      	bne.n	80064a6 <HAL_FLASHEx_Erase+0xda>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006404:	0554      	lsls	r4, r2, #21
 8006406:	f140 80a1 	bpl.w	800654c <HAL_FLASHEx_Erase+0x180>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800640a:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800640c:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006414:	7739      	strb	r1, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006416:	f8da 3000 	ldr.w	r3, [sl]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d050      	beq.n	80064c0 <HAL_FLASHEx_Erase+0xf4>
      *PageError = 0xFFFFFFFFU;
 800641e:	f04f 33ff 	mov.w	r3, #4294967295
 8006422:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006426:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 800642a:	442b      	add	r3, r5
 800642c:	429d      	cmp	r5, r3
 800642e:	d261      	bcs.n	80064f4 <HAL_FLASHEx_Erase+0x128>
{
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8006430:	4c50      	ldr	r4, [pc, #320]	; (8006574 <HAL_FLASHEx_Erase+0x1a8>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006432:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006578 <HAL_FLASHEx_Erase+0x1ac>
 8006436:	e023      	b.n	8006480 <HAL_FLASHEx_Erase+0xb4>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006438:	6963      	ldr	r3, [r4, #20]
 800643a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800643e:	6163      	str	r3, [r4, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006440:	6962      	ldr	r2, [r4, #20]
 8006442:	00eb      	lsls	r3, r5, #3
 8006444:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 8006448:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800644c:	4313      	orrs	r3, r2
 800644e:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006450:	6963      	ldr	r3, [r4, #20]
 8006452:	f043 0302 	orr.w	r3, r3, #2
 8006456:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006458:	6963      	ldr	r3, [r4, #20]
 800645a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645e:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006464:	f7ff ff88 	bl	8006378 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006468:	6963      	ldr	r3, [r4, #20]
 800646a:	ea03 0309 	and.w	r3, r3, r9
 800646e:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8006470:	2800      	cmp	r0, #0
 8006472:	d165      	bne.n	8006540 <HAL_FLASHEx_Erase+0x174>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006474:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8006478:	3501      	adds	r5, #1
 800647a:	4413      	add	r3, r2
 800647c:	42ab      	cmp	r3, r5
 800647e:	d939      	bls.n	80064f4 <HAL_FLASHEx_Erase+0x128>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8006480:	6a23      	ldr	r3, [r4, #32]
 8006482:	025b      	lsls	r3, r3, #9
 8006484:	d5d8      	bpl.n	8006438 <HAL_FLASHEx_Erase+0x6c>
    if ((Banks & FLASH_BANK_1) != 0U)
 8006486:	f8da 3004 	ldr.w	r3, [sl, #4]
 800648a:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800648e:	6963      	ldr	r3, [r4, #20]
 8006490:	bf14      	ite	ne
 8006492:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006496:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800649a:	6163      	str	r3, [r4, #20]
 800649c:	e7d0      	b.n	8006440 <HAL_FLASHEx_Erase+0x74>
  __HAL_LOCK(&pFlash);
 800649e:	2602      	movs	r6, #2
}
 80064a0:	4630      	mov	r0, r6
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80064a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064aa:	601a      	str	r2, [r3, #0]
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	0555      	lsls	r5, r2, #21
 80064b0:	d54a      	bpl.n	8006548 <HAL_FLASHEx_Erase+0x17c>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80064b2:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80064b4:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80064b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ba:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80064bc:	7739      	strb	r1, [r7, #28]
 80064be:	e7aa      	b.n	8006416 <HAL_FLASHEx_Erase+0x4a>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80064c0:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <HAL_FLASHEx_Erase+0x1a8>)
 80064c2:	6a1a      	ldr	r2, [r3, #32]
 80064c4:	0250      	lsls	r0, r2, #9
 80064c6:	d443      	bmi.n	8006550 <HAL_FLASHEx_Erase+0x184>
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ce:	f042 0204 	orr.w	r2, r2, #4
 80064d2:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80064d4:	4c27      	ldr	r4, [pc, #156]	; (8006574 <HAL_FLASHEx_Erase+0x1a8>)
 80064d6:	6963      	ldr	r3, [r4, #20]
 80064d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064dc:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064e2:	f7ff ff49 	bl	8006378 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80064e6:	6963      	ldr	r3, [r4, #20]
 80064e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ec:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064f0:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80064f2:	6163      	str	r3, [r4, #20]
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80064f4:	7f3b      	ldrb	r3, [r7, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80064f6:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80064fa:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80064fc:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80064fe:	d10c      	bne.n	800651a <HAL_FLASHEx_Erase+0x14e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006500:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <HAL_FLASHEx_Erase+0x1a8>)
 8006502:	6811      	ldr	r1, [r2, #0]
 8006504:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006508:	6011      	str	r1, [r2, #0]
 800650a:	6811      	ldr	r1, [r2, #0]
 800650c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006510:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006512:	6811      	ldr	r1, [r2, #0]
 8006514:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006518:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800651a:	3b02      	subs	r3, #2
 800651c:	2b01      	cmp	r3, #1
 800651e:	d80c      	bhi.n	800653a <HAL_FLASHEx_Erase+0x16e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <HAL_FLASHEx_Erase+0x1a8>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006530:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006538:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800653a:	2300      	movs	r3, #0
 800653c:	773b      	strb	r3, [r7, #28]
}
 800653e:	e755      	b.n	80063ec <HAL_FLASHEx_Erase+0x20>
          *PageError = page_index;
 8006540:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006544:	4606      	mov	r6, r0
          break;
 8006546:	e7d5      	b.n	80064f4 <HAL_FLASHEx_Erase+0x128>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006548:	773c      	strb	r4, [r7, #28]
 800654a:	e764      	b.n	8006416 <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800654c:	7738      	strb	r0, [r7, #28]
 800654e:	e762      	b.n	8006416 <HAL_FLASHEx_Erase+0x4a>
      FLASH_MassErase(pEraseInit->Banks);
 8006550:	f8da 2004 	ldr.w	r2, [sl, #4]
    if ((Banks & FLASH_BANK_1) != 0U)
 8006554:	07d1      	lsls	r1, r2, #31
 8006556:	d503      	bpl.n	8006560 <HAL_FLASHEx_Erase+0x194>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006558:	6959      	ldr	r1, [r3, #20]
 800655a:	f041 0104 	orr.w	r1, r1, #4
 800655e:	6159      	str	r1, [r3, #20]
    if ((Banks & FLASH_BANK_2) != 0U)
 8006560:	0792      	lsls	r2, r2, #30
 8006562:	d5b7      	bpl.n	80064d4 <HAL_FLASHEx_Erase+0x108>
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8006564:	4a03      	ldr	r2, [pc, #12]	; (8006574 <HAL_FLASHEx_Erase+0x1a8>)
 8006566:	6953      	ldr	r3, [r2, #20]
 8006568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656c:	6153      	str	r3, [r2, #20]
 800656e:	e7b1      	b.n	80064d4 <HAL_FLASHEx_Erase+0x108>
 8006570:	2000000c 	.word	0x2000000c
 8006574:	40022000 	.word	0x40022000
 8006578:	fffffc05 	.word	0xfffffc05

0800657c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006580:	680e      	ldr	r6, [r1, #0]
{
 8006582:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006584:	2e00      	cmp	r6, #0
 8006586:	f000 808b 	beq.w	80066a0 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800658a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8006760 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 800658e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006590:	2201      	movs	r2, #1
 8006592:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8006596:	ea14 0c06 	ands.w	ip, r4, r6
 800659a:	d07c      	beq.n	8006696 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800659c:	684d      	ldr	r5, [r1, #4]
 800659e:	f025 0a10 	bic.w	sl, r5, #16
 80065a2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80065a6:	2a01      	cmp	r2, #1
 80065a8:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065ac:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065b0:	d979      	bls.n	80066a6 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 80065b2:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065b4:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065b6:	fa02 f208 	lsl.w	r2, r2, r8
 80065ba:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065be:	fa04 f408 	lsl.w	r4, r4, r8
 80065c2:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80065c4:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065c6:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 80065c8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065ca:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065ce:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065d0:	fa02 f208 	lsl.w	r2, r2, r8
 80065d4:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065d6:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 80065d8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065da:	d55c      	bpl.n	8006696 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065dc:	4c5a      	ldr	r4, [pc, #360]	; (8006748 <HAL_GPIO_Init+0x1cc>)
 80065de:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	6622      	str	r2, [r4, #96]	; 0x60
 80065e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80065e8:	f023 0403 	bic.w	r4, r3, #3
 80065ec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80065f0:	f002 0201 	and.w	r2, r2, #1
 80065f4:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80065f8:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065fa:	f003 0203 	and.w	r2, r3, #3
 80065fe:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006602:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006604:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006606:	220f      	movs	r2, #15
 8006608:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800660c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006610:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006614:	d018      	beq.n	8006648 <HAL_GPIO_Init+0xcc>
 8006616:	4a4d      	ldr	r2, [pc, #308]	; (800674c <HAL_GPIO_Init+0x1d0>)
 8006618:	4290      	cmp	r0, r2
 800661a:	f000 8084 	beq.w	8006726 <HAL_GPIO_Init+0x1aa>
 800661e:	4a4c      	ldr	r2, [pc, #304]	; (8006750 <HAL_GPIO_Init+0x1d4>)
 8006620:	4290      	cmp	r0, r2
 8006622:	f000 8085 	beq.w	8006730 <HAL_GPIO_Init+0x1b4>
 8006626:	4a4b      	ldr	r2, [pc, #300]	; (8006754 <HAL_GPIO_Init+0x1d8>)
 8006628:	4290      	cmp	r0, r2
 800662a:	d076      	beq.n	800671a <HAL_GPIO_Init+0x19e>
 800662c:	4a4a      	ldr	r2, [pc, #296]	; (8006758 <HAL_GPIO_Init+0x1dc>)
 800662e:	4290      	cmp	r0, r2
 8006630:	f000 8084 	beq.w	800673c <HAL_GPIO_Init+0x1c0>
 8006634:	4a49      	ldr	r2, [pc, #292]	; (800675c <HAL_GPIO_Init+0x1e0>)
 8006636:	4290      	cmp	r0, r2
 8006638:	bf0c      	ite	eq
 800663a:	f04f 0805 	moveq.w	r8, #5
 800663e:	f04f 0806 	movne.w	r8, #6
 8006642:	fa08 f209 	lsl.w	r2, r8, r9
 8006646:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006648:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 800664a:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800664e:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006652:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8006654:	bf54      	ite	pl
 8006656:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8006658:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 800665c:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8006660:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006664:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8006666:	bf54      	ite	pl
 8006668:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800666a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 800666e:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006672:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006676:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8006678:	bf54      	ite	pl
 800667a:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800667c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8006680:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8006684:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006688:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 800668a:	bf54      	ite	pl
 800668c:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800668e:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 8006692:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8006696:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006698:	fa36 f203 	lsrs.w	r2, r6, r3
 800669c:	f47f af78 	bne.w	8006590 <HAL_GPIO_Init+0x14>
  }
}
 80066a0:	b003      	add	sp, #12
 80066a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80066a6:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066a8:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066ac:	fa02 f208 	lsl.w	r2, r2, r8
 80066b0:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066b4:	68cf      	ldr	r7, [r1, #12]
 80066b6:	fa07 f708 	lsl.w	r7, r7, r8
 80066ba:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80066be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80066c0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066c2:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066c6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066ca:	465c      	mov	r4, fp
 80066cc:	409c      	lsls	r4, r3
 80066ce:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 80066d0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80066d2:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066d4:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066d8:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066dc:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066e0:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066e4:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 80066e8:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066ea:	f47f af6d 	bne.w	80065c8 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 80066ee:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80066f2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066f6:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80066fa:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066fe:	0092      	lsls	r2, r2, #2
 8006700:	f04f 0a0f 	mov.w	sl, #15
 8006704:	fa0a fb02 	lsl.w	fp, sl, r2
 8006708:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800670c:	690c      	ldr	r4, [r1, #16]
 800670e:	4094      	lsls	r4, r2
 8006710:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8006714:	f8c9 4020 	str.w	r4, [r9, #32]
 8006718:	e756      	b.n	80065c8 <HAL_GPIO_Init+0x4c>
 800671a:	f04f 0803 	mov.w	r8, #3
 800671e:	fa08 f209 	lsl.w	r2, r8, r9
 8006722:	4317      	orrs	r7, r2
 8006724:	e790      	b.n	8006648 <HAL_GPIO_Init+0xcc>
 8006726:	2201      	movs	r2, #1
 8006728:	fa02 f209 	lsl.w	r2, r2, r9
 800672c:	4317      	orrs	r7, r2
 800672e:	e78b      	b.n	8006648 <HAL_GPIO_Init+0xcc>
 8006730:	f04f 0802 	mov.w	r8, #2
 8006734:	fa08 f209 	lsl.w	r2, r8, r9
 8006738:	4317      	orrs	r7, r2
 800673a:	e785      	b.n	8006648 <HAL_GPIO_Init+0xcc>
 800673c:	f04f 0804 	mov.w	r8, #4
 8006740:	fa08 f209 	lsl.w	r2, r8, r9
 8006744:	4317      	orrs	r7, r2
 8006746:	e77f      	b.n	8006648 <HAL_GPIO_Init+0xcc>
 8006748:	40021000 	.word	0x40021000
 800674c:	48000400 	.word	0x48000400
 8006750:	48000800 	.word	0x48000800
 8006754:	48000c00 	.word	0x48000c00
 8006758:	48001000 	.word	0x48001000
 800675c:	48001400 	.word	0x48001400
 8006760:	40010400 	.word	0x40010400

08006764 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006764:	b10a      	cbz	r2, 800676a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006766:	6181      	str	r1, [r0, #24]
 8006768:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800676a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop

08006770 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006770:	4a3b      	ldr	r2, [pc, #236]	; (8006860 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8006772:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006774:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006776:	b968      	cbnz	r0, 8006794 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006780:	d014      	beq.n	80067ac <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006782:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800678e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006792:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006794:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006798:	d02f      	beq.n	80067fa <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800679a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800679e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067a2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80067a4:	2000      	movs	r0, #0
}
 80067a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067aa:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067ac:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067b0:	4b2c      	ldr	r3, [pc, #176]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80067b2:	482d      	ldr	r0, [pc, #180]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067b4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80067b8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067bc:	6811      	ldr	r1, [r2, #0]
 80067be:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80067c2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80067c6:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067c8:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ca:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067cc:	2332      	movs	r3, #50	; 0x32
 80067ce:	fb03 f304 	mul.w	r3, r3, r4
 80067d2:	fba0 0303 	umull	r0, r3, r0, r3
 80067d6:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d8:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067da:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067de:	d506      	bpl.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x7e>
 80067e0:	e000      	b.n	80067e4 <HAL_PWREx_ControlVoltageScaling+0x74>
 80067e2:	b123      	cbz	r3, 80067ee <HAL_PWREx_ControlVoltageScaling+0x7e>
 80067e4:	6951      	ldr	r1, [r2, #20]
 80067e6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80067e8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ec:	d4f9      	bmi.n	80067e2 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067ee:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	055c      	lsls	r4, r3, #21
 80067f4:	d5d6      	bpl.n	80067a4 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 80067f6:	2003      	movs	r0, #3
 80067f8:	e7c9      	b.n	800678e <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006802:	d009      	beq.n	8006818 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006804:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8006808:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800680c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006810:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006812:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8006816:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006818:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800681c:	4b11      	ldr	r3, [pc, #68]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800681e:	4812      	ldr	r0, [pc, #72]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006820:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006824:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006828:	6811      	ldr	r1, [r2, #0]
 800682a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800682e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006832:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006834:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006836:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006838:	2332      	movs	r3, #50	; 0x32
 800683a:	fb03 f304 	mul.w	r3, r3, r4
 800683e:	fba0 0303 	umull	r0, r3, r0, r3
 8006842:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006844:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006846:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800684a:	d5d0      	bpl.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x7e>
 800684c:	e001      	b.n	8006852 <HAL_PWREx_ControlVoltageScaling+0xe2>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0cd      	beq.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006852:	6951      	ldr	r1, [r2, #20]
 8006854:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006856:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685a:	d5c8      	bpl.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x7e>
 800685c:	e7f7      	b.n	800684e <HAL_PWREx_ControlVoltageScaling+0xde>
 800685e:	bf00      	nop
 8006860:	40007000 	.word	0x40007000
 8006864:	20000000 	.word	0x20000000
 8006868:	431bde83 	.word	0x431bde83

0800686c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800686c:	4a02      	ldr	r2, [pc, #8]	; (8006878 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800686e:	6893      	ldr	r3, [r2, #8]
 8006870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006874:	6093      	str	r3, [r2, #8]
}
 8006876:	4770      	bx	lr
 8006878:	40007000 	.word	0x40007000

0800687c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800687c:	2800      	cmp	r0, #0
 800687e:	f000 81c3 	beq.w	8006c08 <HAL_RCC_OscConfig+0x38c>
{
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006886:	6803      	ldr	r3, [r0, #0]
 8006888:	07d9      	lsls	r1, r3, #31
{
 800688a:	b082      	sub	sp, #8
 800688c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800688e:	d52d      	bpl.n	80068ec <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006890:	49b5      	ldr	r1, [pc, #724]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 8006892:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006894:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006896:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800689a:	2a0c      	cmp	r2, #12
 800689c:	f000 810a 	beq.w	8006ab4 <HAL_RCC_OscConfig+0x238>
 80068a0:	2a08      	cmp	r2, #8
 80068a2:	f000 810c 	beq.w	8006abe <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a6:	6863      	ldr	r3, [r4, #4]
 80068a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ac:	f000 8133 	beq.w	8006b16 <HAL_RCC_OscConfig+0x29a>
 80068b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068b4:	f000 819b 	beq.w	8006bee <HAL_RCC_OscConfig+0x372>
 80068b8:	4dab      	ldr	r5, [pc, #684]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 80068ba:	682a      	ldr	r2, [r5, #0]
 80068bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	682a      	ldr	r2, [r5, #0]
 80068c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068c8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 8128 	bne.w	8006b20 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fd ffac 	bl	800482c <HAL_GetTick>
 80068d4:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068d6:	e005      	b.n	80068e4 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fd ffa8 	bl	800482c <HAL_GetTick>
 80068dc:	1b80      	subs	r0, r0, r6
 80068de:	2864      	cmp	r0, #100	; 0x64
 80068e0:	f200 813b 	bhi.w	8006b5a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	039f      	lsls	r7, r3, #14
 80068e8:	d4f6      	bmi.n	80068d8 <HAL_RCC_OscConfig+0x5c>
 80068ea:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ec:	079e      	lsls	r6, r3, #30
 80068ee:	d528      	bpl.n	8006942 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f0:	4a9d      	ldr	r2, [pc, #628]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 80068f2:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f4:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068f6:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068fa:	2b0c      	cmp	r3, #12
 80068fc:	f000 80ec 	beq.w	8006ad8 <HAL_RCC_OscConfig+0x25c>
 8006900:	2b04      	cmp	r3, #4
 8006902:	f000 80ee 	beq.w	8006ae2 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006906:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006908:	4d97      	ldr	r5, [pc, #604]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8116 	beq.w	8006b3c <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006916:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006918:	f7fd ff88 	bl	800482c <HAL_GetTick>
 800691c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800691e:	e005      	b.n	800692c <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006920:	f7fd ff84 	bl	800482c <HAL_GetTick>
 8006924:	1b80      	subs	r0, r0, r6
 8006926:	2802      	cmp	r0, #2
 8006928:	f200 8117 	bhi.w	8006b5a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	0558      	lsls	r0, r3, #21
 8006930:	d5f6      	bpl.n	8006920 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006932:	686b      	ldr	r3, [r5, #4]
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800693a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800693e:	606b      	str	r3, [r5, #4]
 8006940:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006942:	071a      	lsls	r2, r3, #28
 8006944:	d519      	bpl.n	800697a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006946:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006948:	4d87      	ldr	r5, [pc, #540]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 809e 	beq.w	8006a8c <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8006950:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fd ff66 	bl	800482c <HAL_GetTick>
 8006960:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006962:	e005      	b.n	8006970 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006964:	f7fd ff62 	bl	800482c <HAL_GetTick>
 8006968:	1b80      	subs	r0, r0, r6
 800696a:	2802      	cmp	r0, #2
 800696c:	f200 80f5 	bhi.w	8006b5a <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006970:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006974:	079f      	lsls	r7, r3, #30
 8006976:	d5f5      	bpl.n	8006964 <HAL_RCC_OscConfig+0xe8>
 8006978:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800697a:	0759      	lsls	r1, r3, #29
 800697c:	d541      	bpl.n	8006a02 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800697e:	4b7a      	ldr	r3, [pc, #488]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 8006980:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006982:	00d2      	lsls	r2, r2, #3
 8006984:	f100 80ed 	bmi.w	8006b62 <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800698a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800698e:	659a      	str	r2, [r3, #88]	; 0x58
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800699a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800699c:	4e73      	ldr	r6, [pc, #460]	; (8006b6c <HAL_RCC_OscConfig+0x2f0>)
 800699e:	6833      	ldr	r3, [r6, #0]
 80069a0:	05df      	lsls	r7, r3, #23
 80069a2:	f140 8113 	bpl.w	8006bcc <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069a6:	68a3      	ldr	r3, [r4, #8]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	f000 80e3 	beq.w	8006b74 <HAL_RCC_OscConfig+0x2f8>
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	f000 8169 	beq.w	8006c86 <HAL_RCC_OscConfig+0x40a>
 80069b4:	4e6c      	ldr	r6, [pc, #432]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 80069b6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80069c2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80069c6:	f022 0204 	bic.w	r2, r2, #4
 80069ca:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f040 80d7 	bne.w	8006b82 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fd ff2a 	bl	800482c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80069dc:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069de:	e005      	b.n	80069ec <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e0:	f7fd ff24 	bl	800482c <HAL_GetTick>
 80069e4:	1bc0      	subs	r0, r0, r7
 80069e6:	4540      	cmp	r0, r8
 80069e8:	f200 80b7 	bhi.w	8006b5a <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069ec:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80069f0:	079a      	lsls	r2, r3, #30
 80069f2:	d4f5      	bmi.n	80069e0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069f4:	b125      	cbz	r5, 8006a00 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f6:	4a5c      	ldr	r2, [pc, #368]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 80069f8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006a00:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a02:	069b      	lsls	r3, r3, #26
 8006a04:	d518      	bpl.n	8006a38 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a06:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a08:	4d57      	ldr	r5, [pc, #348]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80ca 	beq.w	8006ba4 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8006a10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7fd ff06 	bl	800482c <HAL_GetTick>
 8006a20:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a22:	e005      	b.n	8006a30 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a24:	f7fd ff02 	bl	800482c <HAL_GetTick>
 8006a28:	1b80      	subs	r0, r0, r6
 8006a2a:	2802      	cmp	r0, #2
 8006a2c:	f200 8095 	bhi.w	8006b5a <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a30:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006a34:	079f      	lsls	r7, r3, #30
 8006a36:	d5f5      	bpl.n	8006a24 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a38:	69e0      	ldr	r0, [r4, #28]
 8006a3a:	b318      	cbz	r0, 8006a84 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a3c:	4d4a      	ldr	r5, [pc, #296]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 8006a3e:	68ab      	ldr	r3, [r5, #8]
 8006a40:	f003 030c 	and.w	r3, r3, #12
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	f000 812c 	beq.w	8006ca2 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a4a:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a4c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a52:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a54:	f000 80da 	beq.w	8006c0c <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a58:	68eb      	ldr	r3, [r5, #12]
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a60:	68eb      	ldr	r3, [r5, #12]
 8006a62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6a:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6c:	f7fd fede 	bl	800482c <HAL_GetTick>
 8006a70:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a72:	e004      	b.n	8006a7e <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a74:	f7fd feda 	bl	800482c <HAL_GetTick>
 8006a78:	1b00      	subs	r0, r0, r4
 8006a7a:	2802      	cmp	r0, #2
 8006a7c:	d86d      	bhi.n	8006b5a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a7e:	682b      	ldr	r3, [r5, #0]
 8006a80:	019b      	lsls	r3, r3, #6
 8006a82:	d4f7      	bmi.n	8006a74 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006a84:	2000      	movs	r0, #0
}
 8006a86:	b002      	add	sp, #8
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006a8c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006a98:	f7fd fec8 	bl	800482c <HAL_GetTick>
 8006a9c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a9e:	e004      	b.n	8006aaa <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa0:	f7fd fec4 	bl	800482c <HAL_GetTick>
 8006aa4:	1b80      	subs	r0, r0, r6
 8006aa6:	2802      	cmp	r0, #2
 8006aa8:	d857      	bhi.n	8006b5a <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006aaa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006aae:	0798      	lsls	r0, r3, #30
 8006ab0:	d4f6      	bmi.n	8006aa0 <HAL_RCC_OscConfig+0x224>
 8006ab2:	e761      	b.n	8006978 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ab4:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006ab8:	2903      	cmp	r1, #3
 8006aba:	f47f aef4 	bne.w	80068a6 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006abe:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	0392      	lsls	r2, r2, #14
 8006ac4:	f57f af12 	bpl.w	80068ec <HAL_RCC_OscConfig+0x70>
 8006ac8:	6862      	ldr	r2, [r4, #4]
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	f47f af0e 	bne.w	80068ec <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006ad0:	2001      	movs	r0, #1
}
 8006ad2:	b002      	add	sp, #8
 8006ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ad8:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006adc:	2a02      	cmp	r2, #2
 8006ade:	f47f af12 	bne.w	8006906 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae2:	4b21      	ldr	r3, [pc, #132]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	055d      	lsls	r5, r3, #21
 8006ae8:	d502      	bpl.n	8006af0 <HAL_RCC_OscConfig+0x274>
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0ef      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 8006af2:	6920      	ldr	r0, [r4, #16]
 8006af4:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006af6:	491e      	ldr	r1, [pc, #120]	; (8006b70 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006afc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006b00:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b02:	6808      	ldr	r0, [r1, #0]
 8006b04:	f7fd fe50 	bl	80047a8 <HAL_InitTick>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d1e1      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x254>
 8006b0c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b0e:	071a      	lsls	r2, r3, #28
 8006b10:	f57f af33 	bpl.w	800697a <HAL_RCC_OscConfig+0xfe>
 8006b14:	e717      	b.n	8006946 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b16:	4a14      	ldr	r2, [pc, #80]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
 8006b18:	6813      	ldr	r3, [r2, #0]
 8006b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b20:	f7fd fe84 	bl	800482c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b24:	4e10      	ldr	r6, [pc, #64]	; (8006b68 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8006b26:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b28:	e004      	b.n	8006b34 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b2a:	f7fd fe7f 	bl	800482c <HAL_GetTick>
 8006b2e:	1b40      	subs	r0, r0, r5
 8006b30:	2864      	cmp	r0, #100	; 0x64
 8006b32:	d812      	bhi.n	8006b5a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b34:	6833      	ldr	r3, [r6, #0]
 8006b36:	039b      	lsls	r3, r3, #14
 8006b38:	d5f7      	bpl.n	8006b2a <HAL_RCC_OscConfig+0x2ae>
 8006b3a:	e6d6      	b.n	80068ea <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006b44:	f7fd fe72 	bl	800482c <HAL_GetTick>
 8006b48:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	0559      	lsls	r1, r3, #21
 8006b4e:	d5dd      	bpl.n	8006b0c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b50:	f7fd fe6c 	bl	800482c <HAL_GetTick>
 8006b54:	1b80      	subs	r0, r0, r6
 8006b56:	2802      	cmp	r0, #2
 8006b58:	d9f7      	bls.n	8006b4a <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8006b5a:	2003      	movs	r0, #3
}
 8006b5c:	b002      	add	sp, #8
 8006b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006b62:	2500      	movs	r5, #0
 8006b64:	e71a      	b.n	800699c <HAL_RCC_OscConfig+0x120>
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	40007000 	.word	0x40007000
 8006b70:	20000008 	.word	0x20000008
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b74:	4a65      	ldr	r2, [pc, #404]	; (8006d0c <HAL_RCC_OscConfig+0x490>)
 8006b76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006b82:	f7fd fe53 	bl	800482c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b86:	4f61      	ldr	r7, [pc, #388]	; (8006d0c <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006b88:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b8e:	e004      	b.n	8006b9a <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b90:	f7fd fe4c 	bl	800482c <HAL_GetTick>
 8006b94:	1b80      	subs	r0, r0, r6
 8006b96:	4540      	cmp	r0, r8
 8006b98:	d8df      	bhi.n	8006b5a <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b9e:	0799      	lsls	r1, r3, #30
 8006ba0:	d5f6      	bpl.n	8006b90 <HAL_RCC_OscConfig+0x314>
 8006ba2:	e727      	b.n	80069f4 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006ba4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006bb0:	f7fd fe3c 	bl	800482c <HAL_GetTick>
 8006bb4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb8:	f7fd fe38 	bl	800482c <HAL_GetTick>
 8006bbc:	1b80      	subs	r0, r0, r6
 8006bbe:	2802      	cmp	r0, #2
 8006bc0:	d8cb      	bhi.n	8006b5a <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006bc6:	0798      	lsls	r0, r3, #30
 8006bc8:	d4f6      	bmi.n	8006bb8 <HAL_RCC_OscConfig+0x33c>
 8006bca:	e735      	b.n	8006a38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006bd4:	f7fd fe2a 	bl	800482c <HAL_GetTick>
 8006bd8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bda:	6833      	ldr	r3, [r6, #0]
 8006bdc:	05d8      	lsls	r0, r3, #23
 8006bde:	f53f aee2 	bmi.w	80069a6 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be2:	f7fd fe23 	bl	800482c <HAL_GetTick>
 8006be6:	1bc0      	subs	r0, r0, r7
 8006be8:	2802      	cmp	r0, #2
 8006bea:	d9f6      	bls.n	8006bda <HAL_RCC_OscConfig+0x35e>
 8006bec:	e7b5      	b.n	8006b5a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bf2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c04:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c06:	e78b      	b.n	8006b20 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8006c08:	2001      	movs	r0, #1
}
 8006c0a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006c0c:	f7fd fe0e 	bl	800482c <HAL_GetTick>
 8006c10:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c12:	e004      	b.n	8006c1e <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fd fe0a 	bl	800482c <HAL_GetTick>
 8006c18:	1b80      	subs	r0, r0, r6
 8006c1a:	2802      	cmp	r0, #2
 8006c1c:	d89d      	bhi.n	8006b5a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c1e:	682b      	ldr	r3, [r5, #0]
 8006c20:	0199      	lsls	r1, r3, #6
 8006c22:	d4f7      	bmi.n	8006c14 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c24:	68e9      	ldr	r1, [r5, #12]
 8006c26:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <HAL_RCC_OscConfig+0x494>)
 8006c28:	6a22      	ldr	r2, [r4, #32]
 8006c2a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c30:	400b      	ands	r3, r1
 8006c32:	4313      	orrs	r3, r2
 8006c34:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8006c38:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006c3c:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8006c40:	3801      	subs	r0, #1
 8006c42:	0849      	lsrs	r1, r1, #1
 8006c44:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006c48:	3901      	subs	r1, #1
 8006c4a:	0852      	lsrs	r2, r2, #1
 8006c4c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006c50:	3a01      	subs	r2, #1
 8006c52:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006c56:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006c58:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c5a:	4e2c      	ldr	r6, [pc, #176]	; (8006d0c <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8006c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c60:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c62:	68eb      	ldr	r3, [r5, #12]
 8006c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c68:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006c6a:	f7fd fddf 	bl	800482c <HAL_GetTick>
 8006c6e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c70:	e005      	b.n	8006c7e <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c72:	f7fd fddb 	bl	800482c <HAL_GetTick>
 8006c76:	1b00      	subs	r0, r0, r4
 8006c78:	2802      	cmp	r0, #2
 8006c7a:	f63f af6e 	bhi.w	8006b5a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c7e:	6833      	ldr	r3, [r6, #0]
 8006c80:	019a      	lsls	r2, r3, #6
 8006c82:	d5f6      	bpl.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
 8006c84:	e6fe      	b.n	8006a84 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c86:	4b21      	ldr	r3, [pc, #132]	; (8006d0c <HAL_RCC_OscConfig+0x490>)
 8006c88:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c8c:	f042 0204 	orr.w	r2, r2, #4
 8006c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006c94:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ca0:	e76f      	b.n	8006b82 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ca2:	2801      	cmp	r0, #1
 8006ca4:	f43f aeef 	beq.w	8006a86 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006ca8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006caa:	6a22      	ldr	r2, [r4, #32]
 8006cac:	f003 0103 	and.w	r1, r3, #3
 8006cb0:	4291      	cmp	r1, r2
 8006cb2:	f47f af0d 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cbc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006cc2:	f47f af05 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cc6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006cc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ccc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006cd0:	f47f aefe 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cd4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cd6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cda:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006cde:	f47f aef7 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006ce4:	0852      	lsrs	r2, r2, #1
 8006ce6:	3a01      	subs	r2, #1
 8006ce8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cec:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006cf0:	f47f aeee 	bne.w	8006ad0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cf4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006cf6:	0852      	lsrs	r2, r2, #1
 8006cf8:	3a01      	subs	r2, #1
 8006cfa:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cfe:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8006d02:	bf14      	ite	ne
 8006d04:	2001      	movne	r0, #1
 8006d06:	2000      	moveq	r0, #0
 8006d08:	e6bd      	b.n	8006a86 <HAL_RCC_OscConfig+0x20a>
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	019f800c 	.word	0x019f800c

08006d14 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d14:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x64>)
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	f002 020c 	and.w	r2, r2, #12
 8006d1c:	2a04      	cmp	r2, #4
 8006d1e:	d027      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	f002 020c 	and.w	r2, r2, #12
 8006d26:	2a08      	cmp	r2, #8
 8006d28:	d024      	beq.n	8006d74 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	f002 020c 	and.w	r2, r2, #12
 8006d30:	2a0c      	cmp	r2, #12
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006d34:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006d36:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d38:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d3a:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d3c:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d3e:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d42:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8006d46:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d48:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d4c:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d50:	bf0c      	ite	eq
 8006d52:	480a      	ldreq	r0, [pc, #40]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d54:	480a      	ldrne	r0, [pc, #40]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006d56:	fbb0 f0f2 	udiv	r0, r0, r2
 8006d5a:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d5e:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x64>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006d66:	3301      	adds	r3, #1
 8006d68:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006d6a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006d6e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006d70:	4803      	ldr	r0, [pc, #12]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006d72:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x68>)
 8006d76:	4770      	bx	lr
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	007a1200 	.word	0x007a1200
 8006d80:	00f42400 	.word	0x00f42400

08006d84 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f000 80ef 	beq.w	8006f68 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d8a:	4a7f      	ldr	r2, [pc, #508]	; (8006f88 <HAL_RCC_ClockConfig+0x204>)
{
 8006d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d90:	6813      	ldr	r3, [r2, #0]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	428b      	cmp	r3, r1
 8006d98:	460d      	mov	r5, r1
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	d20c      	bcs.n	8006db8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	f023 030f 	bic.w	r3, r3, #15
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da8:	6813      	ldr	r3, [r2, #0]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	428b      	cmp	r3, r1
 8006db0:	d002      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006db2:	2001      	movs	r0, #1
}
 8006db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	07de      	lsls	r6, r3, #31
 8006dbc:	d563      	bpl.n	8006e86 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dbe:	6862      	ldr	r2, [r4, #4]
 8006dc0:	2a03      	cmp	r2, #3
 8006dc2:	f000 809a 	beq.w	8006efa <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dc6:	4b71      	ldr	r3, [pc, #452]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dc8:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dca:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dcc:	f000 8091 	beq.w	8006ef2 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dd0:	055b      	lsls	r3, r3, #21
 8006dd2:	d5ee      	bpl.n	8006db2 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006dd4:	f7ff ff9e 	bl	8006d14 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006dd8:	4b6d      	ldr	r3, [pc, #436]	; (8006f90 <HAL_RCC_ClockConfig+0x20c>)
 8006dda:	4298      	cmp	r0, r3
 8006ddc:	f200 80c6 	bhi.w	8006f6c <HAL_RCC_ClockConfig+0x1e8>
 8006de0:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006de2:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006de6:	4e69      	ldr	r6, [pc, #420]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006de8:	68b3      	ldr	r3, [r6, #8]
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	431a      	orrs	r2, r3
 8006df0:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8006df2:	f7fd fd1b 	bl	800482c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006dfa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfc:	e004      	b.n	8006e08 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dfe:	f7fd fd15 	bl	800482c <HAL_GetTick>
 8006e02:	1bc0      	subs	r0, r0, r7
 8006e04:	4540      	cmp	r0, r8
 8006e06:	d871      	bhi.n	8006eec <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e08:	68b3      	ldr	r3, [r6, #8]
 8006e0a:	6862      	ldr	r2, [r4, #4]
 8006e0c:	f003 030c 	and.w	r3, r3, #12
 8006e10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006e14:	d1f3      	bne.n	8006dfe <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	079f      	lsls	r7, r3, #30
 8006e1a:	d436      	bmi.n	8006e8a <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8006e1c:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006e20:	d103      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006e22:	68b3      	ldr	r3, [r6, #8]
 8006e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e28:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e2a:	4e57      	ldr	r6, [pc, #348]	; (8006f88 <HAL_RCC_ClockConfig+0x204>)
 8006e2c:	6833      	ldr	r3, [r6, #0]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	42ab      	cmp	r3, r5
 8006e34:	d846      	bhi.n	8006ec4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	075a      	lsls	r2, r3, #29
 8006e3a:	d506      	bpl.n	8006e4a <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e3c:	4953      	ldr	r1, [pc, #332]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006e3e:	68e0      	ldr	r0, [r4, #12]
 8006e40:	688a      	ldr	r2, [r1, #8]
 8006e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e46:	4302      	orrs	r2, r0
 8006e48:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4a:	071b      	lsls	r3, r3, #28
 8006e4c:	d507      	bpl.n	8006e5e <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e4e:	4a4f      	ldr	r2, [pc, #316]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006e50:	6921      	ldr	r1, [r4, #16]
 8006e52:	6893      	ldr	r3, [r2, #8]
 8006e54:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006e58:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e5c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e5e:	f7ff ff59 	bl	8006d14 <HAL_RCC_GetSysClockFreq>
 8006e62:	4a4a      	ldr	r2, [pc, #296]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006e64:	4c4b      	ldr	r4, [pc, #300]	; (8006f94 <HAL_RCC_ClockConfig+0x210>)
 8006e66:	6892      	ldr	r2, [r2, #8]
 8006e68:	494b      	ldr	r1, [pc, #300]	; (8006f98 <HAL_RCC_ClockConfig+0x214>)
 8006e6a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006e6e:	4603      	mov	r3, r0
 8006e70:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006e72:	484a      	ldr	r0, [pc, #296]	; (8006f9c <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e74:	f002 021f 	and.w	r2, r2, #31
 8006e78:	40d3      	lsrs	r3, r2
 8006e7a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006e7c:	6800      	ldr	r0, [r0, #0]
}
 8006e7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006e82:	f7fd bc91 	b.w	80047a8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e86:	0798      	lsls	r0, r3, #30
 8006e88:	d5cf      	bpl.n	8006e2a <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e8a:	0758      	lsls	r0, r3, #29
 8006e8c:	d504      	bpl.n	8006e98 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e8e:	493f      	ldr	r1, [pc, #252]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006e90:	688a      	ldr	r2, [r1, #8]
 8006e92:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e96:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e98:	0719      	lsls	r1, r3, #28
 8006e9a:	d506      	bpl.n	8006eaa <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e9c:	4a3b      	ldr	r2, [pc, #236]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006e9e:	6893      	ldr	r3, [r2, #8]
 8006ea0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ea4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ea8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eaa:	4a38      	ldr	r2, [pc, #224]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006eac:	68a1      	ldr	r1, [r4, #8]
 8006eae:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb0:	4e35      	ldr	r6, [pc, #212]	; (8006f88 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eba:	6833      	ldr	r3, [r6, #0]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	42ab      	cmp	r3, r5
 8006ec2:	d9b8      	bls.n	8006e36 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec4:	6833      	ldr	r3, [r6, #0]
 8006ec6:	f023 030f 	bic.w	r3, r3, #15
 8006eca:	432b      	orrs	r3, r5
 8006ecc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006ece:	f7fd fcad 	bl	800482c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006ed6:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed8:	6833      	ldr	r3, [r6, #0]
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	42ab      	cmp	r3, r5
 8006ee0:	d0a9      	beq.n	8006e36 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee2:	f7fd fca3 	bl	800482c <HAL_GetTick>
 8006ee6:	1bc0      	subs	r0, r0, r7
 8006ee8:	4540      	cmp	r0, r8
 8006eea:	d9f5      	bls.n	8006ed8 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8006eec:	2003      	movs	r0, #3
}
 8006eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ef2:	039a      	lsls	r2, r3, #14
 8006ef4:	f53f af6e 	bmi.w	8006dd4 <HAL_RCC_ClockConfig+0x50>
 8006ef8:	e75b      	b.n	8006db2 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006efa:	4824      	ldr	r0, [pc, #144]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006efc:	6801      	ldr	r1, [r0, #0]
 8006efe:	0189      	lsls	r1, r1, #6
 8006f00:	f57f af57 	bpl.w	8006db2 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f04:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f06:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f08:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f0a:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f0e:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 8006f12:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f14:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f18:	bf0c      	ite	eq
 8006f1a:	4921      	ldreq	r1, [pc, #132]	; (8006fa0 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f1c:	4921      	ldrne	r1, [pc, #132]	; (8006fa4 <HAL_RCC_ClockConfig+0x220>)
 8006f1e:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f22:	4e1a      	ldr	r6, [pc, #104]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 8006f24:	4f1a      	ldr	r7, [pc, #104]	; (8006f90 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f26:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8006f2a:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f2e:	68f0      	ldr	r0, [r6, #12]
 8006f30:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8006f34:	3001      	adds	r0, #1
 8006f36:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8006f38:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8006f3c:	42b9      	cmp	r1, r7
 8006f3e:	d920      	bls.n	8006f82 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f40:	68b1      	ldr	r1, [r6, #8]
 8006f42:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x1d0>
 8006f48:	f013 0902 	ands.w	r9, r3, #2
 8006f4c:	f43f af4b 	beq.w	8006de6 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	b9b3      	cbnz	r3, 8006f82 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f54:	490d      	ldr	r1, [pc, #52]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006f56:	688b      	ldr	r3, [r1, #8]
 8006f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f60:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f62:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006f66:	e73e      	b.n	8006de6 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8006f68:	2001      	movs	r0, #1
}
 8006f6a:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f6c:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <HAL_RCC_ClockConfig+0x208>)
 8006f6e:	6893      	ldr	r3, [r2, #8]
 8006f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006f7a:	6862      	ldr	r2, [r4, #4]
 8006f7c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006f80:	e731      	b.n	8006de6 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	e72e      	b.n	8006de6 <HAL_RCC_ClockConfig+0x62>
 8006f88:	40022000 	.word	0x40022000
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	04c4b400 	.word	0x04c4b400
 8006f94:	0800f4c0 	.word	0x0800f4c0
 8006f98:	20000000 	.word	0x20000000
 8006f9c:	20000008 	.word	0x20000008
 8006fa0:	007a1200 	.word	0x007a1200
 8006fa4:	00f42400 	.word	0x00f42400

08006fa8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006faa:	4a06      	ldr	r2, [pc, #24]	; (8006fc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006fac:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006fae:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006fb0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	5cd3      	ldrb	r3, [r2, r3]
 8006fb8:	f003 031f 	and.w	r3, r3, #31
}
 8006fbc:	40d8      	lsrs	r0, r3
 8006fbe:	4770      	bx	lr
 8006fc0:	40021000 	.word	0x40021000
 8006fc4:	0800f4d0 	.word	0x0800f4d0
 8006fc8:	20000000 	.word	0x20000000

08006fcc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006fce:	4a06      	ldr	r2, [pc, #24]	; (8006fe8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006fd2:	4906      	ldr	r1, [pc, #24]	; (8006fec <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fd4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006fd8:	6808      	ldr	r0, [r1, #0]
 8006fda:	5cd3      	ldrb	r3, [r2, r3]
 8006fdc:	f003 031f 	and.w	r3, r3, #31
}
 8006fe0:	40d8      	lsrs	r0, r3
 8006fe2:	4770      	bx	lr
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	0800f4d0 	.word	0x0800f4d0
 8006fec:	20000000 	.word	0x20000000

08006ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ff4:	6803      	ldr	r3, [r0, #0]
{
 8006ff6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ff8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8006ffc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ffe:	d056      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007000:	4bb6      	ldr	r3, [pc, #728]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007002:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007004:	00d5      	lsls	r5, r2, #3
 8007006:	f140 813e 	bpl.w	8007286 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 800700a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800700c:	4db4      	ldr	r5, [pc, #720]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800700e:	682b      	ldr	r3, [r5, #0]
 8007010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007014:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007016:	f7fd fc09 	bl	800482c <HAL_GetTick>
 800701a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800701c:	e005      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800701e:	f7fd fc05 	bl	800482c <HAL_GetTick>
 8007022:	1b83      	subs	r3, r0, r6
 8007024:	2b02      	cmp	r3, #2
 8007026:	f200 8139 	bhi.w	800729c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800702a:	682b      	ldr	r3, [r5, #0]
 800702c:	05d8      	lsls	r0, r3, #23
 800702e:	d5f6      	bpl.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007030:	4daa      	ldr	r5, [pc, #680]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007032:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007036:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800703a:	d027      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800703c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800703e:	429a      	cmp	r2, r3
 8007040:	d025      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007042:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007046:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800704a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007052:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007056:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800705a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800705e:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007060:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007064:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007068:	f140 8148 	bpl.w	80072fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fd fbde 	bl	800482c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007070:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007074:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007076:	e005      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007078:	f7fd fbd8 	bl	800482c <HAL_GetTick>
 800707c:	1b80      	subs	r0, r0, r6
 800707e:	4540      	cmp	r0, r8
 8007080:	f200 810c 	bhi.w	800729c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007084:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007088:	079b      	lsls	r3, r3, #30
 800708a:	d5f5      	bpl.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800708c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800708e:	4993      	ldr	r1, [pc, #588]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007090:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007094:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800709e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070a0:	b127      	cbz	r7, 80070ac <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a2:	4a8e      	ldr	r2, [pc, #568]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80070a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070aa:	6593      	str	r3, [r2, #88]	; 0x58
 80070ac:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070ae:	07dd      	lsls	r5, r3, #31
 80070b0:	d508      	bpl.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070b2:	498a      	ldr	r1, [pc, #552]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070b4:	6865      	ldr	r5, [r4, #4]
 80070b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070ba:	f022 0203 	bic.w	r2, r2, #3
 80070be:	432a      	orrs	r2, r5
 80070c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070c4:	0799      	lsls	r1, r3, #30
 80070c6:	d508      	bpl.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070c8:	4984      	ldr	r1, [pc, #528]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070ca:	68a5      	ldr	r5, [r4, #8]
 80070cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070d0:	f022 020c 	bic.w	r2, r2, #12
 80070d4:	432a      	orrs	r2, r5
 80070d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070da:	075a      	lsls	r2, r3, #29
 80070dc:	d508      	bpl.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070de:	497f      	ldr	r1, [pc, #508]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070e0:	68e5      	ldr	r5, [r4, #12]
 80070e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80070ea:	432a      	orrs	r2, r5
 80070ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070f0:	071f      	lsls	r7, r3, #28
 80070f2:	d508      	bpl.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070f4:	4979      	ldr	r1, [pc, #484]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070f6:	6925      	ldr	r5, [r4, #16]
 80070f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007100:	432a      	orrs	r2, r5
 8007102:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007106:	06de      	lsls	r6, r3, #27
 8007108:	d508      	bpl.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800710a:	4974      	ldr	r1, [pc, #464]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800710c:	6965      	ldr	r5, [r4, #20]
 800710e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007112:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007116:	432a      	orrs	r2, r5
 8007118:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800711c:	069d      	lsls	r5, r3, #26
 800711e:	d508      	bpl.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007120:	496e      	ldr	r1, [pc, #440]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007122:	69a5      	ldr	r5, [r4, #24]
 8007124:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007128:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800712c:	432a      	orrs	r2, r5
 800712e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007132:	0659      	lsls	r1, r3, #25
 8007134:	d508      	bpl.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007136:	4969      	ldr	r1, [pc, #420]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007138:	69e5      	ldr	r5, [r4, #28]
 800713a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800713e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007142:	432a      	orrs	r2, r5
 8007144:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007148:	061a      	lsls	r2, r3, #24
 800714a:	d508      	bpl.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800714c:	4963      	ldr	r1, [pc, #396]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800714e:	6a25      	ldr	r5, [r4, #32]
 8007150:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007154:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007158:	432a      	orrs	r2, r5
 800715a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800715e:	05df      	lsls	r7, r3, #23
 8007160:	d508      	bpl.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007162:	495e      	ldr	r1, [pc, #376]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007164:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007166:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800716a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800716e:	432a      	orrs	r2, r5
 8007170:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007174:	039e      	lsls	r6, r3, #14
 8007176:	d508      	bpl.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007178:	4958      	ldr	r1, [pc, #352]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800717a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800717c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8007180:	f022 0203 	bic.w	r2, r2, #3
 8007184:	432a      	orrs	r2, r5
 8007186:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800718a:	059d      	lsls	r5, r3, #22
 800718c:	d508      	bpl.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800718e:	4953      	ldr	r1, [pc, #332]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007190:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007192:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007196:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800719a:	432a      	orrs	r2, r5
 800719c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071a0:	0559      	lsls	r1, r3, #21
 80071a2:	d50b      	bpl.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071a4:	494d      	ldr	r1, [pc, #308]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80071a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80071ac:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80071b0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071b2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071ba:	d071      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80071bc:	051a      	lsls	r2, r3, #20
 80071be:	d50b      	bpl.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071c0:	4946      	ldr	r1, [pc, #280]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071c2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80071c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80071c8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80071cc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071ce:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071d6:	d068      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d8:	04df      	lsls	r7, r3, #19
 80071da:	d50b      	bpl.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071dc:	493f      	ldr	r1, [pc, #252]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80071e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80071e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80071e8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071ea:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071f2:	d05f      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071f4:	049e      	lsls	r6, r3, #18
 80071f6:	d50b      	bpl.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071f8:	4938      	ldr	r1, [pc, #224]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071fa:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80071fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007200:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007204:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007206:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800720a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800720e:	d056      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007210:	045d      	lsls	r5, r3, #17
 8007212:	d50b      	bpl.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007214:	4931      	ldr	r1, [pc, #196]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007216:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007218:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800721c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007220:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007222:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007226:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800722a:	d04d      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800722c:	0419      	lsls	r1, r3, #16
 800722e:	d50b      	bpl.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007230:	492a      	ldr	r1, [pc, #168]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007232:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007234:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800723c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800723e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007242:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007246:	d044      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007248:	03da      	lsls	r2, r3, #15
 800724a:	d50b      	bpl.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800724c:	4923      	ldr	r1, [pc, #140]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800724e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8007250:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007254:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007258:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800725a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800725e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007262:	d03f      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007264:	035b      	lsls	r3, r3, #13
 8007266:	d50b      	bpl.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007268:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800726a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800726c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007270:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007274:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007276:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800727a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800727e:	d036      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8007280:	b002      	add	sp, #8
 8007282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007286:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800728c:	659a      	str	r2, [r3, #88]	; 0x58
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007298:	2701      	movs	r7, #1
 800729a:	e6b7      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 800729c:	2003      	movs	r0, #3
 800729e:	e6ff      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072a0:	68ca      	ldr	r2, [r1, #12]
 80072a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072a6:	60ca      	str	r2, [r1, #12]
 80072a8:	e788      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072aa:	68ca      	ldr	r2, [r1, #12]
 80072ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072b0:	60ca      	str	r2, [r1, #12]
 80072b2:	e791      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072b4:	68ca      	ldr	r2, [r1, #12]
 80072b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072ba:	60ca      	str	r2, [r1, #12]
 80072bc:	e79a      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072be:	68ca      	ldr	r2, [r1, #12]
 80072c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072c4:	60ca      	str	r2, [r1, #12]
 80072c6:	e7a3      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072c8:	68ca      	ldr	r2, [r1, #12]
 80072ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072ce:	60ca      	str	r2, [r1, #12]
 80072d0:	e7ac      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072d2:	68ca      	ldr	r2, [r1, #12]
 80072d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80072d8:	60ca      	str	r2, [r1, #12]
 80072da:	e7b5      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x258>
 80072dc:	40021000 	.word	0x40021000
 80072e0:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072e4:	68ca      	ldr	r2, [r1, #12]
 80072e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80072ea:	60ca      	str	r2, [r1, #12]
 80072ec:	e7ba      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072ee:	68d3      	ldr	r3, [r2, #12]
 80072f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072f4:	60d3      	str	r3, [r2, #12]
}
 80072f6:	b002      	add	sp, #8
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	4613      	mov	r3, r2
 80072fe:	e6c6      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x9e>

08007300 <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007302:	b083      	sub	sp, #12
 8007304:	460c      	mov	r4, r1
 8007306:	4617      	mov	r7, r2
 8007308:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800730a:	f7fd fa8f 	bl	800482c <HAL_GetTick>
 800730e:	4427      	add	r7, r4
 8007310:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 8007312:	f7fd fa8b 	bl	800482c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007316:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800731e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007322:	0d1b      	lsrs	r3, r3, #20
 8007324:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8007328:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800732a:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800732c:	682a      	ldr	r2, [r5, #0]
 800732e:	1c61      	adds	r1, r4, #1
 8007330:	6893      	ldr	r3, [r2, #8]
 8007332:	d10d      	bne.n	8007350 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8007334:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007338:	d007      	beq.n	800734a <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800733a:	7b13      	ldrb	r3, [r2, #12]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007340:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007342:	6893      	ldr	r3, [r2, #8]
 8007344:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007348:	d1f7      	bne.n	800733a <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 800734a:	2000      	movs	r0, #0
}
 800734c:	b003      	add	sp, #12
 800734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007350:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007354:	d0f9      	beq.n	800734a <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007356:	7b13      	ldrb	r3, [r2, #12]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 800735c:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800735e:	f7fd fa65 	bl	800482c <HAL_GetTick>
 8007362:	1bc0      	subs	r0, r0, r7
 8007364:	42b0      	cmp	r0, r6
 8007366:	d208      	bcs.n	800737a <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8007368:	9a01      	ldr	r2, [sp, #4]
      count--;
 800736a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800736c:	2a00      	cmp	r2, #0
      count--;
 800736e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007372:	bf08      	it	eq
 8007374:	2600      	moveq	r6, #0
      count--;
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	e7d8      	b.n	800732c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800737a:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800737e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007380:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007388:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800738a:	d014      	beq.n	80073b6 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800738c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800738e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007392:	d007      	beq.n	80073a4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 8007394:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007396:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007398:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800739c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80073a0:	2003      	movs	r0, #3
 80073a2:	e7d3      	b.n	800734c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e7ee      	b.n	8007394 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b6:	68aa      	ldr	r2, [r5, #8]
 80073b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80073bc:	d002      	beq.n	80073c4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80073c2:	d1e3      	bne.n	800738c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	e7de      	b.n	800738c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 80073ce:	bf00      	nop
 80073d0:	20000000 	.word	0x20000000

080073d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	eb01 0802 	add.w	r8, r1, r2
 80073de:	460d      	mov	r5, r1
 80073e0:	4616      	mov	r6, r2
 80073e2:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073e4:	f7fd fa22 	bl	800482c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073e8:	4f46      	ldr	r7, [pc, #280]	; (8007504 <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073ea:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 80073ee:	f7fd fa1d 	bl	800482c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80073fc:	0d1b      	lsrs	r3, r3, #20
 80073fe:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8007402:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007404:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007406:	1c68      	adds	r0, r5, #1
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	d11f      	bne.n	800744c <SPI_EndRxTxTransaction+0x78>
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8007412:	d1fb      	bne.n	800740c <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007414:	f7fd fa0a 	bl	800482c <HAL_GetTick>
 8007418:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 800741c:	f7fd fa06 	bl	800482c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007426:	fb08 f303 	mul.w	r3, r8, r3
 800742a:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 800742c:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800742e:	1c69      	adds	r1, r5, #1
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	d11f      	bne.n	8007474 <SPI_EndRxTxTransaction+0xa0>
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	0612      	lsls	r2, r2, #24
 8007438:	d4fc      	bmi.n	8007434 <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800743a:	4632      	mov	r2, r6
 800743c:	4629      	mov	r1, r5
 800743e:	4620      	mov	r0, r4
 8007440:	f7ff ff5e 	bl	8007300 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8007444:	bb40      	cbnz	r0, 8007498 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007446:	b002      	add	sp, #8
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8007452:	d0df      	beq.n	8007414 <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007454:	f7fd f9ea 	bl	800482c <HAL_GetTick>
 8007458:	eba0 000a 	sub.w	r0, r0, sl
 800745c:	4548      	cmp	r0, r9
 800745e:	d221      	bcs.n	80074a4 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8007460:	9a00      	ldr	r2, [sp, #0]
      count--;
 8007462:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 8007464:	2a00      	cmp	r2, #0
      count--;
 8007466:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800746a:	bf08      	it	eq
 800746c:	f04f 0900 	moveq.w	r9, #0
      count--;
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	e7c8      	b.n	8007406 <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	061b      	lsls	r3, r3, #24
 8007478:	d5df      	bpl.n	800743a <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800747a:	f7fd f9d7 	bl	800482c <HAL_GetTick>
 800747e:	1bc3      	subs	r3, r0, r7
 8007480:	4543      	cmp	r3, r8
 8007482:	d20f      	bcs.n	80074a4 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8007484:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007486:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007488:	2a00      	cmp	r2, #0
      count--;
 800748a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800748e:	bf08      	it	eq
 8007490:	f04f 0800 	moveq.w	r8, #0
      count--;
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	e7ca      	b.n	800742e <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007498:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800749a:	f043 0320 	orr.w	r3, r3, #32
 800749e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80074a0:	2003      	movs	r0, #3
 80074a2:	e7d0      	b.n	8007446 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a4:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074a8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074aa:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074b2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b4:	d019      	beq.n	80074ea <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80074b8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80074bc:	d107      	bne.n	80074ce <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074cc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80074d6:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80074dc:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074de:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80074e0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 80074e4:	b002      	add	sp, #8
 80074e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ea:	68a2      	ldr	r2, [r4, #8]
 80074ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80074f0:	d002      	beq.n	80074f8 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074f2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80074f6:	d1de      	bne.n	80074b6 <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	e7d9      	b.n	80074b6 <SPI_EndRxTxTransaction+0xe2>
 8007502:	bf00      	nop
 8007504:	20000000 	.word	0x20000000

08007508 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007508:	2800      	cmp	r0, #0
 800750a:	d07f      	beq.n	800760c <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800750c:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8007510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007516:	f1bc 0f00 	cmp.w	ip, #0
 800751a:	d05c      	beq.n	80075d6 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800751c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800751e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007522:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007526:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007528:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800752c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800752e:	2b00      	cmp	r3, #0
 8007530:	d05e      	beq.n	80075f0 <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 8007532:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007534:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007536:	2302      	movs	r3, #2
 8007538:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800753c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800753e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007546:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007548:	d94c      	bls.n	80075e4 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800754a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800754e:	d15f      	bne.n	8007610 <HAL_SPI_Init+0x108>
 8007550:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007552:	2700      	movs	r7, #0
 8007554:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007558:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800755c:	6925      	ldr	r5, [r4, #16]
 800755e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8007562:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8007566:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800756a:	4333      	orrs	r3, r6
 800756c:	f005 0502 	and.w	r5, r5, #2
 8007570:	432b      	orrs	r3, r5
 8007572:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007574:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007578:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800757c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800757e:	432b      	orrs	r3, r5
 8007580:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007584:	f002 0208 	and.w	r2, r2, #8
 8007588:	ea42 0208 	orr.w	r2, r2, r8
 800758c:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007590:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007594:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007598:	ea43 030e 	orr.w	r3, r3, lr
 800759c:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075a0:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075a4:	4333      	orrs	r3, r6
 80075a6:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075aa:	f00c 0c10 	and.w	ip, ip, #16
 80075ae:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075b2:	432b      	orrs	r3, r5
 80075b4:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075b6:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075ba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075bc:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075be:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075c0:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80075c6:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075c8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075ca:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80075cc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 80075d0:	4610      	mov	r0, r2
}
 80075d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075d6:	6843      	ldr	r3, [r0, #4]
 80075d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075dc:	d0a1      	beq.n	8007522 <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075de:	f8c0 c01c 	str.w	ip, [r0, #28]
 80075e2:	e79e      	b.n	8007522 <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075e4:	d00c      	beq.n	8007600 <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075e6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ea:	2000      	movs	r0, #0
 80075ec:	62a0      	str	r0, [r4, #40]	; 0x28
 80075ee:	e7b3      	b.n	8007558 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 80075f0:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7fc fd4f 	bl	8004098 <HAL_SPI_MspInit>
 80075fa:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 80075fe:	e798      	b.n	8007532 <HAL_SPI_Init+0x2a>
 8007600:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007602:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8007606:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 800760a:	e7a5      	b.n	8007558 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 800760c:	2001      	movs	r0, #1
}
 800760e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007610:	2700      	movs	r7, #0
 8007612:	e7ea      	b.n	80075ea <HAL_SPI_Init+0xe2>

08007614 <HAL_SPI_TransmitReceive>:
{
 8007614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007618:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800761a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800761e:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8007620:	2801      	cmp	r0, #1
 8007622:	f000 809d 	beq.w	8007760 <HAL_SPI_TransmitReceive+0x14c>
 8007626:	4698      	mov	r8, r3
 8007628:	2301      	movs	r3, #1
 800762a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800762e:	468a      	mov	sl, r1
 8007630:	4691      	mov	r9, r2
 8007632:	f7fd f8fb 	bl	800482c <HAL_GetTick>
  tmp_state           = hspi->State;
 8007636:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800763a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800763c:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 800763e:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8007640:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007642:	d010      	beq.n	8007666 <HAL_SPI_TransmitReceive+0x52>
 8007644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007648:	d008      	beq.n	800765c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800764a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800764c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800764e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8007650:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007654:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800765c:	68a2      	ldr	r2, [r4, #8]
 800765e:	2a00      	cmp	r2, #0
 8007660:	d1f3      	bne.n	800764a <HAL_SPI_TransmitReceive+0x36>
 8007662:	2904      	cmp	r1, #4
 8007664:	d1f1      	bne.n	800764a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007666:	f1ba 0f00 	cmp.w	sl, #0
 800766a:	d07c      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x152>
 800766c:	f1b9 0f00 	cmp.w	r9, #0
 8007670:	d079      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x152>
 8007672:	f1b8 0f00 	cmp.w	r8, #0
 8007676:	d076      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007678:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800767c:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007680:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007682:	bf1c      	itt	ne
 8007684:	2205      	movne	r2, #5
 8007686:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800768a:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 800768c:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007690:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007692:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007696:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007698:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800769a:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800769e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076a2:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076a6:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076aa:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 80076ac:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80076b0:	d85b      	bhi.n	800776a <HAL_SPI_TransmitReceive+0x156>
 80076b2:	f1b8 0f01 	cmp.w	r8, #1
 80076b6:	f240 80ea 	bls.w	800788e <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076ba:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80076be:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076c0:	6811      	ldr	r1, [r2, #0]
 80076c2:	0649      	lsls	r1, r1, #25
 80076c4:	f140 80ea 	bpl.w	800789c <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076c8:	b96b      	cbnz	r3, 80076e6 <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 80076ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	f240 8120 	bls.w	8007914 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d4:	4651      	mov	r1, sl
 80076d6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80076da:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 80076dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076de:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80076e0:	3b02      	subs	r3, #2
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80076e6:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	b92b      	cbnz	r3, 80076fa <HAL_SPI_TransmitReceive+0xe6>
 80076ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8084 	beq.w	8007802 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	6893      	ldr	r3, [r2, #8]
 80076fe:	0799      	lsls	r1, r3, #30
 8007700:	d505      	bpl.n	800770e <HAL_SPI_TransmitReceive+0xfa>
 8007702:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007704:	b29b      	uxth	r3, r3
 8007706:	b113      	cbz	r3, 800770e <HAL_SPI_TransmitReceive+0xfa>
 8007708:	2f00      	cmp	r7, #0
 800770a:	f040 80e1 	bne.w	80078d0 <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800770e:	6893      	ldr	r3, [r2, #8]
 8007710:	f013 0301 	ands.w	r3, r3, #1
 8007714:	d01b      	beq.n	800774e <HAL_SPI_TransmitReceive+0x13a>
 8007716:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800771a:	b289      	uxth	r1, r1
 800771c:	b1b9      	cbz	r1, 800774e <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 800771e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007722:	b289      	uxth	r1, r1
 8007724:	2901      	cmp	r1, #1
 8007726:	f240 80c5 	bls.w	80078b4 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800772a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800772c:	68d1      	ldr	r1, [r2, #12]
 800772e:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 8007732:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007736:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007738:	3902      	subs	r1, #2
 800773a:	b289      	uxth	r1, r1
 800773c:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007740:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007744:	b289      	uxth	r1, r1
 8007746:	2901      	cmp	r1, #1
 8007748:	f240 80d1 	bls.w	80078ee <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 800774c:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800774e:	f7fd f86d 	bl	800482c <HAL_GetTick>
 8007752:	1b40      	subs	r0, r0, r5
 8007754:	42b0      	cmp	r0, r6
 8007756:	d3c7      	bcc.n	80076e8 <HAL_SPI_TransmitReceive+0xd4>
 8007758:	1c73      	adds	r3, r6, #1
 800775a:	d0c5      	beq.n	80076e8 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 800775c:	2003      	movs	r0, #3
 800775e:	e775      	b.n	800764c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8007760:	2002      	movs	r0, #2
}
 8007762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8007766:	2001      	movs	r0, #1
 8007768:	e770      	b.n	800764c <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800776a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800776e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007770:	6811      	ldr	r1, [r2, #0]
 8007772:	0648      	lsls	r0, r1, #25
 8007774:	d403      	bmi.n	800777e <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8007776:	6811      	ldr	r1, [r2, #0]
 8007778:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800777c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800777e:	2b00      	cmp	r3, #0
 8007780:	f040 8081 	bne.w	8007886 <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007784:	4651      	mov	r1, sl
 8007786:	f831 3b02 	ldrh.w	r3, [r1], #2
 800778a:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800778c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800778e:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007790:	3b01      	subs	r3, #1
 8007792:	b29b      	uxth	r3, r3
 8007794:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007796:	1c72      	adds	r2, r6, #1
{
 8007798:	f04f 0701 	mov.w	r7, #1
 800779c:	d028      	beq.n	80077f0 <HAL_SPI_TransmitReceive+0x1dc>
 800779e:	e06d      	b.n	800787c <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	6893      	ldr	r3, [r2, #8]
 80077a4:	079b      	lsls	r3, r3, #30
 80077a6:	d50d      	bpl.n	80077c4 <HAL_SPI_TransmitReceive+0x1b0>
 80077a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	b153      	cbz	r3, 80077c4 <HAL_SPI_TransmitReceive+0x1b0>
 80077ae:	b14f      	cbz	r7, 80077c4 <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077b2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80077b6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80077b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ba:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29b      	uxth	r3, r3
 80077c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80077c2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077c4:	6893      	ldr	r3, [r2, #8]
 80077c6:	f013 0301 	ands.w	r3, r3, #1
 80077ca:	d00f      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x1d8>
 80077cc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80077d0:	b289      	uxth	r1, r1
 80077d2:	b159      	cbz	r1, 80077ec <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077d6:	68d2      	ldr	r2, [r2, #12]
 80077d8:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80077dc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077e0:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80077e2:	3a01      	subs	r2, #1
 80077e4:	b292      	uxth	r2, r2
        txallowed = 1U;
 80077e6:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80077e8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077ec:	f7fd f81e 	bl	800482c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1d3      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x18c>
 80077f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1ce      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007802:	462a      	mov	r2, r5
 8007804:	4631      	mov	r1, r6
 8007806:	4620      	mov	r0, r4
 8007808:	f7ff fde4 	bl	80073d4 <SPI_EndRxTxTransaction>
 800780c:	2800      	cmp	r0, #0
 800780e:	f43f af1d 	beq.w	800764c <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007812:	2320      	movs	r3, #32
 8007814:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007816:	2001      	movs	r0, #1
 8007818:	e718      	b.n	800764c <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800781a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0ee      	beq.n	8007802 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007824:	6822      	ldr	r2, [r4, #0]
 8007826:	6893      	ldr	r3, [r2, #8]
 8007828:	0798      	lsls	r0, r3, #30
 800782a:	d50d      	bpl.n	8007848 <HAL_SPI_TransmitReceive+0x234>
 800782c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	b153      	cbz	r3, 8007848 <HAL_SPI_TransmitReceive+0x234>
 8007832:	b14f      	cbz	r7, 8007848 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007834:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007836:	f831 3b02 	ldrh.w	r3, [r1], #2
 800783a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800783c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800783e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007840:	3b01      	subs	r3, #1
 8007842:	b29b      	uxth	r3, r3
 8007844:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007846:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007848:	6893      	ldr	r3, [r2, #8]
 800784a:	f013 0301 	ands.w	r3, r3, #1
 800784e:	d00f      	beq.n	8007870 <HAL_SPI_TransmitReceive+0x25c>
 8007850:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007854:	b289      	uxth	r1, r1
 8007856:	b159      	cbz	r1, 8007870 <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007858:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800785a:	68d2      	ldr	r2, [r2, #12]
 800785c:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8007860:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007864:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007866:	3a01      	subs	r2, #1
 8007868:	b292      	uxth	r2, r2
        txallowed = 1U;
 800786a:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800786c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007870:	f7fc ffdc 	bl	800482c <HAL_GetTick>
 8007874:	1b40      	subs	r0, r0, r5
 8007876:	42b0      	cmp	r0, r6
 8007878:	f4bf af70 	bcs.w	800775c <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800787c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1cf      	bne.n	8007824 <HAL_SPI_TransmitReceive+0x210>
 8007884:	e7c9      	b.n	800781a <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007886:	f1b8 0f01 	cmp.w	r8, #1
 800788a:	d184      	bne.n	8007796 <HAL_SPI_TransmitReceive+0x182>
 800788c:	e77a      	b.n	8007784 <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800788e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007892:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007894:	6811      	ldr	r1, [r2, #0]
 8007896:	0649      	lsls	r1, r1, #25
 8007898:	f53f af17 	bmi.w	80076ca <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 800789c:	6811      	ldr	r1, [r2, #0]
 800789e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80078a2:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f43f af10 	beq.w	80076ca <HAL_SPI_TransmitReceive+0xb6>
 80078aa:	f1b8 0f01 	cmp.w	r8, #1
 80078ae:	f47f af1a 	bne.w	80076e6 <HAL_SPI_TransmitReceive+0xd2>
 80078b2:	e70a      	b.n	80076ca <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078b6:	7b12      	ldrb	r2, [r2, #12]
 80078b8:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 80078ba:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 80078be:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80078c0:	3a01      	subs	r2, #1
 80078c2:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 80078c4:	3101      	adds	r1, #1
        txallowed = 1U;
 80078c6:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 80078c8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 80078cc:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80078ce:	e73e      	b.n	800774e <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 80078d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d910      	bls.n	80078fa <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80078da:	f831 3b02 	ldrh.w	r3, [r1], #2
 80078de:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 80078e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078e2:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80078e4:	3b02      	subs	r3, #2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80078ea:	2700      	movs	r7, #0
 80078ec:	e70f      	b.n	800770e <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078ee:	6851      	ldr	r1, [r2, #4]
 80078f0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 80078f4:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078f6:	6051      	str	r1, [r2, #4]
 80078f8:	e729      	b.n	800774e <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8007900:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8007902:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007904:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8007906:	3b01      	subs	r3, #1
 8007908:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800790a:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 800790c:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800790e:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8007910:	2700      	movs	r7, #0
 8007912:	e6fc      	b.n	800770e <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800791a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 800791c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800791e:	3b01      	subs	r3, #1
 8007920:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8007922:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8007924:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8007926:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007928:	e6dd      	b.n	80076e6 <HAL_SPI_TransmitReceive+0xd2>
 800792a:	bf00      	nop

0800792c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792c:	6a03      	ldr	r3, [r0, #32]
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	6203      	str	r3, [r0, #32]
{
 8007934:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007938:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800793a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800793c:	4f1a      	ldr	r7, [pc, #104]	; (80079a8 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 800793e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8007940:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007942:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8007946:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800794a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800794e:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8007950:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8007954:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007958:	d012      	beq.n	8007980 <TIM_OC1_SetConfig+0x54>
 800795a:	4c14      	ldr	r4, [pc, #80]	; (80079ac <TIM_OC1_SetConfig+0x80>)
 800795c:	42a0      	cmp	r0, r4
 800795e:	d00f      	beq.n	8007980 <TIM_OC1_SetConfig+0x54>
 8007960:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007964:	42a0      	cmp	r0, r4
 8007966:	d00b      	beq.n	8007980 <TIM_OC1_SetConfig+0x54>
 8007968:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800796c:	42a0      	cmp	r0, r4
 800796e:	d007      	beq.n	8007980 <TIM_OC1_SetConfig+0x54>
 8007970:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007974:	42a0      	cmp	r0, r4
 8007976:	d003      	beq.n	8007980 <TIM_OC1_SetConfig+0x54>
 8007978:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800797c:	42a0      	cmp	r0, r4
 800797e:	d10b      	bne.n	8007998 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007980:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007982:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007986:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007988:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800798c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007990:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007992:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007996:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007998:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800799a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800799c:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800799e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80079a0:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80079a2:	6203      	str	r3, [r0, #32]
}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40013400 	.word	0x40013400

080079b0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079b0:	6a03      	ldr	r3, [r0, #32]
 80079b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b6:	6203      	str	r3, [r0, #32]
{
 80079b8:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079bc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079be:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079c0:	4f21      	ldr	r7, [pc, #132]	; (8007a48 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079c2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80079c4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80079ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079d2:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079d4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80079d8:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079dc:	d016      	beq.n	8007a0c <TIM_OC3_SetConfig+0x5c>
 80079de:	4c1b      	ldr	r4, [pc, #108]	; (8007a4c <TIM_OC3_SetConfig+0x9c>)
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d013      	beq.n	8007a0c <TIM_OC3_SetConfig+0x5c>
 80079e4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d024      	beq.n	8007a36 <TIM_OC3_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ec:	4c18      	ldr	r4, [pc, #96]	; (8007a50 <TIM_OC3_SetConfig+0xa0>)
 80079ee:	42a0      	cmp	r0, r4
 80079f0:	d013      	beq.n	8007a1a <TIM_OC3_SetConfig+0x6a>
 80079f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80079f6:	42a0      	cmp	r0, r4
 80079f8:	d00f      	beq.n	8007a1a <TIM_OC3_SetConfig+0x6a>
 80079fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80079fe:	42a0      	cmp	r0, r4
 8007a00:	d00b      	beq.n	8007a1a <TIM_OC3_SetConfig+0x6a>
 8007a02:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007a06:	42a0      	cmp	r0, r4
 8007a08:	d10e      	bne.n	8007a28 <TIM_OC3_SetConfig+0x78>
 8007a0a:	e006      	b.n	8007a1a <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a0c:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a12:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a1a:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a1e:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a22:	432c      	orrs	r4, r5
 8007a24:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a28:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007a2a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007a2c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007a2e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8007a30:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007a32:	6203      	str	r3, [r0, #32]
}
 8007a34:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a36:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a3c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a44:	e7d2      	b.n	80079ec <TIM_OC3_SetConfig+0x3c>
 8007a46:	bf00      	nop
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40013400 	.word	0x40013400
 8007a50:	40014000 	.word	0x40014000

08007a54 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a54:	6a03      	ldr	r3, [r0, #32]
 8007a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a5a:	6203      	str	r3, [r0, #32]
{
 8007a5c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a60:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a62:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a64:	4f21      	ldr	r7, [pc, #132]	; (8007aec <TIM_OC4_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a66:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a68:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a6a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8007a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a76:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a78:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a7c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a80:	d016      	beq.n	8007ab0 <TIM_OC4_SetConfig+0x5c>
 8007a82:	4c1b      	ldr	r4, [pc, #108]	; (8007af0 <TIM_OC4_SetConfig+0x9c>)
 8007a84:	42a0      	cmp	r0, r4
 8007a86:	d013      	beq.n	8007ab0 <TIM_OC4_SetConfig+0x5c>
 8007a88:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007a8c:	42a0      	cmp	r0, r4
 8007a8e:	d024      	beq.n	8007ada <TIM_OC4_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a90:	4c18      	ldr	r4, [pc, #96]	; (8007af4 <TIM_OC4_SetConfig+0xa0>)
 8007a92:	42a0      	cmp	r0, r4
 8007a94:	d013      	beq.n	8007abe <TIM_OC4_SetConfig+0x6a>
 8007a96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007a9a:	42a0      	cmp	r0, r4
 8007a9c:	d00f      	beq.n	8007abe <TIM_OC4_SetConfig+0x6a>
 8007a9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007aa2:	42a0      	cmp	r0, r4
 8007aa4:	d00b      	beq.n	8007abe <TIM_OC4_SetConfig+0x6a>
 8007aa6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007aaa:	42a0      	cmp	r0, r4
 8007aac:	d10e      	bne.n	8007acc <TIM_OC4_SetConfig+0x78>
 8007aae:	e006      	b.n	8007abe <TIM_OC4_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ab0:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ab6:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007abe:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ac2:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ac6:	432c      	orrs	r4, r5
 8007ac8:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007acc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007ace:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007ad0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007ad2:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8007ad4:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007ad6:	6203      	str	r3, [r0, #32]
}
 8007ad8:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ada:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007adc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ae0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae8:	e7d2      	b.n	8007a90 <TIM_OC4_SetConfig+0x3c>
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40013400 	.word	0x40013400
 8007af4:	40014000 	.word	0x40014000

08007af8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007af8:	2800      	cmp	r0, #0
 8007afa:	f000 8089 	beq.w	8007c10 <HAL_TIM_Base_Init+0x118>
{
 8007afe:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007b00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007b04:	4604      	mov	r4, r0
 8007b06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d078      	beq.n	8007c00 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b0e:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b10:	4a43      	ldr	r2, [pc, #268]	; (8007c20 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007b12:	2302      	movs	r3, #2
 8007b14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b18:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8007b1a:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b1c:	d05c      	beq.n	8007bd8 <HAL_TIM_Base_Init+0xe0>
 8007b1e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007b22:	d02c      	beq.n	8007b7e <HAL_TIM_Base_Init+0x86>
 8007b24:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007b28:	4291      	cmp	r1, r2
 8007b2a:	d028      	beq.n	8007b7e <HAL_TIM_Base_Init+0x86>
 8007b2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b30:	4291      	cmp	r1, r2
 8007b32:	d024      	beq.n	8007b7e <HAL_TIM_Base_Init+0x86>
 8007b34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b38:	4291      	cmp	r1, r2
 8007b3a:	d020      	beq.n	8007b7e <HAL_TIM_Base_Init+0x86>
 8007b3c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007b40:	4291      	cmp	r1, r2
 8007b42:	d049      	beq.n	8007bd8 <HAL_TIM_Base_Init+0xe0>
 8007b44:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8007b48:	4291      	cmp	r1, r2
 8007b4a:	d063      	beq.n	8007c14 <HAL_TIM_Base_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4c:	4a35      	ldr	r2, [pc, #212]	; (8007c24 <HAL_TIM_Base_Init+0x12c>)
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	d05b      	beq.n	8007c0a <HAL_TIM_Base_Init+0x112>
 8007b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b56:	4291      	cmp	r1, r2
 8007b58:	d057      	beq.n	8007c0a <HAL_TIM_Base_Init+0x112>
 8007b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	d053      	beq.n	8007c0a <HAL_TIM_Base_Init+0x112>
 8007b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d04f      	beq.n	8007c0a <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b6a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b6c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8007b6e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b74:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007b76:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b78:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b7a:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b7c:	e010      	b.n	8007ba0 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007b7e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b80:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b82:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b88:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b8e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b90:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b96:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007b98:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007b9a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b9c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b9e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007bac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007bb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007bb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bc8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007bcc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007bd4:	2000      	movs	r0, #0
}
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007bd8:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bda:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bdc:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007be2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007be8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bee:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007bf0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf2:	68e3      	ldr	r3, [r4, #12]
 8007bf4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007bf6:	6863      	ldr	r3, [r4, #4]
 8007bf8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007bfa:	6963      	ldr	r3, [r4, #20]
 8007bfc:	630b      	str	r3, [r1, #48]	; 0x30
 8007bfe:	e7cf      	b.n	8007ba0 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007c00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007c04:	f7fc fcea 	bl	80045dc <HAL_TIM_Base_MspInit>
 8007c08:	e781      	b.n	8007b0e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c0a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c0c:	69a2      	ldr	r2, [r4, #24]
 8007c0e:	e7e9      	b.n	8007be4 <HAL_TIM_Base_Init+0xec>
    return HAL_ERROR;
 8007c10:	2001      	movs	r0, #1
}
 8007c12:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007c14:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c1a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c1c:	e796      	b.n	8007b4c <HAL_TIM_Base_Init+0x54>
 8007c1e:	bf00      	nop
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40014000 	.word	0x40014000

08007c28 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007c28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d132      	bne.n	8007c96 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c30:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c32:	491b      	ldr	r1, [pc, #108]	; (8007ca0 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007c34:	2202      	movs	r2, #2
 8007c36:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c3a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c3e:	f042 0201 	orr.w	r2, r2, #1
 8007c42:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c44:	d019      	beq.n	8007c7a <HAL_TIM_Base_Start_IT+0x52>
 8007c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4a:	d016      	beq.n	8007c7a <HAL_TIM_Base_Start_IT+0x52>
 8007c4c:	4a15      	ldr	r2, [pc, #84]	; (8007ca4 <HAL_TIM_Base_Start_IT+0x7c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d013      	beq.n	8007c7a <HAL_TIM_Base_Start_IT+0x52>
 8007c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00f      	beq.n	8007c7a <HAL_TIM_Base_Start_IT+0x52>
 8007c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00b      	beq.n	8007c7a <HAL_TIM_Base_Start_IT+0x52>
 8007c62:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d007      	beq.n	8007c7a <HAL_TIM_Base_Start_IT+0x52>
 8007c6a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d003      	beq.n	8007c7a <HAL_TIM_Base_Start_IT+0x52>
 8007c72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d107      	bne.n	8007c8a <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c7a:	6899      	ldr	r1, [r3, #8]
 8007c7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <HAL_TIM_Base_Start_IT+0x80>)
 8007c7e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c80:	2a06      	cmp	r2, #6
 8007c82:	d00a      	beq.n	8007c9a <HAL_TIM_Base_Start_IT+0x72>
 8007c84:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007c88:	d007      	beq.n	8007c9a <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	f042 0201 	orr.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007c92:	2000      	movs	r0, #0
 8007c94:	4770      	bx	lr
    return HAL_ERROR;
 8007c96:	2001      	movs	r0, #1
 8007c98:	4770      	bx	lr
  return HAL_OK;
 8007c9a:	2000      	movs	r0, #0
}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40000400 	.word	0x40000400
 8007ca8:	00010007 	.word	0x00010007

08007cac <HAL_TIM_PWM_MspInit>:
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop

08007cb0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	f000 8089 	beq.w	8007dc8 <HAL_TIM_PWM_Init+0x118>
{
 8007cb6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007cb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d078      	beq.n	8007db8 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cc6:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc8:	4a43      	ldr	r2, [pc, #268]	; (8007dd8 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cd0:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8007cd2:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cd4:	d05c      	beq.n	8007d90 <HAL_TIM_PWM_Init+0xe0>
 8007cd6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007cda:	d02c      	beq.n	8007d36 <HAL_TIM_PWM_Init+0x86>
 8007cdc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007ce0:	4291      	cmp	r1, r2
 8007ce2:	d028      	beq.n	8007d36 <HAL_TIM_PWM_Init+0x86>
 8007ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ce8:	4291      	cmp	r1, r2
 8007cea:	d024      	beq.n	8007d36 <HAL_TIM_PWM_Init+0x86>
 8007cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cf0:	4291      	cmp	r1, r2
 8007cf2:	d020      	beq.n	8007d36 <HAL_TIM_PWM_Init+0x86>
 8007cf4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007cf8:	4291      	cmp	r1, r2
 8007cfa:	d049      	beq.n	8007d90 <HAL_TIM_PWM_Init+0xe0>
 8007cfc:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8007d00:	4291      	cmp	r1, r2
 8007d02:	d063      	beq.n	8007dcc <HAL_TIM_PWM_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d04:	4a35      	ldr	r2, [pc, #212]	; (8007ddc <HAL_TIM_PWM_Init+0x12c>)
 8007d06:	4291      	cmp	r1, r2
 8007d08:	d05b      	beq.n	8007dc2 <HAL_TIM_PWM_Init+0x112>
 8007d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d0e:	4291      	cmp	r1, r2
 8007d10:	d057      	beq.n	8007dc2 <HAL_TIM_PWM_Init+0x112>
 8007d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d16:	4291      	cmp	r1, r2
 8007d18:	d053      	beq.n	8007dc2 <HAL_TIM_PWM_Init+0x112>
 8007d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d1e:	4291      	cmp	r1, r2
 8007d20:	d04f      	beq.n	8007dc2 <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d22:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d24:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8007d26:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d2c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007d2e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d30:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007d32:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d34:	e010      	b.n	8007d58 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007d36:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d38:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d3a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d40:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d46:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d48:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d4e:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007d50:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007d52:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d54:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007d56:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007d64:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007d68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007d6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007d7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d80:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007d84:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007d88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007d8c:	2000      	movs	r0, #0
}
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007d90:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d92:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d94:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d9a:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007da0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007da8:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007daa:	68e3      	ldr	r3, [r4, #12]
 8007dac:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007dae:	6863      	ldr	r3, [r4, #4]
 8007db0:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007db2:	6963      	ldr	r3, [r4, #20]
 8007db4:	630b      	str	r3, [r1, #48]	; 0x30
 8007db6:	e7cf      	b.n	8007d58 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007db8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007dbc:	f7ff ff76 	bl	8007cac <HAL_TIM_PWM_MspInit>
 8007dc0:	e781      	b.n	8007cc6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dc2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc4:	69a2      	ldr	r2, [r4, #24]
 8007dc6:	e7e9      	b.n	8007d9c <HAL_TIM_PWM_Init+0xec>
    return HAL_ERROR;
 8007dc8:	2001      	movs	r0, #1
}
 8007dca:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007dcc:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007dd2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dd4:	e796      	b.n	8007d04 <HAL_TIM_PWM_Init+0x54>
 8007dd6:	bf00      	nop
 8007dd8:	40012c00 	.word	0x40012c00
 8007ddc:	40014000 	.word	0x40014000

08007de0 <HAL_TIM_PWM_Start>:
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d158      	bne.n	8007e96 <HAL_TIM_PWM_Start+0xb6>
 8007de4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d15e      	bne.n	8007eaa <HAL_TIM_PWM_Start+0xca>
 8007dec:	2302      	movs	r3, #2
 8007dee:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007df2:	6803      	ldr	r3, [r0, #0]
 8007df4:	2201      	movs	r2, #1
 8007df6:	6a18      	ldr	r0, [r3, #32]
 8007df8:	f001 011f 	and.w	r1, r1, #31
 8007dfc:	fa02 f101 	lsl.w	r1, r2, r1
 8007e00:	ea20 0001 	bic.w	r0, r0, r1
 8007e04:	b410      	push	{r4}
 8007e06:	6218      	str	r0, [r3, #32]
 8007e08:	6a1a      	ldr	r2, [r3, #32]
 8007e0a:	4c40      	ldr	r4, [pc, #256]	; (8007f0c <HAL_TIM_PWM_Start+0x12c>)
 8007e0c:	4311      	orrs	r1, r2
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	6219      	str	r1, [r3, #32]
 8007e12:	d05a      	beq.n	8007eca <HAL_TIM_PWM_Start+0xea>
 8007e14:	4a3e      	ldr	r2, [pc, #248]	; (8007f10 <HAL_TIM_PWM_Start+0x130>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00f      	beq.n	8007e3a <HAL_TIM_PWM_Start+0x5a>
 8007e1a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00b      	beq.n	8007e3a <HAL_TIM_PWM_Start+0x5a>
 8007e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d007      	beq.n	8007e3a <HAL_TIM_PWM_Start+0x5a>
 8007e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <HAL_TIM_PWM_Start+0x5a>
 8007e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d103      	bne.n	8007e42 <HAL_TIM_PWM_Start+0x62>
 8007e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e40:	645a      	str	r2, [r3, #68]	; 0x44
 8007e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e46:	d016      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x96>
 8007e48:	4a32      	ldr	r2, [pc, #200]	; (8007f14 <HAL_TIM_PWM_Start+0x134>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x96>
 8007e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00f      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x96>
 8007e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x96>
 8007e5e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x96>
 8007e66:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x96>
 8007e6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d107      	bne.n	8007e86 <HAL_TIM_PWM_Start+0xa6>
 8007e76:	6899      	ldr	r1, [r3, #8]
 8007e78:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <HAL_TIM_PWM_Start+0x138>)
 8007e7a:	400a      	ands	r2, r1
 8007e7c:	2a06      	cmp	r2, #6
 8007e7e:	d016      	beq.n	8007eae <HAL_TIM_PWM_Start+0xce>
 8007e80:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007e84:	d013      	beq.n	8007eae <HAL_TIM_PWM_Start+0xce>
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e8c:	f042 0201 	orr.w	r2, r2, #1
 8007e90:	2000      	movs	r0, #0
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	4770      	bx	lr
 8007e96:	2904      	cmp	r1, #4
 8007e98:	d01c      	beq.n	8007ed4 <HAL_TIM_PWM_Start+0xf4>
 8007e9a:	2908      	cmp	r1, #8
 8007e9c:	d022      	beq.n	8007ee4 <HAL_TIM_PWM_Start+0x104>
 8007e9e:	290c      	cmp	r1, #12
 8007ea0:	d109      	bne.n	8007eb6 <HAL_TIM_PWM_Start+0xd6>
 8007ea2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d024      	beq.n	8007ef4 <HAL_TIM_PWM_Start+0x114>
 8007eaa:	2001      	movs	r0, #1
 8007eac:	4770      	bx	lr
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	2910      	cmp	r1, #16
 8007eb8:	d020      	beq.n	8007efc <HAL_TIM_PWM_Start+0x11c>
 8007eba:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d1f3      	bne.n	8007eaa <HAL_TIM_PWM_Start+0xca>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007ec8:	e793      	b.n	8007df2 <HAL_TIM_PWM_Start+0x12>
 8007eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ed0:	645a      	str	r2, [r3, #68]	; 0x44
 8007ed2:	e7d0      	b.n	8007e76 <HAL_TIM_PWM_Start+0x96>
 8007ed4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d1e6      	bne.n	8007eaa <HAL_TIM_PWM_Start+0xca>
 8007edc:	2302      	movs	r3, #2
 8007ede:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007ee2:	e786      	b.n	8007df2 <HAL_TIM_PWM_Start+0x12>
 8007ee4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d1de      	bne.n	8007eaa <HAL_TIM_PWM_Start+0xca>
 8007eec:	2302      	movs	r3, #2
 8007eee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007ef2:	e77e      	b.n	8007df2 <HAL_TIM_PWM_Start+0x12>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007efa:	e77a      	b.n	8007df2 <HAL_TIM_PWM_Start+0x12>
 8007efc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d1d2      	bne.n	8007eaa <HAL_TIM_PWM_Start+0xca>
 8007f04:	2302      	movs	r3, #2
 8007f06:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007f0a:	e772      	b.n	8007df2 <HAL_TIM_PWM_Start+0x12>
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40000400 	.word	0x40000400
 8007f18:	00010007 	.word	0x00010007

08007f1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007f1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	f000 808c 	beq.w	800803e <HAL_TIM_ConfigClockSource+0x122>
{
 8007f26:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8007f28:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8007f2a:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007f2c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8007f2e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007f32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007f36:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007f38:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3a:	4c5c      	ldr	r4, [pc, #368]	; (80080ac <HAL_TIM_ConfigClockSource+0x190>)
  switch (sClockSourceConfig->ClockSource)
 8007f3c:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3e:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8007f42:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007f44:	d07d      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x126>
 8007f46:	d921      	bls.n	8007f8c <HAL_TIM_ConfigClockSource+0x70>
 8007f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f4c:	d067      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x102>
 8007f4e:	d94a      	bls.n	8007fe6 <HAL_TIM_ConfigClockSource+0xca>
 8007f50:	4957      	ldr	r1, [pc, #348]	; (80080b0 <HAL_TIM_ConfigClockSource+0x194>)
 8007f52:	428b      	cmp	r3, r1
 8007f54:	d008      	beq.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
 8007f56:	d93e      	bls.n	8007fd6 <HAL_TIM_ConfigClockSource+0xba>
 8007f58:	4956      	ldr	r1, [pc, #344]	; (80080b4 <HAL_TIM_ConfigClockSource+0x198>)
 8007f5a:	428b      	cmp	r3, r1
 8007f5c:	d004      	beq.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
 8007f5e:	3910      	subs	r1, #16
 8007f60:	f023 0420 	bic.w	r4, r3, #32
 8007f64:	428c      	cmp	r4, r1
 8007f66:	d108      	bne.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f68:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f6a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007f6e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f72:	430b      	orrs	r3, r1
 8007f74:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f78:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8007f7a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007f82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007f86:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007f88:	4618      	mov	r0, r3
}
 8007f8a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	d073      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0x15c>
 8007f90:	d91b      	bls.n	8007fca <HAL_TIM_ConfigClockSource+0xae>
 8007f92:	2b50      	cmp	r3, #80	; 0x50
 8007f94:	d1f1      	bne.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8007f96:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f98:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9a:	684c      	ldr	r4, [r1, #4]
 8007f9c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f9e:	f026 0601 	bic.w	r6, r6, #1
 8007fa2:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa4:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fa6:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fae:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007fb2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007fb4:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007fb6:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007fb8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007fc6:	6093      	str	r3, [r2, #8]
}
 8007fc8:	e7d7      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d0cc      	beq.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
 8007fce:	d91c      	bls.n	800800a <HAL_TIM_ConfigClockSource+0xee>
 8007fd0:	2b30      	cmp	r3, #48	; 0x30
 8007fd2:	d1d2      	bne.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
 8007fd4:	e7c8      	b.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
 8007fd6:	3920      	subs	r1, #32
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	d0c5      	beq.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
 8007fdc:	d919      	bls.n	8008012 <HAL_TIM_ConfigClockSource+0xf6>
 8007fde:	4936      	ldr	r1, [pc, #216]	; (80080b8 <HAL_TIM_ConfigClockSource+0x19c>)
 8007fe0:	428b      	cmp	r3, r1
 8007fe2:	d0c1      	beq.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
 8007fe4:	e7c9      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
 8007fe6:	2b70      	cmp	r3, #112	; 0x70
 8007fe8:	d1c7      	bne.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fea:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007fee:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007ff0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ff2:	432b      	orrs	r3, r5
 8007ff4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ffc:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ffe:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008000:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008002:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008006:	6093      	str	r3, [r2, #8]
      break;
 8008008:	e7b7      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 800800a:	f033 0110 	bics.w	r1, r3, #16
 800800e:	d1b4      	bne.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
 8008010:	e7aa      	b.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
 8008012:	f023 0110 	bic.w	r1, r3, #16
 8008016:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800801a:	d1ae      	bne.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
 800801c:	e7a4      	b.n	8007f68 <HAL_TIM_ConfigClockSource+0x4c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800801e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8008022:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8008024:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008026:	432b      	orrs	r3, r5
 8008028:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800802c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008030:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8008032:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008034:	6893      	ldr	r3, [r2, #8]
 8008036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800803a:	6093      	str	r3, [r2, #8]
      break;
 800803c:	e79d      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 800803e:	2002      	movs	r0, #2
}
 8008040:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008042:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008044:	684d      	ldr	r5, [r1, #4]
 8008046:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008048:	f024 0410 	bic.w	r4, r4, #16
 800804c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800804e:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8008050:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008052:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800805a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800805e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008062:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008064:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8008066:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008068:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800806c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008070:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8008074:	6093      	str	r3, [r2, #8]
}
 8008076:	e780      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8008078:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800807a:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800807c:	684c      	ldr	r4, [r1, #4]
 800807e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008080:	f026 0601 	bic.w	r6, r6, #1
 8008084:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008086:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008088:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800808c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008090:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8008094:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8008096:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8008098:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800809a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800809c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080a4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80080a8:	6093      	str	r3, [r2, #8]
}
 80080aa:	e766      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x5e>
 80080ac:	ffce0088 	.word	0xffce0088
 80080b0:	00100040 	.word	0x00100040
 80080b4:	00100060 	.word	0x00100060
 80080b8:	00100030 	.word	0x00100030

080080bc <HAL_TIM_PeriodElapsedCallback>:
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop

080080c4 <HAL_TIM_IC_CaptureCallback>:
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop

080080c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop

080080cc <HAL_TIM_TriggerCallback>:
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop

080080d0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080d0:	6803      	ldr	r3, [r0, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	0791      	lsls	r1, r2, #30
{
 80080d6:	b510      	push	{r4, lr}
 80080d8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080da:	d503      	bpl.n	80080e4 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	0792      	lsls	r2, r2, #30
 80080e0:	f100 808a 	bmi.w	80081f8 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	0752      	lsls	r2, r2, #29
 80080e8:	d502      	bpl.n	80080f0 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	0750      	lsls	r0, r2, #29
 80080ee:	d470      	bmi.n	80081d2 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	0711      	lsls	r1, r2, #28
 80080f4:	d502      	bpl.n	80080fc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	0712      	lsls	r2, r2, #28
 80080fa:	d458      	bmi.n	80081ae <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	06d1      	lsls	r1, r2, #27
 8008100:	d502      	bpl.n	8008108 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	06d2      	lsls	r2, r2, #27
 8008106:	d43e      	bmi.n	8008186 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008108:	691a      	ldr	r2, [r3, #16]
 800810a:	07d0      	lsls	r0, r2, #31
 800810c:	d503      	bpl.n	8008116 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	07d1      	lsls	r1, r2, #31
 8008112:	f100 808a 	bmi.w	800822a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	0612      	lsls	r2, r2, #24
 800811a:	d503      	bpl.n	8008124 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	0610      	lsls	r0, r2, #24
 8008120:	f100 808b 	bmi.w	800823a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	05d1      	lsls	r1, r2, #23
 8008128:	d503      	bpl.n	8008132 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	0612      	lsls	r2, r2, #24
 800812e:	f100 808c 	bmi.w	800824a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	0650      	lsls	r0, r2, #25
 8008136:	d503      	bpl.n	8008140 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	0651      	lsls	r1, r2, #25
 800813c:	f100 808d 	bmi.w	800825a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	0692      	lsls	r2, r2, #26
 8008144:	d503      	bpl.n	800814e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	0690      	lsls	r0, r2, #26
 800814a:	f100 808e 	bmi.w	800826a <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	02d1      	lsls	r1, r2, #11
 8008152:	d503      	bpl.n	800815c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	02d2      	lsls	r2, r2, #11
 8008158:	f100 808f 	bmi.w	800827a <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	0290      	lsls	r0, r2, #10
 8008160:	d503      	bpl.n	800816a <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	0291      	lsls	r1, r2, #10
 8008166:	f100 8090 	bmi.w	800828a <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	0252      	lsls	r2, r2, #9
 800816e:	d503      	bpl.n	8008178 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	0250      	lsls	r0, r2, #9
 8008174:	f100 8091 	bmi.w	800829a <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	0211      	lsls	r1, r2, #8
 800817c:	d502      	bpl.n	8008184 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	0212      	lsls	r2, r2, #8
 8008182:	d44a      	bmi.n	800821a <HAL_TIM_IRQHandler+0x14a>
}
 8008184:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008186:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800818a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800818c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800818e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008196:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008198:	f040 8090 	bne.w	80082bc <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819c:	f7ff ff90 	bl	80080c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	4620      	mov	r0, r4
 80081a2:	f7ff ff91 	bl	80080c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	2200      	movs	r2, #0
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	7722      	strb	r2, [r4, #28]
 80081ac:	e7ac      	b.n	8008108 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081ae:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081b2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081b4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80081bc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081be:	d17a      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c0:	f7ff ff7e 	bl	80080c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c4:	4620      	mov	r0, r4
 80081c6:	f7ff ff7f 	bl	80080c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ca:	2200      	movs	r2, #0
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	7722      	strb	r2, [r4, #28]
 80081d0:	e794      	b.n	80080fc <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081d2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081d6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081d8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80081e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081e4:	d164      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	f7ff ff6b 	bl	80080c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ea:	4620      	mov	r0, r4
 80081ec:	f7ff ff6c 	bl	80080c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f0:	2200      	movs	r2, #0
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	7722      	strb	r2, [r4, #28]
 80081f6:	e77b      	b.n	80080f0 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081f8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081fc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081fe:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008200:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	0799      	lsls	r1, r3, #30
 8008206:	d150      	bne.n	80082aa <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008208:	f7ff ff5a 	bl	80080c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800820c:	4620      	mov	r0, r4
 800820e:	f7ff ff5b 	bl	80080c8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008212:	2200      	movs	r2, #0
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	7722      	strb	r2, [r4, #28]
 8008218:	e764      	b.n	80080e4 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800821a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800821e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008220:	611a      	str	r2, [r3, #16]
}
 8008222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008226:	f000 ba61 	b.w	80086ec <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800822a:	f06f 0201 	mvn.w	r2, #1
 800822e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008230:	4620      	mov	r0, r4
 8008232:	f7ff ff43 	bl	80080bc <HAL_TIM_PeriodElapsedCallback>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	e76d      	b.n	8008116 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800823a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800823e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fa49 	bl	80086d8 <HAL_TIMEx_BreakCallback>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	e76c      	b.n	8008124 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800824a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800824e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fa43 	bl	80086dc <HAL_TIMEx_Break2Callback>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	e76b      	b.n	8008132 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800825a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800825e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008260:	4620      	mov	r0, r4
 8008262:	f7ff ff33 	bl	80080cc <HAL_TIM_TriggerCallback>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	e76a      	b.n	8008140 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800826a:	f06f 0220 	mvn.w	r2, #32
 800826e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fa2f 	bl	80086d4 <HAL_TIMEx_CommutCallback>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	e769      	b.n	800814e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800827a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800827e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008280:	4620      	mov	r0, r4
 8008282:	f000 fa2d 	bl	80086e0 <HAL_TIMEx_EncoderIndexCallback>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	e768      	b.n	800815c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800828a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800828e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fa27 	bl	80086e4 <HAL_TIMEx_DirectionChangeCallback>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	e767      	b.n	800816a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800829a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800829e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fa21 	bl	80086e8 <HAL_TIMEx_IndexErrorCallback>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	e766      	b.n	8008178 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 80082aa:	f7ff ff0b 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 80082ae:	e7b0      	b.n	8008212 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80082b0:	f7ff ff08 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 80082b4:	e79c      	b.n	80081f0 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80082b6:	f7ff ff05 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 80082ba:	e786      	b.n	80081ca <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 80082bc:	f7ff ff02 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 80082c0:	e771      	b.n	80081a6 <HAL_TIM_IRQHandler+0xd6>
 80082c2:	bf00      	nop

080082c4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c4:	6a03      	ldr	r3, [r0, #32]
 80082c6:	f023 0310 	bic.w	r3, r3, #16
 80082ca:	6203      	str	r3, [r0, #32]
{
 80082cc:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 80082ce:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80082d0:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80082d2:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082d4:	4f21      	ldr	r7, [pc, #132]	; (800835c <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082da:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80082de:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082e2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082e6:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ec:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082f0:	d016      	beq.n	8008320 <TIM_OC2_SetConfig+0x5c>
 80082f2:	4c1b      	ldr	r4, [pc, #108]	; (8008360 <TIM_OC2_SetConfig+0x9c>)
 80082f4:	42a0      	cmp	r0, r4
 80082f6:	d013      	beq.n	8008320 <TIM_OC2_SetConfig+0x5c>
 80082f8:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80082fc:	42a0      	cmp	r0, r4
 80082fe:	d024      	beq.n	800834a <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008300:	4c18      	ldr	r4, [pc, #96]	; (8008364 <TIM_OC2_SetConfig+0xa0>)
 8008302:	42a0      	cmp	r0, r4
 8008304:	d013      	beq.n	800832e <TIM_OC2_SetConfig+0x6a>
 8008306:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800830a:	42a0      	cmp	r0, r4
 800830c:	d00f      	beq.n	800832e <TIM_OC2_SetConfig+0x6a>
 800830e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008312:	42a0      	cmp	r0, r4
 8008314:	d00b      	beq.n	800832e <TIM_OC2_SetConfig+0x6a>
 8008316:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800831a:	42a0      	cmp	r0, r4
 800831c:	d10e      	bne.n	800833c <TIM_OC2_SetConfig+0x78>
 800831e:	e006      	b.n	800832e <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008320:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008326:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800832a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800832e:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008332:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008336:	432c      	orrs	r4, r5
 8008338:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800833c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800833e:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008340:	6182      	str	r2, [r0, #24]
}
 8008342:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8008344:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008346:	6203      	str	r3, [r0, #32]
}
 8008348:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800834a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800834c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008350:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008358:	e7d2      	b.n	8008300 <TIM_OC2_SetConfig+0x3c>
 800835a:	bf00      	nop
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40013400 	.word	0x40013400
 8008364:	40014000 	.word	0x40014000

08008368 <HAL_TIM_PWM_ConfigChannel>:
{
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800836a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800836e:	2b01      	cmp	r3, #1
 8008370:	f000 80e8 	beq.w	8008544 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 8008374:	2301      	movs	r3, #1
 8008376:	4604      	mov	r4, r0
 8008378:	460d      	mov	r5, r1
 800837a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800837e:	2a14      	cmp	r2, #20
 8008380:	d844      	bhi.n	800840c <HAL_TIM_PWM_ConfigChannel+0xa4>
 8008382:	e8df f002 	tbb	[pc, r2]
 8008386:	4347      	.short	0x4347
 8008388:	435b4343 	.word	0x435b4343
 800838c:	43704343 	.word	0x43704343
 8008390:	43844343 	.word	0x43844343
 8008394:	43994343 	.word	0x43994343
 8008398:	4343      	.short	0x4343
 800839a:	0b          	.byte	0x0b
 800839b:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800839c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800839e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083a2:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a4:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a6:	4e70      	ldr	r6, [pc, #448]	; (8008568 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083a8:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 80083ac:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80083ae:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80083b0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80083b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083c2:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ca:	d008      	beq.n	80083de <HAL_TIM_PWM_ConfigChannel+0x76>
 80083cc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80083d0:	42b3      	cmp	r3, r6
 80083d2:	d004      	beq.n	80083de <HAL_TIM_PWM_ConfigChannel+0x76>
 80083d4:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80083d8:	42b3      	cmp	r3, r6
 80083da:	f040 80b5 	bne.w	8008548 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083de:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083e0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083e4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 80083e8:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80083ea:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 80083ee:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 80083f0:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083f2:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083f4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083f6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80083fa:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80083fe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008402:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008406:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800840a:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800840c:	2000      	movs	r0, #0
 800840e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008414:	6800      	ldr	r0, [r0, #0]
 8008416:	f7ff fa89 	bl	800792c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800841a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800841c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800841e:	6999      	ldr	r1, [r3, #24]
 8008420:	f041 0108 	orr.w	r1, r1, #8
 8008424:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008426:	6999      	ldr	r1, [r3, #24]
 8008428:	f021 0104 	bic.w	r1, r1, #4
 800842c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8008432:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008434:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008436:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800843a:	e7ea      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800843c:	6800      	ldr	r0, [r0, #0]
 800843e:	f7ff ff41 	bl	80082c4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008442:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008444:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008446:	6999      	ldr	r1, [r3, #24]
 8008448:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800844c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800844e:	6999      	ldr	r1, [r3, #24]
 8008450:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008454:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 800845c:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800845e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008460:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8008464:	e7d5      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008466:	6800      	ldr	r0, [r0, #0]
 8008468:	f7ff faa2 	bl	80079b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800846c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800846e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008470:	69d9      	ldr	r1, [r3, #28]
 8008472:	f041 0108 	orr.w	r1, r1, #8
 8008476:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008478:	69d9      	ldr	r1, [r3, #28]
 800847a:	f021 0104 	bic.w	r1, r1, #4
 800847e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008480:	69da      	ldr	r2, [r3, #28]
 8008482:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8008484:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008486:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008488:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800848c:	e7c1      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	f7ff fae0 	bl	8007a54 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008494:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008496:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008498:	69d9      	ldr	r1, [r3, #28]
 800849a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800849e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084a0:	69d9      	ldr	r1, [r3, #28]
 80084a2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80084a6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084a8:	69da      	ldr	r2, [r3, #28]
 80084aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80084ae:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084b0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80084b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80084b6:	e7ac      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084b8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084ba:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084be:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80084c0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c2:	4e29      	ldr	r6, [pc, #164]	; (8008568 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084c4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80084c8:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80084ca:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80084cc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80084ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80084d4:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084dc:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084de:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80084e2:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e6:	d013      	beq.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80084e8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80084ec:	42b3      	cmp	r3, r6
 80084ee:	d00f      	beq.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80084f0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80084f4:	42b3      	cmp	r3, r6
 80084f6:	d00b      	beq.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80084f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	d007      	beq.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8008500:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008504:	42b3      	cmp	r3, r6
 8008506:	d003      	beq.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8008508:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800850c:	42b3      	cmp	r3, r6
 800850e:	d104      	bne.n	800851a <HAL_TIM_PWM_ConfigChannel+0x1b2>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008510:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008512:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008516:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800851a:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800851c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800851e:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008520:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8008522:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008524:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008526:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008528:	f041 0108 	orr.w	r1, r1, #8
 800852c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800852e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008530:	f021 0104 	bic.w	r1, r1, #4
 8008534:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008538:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800853a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800853c:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800853e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8008542:	e766      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8008544:	2002      	movs	r0, #2
}
 8008546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800854c:	42b3      	cmp	r3, r6
 800854e:	f43f af46 	beq.w	80083de <HAL_TIM_PWM_ConfigChannel+0x76>
 8008552:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008556:	42b3      	cmp	r3, r6
 8008558:	f43f af41 	beq.w	80083de <HAL_TIM_PWM_ConfigChannel+0x76>
 800855c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008560:	42b3      	cmp	r3, r6
 8008562:	f47f af41 	bne.w	80083e8 <HAL_TIM_PWM_ConfigChannel+0x80>
 8008566:	e73a      	b.n	80083de <HAL_TIM_PWM_ConfigChannel+0x76>
 8008568:	40012c00 	.word	0x40012c00

0800856c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800856c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d058      	beq.n	8008626 <HAL_TIMEx_MasterConfigSynchronization+0xba>
{
 8008574:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008576:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008578:	4c2c      	ldr	r4, [pc, #176]	; (800862c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800857a:	2302      	movs	r3, #2
 800857c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008580:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8008582:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008584:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008586:	d042      	beq.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008588:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800858c:	42a2      	cmp	r2, r4
 800858e:	d032      	beq.n	80085f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008590:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008594:	42a2      	cmp	r2, r4
 8008596:	d02e      	beq.n	80085f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008598:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800859a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800859e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085a2:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085a4:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085a6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80085aa:	d016      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80085ac:	4b20      	ldr	r3, [pc, #128]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d013      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80085b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d00f      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80085ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085be:	429a      	cmp	r2, r3
 80085c0:	d00b      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80085c2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d007      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80085ca:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d003      	beq.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80085d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d104      	bne.n	80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085da:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085dc:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085e0:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085e2:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80085e4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80085e6:	2201      	movs	r2, #1
 80085e8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80085ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80085f0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80085f2:	4618      	mov	r0, r3
}
 80085f4:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f6:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085fe:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008600:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008608:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800860a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800860c:	e7cb      	b.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800860e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008612:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008616:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008618:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800861c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008620:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8008622:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008624:	e7d9      	b.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008626:	2002      	movs	r0, #2
}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	40012c00 	.word	0x40012c00
 8008630:	40000400 	.word	0x40000400

08008634 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008634:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d047      	beq.n	80086cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
{
 800863c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800863e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8008642:	4602      	mov	r2, r0
 8008644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008648:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800864c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800864e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008652:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008658:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800865c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800865e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008662:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008668:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800866a:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800866c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800866e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008672:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008674:	4c16      	ldr	r4, [pc, #88]	; (80086d0 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8008676:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008678:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800867c:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800867e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008682:	d007      	beq.n	8008694 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008684:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008688:	42a0      	cmp	r0, r4
 800868a:	d003      	beq.n	8008694 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 800868c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008690:	42a0      	cmp	r0, r4
 8008692:	d114      	bne.n	80086be <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008694:	69cd      	ldr	r5, [r1, #28]
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008696:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800869c:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800869e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086a2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086a6:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086ae:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086b0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80086b4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086b6:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80086b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086bc:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80086be:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80086c0:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80086c2:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80086c6:	4608      	mov	r0, r1
}
 80086c8:	bc30      	pop	{r4, r5}
 80086ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80086cc:	2002      	movs	r0, #2
}
 80086ce:	4770      	bx	lr
 80086d0:	40012c00 	.word	0x40012c00

080086d4 <HAL_TIMEx_CommutCallback>:
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <HAL_TIMEx_BreakCallback>:
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop

080086dc <HAL_TIMEx_Break2Callback>:
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop

080086e0 <HAL_TIMEx_EncoderIndexCallback>:
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop

080086e4 <HAL_TIMEx_DirectionChangeCallback>:
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop

080086e8 <HAL_TIMEx_IndexErrorCallback>:
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop

080086ec <HAL_TIMEx_TransitionErrorCallback>:
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop

080086f0 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086f0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d149      	bne.n	800878c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d045      	beq.n	8008788 <HAL_UART_Receive_IT+0x98>
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	d043      	beq.n	8008788 <HAL_UART_Receive_IT+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008700:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008704:	2b01      	cmp	r3, #1
 8008706:	d041      	beq.n	800878c <HAL_UART_Receive_IT+0x9c>
{
 8008708:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800870a:	4b49      	ldr	r3, [pc, #292]	; (8008830 <HAL_UART_Receive_IT+0x140>)
 800870c:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800870e:	2501      	movs	r5, #1
 8008710:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008714:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008716:	f04f 0500 	mov.w	r5, #0
 800871a:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800871c:	d006      	beq.n	800872c <HAL_UART_Receive_IT+0x3c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800871e:	6863      	ldr	r3, [r4, #4]
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	d503      	bpl.n	800872c <HAL_UART_Receive_IT+0x3c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800872a:	6023      	str	r3, [r4, #0]
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800872c:	6883      	ldr	r3, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800872e:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 8008730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8008734:	f04f 0100 	mov.w	r1, #0
  huart->RxXferSize  = Size;
 8008738:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800873c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008740:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8008742:	d025      	beq.n	8008790 <HAL_UART_Receive_IT+0xa0>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d138      	bne.n	80087ba <HAL_UART_Receive_IT+0xca>
 8008748:	6903      	ldr	r3, [r0, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d05e      	beq.n	800880c <HAL_UART_Receive_IT+0x11c>
 800874e:	237f      	movs	r3, #127	; 0x7f
 8008750:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008754:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008756:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008758:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800875c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008760:	68a3      	ldr	r3, [r4, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008762:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008764:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008768:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876c:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800876e:	d03a      	beq.n	80087e6 <HAL_UART_Receive_IT+0xf6>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008770:	4b30      	ldr	r3, [pc, #192]	; (8008834 <HAL_UART_Receive_IT+0x144>)
 8008772:	6703      	str	r3, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008774:	2300      	movs	r3, #0
 8008776:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008780:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008782:	6022      	str	r2, [r4, #0]
}
 8008784:	bc30      	pop	{r4, r5}
 8008786:	4770      	bx	lr
      return HAL_ERROR;
 8008788:	2001      	movs	r0, #1
 800878a:	4770      	bx	lr
    return HAL_BUSY;
 800878c:	2002      	movs	r0, #2
}
 800878e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008790:	6903      	ldr	r3, [r0, #16]
 8008792:	b9c3      	cbnz	r3, 80087c6 <HAL_UART_Receive_IT+0xd6>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008794:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008796:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800879a:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879e:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087a0:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	f043 0301 	orr.w	r3, r3, #1
 80087a6:	f240 15ff 	movw	r5, #511	; 0x1ff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087aa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80087ae:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b2:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087b4:	d035      	beq.n	8008822 <HAL_UART_Receive_IT+0x132>
      huart->RxISR = UART_RxISR_16BIT;
 80087b6:	4b20      	ldr	r3, [pc, #128]	; (8008838 <HAL_UART_Receive_IT+0x148>)
 80087b8:	e7db      	b.n	8008772 <HAL_UART_Receive_IT+0x82>
  UART_MASK_COMPUTATION(huart);
 80087ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087be:	d029      	beq.n	8008814 <HAL_UART_Receive_IT+0x124>
 80087c0:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 80087c4:	e7c6      	b.n	8008754 <HAL_UART_Receive_IT+0x64>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087c6:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c8:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087cc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087d2:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	25ff      	movs	r5, #255	; 0xff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087da:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80087de:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e2:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087e4:	d1c4      	bne.n	8008770 <HAL_UART_Receive_IT+0x80>
 80087e6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d8c0      	bhi.n	8008770 <HAL_UART_Receive_IT+0x80>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087ee:	4b13      	ldr	r3, [pc, #76]	; (800883c <HAL_UART_Receive_IT+0x14c>)
 80087f0:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80087f2:	2300      	movs	r3, #0
 80087f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087f8:	6822      	ldr	r2, [r4, #0]
 80087fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087fe:	6022      	str	r2, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008800:	68a2      	ldr	r2, [r4, #8]
 8008802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008806:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008808:	60a2      	str	r2, [r4, #8]
 800880a:	e7bb      	b.n	8008784 <HAL_UART_Receive_IT+0x94>
  UART_MASK_COMPUTATION(huart);
 800880c:	23ff      	movs	r3, #255	; 0xff
 800880e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008812:	e79f      	b.n	8008754 <HAL_UART_Receive_IT+0x64>
 8008814:	6903      	ldr	r3, [r0, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d099      	beq.n	800874e <HAL_UART_Receive_IT+0x5e>
 800881a:	233f      	movs	r3, #63	; 0x3f
 800881c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008820:	e798      	b.n	8008754 <HAL_UART_Receive_IT+0x64>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008822:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008826:	4293      	cmp	r3, r2
 8008828:	d8c5      	bhi.n	80087b6 <HAL_UART_Receive_IT+0xc6>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800882a:	4b05      	ldr	r3, [pc, #20]	; (8008840 <HAL_UART_Receive_IT+0x150>)
 800882c:	e7e0      	b.n	80087f0 <HAL_UART_Receive_IT+0x100>
 800882e:	bf00      	nop
 8008830:	40008000 	.word	0x40008000
 8008834:	08008b31 	.word	0x08008b31
 8008838:	08008bb1 	.word	0x08008bb1
 800883c:	08008c29 	.word	0x08008c29
 8008840:	08008d9d 	.word	0x08008d9d

08008844 <HAL_UART_TxCpltCallback>:
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop

08008848 <HAL_UART_ErrorCallback>:
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop

0800884c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800884c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800884e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008856:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800885a:	f7ff fff5 	bl	8008848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885e:	bd08      	pop	{r3, pc}

08008860 <HAL_UARTEx_RxEventCallback>:
}
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop

08008864 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008864:	6802      	ldr	r2, [r0, #0]
 8008866:	69d3      	ldr	r3, [r2, #28]
{
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800886c:	f640 060f 	movw	r6, #2063	; 0x80f
  if (errorflags == 0U)
 8008870:	4233      	tst	r3, r6
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008872:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008874:	6891      	ldr	r1, [r2, #8]
{
 8008876:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008878:	d027      	beq.n	80088ca <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800887a:	48aa      	ldr	r0, [pc, #680]	; (8008b24 <HAL_UART_IRQHandler+0x2c0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800887c:	4eaa      	ldr	r6, [pc, #680]	; (8008b28 <HAL_UART_IRQHandler+0x2c4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800887e:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008880:	402e      	ands	r6, r5
 8008882:	4306      	orrs	r6, r0
 8008884:	d153      	bne.n	800892e <HAL_UART_IRQHandler+0xca>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008886:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008888:	2801      	cmp	r0, #1
 800888a:	d02c      	beq.n	80088e6 <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800888c:	02de      	lsls	r6, r3, #11
 800888e:	d502      	bpl.n	8008896 <HAL_UART_IRQHandler+0x32>
 8008890:	0248      	lsls	r0, r1, #9
 8008892:	f100 80d7 	bmi.w	8008a44 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008896:	061f      	lsls	r7, r3, #24
 8008898:	d506      	bpl.n	80088a8 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800889a:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800889e:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088a2:	4301      	orrs	r1, r0
 80088a4:	f040 80c6 	bne.w	8008a34 <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088a8:	065e      	lsls	r6, r3, #25
 80088aa:	d502      	bpl.n	80088b2 <HAL_UART_IRQHandler+0x4e>
 80088ac:	0668      	lsls	r0, r5, #25
 80088ae:	f100 80d5 	bmi.w	8008a5c <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088b2:	0219      	lsls	r1, r3, #8
 80088b4:	d502      	bpl.n	80088bc <HAL_UART_IRQHandler+0x58>
 80088b6:	006a      	lsls	r2, r5, #1
 80088b8:	f100 80dd 	bmi.w	8008a76 <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088bc:	01db      	lsls	r3, r3, #7
 80088be:	d502      	bpl.n	80088c6 <HAL_UART_IRQHandler+0x62>
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	f2c0 810b 	blt.w	8008adc <HAL_UART_IRQHandler+0x278>
}
 80088c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088ca:	069e      	lsls	r6, r3, #26
 80088cc:	d5db      	bpl.n	8008886 <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088ce:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088d2:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 80088d6:	433e      	orrs	r6, r7
 80088d8:	d0d5      	beq.n	8008886 <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 80088da:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f2      	beq.n	80088c6 <HAL_UART_IRQHandler+0x62>
}
 80088e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088e4:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088e6:	06d8      	lsls	r0, r3, #27
 80088e8:	d5d0      	bpl.n	800888c <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088ea:	06ef      	lsls	r7, r5, #27
 80088ec:	d5ce      	bpl.n	800888c <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ee:	2310      	movs	r3, #16
 80088f0:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f2:	6893      	ldr	r3, [r2, #8]
 80088f4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80088f8:	f000 80c9 	beq.w	8008a8e <HAL_UART_IRQHandler+0x22a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80088fe:	6801      	ldr	r1, [r0, #0]
 8008900:	684b      	ldr	r3, [r1, #4]
 8008902:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0de      	beq.n	80088c6 <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008908:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800890c:	429d      	cmp	r5, r3
 800890e:	d9da      	bls.n	80088c6 <HAL_UART_IRQHandler+0x62>
        huart->RxXferCount = nb_remaining_rx_data;
 8008910:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008914:	680b      	ldr	r3, [r1, #0]
 8008916:	f013 0320 	ands.w	r3, r3, #32
 800891a:	f000 80ea 	beq.w	8008af2 <HAL_UART_IRQHandler+0x28e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800891e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008922:	1a69      	subs	r1, r5, r1
 8008924:	b289      	uxth	r1, r1
 8008926:	4620      	mov	r0, r4
 8008928:	f7ff ff9a 	bl	8008860 <HAL_UARTEx_RxEventCallback>
 800892c:	e7cb      	b.n	80088c6 <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800892e:	07df      	lsls	r7, r3, #31
 8008930:	d509      	bpl.n	8008946 <HAL_UART_IRQHandler+0xe2>
 8008932:	05ee      	lsls	r6, r5, #23
 8008934:	d507      	bpl.n	8008946 <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008936:	2601      	movs	r6, #1
 8008938:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800893a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800893e:	f046 0601 	orr.w	r6, r6, #1
 8008942:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008946:	079f      	lsls	r7, r3, #30
 8008948:	d567      	bpl.n	8008a1a <HAL_UART_IRQHandler+0x1b6>
 800894a:	07ce      	lsls	r6, r1, #31
 800894c:	d509      	bpl.n	8008962 <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800894e:	2602      	movs	r6, #2
 8008950:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008952:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008956:	075f      	lsls	r7, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008958:	f046 0604 	orr.w	r6, r6, #4
 800895c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008960:	d45f      	bmi.n	8008a22 <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008962:	071e      	lsls	r6, r3, #28
 8008964:	d50b      	bpl.n	800897e <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008966:	f005 0620 	and.w	r6, r5, #32
 800896a:	4330      	orrs	r0, r6
 800896c:	d007      	beq.n	800897e <HAL_UART_IRQHandler+0x11a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800896e:	2008      	movs	r0, #8
 8008970:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008972:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008976:	f040 0008 	orr.w	r0, r0, #8
 800897a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800897e:	0518      	lsls	r0, r3, #20
 8008980:	d50a      	bpl.n	8008998 <HAL_UART_IRQHandler+0x134>
 8008982:	016f      	lsls	r7, r5, #5
 8008984:	d508      	bpl.n	8008998 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008986:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800898a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800898c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008990:	f040 0020 	orr.w	r0, r0, #32
 8008994:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008998:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800899c:	2800      	cmp	r0, #0
 800899e:	d092      	beq.n	80088c6 <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80089a0:	069e      	lsls	r6, r3, #26
 80089a2:	d506      	bpl.n	80089b2 <HAL_UART_IRQHandler+0x14e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80089a4:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80089a8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80089ac:	ea55 0301 	orrs.w	r3, r5, r1
 80089b0:	d166      	bne.n	8008a80 <HAL_UART_IRQHandler+0x21c>
      errorcode = huart->ErrorCode;
 80089b2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089b6:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80089b8:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	431d      	orrs	r5, r3
 80089c2:	f000 8090 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x282>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089c6:	6813      	ldr	r3, [r2, #0]
 80089c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089cc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ce:	6893      	ldr	r3, [r2, #8]
 80089d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089d4:	f023 0301 	bic.w	r3, r3, #1
 80089d8:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d103      	bne.n	80089e8 <HAL_UART_IRQHandler+0x184>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e0:	6813      	ldr	r3, [r2, #0]
 80089e2:	f023 0310 	bic.w	r3, r3, #16
 80089e6:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80089e8:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ea:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80089ec:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f0:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f2:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 80089f4:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089f6:	064d      	lsls	r5, r1, #25
 80089f8:	d52c      	bpl.n	8008a54 <HAL_UART_IRQHandler+0x1f0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089fa:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80089fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a02:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008a04:	b330      	cbz	r0, 8008a54 <HAL_UART_IRQHandler+0x1f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a06:	4b49      	ldr	r3, [pc, #292]	; (8008b2c <HAL_UART_IRQHandler+0x2c8>)
 8008a08:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a0a:	f7fc ffcd 	bl	80059a8 <HAL_DMA_Abort_IT>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f af59 	beq.w	80088c6 <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a14:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008a16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a18:	e762      	b.n	80088e0 <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a1a:	075e      	lsls	r6, r3, #29
 8008a1c:	d5a1      	bpl.n	8008962 <HAL_UART_IRQHandler+0xfe>
 8008a1e:	07cf      	lsls	r7, r1, #31
 8008a20:	d59f      	bpl.n	8008962 <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a22:	2604      	movs	r6, #4
 8008a24:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a26:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8008a2a:	f046 0602 	orr.w	r6, r6, #2
 8008a2e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8008a32:	e796      	b.n	8008962 <HAL_UART_IRQHandler+0xfe>
    if (huart->TxISR != NULL)
 8008a34:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f43f af45 	beq.w	80088c6 <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8008a3c:	4620      	mov	r0, r4
}
 8008a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008a42:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008a48:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a4a:	6213      	str	r3, [r2, #32]
}
 8008a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008a50:	f000 bdee 	b.w	8009630 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7ff fef7 	bl	8008848 <HAL_UART_ErrorCallback>
 8008a5a:	e734      	b.n	80088c6 <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a5c:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a5e:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a64:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a66:	6013      	str	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a68:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008a6a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8008a6e:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8008a70:	f7ff fee8 	bl	8008844 <HAL_UART_TxCpltCallback>
    return;
 8008a74:	e727      	b.n	80088c6 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a76:	4620      	mov	r0, r4
}
 8008a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a7c:	f000 bddc 	b.w	8009638 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8008a80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d095      	beq.n	80089b2 <HAL_UART_IRQHandler+0x14e>
          huart->RxISR(huart);
 8008a86:	4620      	mov	r0, r4
 8008a88:	4798      	blx	r3
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	e791      	b.n	80089b2 <HAL_UART_IRQHandler+0x14e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a8e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8008a92:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008a96:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a98:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8008a9a:	2900      	cmp	r1, #0
 8008a9c:	f43f af13 	beq.w	80088c6 <HAL_UART_IRQHandler+0x62>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008aa0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008aa4:	1a08      	subs	r0, r1, r0
 8008aa6:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8008aa8:	2900      	cmp	r1, #0
 8008aaa:	f43f af0c 	beq.w	80088c6 <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aae:	6810      	ldr	r0, [r2, #0]
 8008ab0:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8008ab4:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ab6:	6890      	ldr	r0, [r2, #8]
 8008ab8:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8008abc:	f020 0001 	bic.w	r0, r0, #1
        huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ac2:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008ac4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac8:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aca:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 8008acc:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ace:	f020 0310 	bic.w	r3, r0, #16
 8008ad2:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f7ff fec3 	bl	8008860 <HAL_UARTEx_RxEventCallback>
 8008ada:	e6f4      	b.n	80088c6 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008adc:	4620      	mov	r0, r4
}
 8008ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ae2:	f000 bda7 	b.w	8009634 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f7ff feae 	bl	8008848 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aec:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8008af0:	e6e9      	b.n	80088c6 <HAL_UART_IRQHandler+0x62>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008af2:	6811      	ldr	r1, [r2, #0]
 8008af4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008af8:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afa:	6891      	ldr	r1, [r2, #8]
 8008afc:	f021 0101 	bic.w	r1, r1, #1
 8008b00:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b02:	6891      	ldr	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8008b04:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b06:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008b0a:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8008b0c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b10:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	f023 0310 	bic.w	r3, r3, #16
 8008b18:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b1a:	f7fc ff0b 	bl	8005934 <HAL_DMA_Abort>
 8008b1e:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008b22:	e6fc      	b.n	800891e <HAL_UART_IRQHandler+0xba>
 8008b24:	10000001 	.word	0x10000001
 8008b28:	04000120 	.word	0x04000120
 8008b2c:	0800884d 	.word	0x0800884d

08008b30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b30:	b538      	push	{r3, r4, r5, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b32:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008b36:	2b22      	cmp	r3, #34	; 0x22
{
 8008b38:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b3a:	d005      	beq.n	8008b48 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b3c:	6802      	ldr	r2, [r0, #0]
 8008b3e:	6993      	ldr	r3, [r2, #24]
 8008b40:	f043 0308 	orr.w	r3, r3, #8
 8008b44:	6193      	str	r3, [r2, #24]
  }
}
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b48:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b4a:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b50:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008b52:	400b      	ands	r3, r1
 8008b54:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8008b56:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008b5a:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008b64:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008b68:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 8008b6a:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8008b6c:	6582      	str	r2, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e9      	bne.n	8008b46 <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b72:	6802      	ldr	r2, [r0, #0]
 8008b74:	6811      	ldr	r1, [r2, #0]
 8008b76:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008b7a:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7c:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008b7e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b80:	f021 0101 	bic.w	r1, r1, #1
 8008b84:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008b86:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008b8c:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8e:	2901      	cmp	r1, #1
 8008b90:	d004      	beq.n	8008b9c <UART_RxISR_8BIT+0x6c>
        HAL_UART_RxCpltCallback(huart);
 8008b92:	f7fb fdd5 	bl	8004740 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	2300      	movs	r3, #0
 8008b98:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b9c:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b9e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba2:	f023 0310 	bic.w	r3, r3, #16
 8008ba6:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ba8:	f7ff fe5a 	bl	8008860 <HAL_UARTEx_RxEventCallback>
 8008bac:	e7f3      	b.n	8008b96 <UART_RxISR_8BIT+0x66>
 8008bae:	bf00      	nop

08008bb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bb0:	b538      	push	{r3, r4, r5, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bb6:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb8:	2b22      	cmp	r3, #34	; 0x22
{
 8008bba:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bbc:	d004      	beq.n	8008bc8 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bbe:	6993      	ldr	r3, [r2, #24]
 8008bc0:	f043 0308 	orr.w	r3, r3, #8
 8008bc4:	6193      	str	r3, [r2, #24]
  }
}
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bc8:	6a53      	ldr	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bca:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8008bce:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008bd0:	402b      	ands	r3, r5
 8008bd2:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 8008bd6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8008bda:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008be4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1eb      	bne.n	8008bc6 <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bee:	6811      	ldr	r1, [r2, #0]
 8008bf0:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008bf4:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf6:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008bf8:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfa:	f021 0101 	bic.w	r1, r1, #1
 8008bfe:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008c00:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c04:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008c06:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c08:	2901      	cmp	r1, #1
 8008c0a:	d004      	beq.n	8008c16 <UART_RxISR_16BIT+0x66>
        HAL_UART_RxCpltCallback(huart);
 8008c0c:	f7fb fd98 	bl	8004740 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c10:	2300      	movs	r3, #0
 8008c12:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008c14:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c16:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c18:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1c:	f023 0310 	bic.w	r3, r3, #16
 8008c20:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c22:	f7ff fe1d 	bl	8008860 <HAL_UARTEx_RxEventCallback>
 8008c26:	e7f3      	b.n	8008c10 <UART_RxISR_16BIT+0x60>

08008c28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c2c:	6803      	ldr	r3, [r0, #0]
 8008c2e:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c30:	681f      	ldr	r7, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c32:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c34:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008c38:	2a22      	cmp	r2, #34	; 0x22
 8008c3a:	d005      	beq.n	8008c48 <UART_RxISR_8BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	f042 0208 	orr.w	r2, r2, #8
 8008c42:	619a      	str	r2, [r3, #24]
  }
}
 8008c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c48:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	2a00      	cmp	r2, #0
 8008c50:	f000 809c 	beq.w	8008d8c <UART_RxISR_8BIT_FIFOEN+0x164>
 8008c54:	068a      	lsls	r2, r1, #26
 8008c56:	f140 8082 	bpl.w	8008d5e <UART_RxISR_8BIT_FIFOEN+0x136>
 8008c5a:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c5e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8008d98 <UART_RxISR_8BIT_FIFOEN+0x170>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c62:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c66:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6a:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c6e:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c74:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008c76:	402b      	ands	r3, r5
 8008c78:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8008c7a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c7e:	6821      	ldr	r1, [r4, #0]
      huart->pRxBuffPtr++;
 8008c80:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008c82:	3b01      	subs	r3, #1
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c8a:	f8d1 b01c 	ldr.w	fp, [r1, #28]
      huart->pRxBuffPtr++;
 8008c8e:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c90:	f01b 0f07 	tst.w	fp, #7
      huart->pRxBuffPtr++;
 8008c94:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c96:	d026      	beq.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0xbe>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c98:	f01b 0f01 	tst.w	fp, #1
 8008c9c:	d008      	beq.n	8008cb0 <UART_RxISR_8BIT_FIFOEN+0x88>
 8008c9e:	b13f      	cbz	r7, 8008cb0 <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ca4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cb0:	f01b 0f02 	tst.w	fp, #2
 8008cb4:	d035      	beq.n	8008d22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008cb6:	b196      	cbz	r6, 8008cde <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cb8:	2302      	movs	r3, #2
 8008cba:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cbc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cc0:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cc4:	f043 0304 	orr.w	r3, r3, #4
 8008cc8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ccc:	d007      	beq.n	8008cde <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cce:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cd2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008cd6:	f043 0302 	orr.w	r3, r3, #2
 8008cda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cde:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d135      	bne.n	8008d52 <UART_RxISR_8BIT_FIFOEN+0x12a>
      if (huart->RxXferCount == 0U)
 8008ce6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	b9a3      	cbnz	r3, 8008d18 <UART_RxISR_8BIT_FIFOEN+0xf0>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	6811      	ldr	r1, [r2, #0]
 8008cf2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008cf6:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cf8:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cfc:	ea01 0109 	and.w	r1, r1, r9
 8008d00:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008d02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d06:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8008d08:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d0a:	2901      	cmp	r1, #1
 8008d0c:	d017      	beq.n	8008d3e <UART_RxISR_8BIT_FIFOEN+0x116>
          HAL_UART_RxCpltCallback(huart);
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7fb fd16 	bl	8004740 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d14:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d18:	f01b 0f20 	tst.w	fp, #32
 8008d1c:	d01f      	beq.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0x136>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	e7a7      	b.n	8008c72 <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d22:	f01b 0f04 	tst.w	fp, #4
 8008d26:	d0da      	beq.n	8008cde <UART_RxISR_8BIT_FIFOEN+0xb6>
 8008d28:	2e00      	cmp	r6, #0
 8008d2a:	d0d8      	beq.n	8008cde <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d2c:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d30:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008d34:	f043 0302 	orr.w	r3, r3, #2
 8008d38:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008d3c:	e7cf      	b.n	8008cde <UART_RxISR_8BIT_FIFOEN+0xb6>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3e:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d40:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d44:	f023 0310 	bic.w	r3, r3, #16
 8008d48:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7ff fd88 	bl	8008860 <HAL_UARTEx_RxEventCallback>
 8008d50:	e7e0      	b.n	8008d14 <UART_RxISR_8BIT_FIFOEN+0xec>
          HAL_UART_ErrorCallback(huart);
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7ff fd78 	bl	8008848 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d58:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8008d5c:	e7c3      	b.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0xbe>
    rxdatacount = huart->RxXferCount;
 8008d5e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008d62:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f43f af6d 	beq.w	8008c44 <UART_RxISR_8BIT_FIFOEN+0x1c>
 8008d6a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	f67f af68 	bls.w	8008c44 <UART_RxISR_8BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d74:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8008d76:	4907      	ldr	r1, [pc, #28]	; (8008d94 <UART_RxISR_8BIT_FIFOEN+0x16c>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008d7e:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d80:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8008d82:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d84:	f042 0220 	orr.w	r2, r2, #32
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	e75b      	b.n	8008c44 <UART_RxISR_8BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8008d8c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d90:	e758      	b.n	8008c44 <UART_RxISR_8BIT_FIFOEN+0x1c>
 8008d92:	bf00      	nop
 8008d94:	08008b31 	.word	0x08008b31
 8008d98:	effffffe 	.word	0xeffffffe

08008d9c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d9c:	6802      	ldr	r2, [r0, #0]
{
 8008d9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008da2:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008da4:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008da6:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008da8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008dac:	2b22      	cmp	r3, #34	; 0x22
 8008dae:	d005      	beq.n	8008dbc <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008db0:	6993      	ldr	r3, [r2, #24]
 8008db2:	f043 0308 	orr.w	r3, r3, #8
 8008db6:	6193      	str	r3, [r2, #24]
  }
}
 8008db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dbc:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8099 	beq.w	8008efa <UART_RxISR_16BIT_FIFOEN+0x15e>
 8008dc8:	068b      	lsls	r3, r1, #26
 8008dca:	d57f      	bpl.n	8008ecc <UART_RxISR_16BIT_FIFOEN+0x130>
  uint16_t  uhMask = huart->Mask;
 8008dcc:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dd0:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8008f04 <UART_RxISR_16BIT_FIFOEN+0x168>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dd4:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dd8:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ddc:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008de0:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008de4:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8008de6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008de8:	402b      	ands	r3, r5
 8008dea:	f821 3b02 	strh.w	r3, [r1], #2
      huart->RxXferCount--;
 8008dee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8008df2:	65a1      	str	r1, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008dfc:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e00:	f01b 0f07 	tst.w	fp, #7
 8008e04:	d026      	beq.n	8008e54 <UART_RxISR_16BIT_FIFOEN+0xb8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e06:	f01b 0f01 	tst.w	fp, #1
 8008e0a:	d008      	beq.n	8008e1e <UART_RxISR_16BIT_FIFOEN+0x82>
 8008e0c:	b13f      	cbz	r7, 8008e1e <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e0e:	2301      	movs	r3, #1
 8008e10:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e12:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e1e:	f01b 0f02 	tst.w	fp, #2
 8008e22:	d035      	beq.n	8008e90 <UART_RxISR_16BIT_FIFOEN+0xf4>
 8008e24:	b196      	cbz	r6, 8008e4c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e26:	2302      	movs	r3, #2
 8008e28:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e2a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e2e:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e32:	f043 0304 	orr.w	r3, r3, #4
 8008e36:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e3a:	d007      	beq.n	8008e4c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e3c:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e40:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008e44:	f043 0302 	orr.w	r3, r3, #2
 8008e48:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e4c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d135      	bne.n	8008ec0 <UART_RxISR_16BIT_FIFOEN+0x124>
      if (huart->RxXferCount == 0U)
 8008e54:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	b9a3      	cbnz	r3, 8008e86 <UART_RxISR_16BIT_FIFOEN+0xea>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e5c:	6822      	ldr	r2, [r4, #0]
 8008e5e:	6811      	ldr	r1, [r2, #0]
 8008e60:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008e64:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e66:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008e68:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e6a:	ea01 0109 	and.w	r1, r1, r9
 8008e6e:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008e70:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e74:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8008e76:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e78:	2901      	cmp	r1, #1
 8008e7a:	d017      	beq.n	8008eac <UART_RxISR_16BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f7fb fc5f 	bl	8004740 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e82:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e86:	f01b 0f20 	tst.w	fp, #32
 8008e8a:	d01f      	beq.n	8008ecc <UART_RxISR_16BIT_FIFOEN+0x130>
 8008e8c:	6822      	ldr	r2, [r4, #0]
 8008e8e:	e7a9      	b.n	8008de4 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e90:	f01b 0f04 	tst.w	fp, #4
 8008e94:	d0da      	beq.n	8008e4c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8008e96:	2e00      	cmp	r6, #0
 8008e98:	d0d8      	beq.n	8008e4c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e9a:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e9e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008ea2:	f043 0302 	orr.w	r3, r3, #2
 8008ea6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008eaa:	e7cf      	b.n	8008e4c <UART_RxISR_16BIT_FIFOEN+0xb0>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eac:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb2:	f023 0310 	bic.w	r3, r3, #16
 8008eb6:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7ff fcd1 	bl	8008860 <HAL_UARTEx_RxEventCallback>
 8008ebe:	e7e0      	b.n	8008e82 <UART_RxISR_16BIT_FIFOEN+0xe6>
          HAL_UART_ErrorCallback(huart);
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f7ff fcc1 	bl	8008848 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec6:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8008eca:	e7c3      	b.n	8008e54 <UART_RxISR_16BIT_FIFOEN+0xb8>
    rxdatacount = huart->RxXferCount;
 8008ecc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008ed0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f43f af70 	beq.w	8008db8 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8008ed8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008edc:	429a      	cmp	r2, r3
 8008ede:	f67f af6b 	bls.w	8008db8 <UART_RxISR_16BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ee2:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008ee4:	4906      	ldr	r1, [pc, #24]	; (8008f00 <UART_RxISR_16BIT_FIFOEN+0x164>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008eec:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eee:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008ef0:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ef2:	f042 0220 	orr.w	r2, r2, #32
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e75e      	b.n	8008db8 <UART_RxISR_16BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8008efa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008efe:	e75b      	b.n	8008db8 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8008f00:	08008bb1 	.word	0x08008bb1
 8008f04:	effffffe 	.word	0xeffffffe

08008f08 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008f0a:	07da      	lsls	r2, r3, #31
{
 8008f0c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f0e:	d506      	bpl.n	8008f1e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f10:	6801      	ldr	r1, [r0, #0]
 8008f12:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008f14:	684a      	ldr	r2, [r1, #4]
 8008f16:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008f1a:	4322      	orrs	r2, r4
 8008f1c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f1e:	079c      	lsls	r4, r3, #30
 8008f20:	d506      	bpl.n	8008f30 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f22:	6801      	ldr	r1, [r0, #0]
 8008f24:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008f26:	684a      	ldr	r2, [r1, #4]
 8008f28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f2c:	4322      	orrs	r2, r4
 8008f2e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f30:	0759      	lsls	r1, r3, #29
 8008f32:	d506      	bpl.n	8008f42 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f34:	6801      	ldr	r1, [r0, #0]
 8008f36:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008f38:	684a      	ldr	r2, [r1, #4]
 8008f3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f3e:	4322      	orrs	r2, r4
 8008f40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f42:	071a      	lsls	r2, r3, #28
 8008f44:	d506      	bpl.n	8008f54 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f46:	6801      	ldr	r1, [r0, #0]
 8008f48:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008f4a:	684a      	ldr	r2, [r1, #4]
 8008f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f50:	4322      	orrs	r2, r4
 8008f52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f54:	06dc      	lsls	r4, r3, #27
 8008f56:	d506      	bpl.n	8008f66 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f58:	6801      	ldr	r1, [r0, #0]
 8008f5a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008f5c:	688a      	ldr	r2, [r1, #8]
 8008f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f62:	4322      	orrs	r2, r4
 8008f64:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f66:	0699      	lsls	r1, r3, #26
 8008f68:	d506      	bpl.n	8008f78 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f6a:	6801      	ldr	r1, [r0, #0]
 8008f6c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008f6e:	688a      	ldr	r2, [r1, #8]
 8008f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f74:	4322      	orrs	r2, r4
 8008f76:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f78:	065a      	lsls	r2, r3, #25
 8008f7a:	d509      	bpl.n	8008f90 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f7c:	6801      	ldr	r1, [r0, #0]
 8008f7e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008f80:	684a      	ldr	r2, [r1, #4]
 8008f82:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008f86:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f88:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f8c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f8e:	d00b      	beq.n	8008fa8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f90:	061b      	lsls	r3, r3, #24
 8008f92:	d506      	bpl.n	8008fa2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f94:	6802      	ldr	r2, [r0, #0]
 8008f96:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008f98:	6853      	ldr	r3, [r2, #4]
 8008f9a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	6053      	str	r3, [r2, #4]
}
 8008fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fa8:	684a      	ldr	r2, [r1, #4]
 8008faa:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008fac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008fb0:	4322      	orrs	r2, r4
 8008fb2:	604a      	str	r2, [r1, #4]
 8008fb4:	e7ec      	b.n	8008f90 <UART_AdvFeatureConfig+0x88>
 8008fb6:	bf00      	nop

08008fb8 <UART_CheckIdleState>:
{
 8008fb8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fba:	2300      	movs	r3, #0
{
 8008fbc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fbe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8008fc2:	f7fb fc33 	bl	800482c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8008fcc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fce:	d40d      	bmi.n	8008fec <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	0752      	lsls	r2, r2, #29
 8008fd4:	d431      	bmi.n	800903a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008fd8:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8008fda:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8008fde:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 8008fe2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fec:	69da      	ldr	r2, [r3, #28]
 8008fee:	0292      	lsls	r2, r2, #10
 8008ff0:	d4ee      	bmi.n	8008fd0 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff2:	f7fb fc1b 	bl	800482c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ff6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff8:	1b40      	subs	r0, r0, r5
 8008ffa:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ffe:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009000:	d22c      	bcs.n	800905c <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009002:	0750      	lsls	r0, r2, #29
 8009004:	d5f2      	bpl.n	8008fec <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009006:	69da      	ldr	r2, [r3, #28]
 8009008:	0511      	lsls	r1, r2, #20
 800900a:	d5ef      	bpl.n	8008fec <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800900c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009010:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009018:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901a:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 800901c:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901e:	f021 0101 	bic.w	r1, r1, #1
 8009022:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009024:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8009026:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800902a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800902e:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8009030:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009034:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8009038:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	0258      	lsls	r0, r3, #9
 800903e:	d4ca      	bmi.n	8008fd6 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009040:	f7fb fbf4 	bl	800482c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009044:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009046:	1b40      	subs	r0, r0, r5
 8009048:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800904c:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800904e:	d205      	bcs.n	800905c <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009050:	0751      	lsls	r1, r2, #29
 8009052:	d5f2      	bpl.n	800903a <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009054:	69da      	ldr	r2, [r3, #28]
 8009056:	0512      	lsls	r2, r2, #20
 8009058:	d5ef      	bpl.n	800903a <UART_CheckIdleState+0x82>
 800905a:	e7d7      	b.n	800900c <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800905c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009060:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009062:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8009064:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009066:	f022 0201 	bic.w	r2, r2, #1
 800906a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800906c:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800906e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8009072:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8009076:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8009078:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop

08009080 <HAL_UART_Init>:
  if (huart == NULL)
 8009080:	2800      	cmp	r0, #0
 8009082:	f000 81b5 	beq.w	80093f0 <HAL_UART_Init+0x370>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009086:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800908a:	b570      	push	{r4, r5, r6, lr}
 800908c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800908e:	2b00      	cmp	r3, #0
 8009090:	d06c      	beq.n	800916c <HAL_UART_Init+0xec>
  __HAL_UART_DISABLE(huart);
 8009092:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009094:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009096:	49c0      	ldr	r1, [pc, #768]	; (8009398 <HAL_UART_Init+0x318>)
  huart->gState = HAL_UART_STATE_BUSY;
 8009098:	2224      	movs	r2, #36	; 0x24
 800909a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800909e:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090a0:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80090a2:	f020 0001 	bic.w	r0, r0, #1
 80090a6:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090a8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090aa:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090ac:	4332      	orrs	r2, r6
 80090ae:	4302      	orrs	r2, r0
 80090b0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b2:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090b4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b6:	430a      	orrs	r2, r1
 80090b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090be:	49b7      	ldr	r1, [pc, #732]	; (800939c <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80090c4:	432a      	orrs	r2, r5
 80090c6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090c8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090ca:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090cc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090ce:	d052      	beq.n	8009176 <HAL_UART_Init+0xf6>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090d0:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090d4:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80090d8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80090dc:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090de:	430a      	orrs	r2, r1
 80090e0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090e4:	49ae      	ldr	r1, [pc, #696]	; (80093a0 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090e6:	f022 020f 	bic.w	r2, r2, #15
 80090ea:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ec:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090ee:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090f0:	d028      	beq.n	8009144 <HAL_UART_Init+0xc4>
 80090f2:	4aac      	ldr	r2, [pc, #688]	; (80093a4 <HAL_UART_Init+0x324>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	f000 8091 	beq.w	800921c <HAL_UART_Init+0x19c>
 80090fa:	4aab      	ldr	r2, [pc, #684]	; (80093a8 <HAL_UART_Init+0x328>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	f000 8165 	beq.w	80093cc <HAL_UART_Init+0x34c>
 8009102:	4aaa      	ldr	r2, [pc, #680]	; (80093ac <HAL_UART_Init+0x32c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	f000 80e4 	beq.w	80092d2 <HAL_UART_Init+0x252>
 800910a:	4aa9      	ldr	r2, [pc, #676]	; (80093b0 <HAL_UART_Init+0x330>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d111      	bne.n	8009134 <HAL_UART_Init+0xb4>
 8009110:	4ba8      	ldr	r3, [pc, #672]	; (80093b4 <HAL_UART_Init+0x334>)
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800911a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800911e:	f000 817d 	beq.w	800941c <HAL_UART_Init+0x39c>
 8009122:	f200 8101 	bhi.w	8009328 <HAL_UART_Init+0x2a8>
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80e7 	beq.w	80092fa <HAL_UART_Init+0x27a>
 800912c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009130:	f000 80dd 	beq.w	80092ee <HAL_UART_Init+0x26e>
  huart->NbRxDataToProcess = 1;
 8009134:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8009138:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800913a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800913e:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8009140:	2001      	movs	r0, #1
 8009142:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009144:	4b9b      	ldr	r3, [pc, #620]	; (80093b4 <HAL_UART_Init+0x334>)
 8009146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	3b01      	subs	r3, #1
 8009150:	2b02      	cmp	r3, #2
 8009152:	f240 80d9 	bls.w	8009308 <HAL_UART_Init+0x288>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009156:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800915a:	f000 8151 	beq.w	8009400 <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetPCLK2Freq();
 800915e:	f7fd ff35 	bl	8006fcc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009162:	2800      	cmp	r0, #0
 8009164:	f000 80d3 	beq.w	800930e <HAL_UART_Init+0x28e>
 8009168:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800916a:	e081      	b.n	8009270 <HAL_UART_Init+0x1f0>
    huart->Lock = HAL_UNLOCKED;
 800916c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009170:	f7fb fa98 	bl	80046a4 <HAL_UART_MspInit>
 8009174:	e78d      	b.n	8009092 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009176:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800917a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800917e:	430a      	orrs	r2, r1
 8009180:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009186:	488b      	ldr	r0, [pc, #556]	; (80093b4 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009188:	f022 020f 	bic.w	r2, r2, #15
 800918c:	430a      	orrs	r2, r1
 800918e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009190:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800919c:	f000 813c 	beq.w	8009418 <HAL_UART_Init+0x398>
 80091a0:	d80c      	bhi.n	80091bc <HAL_UART_Init+0x13c>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 8132 	beq.w	800940c <HAL_UART_Init+0x38c>
 80091a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ac:	d1c2      	bne.n	8009134 <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 80091ae:	f7fd fdb1 	bl	8006d14 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f000 80ab 	beq.w	800930e <HAL_UART_Init+0x28e>
 80091b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091ba:	e004      	b.n	80091c6 <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091c0:	d1b8      	bne.n	8009134 <HAL_UART_Init+0xb4>
        pclk = (uint32_t) LSE_VALUE;
 80091c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091c6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091c8:	4b7b      	ldr	r3, [pc, #492]	; (80093b8 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091ca:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091ce:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80091d2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091d6:	42b3      	cmp	r3, r6
 80091d8:	d3ac      	bcc.n	8009134 <HAL_UART_Init+0xb4>
 80091da:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80091de:	d8a9      	bhi.n	8009134 <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e0:	2600      	movs	r6, #0
 80091e2:	2300      	movs	r3, #0
 80091e4:	4631      	mov	r1, r6
 80091e6:	f7f7 fd77 	bl	8000cd8 <__aeabi_uldivmod>
 80091ea:	020b      	lsls	r3, r1, #8
 80091ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091f0:	0202      	lsls	r2, r0, #8
 80091f2:	0868      	lsrs	r0, r5, #1
 80091f4:	1810      	adds	r0, r2, r0
 80091f6:	f143 0100 	adc.w	r1, r3, #0
 80091fa:	462a      	mov	r2, r5
 80091fc:	4633      	mov	r3, r6
 80091fe:	f7f7 fd6b 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009202:	4b6e      	ldr	r3, [pc, #440]	; (80093bc <HAL_UART_Init+0x33c>)
 8009204:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009208:	429a      	cmp	r2, r3
 800920a:	d893      	bhi.n	8009134 <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 800920c:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800920e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8009212:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8009214:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009218:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 800921a:	e043      	b.n	80092a4 <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800921c:	4b65      	ldr	r3, [pc, #404]	; (80093b4 <HAL_UART_Init+0x334>)
 800921e:	4a68      	ldr	r2, [pc, #416]	; (80093c0 <HAL_UART_Init+0x340>)
 8009220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009224:	f003 030c 	and.w	r3, r3, #12
 8009228:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800922a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800922e:	d07f      	beq.n	8009330 <HAL_UART_Init+0x2b0>
    switch (clocksource)
 8009230:	2b08      	cmp	r3, #8
 8009232:	f63f af7f 	bhi.w	8009134 <HAL_UART_Init+0xb4>
 8009236:	a201      	add	r2, pc, #4	; (adr r2, 800923c <HAL_UART_Init+0x1bc>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	08009303 	.word	0x08009303
 8009240:	0800915f 	.word	0x0800915f
 8009244:	080092cf 	.word	0x080092cf
 8009248:	08009135 	.word	0x08009135
 800924c:	080092f5 	.word	0x080092f5
 8009250:	08009135 	.word	0x08009135
 8009254:	08009135 	.word	0x08009135
 8009258:	08009135 	.word	0x08009135
 800925c:	0800926d 	.word	0x0800926d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009260:	2b30      	cmp	r3, #48	; 0x30
 8009262:	f47f af67 	bne.w	8009134 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009266:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800926a:	d07a      	beq.n	8009362 <HAL_UART_Init+0x2e2>
 800926c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009270:	6862      	ldr	r2, [r4, #4]
 8009272:	4b51      	ldr	r3, [pc, #324]	; (80093b8 <HAL_UART_Init+0x338>)
 8009274:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8009278:	fbb0 f3f3 	udiv	r3, r0, r3
 800927c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009280:	fbb3 f3f2 	udiv	r3, r3, r2
 8009284:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009286:	f1a3 0110 	sub.w	r1, r3, #16
 800928a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800928e:	4291      	cmp	r1, r2
 8009290:	f63f af50 	bhi.w	8009134 <HAL_UART_Init+0xb4>
        huart->Instance->BRR = usartdiv;
 8009294:	6820      	ldr	r0, [r4, #0]
 8009296:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8009298:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800929a:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800929e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092a2:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d13a      	bne.n	8009320 <HAL_UART_Init+0x2a0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092ba:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80092c2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80092c4:	601a      	str	r2, [r3, #0]
}
 80092c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 80092ca:	f7ff be75 	b.w	8008fb8 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 80092ce:	483d      	ldr	r0, [pc, #244]	; (80093c4 <HAL_UART_Init+0x344>)
 80092d0:	e7ce      	b.n	8009270 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092d2:	4b38      	ldr	r3, [pc, #224]	; (80093b4 <HAL_UART_Init+0x334>)
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80092dc:	2b80      	cmp	r3, #128	; 0x80
 80092de:	f000 809d 	beq.w	800941c <HAL_UART_Init+0x39c>
 80092e2:	f200 8081 	bhi.w	80093e8 <HAL_UART_Init+0x368>
 80092e6:	b143      	cbz	r3, 80092fa <HAL_UART_Init+0x27a>
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	f47f af23 	bne.w	8009134 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80092f2:	d07f      	beq.n	80093f4 <HAL_UART_Init+0x374>
        pclk = HAL_RCC_GetSysClockFreq();
 80092f4:	f7fd fd0e 	bl	8006d14 <HAL_RCC_GetSysClockFreq>
        break;
 80092f8:	e733      	b.n	8009162 <HAL_UART_Init+0xe2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80092fe:	f000 8082 	beq.w	8009406 <HAL_UART_Init+0x386>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009302:	f7fd fe51 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
        break;
 8009306:	e72c      	b.n	8009162 <HAL_UART_Init+0xe2>
 8009308:	4a2f      	ldr	r2, [pc, #188]	; (80093c8 <HAL_UART_Init+0x348>)
 800930a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800930c:	e78d      	b.n	800922a <HAL_UART_Init+0x1aa>
  huart->RxISR = NULL;
 800930e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8009310:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8009316:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800931a:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0c4      	beq.n	80092aa <HAL_UART_Init+0x22a>
    UART_AdvFeatureConfig(huart);
 8009320:	4620      	mov	r0, r4
 8009322:	f7ff fdf1 	bl	8008f08 <UART_AdvFeatureConfig>
 8009326:	e7c0      	b.n	80092aa <HAL_UART_Init+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800932c:	d09b      	beq.n	8009266 <HAL_UART_Init+0x1e6>
 800932e:	e701      	b.n	8009134 <HAL_UART_Init+0xb4>
    switch (clocksource)
 8009330:	2b08      	cmp	r3, #8
 8009332:	f63f aeff 	bhi.w	8009134 <HAL_UART_Init+0xb4>
 8009336:	a201      	add	r2, pc, #4	; (adr r2, 800933c <HAL_UART_Init+0x2bc>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	08009407 	.word	0x08009407
 8009340:	08009401 	.word	0x08009401
 8009344:	08009361 	.word	0x08009361
 8009348:	08009135 	.word	0x08009135
 800934c:	080093f5 	.word	0x080093f5
 8009350:	08009135 	.word	0x08009135
 8009354:	08009135 	.word	0x08009135
 8009358:	08009135 	.word	0x08009135
 800935c:	08009363 	.word	0x08009363
        pclk = (uint32_t) HSI_VALUE;
 8009360:	4818      	ldr	r0, [pc, #96]	; (80093c4 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009362:	6862      	ldr	r2, [r4, #4]
 8009364:	4914      	ldr	r1, [pc, #80]	; (80093b8 <HAL_UART_Init+0x338>)
 8009366:	0853      	lsrs	r3, r2, #1
 8009368:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 800936c:	fbb0 f0f1 	udiv	r0, r0, r1
 8009370:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009374:	fbb0 f0f2 	udiv	r0, r0, r2
 8009378:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800937a:	f1a2 0110 	sub.w	r1, r2, #16
 800937e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8009382:	4299      	cmp	r1, r3
 8009384:	f63f aed6 	bhi.w	8009134 <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009388:	f020 030f 	bic.w	r3, r0, #15
 800938c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800938e:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8009392:	6820      	ldr	r0, [r4, #0]
 8009394:	4313      	orrs	r3, r2
 8009396:	e77e      	b.n	8009296 <HAL_UART_Init+0x216>
 8009398:	cfff69f3 	.word	0xcfff69f3
 800939c:	40008000 	.word	0x40008000
 80093a0:	40013800 	.word	0x40013800
 80093a4:	40004400 	.word	0x40004400
 80093a8:	40004800 	.word	0x40004800
 80093ac:	40004c00 	.word	0x40004c00
 80093b0:	40005000 	.word	0x40005000
 80093b4:	40021000 	.word	0x40021000
 80093b8:	0800f4fc 	.word	0x0800f4fc
 80093bc:	000ffcff 	.word	0x000ffcff
 80093c0:	0800f4ec 	.word	0x0800f4ec
 80093c4:	00f42400 	.word	0x00f42400
 80093c8:	0800f4e8 	.word	0x0800f4e8
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093cc:	4b16      	ldr	r3, [pc, #88]	; (8009428 <HAL_UART_Init+0x3a8>)
 80093ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d020      	beq.n	800941c <HAL_UART_Init+0x39c>
 80093da:	f63f af41 	bhi.w	8009260 <HAL_UART_Init+0x1e0>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d08b      	beq.n	80092fa <HAL_UART_Init+0x27a>
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d083      	beq.n	80092ee <HAL_UART_Init+0x26e>
 80093e6:	e6a5      	b.n	8009134 <HAL_UART_Init+0xb4>
 80093e8:	2bc0      	cmp	r3, #192	; 0xc0
 80093ea:	f43f af3c 	beq.w	8009266 <HAL_UART_Init+0x1e6>
 80093ee:	e6a1      	b.n	8009134 <HAL_UART_Init+0xb4>
}
 80093f0:	2001      	movs	r0, #1
 80093f2:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 80093f4:	f7fd fc8e 	bl	8006d14 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d088      	beq.n	800930e <HAL_UART_Init+0x28e>
 80093fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80093fe:	e7b0      	b.n	8009362 <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009400:	f7fd fde4 	bl	8006fcc <HAL_RCC_GetPCLK2Freq>
        break;
 8009404:	e7f8      	b.n	80093f8 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009406:	f7fd fdcf 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
        break;
 800940a:	e7f5      	b.n	80093f8 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 800940c:	f7fd fdcc 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009410:	2800      	cmp	r0, #0
 8009412:	f43f af7c 	beq.w	800930e <HAL_UART_Init+0x28e>
 8009416:	e6cf      	b.n	80091b8 <HAL_UART_Init+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009418:	4804      	ldr	r0, [pc, #16]	; (800942c <HAL_UART_Init+0x3ac>)
 800941a:	e6d4      	b.n	80091c6 <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800941c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009420:	4802      	ldr	r0, [pc, #8]	; (800942c <HAL_UART_Init+0x3ac>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009422:	f47f af25 	bne.w	8009270 <HAL_UART_Init+0x1f0>
 8009426:	e79c      	b.n	8009362 <HAL_UART_Init+0x2e2>
 8009428:	40021000 	.word	0x40021000
 800942c:	00f42400 	.word	0x00f42400

08009430 <UART_WaitOnFlagUntilTimeout>:
{
 8009430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009438:	6804      	ldr	r4, [r0, #0]
 800943a:	4607      	mov	r7, r0
 800943c:	460e      	mov	r6, r1
 800943e:	4615      	mov	r5, r2
 8009440:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009442:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009446:	d10a      	bne.n	800945e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009448:	69e3      	ldr	r3, [r4, #28]
 800944a:	ea36 0303 	bics.w	r3, r6, r3
 800944e:	bf0c      	ite	eq
 8009450:	2301      	moveq	r3, #1
 8009452:	2300      	movne	r3, #0
 8009454:	429d      	cmp	r5, r3
 8009456:	d0f7      	beq.n	8009448 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8009458:	2000      	movs	r0, #0
}
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800945e:	69e3      	ldr	r3, [r4, #28]
 8009460:	ea36 0303 	bics.w	r3, r6, r3
 8009464:	bf0c      	ite	eq
 8009466:	2301      	moveq	r3, #1
 8009468:	2300      	movne	r3, #0
 800946a:	429d      	cmp	r5, r3
 800946c:	d1f4      	bne.n	8009458 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946e:	f7fb f9dd 	bl	800482c <HAL_GetTick>
 8009472:	eba0 0009 	sub.w	r0, r0, r9
 8009476:	4540      	cmp	r0, r8
 8009478:	d820      	bhi.n	80094bc <UART_WaitOnFlagUntilTimeout+0x8c>
 800947a:	f1b8 0f00 	cmp.w	r8, #0
 800947e:	d01d      	beq.n	80094bc <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009480:	683c      	ldr	r4, [r7, #0]
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	075a      	lsls	r2, r3, #29
 8009486:	d5dc      	bpl.n	8009442 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009488:	69e3      	ldr	r3, [r4, #28]
 800948a:	051b      	lsls	r3, r3, #20
 800948c:	d5d9      	bpl.n	8009442 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800948e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009492:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800949a:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949c:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800949e:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a0:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 80094a4:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a6:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 80094a8:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 80094aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80094ae:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80094b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 80094ba:	e7ce      	b.n	800945a <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c6:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80094c8:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ca:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 80094ce:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d0:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80094d2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80094d4:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80094d8:	f887 4080 	strb.w	r4, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80094dc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80094e0:	e7bb      	b.n	800945a <UART_WaitOnFlagUntilTimeout+0x2a>
 80094e2:	bf00      	nop

080094e4 <HAL_UART_Transmit>:
{
 80094e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094e8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80094ea:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80094ee:	2820      	cmp	r0, #32
{
 80094f0:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80094f2:	d17b      	bne.n	80095ec <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 80094f4:	4688      	mov	r8, r1
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d048      	beq.n	800958c <HAL_UART_Transmit+0xa8>
 80094fa:	4617      	mov	r7, r2
 80094fc:	2a00      	cmp	r2, #0
 80094fe:	d045      	beq.n	800958c <HAL_UART_Transmit+0xa8>
 8009500:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8009502:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009506:	2b01      	cmp	r3, #1
 8009508:	d070      	beq.n	80095ec <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800950a:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800950c:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800950e:	f04f 0900 	mov.w	r9, #0
 8009512:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 8009516:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800951a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 800951e:	f7fb f985 	bl	800482c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009522:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8009524:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800952c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800952e:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009532:	d05f      	beq.n	80095f4 <HAL_UART_Transmit+0x110>
      pdata16bits = NULL;
 8009534:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8009536:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 800953a:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800953c:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800953e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009542:	b1b3      	cbz	r3, 8009572 <HAL_UART_Transmit+0x8e>
 8009544:	6822      	ldr	r2, [r4, #0]
 8009546:	1c69      	adds	r1, r5, #1
 8009548:	d124      	bne.n	8009594 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800954a:	69d3      	ldr	r3, [r2, #28]
 800954c:	061b      	lsls	r3, r3, #24
 800954e:	d5fc      	bpl.n	800954a <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8009550:	f1b8 0f00 	cmp.w	r8, #0
 8009554:	d045      	beq.n	80095e2 <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009556:	f818 3b01 	ldrb.w	r3, [r8], #1
 800955a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800955c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8009560:	3b01      	subs	r3, #1
 8009562:	b29b      	uxth	r3, r3
 8009564:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009568:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1e9      	bne.n	8009546 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009572:	9500      	str	r5, [sp, #0]
 8009574:	4633      	mov	r3, r6
 8009576:	2200      	movs	r2, #0
 8009578:	2140      	movs	r1, #64	; 0x40
 800957a:	4620      	mov	r0, r4
 800957c:	f7ff ff58 	bl	8009430 <UART_WaitOnFlagUntilTimeout>
 8009580:	2800      	cmp	r0, #0
 8009582:	d152      	bne.n	800962a <HAL_UART_Transmit+0x146>
    huart->gState = HAL_UART_STATE_READY;
 8009584:	2320      	movs	r3, #32
 8009586:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 800958a:	e000      	b.n	800958e <HAL_UART_Transmit+0xaa>
      return  HAL_ERROR;
 800958c:	2001      	movs	r0, #1
}
 800958e:	b003      	add	sp, #12
 8009590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009594:	69d3      	ldr	r3, [r2, #28]
 8009596:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 800959a:	d1d9      	bne.n	8009550 <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800959c:	f7fb f946 	bl	800482c <HAL_GetTick>
 80095a0:	1b80      	subs	r0, r0, r6
 80095a2:	4285      	cmp	r5, r0
 80095a4:	d32c      	bcc.n	8009600 <HAL_UART_Transmit+0x11c>
 80095a6:	b35d      	cbz	r5, 8009600 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	075b      	lsls	r3, r3, #29
 80095ae:	d5ca      	bpl.n	8009546 <HAL_UART_Transmit+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095b0:	69d3      	ldr	r3, [r2, #28]
 80095b2:	0518      	lsls	r0, r3, #20
 80095b4:	d5c7      	bpl.n	8009546 <HAL_UART_Transmit+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095ba:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80095bc:	6813      	ldr	r3, [r2, #0]
 80095be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095c2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c4:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80095c6:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c8:	f021 0101 	bic.w	r1, r1, #1
 80095cc:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 80095ce:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 80095d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80095d4:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80095d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 80095e0:	e7d5      	b.n	800958e <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095e2:	f837 3b02 	ldrh.w	r3, [r7], #2
 80095e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ea:	e7b6      	b.n	800955a <HAL_UART_Transmit+0x76>
    return HAL_BUSY;
 80095ec:	2002      	movs	r0, #2
}
 80095ee:	b003      	add	sp, #12
 80095f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d19c      	bne.n	8009534 <HAL_UART_Transmit+0x50>
 80095fa:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 80095fc:	4698      	mov	r8, r3
 80095fe:	e79a      	b.n	8009536 <HAL_UART_Transmit+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800960a:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800960c:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800960e:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8009612:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8009614:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009616:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009618:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800961c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009620:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8009624:	b003      	add	sp, #12
 8009626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800962a:	2003      	movs	r0, #3
 800962c:	e7af      	b.n	800958e <HAL_UART_Transmit+0xaa>
 800962e:	bf00      	nop

08009630 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop

08009634 <HAL_UARTEx_RxFifoFullCallback>:
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop

08009638 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop

0800963c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800963c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009640:	2a01      	cmp	r2, #1
 8009642:	d017      	beq.n	8009674 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009644:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009646:	2124      	movs	r1, #36	; 0x24
{
 8009648:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800964a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 800964e:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009650:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009652:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009654:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009656:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800965a:	f024 0401 	bic.w	r4, r4, #1
 800965e:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8009660:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009662:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009664:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009666:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 800966a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800966c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009670:	bc30      	pop	{r4, r5}
 8009672:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009674:	2002      	movs	r0, #2
}
 8009676:	4770      	bx	lr

08009678 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009678:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800967c:	2a01      	cmp	r2, #1
 800967e:	d033      	beq.n	80096e8 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8009680:	4603      	mov	r3, r0
 8009682:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009684:	681a      	ldr	r2, [r3, #0]
{
 8009686:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009688:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800968e:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009690:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8009692:	f020 0001 	bic.w	r0, r0, #1
 8009696:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009698:	6890      	ldr	r0, [r2, #8]
 800969a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800969e:	4301      	orrs	r1, r0
 80096a0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096a2:	b1f5      	cbz	r5, 80096e2 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096a4:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096a6:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096a8:	4810      	ldr	r0, [pc, #64]	; (80096ec <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80096aa:	4f11      	ldr	r7, [pc, #68]	; (80096f0 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ac:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096b0:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096b2:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096b4:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80096b6:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80096b8:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ba:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096bc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096be:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096c2:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096c6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80096ca:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80096cc:	2520      	movs	r5, #32
 80096ce:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d2:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80096d4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80096d8:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80096da:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80096de:	bcf0      	pop	{r4, r5, r6, r7}
 80096e0:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80096e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80096e4:	4608      	mov	r0, r1
 80096e6:	e7ee      	b.n	80096c6 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80096e8:	2002      	movs	r0, #2
}
 80096ea:	4770      	bx	lr
 80096ec:	0800f51c 	.word	0x0800f51c
 80096f0:	0800f514 	.word	0x0800f514

080096f4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80096f4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80096f8:	2a01      	cmp	r2, #1
 80096fa:	d033      	beq.n	8009764 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80096fc:	4603      	mov	r3, r0
 80096fe:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009700:	681a      	ldr	r2, [r3, #0]
{
 8009702:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009704:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009708:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800970a:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800970c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800970e:	f020 0001 	bic.w	r0, r0, #1
 8009712:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009714:	6890      	ldr	r0, [r2, #8]
 8009716:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800971a:	4301      	orrs	r1, r0
 800971c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800971e:	b1f5      	cbz	r5, 800975e <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009720:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009722:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009724:	4810      	ldr	r0, [pc, #64]	; (8009768 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8009726:	4f11      	ldr	r7, [pc, #68]	; (800976c <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009728:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800972c:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800972e:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009730:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009732:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009734:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009736:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009738:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800973a:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800973e:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009742:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009746:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8009748:	2520      	movs	r5, #32
 800974a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800974e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009750:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009754:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009756:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800975a:	bcf0      	pop	{r4, r5, r6, r7}
 800975c:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800975e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009760:	4608      	mov	r0, r1
 8009762:	e7ee      	b.n	8009742 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8009764:	2002      	movs	r0, #2
}
 8009766:	4770      	bx	lr
 8009768:	0800f51c 	.word	0x0800f51c
 800976c:	0800f514 	.word	0x0800f514

08009770 <atof>:
 8009770:	2100      	movs	r1, #0
 8009772:	f001 bb93 	b.w	800ae9c <strtod>

08009776 <atoi>:
 8009776:	220a      	movs	r2, #10
 8009778:	2100      	movs	r1, #0
 800977a:	f001 bc1f 	b.w	800afbc <strtol>
	...

08009780 <__errno>:
 8009780:	4b01      	ldr	r3, [pc, #4]	; (8009788 <__errno+0x8>)
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	2000002c 	.word	0x2000002c

0800978c <__libc_init_array>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	4d0d      	ldr	r5, [pc, #52]	; (80097c4 <__libc_init_array+0x38>)
 8009790:	4c0d      	ldr	r4, [pc, #52]	; (80097c8 <__libc_init_array+0x3c>)
 8009792:	1b64      	subs	r4, r4, r5
 8009794:	10a4      	asrs	r4, r4, #2
 8009796:	2600      	movs	r6, #0
 8009798:	42a6      	cmp	r6, r4
 800979a:	d109      	bne.n	80097b0 <__libc_init_array+0x24>
 800979c:	4d0b      	ldr	r5, [pc, #44]	; (80097cc <__libc_init_array+0x40>)
 800979e:	4c0c      	ldr	r4, [pc, #48]	; (80097d0 <__libc_init_array+0x44>)
 80097a0:	f004 fc46 	bl	800e030 <_init>
 80097a4:	1b64      	subs	r4, r4, r5
 80097a6:	10a4      	asrs	r4, r4, #2
 80097a8:	2600      	movs	r6, #0
 80097aa:	42a6      	cmp	r6, r4
 80097ac:	d105      	bne.n	80097ba <__libc_init_array+0x2e>
 80097ae:	bd70      	pop	{r4, r5, r6, pc}
 80097b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b4:	4798      	blx	r3
 80097b6:	3601      	adds	r6, #1
 80097b8:	e7ee      	b.n	8009798 <__libc_init_array+0xc>
 80097ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80097be:	4798      	blx	r3
 80097c0:	3601      	adds	r6, #1
 80097c2:	e7f2      	b.n	80097aa <__libc_init_array+0x1e>
 80097c4:	0800fa18 	.word	0x0800fa18
 80097c8:	0800fa18 	.word	0x0800fa18
 80097cc:	0800fa18 	.word	0x0800fa18
 80097d0:	0800fa1c 	.word	0x0800fa1c

080097d4 <memcpy>:
 80097d4:	440a      	add	r2, r1
 80097d6:	4291      	cmp	r1, r2
 80097d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097dc:	d100      	bne.n	80097e0 <memcpy+0xc>
 80097de:	4770      	bx	lr
 80097e0:	b510      	push	{r4, lr}
 80097e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ea:	4291      	cmp	r1, r2
 80097ec:	d1f9      	bne.n	80097e2 <memcpy+0xe>
 80097ee:	bd10      	pop	{r4, pc}

080097f0 <memmove>:
 80097f0:	4288      	cmp	r0, r1
 80097f2:	b510      	push	{r4, lr}
 80097f4:	eb01 0402 	add.w	r4, r1, r2
 80097f8:	d902      	bls.n	8009800 <memmove+0x10>
 80097fa:	4284      	cmp	r4, r0
 80097fc:	4623      	mov	r3, r4
 80097fe:	d807      	bhi.n	8009810 <memmove+0x20>
 8009800:	1e43      	subs	r3, r0, #1
 8009802:	42a1      	cmp	r1, r4
 8009804:	d008      	beq.n	8009818 <memmove+0x28>
 8009806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800980a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800980e:	e7f8      	b.n	8009802 <memmove+0x12>
 8009810:	4402      	add	r2, r0
 8009812:	4601      	mov	r1, r0
 8009814:	428a      	cmp	r2, r1
 8009816:	d100      	bne.n	800981a <memmove+0x2a>
 8009818:	bd10      	pop	{r4, pc}
 800981a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800981e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009822:	e7f7      	b.n	8009814 <memmove+0x24>

08009824 <memset>:
 8009824:	4402      	add	r2, r0
 8009826:	4603      	mov	r3, r0
 8009828:	4293      	cmp	r3, r2
 800982a:	d100      	bne.n	800982e <memset+0xa>
 800982c:	4770      	bx	lr
 800982e:	f803 1b01 	strb.w	r1, [r3], #1
 8009832:	e7f9      	b.n	8009828 <memset+0x4>

08009834 <__cvt>:
 8009834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009838:	ec55 4b10 	vmov	r4, r5, d0
 800983c:	2d00      	cmp	r5, #0
 800983e:	460e      	mov	r6, r1
 8009840:	4619      	mov	r1, r3
 8009842:	462b      	mov	r3, r5
 8009844:	bfbb      	ittet	lt
 8009846:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800984a:	461d      	movlt	r5, r3
 800984c:	2300      	movge	r3, #0
 800984e:	232d      	movlt	r3, #45	; 0x2d
 8009850:	700b      	strb	r3, [r1, #0]
 8009852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009854:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009858:	4691      	mov	r9, r2
 800985a:	f023 0820 	bic.w	r8, r3, #32
 800985e:	bfbc      	itt	lt
 8009860:	4622      	movlt	r2, r4
 8009862:	4614      	movlt	r4, r2
 8009864:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009868:	d005      	beq.n	8009876 <__cvt+0x42>
 800986a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800986e:	d100      	bne.n	8009872 <__cvt+0x3e>
 8009870:	3601      	adds	r6, #1
 8009872:	2102      	movs	r1, #2
 8009874:	e000      	b.n	8009878 <__cvt+0x44>
 8009876:	2103      	movs	r1, #3
 8009878:	ab03      	add	r3, sp, #12
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	ab02      	add	r3, sp, #8
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	ec45 4b10 	vmov	d0, r4, r5
 8009884:	4653      	mov	r3, sl
 8009886:	4632      	mov	r2, r6
 8009888:	f001 fcee 	bl	800b268 <_dtoa_r>
 800988c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009890:	4607      	mov	r7, r0
 8009892:	d102      	bne.n	800989a <__cvt+0x66>
 8009894:	f019 0f01 	tst.w	r9, #1
 8009898:	d022      	beq.n	80098e0 <__cvt+0xac>
 800989a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800989e:	eb07 0906 	add.w	r9, r7, r6
 80098a2:	d110      	bne.n	80098c6 <__cvt+0x92>
 80098a4:	783b      	ldrb	r3, [r7, #0]
 80098a6:	2b30      	cmp	r3, #48	; 0x30
 80098a8:	d10a      	bne.n	80098c0 <__cvt+0x8c>
 80098aa:	2200      	movs	r2, #0
 80098ac:	2300      	movs	r3, #0
 80098ae:	4620      	mov	r0, r4
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7f7 f931 	bl	8000b18 <__aeabi_dcmpeq>
 80098b6:	b918      	cbnz	r0, 80098c0 <__cvt+0x8c>
 80098b8:	f1c6 0601 	rsb	r6, r6, #1
 80098bc:	f8ca 6000 	str.w	r6, [sl]
 80098c0:	f8da 3000 	ldr.w	r3, [sl]
 80098c4:	4499      	add	r9, r3
 80098c6:	2200      	movs	r2, #0
 80098c8:	2300      	movs	r3, #0
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f7 f923 	bl	8000b18 <__aeabi_dcmpeq>
 80098d2:	b108      	cbz	r0, 80098d8 <__cvt+0xa4>
 80098d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80098d8:	2230      	movs	r2, #48	; 0x30
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	454b      	cmp	r3, r9
 80098de:	d307      	bcc.n	80098f0 <__cvt+0xbc>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098e4:	1bdb      	subs	r3, r3, r7
 80098e6:	4638      	mov	r0, r7
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	b004      	add	sp, #16
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	1c59      	adds	r1, r3, #1
 80098f2:	9103      	str	r1, [sp, #12]
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	e7f0      	b.n	80098da <__cvt+0xa6>

080098f8 <__exponent>:
 80098f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098fa:	4603      	mov	r3, r0
 80098fc:	2900      	cmp	r1, #0
 80098fe:	bfb8      	it	lt
 8009900:	4249      	neglt	r1, r1
 8009902:	f803 2b02 	strb.w	r2, [r3], #2
 8009906:	bfb4      	ite	lt
 8009908:	222d      	movlt	r2, #45	; 0x2d
 800990a:	222b      	movge	r2, #43	; 0x2b
 800990c:	2909      	cmp	r1, #9
 800990e:	7042      	strb	r2, [r0, #1]
 8009910:	dd2a      	ble.n	8009968 <__exponent+0x70>
 8009912:	f10d 0407 	add.w	r4, sp, #7
 8009916:	46a4      	mov	ip, r4
 8009918:	270a      	movs	r7, #10
 800991a:	46a6      	mov	lr, r4
 800991c:	460a      	mov	r2, r1
 800991e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009922:	fb07 1516 	mls	r5, r7, r6, r1
 8009926:	3530      	adds	r5, #48	; 0x30
 8009928:	2a63      	cmp	r2, #99	; 0x63
 800992a:	f104 34ff 	add.w	r4, r4, #4294967295
 800992e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009932:	4631      	mov	r1, r6
 8009934:	dcf1      	bgt.n	800991a <__exponent+0x22>
 8009936:	3130      	adds	r1, #48	; 0x30
 8009938:	f1ae 0502 	sub.w	r5, lr, #2
 800993c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009940:	1c44      	adds	r4, r0, #1
 8009942:	4629      	mov	r1, r5
 8009944:	4561      	cmp	r1, ip
 8009946:	d30a      	bcc.n	800995e <__exponent+0x66>
 8009948:	f10d 0209 	add.w	r2, sp, #9
 800994c:	eba2 020e 	sub.w	r2, r2, lr
 8009950:	4565      	cmp	r5, ip
 8009952:	bf88      	it	hi
 8009954:	2200      	movhi	r2, #0
 8009956:	4413      	add	r3, r2
 8009958:	1a18      	subs	r0, r3, r0
 800995a:	b003      	add	sp, #12
 800995c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009962:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009966:	e7ed      	b.n	8009944 <__exponent+0x4c>
 8009968:	2330      	movs	r3, #48	; 0x30
 800996a:	3130      	adds	r1, #48	; 0x30
 800996c:	7083      	strb	r3, [r0, #2]
 800996e:	70c1      	strb	r1, [r0, #3]
 8009970:	1d03      	adds	r3, r0, #4
 8009972:	e7f1      	b.n	8009958 <__exponent+0x60>

08009974 <_printf_float>:
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	ed2d 8b02 	vpush	{d8}
 800997c:	b08d      	sub	sp, #52	; 0x34
 800997e:	460c      	mov	r4, r1
 8009980:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009984:	4616      	mov	r6, r2
 8009986:	461f      	mov	r7, r3
 8009988:	4605      	mov	r5, r0
 800998a:	f002 ff7f 	bl	800c88c <_localeconv_r>
 800998e:	f8d0 a000 	ldr.w	sl, [r0]
 8009992:	4650      	mov	r0, sl
 8009994:	f7f6 fc44 	bl	8000220 <strlen>
 8009998:	2300      	movs	r3, #0
 800999a:	930a      	str	r3, [sp, #40]	; 0x28
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	9305      	str	r3, [sp, #20]
 80099a0:	f8d8 3000 	ldr.w	r3, [r8]
 80099a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099a8:	3307      	adds	r3, #7
 80099aa:	f023 0307 	bic.w	r3, r3, #7
 80099ae:	f103 0208 	add.w	r2, r3, #8
 80099b2:	f8c8 2000 	str.w	r2, [r8]
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80099c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099c6:	9307      	str	r3, [sp, #28]
 80099c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80099cc:	ee08 0a10 	vmov	s16, r0
 80099d0:	4b9f      	ldr	r3, [pc, #636]	; (8009c50 <_printf_float+0x2dc>)
 80099d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	f7f7 f8cf 	bl	8000b7c <__aeabi_dcmpun>
 80099de:	bb88      	cbnz	r0, 8009a44 <_printf_float+0xd0>
 80099e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099e4:	4b9a      	ldr	r3, [pc, #616]	; (8009c50 <_printf_float+0x2dc>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	f7f7 f8a9 	bl	8000b40 <__aeabi_dcmple>
 80099ee:	bb48      	cbnz	r0, 8009a44 <_printf_float+0xd0>
 80099f0:	2200      	movs	r2, #0
 80099f2:	2300      	movs	r3, #0
 80099f4:	4640      	mov	r0, r8
 80099f6:	4649      	mov	r1, r9
 80099f8:	f7f7 f898 	bl	8000b2c <__aeabi_dcmplt>
 80099fc:	b110      	cbz	r0, 8009a04 <_printf_float+0x90>
 80099fe:	232d      	movs	r3, #45	; 0x2d
 8009a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a04:	4b93      	ldr	r3, [pc, #588]	; (8009c54 <_printf_float+0x2e0>)
 8009a06:	4894      	ldr	r0, [pc, #592]	; (8009c58 <_printf_float+0x2e4>)
 8009a08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a0c:	bf94      	ite	ls
 8009a0e:	4698      	movls	r8, r3
 8009a10:	4680      	movhi	r8, r0
 8009a12:	2303      	movs	r3, #3
 8009a14:	6123      	str	r3, [r4, #16]
 8009a16:	9b05      	ldr	r3, [sp, #20]
 8009a18:	f023 0204 	bic.w	r2, r3, #4
 8009a1c:	6022      	str	r2, [r4, #0]
 8009a1e:	f04f 0900 	mov.w	r9, #0
 8009a22:	9700      	str	r7, [sp, #0]
 8009a24:	4633      	mov	r3, r6
 8009a26:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 f9d8 	bl	8009de0 <_printf_common>
 8009a30:	3001      	adds	r0, #1
 8009a32:	f040 8090 	bne.w	8009b56 <_printf_float+0x1e2>
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	b00d      	add	sp, #52	; 0x34
 8009a3c:	ecbd 8b02 	vpop	{d8}
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f7 f896 	bl	8000b7c <__aeabi_dcmpun>
 8009a50:	b140      	cbz	r0, 8009a64 <_printf_float+0xf0>
 8009a52:	464b      	mov	r3, r9
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bfbc      	itt	lt
 8009a58:	232d      	movlt	r3, #45	; 0x2d
 8009a5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a5e:	487f      	ldr	r0, [pc, #508]	; (8009c5c <_printf_float+0x2e8>)
 8009a60:	4b7f      	ldr	r3, [pc, #508]	; (8009c60 <_printf_float+0x2ec>)
 8009a62:	e7d1      	b.n	8009a08 <_printf_float+0x94>
 8009a64:	6863      	ldr	r3, [r4, #4]
 8009a66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a6a:	9206      	str	r2, [sp, #24]
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	d13f      	bne.n	8009af0 <_printf_float+0x17c>
 8009a70:	2306      	movs	r3, #6
 8009a72:	6063      	str	r3, [r4, #4]
 8009a74:	9b05      	ldr	r3, [sp, #20]
 8009a76:	6861      	ldr	r1, [r4, #4]
 8009a78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9303      	str	r3, [sp, #12]
 8009a80:	ab0a      	add	r3, sp, #40	; 0x28
 8009a82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a86:	ab09      	add	r3, sp, #36	; 0x24
 8009a88:	ec49 8b10 	vmov	d0, r8, r9
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	6022      	str	r2, [r4, #0]
 8009a90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a94:	4628      	mov	r0, r5
 8009a96:	f7ff fecd 	bl	8009834 <__cvt>
 8009a9a:	9b06      	ldr	r3, [sp, #24]
 8009a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a9e:	2b47      	cmp	r3, #71	; 0x47
 8009aa0:	4680      	mov	r8, r0
 8009aa2:	d108      	bne.n	8009ab6 <_printf_float+0x142>
 8009aa4:	1cc8      	adds	r0, r1, #3
 8009aa6:	db02      	blt.n	8009aae <_printf_float+0x13a>
 8009aa8:	6863      	ldr	r3, [r4, #4]
 8009aaa:	4299      	cmp	r1, r3
 8009aac:	dd41      	ble.n	8009b32 <_printf_float+0x1be>
 8009aae:	f1ab 0b02 	sub.w	fp, fp, #2
 8009ab2:	fa5f fb8b 	uxtb.w	fp, fp
 8009ab6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aba:	d820      	bhi.n	8009afe <_printf_float+0x18a>
 8009abc:	3901      	subs	r1, #1
 8009abe:	465a      	mov	r2, fp
 8009ac0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ac4:	9109      	str	r1, [sp, #36]	; 0x24
 8009ac6:	f7ff ff17 	bl	80098f8 <__exponent>
 8009aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009acc:	1813      	adds	r3, r2, r0
 8009ace:	2a01      	cmp	r2, #1
 8009ad0:	4681      	mov	r9, r0
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	dc02      	bgt.n	8009adc <_printf_float+0x168>
 8009ad6:	6822      	ldr	r2, [r4, #0]
 8009ad8:	07d2      	lsls	r2, r2, #31
 8009ada:	d501      	bpl.n	8009ae0 <_printf_float+0x16c>
 8009adc:	3301      	adds	r3, #1
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d09c      	beq.n	8009a22 <_printf_float+0xae>
 8009ae8:	232d      	movs	r3, #45	; 0x2d
 8009aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aee:	e798      	b.n	8009a22 <_printf_float+0xae>
 8009af0:	9a06      	ldr	r2, [sp, #24]
 8009af2:	2a47      	cmp	r2, #71	; 0x47
 8009af4:	d1be      	bne.n	8009a74 <_printf_float+0x100>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1bc      	bne.n	8009a74 <_printf_float+0x100>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e7b9      	b.n	8009a72 <_printf_float+0xfe>
 8009afe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b02:	d118      	bne.n	8009b36 <_printf_float+0x1c2>
 8009b04:	2900      	cmp	r1, #0
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	dd0b      	ble.n	8009b22 <_printf_float+0x1ae>
 8009b0a:	6121      	str	r1, [r4, #16]
 8009b0c:	b913      	cbnz	r3, 8009b14 <_printf_float+0x1a0>
 8009b0e:	6822      	ldr	r2, [r4, #0]
 8009b10:	07d0      	lsls	r0, r2, #31
 8009b12:	d502      	bpl.n	8009b1a <_printf_float+0x1a6>
 8009b14:	3301      	adds	r3, #1
 8009b16:	440b      	add	r3, r1
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b1c:	f04f 0900 	mov.w	r9, #0
 8009b20:	e7de      	b.n	8009ae0 <_printf_float+0x16c>
 8009b22:	b913      	cbnz	r3, 8009b2a <_printf_float+0x1b6>
 8009b24:	6822      	ldr	r2, [r4, #0]
 8009b26:	07d2      	lsls	r2, r2, #31
 8009b28:	d501      	bpl.n	8009b2e <_printf_float+0x1ba>
 8009b2a:	3302      	adds	r3, #2
 8009b2c:	e7f4      	b.n	8009b18 <_printf_float+0x1a4>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e7f2      	b.n	8009b18 <_printf_float+0x1a4>
 8009b32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b38:	4299      	cmp	r1, r3
 8009b3a:	db05      	blt.n	8009b48 <_printf_float+0x1d4>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	6121      	str	r1, [r4, #16]
 8009b40:	07d8      	lsls	r0, r3, #31
 8009b42:	d5ea      	bpl.n	8009b1a <_printf_float+0x1a6>
 8009b44:	1c4b      	adds	r3, r1, #1
 8009b46:	e7e7      	b.n	8009b18 <_printf_float+0x1a4>
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	bfd4      	ite	le
 8009b4c:	f1c1 0202 	rsble	r2, r1, #2
 8009b50:	2201      	movgt	r2, #1
 8009b52:	4413      	add	r3, r2
 8009b54:	e7e0      	b.n	8009b18 <_printf_float+0x1a4>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	055a      	lsls	r2, r3, #21
 8009b5a:	d407      	bmi.n	8009b6c <_printf_float+0x1f8>
 8009b5c:	6923      	ldr	r3, [r4, #16]
 8009b5e:	4642      	mov	r2, r8
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	d12c      	bne.n	8009bc4 <_printf_float+0x250>
 8009b6a:	e764      	b.n	8009a36 <_printf_float+0xc2>
 8009b6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b70:	f240 80e0 	bls.w	8009d34 <_printf_float+0x3c0>
 8009b74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f7f6 ffcc 	bl	8000b18 <__aeabi_dcmpeq>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d034      	beq.n	8009bee <_printf_float+0x27a>
 8009b84:	4a37      	ldr	r2, [pc, #220]	; (8009c64 <_printf_float+0x2f0>)
 8009b86:	2301      	movs	r3, #1
 8009b88:	4631      	mov	r1, r6
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	47b8      	blx	r7
 8009b8e:	3001      	adds	r0, #1
 8009b90:	f43f af51 	beq.w	8009a36 <_printf_float+0xc2>
 8009b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	db02      	blt.n	8009ba2 <_printf_float+0x22e>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	07d8      	lsls	r0, r3, #31
 8009ba0:	d510      	bpl.n	8009bc4 <_printf_float+0x250>
 8009ba2:	ee18 3a10 	vmov	r3, s16
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	47b8      	blx	r7
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f43f af41 	beq.w	8009a36 <_printf_float+0xc2>
 8009bb4:	f04f 0800 	mov.w	r8, #0
 8009bb8:	f104 091a 	add.w	r9, r4, #26
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	4543      	cmp	r3, r8
 8009bc2:	dc09      	bgt.n	8009bd8 <_printf_float+0x264>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	079b      	lsls	r3, r3, #30
 8009bc8:	f100 8105 	bmi.w	8009dd6 <_printf_float+0x462>
 8009bcc:	68e0      	ldr	r0, [r4, #12]
 8009bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bd0:	4298      	cmp	r0, r3
 8009bd2:	bfb8      	it	lt
 8009bd4:	4618      	movlt	r0, r3
 8009bd6:	e730      	b.n	8009a3a <_printf_float+0xc6>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	464a      	mov	r2, r9
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4628      	mov	r0, r5
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	f43f af27 	beq.w	8009a36 <_printf_float+0xc2>
 8009be8:	f108 0801 	add.w	r8, r8, #1
 8009bec:	e7e6      	b.n	8009bbc <_printf_float+0x248>
 8009bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc39      	bgt.n	8009c68 <_printf_float+0x2f4>
 8009bf4:	4a1b      	ldr	r2, [pc, #108]	; (8009c64 <_printf_float+0x2f0>)
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	47b8      	blx	r7
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f43f af19 	beq.w	8009a36 <_printf_float+0xc2>
 8009c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	d102      	bne.n	8009c12 <_printf_float+0x29e>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	07d9      	lsls	r1, r3, #31
 8009c10:	d5d8      	bpl.n	8009bc4 <_printf_float+0x250>
 8009c12:	ee18 3a10 	vmov	r3, s16
 8009c16:	4652      	mov	r2, sl
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	f43f af09 	beq.w	8009a36 <_printf_float+0xc2>
 8009c24:	f04f 0900 	mov.w	r9, #0
 8009c28:	f104 0a1a 	add.w	sl, r4, #26
 8009c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2e:	425b      	negs	r3, r3
 8009c30:	454b      	cmp	r3, r9
 8009c32:	dc01      	bgt.n	8009c38 <_printf_float+0x2c4>
 8009c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c36:	e792      	b.n	8009b5e <_printf_float+0x1ea>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4652      	mov	r2, sl
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	f43f aef7 	beq.w	8009a36 <_printf_float+0xc2>
 8009c48:	f109 0901 	add.w	r9, r9, #1
 8009c4c:	e7ee      	b.n	8009c2c <_printf_float+0x2b8>
 8009c4e:	bf00      	nop
 8009c50:	7fefffff 	.word	0x7fefffff
 8009c54:	0800f528 	.word	0x0800f528
 8009c58:	0800f52c 	.word	0x0800f52c
 8009c5c:	0800f534 	.word	0x0800f534
 8009c60:	0800f530 	.word	0x0800f530
 8009c64:	0800f538 	.word	0x0800f538
 8009c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	bfa8      	it	ge
 8009c70:	461a      	movge	r2, r3
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	4691      	mov	r9, r2
 8009c76:	dc37      	bgt.n	8009ce8 <_printf_float+0x374>
 8009c78:	f04f 0b00 	mov.w	fp, #0
 8009c7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c80:	f104 021a 	add.w	r2, r4, #26
 8009c84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c86:	9305      	str	r3, [sp, #20]
 8009c88:	eba3 0309 	sub.w	r3, r3, r9
 8009c8c:	455b      	cmp	r3, fp
 8009c8e:	dc33      	bgt.n	8009cf8 <_printf_float+0x384>
 8009c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c94:	429a      	cmp	r2, r3
 8009c96:	db3b      	blt.n	8009d10 <_printf_float+0x39c>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	07da      	lsls	r2, r3, #31
 8009c9c:	d438      	bmi.n	8009d10 <_printf_float+0x39c>
 8009c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	eba2 0901 	sub.w	r9, r2, r1
 8009caa:	4599      	cmp	r9, r3
 8009cac:	bfa8      	it	ge
 8009cae:	4699      	movge	r9, r3
 8009cb0:	f1b9 0f00 	cmp.w	r9, #0
 8009cb4:	dc35      	bgt.n	8009d22 <_printf_float+0x3ae>
 8009cb6:	f04f 0800 	mov.w	r8, #0
 8009cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cbe:	f104 0a1a 	add.w	sl, r4, #26
 8009cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	eba3 0309 	sub.w	r3, r3, r9
 8009ccc:	4543      	cmp	r3, r8
 8009cce:	f77f af79 	ble.w	8009bc4 <_printf_float+0x250>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	f43f aeaa 	beq.w	8009a36 <_printf_float+0xc2>
 8009ce2:	f108 0801 	add.w	r8, r8, #1
 8009ce6:	e7ec      	b.n	8009cc2 <_printf_float+0x34e>
 8009ce8:	4613      	mov	r3, r2
 8009cea:	4631      	mov	r1, r6
 8009cec:	4642      	mov	r2, r8
 8009cee:	4628      	mov	r0, r5
 8009cf0:	47b8      	blx	r7
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	d1c0      	bne.n	8009c78 <_printf_float+0x304>
 8009cf6:	e69e      	b.n	8009a36 <_printf_float+0xc2>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	9205      	str	r2, [sp, #20]
 8009d00:	47b8      	blx	r7
 8009d02:	3001      	adds	r0, #1
 8009d04:	f43f ae97 	beq.w	8009a36 <_printf_float+0xc2>
 8009d08:	9a05      	ldr	r2, [sp, #20]
 8009d0a:	f10b 0b01 	add.w	fp, fp, #1
 8009d0e:	e7b9      	b.n	8009c84 <_printf_float+0x310>
 8009d10:	ee18 3a10 	vmov	r3, s16
 8009d14:	4652      	mov	r2, sl
 8009d16:	4631      	mov	r1, r6
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b8      	blx	r7
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d1be      	bne.n	8009c9e <_printf_float+0x32a>
 8009d20:	e689      	b.n	8009a36 <_printf_float+0xc2>
 8009d22:	9a05      	ldr	r2, [sp, #20]
 8009d24:	464b      	mov	r3, r9
 8009d26:	4442      	add	r2, r8
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	47b8      	blx	r7
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d1c1      	bne.n	8009cb6 <_printf_float+0x342>
 8009d32:	e680      	b.n	8009a36 <_printf_float+0xc2>
 8009d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d36:	2a01      	cmp	r2, #1
 8009d38:	dc01      	bgt.n	8009d3e <_printf_float+0x3ca>
 8009d3a:	07db      	lsls	r3, r3, #31
 8009d3c:	d538      	bpl.n	8009db0 <_printf_float+0x43c>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	4642      	mov	r2, r8
 8009d42:	4631      	mov	r1, r6
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b8      	blx	r7
 8009d48:	3001      	adds	r0, #1
 8009d4a:	f43f ae74 	beq.w	8009a36 <_printf_float+0xc2>
 8009d4e:	ee18 3a10 	vmov	r3, s16
 8009d52:	4652      	mov	r2, sl
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f ae6b 	beq.w	8009a36 <_printf_float+0xc2>
 8009d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d64:	2200      	movs	r2, #0
 8009d66:	2300      	movs	r3, #0
 8009d68:	f7f6 fed6 	bl	8000b18 <__aeabi_dcmpeq>
 8009d6c:	b9d8      	cbnz	r0, 8009da6 <_printf_float+0x432>
 8009d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d70:	f108 0201 	add.w	r2, r8, #1
 8009d74:	3b01      	subs	r3, #1
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	d10e      	bne.n	8009d9e <_printf_float+0x42a>
 8009d80:	e659      	b.n	8009a36 <_printf_float+0xc2>
 8009d82:	2301      	movs	r3, #1
 8009d84:	4652      	mov	r2, sl
 8009d86:	4631      	mov	r1, r6
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b8      	blx	r7
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	f43f ae52 	beq.w	8009a36 <_printf_float+0xc2>
 8009d92:	f108 0801 	add.w	r8, r8, #1
 8009d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	4543      	cmp	r3, r8
 8009d9c:	dcf1      	bgt.n	8009d82 <_printf_float+0x40e>
 8009d9e:	464b      	mov	r3, r9
 8009da0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009da4:	e6dc      	b.n	8009b60 <_printf_float+0x1ec>
 8009da6:	f04f 0800 	mov.w	r8, #0
 8009daa:	f104 0a1a 	add.w	sl, r4, #26
 8009dae:	e7f2      	b.n	8009d96 <_printf_float+0x422>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4642      	mov	r2, r8
 8009db4:	e7df      	b.n	8009d76 <_printf_float+0x402>
 8009db6:	2301      	movs	r3, #1
 8009db8:	464a      	mov	r2, r9
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f43f ae38 	beq.w	8009a36 <_printf_float+0xc2>
 8009dc6:	f108 0801 	add.w	r8, r8, #1
 8009dca:	68e3      	ldr	r3, [r4, #12]
 8009dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dce:	1a5b      	subs	r3, r3, r1
 8009dd0:	4543      	cmp	r3, r8
 8009dd2:	dcf0      	bgt.n	8009db6 <_printf_float+0x442>
 8009dd4:	e6fa      	b.n	8009bcc <_printf_float+0x258>
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	f104 0919 	add.w	r9, r4, #25
 8009dde:	e7f4      	b.n	8009dca <_printf_float+0x456>

08009de0 <_printf_common>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	4616      	mov	r6, r2
 8009de6:	4699      	mov	r9, r3
 8009de8:	688a      	ldr	r2, [r1, #8]
 8009dea:	690b      	ldr	r3, [r1, #16]
 8009dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009df0:	4293      	cmp	r3, r2
 8009df2:	bfb8      	it	lt
 8009df4:	4613      	movlt	r3, r2
 8009df6:	6033      	str	r3, [r6, #0]
 8009df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b10a      	cbz	r2, 8009e06 <_printf_common+0x26>
 8009e02:	3301      	adds	r3, #1
 8009e04:	6033      	str	r3, [r6, #0]
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	0699      	lsls	r1, r3, #26
 8009e0a:	bf42      	ittt	mi
 8009e0c:	6833      	ldrmi	r3, [r6, #0]
 8009e0e:	3302      	addmi	r3, #2
 8009e10:	6033      	strmi	r3, [r6, #0]
 8009e12:	6825      	ldr	r5, [r4, #0]
 8009e14:	f015 0506 	ands.w	r5, r5, #6
 8009e18:	d106      	bne.n	8009e28 <_printf_common+0x48>
 8009e1a:	f104 0a19 	add.w	sl, r4, #25
 8009e1e:	68e3      	ldr	r3, [r4, #12]
 8009e20:	6832      	ldr	r2, [r6, #0]
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	42ab      	cmp	r3, r5
 8009e26:	dc26      	bgt.n	8009e76 <_printf_common+0x96>
 8009e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e2c:	1e13      	subs	r3, r2, #0
 8009e2e:	6822      	ldr	r2, [r4, #0]
 8009e30:	bf18      	it	ne
 8009e32:	2301      	movne	r3, #1
 8009e34:	0692      	lsls	r2, r2, #26
 8009e36:	d42b      	bmi.n	8009e90 <_printf_common+0xb0>
 8009e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	4638      	mov	r0, r7
 8009e40:	47c0      	blx	r8
 8009e42:	3001      	adds	r0, #1
 8009e44:	d01e      	beq.n	8009e84 <_printf_common+0xa4>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	68e5      	ldr	r5, [r4, #12]
 8009e4a:	6832      	ldr	r2, [r6, #0]
 8009e4c:	f003 0306 	and.w	r3, r3, #6
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	bf08      	it	eq
 8009e54:	1aad      	subeq	r5, r5, r2
 8009e56:	68a3      	ldr	r3, [r4, #8]
 8009e58:	6922      	ldr	r2, [r4, #16]
 8009e5a:	bf0c      	ite	eq
 8009e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e60:	2500      	movne	r5, #0
 8009e62:	4293      	cmp	r3, r2
 8009e64:	bfc4      	itt	gt
 8009e66:	1a9b      	subgt	r3, r3, r2
 8009e68:	18ed      	addgt	r5, r5, r3
 8009e6a:	2600      	movs	r6, #0
 8009e6c:	341a      	adds	r4, #26
 8009e6e:	42b5      	cmp	r5, r6
 8009e70:	d11a      	bne.n	8009ea8 <_printf_common+0xc8>
 8009e72:	2000      	movs	r0, #0
 8009e74:	e008      	b.n	8009e88 <_printf_common+0xa8>
 8009e76:	2301      	movs	r3, #1
 8009e78:	4652      	mov	r2, sl
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	47c0      	blx	r8
 8009e80:	3001      	adds	r0, #1
 8009e82:	d103      	bne.n	8009e8c <_printf_common+0xac>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	e7c6      	b.n	8009e1e <_printf_common+0x3e>
 8009e90:	18e1      	adds	r1, r4, r3
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	2030      	movs	r0, #48	; 0x30
 8009e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e9a:	4422      	add	r2, r4
 8009e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	e7c7      	b.n	8009e38 <_printf_common+0x58>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	4622      	mov	r2, r4
 8009eac:	4649      	mov	r1, r9
 8009eae:	4638      	mov	r0, r7
 8009eb0:	47c0      	blx	r8
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d0e6      	beq.n	8009e84 <_printf_common+0xa4>
 8009eb6:	3601      	adds	r6, #1
 8009eb8:	e7d9      	b.n	8009e6e <_printf_common+0x8e>
	...

08009ebc <_printf_i>:
 8009ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	4691      	mov	r9, r2
 8009ec4:	7e27      	ldrb	r7, [r4, #24]
 8009ec6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ec8:	2f78      	cmp	r7, #120	; 0x78
 8009eca:	4680      	mov	r8, r0
 8009ecc:	469a      	mov	sl, r3
 8009ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ed2:	d807      	bhi.n	8009ee4 <_printf_i+0x28>
 8009ed4:	2f62      	cmp	r7, #98	; 0x62
 8009ed6:	d80a      	bhi.n	8009eee <_printf_i+0x32>
 8009ed8:	2f00      	cmp	r7, #0
 8009eda:	f000 80d8 	beq.w	800a08e <_printf_i+0x1d2>
 8009ede:	2f58      	cmp	r7, #88	; 0x58
 8009ee0:	f000 80a3 	beq.w	800a02a <_printf_i+0x16e>
 8009ee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009eec:	e03a      	b.n	8009f64 <_printf_i+0xa8>
 8009eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ef2:	2b15      	cmp	r3, #21
 8009ef4:	d8f6      	bhi.n	8009ee4 <_printf_i+0x28>
 8009ef6:	a001      	add	r0, pc, #4	; (adr r0, 8009efc <_printf_i+0x40>)
 8009ef8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009efc:	08009f55 	.word	0x08009f55
 8009f00:	08009f69 	.word	0x08009f69
 8009f04:	08009ee5 	.word	0x08009ee5
 8009f08:	08009ee5 	.word	0x08009ee5
 8009f0c:	08009ee5 	.word	0x08009ee5
 8009f10:	08009ee5 	.word	0x08009ee5
 8009f14:	08009f69 	.word	0x08009f69
 8009f18:	08009ee5 	.word	0x08009ee5
 8009f1c:	08009ee5 	.word	0x08009ee5
 8009f20:	08009ee5 	.word	0x08009ee5
 8009f24:	08009ee5 	.word	0x08009ee5
 8009f28:	0800a075 	.word	0x0800a075
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	0800a057 	.word	0x0800a057
 8009f34:	08009ee5 	.word	0x08009ee5
 8009f38:	08009ee5 	.word	0x08009ee5
 8009f3c:	0800a097 	.word	0x0800a097
 8009f40:	08009ee5 	.word	0x08009ee5
 8009f44:	08009f99 	.word	0x08009f99
 8009f48:	08009ee5 	.word	0x08009ee5
 8009f4c:	08009ee5 	.word	0x08009ee5
 8009f50:	0800a05f 	.word	0x0800a05f
 8009f54:	680b      	ldr	r3, [r1, #0]
 8009f56:	1d1a      	adds	r2, r3, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	600a      	str	r2, [r1, #0]
 8009f5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f64:	2301      	movs	r3, #1
 8009f66:	e0a3      	b.n	800a0b0 <_printf_i+0x1f4>
 8009f68:	6825      	ldr	r5, [r4, #0]
 8009f6a:	6808      	ldr	r0, [r1, #0]
 8009f6c:	062e      	lsls	r6, r5, #24
 8009f6e:	f100 0304 	add.w	r3, r0, #4
 8009f72:	d50a      	bpl.n	8009f8a <_printf_i+0xce>
 8009f74:	6805      	ldr	r5, [r0, #0]
 8009f76:	600b      	str	r3, [r1, #0]
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	da03      	bge.n	8009f84 <_printf_i+0xc8>
 8009f7c:	232d      	movs	r3, #45	; 0x2d
 8009f7e:	426d      	negs	r5, r5
 8009f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f84:	485e      	ldr	r0, [pc, #376]	; (800a100 <_printf_i+0x244>)
 8009f86:	230a      	movs	r3, #10
 8009f88:	e019      	b.n	8009fbe <_printf_i+0x102>
 8009f8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f8e:	6805      	ldr	r5, [r0, #0]
 8009f90:	600b      	str	r3, [r1, #0]
 8009f92:	bf18      	it	ne
 8009f94:	b22d      	sxthne	r5, r5
 8009f96:	e7ef      	b.n	8009f78 <_printf_i+0xbc>
 8009f98:	680b      	ldr	r3, [r1, #0]
 8009f9a:	6825      	ldr	r5, [r4, #0]
 8009f9c:	1d18      	adds	r0, r3, #4
 8009f9e:	6008      	str	r0, [r1, #0]
 8009fa0:	0628      	lsls	r0, r5, #24
 8009fa2:	d501      	bpl.n	8009fa8 <_printf_i+0xec>
 8009fa4:	681d      	ldr	r5, [r3, #0]
 8009fa6:	e002      	b.n	8009fae <_printf_i+0xf2>
 8009fa8:	0669      	lsls	r1, r5, #25
 8009faa:	d5fb      	bpl.n	8009fa4 <_printf_i+0xe8>
 8009fac:	881d      	ldrh	r5, [r3, #0]
 8009fae:	4854      	ldr	r0, [pc, #336]	; (800a100 <_printf_i+0x244>)
 8009fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8009fb2:	bf0c      	ite	eq
 8009fb4:	2308      	moveq	r3, #8
 8009fb6:	230a      	movne	r3, #10
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fbe:	6866      	ldr	r6, [r4, #4]
 8009fc0:	60a6      	str	r6, [r4, #8]
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	bfa2      	ittt	ge
 8009fc6:	6821      	ldrge	r1, [r4, #0]
 8009fc8:	f021 0104 	bicge.w	r1, r1, #4
 8009fcc:	6021      	strge	r1, [r4, #0]
 8009fce:	b90d      	cbnz	r5, 8009fd4 <_printf_i+0x118>
 8009fd0:	2e00      	cmp	r6, #0
 8009fd2:	d04d      	beq.n	800a070 <_printf_i+0x1b4>
 8009fd4:	4616      	mov	r6, r2
 8009fd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fda:	fb03 5711 	mls	r7, r3, r1, r5
 8009fde:	5dc7      	ldrb	r7, [r0, r7]
 8009fe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fe4:	462f      	mov	r7, r5
 8009fe6:	42bb      	cmp	r3, r7
 8009fe8:	460d      	mov	r5, r1
 8009fea:	d9f4      	bls.n	8009fd6 <_printf_i+0x11a>
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d10b      	bne.n	800a008 <_printf_i+0x14c>
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	07df      	lsls	r7, r3, #31
 8009ff4:	d508      	bpl.n	800a008 <_printf_i+0x14c>
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	6861      	ldr	r1, [r4, #4]
 8009ffa:	4299      	cmp	r1, r3
 8009ffc:	bfde      	ittt	le
 8009ffe:	2330      	movle	r3, #48	; 0x30
 800a000:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a004:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a008:	1b92      	subs	r2, r2, r6
 800a00a:	6122      	str	r2, [r4, #16]
 800a00c:	f8cd a000 	str.w	sl, [sp]
 800a010:	464b      	mov	r3, r9
 800a012:	aa03      	add	r2, sp, #12
 800a014:	4621      	mov	r1, r4
 800a016:	4640      	mov	r0, r8
 800a018:	f7ff fee2 	bl	8009de0 <_printf_common>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d14c      	bne.n	800a0ba <_printf_i+0x1fe>
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	b004      	add	sp, #16
 800a026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02a:	4835      	ldr	r0, [pc, #212]	; (800a100 <_printf_i+0x244>)
 800a02c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	680e      	ldr	r6, [r1, #0]
 800a034:	061f      	lsls	r7, r3, #24
 800a036:	f856 5b04 	ldr.w	r5, [r6], #4
 800a03a:	600e      	str	r6, [r1, #0]
 800a03c:	d514      	bpl.n	800a068 <_printf_i+0x1ac>
 800a03e:	07d9      	lsls	r1, r3, #31
 800a040:	bf44      	itt	mi
 800a042:	f043 0320 	orrmi.w	r3, r3, #32
 800a046:	6023      	strmi	r3, [r4, #0]
 800a048:	b91d      	cbnz	r5, 800a052 <_printf_i+0x196>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	f023 0320 	bic.w	r3, r3, #32
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	2310      	movs	r3, #16
 800a054:	e7b0      	b.n	8009fb8 <_printf_i+0xfc>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	f043 0320 	orr.w	r3, r3, #32
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	2378      	movs	r3, #120	; 0x78
 800a060:	4828      	ldr	r0, [pc, #160]	; (800a104 <_printf_i+0x248>)
 800a062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a066:	e7e3      	b.n	800a030 <_printf_i+0x174>
 800a068:	065e      	lsls	r6, r3, #25
 800a06a:	bf48      	it	mi
 800a06c:	b2ad      	uxthmi	r5, r5
 800a06e:	e7e6      	b.n	800a03e <_printf_i+0x182>
 800a070:	4616      	mov	r6, r2
 800a072:	e7bb      	b.n	8009fec <_printf_i+0x130>
 800a074:	680b      	ldr	r3, [r1, #0]
 800a076:	6826      	ldr	r6, [r4, #0]
 800a078:	6960      	ldr	r0, [r4, #20]
 800a07a:	1d1d      	adds	r5, r3, #4
 800a07c:	600d      	str	r5, [r1, #0]
 800a07e:	0635      	lsls	r5, r6, #24
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	d501      	bpl.n	800a088 <_printf_i+0x1cc>
 800a084:	6018      	str	r0, [r3, #0]
 800a086:	e002      	b.n	800a08e <_printf_i+0x1d2>
 800a088:	0671      	lsls	r1, r6, #25
 800a08a:	d5fb      	bpl.n	800a084 <_printf_i+0x1c8>
 800a08c:	8018      	strh	r0, [r3, #0]
 800a08e:	2300      	movs	r3, #0
 800a090:	6123      	str	r3, [r4, #16]
 800a092:	4616      	mov	r6, r2
 800a094:	e7ba      	b.n	800a00c <_printf_i+0x150>
 800a096:	680b      	ldr	r3, [r1, #0]
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	600a      	str	r2, [r1, #0]
 800a09c:	681e      	ldr	r6, [r3, #0]
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7f6 f8c4 	bl	8000230 <memchr>
 800a0a8:	b108      	cbz	r0, 800a0ae <_printf_i+0x1f2>
 800a0aa:	1b80      	subs	r0, r0, r6
 800a0ac:	6060      	str	r0, [r4, #4]
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b8:	e7a8      	b.n	800a00c <_printf_i+0x150>
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	4632      	mov	r2, r6
 800a0be:	4649      	mov	r1, r9
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	47d0      	blx	sl
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d0ab      	beq.n	800a020 <_printf_i+0x164>
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	079b      	lsls	r3, r3, #30
 800a0cc:	d413      	bmi.n	800a0f6 <_printf_i+0x23a>
 800a0ce:	68e0      	ldr	r0, [r4, #12]
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	4298      	cmp	r0, r3
 800a0d4:	bfb8      	it	lt
 800a0d6:	4618      	movlt	r0, r3
 800a0d8:	e7a4      	b.n	800a024 <_printf_i+0x168>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	47d0      	blx	sl
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d09b      	beq.n	800a020 <_printf_i+0x164>
 800a0e8:	3501      	adds	r5, #1
 800a0ea:	68e3      	ldr	r3, [r4, #12]
 800a0ec:	9903      	ldr	r1, [sp, #12]
 800a0ee:	1a5b      	subs	r3, r3, r1
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	dcf2      	bgt.n	800a0da <_printf_i+0x21e>
 800a0f4:	e7eb      	b.n	800a0ce <_printf_i+0x212>
 800a0f6:	2500      	movs	r5, #0
 800a0f8:	f104 0619 	add.w	r6, r4, #25
 800a0fc:	e7f5      	b.n	800a0ea <_printf_i+0x22e>
 800a0fe:	bf00      	nop
 800a100:	0800f53a 	.word	0x0800f53a
 800a104:	0800f54b 	.word	0x0800f54b

0800a108 <iprintf>:
 800a108:	b40f      	push	{r0, r1, r2, r3}
 800a10a:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <iprintf+0x2c>)
 800a10c:	b513      	push	{r0, r1, r4, lr}
 800a10e:	681c      	ldr	r4, [r3, #0]
 800a110:	b124      	cbz	r4, 800a11c <iprintf+0x14>
 800a112:	69a3      	ldr	r3, [r4, #24]
 800a114:	b913      	cbnz	r3, 800a11c <iprintf+0x14>
 800a116:	4620      	mov	r0, r4
 800a118:	f001 ffac 	bl	800c074 <__sinit>
 800a11c:	ab05      	add	r3, sp, #20
 800a11e:	9a04      	ldr	r2, [sp, #16]
 800a120:	68a1      	ldr	r1, [r4, #8]
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	4620      	mov	r0, r4
 800a126:	f003 f9d5 	bl	800d4d4 <_vfiprintf_r>
 800a12a:	b002      	add	sp, #8
 800a12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a130:	b004      	add	sp, #16
 800a132:	4770      	bx	lr
 800a134:	2000002c 	.word	0x2000002c

0800a138 <putchar>:
 800a138:	4b09      	ldr	r3, [pc, #36]	; (800a160 <putchar+0x28>)
 800a13a:	b513      	push	{r0, r1, r4, lr}
 800a13c:	681c      	ldr	r4, [r3, #0]
 800a13e:	4601      	mov	r1, r0
 800a140:	b134      	cbz	r4, 800a150 <putchar+0x18>
 800a142:	69a3      	ldr	r3, [r4, #24]
 800a144:	b923      	cbnz	r3, 800a150 <putchar+0x18>
 800a146:	9001      	str	r0, [sp, #4]
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 ff93 	bl	800c074 <__sinit>
 800a14e:	9901      	ldr	r1, [sp, #4]
 800a150:	68a2      	ldr	r2, [r4, #8]
 800a152:	4620      	mov	r0, r4
 800a154:	b002      	add	sp, #8
 800a156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a15a:	f003 baeb 	b.w	800d734 <_putc_r>
 800a15e:	bf00      	nop
 800a160:	2000002c 	.word	0x2000002c

0800a164 <_puts_r>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	460e      	mov	r6, r1
 800a168:	4605      	mov	r5, r0
 800a16a:	b118      	cbz	r0, 800a174 <_puts_r+0x10>
 800a16c:	6983      	ldr	r3, [r0, #24]
 800a16e:	b90b      	cbnz	r3, 800a174 <_puts_r+0x10>
 800a170:	f001 ff80 	bl	800c074 <__sinit>
 800a174:	69ab      	ldr	r3, [r5, #24]
 800a176:	68ac      	ldr	r4, [r5, #8]
 800a178:	b913      	cbnz	r3, 800a180 <_puts_r+0x1c>
 800a17a:	4628      	mov	r0, r5
 800a17c:	f001 ff7a 	bl	800c074 <__sinit>
 800a180:	4b2c      	ldr	r3, [pc, #176]	; (800a234 <_puts_r+0xd0>)
 800a182:	429c      	cmp	r4, r3
 800a184:	d120      	bne.n	800a1c8 <_puts_r+0x64>
 800a186:	686c      	ldr	r4, [r5, #4]
 800a188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18a:	07db      	lsls	r3, r3, #31
 800a18c:	d405      	bmi.n	800a19a <_puts_r+0x36>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	0598      	lsls	r0, r3, #22
 800a192:	d402      	bmi.n	800a19a <_puts_r+0x36>
 800a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a196:	f002 fb7e 	bl	800c896 <__retarget_lock_acquire_recursive>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	0719      	lsls	r1, r3, #28
 800a19e:	d51d      	bpl.n	800a1dc <_puts_r+0x78>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	b1db      	cbz	r3, 800a1dc <_puts_r+0x78>
 800a1a4:	3e01      	subs	r6, #1
 800a1a6:	68a3      	ldr	r3, [r4, #8]
 800a1a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	60a3      	str	r3, [r4, #8]
 800a1b0:	bb39      	cbnz	r1, 800a202 <_puts_r+0x9e>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da38      	bge.n	800a228 <_puts_r+0xc4>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	210a      	movs	r1, #10
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 ff08 	bl	800afd0 <__swbuf_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d011      	beq.n	800a1e8 <_puts_r+0x84>
 800a1c4:	250a      	movs	r5, #10
 800a1c6:	e011      	b.n	800a1ec <_puts_r+0x88>
 800a1c8:	4b1b      	ldr	r3, [pc, #108]	; (800a238 <_puts_r+0xd4>)
 800a1ca:	429c      	cmp	r4, r3
 800a1cc:	d101      	bne.n	800a1d2 <_puts_r+0x6e>
 800a1ce:	68ac      	ldr	r4, [r5, #8]
 800a1d0:	e7da      	b.n	800a188 <_puts_r+0x24>
 800a1d2:	4b1a      	ldr	r3, [pc, #104]	; (800a23c <_puts_r+0xd8>)
 800a1d4:	429c      	cmp	r4, r3
 800a1d6:	bf08      	it	eq
 800a1d8:	68ec      	ldreq	r4, [r5, #12]
 800a1da:	e7d5      	b.n	800a188 <_puts_r+0x24>
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 ff48 	bl	800b074 <__swsetup_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d0dd      	beq.n	800a1a4 <_puts_r+0x40>
 800a1e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a1ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ee:	07da      	lsls	r2, r3, #31
 800a1f0:	d405      	bmi.n	800a1fe <_puts_r+0x9a>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	059b      	lsls	r3, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_puts_r+0x9a>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1fa:	f002 fb4d 	bl	800c898 <__retarget_lock_release_recursive>
 800a1fe:	4628      	mov	r0, r5
 800a200:	bd70      	pop	{r4, r5, r6, pc}
 800a202:	2b00      	cmp	r3, #0
 800a204:	da04      	bge.n	800a210 <_puts_r+0xac>
 800a206:	69a2      	ldr	r2, [r4, #24]
 800a208:	429a      	cmp	r2, r3
 800a20a:	dc06      	bgt.n	800a21a <_puts_r+0xb6>
 800a20c:	290a      	cmp	r1, #10
 800a20e:	d004      	beq.n	800a21a <_puts_r+0xb6>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	7019      	strb	r1, [r3, #0]
 800a218:	e7c5      	b.n	800a1a6 <_puts_r+0x42>
 800a21a:	4622      	mov	r2, r4
 800a21c:	4628      	mov	r0, r5
 800a21e:	f000 fed7 	bl	800afd0 <__swbuf_r>
 800a222:	3001      	adds	r0, #1
 800a224:	d1bf      	bne.n	800a1a6 <_puts_r+0x42>
 800a226:	e7df      	b.n	800a1e8 <_puts_r+0x84>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	250a      	movs	r5, #10
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	6022      	str	r2, [r4, #0]
 800a230:	701d      	strb	r5, [r3, #0]
 800a232:	e7db      	b.n	800a1ec <_puts_r+0x88>
 800a234:	0800f768 	.word	0x0800f768
 800a238:	0800f788 	.word	0x0800f788
 800a23c:	0800f748 	.word	0x0800f748

0800a240 <puts>:
 800a240:	4b02      	ldr	r3, [pc, #8]	; (800a24c <puts+0xc>)
 800a242:	4601      	mov	r1, r0
 800a244:	6818      	ldr	r0, [r3, #0]
 800a246:	f7ff bf8d 	b.w	800a164 <_puts_r>
 800a24a:	bf00      	nop
 800a24c:	2000002c 	.word	0x2000002c

0800a250 <sulp>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	4604      	mov	r4, r0
 800a254:	460d      	mov	r5, r1
 800a256:	ec45 4b10 	vmov	d0, r4, r5
 800a25a:	4616      	mov	r6, r2
 800a25c:	f002 ff08 	bl	800d070 <__ulp>
 800a260:	ec51 0b10 	vmov	r0, r1, d0
 800a264:	b17e      	cbz	r6, 800a286 <sulp+0x36>
 800a266:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a26a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dd09      	ble.n	800a286 <sulp+0x36>
 800a272:	051b      	lsls	r3, r3, #20
 800a274:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a278:	2400      	movs	r4, #0
 800a27a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a27e:	4622      	mov	r2, r4
 800a280:	462b      	mov	r3, r5
 800a282:	f7f6 f9e1 	bl	8000648 <__aeabi_dmul>
 800a286:	bd70      	pop	{r4, r5, r6, pc}

0800a288 <_strtod_l>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	b0a3      	sub	sp, #140	; 0x8c
 800a28e:	461f      	mov	r7, r3
 800a290:	2300      	movs	r3, #0
 800a292:	931e      	str	r3, [sp, #120]	; 0x78
 800a294:	4ba4      	ldr	r3, [pc, #656]	; (800a528 <_strtod_l+0x2a0>)
 800a296:	9219      	str	r2, [sp, #100]	; 0x64
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	9307      	str	r3, [sp, #28]
 800a29c:	4604      	mov	r4, r0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	4688      	mov	r8, r1
 800a2a2:	f7f5 ffbd 	bl	8000220 <strlen>
 800a2a6:	f04f 0a00 	mov.w	sl, #0
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	f04f 0b00 	mov.w	fp, #0
 800a2b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a2b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2b6:	781a      	ldrb	r2, [r3, #0]
 800a2b8:	2a2b      	cmp	r2, #43	; 0x2b
 800a2ba:	d04c      	beq.n	800a356 <_strtod_l+0xce>
 800a2bc:	d839      	bhi.n	800a332 <_strtod_l+0xaa>
 800a2be:	2a0d      	cmp	r2, #13
 800a2c0:	d832      	bhi.n	800a328 <_strtod_l+0xa0>
 800a2c2:	2a08      	cmp	r2, #8
 800a2c4:	d832      	bhi.n	800a32c <_strtod_l+0xa4>
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	d03c      	beq.n	800a344 <_strtod_l+0xbc>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a2ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a2d0:	7833      	ldrb	r3, [r6, #0]
 800a2d2:	2b30      	cmp	r3, #48	; 0x30
 800a2d4:	f040 80b4 	bne.w	800a440 <_strtod_l+0x1b8>
 800a2d8:	7873      	ldrb	r3, [r6, #1]
 800a2da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2de:	2b58      	cmp	r3, #88	; 0x58
 800a2e0:	d16c      	bne.n	800a3bc <_strtod_l+0x134>
 800a2e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	ab1e      	add	r3, sp, #120	; 0x78
 800a2e8:	9702      	str	r7, [sp, #8]
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	4a8f      	ldr	r2, [pc, #572]	; (800a52c <_strtod_l+0x2a4>)
 800a2ee:	ab1f      	add	r3, sp, #124	; 0x7c
 800a2f0:	a91d      	add	r1, sp, #116	; 0x74
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f001 ffc2 	bl	800c27c <__gethex>
 800a2f8:	f010 0707 	ands.w	r7, r0, #7
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	d005      	beq.n	800a30c <_strtod_l+0x84>
 800a300:	2f06      	cmp	r7, #6
 800a302:	d12a      	bne.n	800a35a <_strtod_l+0xd2>
 800a304:	3601      	adds	r6, #1
 800a306:	2300      	movs	r3, #0
 800a308:	961d      	str	r6, [sp, #116]	; 0x74
 800a30a:	930e      	str	r3, [sp, #56]	; 0x38
 800a30c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f040 8596 	bne.w	800ae40 <_strtod_l+0xbb8>
 800a314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a316:	b1db      	cbz	r3, 800a350 <_strtod_l+0xc8>
 800a318:	4652      	mov	r2, sl
 800a31a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a31e:	ec43 2b10 	vmov	d0, r2, r3
 800a322:	b023      	add	sp, #140	; 0x8c
 800a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a328:	2a20      	cmp	r2, #32
 800a32a:	d1ce      	bne.n	800a2ca <_strtod_l+0x42>
 800a32c:	3301      	adds	r3, #1
 800a32e:	931d      	str	r3, [sp, #116]	; 0x74
 800a330:	e7c0      	b.n	800a2b4 <_strtod_l+0x2c>
 800a332:	2a2d      	cmp	r2, #45	; 0x2d
 800a334:	d1c9      	bne.n	800a2ca <_strtod_l+0x42>
 800a336:	2201      	movs	r2, #1
 800a338:	920e      	str	r2, [sp, #56]	; 0x38
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	921d      	str	r2, [sp, #116]	; 0x74
 800a33e:	785b      	ldrb	r3, [r3, #1]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1c4      	bne.n	800a2ce <_strtod_l+0x46>
 800a344:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a346:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f040 8576 	bne.w	800ae3c <_strtod_l+0xbb4>
 800a350:	4652      	mov	r2, sl
 800a352:	465b      	mov	r3, fp
 800a354:	e7e3      	b.n	800a31e <_strtod_l+0x96>
 800a356:	2200      	movs	r2, #0
 800a358:	e7ee      	b.n	800a338 <_strtod_l+0xb0>
 800a35a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a35c:	b13a      	cbz	r2, 800a36e <_strtod_l+0xe6>
 800a35e:	2135      	movs	r1, #53	; 0x35
 800a360:	a820      	add	r0, sp, #128	; 0x80
 800a362:	f002 ff90 	bl	800d286 <__copybits>
 800a366:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a368:	4620      	mov	r0, r4
 800a36a:	f002 fb55 	bl	800ca18 <_Bfree>
 800a36e:	3f01      	subs	r7, #1
 800a370:	2f05      	cmp	r7, #5
 800a372:	d807      	bhi.n	800a384 <_strtod_l+0xfc>
 800a374:	e8df f007 	tbb	[pc, r7]
 800a378:	1d180b0e 	.word	0x1d180b0e
 800a37c:	030e      	.short	0x030e
 800a37e:	f04f 0b00 	mov.w	fp, #0
 800a382:	46da      	mov	sl, fp
 800a384:	0728      	lsls	r0, r5, #28
 800a386:	d5c1      	bpl.n	800a30c <_strtod_l+0x84>
 800a388:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a38c:	e7be      	b.n	800a30c <_strtod_l+0x84>
 800a38e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a392:	e7f7      	b.n	800a384 <_strtod_l+0xfc>
 800a394:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a398:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a39a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a39e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a3a6:	e7ed      	b.n	800a384 <_strtod_l+0xfc>
 800a3a8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a530 <_strtod_l+0x2a8>
 800a3ac:	f04f 0a00 	mov.w	sl, #0
 800a3b0:	e7e8      	b.n	800a384 <_strtod_l+0xfc>
 800a3b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a3b6:	f04f 3aff 	mov.w	sl, #4294967295
 800a3ba:	e7e3      	b.n	800a384 <_strtod_l+0xfc>
 800a3bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	921d      	str	r2, [sp, #116]	; 0x74
 800a3c2:	785b      	ldrb	r3, [r3, #1]
 800a3c4:	2b30      	cmp	r3, #48	; 0x30
 800a3c6:	d0f9      	beq.n	800a3bc <_strtod_l+0x134>
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d09f      	beq.n	800a30c <_strtod_l+0x84>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f04f 0900 	mov.w	r9, #0
 800a3d2:	9304      	str	r3, [sp, #16]
 800a3d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a3dc:	464f      	mov	r7, r9
 800a3de:	220a      	movs	r2, #10
 800a3e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a3e2:	7806      	ldrb	r6, [r0, #0]
 800a3e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a3e8:	b2d9      	uxtb	r1, r3
 800a3ea:	2909      	cmp	r1, #9
 800a3ec:	d92a      	bls.n	800a444 <_strtod_l+0x1bc>
 800a3ee:	9907      	ldr	r1, [sp, #28]
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	f003 fa44 	bl	800d87e <strncmp>
 800a3f6:	b398      	cbz	r0, 800a460 <_strtod_l+0x1d8>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	4633      	mov	r3, r6
 800a3fc:	463d      	mov	r5, r7
 800a3fe:	9007      	str	r0, [sp, #28]
 800a400:	4602      	mov	r2, r0
 800a402:	2b65      	cmp	r3, #101	; 0x65
 800a404:	d001      	beq.n	800a40a <_strtod_l+0x182>
 800a406:	2b45      	cmp	r3, #69	; 0x45
 800a408:	d118      	bne.n	800a43c <_strtod_l+0x1b4>
 800a40a:	b91d      	cbnz	r5, 800a414 <_strtod_l+0x18c>
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	4303      	orrs	r3, r0
 800a410:	d098      	beq.n	800a344 <_strtod_l+0xbc>
 800a412:	2500      	movs	r5, #0
 800a414:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a418:	f108 0301 	add.w	r3, r8, #1
 800a41c:	931d      	str	r3, [sp, #116]	; 0x74
 800a41e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a422:	2b2b      	cmp	r3, #43	; 0x2b
 800a424:	d075      	beq.n	800a512 <_strtod_l+0x28a>
 800a426:	2b2d      	cmp	r3, #45	; 0x2d
 800a428:	d07b      	beq.n	800a522 <_strtod_l+0x29a>
 800a42a:	f04f 0c00 	mov.w	ip, #0
 800a42e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a432:	2909      	cmp	r1, #9
 800a434:	f240 8082 	bls.w	800a53c <_strtod_l+0x2b4>
 800a438:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a43c:	2600      	movs	r6, #0
 800a43e:	e09d      	b.n	800a57c <_strtod_l+0x2f4>
 800a440:	2300      	movs	r3, #0
 800a442:	e7c4      	b.n	800a3ce <_strtod_l+0x146>
 800a444:	2f08      	cmp	r7, #8
 800a446:	bfd8      	it	le
 800a448:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a44a:	f100 0001 	add.w	r0, r0, #1
 800a44e:	bfda      	itte	le
 800a450:	fb02 3301 	mlale	r3, r2, r1, r3
 800a454:	9309      	strle	r3, [sp, #36]	; 0x24
 800a456:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a45a:	3701      	adds	r7, #1
 800a45c:	901d      	str	r0, [sp, #116]	; 0x74
 800a45e:	e7bf      	b.n	800a3e0 <_strtod_l+0x158>
 800a460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a462:	195a      	adds	r2, r3, r5
 800a464:	921d      	str	r2, [sp, #116]	; 0x74
 800a466:	5d5b      	ldrb	r3, [r3, r5]
 800a468:	2f00      	cmp	r7, #0
 800a46a:	d037      	beq.n	800a4dc <_strtod_l+0x254>
 800a46c:	9007      	str	r0, [sp, #28]
 800a46e:	463d      	mov	r5, r7
 800a470:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a474:	2a09      	cmp	r2, #9
 800a476:	d912      	bls.n	800a49e <_strtod_l+0x216>
 800a478:	2201      	movs	r2, #1
 800a47a:	e7c2      	b.n	800a402 <_strtod_l+0x17a>
 800a47c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	921d      	str	r2, [sp, #116]	; 0x74
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	3001      	adds	r0, #1
 800a486:	2b30      	cmp	r3, #48	; 0x30
 800a488:	d0f8      	beq.n	800a47c <_strtod_l+0x1f4>
 800a48a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a48e:	2a08      	cmp	r2, #8
 800a490:	f200 84db 	bhi.w	800ae4a <_strtod_l+0xbc2>
 800a494:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a496:	9007      	str	r0, [sp, #28]
 800a498:	2000      	movs	r0, #0
 800a49a:	920a      	str	r2, [sp, #40]	; 0x28
 800a49c:	4605      	mov	r5, r0
 800a49e:	3b30      	subs	r3, #48	; 0x30
 800a4a0:	f100 0201 	add.w	r2, r0, #1
 800a4a4:	d014      	beq.n	800a4d0 <_strtod_l+0x248>
 800a4a6:	9907      	ldr	r1, [sp, #28]
 800a4a8:	4411      	add	r1, r2
 800a4aa:	9107      	str	r1, [sp, #28]
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	eb00 0e05 	add.w	lr, r0, r5
 800a4b2:	210a      	movs	r1, #10
 800a4b4:	4572      	cmp	r2, lr
 800a4b6:	d113      	bne.n	800a4e0 <_strtod_l+0x258>
 800a4b8:	182a      	adds	r2, r5, r0
 800a4ba:	2a08      	cmp	r2, #8
 800a4bc:	f105 0501 	add.w	r5, r5, #1
 800a4c0:	4405      	add	r5, r0
 800a4c2:	dc1c      	bgt.n	800a4fe <_strtod_l+0x276>
 800a4c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4c6:	220a      	movs	r2, #10
 800a4c8:	fb02 3301 	mla	r3, r2, r1, r3
 800a4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4d2:	1c59      	adds	r1, r3, #1
 800a4d4:	911d      	str	r1, [sp, #116]	; 0x74
 800a4d6:	785b      	ldrb	r3, [r3, #1]
 800a4d8:	4610      	mov	r0, r2
 800a4da:	e7c9      	b.n	800a470 <_strtod_l+0x1e8>
 800a4dc:	4638      	mov	r0, r7
 800a4de:	e7d2      	b.n	800a486 <_strtod_l+0x1fe>
 800a4e0:	2a08      	cmp	r2, #8
 800a4e2:	dc04      	bgt.n	800a4ee <_strtod_l+0x266>
 800a4e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a4e6:	434e      	muls	r6, r1
 800a4e8:	9609      	str	r6, [sp, #36]	; 0x24
 800a4ea:	3201      	adds	r2, #1
 800a4ec:	e7e2      	b.n	800a4b4 <_strtod_l+0x22c>
 800a4ee:	f102 0c01 	add.w	ip, r2, #1
 800a4f2:	f1bc 0f10 	cmp.w	ip, #16
 800a4f6:	bfd8      	it	le
 800a4f8:	fb01 f909 	mulle.w	r9, r1, r9
 800a4fc:	e7f5      	b.n	800a4ea <_strtod_l+0x262>
 800a4fe:	2d10      	cmp	r5, #16
 800a500:	bfdc      	itt	le
 800a502:	220a      	movle	r2, #10
 800a504:	fb02 3909 	mlale	r9, r2, r9, r3
 800a508:	e7e1      	b.n	800a4ce <_strtod_l+0x246>
 800a50a:	2300      	movs	r3, #0
 800a50c:	9307      	str	r3, [sp, #28]
 800a50e:	2201      	movs	r2, #1
 800a510:	e77c      	b.n	800a40c <_strtod_l+0x184>
 800a512:	f04f 0c00 	mov.w	ip, #0
 800a516:	f108 0302 	add.w	r3, r8, #2
 800a51a:	931d      	str	r3, [sp, #116]	; 0x74
 800a51c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a520:	e785      	b.n	800a42e <_strtod_l+0x1a6>
 800a522:	f04f 0c01 	mov.w	ip, #1
 800a526:	e7f6      	b.n	800a516 <_strtod_l+0x28e>
 800a528:	0800f814 	.word	0x0800f814
 800a52c:	0800f55c 	.word	0x0800f55c
 800a530:	7ff00000 	.word	0x7ff00000
 800a534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a536:	1c59      	adds	r1, r3, #1
 800a538:	911d      	str	r1, [sp, #116]	; 0x74
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	2b30      	cmp	r3, #48	; 0x30
 800a53e:	d0f9      	beq.n	800a534 <_strtod_l+0x2ac>
 800a540:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a544:	2908      	cmp	r1, #8
 800a546:	f63f af79 	bhi.w	800a43c <_strtod_l+0x1b4>
 800a54a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a54e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a550:	9308      	str	r3, [sp, #32]
 800a552:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a554:	1c59      	adds	r1, r3, #1
 800a556:	911d      	str	r1, [sp, #116]	; 0x74
 800a558:	785b      	ldrb	r3, [r3, #1]
 800a55a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a55e:	2e09      	cmp	r6, #9
 800a560:	d937      	bls.n	800a5d2 <_strtod_l+0x34a>
 800a562:	9e08      	ldr	r6, [sp, #32]
 800a564:	1b89      	subs	r1, r1, r6
 800a566:	2908      	cmp	r1, #8
 800a568:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a56c:	dc02      	bgt.n	800a574 <_strtod_l+0x2ec>
 800a56e:	4576      	cmp	r6, lr
 800a570:	bfa8      	it	ge
 800a572:	4676      	movge	r6, lr
 800a574:	f1bc 0f00 	cmp.w	ip, #0
 800a578:	d000      	beq.n	800a57c <_strtod_l+0x2f4>
 800a57a:	4276      	negs	r6, r6
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	d14f      	bne.n	800a620 <_strtod_l+0x398>
 800a580:	9904      	ldr	r1, [sp, #16]
 800a582:	4301      	orrs	r1, r0
 800a584:	f47f aec2 	bne.w	800a30c <_strtod_l+0x84>
 800a588:	2a00      	cmp	r2, #0
 800a58a:	f47f aedb 	bne.w	800a344 <_strtod_l+0xbc>
 800a58e:	2b69      	cmp	r3, #105	; 0x69
 800a590:	d027      	beq.n	800a5e2 <_strtod_l+0x35a>
 800a592:	dc24      	bgt.n	800a5de <_strtod_l+0x356>
 800a594:	2b49      	cmp	r3, #73	; 0x49
 800a596:	d024      	beq.n	800a5e2 <_strtod_l+0x35a>
 800a598:	2b4e      	cmp	r3, #78	; 0x4e
 800a59a:	f47f aed3 	bne.w	800a344 <_strtod_l+0xbc>
 800a59e:	499e      	ldr	r1, [pc, #632]	; (800a818 <_strtod_l+0x590>)
 800a5a0:	a81d      	add	r0, sp, #116	; 0x74
 800a5a2:	f002 f8c3 	bl	800c72c <__match>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f43f aecc 	beq.w	800a344 <_strtod_l+0xbc>
 800a5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b28      	cmp	r3, #40	; 0x28
 800a5b2:	d12d      	bne.n	800a610 <_strtod_l+0x388>
 800a5b4:	4999      	ldr	r1, [pc, #612]	; (800a81c <_strtod_l+0x594>)
 800a5b6:	aa20      	add	r2, sp, #128	; 0x80
 800a5b8:	a81d      	add	r0, sp, #116	; 0x74
 800a5ba:	f002 f8cb 	bl	800c754 <__hexnan>
 800a5be:	2805      	cmp	r0, #5
 800a5c0:	d126      	bne.n	800a610 <_strtod_l+0x388>
 800a5c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a5c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a5cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a5d0:	e69c      	b.n	800a30c <_strtod_l+0x84>
 800a5d2:	210a      	movs	r1, #10
 800a5d4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a5d8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a5dc:	e7b9      	b.n	800a552 <_strtod_l+0x2ca>
 800a5de:	2b6e      	cmp	r3, #110	; 0x6e
 800a5e0:	e7db      	b.n	800a59a <_strtod_l+0x312>
 800a5e2:	498f      	ldr	r1, [pc, #572]	; (800a820 <_strtod_l+0x598>)
 800a5e4:	a81d      	add	r0, sp, #116	; 0x74
 800a5e6:	f002 f8a1 	bl	800c72c <__match>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	f43f aeaa 	beq.w	800a344 <_strtod_l+0xbc>
 800a5f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5f2:	498c      	ldr	r1, [pc, #560]	; (800a824 <_strtod_l+0x59c>)
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	a81d      	add	r0, sp, #116	; 0x74
 800a5f8:	931d      	str	r3, [sp, #116]	; 0x74
 800a5fa:	f002 f897 	bl	800c72c <__match>
 800a5fe:	b910      	cbnz	r0, 800a606 <_strtod_l+0x37e>
 800a600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a602:	3301      	adds	r3, #1
 800a604:	931d      	str	r3, [sp, #116]	; 0x74
 800a606:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a834 <_strtod_l+0x5ac>
 800a60a:	f04f 0a00 	mov.w	sl, #0
 800a60e:	e67d      	b.n	800a30c <_strtod_l+0x84>
 800a610:	4885      	ldr	r0, [pc, #532]	; (800a828 <_strtod_l+0x5a0>)
 800a612:	f003 f8d9 	bl	800d7c8 <nan>
 800a616:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a61a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a61e:	e675      	b.n	800a30c <_strtod_l+0x84>
 800a620:	9b07      	ldr	r3, [sp, #28]
 800a622:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a624:	1af3      	subs	r3, r6, r3
 800a626:	2f00      	cmp	r7, #0
 800a628:	bf08      	it	eq
 800a62a:	462f      	moveq	r7, r5
 800a62c:	2d10      	cmp	r5, #16
 800a62e:	9308      	str	r3, [sp, #32]
 800a630:	46a8      	mov	r8, r5
 800a632:	bfa8      	it	ge
 800a634:	f04f 0810 	movge.w	r8, #16
 800a638:	f7f5 ff8c 	bl	8000554 <__aeabi_ui2d>
 800a63c:	2d09      	cmp	r5, #9
 800a63e:	4682      	mov	sl, r0
 800a640:	468b      	mov	fp, r1
 800a642:	dd13      	ble.n	800a66c <_strtod_l+0x3e4>
 800a644:	4b79      	ldr	r3, [pc, #484]	; (800a82c <_strtod_l+0x5a4>)
 800a646:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a64a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a64e:	f7f5 fffb 	bl	8000648 <__aeabi_dmul>
 800a652:	4682      	mov	sl, r0
 800a654:	4648      	mov	r0, r9
 800a656:	468b      	mov	fp, r1
 800a658:	f7f5 ff7c 	bl	8000554 <__aeabi_ui2d>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4650      	mov	r0, sl
 800a662:	4659      	mov	r1, fp
 800a664:	f7f5 fe3a 	bl	80002dc <__adddf3>
 800a668:	4682      	mov	sl, r0
 800a66a:	468b      	mov	fp, r1
 800a66c:	2d0f      	cmp	r5, #15
 800a66e:	dc38      	bgt.n	800a6e2 <_strtod_l+0x45a>
 800a670:	9b08      	ldr	r3, [sp, #32]
 800a672:	2b00      	cmp	r3, #0
 800a674:	f43f ae4a 	beq.w	800a30c <_strtod_l+0x84>
 800a678:	dd24      	ble.n	800a6c4 <_strtod_l+0x43c>
 800a67a:	2b16      	cmp	r3, #22
 800a67c:	dc0b      	bgt.n	800a696 <_strtod_l+0x40e>
 800a67e:	4d6b      	ldr	r5, [pc, #428]	; (800a82c <_strtod_l+0x5a4>)
 800a680:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a684:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a688:	4652      	mov	r2, sl
 800a68a:	465b      	mov	r3, fp
 800a68c:	f7f5 ffdc 	bl	8000648 <__aeabi_dmul>
 800a690:	4682      	mov	sl, r0
 800a692:	468b      	mov	fp, r1
 800a694:	e63a      	b.n	800a30c <_strtod_l+0x84>
 800a696:	9a08      	ldr	r2, [sp, #32]
 800a698:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a69c:	4293      	cmp	r3, r2
 800a69e:	db20      	blt.n	800a6e2 <_strtod_l+0x45a>
 800a6a0:	4c62      	ldr	r4, [pc, #392]	; (800a82c <_strtod_l+0x5a4>)
 800a6a2:	f1c5 050f 	rsb	r5, r5, #15
 800a6a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	465b      	mov	r3, fp
 800a6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b2:	f7f5 ffc9 	bl	8000648 <__aeabi_dmul>
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	1b5d      	subs	r5, r3, r5
 800a6ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a6be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a6c2:	e7e3      	b.n	800a68c <_strtod_l+0x404>
 800a6c4:	9b08      	ldr	r3, [sp, #32]
 800a6c6:	3316      	adds	r3, #22
 800a6c8:	db0b      	blt.n	800a6e2 <_strtod_l+0x45a>
 800a6ca:	9b07      	ldr	r3, [sp, #28]
 800a6cc:	4a57      	ldr	r2, [pc, #348]	; (800a82c <_strtod_l+0x5a4>)
 800a6ce:	1b9e      	subs	r6, r3, r6
 800a6d0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a6d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6d8:	4650      	mov	r0, sl
 800a6da:	4659      	mov	r1, fp
 800a6dc:	f7f6 f8de 	bl	800089c <__aeabi_ddiv>
 800a6e0:	e7d6      	b.n	800a690 <_strtod_l+0x408>
 800a6e2:	9b08      	ldr	r3, [sp, #32]
 800a6e4:	eba5 0808 	sub.w	r8, r5, r8
 800a6e8:	4498      	add	r8, r3
 800a6ea:	f1b8 0f00 	cmp.w	r8, #0
 800a6ee:	dd71      	ble.n	800a7d4 <_strtod_l+0x54c>
 800a6f0:	f018 030f 	ands.w	r3, r8, #15
 800a6f4:	d00a      	beq.n	800a70c <_strtod_l+0x484>
 800a6f6:	494d      	ldr	r1, [pc, #308]	; (800a82c <_strtod_l+0x5a4>)
 800a6f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6fc:	4652      	mov	r2, sl
 800a6fe:	465b      	mov	r3, fp
 800a700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a704:	f7f5 ffa0 	bl	8000648 <__aeabi_dmul>
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	f038 080f 	bics.w	r8, r8, #15
 800a710:	d04d      	beq.n	800a7ae <_strtod_l+0x526>
 800a712:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a716:	dd22      	ble.n	800a75e <_strtod_l+0x4d6>
 800a718:	2500      	movs	r5, #0
 800a71a:	462e      	mov	r6, r5
 800a71c:	9509      	str	r5, [sp, #36]	; 0x24
 800a71e:	9507      	str	r5, [sp, #28]
 800a720:	2322      	movs	r3, #34	; 0x22
 800a722:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a834 <_strtod_l+0x5ac>
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	f04f 0a00 	mov.w	sl, #0
 800a72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f43f adec 	beq.w	800a30c <_strtod_l+0x84>
 800a734:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a736:	4620      	mov	r0, r4
 800a738:	f002 f96e 	bl	800ca18 <_Bfree>
 800a73c:	9907      	ldr	r1, [sp, #28]
 800a73e:	4620      	mov	r0, r4
 800a740:	f002 f96a 	bl	800ca18 <_Bfree>
 800a744:	4631      	mov	r1, r6
 800a746:	4620      	mov	r0, r4
 800a748:	f002 f966 	bl	800ca18 <_Bfree>
 800a74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a74e:	4620      	mov	r0, r4
 800a750:	f002 f962 	bl	800ca18 <_Bfree>
 800a754:	4629      	mov	r1, r5
 800a756:	4620      	mov	r0, r4
 800a758:	f002 f95e 	bl	800ca18 <_Bfree>
 800a75c:	e5d6      	b.n	800a30c <_strtod_l+0x84>
 800a75e:	2300      	movs	r3, #0
 800a760:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a764:	4650      	mov	r0, sl
 800a766:	4659      	mov	r1, fp
 800a768:	4699      	mov	r9, r3
 800a76a:	f1b8 0f01 	cmp.w	r8, #1
 800a76e:	dc21      	bgt.n	800a7b4 <_strtod_l+0x52c>
 800a770:	b10b      	cbz	r3, 800a776 <_strtod_l+0x4ee>
 800a772:	4682      	mov	sl, r0
 800a774:	468b      	mov	fp, r1
 800a776:	4b2e      	ldr	r3, [pc, #184]	; (800a830 <_strtod_l+0x5a8>)
 800a778:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a77c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a780:	4652      	mov	r2, sl
 800a782:	465b      	mov	r3, fp
 800a784:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a788:	f7f5 ff5e 	bl	8000648 <__aeabi_dmul>
 800a78c:	4b29      	ldr	r3, [pc, #164]	; (800a834 <_strtod_l+0x5ac>)
 800a78e:	460a      	mov	r2, r1
 800a790:	400b      	ands	r3, r1
 800a792:	4929      	ldr	r1, [pc, #164]	; (800a838 <_strtod_l+0x5b0>)
 800a794:	428b      	cmp	r3, r1
 800a796:	4682      	mov	sl, r0
 800a798:	d8be      	bhi.n	800a718 <_strtod_l+0x490>
 800a79a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a79e:	428b      	cmp	r3, r1
 800a7a0:	bf86      	itte	hi
 800a7a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a83c <_strtod_l+0x5b4>
 800a7a6:	f04f 3aff 	movhi.w	sl, #4294967295
 800a7aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	e081      	b.n	800a8b8 <_strtod_l+0x630>
 800a7b4:	f018 0f01 	tst.w	r8, #1
 800a7b8:	d007      	beq.n	800a7ca <_strtod_l+0x542>
 800a7ba:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <_strtod_l+0x5a8>)
 800a7bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 ff40 	bl	8000648 <__aeabi_dmul>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	f109 0901 	add.w	r9, r9, #1
 800a7ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7d2:	e7ca      	b.n	800a76a <_strtod_l+0x4e2>
 800a7d4:	d0eb      	beq.n	800a7ae <_strtod_l+0x526>
 800a7d6:	f1c8 0800 	rsb	r8, r8, #0
 800a7da:	f018 020f 	ands.w	r2, r8, #15
 800a7de:	d00a      	beq.n	800a7f6 <_strtod_l+0x56e>
 800a7e0:	4b12      	ldr	r3, [pc, #72]	; (800a82c <_strtod_l+0x5a4>)
 800a7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e6:	4650      	mov	r0, sl
 800a7e8:	4659      	mov	r1, fp
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	f7f6 f855 	bl	800089c <__aeabi_ddiv>
 800a7f2:	4682      	mov	sl, r0
 800a7f4:	468b      	mov	fp, r1
 800a7f6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a7fa:	d0d8      	beq.n	800a7ae <_strtod_l+0x526>
 800a7fc:	f1b8 0f1f 	cmp.w	r8, #31
 800a800:	dd1e      	ble.n	800a840 <_strtod_l+0x5b8>
 800a802:	2500      	movs	r5, #0
 800a804:	462e      	mov	r6, r5
 800a806:	9509      	str	r5, [sp, #36]	; 0x24
 800a808:	9507      	str	r5, [sp, #28]
 800a80a:	2322      	movs	r3, #34	; 0x22
 800a80c:	f04f 0a00 	mov.w	sl, #0
 800a810:	f04f 0b00 	mov.w	fp, #0
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	e789      	b.n	800a72c <_strtod_l+0x4a4>
 800a818:	0800f535 	.word	0x0800f535
 800a81c:	0800f570 	.word	0x0800f570
 800a820:	0800f52d 	.word	0x0800f52d
 800a824:	0800f6b4 	.word	0x0800f6b4
 800a828:	0800f9d0 	.word	0x0800f9d0
 800a82c:	0800f8b0 	.word	0x0800f8b0
 800a830:	0800f888 	.word	0x0800f888
 800a834:	7ff00000 	.word	0x7ff00000
 800a838:	7ca00000 	.word	0x7ca00000
 800a83c:	7fefffff 	.word	0x7fefffff
 800a840:	f018 0310 	ands.w	r3, r8, #16
 800a844:	bf18      	it	ne
 800a846:	236a      	movne	r3, #106	; 0x6a
 800a848:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ac00 <_strtod_l+0x978>
 800a84c:	9304      	str	r3, [sp, #16]
 800a84e:	4650      	mov	r0, sl
 800a850:	4659      	mov	r1, fp
 800a852:	2300      	movs	r3, #0
 800a854:	f018 0f01 	tst.w	r8, #1
 800a858:	d004      	beq.n	800a864 <_strtod_l+0x5dc>
 800a85a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a85e:	f7f5 fef3 	bl	8000648 <__aeabi_dmul>
 800a862:	2301      	movs	r3, #1
 800a864:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a868:	f109 0908 	add.w	r9, r9, #8
 800a86c:	d1f2      	bne.n	800a854 <_strtod_l+0x5cc>
 800a86e:	b10b      	cbz	r3, 800a874 <_strtod_l+0x5ec>
 800a870:	4682      	mov	sl, r0
 800a872:	468b      	mov	fp, r1
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	b1bb      	cbz	r3, 800a8a8 <_strtod_l+0x620>
 800a878:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a87c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a880:	2b00      	cmp	r3, #0
 800a882:	4659      	mov	r1, fp
 800a884:	dd10      	ble.n	800a8a8 <_strtod_l+0x620>
 800a886:	2b1f      	cmp	r3, #31
 800a888:	f340 8128 	ble.w	800aadc <_strtod_l+0x854>
 800a88c:	2b34      	cmp	r3, #52	; 0x34
 800a88e:	bfde      	ittt	le
 800a890:	3b20      	suble	r3, #32
 800a892:	f04f 32ff 	movle.w	r2, #4294967295
 800a896:	fa02 f303 	lslle.w	r3, r2, r3
 800a89a:	f04f 0a00 	mov.w	sl, #0
 800a89e:	bfcc      	ite	gt
 800a8a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a8a4:	ea03 0b01 	andle.w	fp, r3, r1
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	4650      	mov	r0, sl
 800a8ae:	4659      	mov	r1, fp
 800a8b0:	f7f6 f932 	bl	8000b18 <__aeabi_dcmpeq>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1a4      	bne.n	800a802 <_strtod_l+0x57a>
 800a8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8be:	462b      	mov	r3, r5
 800a8c0:	463a      	mov	r2, r7
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f002 f914 	bl	800caf0 <__s2b>
 800a8c8:	9009      	str	r0, [sp, #36]	; 0x24
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f43f af24 	beq.w	800a718 <_strtod_l+0x490>
 800a8d0:	9b07      	ldr	r3, [sp, #28]
 800a8d2:	1b9e      	subs	r6, r3, r6
 800a8d4:	9b08      	ldr	r3, [sp, #32]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfb4      	ite	lt
 800a8da:	4633      	movlt	r3, r6
 800a8dc:	2300      	movge	r3, #0
 800a8de:	9310      	str	r3, [sp, #64]	; 0x40
 800a8e0:	9b08      	ldr	r3, [sp, #32]
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8e8:	9318      	str	r3, [sp, #96]	; 0x60
 800a8ea:	462e      	mov	r6, r5
 800a8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	6859      	ldr	r1, [r3, #4]
 800a8f2:	f002 f851 	bl	800c998 <_Balloc>
 800a8f6:	9007      	str	r0, [sp, #28]
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	f43f af11 	beq.w	800a720 <_strtod_l+0x498>
 800a8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a900:	691a      	ldr	r2, [r3, #16]
 800a902:	3202      	adds	r2, #2
 800a904:	f103 010c 	add.w	r1, r3, #12
 800a908:	0092      	lsls	r2, r2, #2
 800a90a:	300c      	adds	r0, #12
 800a90c:	f7fe ff62 	bl	80097d4 <memcpy>
 800a910:	ec4b ab10 	vmov	d0, sl, fp
 800a914:	aa20      	add	r2, sp, #128	; 0x80
 800a916:	a91f      	add	r1, sp, #124	; 0x7c
 800a918:	4620      	mov	r0, r4
 800a91a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a91e:	f002 fc23 	bl	800d168 <__d2b>
 800a922:	901e      	str	r0, [sp, #120]	; 0x78
 800a924:	2800      	cmp	r0, #0
 800a926:	f43f aefb 	beq.w	800a720 <_strtod_l+0x498>
 800a92a:	2101      	movs	r1, #1
 800a92c:	4620      	mov	r0, r4
 800a92e:	f002 f979 	bl	800cc24 <__i2b>
 800a932:	4606      	mov	r6, r0
 800a934:	2800      	cmp	r0, #0
 800a936:	f43f aef3 	beq.w	800a720 <_strtod_l+0x498>
 800a93a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a93c:	9904      	ldr	r1, [sp, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfab      	itete	ge
 800a942:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a944:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a946:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a948:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a94c:	bfac      	ite	ge
 800a94e:	eb03 0902 	addge.w	r9, r3, r2
 800a952:	1ad7      	sublt	r7, r2, r3
 800a954:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a956:	eba3 0801 	sub.w	r8, r3, r1
 800a95a:	4490      	add	r8, r2
 800a95c:	4ba3      	ldr	r3, [pc, #652]	; (800abec <_strtod_l+0x964>)
 800a95e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a962:	4598      	cmp	r8, r3
 800a964:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a968:	f280 80cc 	bge.w	800ab04 <_strtod_l+0x87c>
 800a96c:	eba3 0308 	sub.w	r3, r3, r8
 800a970:	2b1f      	cmp	r3, #31
 800a972:	eba2 0203 	sub.w	r2, r2, r3
 800a976:	f04f 0101 	mov.w	r1, #1
 800a97a:	f300 80b6 	bgt.w	800aaea <_strtod_l+0x862>
 800a97e:	fa01 f303 	lsl.w	r3, r1, r3
 800a982:	9311      	str	r3, [sp, #68]	; 0x44
 800a984:	2300      	movs	r3, #0
 800a986:	930c      	str	r3, [sp, #48]	; 0x30
 800a988:	eb09 0802 	add.w	r8, r9, r2
 800a98c:	9b04      	ldr	r3, [sp, #16]
 800a98e:	45c1      	cmp	r9, r8
 800a990:	4417      	add	r7, r2
 800a992:	441f      	add	r7, r3
 800a994:	464b      	mov	r3, r9
 800a996:	bfa8      	it	ge
 800a998:	4643      	movge	r3, r8
 800a99a:	42bb      	cmp	r3, r7
 800a99c:	bfa8      	it	ge
 800a99e:	463b      	movge	r3, r7
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	bfc2      	ittt	gt
 800a9a4:	eba8 0803 	subgt.w	r8, r8, r3
 800a9a8:	1aff      	subgt	r7, r7, r3
 800a9aa:	eba9 0903 	subgt.w	r9, r9, r3
 800a9ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dd17      	ble.n	800a9e4 <_strtod_l+0x75c>
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f002 f9ef 	bl	800cd9c <__pow5mult>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	f43f aead 	beq.w	800a720 <_strtod_l+0x498>
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f002 f940 	bl	800cc50 <__multiply>
 800a9d0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f43f aea4 	beq.w	800a720 <_strtod_l+0x498>
 800a9d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f002 f81c 	bl	800ca18 <_Bfree>
 800a9e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9e2:	931e      	str	r3, [sp, #120]	; 0x78
 800a9e4:	f1b8 0f00 	cmp.w	r8, #0
 800a9e8:	f300 8091 	bgt.w	800ab0e <_strtod_l+0x886>
 800a9ec:	9b08      	ldr	r3, [sp, #32]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dd08      	ble.n	800aa04 <_strtod_l+0x77c>
 800a9f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9f4:	9907      	ldr	r1, [sp, #28]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f002 f9d0 	bl	800cd9c <__pow5mult>
 800a9fc:	9007      	str	r0, [sp, #28]
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	f43f ae8e 	beq.w	800a720 <_strtod_l+0x498>
 800aa04:	2f00      	cmp	r7, #0
 800aa06:	dd08      	ble.n	800aa1a <_strtod_l+0x792>
 800aa08:	9907      	ldr	r1, [sp, #28]
 800aa0a:	463a      	mov	r2, r7
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f002 fa1f 	bl	800ce50 <__lshift>
 800aa12:	9007      	str	r0, [sp, #28]
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f43f ae83 	beq.w	800a720 <_strtod_l+0x498>
 800aa1a:	f1b9 0f00 	cmp.w	r9, #0
 800aa1e:	dd08      	ble.n	800aa32 <_strtod_l+0x7aa>
 800aa20:	4631      	mov	r1, r6
 800aa22:	464a      	mov	r2, r9
 800aa24:	4620      	mov	r0, r4
 800aa26:	f002 fa13 	bl	800ce50 <__lshift>
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	f43f ae77 	beq.w	800a720 <_strtod_l+0x498>
 800aa32:	9a07      	ldr	r2, [sp, #28]
 800aa34:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aa36:	4620      	mov	r0, r4
 800aa38:	f002 fa92 	bl	800cf60 <__mdiff>
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f43f ae6e 	beq.w	800a720 <_strtod_l+0x498>
 800aa44:	68c3      	ldr	r3, [r0, #12]
 800aa46:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa48:	2300      	movs	r3, #0
 800aa4a:	60c3      	str	r3, [r0, #12]
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	f002 fa6b 	bl	800cf28 <__mcmp>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	da65      	bge.n	800ab22 <_strtod_l+0x89a>
 800aa56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa58:	ea53 030a 	orrs.w	r3, r3, sl
 800aa5c:	f040 8087 	bne.w	800ab6e <_strtod_l+0x8e6>
 800aa60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f040 8082 	bne.w	800ab6e <_strtod_l+0x8e6>
 800aa6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa6e:	0d1b      	lsrs	r3, r3, #20
 800aa70:	051b      	lsls	r3, r3, #20
 800aa72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa76:	d97a      	bls.n	800ab6e <_strtod_l+0x8e6>
 800aa78:	696b      	ldr	r3, [r5, #20]
 800aa7a:	b913      	cbnz	r3, 800aa82 <_strtod_l+0x7fa>
 800aa7c:	692b      	ldr	r3, [r5, #16]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	dd75      	ble.n	800ab6e <_strtod_l+0x8e6>
 800aa82:	4629      	mov	r1, r5
 800aa84:	2201      	movs	r2, #1
 800aa86:	4620      	mov	r0, r4
 800aa88:	f002 f9e2 	bl	800ce50 <__lshift>
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4605      	mov	r5, r0
 800aa90:	f002 fa4a 	bl	800cf28 <__mcmp>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	dd6a      	ble.n	800ab6e <_strtod_l+0x8e6>
 800aa98:	9904      	ldr	r1, [sp, #16]
 800aa9a:	4a55      	ldr	r2, [pc, #340]	; (800abf0 <_strtod_l+0x968>)
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	f000 8085 	beq.w	800abae <_strtod_l+0x926>
 800aaa4:	ea02 010b 	and.w	r1, r2, fp
 800aaa8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aaac:	dc7f      	bgt.n	800abae <_strtod_l+0x926>
 800aaae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aab2:	f77f aeaa 	ble.w	800a80a <_strtod_l+0x582>
 800aab6:	4a4f      	ldr	r2, [pc, #316]	; (800abf4 <_strtod_l+0x96c>)
 800aab8:	2300      	movs	r3, #0
 800aaba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800aabe:	4650      	mov	r0, sl
 800aac0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800aac4:	4659      	mov	r1, fp
 800aac6:	f7f5 fdbf 	bl	8000648 <__aeabi_dmul>
 800aaca:	460b      	mov	r3, r1
 800aacc:	4303      	orrs	r3, r0
 800aace:	bf08      	it	eq
 800aad0:	2322      	moveq	r3, #34	; 0x22
 800aad2:	4682      	mov	sl, r0
 800aad4:	468b      	mov	fp, r1
 800aad6:	bf08      	it	eq
 800aad8:	6023      	streq	r3, [r4, #0]
 800aada:	e62b      	b.n	800a734 <_strtod_l+0x4ac>
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	ea03 0a0a 	and.w	sl, r3, sl
 800aae8:	e6de      	b.n	800a8a8 <_strtod_l+0x620>
 800aaea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aaee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aaf2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aaf6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aafa:	fa01 f308 	lsl.w	r3, r1, r8
 800aafe:	930c      	str	r3, [sp, #48]	; 0x30
 800ab00:	9111      	str	r1, [sp, #68]	; 0x44
 800ab02:	e741      	b.n	800a988 <_strtod_l+0x700>
 800ab04:	2300      	movs	r3, #0
 800ab06:	930c      	str	r3, [sp, #48]	; 0x30
 800ab08:	2301      	movs	r3, #1
 800ab0a:	9311      	str	r3, [sp, #68]	; 0x44
 800ab0c:	e73c      	b.n	800a988 <_strtod_l+0x700>
 800ab0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ab10:	4642      	mov	r2, r8
 800ab12:	4620      	mov	r0, r4
 800ab14:	f002 f99c 	bl	800ce50 <__lshift>
 800ab18:	901e      	str	r0, [sp, #120]	; 0x78
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f47f af66 	bne.w	800a9ec <_strtod_l+0x764>
 800ab20:	e5fe      	b.n	800a720 <_strtod_l+0x498>
 800ab22:	465f      	mov	r7, fp
 800ab24:	d16e      	bne.n	800ac04 <_strtod_l+0x97c>
 800ab26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab2c:	b342      	cbz	r2, 800ab80 <_strtod_l+0x8f8>
 800ab2e:	4a32      	ldr	r2, [pc, #200]	; (800abf8 <_strtod_l+0x970>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d128      	bne.n	800ab86 <_strtod_l+0x8fe>
 800ab34:	9b04      	ldr	r3, [sp, #16]
 800ab36:	4650      	mov	r0, sl
 800ab38:	b1eb      	cbz	r3, 800ab76 <_strtod_l+0x8ee>
 800ab3a:	4a2d      	ldr	r2, [pc, #180]	; (800abf0 <_strtod_l+0x968>)
 800ab3c:	403a      	ands	r2, r7
 800ab3e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ab42:	f04f 31ff 	mov.w	r1, #4294967295
 800ab46:	d819      	bhi.n	800ab7c <_strtod_l+0x8f4>
 800ab48:	0d12      	lsrs	r2, r2, #20
 800ab4a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab52:	4298      	cmp	r0, r3
 800ab54:	d117      	bne.n	800ab86 <_strtod_l+0x8fe>
 800ab56:	4b29      	ldr	r3, [pc, #164]	; (800abfc <_strtod_l+0x974>)
 800ab58:	429f      	cmp	r7, r3
 800ab5a:	d102      	bne.n	800ab62 <_strtod_l+0x8da>
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f43f addf 	beq.w	800a720 <_strtod_l+0x498>
 800ab62:	4b23      	ldr	r3, [pc, #140]	; (800abf0 <_strtod_l+0x968>)
 800ab64:	403b      	ands	r3, r7
 800ab66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ab6a:	f04f 0a00 	mov.w	sl, #0
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1a0      	bne.n	800aab6 <_strtod_l+0x82e>
 800ab74:	e5de      	b.n	800a734 <_strtod_l+0x4ac>
 800ab76:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7a:	e7ea      	b.n	800ab52 <_strtod_l+0x8ca>
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	e7e8      	b.n	800ab52 <_strtod_l+0x8ca>
 800ab80:	ea53 030a 	orrs.w	r3, r3, sl
 800ab84:	d088      	beq.n	800aa98 <_strtod_l+0x810>
 800ab86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab88:	b1db      	cbz	r3, 800abc2 <_strtod_l+0x93a>
 800ab8a:	423b      	tst	r3, r7
 800ab8c:	d0ef      	beq.n	800ab6e <_strtod_l+0x8e6>
 800ab8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab90:	9a04      	ldr	r2, [sp, #16]
 800ab92:	4650      	mov	r0, sl
 800ab94:	4659      	mov	r1, fp
 800ab96:	b1c3      	cbz	r3, 800abca <_strtod_l+0x942>
 800ab98:	f7ff fb5a 	bl	800a250 <sulp>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aba4:	f7f5 fb9a 	bl	80002dc <__adddf3>
 800aba8:	4682      	mov	sl, r0
 800abaa:	468b      	mov	fp, r1
 800abac:	e7df      	b.n	800ab6e <_strtod_l+0x8e6>
 800abae:	4013      	ands	r3, r2
 800abb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800abb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800abbc:	f04f 3aff 	mov.w	sl, #4294967295
 800abc0:	e7d5      	b.n	800ab6e <_strtod_l+0x8e6>
 800abc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abc4:	ea13 0f0a 	tst.w	r3, sl
 800abc8:	e7e0      	b.n	800ab8c <_strtod_l+0x904>
 800abca:	f7ff fb41 	bl	800a250 <sulp>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800abd6:	f7f5 fb7f 	bl	80002d8 <__aeabi_dsub>
 800abda:	2200      	movs	r2, #0
 800abdc:	2300      	movs	r3, #0
 800abde:	4682      	mov	sl, r0
 800abe0:	468b      	mov	fp, r1
 800abe2:	f7f5 ff99 	bl	8000b18 <__aeabi_dcmpeq>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d0c1      	beq.n	800ab6e <_strtod_l+0x8e6>
 800abea:	e60e      	b.n	800a80a <_strtod_l+0x582>
 800abec:	fffffc02 	.word	0xfffffc02
 800abf0:	7ff00000 	.word	0x7ff00000
 800abf4:	39500000 	.word	0x39500000
 800abf8:	000fffff 	.word	0x000fffff
 800abfc:	7fefffff 	.word	0x7fefffff
 800ac00:	0800f588 	.word	0x0800f588
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	f002 fb0a 	bl	800d220 <__ratio>
 800ac0c:	ec59 8b10 	vmov	r8, r9, d0
 800ac10:	ee10 0a10 	vmov	r0, s0
 800ac14:	2200      	movs	r2, #0
 800ac16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	f7f5 ff90 	bl	8000b40 <__aeabi_dcmple>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d07c      	beq.n	800ad1e <_strtod_l+0xa96>
 800ac24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d04c      	beq.n	800acc4 <_strtod_l+0xa3c>
 800ac2a:	4b95      	ldr	r3, [pc, #596]	; (800ae80 <_strtod_l+0xbf8>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ac32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ae80 <_strtod_l+0xbf8>
 800ac36:	f04f 0800 	mov.w	r8, #0
 800ac3a:	4b92      	ldr	r3, [pc, #584]	; (800ae84 <_strtod_l+0xbfc>)
 800ac3c:	403b      	ands	r3, r7
 800ac3e:	9311      	str	r3, [sp, #68]	; 0x44
 800ac40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac42:	4b91      	ldr	r3, [pc, #580]	; (800ae88 <_strtod_l+0xc00>)
 800ac44:	429a      	cmp	r2, r3
 800ac46:	f040 80b2 	bne.w	800adae <_strtod_l+0xb26>
 800ac4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac52:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ac56:	ec4b ab10 	vmov	d0, sl, fp
 800ac5a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800ac5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac62:	f002 fa05 	bl	800d070 <__ulp>
 800ac66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac6a:	ec53 2b10 	vmov	r2, r3, d0
 800ac6e:	f7f5 fceb 	bl	8000648 <__aeabi_dmul>
 800ac72:	4652      	mov	r2, sl
 800ac74:	465b      	mov	r3, fp
 800ac76:	f7f5 fb31 	bl	80002dc <__adddf3>
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4981      	ldr	r1, [pc, #516]	; (800ae84 <_strtod_l+0xbfc>)
 800ac7e:	4a83      	ldr	r2, [pc, #524]	; (800ae8c <_strtod_l+0xc04>)
 800ac80:	4019      	ands	r1, r3
 800ac82:	4291      	cmp	r1, r2
 800ac84:	4682      	mov	sl, r0
 800ac86:	d95e      	bls.n	800ad46 <_strtod_l+0xabe>
 800ac88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d103      	bne.n	800ac9a <_strtod_l+0xa12>
 800ac92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac94:	3301      	adds	r3, #1
 800ac96:	f43f ad43 	beq.w	800a720 <_strtod_l+0x498>
 800ac9a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ae98 <_strtod_l+0xc10>
 800ac9e:	f04f 3aff 	mov.w	sl, #4294967295
 800aca2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aca4:	4620      	mov	r0, r4
 800aca6:	f001 feb7 	bl	800ca18 <_Bfree>
 800acaa:	9907      	ldr	r1, [sp, #28]
 800acac:	4620      	mov	r0, r4
 800acae:	f001 feb3 	bl	800ca18 <_Bfree>
 800acb2:	4631      	mov	r1, r6
 800acb4:	4620      	mov	r0, r4
 800acb6:	f001 feaf 	bl	800ca18 <_Bfree>
 800acba:	4629      	mov	r1, r5
 800acbc:	4620      	mov	r0, r4
 800acbe:	f001 feab 	bl	800ca18 <_Bfree>
 800acc2:	e613      	b.n	800a8ec <_strtod_l+0x664>
 800acc4:	f1ba 0f00 	cmp.w	sl, #0
 800acc8:	d11b      	bne.n	800ad02 <_strtod_l+0xa7a>
 800acca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acce:	b9f3      	cbnz	r3, 800ad0e <_strtod_l+0xa86>
 800acd0:	4b6b      	ldr	r3, [pc, #428]	; (800ae80 <_strtod_l+0xbf8>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	4640      	mov	r0, r8
 800acd6:	4649      	mov	r1, r9
 800acd8:	f7f5 ff28 	bl	8000b2c <__aeabi_dcmplt>
 800acdc:	b9d0      	cbnz	r0, 800ad14 <_strtod_l+0xa8c>
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	4b6b      	ldr	r3, [pc, #428]	; (800ae90 <_strtod_l+0xc08>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	f7f5 fcaf 	bl	8000648 <__aeabi_dmul>
 800acea:	4680      	mov	r8, r0
 800acec:	4689      	mov	r9, r1
 800acee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acf2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800acf6:	931b      	str	r3, [sp, #108]	; 0x6c
 800acf8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800acfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ad00:	e79b      	b.n	800ac3a <_strtod_l+0x9b2>
 800ad02:	f1ba 0f01 	cmp.w	sl, #1
 800ad06:	d102      	bne.n	800ad0e <_strtod_l+0xa86>
 800ad08:	2f00      	cmp	r7, #0
 800ad0a:	f43f ad7e 	beq.w	800a80a <_strtod_l+0x582>
 800ad0e:	4b61      	ldr	r3, [pc, #388]	; (800ae94 <_strtod_l+0xc0c>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	e78c      	b.n	800ac2e <_strtod_l+0x9a6>
 800ad14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ae90 <_strtod_l+0xc08>
 800ad18:	f04f 0800 	mov.w	r8, #0
 800ad1c:	e7e7      	b.n	800acee <_strtod_l+0xa66>
 800ad1e:	4b5c      	ldr	r3, [pc, #368]	; (800ae90 <_strtod_l+0xc08>)
 800ad20:	4640      	mov	r0, r8
 800ad22:	4649      	mov	r1, r9
 800ad24:	2200      	movs	r2, #0
 800ad26:	f7f5 fc8f 	bl	8000648 <__aeabi_dmul>
 800ad2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	4689      	mov	r9, r1
 800ad30:	b933      	cbnz	r3, 800ad40 <_strtod_l+0xab8>
 800ad32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad36:	9012      	str	r0, [sp, #72]	; 0x48
 800ad38:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ad3e:	e7dd      	b.n	800acfc <_strtod_l+0xa74>
 800ad40:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800ad44:	e7f9      	b.n	800ad3a <_strtod_l+0xab2>
 800ad46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ad4a:	9b04      	ldr	r3, [sp, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1a8      	bne.n	800aca2 <_strtod_l+0xa1a>
 800ad50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad56:	0d1b      	lsrs	r3, r3, #20
 800ad58:	051b      	lsls	r3, r3, #20
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d1a1      	bne.n	800aca2 <_strtod_l+0xa1a>
 800ad5e:	4640      	mov	r0, r8
 800ad60:	4649      	mov	r1, r9
 800ad62:	f7f5 ffd1 	bl	8000d08 <__aeabi_d2lz>
 800ad66:	f7f5 fc41 	bl	80005ec <__aeabi_l2d>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4649      	mov	r1, r9
 800ad72:	f7f5 fab1 	bl	80002d8 <__aeabi_dsub>
 800ad76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad7c:	ea43 030a 	orr.w	r3, r3, sl
 800ad80:	4313      	orrs	r3, r2
 800ad82:	4680      	mov	r8, r0
 800ad84:	4689      	mov	r9, r1
 800ad86:	d053      	beq.n	800ae30 <_strtod_l+0xba8>
 800ad88:	a335      	add	r3, pc, #212	; (adr r3, 800ae60 <_strtod_l+0xbd8>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f7f5 fecd 	bl	8000b2c <__aeabi_dcmplt>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f47f acce 	bne.w	800a734 <_strtod_l+0x4ac>
 800ad98:	a333      	add	r3, pc, #204	; (adr r3, 800ae68 <_strtod_l+0xbe0>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	4640      	mov	r0, r8
 800ada0:	4649      	mov	r1, r9
 800ada2:	f7f5 fee1 	bl	8000b68 <__aeabi_dcmpgt>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f43f af7b 	beq.w	800aca2 <_strtod_l+0xa1a>
 800adac:	e4c2      	b.n	800a734 <_strtod_l+0x4ac>
 800adae:	9b04      	ldr	r3, [sp, #16]
 800adb0:	b333      	cbz	r3, 800ae00 <_strtod_l+0xb78>
 800adb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800adb8:	d822      	bhi.n	800ae00 <_strtod_l+0xb78>
 800adba:	a32d      	add	r3, pc, #180	; (adr r3, 800ae70 <_strtod_l+0xbe8>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	4640      	mov	r0, r8
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 febc 	bl	8000b40 <__aeabi_dcmple>
 800adc8:	b1a0      	cbz	r0, 800adf4 <_strtod_l+0xb6c>
 800adca:	4649      	mov	r1, r9
 800adcc:	4640      	mov	r0, r8
 800adce:	f7f5 ff13 	bl	8000bf8 <__aeabi_d2uiz>
 800add2:	2801      	cmp	r0, #1
 800add4:	bf38      	it	cc
 800add6:	2001      	movcc	r0, #1
 800add8:	f7f5 fbbc 	bl	8000554 <__aeabi_ui2d>
 800addc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adde:	4680      	mov	r8, r0
 800ade0:	4689      	mov	r9, r1
 800ade2:	bb13      	cbnz	r3, 800ae2a <_strtod_l+0xba2>
 800ade4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ade8:	9014      	str	r0, [sp, #80]	; 0x50
 800adea:	9315      	str	r3, [sp, #84]	; 0x54
 800adec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800adf0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800adf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800adf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800adfc:	1a9b      	subs	r3, r3, r2
 800adfe:	930d      	str	r3, [sp, #52]	; 0x34
 800ae00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae04:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ae08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae0c:	f002 f930 	bl	800d070 <__ulp>
 800ae10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae14:	ec53 2b10 	vmov	r2, r3, d0
 800ae18:	f7f5 fc16 	bl	8000648 <__aeabi_dmul>
 800ae1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae20:	f7f5 fa5c 	bl	80002dc <__adddf3>
 800ae24:	4682      	mov	sl, r0
 800ae26:	468b      	mov	fp, r1
 800ae28:	e78f      	b.n	800ad4a <_strtod_l+0xac2>
 800ae2a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ae2e:	e7dd      	b.n	800adec <_strtod_l+0xb64>
 800ae30:	a311      	add	r3, pc, #68	; (adr r3, 800ae78 <_strtod_l+0xbf0>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f7f5 fe79 	bl	8000b2c <__aeabi_dcmplt>
 800ae3a:	e7b4      	b.n	800ada6 <_strtod_l+0xb1e>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	930e      	str	r3, [sp, #56]	; 0x38
 800ae40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	f7ff ba65 	b.w	800a314 <_strtod_l+0x8c>
 800ae4a:	2b65      	cmp	r3, #101	; 0x65
 800ae4c:	f43f ab5d 	beq.w	800a50a <_strtod_l+0x282>
 800ae50:	2b45      	cmp	r3, #69	; 0x45
 800ae52:	f43f ab5a 	beq.w	800a50a <_strtod_l+0x282>
 800ae56:	2201      	movs	r2, #1
 800ae58:	f7ff bb92 	b.w	800a580 <_strtod_l+0x2f8>
 800ae5c:	f3af 8000 	nop.w
 800ae60:	94a03595 	.word	0x94a03595
 800ae64:	3fdfffff 	.word	0x3fdfffff
 800ae68:	35afe535 	.word	0x35afe535
 800ae6c:	3fe00000 	.word	0x3fe00000
 800ae70:	ffc00000 	.word	0xffc00000
 800ae74:	41dfffff 	.word	0x41dfffff
 800ae78:	94a03595 	.word	0x94a03595
 800ae7c:	3fcfffff 	.word	0x3fcfffff
 800ae80:	3ff00000 	.word	0x3ff00000
 800ae84:	7ff00000 	.word	0x7ff00000
 800ae88:	7fe00000 	.word	0x7fe00000
 800ae8c:	7c9fffff 	.word	0x7c9fffff
 800ae90:	3fe00000 	.word	0x3fe00000
 800ae94:	bff00000 	.word	0xbff00000
 800ae98:	7fefffff 	.word	0x7fefffff

0800ae9c <strtod>:
 800ae9c:	460a      	mov	r2, r1
 800ae9e:	4601      	mov	r1, r0
 800aea0:	4802      	ldr	r0, [pc, #8]	; (800aeac <strtod+0x10>)
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <strtod+0x14>)
 800aea4:	6800      	ldr	r0, [r0, #0]
 800aea6:	f7ff b9ef 	b.w	800a288 <_strtod_l>
 800aeaa:	bf00      	nop
 800aeac:	2000002c 	.word	0x2000002c
 800aeb0:	20000094 	.word	0x20000094

0800aeb4 <_strtol_l.isra.0>:
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeba:	d001      	beq.n	800aec0 <_strtol_l.isra.0+0xc>
 800aebc:	2b24      	cmp	r3, #36	; 0x24
 800aebe:	d906      	bls.n	800aece <_strtol_l.isra.0+0x1a>
 800aec0:	f7fe fc5e 	bl	8009780 <__errno>
 800aec4:	2316      	movs	r3, #22
 800aec6:	6003      	str	r3, [r0, #0]
 800aec8:	2000      	movs	r0, #0
 800aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aece:	4f3a      	ldr	r7, [pc, #232]	; (800afb8 <_strtol_l.isra.0+0x104>)
 800aed0:	468e      	mov	lr, r1
 800aed2:	4676      	mov	r6, lr
 800aed4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aed8:	5de5      	ldrb	r5, [r4, r7]
 800aeda:	f015 0508 	ands.w	r5, r5, #8
 800aede:	d1f8      	bne.n	800aed2 <_strtol_l.isra.0+0x1e>
 800aee0:	2c2d      	cmp	r4, #45	; 0x2d
 800aee2:	d134      	bne.n	800af4e <_strtol_l.isra.0+0x9a>
 800aee4:	f89e 4000 	ldrb.w	r4, [lr]
 800aee8:	f04f 0801 	mov.w	r8, #1
 800aeec:	f106 0e02 	add.w	lr, r6, #2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d05c      	beq.n	800afae <_strtol_l.isra.0+0xfa>
 800aef4:	2b10      	cmp	r3, #16
 800aef6:	d10c      	bne.n	800af12 <_strtol_l.isra.0+0x5e>
 800aef8:	2c30      	cmp	r4, #48	; 0x30
 800aefa:	d10a      	bne.n	800af12 <_strtol_l.isra.0+0x5e>
 800aefc:	f89e 4000 	ldrb.w	r4, [lr]
 800af00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af04:	2c58      	cmp	r4, #88	; 0x58
 800af06:	d14d      	bne.n	800afa4 <_strtol_l.isra.0+0xf0>
 800af08:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800af0c:	2310      	movs	r3, #16
 800af0e:	f10e 0e02 	add.w	lr, lr, #2
 800af12:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800af16:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af1a:	2600      	movs	r6, #0
 800af1c:	fbbc f9f3 	udiv	r9, ip, r3
 800af20:	4635      	mov	r5, r6
 800af22:	fb03 ca19 	mls	sl, r3, r9, ip
 800af26:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800af2a:	2f09      	cmp	r7, #9
 800af2c:	d818      	bhi.n	800af60 <_strtol_l.isra.0+0xac>
 800af2e:	463c      	mov	r4, r7
 800af30:	42a3      	cmp	r3, r4
 800af32:	dd24      	ble.n	800af7e <_strtol_l.isra.0+0xca>
 800af34:	2e00      	cmp	r6, #0
 800af36:	db1f      	blt.n	800af78 <_strtol_l.isra.0+0xc4>
 800af38:	45a9      	cmp	r9, r5
 800af3a:	d31d      	bcc.n	800af78 <_strtol_l.isra.0+0xc4>
 800af3c:	d101      	bne.n	800af42 <_strtol_l.isra.0+0x8e>
 800af3e:	45a2      	cmp	sl, r4
 800af40:	db1a      	blt.n	800af78 <_strtol_l.isra.0+0xc4>
 800af42:	fb05 4503 	mla	r5, r5, r3, r4
 800af46:	2601      	movs	r6, #1
 800af48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800af4c:	e7eb      	b.n	800af26 <_strtol_l.isra.0+0x72>
 800af4e:	2c2b      	cmp	r4, #43	; 0x2b
 800af50:	bf08      	it	eq
 800af52:	f89e 4000 	ldrbeq.w	r4, [lr]
 800af56:	46a8      	mov	r8, r5
 800af58:	bf08      	it	eq
 800af5a:	f106 0e02 	addeq.w	lr, r6, #2
 800af5e:	e7c7      	b.n	800aef0 <_strtol_l.isra.0+0x3c>
 800af60:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800af64:	2f19      	cmp	r7, #25
 800af66:	d801      	bhi.n	800af6c <_strtol_l.isra.0+0xb8>
 800af68:	3c37      	subs	r4, #55	; 0x37
 800af6a:	e7e1      	b.n	800af30 <_strtol_l.isra.0+0x7c>
 800af6c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800af70:	2f19      	cmp	r7, #25
 800af72:	d804      	bhi.n	800af7e <_strtol_l.isra.0+0xca>
 800af74:	3c57      	subs	r4, #87	; 0x57
 800af76:	e7db      	b.n	800af30 <_strtol_l.isra.0+0x7c>
 800af78:	f04f 36ff 	mov.w	r6, #4294967295
 800af7c:	e7e4      	b.n	800af48 <_strtol_l.isra.0+0x94>
 800af7e:	2e00      	cmp	r6, #0
 800af80:	da05      	bge.n	800af8e <_strtol_l.isra.0+0xda>
 800af82:	2322      	movs	r3, #34	; 0x22
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	4665      	mov	r5, ip
 800af88:	b942      	cbnz	r2, 800af9c <_strtol_l.isra.0+0xe8>
 800af8a:	4628      	mov	r0, r5
 800af8c:	e79d      	b.n	800aeca <_strtol_l.isra.0+0x16>
 800af8e:	f1b8 0f00 	cmp.w	r8, #0
 800af92:	d000      	beq.n	800af96 <_strtol_l.isra.0+0xe2>
 800af94:	426d      	negs	r5, r5
 800af96:	2a00      	cmp	r2, #0
 800af98:	d0f7      	beq.n	800af8a <_strtol_l.isra.0+0xd6>
 800af9a:	b10e      	cbz	r6, 800afa0 <_strtol_l.isra.0+0xec>
 800af9c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800afa0:	6011      	str	r1, [r2, #0]
 800afa2:	e7f2      	b.n	800af8a <_strtol_l.isra.0+0xd6>
 800afa4:	2430      	movs	r4, #48	; 0x30
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1b3      	bne.n	800af12 <_strtol_l.isra.0+0x5e>
 800afaa:	2308      	movs	r3, #8
 800afac:	e7b1      	b.n	800af12 <_strtol_l.isra.0+0x5e>
 800afae:	2c30      	cmp	r4, #48	; 0x30
 800afb0:	d0a4      	beq.n	800aefc <_strtol_l.isra.0+0x48>
 800afb2:	230a      	movs	r3, #10
 800afb4:	e7ad      	b.n	800af12 <_strtol_l.isra.0+0x5e>
 800afb6:	bf00      	nop
 800afb8:	0800f5b1 	.word	0x0800f5b1

0800afbc <strtol>:
 800afbc:	4613      	mov	r3, r2
 800afbe:	460a      	mov	r2, r1
 800afc0:	4601      	mov	r1, r0
 800afc2:	4802      	ldr	r0, [pc, #8]	; (800afcc <strtol+0x10>)
 800afc4:	6800      	ldr	r0, [r0, #0]
 800afc6:	f7ff bf75 	b.w	800aeb4 <_strtol_l.isra.0>
 800afca:	bf00      	nop
 800afcc:	2000002c 	.word	0x2000002c

0800afd0 <__swbuf_r>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	460e      	mov	r6, r1
 800afd4:	4614      	mov	r4, r2
 800afd6:	4605      	mov	r5, r0
 800afd8:	b118      	cbz	r0, 800afe2 <__swbuf_r+0x12>
 800afda:	6983      	ldr	r3, [r0, #24]
 800afdc:	b90b      	cbnz	r3, 800afe2 <__swbuf_r+0x12>
 800afde:	f001 f849 	bl	800c074 <__sinit>
 800afe2:	4b21      	ldr	r3, [pc, #132]	; (800b068 <__swbuf_r+0x98>)
 800afe4:	429c      	cmp	r4, r3
 800afe6:	d12b      	bne.n	800b040 <__swbuf_r+0x70>
 800afe8:	686c      	ldr	r4, [r5, #4]
 800afea:	69a3      	ldr	r3, [r4, #24]
 800afec:	60a3      	str	r3, [r4, #8]
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	071a      	lsls	r2, r3, #28
 800aff2:	d52f      	bpl.n	800b054 <__swbuf_r+0x84>
 800aff4:	6923      	ldr	r3, [r4, #16]
 800aff6:	b36b      	cbz	r3, 800b054 <__swbuf_r+0x84>
 800aff8:	6923      	ldr	r3, [r4, #16]
 800affa:	6820      	ldr	r0, [r4, #0]
 800affc:	1ac0      	subs	r0, r0, r3
 800affe:	6963      	ldr	r3, [r4, #20]
 800b000:	b2f6      	uxtb	r6, r6
 800b002:	4283      	cmp	r3, r0
 800b004:	4637      	mov	r7, r6
 800b006:	dc04      	bgt.n	800b012 <__swbuf_r+0x42>
 800b008:	4621      	mov	r1, r4
 800b00a:	4628      	mov	r0, r5
 800b00c:	f000 ff9e 	bl	800bf4c <_fflush_r>
 800b010:	bb30      	cbnz	r0, 800b060 <__swbuf_r+0x90>
 800b012:	68a3      	ldr	r3, [r4, #8]
 800b014:	3b01      	subs	r3, #1
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	6022      	str	r2, [r4, #0]
 800b01e:	701e      	strb	r6, [r3, #0]
 800b020:	6963      	ldr	r3, [r4, #20]
 800b022:	3001      	adds	r0, #1
 800b024:	4283      	cmp	r3, r0
 800b026:	d004      	beq.n	800b032 <__swbuf_r+0x62>
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	07db      	lsls	r3, r3, #31
 800b02c:	d506      	bpl.n	800b03c <__swbuf_r+0x6c>
 800b02e:	2e0a      	cmp	r6, #10
 800b030:	d104      	bne.n	800b03c <__swbuf_r+0x6c>
 800b032:	4621      	mov	r1, r4
 800b034:	4628      	mov	r0, r5
 800b036:	f000 ff89 	bl	800bf4c <_fflush_r>
 800b03a:	b988      	cbnz	r0, 800b060 <__swbuf_r+0x90>
 800b03c:	4638      	mov	r0, r7
 800b03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b040:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <__swbuf_r+0x9c>)
 800b042:	429c      	cmp	r4, r3
 800b044:	d101      	bne.n	800b04a <__swbuf_r+0x7a>
 800b046:	68ac      	ldr	r4, [r5, #8]
 800b048:	e7cf      	b.n	800afea <__swbuf_r+0x1a>
 800b04a:	4b09      	ldr	r3, [pc, #36]	; (800b070 <__swbuf_r+0xa0>)
 800b04c:	429c      	cmp	r4, r3
 800b04e:	bf08      	it	eq
 800b050:	68ec      	ldreq	r4, [r5, #12]
 800b052:	e7ca      	b.n	800afea <__swbuf_r+0x1a>
 800b054:	4621      	mov	r1, r4
 800b056:	4628      	mov	r0, r5
 800b058:	f000 f80c 	bl	800b074 <__swsetup_r>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d0cb      	beq.n	800aff8 <__swbuf_r+0x28>
 800b060:	f04f 37ff 	mov.w	r7, #4294967295
 800b064:	e7ea      	b.n	800b03c <__swbuf_r+0x6c>
 800b066:	bf00      	nop
 800b068:	0800f768 	.word	0x0800f768
 800b06c:	0800f788 	.word	0x0800f788
 800b070:	0800f748 	.word	0x0800f748

0800b074 <__swsetup_r>:
 800b074:	4b32      	ldr	r3, [pc, #200]	; (800b140 <__swsetup_r+0xcc>)
 800b076:	b570      	push	{r4, r5, r6, lr}
 800b078:	681d      	ldr	r5, [r3, #0]
 800b07a:	4606      	mov	r6, r0
 800b07c:	460c      	mov	r4, r1
 800b07e:	b125      	cbz	r5, 800b08a <__swsetup_r+0x16>
 800b080:	69ab      	ldr	r3, [r5, #24]
 800b082:	b913      	cbnz	r3, 800b08a <__swsetup_r+0x16>
 800b084:	4628      	mov	r0, r5
 800b086:	f000 fff5 	bl	800c074 <__sinit>
 800b08a:	4b2e      	ldr	r3, [pc, #184]	; (800b144 <__swsetup_r+0xd0>)
 800b08c:	429c      	cmp	r4, r3
 800b08e:	d10f      	bne.n	800b0b0 <__swsetup_r+0x3c>
 800b090:	686c      	ldr	r4, [r5, #4]
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b098:	0719      	lsls	r1, r3, #28
 800b09a:	d42c      	bmi.n	800b0f6 <__swsetup_r+0x82>
 800b09c:	06dd      	lsls	r5, r3, #27
 800b09e:	d411      	bmi.n	800b0c4 <__swsetup_r+0x50>
 800b0a0:	2309      	movs	r3, #9
 800b0a2:	6033      	str	r3, [r6, #0]
 800b0a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ae:	e03e      	b.n	800b12e <__swsetup_r+0xba>
 800b0b0:	4b25      	ldr	r3, [pc, #148]	; (800b148 <__swsetup_r+0xd4>)
 800b0b2:	429c      	cmp	r4, r3
 800b0b4:	d101      	bne.n	800b0ba <__swsetup_r+0x46>
 800b0b6:	68ac      	ldr	r4, [r5, #8]
 800b0b8:	e7eb      	b.n	800b092 <__swsetup_r+0x1e>
 800b0ba:	4b24      	ldr	r3, [pc, #144]	; (800b14c <__swsetup_r+0xd8>)
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	bf08      	it	eq
 800b0c0:	68ec      	ldreq	r4, [r5, #12]
 800b0c2:	e7e6      	b.n	800b092 <__swsetup_r+0x1e>
 800b0c4:	0758      	lsls	r0, r3, #29
 800b0c6:	d512      	bpl.n	800b0ee <__swsetup_r+0x7a>
 800b0c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ca:	b141      	cbz	r1, 800b0de <__swsetup_r+0x6a>
 800b0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0d0:	4299      	cmp	r1, r3
 800b0d2:	d002      	beq.n	800b0da <__swsetup_r+0x66>
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f002 f929 	bl	800d32c <_free_r>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	6363      	str	r3, [r4, #52]	; 0x34
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	6063      	str	r3, [r4, #4]
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f043 0308 	orr.w	r3, r3, #8
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	b94b      	cbnz	r3, 800b10e <__swsetup_r+0x9a>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b104:	d003      	beq.n	800b10e <__swsetup_r+0x9a>
 800b106:	4621      	mov	r1, r4
 800b108:	4630      	mov	r0, r6
 800b10a:	f001 fbeb 	bl	800c8e4 <__smakebuf_r>
 800b10e:	89a0      	ldrh	r0, [r4, #12]
 800b110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b114:	f010 0301 	ands.w	r3, r0, #1
 800b118:	d00a      	beq.n	800b130 <__swsetup_r+0xbc>
 800b11a:	2300      	movs	r3, #0
 800b11c:	60a3      	str	r3, [r4, #8]
 800b11e:	6963      	ldr	r3, [r4, #20]
 800b120:	425b      	negs	r3, r3
 800b122:	61a3      	str	r3, [r4, #24]
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	b943      	cbnz	r3, 800b13a <__swsetup_r+0xc6>
 800b128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b12c:	d1ba      	bne.n	800b0a4 <__swsetup_r+0x30>
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	0781      	lsls	r1, r0, #30
 800b132:	bf58      	it	pl
 800b134:	6963      	ldrpl	r3, [r4, #20]
 800b136:	60a3      	str	r3, [r4, #8]
 800b138:	e7f4      	b.n	800b124 <__swsetup_r+0xb0>
 800b13a:	2000      	movs	r0, #0
 800b13c:	e7f7      	b.n	800b12e <__swsetup_r+0xba>
 800b13e:	bf00      	nop
 800b140:	2000002c 	.word	0x2000002c
 800b144:	0800f768 	.word	0x0800f768
 800b148:	0800f788 	.word	0x0800f788
 800b14c:	0800f748 	.word	0x0800f748

0800b150 <quorem>:
 800b150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	6903      	ldr	r3, [r0, #16]
 800b156:	690c      	ldr	r4, [r1, #16]
 800b158:	42a3      	cmp	r3, r4
 800b15a:	4607      	mov	r7, r0
 800b15c:	f2c0 8081 	blt.w	800b262 <quorem+0x112>
 800b160:	3c01      	subs	r4, #1
 800b162:	f101 0814 	add.w	r8, r1, #20
 800b166:	f100 0514 	add.w	r5, r0, #20
 800b16a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b178:	3301      	adds	r3, #1
 800b17a:	429a      	cmp	r2, r3
 800b17c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b180:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b184:	fbb2 f6f3 	udiv	r6, r2, r3
 800b188:	d331      	bcc.n	800b1ee <quorem+0x9e>
 800b18a:	f04f 0e00 	mov.w	lr, #0
 800b18e:	4640      	mov	r0, r8
 800b190:	46ac      	mov	ip, r5
 800b192:	46f2      	mov	sl, lr
 800b194:	f850 2b04 	ldr.w	r2, [r0], #4
 800b198:	b293      	uxth	r3, r2
 800b19a:	fb06 e303 	mla	r3, r6, r3, lr
 800b19e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	ebaa 0303 	sub.w	r3, sl, r3
 800b1a8:	0c12      	lsrs	r2, r2, #16
 800b1aa:	f8dc a000 	ldr.w	sl, [ip]
 800b1ae:	fb06 e202 	mla	r2, r6, r2, lr
 800b1b2:	fa13 f38a 	uxtah	r3, r3, sl
 800b1b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1ba:	fa1f fa82 	uxth.w	sl, r2
 800b1be:	f8dc 2000 	ldr.w	r2, [ip]
 800b1c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b1c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1d0:	4581      	cmp	r9, r0
 800b1d2:	f84c 3b04 	str.w	r3, [ip], #4
 800b1d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1da:	d2db      	bcs.n	800b194 <quorem+0x44>
 800b1dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1e0:	b92b      	cbnz	r3, 800b1ee <quorem+0x9e>
 800b1e2:	9b01      	ldr	r3, [sp, #4]
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	429d      	cmp	r5, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	d32e      	bcc.n	800b24a <quorem+0xfa>
 800b1ec:	613c      	str	r4, [r7, #16]
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	f001 fe9a 	bl	800cf28 <__mcmp>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	db24      	blt.n	800b242 <quorem+0xf2>
 800b1f8:	3601      	adds	r6, #1
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f04f 0c00 	mov.w	ip, #0
 800b200:	f858 2b04 	ldr.w	r2, [r8], #4
 800b204:	f8d0 e000 	ldr.w	lr, [r0]
 800b208:	b293      	uxth	r3, r2
 800b20a:	ebac 0303 	sub.w	r3, ip, r3
 800b20e:	0c12      	lsrs	r2, r2, #16
 800b210:	fa13 f38e 	uxtah	r3, r3, lr
 800b214:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b222:	45c1      	cmp	r9, r8
 800b224:	f840 3b04 	str.w	r3, [r0], #4
 800b228:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b22c:	d2e8      	bcs.n	800b200 <quorem+0xb0>
 800b22e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b236:	b922      	cbnz	r2, 800b242 <quorem+0xf2>
 800b238:	3b04      	subs	r3, #4
 800b23a:	429d      	cmp	r5, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	d30a      	bcc.n	800b256 <quorem+0x106>
 800b240:	613c      	str	r4, [r7, #16]
 800b242:	4630      	mov	r0, r6
 800b244:	b003      	add	sp, #12
 800b246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	3b04      	subs	r3, #4
 800b24e:	2a00      	cmp	r2, #0
 800b250:	d1cc      	bne.n	800b1ec <quorem+0x9c>
 800b252:	3c01      	subs	r4, #1
 800b254:	e7c7      	b.n	800b1e6 <quorem+0x96>
 800b256:	6812      	ldr	r2, [r2, #0]
 800b258:	3b04      	subs	r3, #4
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	d1f0      	bne.n	800b240 <quorem+0xf0>
 800b25e:	3c01      	subs	r4, #1
 800b260:	e7eb      	b.n	800b23a <quorem+0xea>
 800b262:	2000      	movs	r0, #0
 800b264:	e7ee      	b.n	800b244 <quorem+0xf4>
	...

0800b268 <_dtoa_r>:
 800b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26c:	ed2d 8b02 	vpush	{d8}
 800b270:	ec57 6b10 	vmov	r6, r7, d0
 800b274:	b095      	sub	sp, #84	; 0x54
 800b276:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b278:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b27c:	9105      	str	r1, [sp, #20]
 800b27e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b282:	4604      	mov	r4, r0
 800b284:	9209      	str	r2, [sp, #36]	; 0x24
 800b286:	930f      	str	r3, [sp, #60]	; 0x3c
 800b288:	b975      	cbnz	r5, 800b2a8 <_dtoa_r+0x40>
 800b28a:	2010      	movs	r0, #16
 800b28c:	f001 fb6a 	bl	800c964 <malloc>
 800b290:	4602      	mov	r2, r0
 800b292:	6260      	str	r0, [r4, #36]	; 0x24
 800b294:	b920      	cbnz	r0, 800b2a0 <_dtoa_r+0x38>
 800b296:	4bb2      	ldr	r3, [pc, #712]	; (800b560 <_dtoa_r+0x2f8>)
 800b298:	21ea      	movs	r1, #234	; 0xea
 800b29a:	48b2      	ldr	r0, [pc, #712]	; (800b564 <_dtoa_r+0x2fc>)
 800b29c:	f002 fb20 	bl	800d8e0 <__assert_func>
 800b2a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2a4:	6005      	str	r5, [r0, #0]
 800b2a6:	60c5      	str	r5, [r0, #12]
 800b2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2aa:	6819      	ldr	r1, [r3, #0]
 800b2ac:	b151      	cbz	r1, 800b2c4 <_dtoa_r+0x5c>
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	604a      	str	r2, [r1, #4]
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4093      	lsls	r3, r2
 800b2b6:	608b      	str	r3, [r1, #8]
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 fbad 	bl	800ca18 <_Bfree>
 800b2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	1e3b      	subs	r3, r7, #0
 800b2c6:	bfb9      	ittee	lt
 800b2c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b2cc:	9303      	strlt	r3, [sp, #12]
 800b2ce:	2300      	movge	r3, #0
 800b2d0:	f8c8 3000 	strge.w	r3, [r8]
 800b2d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b2d8:	4ba3      	ldr	r3, [pc, #652]	; (800b568 <_dtoa_r+0x300>)
 800b2da:	bfbc      	itt	lt
 800b2dc:	2201      	movlt	r2, #1
 800b2de:	f8c8 2000 	strlt.w	r2, [r8]
 800b2e2:	ea33 0309 	bics.w	r3, r3, r9
 800b2e6:	d11b      	bne.n	800b320 <_dtoa_r+0xb8>
 800b2e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2f4:	4333      	orrs	r3, r6
 800b2f6:	f000 857a 	beq.w	800bdee <_dtoa_r+0xb86>
 800b2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2fc:	b963      	cbnz	r3, 800b318 <_dtoa_r+0xb0>
 800b2fe:	4b9b      	ldr	r3, [pc, #620]	; (800b56c <_dtoa_r+0x304>)
 800b300:	e024      	b.n	800b34c <_dtoa_r+0xe4>
 800b302:	4b9b      	ldr	r3, [pc, #620]	; (800b570 <_dtoa_r+0x308>)
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	3308      	adds	r3, #8
 800b308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	9800      	ldr	r0, [sp, #0]
 800b30e:	b015      	add	sp, #84	; 0x54
 800b310:	ecbd 8b02 	vpop	{d8}
 800b314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b318:	4b94      	ldr	r3, [pc, #592]	; (800b56c <_dtoa_r+0x304>)
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	3303      	adds	r3, #3
 800b31e:	e7f3      	b.n	800b308 <_dtoa_r+0xa0>
 800b320:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b324:	2200      	movs	r2, #0
 800b326:	ec51 0b17 	vmov	r0, r1, d7
 800b32a:	2300      	movs	r3, #0
 800b32c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b330:	f7f5 fbf2 	bl	8000b18 <__aeabi_dcmpeq>
 800b334:	4680      	mov	r8, r0
 800b336:	b158      	cbz	r0, 800b350 <_dtoa_r+0xe8>
 800b338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b33a:	2301      	movs	r3, #1
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8551 	beq.w	800bde8 <_dtoa_r+0xb80>
 800b346:	488b      	ldr	r0, [pc, #556]	; (800b574 <_dtoa_r+0x30c>)
 800b348:	6018      	str	r0, [r3, #0]
 800b34a:	1e43      	subs	r3, r0, #1
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	e7dd      	b.n	800b30c <_dtoa_r+0xa4>
 800b350:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b354:	aa12      	add	r2, sp, #72	; 0x48
 800b356:	a913      	add	r1, sp, #76	; 0x4c
 800b358:	4620      	mov	r0, r4
 800b35a:	f001 ff05 	bl	800d168 <__d2b>
 800b35e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b362:	4683      	mov	fp, r0
 800b364:	2d00      	cmp	r5, #0
 800b366:	d07c      	beq.n	800b462 <_dtoa_r+0x1fa>
 800b368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b36e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b372:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b376:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b37a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b382:	4b7d      	ldr	r3, [pc, #500]	; (800b578 <_dtoa_r+0x310>)
 800b384:	2200      	movs	r2, #0
 800b386:	4630      	mov	r0, r6
 800b388:	4639      	mov	r1, r7
 800b38a:	f7f4 ffa5 	bl	80002d8 <__aeabi_dsub>
 800b38e:	a36e      	add	r3, pc, #440	; (adr r3, 800b548 <_dtoa_r+0x2e0>)
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f7f5 f958 	bl	8000648 <__aeabi_dmul>
 800b398:	a36d      	add	r3, pc, #436	; (adr r3, 800b550 <_dtoa_r+0x2e8>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f7f4 ff9d 	bl	80002dc <__adddf3>
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	f7f5 f8e4 	bl	8000574 <__aeabi_i2d>
 800b3ac:	a36a      	add	r3, pc, #424	; (adr r3, 800b558 <_dtoa_r+0x2f0>)
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	f7f5 f949 	bl	8000648 <__aeabi_dmul>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	4639      	mov	r1, r7
 800b3be:	f7f4 ff8d 	bl	80002dc <__adddf3>
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	f7f5 fbef 	bl	8000ba8 <__aeabi_d2iz>
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	f7f5 fbaa 	bl	8000b2c <__aeabi_dcmplt>
 800b3d8:	b148      	cbz	r0, 800b3ee <_dtoa_r+0x186>
 800b3da:	4650      	mov	r0, sl
 800b3dc:	f7f5 f8ca 	bl	8000574 <__aeabi_i2d>
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	f7f5 fb98 	bl	8000b18 <__aeabi_dcmpeq>
 800b3e8:	b908      	cbnz	r0, 800b3ee <_dtoa_r+0x186>
 800b3ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3ee:	f1ba 0f16 	cmp.w	sl, #22
 800b3f2:	d854      	bhi.n	800b49e <_dtoa_r+0x236>
 800b3f4:	4b61      	ldr	r3, [pc, #388]	; (800b57c <_dtoa_r+0x314>)
 800b3f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b402:	f7f5 fb93 	bl	8000b2c <__aeabi_dcmplt>
 800b406:	2800      	cmp	r0, #0
 800b408:	d04b      	beq.n	800b4a2 <_dtoa_r+0x23a>
 800b40a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b40e:	2300      	movs	r3, #0
 800b410:	930e      	str	r3, [sp, #56]	; 0x38
 800b412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b414:	1b5d      	subs	r5, r3, r5
 800b416:	1e6b      	subs	r3, r5, #1
 800b418:	9304      	str	r3, [sp, #16]
 800b41a:	bf43      	ittte	mi
 800b41c:	2300      	movmi	r3, #0
 800b41e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b422:	9304      	strmi	r3, [sp, #16]
 800b424:	f04f 0800 	movpl.w	r8, #0
 800b428:	f1ba 0f00 	cmp.w	sl, #0
 800b42c:	db3b      	blt.n	800b4a6 <_dtoa_r+0x23e>
 800b42e:	9b04      	ldr	r3, [sp, #16]
 800b430:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b434:	4453      	add	r3, sl
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	2300      	movs	r3, #0
 800b43a:	9306      	str	r3, [sp, #24]
 800b43c:	9b05      	ldr	r3, [sp, #20]
 800b43e:	2b09      	cmp	r3, #9
 800b440:	d869      	bhi.n	800b516 <_dtoa_r+0x2ae>
 800b442:	2b05      	cmp	r3, #5
 800b444:	bfc4      	itt	gt
 800b446:	3b04      	subgt	r3, #4
 800b448:	9305      	strgt	r3, [sp, #20]
 800b44a:	9b05      	ldr	r3, [sp, #20]
 800b44c:	f1a3 0302 	sub.w	r3, r3, #2
 800b450:	bfcc      	ite	gt
 800b452:	2500      	movgt	r5, #0
 800b454:	2501      	movle	r5, #1
 800b456:	2b03      	cmp	r3, #3
 800b458:	d869      	bhi.n	800b52e <_dtoa_r+0x2c6>
 800b45a:	e8df f003 	tbb	[pc, r3]
 800b45e:	4e2c      	.short	0x4e2c
 800b460:	5a4c      	.short	0x5a4c
 800b462:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b466:	441d      	add	r5, r3
 800b468:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b46c:	2b20      	cmp	r3, #32
 800b46e:	bfc1      	itttt	gt
 800b470:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b474:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b478:	fa09 f303 	lslgt.w	r3, r9, r3
 800b47c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b480:	bfda      	itte	le
 800b482:	f1c3 0320 	rsble	r3, r3, #32
 800b486:	fa06 f003 	lslle.w	r0, r6, r3
 800b48a:	4318      	orrgt	r0, r3
 800b48c:	f7f5 f862 	bl	8000554 <__aeabi_ui2d>
 800b490:	2301      	movs	r3, #1
 800b492:	4606      	mov	r6, r0
 800b494:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b498:	3d01      	subs	r5, #1
 800b49a:	9310      	str	r3, [sp, #64]	; 0x40
 800b49c:	e771      	b.n	800b382 <_dtoa_r+0x11a>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e7b6      	b.n	800b410 <_dtoa_r+0x1a8>
 800b4a2:	900e      	str	r0, [sp, #56]	; 0x38
 800b4a4:	e7b5      	b.n	800b412 <_dtoa_r+0x1aa>
 800b4a6:	f1ca 0300 	rsb	r3, sl, #0
 800b4aa:	9306      	str	r3, [sp, #24]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	eba8 080a 	sub.w	r8, r8, sl
 800b4b2:	930d      	str	r3, [sp, #52]	; 0x34
 800b4b4:	e7c2      	b.n	800b43c <_dtoa_r+0x1d4>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9308      	str	r3, [sp, #32]
 800b4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dc39      	bgt.n	800b534 <_dtoa_r+0x2cc>
 800b4c0:	f04f 0901 	mov.w	r9, #1
 800b4c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b4ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	6042      	str	r2, [r0, #4]
 800b4d4:	2204      	movs	r2, #4
 800b4d6:	f102 0614 	add.w	r6, r2, #20
 800b4da:	429e      	cmp	r6, r3
 800b4dc:	6841      	ldr	r1, [r0, #4]
 800b4de:	d92f      	bls.n	800b540 <_dtoa_r+0x2d8>
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f001 fa59 	bl	800c998 <_Balloc>
 800b4e6:	9000      	str	r0, [sp, #0]
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d14b      	bne.n	800b584 <_dtoa_r+0x31c>
 800b4ec:	4b24      	ldr	r3, [pc, #144]	; (800b580 <_dtoa_r+0x318>)
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4f4:	e6d1      	b.n	800b29a <_dtoa_r+0x32>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e7de      	b.n	800b4b8 <_dtoa_r+0x250>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9308      	str	r3, [sp, #32]
 800b4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b500:	eb0a 0903 	add.w	r9, sl, r3
 800b504:	f109 0301 	add.w	r3, r9, #1
 800b508:	2b01      	cmp	r3, #1
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	bfb8      	it	lt
 800b50e:	2301      	movlt	r3, #1
 800b510:	e7dd      	b.n	800b4ce <_dtoa_r+0x266>
 800b512:	2301      	movs	r3, #1
 800b514:	e7f2      	b.n	800b4fc <_dtoa_r+0x294>
 800b516:	2501      	movs	r5, #1
 800b518:	2300      	movs	r3, #0
 800b51a:	9305      	str	r3, [sp, #20]
 800b51c:	9508      	str	r5, [sp, #32]
 800b51e:	f04f 39ff 	mov.w	r9, #4294967295
 800b522:	2200      	movs	r2, #0
 800b524:	f8cd 9004 	str.w	r9, [sp, #4]
 800b528:	2312      	movs	r3, #18
 800b52a:	9209      	str	r2, [sp, #36]	; 0x24
 800b52c:	e7cf      	b.n	800b4ce <_dtoa_r+0x266>
 800b52e:	2301      	movs	r3, #1
 800b530:	9308      	str	r3, [sp, #32]
 800b532:	e7f4      	b.n	800b51e <_dtoa_r+0x2b6>
 800b534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b538:	f8cd 9004 	str.w	r9, [sp, #4]
 800b53c:	464b      	mov	r3, r9
 800b53e:	e7c6      	b.n	800b4ce <_dtoa_r+0x266>
 800b540:	3101      	adds	r1, #1
 800b542:	6041      	str	r1, [r0, #4]
 800b544:	0052      	lsls	r2, r2, #1
 800b546:	e7c6      	b.n	800b4d6 <_dtoa_r+0x26e>
 800b548:	636f4361 	.word	0x636f4361
 800b54c:	3fd287a7 	.word	0x3fd287a7
 800b550:	8b60c8b3 	.word	0x8b60c8b3
 800b554:	3fc68a28 	.word	0x3fc68a28
 800b558:	509f79fb 	.word	0x509f79fb
 800b55c:	3fd34413 	.word	0x3fd34413
 800b560:	0800f6be 	.word	0x0800f6be
 800b564:	0800f6d5 	.word	0x0800f6d5
 800b568:	7ff00000 	.word	0x7ff00000
 800b56c:	0800f6ba 	.word	0x0800f6ba
 800b570:	0800f6b1 	.word	0x0800f6b1
 800b574:	0800f539 	.word	0x0800f539
 800b578:	3ff80000 	.word	0x3ff80000
 800b57c:	0800f8b0 	.word	0x0800f8b0
 800b580:	0800f734 	.word	0x0800f734
 800b584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b586:	9a00      	ldr	r2, [sp, #0]
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	9b01      	ldr	r3, [sp, #4]
 800b58c:	2b0e      	cmp	r3, #14
 800b58e:	f200 80ad 	bhi.w	800b6ec <_dtoa_r+0x484>
 800b592:	2d00      	cmp	r5, #0
 800b594:	f000 80aa 	beq.w	800b6ec <_dtoa_r+0x484>
 800b598:	f1ba 0f00 	cmp.w	sl, #0
 800b59c:	dd36      	ble.n	800b60c <_dtoa_r+0x3a4>
 800b59e:	4ac3      	ldr	r2, [pc, #780]	; (800b8ac <_dtoa_r+0x644>)
 800b5a0:	f00a 030f 	and.w	r3, sl, #15
 800b5a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5a8:	ed93 7b00 	vldr	d7, [r3]
 800b5ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b5b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b5b4:	eeb0 8a47 	vmov.f32	s16, s14
 800b5b8:	eef0 8a67 	vmov.f32	s17, s15
 800b5bc:	d016      	beq.n	800b5ec <_dtoa_r+0x384>
 800b5be:	4bbc      	ldr	r3, [pc, #752]	; (800b8b0 <_dtoa_r+0x648>)
 800b5c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5c8:	f7f5 f968 	bl	800089c <__aeabi_ddiv>
 800b5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5d0:	f007 070f 	and.w	r7, r7, #15
 800b5d4:	2503      	movs	r5, #3
 800b5d6:	4eb6      	ldr	r6, [pc, #728]	; (800b8b0 <_dtoa_r+0x648>)
 800b5d8:	b957      	cbnz	r7, 800b5f0 <_dtoa_r+0x388>
 800b5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5de:	ec53 2b18 	vmov	r2, r3, d8
 800b5e2:	f7f5 f95b 	bl	800089c <__aeabi_ddiv>
 800b5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5ea:	e029      	b.n	800b640 <_dtoa_r+0x3d8>
 800b5ec:	2502      	movs	r5, #2
 800b5ee:	e7f2      	b.n	800b5d6 <_dtoa_r+0x36e>
 800b5f0:	07f9      	lsls	r1, r7, #31
 800b5f2:	d508      	bpl.n	800b606 <_dtoa_r+0x39e>
 800b5f4:	ec51 0b18 	vmov	r0, r1, d8
 800b5f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5fc:	f7f5 f824 	bl	8000648 <__aeabi_dmul>
 800b600:	ec41 0b18 	vmov	d8, r0, r1
 800b604:	3501      	adds	r5, #1
 800b606:	107f      	asrs	r7, r7, #1
 800b608:	3608      	adds	r6, #8
 800b60a:	e7e5      	b.n	800b5d8 <_dtoa_r+0x370>
 800b60c:	f000 80a6 	beq.w	800b75c <_dtoa_r+0x4f4>
 800b610:	f1ca 0600 	rsb	r6, sl, #0
 800b614:	4ba5      	ldr	r3, [pc, #660]	; (800b8ac <_dtoa_r+0x644>)
 800b616:	4fa6      	ldr	r7, [pc, #664]	; (800b8b0 <_dtoa_r+0x648>)
 800b618:	f006 020f 	and.w	r2, r6, #15
 800b61c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b628:	f7f5 f80e 	bl	8000648 <__aeabi_dmul>
 800b62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b630:	1136      	asrs	r6, r6, #4
 800b632:	2300      	movs	r3, #0
 800b634:	2502      	movs	r5, #2
 800b636:	2e00      	cmp	r6, #0
 800b638:	f040 8085 	bne.w	800b746 <_dtoa_r+0x4de>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1d2      	bne.n	800b5e6 <_dtoa_r+0x37e>
 800b640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 808c 	beq.w	800b760 <_dtoa_r+0x4f8>
 800b648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b64c:	4b99      	ldr	r3, [pc, #612]	; (800b8b4 <_dtoa_r+0x64c>)
 800b64e:	2200      	movs	r2, #0
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	f7f5 fa6a 	bl	8000b2c <__aeabi_dcmplt>
 800b658:	2800      	cmp	r0, #0
 800b65a:	f000 8081 	beq.w	800b760 <_dtoa_r+0x4f8>
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d07d      	beq.n	800b760 <_dtoa_r+0x4f8>
 800b664:	f1b9 0f00 	cmp.w	r9, #0
 800b668:	dd3c      	ble.n	800b6e4 <_dtoa_r+0x47c>
 800b66a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	2200      	movs	r2, #0
 800b672:	4b91      	ldr	r3, [pc, #580]	; (800b8b8 <_dtoa_r+0x650>)
 800b674:	4630      	mov	r0, r6
 800b676:	4639      	mov	r1, r7
 800b678:	f7f4 ffe6 	bl	8000648 <__aeabi_dmul>
 800b67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b680:	3501      	adds	r5, #1
 800b682:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b686:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b68a:	4628      	mov	r0, r5
 800b68c:	f7f4 ff72 	bl	8000574 <__aeabi_i2d>
 800b690:	4632      	mov	r2, r6
 800b692:	463b      	mov	r3, r7
 800b694:	f7f4 ffd8 	bl	8000648 <__aeabi_dmul>
 800b698:	4b88      	ldr	r3, [pc, #544]	; (800b8bc <_dtoa_r+0x654>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	f7f4 fe1e 	bl	80002dc <__adddf3>
 800b6a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6a8:	9303      	str	r3, [sp, #12]
 800b6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d15c      	bne.n	800b76a <_dtoa_r+0x502>
 800b6b0:	4b83      	ldr	r3, [pc, #524]	; (800b8c0 <_dtoa_r+0x658>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f4 fe0e 	bl	80002d8 <__aeabi_dsub>
 800b6bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	460f      	mov	r7, r1
 800b6c4:	f7f5 fa50 	bl	8000b68 <__aeabi_dcmpgt>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	f040 8296 	bne.w	800bbfa <_dtoa_r+0x992>
 800b6ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f5 fa27 	bl	8000b2c <__aeabi_dcmplt>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f040 8288 	bne.w	800bbf4 <_dtoa_r+0x98c>
 800b6e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b6e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f2c0 8158 	blt.w	800b9a4 <_dtoa_r+0x73c>
 800b6f4:	f1ba 0f0e 	cmp.w	sl, #14
 800b6f8:	f300 8154 	bgt.w	800b9a4 <_dtoa_r+0x73c>
 800b6fc:	4b6b      	ldr	r3, [pc, #428]	; (800b8ac <_dtoa_r+0x644>)
 800b6fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b702:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f280 80e3 	bge.w	800b8d4 <_dtoa_r+0x66c>
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	f300 80df 	bgt.w	800b8d4 <_dtoa_r+0x66c>
 800b716:	f040 826d 	bne.w	800bbf4 <_dtoa_r+0x98c>
 800b71a:	4b69      	ldr	r3, [pc, #420]	; (800b8c0 <_dtoa_r+0x658>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	4640      	mov	r0, r8
 800b720:	4649      	mov	r1, r9
 800b722:	f7f4 ff91 	bl	8000648 <__aeabi_dmul>
 800b726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b72a:	f7f5 fa13 	bl	8000b54 <__aeabi_dcmpge>
 800b72e:	9e01      	ldr	r6, [sp, #4]
 800b730:	4637      	mov	r7, r6
 800b732:	2800      	cmp	r0, #0
 800b734:	f040 8243 	bne.w	800bbbe <_dtoa_r+0x956>
 800b738:	9d00      	ldr	r5, [sp, #0]
 800b73a:	2331      	movs	r3, #49	; 0x31
 800b73c:	f805 3b01 	strb.w	r3, [r5], #1
 800b740:	f10a 0a01 	add.w	sl, sl, #1
 800b744:	e23f      	b.n	800bbc6 <_dtoa_r+0x95e>
 800b746:	07f2      	lsls	r2, r6, #31
 800b748:	d505      	bpl.n	800b756 <_dtoa_r+0x4ee>
 800b74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74e:	f7f4 ff7b 	bl	8000648 <__aeabi_dmul>
 800b752:	3501      	adds	r5, #1
 800b754:	2301      	movs	r3, #1
 800b756:	1076      	asrs	r6, r6, #1
 800b758:	3708      	adds	r7, #8
 800b75a:	e76c      	b.n	800b636 <_dtoa_r+0x3ce>
 800b75c:	2502      	movs	r5, #2
 800b75e:	e76f      	b.n	800b640 <_dtoa_r+0x3d8>
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	f8cd a01c 	str.w	sl, [sp, #28]
 800b766:	930c      	str	r3, [sp, #48]	; 0x30
 800b768:	e78d      	b.n	800b686 <_dtoa_r+0x41e>
 800b76a:	9900      	ldr	r1, [sp, #0]
 800b76c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b770:	4b4e      	ldr	r3, [pc, #312]	; (800b8ac <_dtoa_r+0x644>)
 800b772:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b776:	4401      	add	r1, r0
 800b778:	9102      	str	r1, [sp, #8]
 800b77a:	9908      	ldr	r1, [sp, #32]
 800b77c:	eeb0 8a47 	vmov.f32	s16, s14
 800b780:	eef0 8a67 	vmov.f32	s17, s15
 800b784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b78c:	2900      	cmp	r1, #0
 800b78e:	d045      	beq.n	800b81c <_dtoa_r+0x5b4>
 800b790:	494c      	ldr	r1, [pc, #304]	; (800b8c4 <_dtoa_r+0x65c>)
 800b792:	2000      	movs	r0, #0
 800b794:	f7f5 f882 	bl	800089c <__aeabi_ddiv>
 800b798:	ec53 2b18 	vmov	r2, r3, d8
 800b79c:	f7f4 fd9c 	bl	80002d8 <__aeabi_dsub>
 800b7a0:	9d00      	ldr	r5, [sp, #0]
 800b7a2:	ec41 0b18 	vmov	d8, r0, r1
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f7f5 f9fd 	bl	8000ba8 <__aeabi_d2iz>
 800b7ae:	900c      	str	r0, [sp, #48]	; 0x30
 800b7b0:	f7f4 fee0 	bl	8000574 <__aeabi_i2d>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f4 fd8c 	bl	80002d8 <__aeabi_dsub>
 800b7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7c2:	3330      	adds	r3, #48	; 0x30
 800b7c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b7c8:	ec53 2b18 	vmov	r2, r3, d8
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	460f      	mov	r7, r1
 800b7d0:	f7f5 f9ac 	bl	8000b2c <__aeabi_dcmplt>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d165      	bne.n	800b8a4 <_dtoa_r+0x63c>
 800b7d8:	4632      	mov	r2, r6
 800b7da:	463b      	mov	r3, r7
 800b7dc:	4935      	ldr	r1, [pc, #212]	; (800b8b4 <_dtoa_r+0x64c>)
 800b7de:	2000      	movs	r0, #0
 800b7e0:	f7f4 fd7a 	bl	80002d8 <__aeabi_dsub>
 800b7e4:	ec53 2b18 	vmov	r2, r3, d8
 800b7e8:	f7f5 f9a0 	bl	8000b2c <__aeabi_dcmplt>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	f040 80b9 	bne.w	800b964 <_dtoa_r+0x6fc>
 800b7f2:	9b02      	ldr	r3, [sp, #8]
 800b7f4:	429d      	cmp	r5, r3
 800b7f6:	f43f af75 	beq.w	800b6e4 <_dtoa_r+0x47c>
 800b7fa:	4b2f      	ldr	r3, [pc, #188]	; (800b8b8 <_dtoa_r+0x650>)
 800b7fc:	ec51 0b18 	vmov	r0, r1, d8
 800b800:	2200      	movs	r2, #0
 800b802:	f7f4 ff21 	bl	8000648 <__aeabi_dmul>
 800b806:	4b2c      	ldr	r3, [pc, #176]	; (800b8b8 <_dtoa_r+0x650>)
 800b808:	ec41 0b18 	vmov	d8, r0, r1
 800b80c:	2200      	movs	r2, #0
 800b80e:	4630      	mov	r0, r6
 800b810:	4639      	mov	r1, r7
 800b812:	f7f4 ff19 	bl	8000648 <__aeabi_dmul>
 800b816:	4606      	mov	r6, r0
 800b818:	460f      	mov	r7, r1
 800b81a:	e7c4      	b.n	800b7a6 <_dtoa_r+0x53e>
 800b81c:	ec51 0b17 	vmov	r0, r1, d7
 800b820:	f7f4 ff12 	bl	8000648 <__aeabi_dmul>
 800b824:	9b02      	ldr	r3, [sp, #8]
 800b826:	9d00      	ldr	r5, [sp, #0]
 800b828:	930c      	str	r3, [sp, #48]	; 0x30
 800b82a:	ec41 0b18 	vmov	d8, r0, r1
 800b82e:	4639      	mov	r1, r7
 800b830:	4630      	mov	r0, r6
 800b832:	f7f5 f9b9 	bl	8000ba8 <__aeabi_d2iz>
 800b836:	9011      	str	r0, [sp, #68]	; 0x44
 800b838:	f7f4 fe9c 	bl	8000574 <__aeabi_i2d>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4630      	mov	r0, r6
 800b842:	4639      	mov	r1, r7
 800b844:	f7f4 fd48 	bl	80002d8 <__aeabi_dsub>
 800b848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b84a:	3330      	adds	r3, #48	; 0x30
 800b84c:	f805 3b01 	strb.w	r3, [r5], #1
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	429d      	cmp	r5, r3
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	f04f 0200 	mov.w	r2, #0
 800b85c:	d134      	bne.n	800b8c8 <_dtoa_r+0x660>
 800b85e:	4b19      	ldr	r3, [pc, #100]	; (800b8c4 <_dtoa_r+0x65c>)
 800b860:	ec51 0b18 	vmov	r0, r1, d8
 800b864:	f7f4 fd3a 	bl	80002dc <__adddf3>
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	4630      	mov	r0, r6
 800b86e:	4639      	mov	r1, r7
 800b870:	f7f5 f97a 	bl	8000b68 <__aeabi_dcmpgt>
 800b874:	2800      	cmp	r0, #0
 800b876:	d175      	bne.n	800b964 <_dtoa_r+0x6fc>
 800b878:	ec53 2b18 	vmov	r2, r3, d8
 800b87c:	4911      	ldr	r1, [pc, #68]	; (800b8c4 <_dtoa_r+0x65c>)
 800b87e:	2000      	movs	r0, #0
 800b880:	f7f4 fd2a 	bl	80002d8 <__aeabi_dsub>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	4630      	mov	r0, r6
 800b88a:	4639      	mov	r1, r7
 800b88c:	f7f5 f94e 	bl	8000b2c <__aeabi_dcmplt>
 800b890:	2800      	cmp	r0, #0
 800b892:	f43f af27 	beq.w	800b6e4 <_dtoa_r+0x47c>
 800b896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b898:	1e6b      	subs	r3, r5, #1
 800b89a:	930c      	str	r3, [sp, #48]	; 0x30
 800b89c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8a0:	2b30      	cmp	r3, #48	; 0x30
 800b8a2:	d0f8      	beq.n	800b896 <_dtoa_r+0x62e>
 800b8a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b8a8:	e04a      	b.n	800b940 <_dtoa_r+0x6d8>
 800b8aa:	bf00      	nop
 800b8ac:	0800f8b0 	.word	0x0800f8b0
 800b8b0:	0800f888 	.word	0x0800f888
 800b8b4:	3ff00000 	.word	0x3ff00000
 800b8b8:	40240000 	.word	0x40240000
 800b8bc:	401c0000 	.word	0x401c0000
 800b8c0:	40140000 	.word	0x40140000
 800b8c4:	3fe00000 	.word	0x3fe00000
 800b8c8:	4baf      	ldr	r3, [pc, #700]	; (800bb88 <_dtoa_r+0x920>)
 800b8ca:	f7f4 febd 	bl	8000648 <__aeabi_dmul>
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	460f      	mov	r7, r1
 800b8d2:	e7ac      	b.n	800b82e <_dtoa_r+0x5c6>
 800b8d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b8d8:	9d00      	ldr	r5, [sp, #0]
 800b8da:	4642      	mov	r2, r8
 800b8dc:	464b      	mov	r3, r9
 800b8de:	4630      	mov	r0, r6
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	f7f4 ffdb 	bl	800089c <__aeabi_ddiv>
 800b8e6:	f7f5 f95f 	bl	8000ba8 <__aeabi_d2iz>
 800b8ea:	9002      	str	r0, [sp, #8]
 800b8ec:	f7f4 fe42 	bl	8000574 <__aeabi_i2d>
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	464b      	mov	r3, r9
 800b8f4:	f7f4 fea8 	bl	8000648 <__aeabi_dmul>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	4639      	mov	r1, r7
 800b900:	f7f4 fcea 	bl	80002d8 <__aeabi_dsub>
 800b904:	9e02      	ldr	r6, [sp, #8]
 800b906:	9f01      	ldr	r7, [sp, #4]
 800b908:	3630      	adds	r6, #48	; 0x30
 800b90a:	f805 6b01 	strb.w	r6, [r5], #1
 800b90e:	9e00      	ldr	r6, [sp, #0]
 800b910:	1bae      	subs	r6, r5, r6
 800b912:	42b7      	cmp	r7, r6
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	d137      	bne.n	800b98a <_dtoa_r+0x722>
 800b91a:	f7f4 fcdf 	bl	80002dc <__adddf3>
 800b91e:	4642      	mov	r2, r8
 800b920:	464b      	mov	r3, r9
 800b922:	4606      	mov	r6, r0
 800b924:	460f      	mov	r7, r1
 800b926:	f7f5 f91f 	bl	8000b68 <__aeabi_dcmpgt>
 800b92a:	b9c8      	cbnz	r0, 800b960 <_dtoa_r+0x6f8>
 800b92c:	4642      	mov	r2, r8
 800b92e:	464b      	mov	r3, r9
 800b930:	4630      	mov	r0, r6
 800b932:	4639      	mov	r1, r7
 800b934:	f7f5 f8f0 	bl	8000b18 <__aeabi_dcmpeq>
 800b938:	b110      	cbz	r0, 800b940 <_dtoa_r+0x6d8>
 800b93a:	9b02      	ldr	r3, [sp, #8]
 800b93c:	07d9      	lsls	r1, r3, #31
 800b93e:	d40f      	bmi.n	800b960 <_dtoa_r+0x6f8>
 800b940:	4620      	mov	r0, r4
 800b942:	4659      	mov	r1, fp
 800b944:	f001 f868 	bl	800ca18 <_Bfree>
 800b948:	2300      	movs	r3, #0
 800b94a:	702b      	strb	r3, [r5, #0]
 800b94c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b94e:	f10a 0001 	add.w	r0, sl, #1
 800b952:	6018      	str	r0, [r3, #0]
 800b954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b956:	2b00      	cmp	r3, #0
 800b958:	f43f acd8 	beq.w	800b30c <_dtoa_r+0xa4>
 800b95c:	601d      	str	r5, [r3, #0]
 800b95e:	e4d5      	b.n	800b30c <_dtoa_r+0xa4>
 800b960:	f8cd a01c 	str.w	sl, [sp, #28]
 800b964:	462b      	mov	r3, r5
 800b966:	461d      	mov	r5, r3
 800b968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b96c:	2a39      	cmp	r2, #57	; 0x39
 800b96e:	d108      	bne.n	800b982 <_dtoa_r+0x71a>
 800b970:	9a00      	ldr	r2, [sp, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d1f7      	bne.n	800b966 <_dtoa_r+0x6fe>
 800b976:	9a07      	ldr	r2, [sp, #28]
 800b978:	9900      	ldr	r1, [sp, #0]
 800b97a:	3201      	adds	r2, #1
 800b97c:	9207      	str	r2, [sp, #28]
 800b97e:	2230      	movs	r2, #48	; 0x30
 800b980:	700a      	strb	r2, [r1, #0]
 800b982:	781a      	ldrb	r2, [r3, #0]
 800b984:	3201      	adds	r2, #1
 800b986:	701a      	strb	r2, [r3, #0]
 800b988:	e78c      	b.n	800b8a4 <_dtoa_r+0x63c>
 800b98a:	4b7f      	ldr	r3, [pc, #508]	; (800bb88 <_dtoa_r+0x920>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	f7f4 fe5b 	bl	8000648 <__aeabi_dmul>
 800b992:	2200      	movs	r2, #0
 800b994:	2300      	movs	r3, #0
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	f7f5 f8bd 	bl	8000b18 <__aeabi_dcmpeq>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d09b      	beq.n	800b8da <_dtoa_r+0x672>
 800b9a2:	e7cd      	b.n	800b940 <_dtoa_r+0x6d8>
 800b9a4:	9a08      	ldr	r2, [sp, #32]
 800b9a6:	2a00      	cmp	r2, #0
 800b9a8:	f000 80c4 	beq.w	800bb34 <_dtoa_r+0x8cc>
 800b9ac:	9a05      	ldr	r2, [sp, #20]
 800b9ae:	2a01      	cmp	r2, #1
 800b9b0:	f300 80a8 	bgt.w	800bb04 <_dtoa_r+0x89c>
 800b9b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	f000 80a0 	beq.w	800bafc <_dtoa_r+0x894>
 800b9bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9c0:	9e06      	ldr	r6, [sp, #24]
 800b9c2:	4645      	mov	r5, r8
 800b9c4:	9a04      	ldr	r2, [sp, #16]
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	441a      	add	r2, r3
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	4498      	add	r8, r3
 800b9ce:	9204      	str	r2, [sp, #16]
 800b9d0:	f001 f928 	bl	800cc24 <__i2b>
 800b9d4:	4607      	mov	r7, r0
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	dd0b      	ble.n	800b9f2 <_dtoa_r+0x78a>
 800b9da:	9b04      	ldr	r3, [sp, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	dd08      	ble.n	800b9f2 <_dtoa_r+0x78a>
 800b9e0:	42ab      	cmp	r3, r5
 800b9e2:	9a04      	ldr	r2, [sp, #16]
 800b9e4:	bfa8      	it	ge
 800b9e6:	462b      	movge	r3, r5
 800b9e8:	eba8 0803 	sub.w	r8, r8, r3
 800b9ec:	1aed      	subs	r5, r5, r3
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	9304      	str	r3, [sp, #16]
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	b1fb      	cbz	r3, 800ba36 <_dtoa_r+0x7ce>
 800b9f6:	9b08      	ldr	r3, [sp, #32]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 809f 	beq.w	800bb3c <_dtoa_r+0x8d4>
 800b9fe:	2e00      	cmp	r6, #0
 800ba00:	dd11      	ble.n	800ba26 <_dtoa_r+0x7be>
 800ba02:	4639      	mov	r1, r7
 800ba04:	4632      	mov	r2, r6
 800ba06:	4620      	mov	r0, r4
 800ba08:	f001 f9c8 	bl	800cd9c <__pow5mult>
 800ba0c:	465a      	mov	r2, fp
 800ba0e:	4601      	mov	r1, r0
 800ba10:	4607      	mov	r7, r0
 800ba12:	4620      	mov	r0, r4
 800ba14:	f001 f91c 	bl	800cc50 <__multiply>
 800ba18:	4659      	mov	r1, fp
 800ba1a:	9007      	str	r0, [sp, #28]
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f000 fffb 	bl	800ca18 <_Bfree>
 800ba22:	9b07      	ldr	r3, [sp, #28]
 800ba24:	469b      	mov	fp, r3
 800ba26:	9b06      	ldr	r3, [sp, #24]
 800ba28:	1b9a      	subs	r2, r3, r6
 800ba2a:	d004      	beq.n	800ba36 <_dtoa_r+0x7ce>
 800ba2c:	4659      	mov	r1, fp
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f001 f9b4 	bl	800cd9c <__pow5mult>
 800ba34:	4683      	mov	fp, r0
 800ba36:	2101      	movs	r1, #1
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f001 f8f3 	bl	800cc24 <__i2b>
 800ba3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	4606      	mov	r6, r0
 800ba44:	dd7c      	ble.n	800bb40 <_dtoa_r+0x8d8>
 800ba46:	461a      	mov	r2, r3
 800ba48:	4601      	mov	r1, r0
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f001 f9a6 	bl	800cd9c <__pow5mult>
 800ba50:	9b05      	ldr	r3, [sp, #20]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	4606      	mov	r6, r0
 800ba56:	dd76      	ble.n	800bb46 <_dtoa_r+0x8de>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	9306      	str	r3, [sp, #24]
 800ba5c:	6933      	ldr	r3, [r6, #16]
 800ba5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba62:	6918      	ldr	r0, [r3, #16]
 800ba64:	f001 f88e 	bl	800cb84 <__hi0bits>
 800ba68:	f1c0 0020 	rsb	r0, r0, #32
 800ba6c:	9b04      	ldr	r3, [sp, #16]
 800ba6e:	4418      	add	r0, r3
 800ba70:	f010 001f 	ands.w	r0, r0, #31
 800ba74:	f000 8086 	beq.w	800bb84 <_dtoa_r+0x91c>
 800ba78:	f1c0 0320 	rsb	r3, r0, #32
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	dd7f      	ble.n	800bb80 <_dtoa_r+0x918>
 800ba80:	f1c0 001c 	rsb	r0, r0, #28
 800ba84:	9b04      	ldr	r3, [sp, #16]
 800ba86:	4403      	add	r3, r0
 800ba88:	4480      	add	r8, r0
 800ba8a:	4405      	add	r5, r0
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	f1b8 0f00 	cmp.w	r8, #0
 800ba92:	dd05      	ble.n	800baa0 <_dtoa_r+0x838>
 800ba94:	4659      	mov	r1, fp
 800ba96:	4642      	mov	r2, r8
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f001 f9d9 	bl	800ce50 <__lshift>
 800ba9e:	4683      	mov	fp, r0
 800baa0:	9b04      	ldr	r3, [sp, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dd05      	ble.n	800bab2 <_dtoa_r+0x84a>
 800baa6:	4631      	mov	r1, r6
 800baa8:	461a      	mov	r2, r3
 800baaa:	4620      	mov	r0, r4
 800baac:	f001 f9d0 	bl	800ce50 <__lshift>
 800bab0:	4606      	mov	r6, r0
 800bab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d069      	beq.n	800bb8c <_dtoa_r+0x924>
 800bab8:	4631      	mov	r1, r6
 800baba:	4658      	mov	r0, fp
 800babc:	f001 fa34 	bl	800cf28 <__mcmp>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	da63      	bge.n	800bb8c <_dtoa_r+0x924>
 800bac4:	2300      	movs	r3, #0
 800bac6:	4659      	mov	r1, fp
 800bac8:	220a      	movs	r2, #10
 800baca:	4620      	mov	r0, r4
 800bacc:	f000 ffc6 	bl	800ca5c <__multadd>
 800bad0:	9b08      	ldr	r3, [sp, #32]
 800bad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bad6:	4683      	mov	fp, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 818f 	beq.w	800bdfc <_dtoa_r+0xb94>
 800bade:	4639      	mov	r1, r7
 800bae0:	2300      	movs	r3, #0
 800bae2:	220a      	movs	r2, #10
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 ffb9 	bl	800ca5c <__multadd>
 800baea:	f1b9 0f00 	cmp.w	r9, #0
 800baee:	4607      	mov	r7, r0
 800baf0:	f300 808e 	bgt.w	800bc10 <_dtoa_r+0x9a8>
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	dc50      	bgt.n	800bb9c <_dtoa_r+0x934>
 800bafa:	e089      	b.n	800bc10 <_dtoa_r+0x9a8>
 800bafc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bafe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb02:	e75d      	b.n	800b9c0 <_dtoa_r+0x758>
 800bb04:	9b01      	ldr	r3, [sp, #4]
 800bb06:	1e5e      	subs	r6, r3, #1
 800bb08:	9b06      	ldr	r3, [sp, #24]
 800bb0a:	42b3      	cmp	r3, r6
 800bb0c:	bfbf      	itttt	lt
 800bb0e:	9b06      	ldrlt	r3, [sp, #24]
 800bb10:	9606      	strlt	r6, [sp, #24]
 800bb12:	1af2      	sublt	r2, r6, r3
 800bb14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bb16:	bfb6      	itet	lt
 800bb18:	189b      	addlt	r3, r3, r2
 800bb1a:	1b9e      	subge	r6, r3, r6
 800bb1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	bfb8      	it	lt
 800bb22:	2600      	movlt	r6, #0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bfb5      	itete	lt
 800bb28:	eba8 0503 	sublt.w	r5, r8, r3
 800bb2c:	9b01      	ldrge	r3, [sp, #4]
 800bb2e:	2300      	movlt	r3, #0
 800bb30:	4645      	movge	r5, r8
 800bb32:	e747      	b.n	800b9c4 <_dtoa_r+0x75c>
 800bb34:	9e06      	ldr	r6, [sp, #24]
 800bb36:	9f08      	ldr	r7, [sp, #32]
 800bb38:	4645      	mov	r5, r8
 800bb3a:	e74c      	b.n	800b9d6 <_dtoa_r+0x76e>
 800bb3c:	9a06      	ldr	r2, [sp, #24]
 800bb3e:	e775      	b.n	800ba2c <_dtoa_r+0x7c4>
 800bb40:	9b05      	ldr	r3, [sp, #20]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	dc18      	bgt.n	800bb78 <_dtoa_r+0x910>
 800bb46:	9b02      	ldr	r3, [sp, #8]
 800bb48:	b9b3      	cbnz	r3, 800bb78 <_dtoa_r+0x910>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb50:	b9a3      	cbnz	r3, 800bb7c <_dtoa_r+0x914>
 800bb52:	9b03      	ldr	r3, [sp, #12]
 800bb54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb58:	0d1b      	lsrs	r3, r3, #20
 800bb5a:	051b      	lsls	r3, r3, #20
 800bb5c:	b12b      	cbz	r3, 800bb6a <_dtoa_r+0x902>
 800bb5e:	9b04      	ldr	r3, [sp, #16]
 800bb60:	3301      	adds	r3, #1
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	f108 0801 	add.w	r8, r8, #1
 800bb68:	2301      	movs	r3, #1
 800bb6a:	9306      	str	r3, [sp, #24]
 800bb6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f47f af74 	bne.w	800ba5c <_dtoa_r+0x7f4>
 800bb74:	2001      	movs	r0, #1
 800bb76:	e779      	b.n	800ba6c <_dtoa_r+0x804>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e7f6      	b.n	800bb6a <_dtoa_r+0x902>
 800bb7c:	9b02      	ldr	r3, [sp, #8]
 800bb7e:	e7f4      	b.n	800bb6a <_dtoa_r+0x902>
 800bb80:	d085      	beq.n	800ba8e <_dtoa_r+0x826>
 800bb82:	4618      	mov	r0, r3
 800bb84:	301c      	adds	r0, #28
 800bb86:	e77d      	b.n	800ba84 <_dtoa_r+0x81c>
 800bb88:	40240000 	.word	0x40240000
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dc38      	bgt.n	800bc04 <_dtoa_r+0x99c>
 800bb92:	9b05      	ldr	r3, [sp, #20]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	dd35      	ble.n	800bc04 <_dtoa_r+0x99c>
 800bb98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bb9c:	f1b9 0f00 	cmp.w	r9, #0
 800bba0:	d10d      	bne.n	800bbbe <_dtoa_r+0x956>
 800bba2:	4631      	mov	r1, r6
 800bba4:	464b      	mov	r3, r9
 800bba6:	2205      	movs	r2, #5
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 ff57 	bl	800ca5c <__multadd>
 800bbae:	4601      	mov	r1, r0
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	4658      	mov	r0, fp
 800bbb4:	f001 f9b8 	bl	800cf28 <__mcmp>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	f73f adbd 	bgt.w	800b738 <_dtoa_r+0x4d0>
 800bbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc0:	9d00      	ldr	r5, [sp, #0]
 800bbc2:	ea6f 0a03 	mvn.w	sl, r3
 800bbc6:	f04f 0800 	mov.w	r8, #0
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f000 ff23 	bl	800ca18 <_Bfree>
 800bbd2:	2f00      	cmp	r7, #0
 800bbd4:	f43f aeb4 	beq.w	800b940 <_dtoa_r+0x6d8>
 800bbd8:	f1b8 0f00 	cmp.w	r8, #0
 800bbdc:	d005      	beq.n	800bbea <_dtoa_r+0x982>
 800bbde:	45b8      	cmp	r8, r7
 800bbe0:	d003      	beq.n	800bbea <_dtoa_r+0x982>
 800bbe2:	4641      	mov	r1, r8
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f000 ff17 	bl	800ca18 <_Bfree>
 800bbea:	4639      	mov	r1, r7
 800bbec:	4620      	mov	r0, r4
 800bbee:	f000 ff13 	bl	800ca18 <_Bfree>
 800bbf2:	e6a5      	b.n	800b940 <_dtoa_r+0x6d8>
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	4637      	mov	r7, r6
 800bbf8:	e7e1      	b.n	800bbbe <_dtoa_r+0x956>
 800bbfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bbfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bc00:	4637      	mov	r7, r6
 800bc02:	e599      	b.n	800b738 <_dtoa_r+0x4d0>
 800bc04:	9b08      	ldr	r3, [sp, #32]
 800bc06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 80fd 	beq.w	800be0a <_dtoa_r+0xba2>
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	dd05      	ble.n	800bc20 <_dtoa_r+0x9b8>
 800bc14:	4639      	mov	r1, r7
 800bc16:	462a      	mov	r2, r5
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f001 f919 	bl	800ce50 <__lshift>
 800bc1e:	4607      	mov	r7, r0
 800bc20:	9b06      	ldr	r3, [sp, #24]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d05c      	beq.n	800bce0 <_dtoa_r+0xa78>
 800bc26:	6879      	ldr	r1, [r7, #4]
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 feb5 	bl	800c998 <_Balloc>
 800bc2e:	4605      	mov	r5, r0
 800bc30:	b928      	cbnz	r0, 800bc3e <_dtoa_r+0x9d6>
 800bc32:	4b80      	ldr	r3, [pc, #512]	; (800be34 <_dtoa_r+0xbcc>)
 800bc34:	4602      	mov	r2, r0
 800bc36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc3a:	f7ff bb2e 	b.w	800b29a <_dtoa_r+0x32>
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	3202      	adds	r2, #2
 800bc42:	0092      	lsls	r2, r2, #2
 800bc44:	f107 010c 	add.w	r1, r7, #12
 800bc48:	300c      	adds	r0, #12
 800bc4a:	f7fd fdc3 	bl	80097d4 <memcpy>
 800bc4e:	2201      	movs	r2, #1
 800bc50:	4629      	mov	r1, r5
 800bc52:	4620      	mov	r0, r4
 800bc54:	f001 f8fc 	bl	800ce50 <__lshift>
 800bc58:	9b00      	ldr	r3, [sp, #0]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	9b00      	ldr	r3, [sp, #0]
 800bc60:	444b      	add	r3, r9
 800bc62:	9307      	str	r3, [sp, #28]
 800bc64:	9b02      	ldr	r3, [sp, #8]
 800bc66:	f003 0301 	and.w	r3, r3, #1
 800bc6a:	46b8      	mov	r8, r7
 800bc6c:	9306      	str	r3, [sp, #24]
 800bc6e:	4607      	mov	r7, r0
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	4631      	mov	r1, r6
 800bc74:	3b01      	subs	r3, #1
 800bc76:	4658      	mov	r0, fp
 800bc78:	9302      	str	r3, [sp, #8]
 800bc7a:	f7ff fa69 	bl	800b150 <quorem>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	3330      	adds	r3, #48	; 0x30
 800bc82:	9004      	str	r0, [sp, #16]
 800bc84:	4641      	mov	r1, r8
 800bc86:	4658      	mov	r0, fp
 800bc88:	9308      	str	r3, [sp, #32]
 800bc8a:	f001 f94d 	bl	800cf28 <__mcmp>
 800bc8e:	463a      	mov	r2, r7
 800bc90:	4681      	mov	r9, r0
 800bc92:	4631      	mov	r1, r6
 800bc94:	4620      	mov	r0, r4
 800bc96:	f001 f963 	bl	800cf60 <__mdiff>
 800bc9a:	68c2      	ldr	r2, [r0, #12]
 800bc9c:	9b08      	ldr	r3, [sp, #32]
 800bc9e:	4605      	mov	r5, r0
 800bca0:	bb02      	cbnz	r2, 800bce4 <_dtoa_r+0xa7c>
 800bca2:	4601      	mov	r1, r0
 800bca4:	4658      	mov	r0, fp
 800bca6:	f001 f93f 	bl	800cf28 <__mcmp>
 800bcaa:	9b08      	ldr	r3, [sp, #32]
 800bcac:	4602      	mov	r2, r0
 800bcae:	4629      	mov	r1, r5
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bcb6:	f000 feaf 	bl	800ca18 <_Bfree>
 800bcba:	9b05      	ldr	r3, [sp, #20]
 800bcbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcbe:	9d01      	ldr	r5, [sp, #4]
 800bcc0:	ea43 0102 	orr.w	r1, r3, r2
 800bcc4:	9b06      	ldr	r3, [sp, #24]
 800bcc6:	430b      	orrs	r3, r1
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	d10d      	bne.n	800bce8 <_dtoa_r+0xa80>
 800bccc:	2b39      	cmp	r3, #57	; 0x39
 800bcce:	d029      	beq.n	800bd24 <_dtoa_r+0xabc>
 800bcd0:	f1b9 0f00 	cmp.w	r9, #0
 800bcd4:	dd01      	ble.n	800bcda <_dtoa_r+0xa72>
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	3331      	adds	r3, #49	; 0x31
 800bcda:	9a02      	ldr	r2, [sp, #8]
 800bcdc:	7013      	strb	r3, [r2, #0]
 800bcde:	e774      	b.n	800bbca <_dtoa_r+0x962>
 800bce0:	4638      	mov	r0, r7
 800bce2:	e7b9      	b.n	800bc58 <_dtoa_r+0x9f0>
 800bce4:	2201      	movs	r2, #1
 800bce6:	e7e2      	b.n	800bcae <_dtoa_r+0xa46>
 800bce8:	f1b9 0f00 	cmp.w	r9, #0
 800bcec:	db06      	blt.n	800bcfc <_dtoa_r+0xa94>
 800bcee:	9905      	ldr	r1, [sp, #20]
 800bcf0:	ea41 0909 	orr.w	r9, r1, r9
 800bcf4:	9906      	ldr	r1, [sp, #24]
 800bcf6:	ea59 0101 	orrs.w	r1, r9, r1
 800bcfa:	d120      	bne.n	800bd3e <_dtoa_r+0xad6>
 800bcfc:	2a00      	cmp	r2, #0
 800bcfe:	ddec      	ble.n	800bcda <_dtoa_r+0xa72>
 800bd00:	4659      	mov	r1, fp
 800bd02:	2201      	movs	r2, #1
 800bd04:	4620      	mov	r0, r4
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	f001 f8a2 	bl	800ce50 <__lshift>
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4683      	mov	fp, r0
 800bd10:	f001 f90a 	bl	800cf28 <__mcmp>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	9b01      	ldr	r3, [sp, #4]
 800bd18:	dc02      	bgt.n	800bd20 <_dtoa_r+0xab8>
 800bd1a:	d1de      	bne.n	800bcda <_dtoa_r+0xa72>
 800bd1c:	07da      	lsls	r2, r3, #31
 800bd1e:	d5dc      	bpl.n	800bcda <_dtoa_r+0xa72>
 800bd20:	2b39      	cmp	r3, #57	; 0x39
 800bd22:	d1d8      	bne.n	800bcd6 <_dtoa_r+0xa6e>
 800bd24:	9a02      	ldr	r2, [sp, #8]
 800bd26:	2339      	movs	r3, #57	; 0x39
 800bd28:	7013      	strb	r3, [r2, #0]
 800bd2a:	462b      	mov	r3, r5
 800bd2c:	461d      	mov	r5, r3
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd34:	2a39      	cmp	r2, #57	; 0x39
 800bd36:	d050      	beq.n	800bdda <_dtoa_r+0xb72>
 800bd38:	3201      	adds	r2, #1
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	e745      	b.n	800bbca <_dtoa_r+0x962>
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	dd03      	ble.n	800bd4a <_dtoa_r+0xae2>
 800bd42:	2b39      	cmp	r3, #57	; 0x39
 800bd44:	d0ee      	beq.n	800bd24 <_dtoa_r+0xabc>
 800bd46:	3301      	adds	r3, #1
 800bd48:	e7c7      	b.n	800bcda <_dtoa_r+0xa72>
 800bd4a:	9a01      	ldr	r2, [sp, #4]
 800bd4c:	9907      	ldr	r1, [sp, #28]
 800bd4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd52:	428a      	cmp	r2, r1
 800bd54:	d02a      	beq.n	800bdac <_dtoa_r+0xb44>
 800bd56:	4659      	mov	r1, fp
 800bd58:	2300      	movs	r3, #0
 800bd5a:	220a      	movs	r2, #10
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fe7d 	bl	800ca5c <__multadd>
 800bd62:	45b8      	cmp	r8, r7
 800bd64:	4683      	mov	fp, r0
 800bd66:	f04f 0300 	mov.w	r3, #0
 800bd6a:	f04f 020a 	mov.w	r2, #10
 800bd6e:	4641      	mov	r1, r8
 800bd70:	4620      	mov	r0, r4
 800bd72:	d107      	bne.n	800bd84 <_dtoa_r+0xb1c>
 800bd74:	f000 fe72 	bl	800ca5c <__multadd>
 800bd78:	4680      	mov	r8, r0
 800bd7a:	4607      	mov	r7, r0
 800bd7c:	9b01      	ldr	r3, [sp, #4]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	e775      	b.n	800bc70 <_dtoa_r+0xa08>
 800bd84:	f000 fe6a 	bl	800ca5c <__multadd>
 800bd88:	4639      	mov	r1, r7
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	220a      	movs	r2, #10
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fe63 	bl	800ca5c <__multadd>
 800bd96:	4607      	mov	r7, r0
 800bd98:	e7f0      	b.n	800bd7c <_dtoa_r+0xb14>
 800bd9a:	f1b9 0f00 	cmp.w	r9, #0
 800bd9e:	9a00      	ldr	r2, [sp, #0]
 800bda0:	bfcc      	ite	gt
 800bda2:	464d      	movgt	r5, r9
 800bda4:	2501      	movle	r5, #1
 800bda6:	4415      	add	r5, r2
 800bda8:	f04f 0800 	mov.w	r8, #0
 800bdac:	4659      	mov	r1, fp
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	f001 f84c 	bl	800ce50 <__lshift>
 800bdb8:	4631      	mov	r1, r6
 800bdba:	4683      	mov	fp, r0
 800bdbc:	f001 f8b4 	bl	800cf28 <__mcmp>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	dcb2      	bgt.n	800bd2a <_dtoa_r+0xac2>
 800bdc4:	d102      	bne.n	800bdcc <_dtoa_r+0xb64>
 800bdc6:	9b01      	ldr	r3, [sp, #4]
 800bdc8:	07db      	lsls	r3, r3, #31
 800bdca:	d4ae      	bmi.n	800bd2a <_dtoa_r+0xac2>
 800bdcc:	462b      	mov	r3, r5
 800bdce:	461d      	mov	r5, r3
 800bdd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdd4:	2a30      	cmp	r2, #48	; 0x30
 800bdd6:	d0fa      	beq.n	800bdce <_dtoa_r+0xb66>
 800bdd8:	e6f7      	b.n	800bbca <_dtoa_r+0x962>
 800bdda:	9a00      	ldr	r2, [sp, #0]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d1a5      	bne.n	800bd2c <_dtoa_r+0xac4>
 800bde0:	f10a 0a01 	add.w	sl, sl, #1
 800bde4:	2331      	movs	r3, #49	; 0x31
 800bde6:	e779      	b.n	800bcdc <_dtoa_r+0xa74>
 800bde8:	4b13      	ldr	r3, [pc, #76]	; (800be38 <_dtoa_r+0xbd0>)
 800bdea:	f7ff baaf 	b.w	800b34c <_dtoa_r+0xe4>
 800bdee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f47f aa86 	bne.w	800b302 <_dtoa_r+0x9a>
 800bdf6:	4b11      	ldr	r3, [pc, #68]	; (800be3c <_dtoa_r+0xbd4>)
 800bdf8:	f7ff baa8 	b.w	800b34c <_dtoa_r+0xe4>
 800bdfc:	f1b9 0f00 	cmp.w	r9, #0
 800be00:	dc03      	bgt.n	800be0a <_dtoa_r+0xba2>
 800be02:	9b05      	ldr	r3, [sp, #20]
 800be04:	2b02      	cmp	r3, #2
 800be06:	f73f aec9 	bgt.w	800bb9c <_dtoa_r+0x934>
 800be0a:	9d00      	ldr	r5, [sp, #0]
 800be0c:	4631      	mov	r1, r6
 800be0e:	4658      	mov	r0, fp
 800be10:	f7ff f99e 	bl	800b150 <quorem>
 800be14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800be18:	f805 3b01 	strb.w	r3, [r5], #1
 800be1c:	9a00      	ldr	r2, [sp, #0]
 800be1e:	1aaa      	subs	r2, r5, r2
 800be20:	4591      	cmp	r9, r2
 800be22:	ddba      	ble.n	800bd9a <_dtoa_r+0xb32>
 800be24:	4659      	mov	r1, fp
 800be26:	2300      	movs	r3, #0
 800be28:	220a      	movs	r2, #10
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 fe16 	bl	800ca5c <__multadd>
 800be30:	4683      	mov	fp, r0
 800be32:	e7eb      	b.n	800be0c <_dtoa_r+0xba4>
 800be34:	0800f734 	.word	0x0800f734
 800be38:	0800f538 	.word	0x0800f538
 800be3c:	0800f6b1 	.word	0x0800f6b1

0800be40 <__sflush_r>:
 800be40:	898a      	ldrh	r2, [r1, #12]
 800be42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be46:	4605      	mov	r5, r0
 800be48:	0710      	lsls	r0, r2, #28
 800be4a:	460c      	mov	r4, r1
 800be4c:	d458      	bmi.n	800bf00 <__sflush_r+0xc0>
 800be4e:	684b      	ldr	r3, [r1, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	dc05      	bgt.n	800be60 <__sflush_r+0x20>
 800be54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be56:	2b00      	cmp	r3, #0
 800be58:	dc02      	bgt.n	800be60 <__sflush_r+0x20>
 800be5a:	2000      	movs	r0, #0
 800be5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be62:	2e00      	cmp	r6, #0
 800be64:	d0f9      	beq.n	800be5a <__sflush_r+0x1a>
 800be66:	2300      	movs	r3, #0
 800be68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be6c:	682f      	ldr	r7, [r5, #0]
 800be6e:	602b      	str	r3, [r5, #0]
 800be70:	d032      	beq.n	800bed8 <__sflush_r+0x98>
 800be72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	075a      	lsls	r2, r3, #29
 800be78:	d505      	bpl.n	800be86 <__sflush_r+0x46>
 800be7a:	6863      	ldr	r3, [r4, #4]
 800be7c:	1ac0      	subs	r0, r0, r3
 800be7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be80:	b10b      	cbz	r3, 800be86 <__sflush_r+0x46>
 800be82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be84:	1ac0      	subs	r0, r0, r3
 800be86:	2300      	movs	r3, #0
 800be88:	4602      	mov	r2, r0
 800be8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be8c:	6a21      	ldr	r1, [r4, #32]
 800be8e:	4628      	mov	r0, r5
 800be90:	47b0      	blx	r6
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	d106      	bne.n	800bea6 <__sflush_r+0x66>
 800be98:	6829      	ldr	r1, [r5, #0]
 800be9a:	291d      	cmp	r1, #29
 800be9c:	d82c      	bhi.n	800bef8 <__sflush_r+0xb8>
 800be9e:	4a2a      	ldr	r2, [pc, #168]	; (800bf48 <__sflush_r+0x108>)
 800bea0:	40ca      	lsrs	r2, r1
 800bea2:	07d6      	lsls	r6, r2, #31
 800bea4:	d528      	bpl.n	800bef8 <__sflush_r+0xb8>
 800bea6:	2200      	movs	r2, #0
 800bea8:	6062      	str	r2, [r4, #4]
 800beaa:	04d9      	lsls	r1, r3, #19
 800beac:	6922      	ldr	r2, [r4, #16]
 800beae:	6022      	str	r2, [r4, #0]
 800beb0:	d504      	bpl.n	800bebc <__sflush_r+0x7c>
 800beb2:	1c42      	adds	r2, r0, #1
 800beb4:	d101      	bne.n	800beba <__sflush_r+0x7a>
 800beb6:	682b      	ldr	r3, [r5, #0]
 800beb8:	b903      	cbnz	r3, 800bebc <__sflush_r+0x7c>
 800beba:	6560      	str	r0, [r4, #84]	; 0x54
 800bebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bebe:	602f      	str	r7, [r5, #0]
 800bec0:	2900      	cmp	r1, #0
 800bec2:	d0ca      	beq.n	800be5a <__sflush_r+0x1a>
 800bec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bec8:	4299      	cmp	r1, r3
 800beca:	d002      	beq.n	800bed2 <__sflush_r+0x92>
 800becc:	4628      	mov	r0, r5
 800bece:	f001 fa2d 	bl	800d32c <_free_r>
 800bed2:	2000      	movs	r0, #0
 800bed4:	6360      	str	r0, [r4, #52]	; 0x34
 800bed6:	e7c1      	b.n	800be5c <__sflush_r+0x1c>
 800bed8:	6a21      	ldr	r1, [r4, #32]
 800beda:	2301      	movs	r3, #1
 800bedc:	4628      	mov	r0, r5
 800bede:	47b0      	blx	r6
 800bee0:	1c41      	adds	r1, r0, #1
 800bee2:	d1c7      	bne.n	800be74 <__sflush_r+0x34>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0c4      	beq.n	800be74 <__sflush_r+0x34>
 800beea:	2b1d      	cmp	r3, #29
 800beec:	d001      	beq.n	800bef2 <__sflush_r+0xb2>
 800beee:	2b16      	cmp	r3, #22
 800bef0:	d101      	bne.n	800bef6 <__sflush_r+0xb6>
 800bef2:	602f      	str	r7, [r5, #0]
 800bef4:	e7b1      	b.n	800be5a <__sflush_r+0x1a>
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800befc:	81a3      	strh	r3, [r4, #12]
 800befe:	e7ad      	b.n	800be5c <__sflush_r+0x1c>
 800bf00:	690f      	ldr	r7, [r1, #16]
 800bf02:	2f00      	cmp	r7, #0
 800bf04:	d0a9      	beq.n	800be5a <__sflush_r+0x1a>
 800bf06:	0793      	lsls	r3, r2, #30
 800bf08:	680e      	ldr	r6, [r1, #0]
 800bf0a:	bf08      	it	eq
 800bf0c:	694b      	ldreq	r3, [r1, #20]
 800bf0e:	600f      	str	r7, [r1, #0]
 800bf10:	bf18      	it	ne
 800bf12:	2300      	movne	r3, #0
 800bf14:	eba6 0807 	sub.w	r8, r6, r7
 800bf18:	608b      	str	r3, [r1, #8]
 800bf1a:	f1b8 0f00 	cmp.w	r8, #0
 800bf1e:	dd9c      	ble.n	800be5a <__sflush_r+0x1a>
 800bf20:	6a21      	ldr	r1, [r4, #32]
 800bf22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf24:	4643      	mov	r3, r8
 800bf26:	463a      	mov	r2, r7
 800bf28:	4628      	mov	r0, r5
 800bf2a:	47b0      	blx	r6
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	dc06      	bgt.n	800bf3e <__sflush_r+0xfe>
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3c:	e78e      	b.n	800be5c <__sflush_r+0x1c>
 800bf3e:	4407      	add	r7, r0
 800bf40:	eba8 0800 	sub.w	r8, r8, r0
 800bf44:	e7e9      	b.n	800bf1a <__sflush_r+0xda>
 800bf46:	bf00      	nop
 800bf48:	20400001 	.word	0x20400001

0800bf4c <_fflush_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	690b      	ldr	r3, [r1, #16]
 800bf50:	4605      	mov	r5, r0
 800bf52:	460c      	mov	r4, r1
 800bf54:	b913      	cbnz	r3, 800bf5c <_fflush_r+0x10>
 800bf56:	2500      	movs	r5, #0
 800bf58:	4628      	mov	r0, r5
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	b118      	cbz	r0, 800bf66 <_fflush_r+0x1a>
 800bf5e:	6983      	ldr	r3, [r0, #24]
 800bf60:	b90b      	cbnz	r3, 800bf66 <_fflush_r+0x1a>
 800bf62:	f000 f887 	bl	800c074 <__sinit>
 800bf66:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <_fflush_r+0x6c>)
 800bf68:	429c      	cmp	r4, r3
 800bf6a:	d11b      	bne.n	800bfa4 <_fflush_r+0x58>
 800bf6c:	686c      	ldr	r4, [r5, #4]
 800bf6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0ef      	beq.n	800bf56 <_fflush_r+0xa>
 800bf76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf78:	07d0      	lsls	r0, r2, #31
 800bf7a:	d404      	bmi.n	800bf86 <_fflush_r+0x3a>
 800bf7c:	0599      	lsls	r1, r3, #22
 800bf7e:	d402      	bmi.n	800bf86 <_fflush_r+0x3a>
 800bf80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf82:	f000 fc88 	bl	800c896 <__retarget_lock_acquire_recursive>
 800bf86:	4628      	mov	r0, r5
 800bf88:	4621      	mov	r1, r4
 800bf8a:	f7ff ff59 	bl	800be40 <__sflush_r>
 800bf8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf90:	07da      	lsls	r2, r3, #31
 800bf92:	4605      	mov	r5, r0
 800bf94:	d4e0      	bmi.n	800bf58 <_fflush_r+0xc>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	059b      	lsls	r3, r3, #22
 800bf9a:	d4dd      	bmi.n	800bf58 <_fflush_r+0xc>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9e:	f000 fc7b 	bl	800c898 <__retarget_lock_release_recursive>
 800bfa2:	e7d9      	b.n	800bf58 <_fflush_r+0xc>
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <_fflush_r+0x70>)
 800bfa6:	429c      	cmp	r4, r3
 800bfa8:	d101      	bne.n	800bfae <_fflush_r+0x62>
 800bfaa:	68ac      	ldr	r4, [r5, #8]
 800bfac:	e7df      	b.n	800bf6e <_fflush_r+0x22>
 800bfae:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <_fflush_r+0x74>)
 800bfb0:	429c      	cmp	r4, r3
 800bfb2:	bf08      	it	eq
 800bfb4:	68ec      	ldreq	r4, [r5, #12]
 800bfb6:	e7da      	b.n	800bf6e <_fflush_r+0x22>
 800bfb8:	0800f768 	.word	0x0800f768
 800bfbc:	0800f788 	.word	0x0800f788
 800bfc0:	0800f748 	.word	0x0800f748

0800bfc4 <std>:
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	b510      	push	{r4, lr}
 800bfc8:	4604      	mov	r4, r0
 800bfca:	e9c0 3300 	strd	r3, r3, [r0]
 800bfce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfd2:	6083      	str	r3, [r0, #8]
 800bfd4:	8181      	strh	r1, [r0, #12]
 800bfd6:	6643      	str	r3, [r0, #100]	; 0x64
 800bfd8:	81c2      	strh	r2, [r0, #14]
 800bfda:	6183      	str	r3, [r0, #24]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	2208      	movs	r2, #8
 800bfe0:	305c      	adds	r0, #92	; 0x5c
 800bfe2:	f7fd fc1f 	bl	8009824 <memset>
 800bfe6:	4b05      	ldr	r3, [pc, #20]	; (800bffc <std+0x38>)
 800bfe8:	6263      	str	r3, [r4, #36]	; 0x24
 800bfea:	4b05      	ldr	r3, [pc, #20]	; (800c000 <std+0x3c>)
 800bfec:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfee:	4b05      	ldr	r3, [pc, #20]	; (800c004 <std+0x40>)
 800bff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bff2:	4b05      	ldr	r3, [pc, #20]	; (800c008 <std+0x44>)
 800bff4:	6224      	str	r4, [r4, #32]
 800bff6:	6323      	str	r3, [r4, #48]	; 0x30
 800bff8:	bd10      	pop	{r4, pc}
 800bffa:	bf00      	nop
 800bffc:	0800d7f9 	.word	0x0800d7f9
 800c000:	0800d81b 	.word	0x0800d81b
 800c004:	0800d853 	.word	0x0800d853
 800c008:	0800d877 	.word	0x0800d877

0800c00c <_cleanup_r>:
 800c00c:	4901      	ldr	r1, [pc, #4]	; (800c014 <_cleanup_r+0x8>)
 800c00e:	f000 b8af 	b.w	800c170 <_fwalk_reent>
 800c012:	bf00      	nop
 800c014:	0800bf4d 	.word	0x0800bf4d

0800c018 <__sfmoreglue>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	1e4a      	subs	r2, r1, #1
 800c01c:	2568      	movs	r5, #104	; 0x68
 800c01e:	4355      	muls	r5, r2
 800c020:	460e      	mov	r6, r1
 800c022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c026:	f001 f9d1 	bl	800d3cc <_malloc_r>
 800c02a:	4604      	mov	r4, r0
 800c02c:	b140      	cbz	r0, 800c040 <__sfmoreglue+0x28>
 800c02e:	2100      	movs	r1, #0
 800c030:	e9c0 1600 	strd	r1, r6, [r0]
 800c034:	300c      	adds	r0, #12
 800c036:	60a0      	str	r0, [r4, #8]
 800c038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c03c:	f7fd fbf2 	bl	8009824 <memset>
 800c040:	4620      	mov	r0, r4
 800c042:	bd70      	pop	{r4, r5, r6, pc}

0800c044 <__sfp_lock_acquire>:
 800c044:	4801      	ldr	r0, [pc, #4]	; (800c04c <__sfp_lock_acquire+0x8>)
 800c046:	f000 bc26 	b.w	800c896 <__retarget_lock_acquire_recursive>
 800c04a:	bf00      	nop
 800c04c:	20009598 	.word	0x20009598

0800c050 <__sfp_lock_release>:
 800c050:	4801      	ldr	r0, [pc, #4]	; (800c058 <__sfp_lock_release+0x8>)
 800c052:	f000 bc21 	b.w	800c898 <__retarget_lock_release_recursive>
 800c056:	bf00      	nop
 800c058:	20009598 	.word	0x20009598

0800c05c <__sinit_lock_acquire>:
 800c05c:	4801      	ldr	r0, [pc, #4]	; (800c064 <__sinit_lock_acquire+0x8>)
 800c05e:	f000 bc1a 	b.w	800c896 <__retarget_lock_acquire_recursive>
 800c062:	bf00      	nop
 800c064:	20009593 	.word	0x20009593

0800c068 <__sinit_lock_release>:
 800c068:	4801      	ldr	r0, [pc, #4]	; (800c070 <__sinit_lock_release+0x8>)
 800c06a:	f000 bc15 	b.w	800c898 <__retarget_lock_release_recursive>
 800c06e:	bf00      	nop
 800c070:	20009593 	.word	0x20009593

0800c074 <__sinit>:
 800c074:	b510      	push	{r4, lr}
 800c076:	4604      	mov	r4, r0
 800c078:	f7ff fff0 	bl	800c05c <__sinit_lock_acquire>
 800c07c:	69a3      	ldr	r3, [r4, #24]
 800c07e:	b11b      	cbz	r3, 800c088 <__sinit+0x14>
 800c080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c084:	f7ff bff0 	b.w	800c068 <__sinit_lock_release>
 800c088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c08c:	6523      	str	r3, [r4, #80]	; 0x50
 800c08e:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <__sinit+0x68>)
 800c090:	4a13      	ldr	r2, [pc, #76]	; (800c0e0 <__sinit+0x6c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	62a2      	str	r2, [r4, #40]	; 0x28
 800c096:	42a3      	cmp	r3, r4
 800c098:	bf04      	itt	eq
 800c09a:	2301      	moveq	r3, #1
 800c09c:	61a3      	streq	r3, [r4, #24]
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 f820 	bl	800c0e4 <__sfp>
 800c0a4:	6060      	str	r0, [r4, #4]
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f000 f81c 	bl	800c0e4 <__sfp>
 800c0ac:	60a0      	str	r0, [r4, #8]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 f818 	bl	800c0e4 <__sfp>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	60e0      	str	r0, [r4, #12]
 800c0b8:	2104      	movs	r1, #4
 800c0ba:	6860      	ldr	r0, [r4, #4]
 800c0bc:	f7ff ff82 	bl	800bfc4 <std>
 800c0c0:	68a0      	ldr	r0, [r4, #8]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	2109      	movs	r1, #9
 800c0c6:	f7ff ff7d 	bl	800bfc4 <std>
 800c0ca:	68e0      	ldr	r0, [r4, #12]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	2112      	movs	r1, #18
 800c0d0:	f7ff ff78 	bl	800bfc4 <std>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	61a3      	str	r3, [r4, #24]
 800c0d8:	e7d2      	b.n	800c080 <__sinit+0xc>
 800c0da:	bf00      	nop
 800c0dc:	0800f524 	.word	0x0800f524
 800c0e0:	0800c00d 	.word	0x0800c00d

0800c0e4 <__sfp>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	4607      	mov	r7, r0
 800c0e8:	f7ff ffac 	bl	800c044 <__sfp_lock_acquire>
 800c0ec:	4b1e      	ldr	r3, [pc, #120]	; (800c168 <__sfp+0x84>)
 800c0ee:	681e      	ldr	r6, [r3, #0]
 800c0f0:	69b3      	ldr	r3, [r6, #24]
 800c0f2:	b913      	cbnz	r3, 800c0fa <__sfp+0x16>
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f7ff ffbd 	bl	800c074 <__sinit>
 800c0fa:	3648      	adds	r6, #72	; 0x48
 800c0fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c100:	3b01      	subs	r3, #1
 800c102:	d503      	bpl.n	800c10c <__sfp+0x28>
 800c104:	6833      	ldr	r3, [r6, #0]
 800c106:	b30b      	cbz	r3, 800c14c <__sfp+0x68>
 800c108:	6836      	ldr	r6, [r6, #0]
 800c10a:	e7f7      	b.n	800c0fc <__sfp+0x18>
 800c10c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c110:	b9d5      	cbnz	r5, 800c148 <__sfp+0x64>
 800c112:	4b16      	ldr	r3, [pc, #88]	; (800c16c <__sfp+0x88>)
 800c114:	60e3      	str	r3, [r4, #12]
 800c116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c11a:	6665      	str	r5, [r4, #100]	; 0x64
 800c11c:	f000 fbba 	bl	800c894 <__retarget_lock_init_recursive>
 800c120:	f7ff ff96 	bl	800c050 <__sfp_lock_release>
 800c124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c12c:	6025      	str	r5, [r4, #0]
 800c12e:	61a5      	str	r5, [r4, #24]
 800c130:	2208      	movs	r2, #8
 800c132:	4629      	mov	r1, r5
 800c134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c138:	f7fd fb74 	bl	8009824 <memset>
 800c13c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c144:	4620      	mov	r0, r4
 800c146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c148:	3468      	adds	r4, #104	; 0x68
 800c14a:	e7d9      	b.n	800c100 <__sfp+0x1c>
 800c14c:	2104      	movs	r1, #4
 800c14e:	4638      	mov	r0, r7
 800c150:	f7ff ff62 	bl	800c018 <__sfmoreglue>
 800c154:	4604      	mov	r4, r0
 800c156:	6030      	str	r0, [r6, #0]
 800c158:	2800      	cmp	r0, #0
 800c15a:	d1d5      	bne.n	800c108 <__sfp+0x24>
 800c15c:	f7ff ff78 	bl	800c050 <__sfp_lock_release>
 800c160:	230c      	movs	r3, #12
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	e7ee      	b.n	800c144 <__sfp+0x60>
 800c166:	bf00      	nop
 800c168:	0800f524 	.word	0x0800f524
 800c16c:	ffff0001 	.word	0xffff0001

0800c170 <_fwalk_reent>:
 800c170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c174:	4606      	mov	r6, r0
 800c176:	4688      	mov	r8, r1
 800c178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c17c:	2700      	movs	r7, #0
 800c17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c182:	f1b9 0901 	subs.w	r9, r9, #1
 800c186:	d505      	bpl.n	800c194 <_fwalk_reent+0x24>
 800c188:	6824      	ldr	r4, [r4, #0]
 800c18a:	2c00      	cmp	r4, #0
 800c18c:	d1f7      	bne.n	800c17e <_fwalk_reent+0xe>
 800c18e:	4638      	mov	r0, r7
 800c190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c194:	89ab      	ldrh	r3, [r5, #12]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d907      	bls.n	800c1aa <_fwalk_reent+0x3a>
 800c19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	d003      	beq.n	800c1aa <_fwalk_reent+0x3a>
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	47c0      	blx	r8
 800c1a8:	4307      	orrs	r7, r0
 800c1aa:	3568      	adds	r5, #104	; 0x68
 800c1ac:	e7e9      	b.n	800c182 <_fwalk_reent+0x12>

0800c1ae <rshift>:
 800c1ae:	6903      	ldr	r3, [r0, #16]
 800c1b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1bc:	f100 0414 	add.w	r4, r0, #20
 800c1c0:	dd45      	ble.n	800c24e <rshift+0xa0>
 800c1c2:	f011 011f 	ands.w	r1, r1, #31
 800c1c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c1ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1ce:	d10c      	bne.n	800c1ea <rshift+0x3c>
 800c1d0:	f100 0710 	add.w	r7, r0, #16
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	42b1      	cmp	r1, r6
 800c1d8:	d334      	bcc.n	800c244 <rshift+0x96>
 800c1da:	1a9b      	subs	r3, r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	1eea      	subs	r2, r5, #3
 800c1e0:	4296      	cmp	r6, r2
 800c1e2:	bf38      	it	cc
 800c1e4:	2300      	movcc	r3, #0
 800c1e6:	4423      	add	r3, r4
 800c1e8:	e015      	b.n	800c216 <rshift+0x68>
 800c1ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c1ee:	f1c1 0820 	rsb	r8, r1, #32
 800c1f2:	40cf      	lsrs	r7, r1
 800c1f4:	f105 0e04 	add.w	lr, r5, #4
 800c1f8:	46a1      	mov	r9, r4
 800c1fa:	4576      	cmp	r6, lr
 800c1fc:	46f4      	mov	ip, lr
 800c1fe:	d815      	bhi.n	800c22c <rshift+0x7e>
 800c200:	1a9b      	subs	r3, r3, r2
 800c202:	009a      	lsls	r2, r3, #2
 800c204:	3a04      	subs	r2, #4
 800c206:	3501      	adds	r5, #1
 800c208:	42ae      	cmp	r6, r5
 800c20a:	bf38      	it	cc
 800c20c:	2200      	movcc	r2, #0
 800c20e:	18a3      	adds	r3, r4, r2
 800c210:	50a7      	str	r7, [r4, r2]
 800c212:	b107      	cbz	r7, 800c216 <rshift+0x68>
 800c214:	3304      	adds	r3, #4
 800c216:	1b1a      	subs	r2, r3, r4
 800c218:	42a3      	cmp	r3, r4
 800c21a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c21e:	bf08      	it	eq
 800c220:	2300      	moveq	r3, #0
 800c222:	6102      	str	r2, [r0, #16]
 800c224:	bf08      	it	eq
 800c226:	6143      	streq	r3, [r0, #20]
 800c228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c22c:	f8dc c000 	ldr.w	ip, [ip]
 800c230:	fa0c fc08 	lsl.w	ip, ip, r8
 800c234:	ea4c 0707 	orr.w	r7, ip, r7
 800c238:	f849 7b04 	str.w	r7, [r9], #4
 800c23c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c240:	40cf      	lsrs	r7, r1
 800c242:	e7da      	b.n	800c1fa <rshift+0x4c>
 800c244:	f851 cb04 	ldr.w	ip, [r1], #4
 800c248:	f847 cf04 	str.w	ip, [r7, #4]!
 800c24c:	e7c3      	b.n	800c1d6 <rshift+0x28>
 800c24e:	4623      	mov	r3, r4
 800c250:	e7e1      	b.n	800c216 <rshift+0x68>

0800c252 <__hexdig_fun>:
 800c252:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c256:	2b09      	cmp	r3, #9
 800c258:	d802      	bhi.n	800c260 <__hexdig_fun+0xe>
 800c25a:	3820      	subs	r0, #32
 800c25c:	b2c0      	uxtb	r0, r0
 800c25e:	4770      	bx	lr
 800c260:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c264:	2b05      	cmp	r3, #5
 800c266:	d801      	bhi.n	800c26c <__hexdig_fun+0x1a>
 800c268:	3847      	subs	r0, #71	; 0x47
 800c26a:	e7f7      	b.n	800c25c <__hexdig_fun+0xa>
 800c26c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c270:	2b05      	cmp	r3, #5
 800c272:	d801      	bhi.n	800c278 <__hexdig_fun+0x26>
 800c274:	3827      	subs	r0, #39	; 0x27
 800c276:	e7f1      	b.n	800c25c <__hexdig_fun+0xa>
 800c278:	2000      	movs	r0, #0
 800c27a:	4770      	bx	lr

0800c27c <__gethex>:
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	ed2d 8b02 	vpush	{d8}
 800c284:	b089      	sub	sp, #36	; 0x24
 800c286:	ee08 0a10 	vmov	s16, r0
 800c28a:	9304      	str	r3, [sp, #16]
 800c28c:	4bbc      	ldr	r3, [pc, #752]	; (800c580 <__gethex+0x304>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	4618      	mov	r0, r3
 800c294:	468b      	mov	fp, r1
 800c296:	4690      	mov	r8, r2
 800c298:	f7f3 ffc2 	bl	8000220 <strlen>
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	f8db 2000 	ldr.w	r2, [fp]
 800c2a2:	4403      	add	r3, r0
 800c2a4:	4682      	mov	sl, r0
 800c2a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c2aa:	9305      	str	r3, [sp, #20]
 800c2ac:	1c93      	adds	r3, r2, #2
 800c2ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c2b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c2b6:	32fe      	adds	r2, #254	; 0xfe
 800c2b8:	18d1      	adds	r1, r2, r3
 800c2ba:	461f      	mov	r7, r3
 800c2bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c2c0:	9100      	str	r1, [sp, #0]
 800c2c2:	2830      	cmp	r0, #48	; 0x30
 800c2c4:	d0f8      	beq.n	800c2b8 <__gethex+0x3c>
 800c2c6:	f7ff ffc4 	bl	800c252 <__hexdig_fun>
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d13a      	bne.n	800c346 <__gethex+0xca>
 800c2d0:	9901      	ldr	r1, [sp, #4]
 800c2d2:	4652      	mov	r2, sl
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f001 fad2 	bl	800d87e <strncmp>
 800c2da:	4605      	mov	r5, r0
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d168      	bne.n	800c3b2 <__gethex+0x136>
 800c2e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c2e4:	eb07 060a 	add.w	r6, r7, sl
 800c2e8:	f7ff ffb3 	bl	800c252 <__hexdig_fun>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d062      	beq.n	800c3b6 <__gethex+0x13a>
 800c2f0:	4633      	mov	r3, r6
 800c2f2:	7818      	ldrb	r0, [r3, #0]
 800c2f4:	2830      	cmp	r0, #48	; 0x30
 800c2f6:	461f      	mov	r7, r3
 800c2f8:	f103 0301 	add.w	r3, r3, #1
 800c2fc:	d0f9      	beq.n	800c2f2 <__gethex+0x76>
 800c2fe:	f7ff ffa8 	bl	800c252 <__hexdig_fun>
 800c302:	2301      	movs	r3, #1
 800c304:	fab0 f480 	clz	r4, r0
 800c308:	0964      	lsrs	r4, r4, #5
 800c30a:	4635      	mov	r5, r6
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	463a      	mov	r2, r7
 800c310:	4616      	mov	r6, r2
 800c312:	3201      	adds	r2, #1
 800c314:	7830      	ldrb	r0, [r6, #0]
 800c316:	f7ff ff9c 	bl	800c252 <__hexdig_fun>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d1f8      	bne.n	800c310 <__gethex+0x94>
 800c31e:	9901      	ldr	r1, [sp, #4]
 800c320:	4652      	mov	r2, sl
 800c322:	4630      	mov	r0, r6
 800c324:	f001 faab 	bl	800d87e <strncmp>
 800c328:	b980      	cbnz	r0, 800c34c <__gethex+0xd0>
 800c32a:	b94d      	cbnz	r5, 800c340 <__gethex+0xc4>
 800c32c:	eb06 050a 	add.w	r5, r6, sl
 800c330:	462a      	mov	r2, r5
 800c332:	4616      	mov	r6, r2
 800c334:	3201      	adds	r2, #1
 800c336:	7830      	ldrb	r0, [r6, #0]
 800c338:	f7ff ff8b 	bl	800c252 <__hexdig_fun>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d1f8      	bne.n	800c332 <__gethex+0xb6>
 800c340:	1bad      	subs	r5, r5, r6
 800c342:	00ad      	lsls	r5, r5, #2
 800c344:	e004      	b.n	800c350 <__gethex+0xd4>
 800c346:	2400      	movs	r4, #0
 800c348:	4625      	mov	r5, r4
 800c34a:	e7e0      	b.n	800c30e <__gethex+0x92>
 800c34c:	2d00      	cmp	r5, #0
 800c34e:	d1f7      	bne.n	800c340 <__gethex+0xc4>
 800c350:	7833      	ldrb	r3, [r6, #0]
 800c352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c356:	2b50      	cmp	r3, #80	; 0x50
 800c358:	d13b      	bne.n	800c3d2 <__gethex+0x156>
 800c35a:	7873      	ldrb	r3, [r6, #1]
 800c35c:	2b2b      	cmp	r3, #43	; 0x2b
 800c35e:	d02c      	beq.n	800c3ba <__gethex+0x13e>
 800c360:	2b2d      	cmp	r3, #45	; 0x2d
 800c362:	d02e      	beq.n	800c3c2 <__gethex+0x146>
 800c364:	1c71      	adds	r1, r6, #1
 800c366:	f04f 0900 	mov.w	r9, #0
 800c36a:	7808      	ldrb	r0, [r1, #0]
 800c36c:	f7ff ff71 	bl	800c252 <__hexdig_fun>
 800c370:	1e43      	subs	r3, r0, #1
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b18      	cmp	r3, #24
 800c376:	d82c      	bhi.n	800c3d2 <__gethex+0x156>
 800c378:	f1a0 0210 	sub.w	r2, r0, #16
 800c37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c380:	f7ff ff67 	bl	800c252 <__hexdig_fun>
 800c384:	1e43      	subs	r3, r0, #1
 800c386:	b2db      	uxtb	r3, r3
 800c388:	2b18      	cmp	r3, #24
 800c38a:	d91d      	bls.n	800c3c8 <__gethex+0x14c>
 800c38c:	f1b9 0f00 	cmp.w	r9, #0
 800c390:	d000      	beq.n	800c394 <__gethex+0x118>
 800c392:	4252      	negs	r2, r2
 800c394:	4415      	add	r5, r2
 800c396:	f8cb 1000 	str.w	r1, [fp]
 800c39a:	b1e4      	cbz	r4, 800c3d6 <__gethex+0x15a>
 800c39c:	9b00      	ldr	r3, [sp, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bf14      	ite	ne
 800c3a2:	2700      	movne	r7, #0
 800c3a4:	2706      	moveq	r7, #6
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	b009      	add	sp, #36	; 0x24
 800c3aa:	ecbd 8b02 	vpop	{d8}
 800c3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b2:	463e      	mov	r6, r7
 800c3b4:	4625      	mov	r5, r4
 800c3b6:	2401      	movs	r4, #1
 800c3b8:	e7ca      	b.n	800c350 <__gethex+0xd4>
 800c3ba:	f04f 0900 	mov.w	r9, #0
 800c3be:	1cb1      	adds	r1, r6, #2
 800c3c0:	e7d3      	b.n	800c36a <__gethex+0xee>
 800c3c2:	f04f 0901 	mov.w	r9, #1
 800c3c6:	e7fa      	b.n	800c3be <__gethex+0x142>
 800c3c8:	230a      	movs	r3, #10
 800c3ca:	fb03 0202 	mla	r2, r3, r2, r0
 800c3ce:	3a10      	subs	r2, #16
 800c3d0:	e7d4      	b.n	800c37c <__gethex+0x100>
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	e7df      	b.n	800c396 <__gethex+0x11a>
 800c3d6:	1bf3      	subs	r3, r6, r7
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	4621      	mov	r1, r4
 800c3dc:	2b07      	cmp	r3, #7
 800c3de:	dc0b      	bgt.n	800c3f8 <__gethex+0x17c>
 800c3e0:	ee18 0a10 	vmov	r0, s16
 800c3e4:	f000 fad8 	bl	800c998 <_Balloc>
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	b940      	cbnz	r0, 800c3fe <__gethex+0x182>
 800c3ec:	4b65      	ldr	r3, [pc, #404]	; (800c584 <__gethex+0x308>)
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	21de      	movs	r1, #222	; 0xde
 800c3f2:	4865      	ldr	r0, [pc, #404]	; (800c588 <__gethex+0x30c>)
 800c3f4:	f001 fa74 	bl	800d8e0 <__assert_func>
 800c3f8:	3101      	adds	r1, #1
 800c3fa:	105b      	asrs	r3, r3, #1
 800c3fc:	e7ee      	b.n	800c3dc <__gethex+0x160>
 800c3fe:	f100 0914 	add.w	r9, r0, #20
 800c402:	f04f 0b00 	mov.w	fp, #0
 800c406:	f1ca 0301 	rsb	r3, sl, #1
 800c40a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c40e:	f8cd b000 	str.w	fp, [sp]
 800c412:	9306      	str	r3, [sp, #24]
 800c414:	42b7      	cmp	r7, r6
 800c416:	d340      	bcc.n	800c49a <__gethex+0x21e>
 800c418:	9802      	ldr	r0, [sp, #8]
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	f840 3b04 	str.w	r3, [r0], #4
 800c420:	eba0 0009 	sub.w	r0, r0, r9
 800c424:	1080      	asrs	r0, r0, #2
 800c426:	0146      	lsls	r6, r0, #5
 800c428:	6120      	str	r0, [r4, #16]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f000 fbaa 	bl	800cb84 <__hi0bits>
 800c430:	1a30      	subs	r0, r6, r0
 800c432:	f8d8 6000 	ldr.w	r6, [r8]
 800c436:	42b0      	cmp	r0, r6
 800c438:	dd63      	ble.n	800c502 <__gethex+0x286>
 800c43a:	1b87      	subs	r7, r0, r6
 800c43c:	4639      	mov	r1, r7
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 ff44 	bl	800d2cc <__any_on>
 800c444:	4682      	mov	sl, r0
 800c446:	b1a8      	cbz	r0, 800c474 <__gethex+0x1f8>
 800c448:	1e7b      	subs	r3, r7, #1
 800c44a:	1159      	asrs	r1, r3, #5
 800c44c:	f003 021f 	and.w	r2, r3, #31
 800c450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c454:	f04f 0a01 	mov.w	sl, #1
 800c458:	fa0a f202 	lsl.w	r2, sl, r2
 800c45c:	420a      	tst	r2, r1
 800c45e:	d009      	beq.n	800c474 <__gethex+0x1f8>
 800c460:	4553      	cmp	r3, sl
 800c462:	dd05      	ble.n	800c470 <__gethex+0x1f4>
 800c464:	1eb9      	subs	r1, r7, #2
 800c466:	4620      	mov	r0, r4
 800c468:	f000 ff30 	bl	800d2cc <__any_on>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d145      	bne.n	800c4fc <__gethex+0x280>
 800c470:	f04f 0a02 	mov.w	sl, #2
 800c474:	4639      	mov	r1, r7
 800c476:	4620      	mov	r0, r4
 800c478:	f7ff fe99 	bl	800c1ae <rshift>
 800c47c:	443d      	add	r5, r7
 800c47e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c482:	42ab      	cmp	r3, r5
 800c484:	da4c      	bge.n	800c520 <__gethex+0x2a4>
 800c486:	ee18 0a10 	vmov	r0, s16
 800c48a:	4621      	mov	r1, r4
 800c48c:	f000 fac4 	bl	800ca18 <_Bfree>
 800c490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c492:	2300      	movs	r3, #0
 800c494:	6013      	str	r3, [r2, #0]
 800c496:	27a3      	movs	r7, #163	; 0xa3
 800c498:	e785      	b.n	800c3a6 <__gethex+0x12a>
 800c49a:	1e73      	subs	r3, r6, #1
 800c49c:	9a05      	ldr	r2, [sp, #20]
 800c49e:	9303      	str	r3, [sp, #12]
 800c4a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d019      	beq.n	800c4dc <__gethex+0x260>
 800c4a8:	f1bb 0f20 	cmp.w	fp, #32
 800c4ac:	d107      	bne.n	800c4be <__gethex+0x242>
 800c4ae:	9b02      	ldr	r3, [sp, #8]
 800c4b0:	9a00      	ldr	r2, [sp, #0]
 800c4b2:	f843 2b04 	str.w	r2, [r3], #4
 800c4b6:	9302      	str	r3, [sp, #8]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	469b      	mov	fp, r3
 800c4be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c4c2:	f7ff fec6 	bl	800c252 <__hexdig_fun>
 800c4c6:	9b00      	ldr	r3, [sp, #0]
 800c4c8:	f000 000f 	and.w	r0, r0, #15
 800c4cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c4d0:	4303      	orrs	r3, r0
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	f10b 0b04 	add.w	fp, fp, #4
 800c4d8:	9b03      	ldr	r3, [sp, #12]
 800c4da:	e00d      	b.n	800c4f8 <__gethex+0x27c>
 800c4dc:	9b03      	ldr	r3, [sp, #12]
 800c4de:	9a06      	ldr	r2, [sp, #24]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	42bb      	cmp	r3, r7
 800c4e4:	d3e0      	bcc.n	800c4a8 <__gethex+0x22c>
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	9901      	ldr	r1, [sp, #4]
 800c4ea:	9307      	str	r3, [sp, #28]
 800c4ec:	4652      	mov	r2, sl
 800c4ee:	f001 f9c6 	bl	800d87e <strncmp>
 800c4f2:	9b07      	ldr	r3, [sp, #28]
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d1d7      	bne.n	800c4a8 <__gethex+0x22c>
 800c4f8:	461e      	mov	r6, r3
 800c4fa:	e78b      	b.n	800c414 <__gethex+0x198>
 800c4fc:	f04f 0a03 	mov.w	sl, #3
 800c500:	e7b8      	b.n	800c474 <__gethex+0x1f8>
 800c502:	da0a      	bge.n	800c51a <__gethex+0x29e>
 800c504:	1a37      	subs	r7, r6, r0
 800c506:	4621      	mov	r1, r4
 800c508:	ee18 0a10 	vmov	r0, s16
 800c50c:	463a      	mov	r2, r7
 800c50e:	f000 fc9f 	bl	800ce50 <__lshift>
 800c512:	1bed      	subs	r5, r5, r7
 800c514:	4604      	mov	r4, r0
 800c516:	f100 0914 	add.w	r9, r0, #20
 800c51a:	f04f 0a00 	mov.w	sl, #0
 800c51e:	e7ae      	b.n	800c47e <__gethex+0x202>
 800c520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c524:	42a8      	cmp	r0, r5
 800c526:	dd72      	ble.n	800c60e <__gethex+0x392>
 800c528:	1b45      	subs	r5, r0, r5
 800c52a:	42ae      	cmp	r6, r5
 800c52c:	dc36      	bgt.n	800c59c <__gethex+0x320>
 800c52e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d02a      	beq.n	800c58c <__gethex+0x310>
 800c536:	2b03      	cmp	r3, #3
 800c538:	d02c      	beq.n	800c594 <__gethex+0x318>
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d115      	bne.n	800c56a <__gethex+0x2ee>
 800c53e:	42ae      	cmp	r6, r5
 800c540:	d113      	bne.n	800c56a <__gethex+0x2ee>
 800c542:	2e01      	cmp	r6, #1
 800c544:	d10b      	bne.n	800c55e <__gethex+0x2e2>
 800c546:	9a04      	ldr	r2, [sp, #16]
 800c548:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c54c:	6013      	str	r3, [r2, #0]
 800c54e:	2301      	movs	r3, #1
 800c550:	6123      	str	r3, [r4, #16]
 800c552:	f8c9 3000 	str.w	r3, [r9]
 800c556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c558:	2762      	movs	r7, #98	; 0x62
 800c55a:	601c      	str	r4, [r3, #0]
 800c55c:	e723      	b.n	800c3a6 <__gethex+0x12a>
 800c55e:	1e71      	subs	r1, r6, #1
 800c560:	4620      	mov	r0, r4
 800c562:	f000 feb3 	bl	800d2cc <__any_on>
 800c566:	2800      	cmp	r0, #0
 800c568:	d1ed      	bne.n	800c546 <__gethex+0x2ca>
 800c56a:	ee18 0a10 	vmov	r0, s16
 800c56e:	4621      	mov	r1, r4
 800c570:	f000 fa52 	bl	800ca18 <_Bfree>
 800c574:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c576:	2300      	movs	r3, #0
 800c578:	6013      	str	r3, [r2, #0]
 800c57a:	2750      	movs	r7, #80	; 0x50
 800c57c:	e713      	b.n	800c3a6 <__gethex+0x12a>
 800c57e:	bf00      	nop
 800c580:	0800f814 	.word	0x0800f814
 800c584:	0800f734 	.word	0x0800f734
 800c588:	0800f7a8 	.word	0x0800f7a8
 800c58c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1eb      	bne.n	800c56a <__gethex+0x2ee>
 800c592:	e7d8      	b.n	800c546 <__gethex+0x2ca>
 800c594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1d5      	bne.n	800c546 <__gethex+0x2ca>
 800c59a:	e7e6      	b.n	800c56a <__gethex+0x2ee>
 800c59c:	1e6f      	subs	r7, r5, #1
 800c59e:	f1ba 0f00 	cmp.w	sl, #0
 800c5a2:	d131      	bne.n	800c608 <__gethex+0x38c>
 800c5a4:	b127      	cbz	r7, 800c5b0 <__gethex+0x334>
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 fe8f 	bl	800d2cc <__any_on>
 800c5ae:	4682      	mov	sl, r0
 800c5b0:	117b      	asrs	r3, r7, #5
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c5b8:	f007 071f 	and.w	r7, r7, #31
 800c5bc:	fa01 f707 	lsl.w	r7, r1, r7
 800c5c0:	421f      	tst	r7, r3
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	bf18      	it	ne
 800c5c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c5cc:	1b76      	subs	r6, r6, r5
 800c5ce:	f7ff fdee 	bl	800c1ae <rshift>
 800c5d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c5d6:	2702      	movs	r7, #2
 800c5d8:	f1ba 0f00 	cmp.w	sl, #0
 800c5dc:	d048      	beq.n	800c670 <__gethex+0x3f4>
 800c5de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d015      	beq.n	800c612 <__gethex+0x396>
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d017      	beq.n	800c61a <__gethex+0x39e>
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d109      	bne.n	800c602 <__gethex+0x386>
 800c5ee:	f01a 0f02 	tst.w	sl, #2
 800c5f2:	d006      	beq.n	800c602 <__gethex+0x386>
 800c5f4:	f8d9 0000 	ldr.w	r0, [r9]
 800c5f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c5fc:	f01a 0f01 	tst.w	sl, #1
 800c600:	d10e      	bne.n	800c620 <__gethex+0x3a4>
 800c602:	f047 0710 	orr.w	r7, r7, #16
 800c606:	e033      	b.n	800c670 <__gethex+0x3f4>
 800c608:	f04f 0a01 	mov.w	sl, #1
 800c60c:	e7d0      	b.n	800c5b0 <__gethex+0x334>
 800c60e:	2701      	movs	r7, #1
 800c610:	e7e2      	b.n	800c5d8 <__gethex+0x35c>
 800c612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c614:	f1c3 0301 	rsb	r3, r3, #1
 800c618:	9315      	str	r3, [sp, #84]	; 0x54
 800c61a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0f0      	beq.n	800c602 <__gethex+0x386>
 800c620:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c624:	f104 0314 	add.w	r3, r4, #20
 800c628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c62c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c630:	f04f 0c00 	mov.w	ip, #0
 800c634:	4618      	mov	r0, r3
 800c636:	f853 2b04 	ldr.w	r2, [r3], #4
 800c63a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c63e:	d01c      	beq.n	800c67a <__gethex+0x3fe>
 800c640:	3201      	adds	r2, #1
 800c642:	6002      	str	r2, [r0, #0]
 800c644:	2f02      	cmp	r7, #2
 800c646:	f104 0314 	add.w	r3, r4, #20
 800c64a:	d13f      	bne.n	800c6cc <__gethex+0x450>
 800c64c:	f8d8 2000 	ldr.w	r2, [r8]
 800c650:	3a01      	subs	r2, #1
 800c652:	42b2      	cmp	r2, r6
 800c654:	d10a      	bne.n	800c66c <__gethex+0x3f0>
 800c656:	1171      	asrs	r1, r6, #5
 800c658:	2201      	movs	r2, #1
 800c65a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c65e:	f006 061f 	and.w	r6, r6, #31
 800c662:	fa02 f606 	lsl.w	r6, r2, r6
 800c666:	421e      	tst	r6, r3
 800c668:	bf18      	it	ne
 800c66a:	4617      	movne	r7, r2
 800c66c:	f047 0720 	orr.w	r7, r7, #32
 800c670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c672:	601c      	str	r4, [r3, #0]
 800c674:	9b04      	ldr	r3, [sp, #16]
 800c676:	601d      	str	r5, [r3, #0]
 800c678:	e695      	b.n	800c3a6 <__gethex+0x12a>
 800c67a:	4299      	cmp	r1, r3
 800c67c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c680:	d8d8      	bhi.n	800c634 <__gethex+0x3b8>
 800c682:	68a3      	ldr	r3, [r4, #8]
 800c684:	459b      	cmp	fp, r3
 800c686:	db19      	blt.n	800c6bc <__gethex+0x440>
 800c688:	6861      	ldr	r1, [r4, #4]
 800c68a:	ee18 0a10 	vmov	r0, s16
 800c68e:	3101      	adds	r1, #1
 800c690:	f000 f982 	bl	800c998 <_Balloc>
 800c694:	4681      	mov	r9, r0
 800c696:	b918      	cbnz	r0, 800c6a0 <__gethex+0x424>
 800c698:	4b1a      	ldr	r3, [pc, #104]	; (800c704 <__gethex+0x488>)
 800c69a:	4602      	mov	r2, r0
 800c69c:	2184      	movs	r1, #132	; 0x84
 800c69e:	e6a8      	b.n	800c3f2 <__gethex+0x176>
 800c6a0:	6922      	ldr	r2, [r4, #16]
 800c6a2:	3202      	adds	r2, #2
 800c6a4:	f104 010c 	add.w	r1, r4, #12
 800c6a8:	0092      	lsls	r2, r2, #2
 800c6aa:	300c      	adds	r0, #12
 800c6ac:	f7fd f892 	bl	80097d4 <memcpy>
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	ee18 0a10 	vmov	r0, s16
 800c6b6:	f000 f9af 	bl	800ca18 <_Bfree>
 800c6ba:	464c      	mov	r4, r9
 800c6bc:	6923      	ldr	r3, [r4, #16]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6c4:	6122      	str	r2, [r4, #16]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	615a      	str	r2, [r3, #20]
 800c6ca:	e7bb      	b.n	800c644 <__gethex+0x3c8>
 800c6cc:	6922      	ldr	r2, [r4, #16]
 800c6ce:	455a      	cmp	r2, fp
 800c6d0:	dd0b      	ble.n	800c6ea <__gethex+0x46e>
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f7ff fd6a 	bl	800c1ae <rshift>
 800c6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6de:	3501      	adds	r5, #1
 800c6e0:	42ab      	cmp	r3, r5
 800c6e2:	f6ff aed0 	blt.w	800c486 <__gethex+0x20a>
 800c6e6:	2701      	movs	r7, #1
 800c6e8:	e7c0      	b.n	800c66c <__gethex+0x3f0>
 800c6ea:	f016 061f 	ands.w	r6, r6, #31
 800c6ee:	d0fa      	beq.n	800c6e6 <__gethex+0x46a>
 800c6f0:	449a      	add	sl, r3
 800c6f2:	f1c6 0620 	rsb	r6, r6, #32
 800c6f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c6fa:	f000 fa43 	bl	800cb84 <__hi0bits>
 800c6fe:	42b0      	cmp	r0, r6
 800c700:	dbe7      	blt.n	800c6d2 <__gethex+0x456>
 800c702:	e7f0      	b.n	800c6e6 <__gethex+0x46a>
 800c704:	0800f734 	.word	0x0800f734

0800c708 <L_shift>:
 800c708:	f1c2 0208 	rsb	r2, r2, #8
 800c70c:	0092      	lsls	r2, r2, #2
 800c70e:	b570      	push	{r4, r5, r6, lr}
 800c710:	f1c2 0620 	rsb	r6, r2, #32
 800c714:	6843      	ldr	r3, [r0, #4]
 800c716:	6804      	ldr	r4, [r0, #0]
 800c718:	fa03 f506 	lsl.w	r5, r3, r6
 800c71c:	432c      	orrs	r4, r5
 800c71e:	40d3      	lsrs	r3, r2
 800c720:	6004      	str	r4, [r0, #0]
 800c722:	f840 3f04 	str.w	r3, [r0, #4]!
 800c726:	4288      	cmp	r0, r1
 800c728:	d3f4      	bcc.n	800c714 <L_shift+0xc>
 800c72a:	bd70      	pop	{r4, r5, r6, pc}

0800c72c <__match>:
 800c72c:	b530      	push	{r4, r5, lr}
 800c72e:	6803      	ldr	r3, [r0, #0]
 800c730:	3301      	adds	r3, #1
 800c732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c736:	b914      	cbnz	r4, 800c73e <__match+0x12>
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	2001      	movs	r0, #1
 800c73c:	bd30      	pop	{r4, r5, pc}
 800c73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c742:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c746:	2d19      	cmp	r5, #25
 800c748:	bf98      	it	ls
 800c74a:	3220      	addls	r2, #32
 800c74c:	42a2      	cmp	r2, r4
 800c74e:	d0f0      	beq.n	800c732 <__match+0x6>
 800c750:	2000      	movs	r0, #0
 800c752:	e7f3      	b.n	800c73c <__match+0x10>

0800c754 <__hexnan>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	680b      	ldr	r3, [r1, #0]
 800c75a:	6801      	ldr	r1, [r0, #0]
 800c75c:	115e      	asrs	r6, r3, #5
 800c75e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c762:	f013 031f 	ands.w	r3, r3, #31
 800c766:	b087      	sub	sp, #28
 800c768:	bf18      	it	ne
 800c76a:	3604      	addne	r6, #4
 800c76c:	2500      	movs	r5, #0
 800c76e:	1f37      	subs	r7, r6, #4
 800c770:	4682      	mov	sl, r0
 800c772:	4690      	mov	r8, r2
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	f846 5c04 	str.w	r5, [r6, #-4]
 800c77a:	46b9      	mov	r9, r7
 800c77c:	463c      	mov	r4, r7
 800c77e:	9502      	str	r5, [sp, #8]
 800c780:	46ab      	mov	fp, r5
 800c782:	784a      	ldrb	r2, [r1, #1]
 800c784:	1c4b      	adds	r3, r1, #1
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	b342      	cbz	r2, 800c7dc <__hexnan+0x88>
 800c78a:	4610      	mov	r0, r2
 800c78c:	9105      	str	r1, [sp, #20]
 800c78e:	9204      	str	r2, [sp, #16]
 800c790:	f7ff fd5f 	bl	800c252 <__hexdig_fun>
 800c794:	2800      	cmp	r0, #0
 800c796:	d14f      	bne.n	800c838 <__hexnan+0xe4>
 800c798:	9a04      	ldr	r2, [sp, #16]
 800c79a:	9905      	ldr	r1, [sp, #20]
 800c79c:	2a20      	cmp	r2, #32
 800c79e:	d818      	bhi.n	800c7d2 <__hexnan+0x7e>
 800c7a0:	9b02      	ldr	r3, [sp, #8]
 800c7a2:	459b      	cmp	fp, r3
 800c7a4:	dd13      	ble.n	800c7ce <__hexnan+0x7a>
 800c7a6:	454c      	cmp	r4, r9
 800c7a8:	d206      	bcs.n	800c7b8 <__hexnan+0x64>
 800c7aa:	2d07      	cmp	r5, #7
 800c7ac:	dc04      	bgt.n	800c7b8 <__hexnan+0x64>
 800c7ae:	462a      	mov	r2, r5
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7ff ffa8 	bl	800c708 <L_shift>
 800c7b8:	4544      	cmp	r4, r8
 800c7ba:	d950      	bls.n	800c85e <__hexnan+0x10a>
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f1a4 0904 	sub.w	r9, r4, #4
 800c7c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7c6:	f8cd b008 	str.w	fp, [sp, #8]
 800c7ca:	464c      	mov	r4, r9
 800c7cc:	461d      	mov	r5, r3
 800c7ce:	9903      	ldr	r1, [sp, #12]
 800c7d0:	e7d7      	b.n	800c782 <__hexnan+0x2e>
 800c7d2:	2a29      	cmp	r2, #41	; 0x29
 800c7d4:	d156      	bne.n	800c884 <__hexnan+0x130>
 800c7d6:	3102      	adds	r1, #2
 800c7d8:	f8ca 1000 	str.w	r1, [sl]
 800c7dc:	f1bb 0f00 	cmp.w	fp, #0
 800c7e0:	d050      	beq.n	800c884 <__hexnan+0x130>
 800c7e2:	454c      	cmp	r4, r9
 800c7e4:	d206      	bcs.n	800c7f4 <__hexnan+0xa0>
 800c7e6:	2d07      	cmp	r5, #7
 800c7e8:	dc04      	bgt.n	800c7f4 <__hexnan+0xa0>
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f7ff ff8a 	bl	800c708 <L_shift>
 800c7f4:	4544      	cmp	r4, r8
 800c7f6:	d934      	bls.n	800c862 <__hexnan+0x10e>
 800c7f8:	f1a8 0204 	sub.w	r2, r8, #4
 800c7fc:	4623      	mov	r3, r4
 800c7fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800c802:	f842 1f04 	str.w	r1, [r2, #4]!
 800c806:	429f      	cmp	r7, r3
 800c808:	d2f9      	bcs.n	800c7fe <__hexnan+0xaa>
 800c80a:	1b3b      	subs	r3, r7, r4
 800c80c:	f023 0303 	bic.w	r3, r3, #3
 800c810:	3304      	adds	r3, #4
 800c812:	3401      	adds	r4, #1
 800c814:	3e03      	subs	r6, #3
 800c816:	42b4      	cmp	r4, r6
 800c818:	bf88      	it	hi
 800c81a:	2304      	movhi	r3, #4
 800c81c:	4443      	add	r3, r8
 800c81e:	2200      	movs	r2, #0
 800c820:	f843 2b04 	str.w	r2, [r3], #4
 800c824:	429f      	cmp	r7, r3
 800c826:	d2fb      	bcs.n	800c820 <__hexnan+0xcc>
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	b91b      	cbnz	r3, 800c834 <__hexnan+0xe0>
 800c82c:	4547      	cmp	r7, r8
 800c82e:	d127      	bne.n	800c880 <__hexnan+0x12c>
 800c830:	2301      	movs	r3, #1
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	2005      	movs	r0, #5
 800c836:	e026      	b.n	800c886 <__hexnan+0x132>
 800c838:	3501      	adds	r5, #1
 800c83a:	2d08      	cmp	r5, #8
 800c83c:	f10b 0b01 	add.w	fp, fp, #1
 800c840:	dd06      	ble.n	800c850 <__hexnan+0xfc>
 800c842:	4544      	cmp	r4, r8
 800c844:	d9c3      	bls.n	800c7ce <__hexnan+0x7a>
 800c846:	2300      	movs	r3, #0
 800c848:	f844 3c04 	str.w	r3, [r4, #-4]
 800c84c:	2501      	movs	r5, #1
 800c84e:	3c04      	subs	r4, #4
 800c850:	6822      	ldr	r2, [r4, #0]
 800c852:	f000 000f 	and.w	r0, r0, #15
 800c856:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c85a:	6022      	str	r2, [r4, #0]
 800c85c:	e7b7      	b.n	800c7ce <__hexnan+0x7a>
 800c85e:	2508      	movs	r5, #8
 800c860:	e7b5      	b.n	800c7ce <__hexnan+0x7a>
 800c862:	9b01      	ldr	r3, [sp, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d0df      	beq.n	800c828 <__hexnan+0xd4>
 800c868:	f04f 32ff 	mov.w	r2, #4294967295
 800c86c:	f1c3 0320 	rsb	r3, r3, #32
 800c870:	fa22 f303 	lsr.w	r3, r2, r3
 800c874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c878:	401a      	ands	r2, r3
 800c87a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c87e:	e7d3      	b.n	800c828 <__hexnan+0xd4>
 800c880:	3f04      	subs	r7, #4
 800c882:	e7d1      	b.n	800c828 <__hexnan+0xd4>
 800c884:	2004      	movs	r0, #4
 800c886:	b007      	add	sp, #28
 800c888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c88c <_localeconv_r>:
 800c88c:	4800      	ldr	r0, [pc, #0]	; (800c890 <_localeconv_r+0x4>)
 800c88e:	4770      	bx	lr
 800c890:	20000184 	.word	0x20000184

0800c894 <__retarget_lock_init_recursive>:
 800c894:	4770      	bx	lr

0800c896 <__retarget_lock_acquire_recursive>:
 800c896:	4770      	bx	lr

0800c898 <__retarget_lock_release_recursive>:
 800c898:	4770      	bx	lr

0800c89a <__swhatbuf_r>:
 800c89a:	b570      	push	{r4, r5, r6, lr}
 800c89c:	460e      	mov	r6, r1
 800c89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a2:	2900      	cmp	r1, #0
 800c8a4:	b096      	sub	sp, #88	; 0x58
 800c8a6:	4614      	mov	r4, r2
 800c8a8:	461d      	mov	r5, r3
 800c8aa:	da07      	bge.n	800c8bc <__swhatbuf_r+0x22>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	602b      	str	r3, [r5, #0]
 800c8b0:	89b3      	ldrh	r3, [r6, #12]
 800c8b2:	061a      	lsls	r2, r3, #24
 800c8b4:	d410      	bmi.n	800c8d8 <__swhatbuf_r+0x3e>
 800c8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ba:	e00e      	b.n	800c8da <__swhatbuf_r+0x40>
 800c8bc:	466a      	mov	r2, sp
 800c8be:	f001 f84f 	bl	800d960 <_fstat_r>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	dbf2      	blt.n	800c8ac <__swhatbuf_r+0x12>
 800c8c6:	9a01      	ldr	r2, [sp, #4]
 800c8c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c8d0:	425a      	negs	r2, r3
 800c8d2:	415a      	adcs	r2, r3
 800c8d4:	602a      	str	r2, [r5, #0]
 800c8d6:	e7ee      	b.n	800c8b6 <__swhatbuf_r+0x1c>
 800c8d8:	2340      	movs	r3, #64	; 0x40
 800c8da:	2000      	movs	r0, #0
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	b016      	add	sp, #88	; 0x58
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c8e4 <__smakebuf_r>:
 800c8e4:	898b      	ldrh	r3, [r1, #12]
 800c8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8e8:	079d      	lsls	r5, r3, #30
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	d507      	bpl.n	800c900 <__smakebuf_r+0x1c>
 800c8f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	6123      	str	r3, [r4, #16]
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	6163      	str	r3, [r4, #20]
 800c8fc:	b002      	add	sp, #8
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	ab01      	add	r3, sp, #4
 800c902:	466a      	mov	r2, sp
 800c904:	f7ff ffc9 	bl	800c89a <__swhatbuf_r>
 800c908:	9900      	ldr	r1, [sp, #0]
 800c90a:	4605      	mov	r5, r0
 800c90c:	4630      	mov	r0, r6
 800c90e:	f000 fd5d 	bl	800d3cc <_malloc_r>
 800c912:	b948      	cbnz	r0, 800c928 <__smakebuf_r+0x44>
 800c914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c918:	059a      	lsls	r2, r3, #22
 800c91a:	d4ef      	bmi.n	800c8fc <__smakebuf_r+0x18>
 800c91c:	f023 0303 	bic.w	r3, r3, #3
 800c920:	f043 0302 	orr.w	r3, r3, #2
 800c924:	81a3      	strh	r3, [r4, #12]
 800c926:	e7e3      	b.n	800c8f0 <__smakebuf_r+0xc>
 800c928:	4b0d      	ldr	r3, [pc, #52]	; (800c960 <__smakebuf_r+0x7c>)
 800c92a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c92c:	89a3      	ldrh	r3, [r4, #12]
 800c92e:	6020      	str	r0, [r4, #0]
 800c930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c934:	81a3      	strh	r3, [r4, #12]
 800c936:	9b00      	ldr	r3, [sp, #0]
 800c938:	6163      	str	r3, [r4, #20]
 800c93a:	9b01      	ldr	r3, [sp, #4]
 800c93c:	6120      	str	r0, [r4, #16]
 800c93e:	b15b      	cbz	r3, 800c958 <__smakebuf_r+0x74>
 800c940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c944:	4630      	mov	r0, r6
 800c946:	f001 f81d 	bl	800d984 <_isatty_r>
 800c94a:	b128      	cbz	r0, 800c958 <__smakebuf_r+0x74>
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	f023 0303 	bic.w	r3, r3, #3
 800c952:	f043 0301 	orr.w	r3, r3, #1
 800c956:	81a3      	strh	r3, [r4, #12]
 800c958:	89a0      	ldrh	r0, [r4, #12]
 800c95a:	4305      	orrs	r5, r0
 800c95c:	81a5      	strh	r5, [r4, #12]
 800c95e:	e7cd      	b.n	800c8fc <__smakebuf_r+0x18>
 800c960:	0800c00d 	.word	0x0800c00d

0800c964 <malloc>:
 800c964:	4b02      	ldr	r3, [pc, #8]	; (800c970 <malloc+0xc>)
 800c966:	4601      	mov	r1, r0
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	f000 bd2f 	b.w	800d3cc <_malloc_r>
 800c96e:	bf00      	nop
 800c970:	2000002c 	.word	0x2000002c

0800c974 <__ascii_mbtowc>:
 800c974:	b082      	sub	sp, #8
 800c976:	b901      	cbnz	r1, 800c97a <__ascii_mbtowc+0x6>
 800c978:	a901      	add	r1, sp, #4
 800c97a:	b142      	cbz	r2, 800c98e <__ascii_mbtowc+0x1a>
 800c97c:	b14b      	cbz	r3, 800c992 <__ascii_mbtowc+0x1e>
 800c97e:	7813      	ldrb	r3, [r2, #0]
 800c980:	600b      	str	r3, [r1, #0]
 800c982:	7812      	ldrb	r2, [r2, #0]
 800c984:	1e10      	subs	r0, r2, #0
 800c986:	bf18      	it	ne
 800c988:	2001      	movne	r0, #1
 800c98a:	b002      	add	sp, #8
 800c98c:	4770      	bx	lr
 800c98e:	4610      	mov	r0, r2
 800c990:	e7fb      	b.n	800c98a <__ascii_mbtowc+0x16>
 800c992:	f06f 0001 	mvn.w	r0, #1
 800c996:	e7f8      	b.n	800c98a <__ascii_mbtowc+0x16>

0800c998 <_Balloc>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c99c:	4604      	mov	r4, r0
 800c99e:	460d      	mov	r5, r1
 800c9a0:	b976      	cbnz	r6, 800c9c0 <_Balloc+0x28>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f7ff ffde 	bl	800c964 <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6260      	str	r0, [r4, #36]	; 0x24
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_Balloc+0x20>
 800c9ae:	4b18      	ldr	r3, [pc, #96]	; (800ca10 <_Balloc+0x78>)
 800c9b0:	4818      	ldr	r0, [pc, #96]	; (800ca14 <_Balloc+0x7c>)
 800c9b2:	2166      	movs	r1, #102	; 0x66
 800c9b4:	f000 ff94 	bl	800d8e0 <__assert_func>
 800c9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9bc:	6006      	str	r6, [r0, #0]
 800c9be:	60c6      	str	r6, [r0, #12]
 800c9c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9c2:	68f3      	ldr	r3, [r6, #12]
 800c9c4:	b183      	cbz	r3, 800c9e8 <_Balloc+0x50>
 800c9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ce:	b9b8      	cbnz	r0, 800ca00 <_Balloc+0x68>
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	fa01 f605 	lsl.w	r6, r1, r5
 800c9d6:	1d72      	adds	r2, r6, #5
 800c9d8:	0092      	lsls	r2, r2, #2
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f000 fc97 	bl	800d30e <_calloc_r>
 800c9e0:	b160      	cbz	r0, 800c9fc <_Balloc+0x64>
 800c9e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9e6:	e00e      	b.n	800ca06 <_Balloc+0x6e>
 800c9e8:	2221      	movs	r2, #33	; 0x21
 800c9ea:	2104      	movs	r1, #4
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f000 fc8e 	bl	800d30e <_calloc_r>
 800c9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9f4:	60f0      	str	r0, [r6, #12]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e4      	bne.n	800c9c6 <_Balloc+0x2e>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	6802      	ldr	r2, [r0, #0]
 800ca02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca06:	2300      	movs	r3, #0
 800ca08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca0c:	e7f7      	b.n	800c9fe <_Balloc+0x66>
 800ca0e:	bf00      	nop
 800ca10:	0800f6be 	.word	0x0800f6be
 800ca14:	0800f828 	.word	0x0800f828

0800ca18 <_Bfree>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	b976      	cbnz	r6, 800ca40 <_Bfree+0x28>
 800ca22:	2010      	movs	r0, #16
 800ca24:	f7ff ff9e 	bl	800c964 <malloc>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	6268      	str	r0, [r5, #36]	; 0x24
 800ca2c:	b920      	cbnz	r0, 800ca38 <_Bfree+0x20>
 800ca2e:	4b09      	ldr	r3, [pc, #36]	; (800ca54 <_Bfree+0x3c>)
 800ca30:	4809      	ldr	r0, [pc, #36]	; (800ca58 <_Bfree+0x40>)
 800ca32:	218a      	movs	r1, #138	; 0x8a
 800ca34:	f000 ff54 	bl	800d8e0 <__assert_func>
 800ca38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca3c:	6006      	str	r6, [r0, #0]
 800ca3e:	60c6      	str	r6, [r0, #12]
 800ca40:	b13c      	cbz	r4, 800ca52 <_Bfree+0x3a>
 800ca42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca44:	6862      	ldr	r2, [r4, #4]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca4c:	6021      	str	r1, [r4, #0]
 800ca4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	0800f6be 	.word	0x0800f6be
 800ca58:	0800f828 	.word	0x0800f828

0800ca5c <__multadd>:
 800ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca60:	690e      	ldr	r6, [r1, #16]
 800ca62:	4607      	mov	r7, r0
 800ca64:	4698      	mov	r8, r3
 800ca66:	460c      	mov	r4, r1
 800ca68:	f101 0014 	add.w	r0, r1, #20
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6805      	ldr	r5, [r0, #0]
 800ca70:	b2a9      	uxth	r1, r5
 800ca72:	fb02 8101 	mla	r1, r2, r1, r8
 800ca76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ca7a:	0c2d      	lsrs	r5, r5, #16
 800ca7c:	fb02 c505 	mla	r5, r2, r5, ip
 800ca80:	b289      	uxth	r1, r1
 800ca82:	3301      	adds	r3, #1
 800ca84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ca88:	429e      	cmp	r6, r3
 800ca8a:	f840 1b04 	str.w	r1, [r0], #4
 800ca8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ca92:	dcec      	bgt.n	800ca6e <__multadd+0x12>
 800ca94:	f1b8 0f00 	cmp.w	r8, #0
 800ca98:	d022      	beq.n	800cae0 <__multadd+0x84>
 800ca9a:	68a3      	ldr	r3, [r4, #8]
 800ca9c:	42b3      	cmp	r3, r6
 800ca9e:	dc19      	bgt.n	800cad4 <__multadd+0x78>
 800caa0:	6861      	ldr	r1, [r4, #4]
 800caa2:	4638      	mov	r0, r7
 800caa4:	3101      	adds	r1, #1
 800caa6:	f7ff ff77 	bl	800c998 <_Balloc>
 800caaa:	4605      	mov	r5, r0
 800caac:	b928      	cbnz	r0, 800caba <__multadd+0x5e>
 800caae:	4602      	mov	r2, r0
 800cab0:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <__multadd+0x8c>)
 800cab2:	480e      	ldr	r0, [pc, #56]	; (800caec <__multadd+0x90>)
 800cab4:	21b5      	movs	r1, #181	; 0xb5
 800cab6:	f000 ff13 	bl	800d8e0 <__assert_func>
 800caba:	6922      	ldr	r2, [r4, #16]
 800cabc:	3202      	adds	r2, #2
 800cabe:	f104 010c 	add.w	r1, r4, #12
 800cac2:	0092      	lsls	r2, r2, #2
 800cac4:	300c      	adds	r0, #12
 800cac6:	f7fc fe85 	bl	80097d4 <memcpy>
 800caca:	4621      	mov	r1, r4
 800cacc:	4638      	mov	r0, r7
 800cace:	f7ff ffa3 	bl	800ca18 <_Bfree>
 800cad2:	462c      	mov	r4, r5
 800cad4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cad8:	3601      	adds	r6, #1
 800cada:	f8c3 8014 	str.w	r8, [r3, #20]
 800cade:	6126      	str	r6, [r4, #16]
 800cae0:	4620      	mov	r0, r4
 800cae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae6:	bf00      	nop
 800cae8:	0800f734 	.word	0x0800f734
 800caec:	0800f828 	.word	0x0800f828

0800caf0 <__s2b>:
 800caf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf4:	460c      	mov	r4, r1
 800caf6:	4615      	mov	r5, r2
 800caf8:	461f      	mov	r7, r3
 800cafa:	2209      	movs	r2, #9
 800cafc:	3308      	adds	r3, #8
 800cafe:	4606      	mov	r6, r0
 800cb00:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb04:	2100      	movs	r1, #0
 800cb06:	2201      	movs	r2, #1
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	db09      	blt.n	800cb20 <__s2b+0x30>
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f7ff ff43 	bl	800c998 <_Balloc>
 800cb12:	b940      	cbnz	r0, 800cb26 <__s2b+0x36>
 800cb14:	4602      	mov	r2, r0
 800cb16:	4b19      	ldr	r3, [pc, #100]	; (800cb7c <__s2b+0x8c>)
 800cb18:	4819      	ldr	r0, [pc, #100]	; (800cb80 <__s2b+0x90>)
 800cb1a:	21ce      	movs	r1, #206	; 0xce
 800cb1c:	f000 fee0 	bl	800d8e0 <__assert_func>
 800cb20:	0052      	lsls	r2, r2, #1
 800cb22:	3101      	adds	r1, #1
 800cb24:	e7f0      	b.n	800cb08 <__s2b+0x18>
 800cb26:	9b08      	ldr	r3, [sp, #32]
 800cb28:	6143      	str	r3, [r0, #20]
 800cb2a:	2d09      	cmp	r5, #9
 800cb2c:	f04f 0301 	mov.w	r3, #1
 800cb30:	6103      	str	r3, [r0, #16]
 800cb32:	dd16      	ble.n	800cb62 <__s2b+0x72>
 800cb34:	f104 0909 	add.w	r9, r4, #9
 800cb38:	46c8      	mov	r8, r9
 800cb3a:	442c      	add	r4, r5
 800cb3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb40:	4601      	mov	r1, r0
 800cb42:	3b30      	subs	r3, #48	; 0x30
 800cb44:	220a      	movs	r2, #10
 800cb46:	4630      	mov	r0, r6
 800cb48:	f7ff ff88 	bl	800ca5c <__multadd>
 800cb4c:	45a0      	cmp	r8, r4
 800cb4e:	d1f5      	bne.n	800cb3c <__s2b+0x4c>
 800cb50:	f1a5 0408 	sub.w	r4, r5, #8
 800cb54:	444c      	add	r4, r9
 800cb56:	1b2d      	subs	r5, r5, r4
 800cb58:	1963      	adds	r3, r4, r5
 800cb5a:	42bb      	cmp	r3, r7
 800cb5c:	db04      	blt.n	800cb68 <__s2b+0x78>
 800cb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb62:	340a      	adds	r4, #10
 800cb64:	2509      	movs	r5, #9
 800cb66:	e7f6      	b.n	800cb56 <__s2b+0x66>
 800cb68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb6c:	4601      	mov	r1, r0
 800cb6e:	3b30      	subs	r3, #48	; 0x30
 800cb70:	220a      	movs	r2, #10
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7ff ff72 	bl	800ca5c <__multadd>
 800cb78:	e7ee      	b.n	800cb58 <__s2b+0x68>
 800cb7a:	bf00      	nop
 800cb7c:	0800f734 	.word	0x0800f734
 800cb80:	0800f828 	.word	0x0800f828

0800cb84 <__hi0bits>:
 800cb84:	0c03      	lsrs	r3, r0, #16
 800cb86:	041b      	lsls	r3, r3, #16
 800cb88:	b9d3      	cbnz	r3, 800cbc0 <__hi0bits+0x3c>
 800cb8a:	0400      	lsls	r0, r0, #16
 800cb8c:	2310      	movs	r3, #16
 800cb8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb92:	bf04      	itt	eq
 800cb94:	0200      	lsleq	r0, r0, #8
 800cb96:	3308      	addeq	r3, #8
 800cb98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb9c:	bf04      	itt	eq
 800cb9e:	0100      	lsleq	r0, r0, #4
 800cba0:	3304      	addeq	r3, #4
 800cba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cba6:	bf04      	itt	eq
 800cba8:	0080      	lsleq	r0, r0, #2
 800cbaa:	3302      	addeq	r3, #2
 800cbac:	2800      	cmp	r0, #0
 800cbae:	db05      	blt.n	800cbbc <__hi0bits+0x38>
 800cbb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cbb4:	f103 0301 	add.w	r3, r3, #1
 800cbb8:	bf08      	it	eq
 800cbba:	2320      	moveq	r3, #32
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	4770      	bx	lr
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e7e4      	b.n	800cb8e <__hi0bits+0xa>

0800cbc4 <__lo0bits>:
 800cbc4:	6803      	ldr	r3, [r0, #0]
 800cbc6:	f013 0207 	ands.w	r2, r3, #7
 800cbca:	4601      	mov	r1, r0
 800cbcc:	d00b      	beq.n	800cbe6 <__lo0bits+0x22>
 800cbce:	07da      	lsls	r2, r3, #31
 800cbd0:	d424      	bmi.n	800cc1c <__lo0bits+0x58>
 800cbd2:	0798      	lsls	r0, r3, #30
 800cbd4:	bf49      	itett	mi
 800cbd6:	085b      	lsrmi	r3, r3, #1
 800cbd8:	089b      	lsrpl	r3, r3, #2
 800cbda:	2001      	movmi	r0, #1
 800cbdc:	600b      	strmi	r3, [r1, #0]
 800cbde:	bf5c      	itt	pl
 800cbe0:	600b      	strpl	r3, [r1, #0]
 800cbe2:	2002      	movpl	r0, #2
 800cbe4:	4770      	bx	lr
 800cbe6:	b298      	uxth	r0, r3
 800cbe8:	b9b0      	cbnz	r0, 800cc18 <__lo0bits+0x54>
 800cbea:	0c1b      	lsrs	r3, r3, #16
 800cbec:	2010      	movs	r0, #16
 800cbee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cbf2:	bf04      	itt	eq
 800cbf4:	0a1b      	lsreq	r3, r3, #8
 800cbf6:	3008      	addeq	r0, #8
 800cbf8:	071a      	lsls	r2, r3, #28
 800cbfa:	bf04      	itt	eq
 800cbfc:	091b      	lsreq	r3, r3, #4
 800cbfe:	3004      	addeq	r0, #4
 800cc00:	079a      	lsls	r2, r3, #30
 800cc02:	bf04      	itt	eq
 800cc04:	089b      	lsreq	r3, r3, #2
 800cc06:	3002      	addeq	r0, #2
 800cc08:	07da      	lsls	r2, r3, #31
 800cc0a:	d403      	bmi.n	800cc14 <__lo0bits+0x50>
 800cc0c:	085b      	lsrs	r3, r3, #1
 800cc0e:	f100 0001 	add.w	r0, r0, #1
 800cc12:	d005      	beq.n	800cc20 <__lo0bits+0x5c>
 800cc14:	600b      	str	r3, [r1, #0]
 800cc16:	4770      	bx	lr
 800cc18:	4610      	mov	r0, r2
 800cc1a:	e7e8      	b.n	800cbee <__lo0bits+0x2a>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	4770      	bx	lr
 800cc20:	2020      	movs	r0, #32
 800cc22:	4770      	bx	lr

0800cc24 <__i2b>:
 800cc24:	b510      	push	{r4, lr}
 800cc26:	460c      	mov	r4, r1
 800cc28:	2101      	movs	r1, #1
 800cc2a:	f7ff feb5 	bl	800c998 <_Balloc>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	b928      	cbnz	r0, 800cc3e <__i2b+0x1a>
 800cc32:	4b05      	ldr	r3, [pc, #20]	; (800cc48 <__i2b+0x24>)
 800cc34:	4805      	ldr	r0, [pc, #20]	; (800cc4c <__i2b+0x28>)
 800cc36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cc3a:	f000 fe51 	bl	800d8e0 <__assert_func>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	6144      	str	r4, [r0, #20]
 800cc42:	6103      	str	r3, [r0, #16]
 800cc44:	bd10      	pop	{r4, pc}
 800cc46:	bf00      	nop
 800cc48:	0800f734 	.word	0x0800f734
 800cc4c:	0800f828 	.word	0x0800f828

0800cc50 <__multiply>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	4614      	mov	r4, r2
 800cc56:	690a      	ldr	r2, [r1, #16]
 800cc58:	6923      	ldr	r3, [r4, #16]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	bfb8      	it	lt
 800cc5e:	460b      	movlt	r3, r1
 800cc60:	460d      	mov	r5, r1
 800cc62:	bfbc      	itt	lt
 800cc64:	4625      	movlt	r5, r4
 800cc66:	461c      	movlt	r4, r3
 800cc68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cc6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cc70:	68ab      	ldr	r3, [r5, #8]
 800cc72:	6869      	ldr	r1, [r5, #4]
 800cc74:	eb0a 0709 	add.w	r7, sl, r9
 800cc78:	42bb      	cmp	r3, r7
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	bfb8      	it	lt
 800cc7e:	3101      	addlt	r1, #1
 800cc80:	f7ff fe8a 	bl	800c998 <_Balloc>
 800cc84:	b930      	cbnz	r0, 800cc94 <__multiply+0x44>
 800cc86:	4602      	mov	r2, r0
 800cc88:	4b42      	ldr	r3, [pc, #264]	; (800cd94 <__multiply+0x144>)
 800cc8a:	4843      	ldr	r0, [pc, #268]	; (800cd98 <__multiply+0x148>)
 800cc8c:	f240 115d 	movw	r1, #349	; 0x15d
 800cc90:	f000 fe26 	bl	800d8e0 <__assert_func>
 800cc94:	f100 0614 	add.w	r6, r0, #20
 800cc98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cc9c:	4633      	mov	r3, r6
 800cc9e:	2200      	movs	r2, #0
 800cca0:	4543      	cmp	r3, r8
 800cca2:	d31e      	bcc.n	800cce2 <__multiply+0x92>
 800cca4:	f105 0c14 	add.w	ip, r5, #20
 800cca8:	f104 0314 	add.w	r3, r4, #20
 800ccac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ccb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ccb4:	9202      	str	r2, [sp, #8]
 800ccb6:	ebac 0205 	sub.w	r2, ip, r5
 800ccba:	3a15      	subs	r2, #21
 800ccbc:	f022 0203 	bic.w	r2, r2, #3
 800ccc0:	3204      	adds	r2, #4
 800ccc2:	f105 0115 	add.w	r1, r5, #21
 800ccc6:	458c      	cmp	ip, r1
 800ccc8:	bf38      	it	cc
 800ccca:	2204      	movcc	r2, #4
 800cccc:	9201      	str	r2, [sp, #4]
 800ccce:	9a02      	ldr	r2, [sp, #8]
 800ccd0:	9303      	str	r3, [sp, #12]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d808      	bhi.n	800cce8 <__multiply+0x98>
 800ccd6:	2f00      	cmp	r7, #0
 800ccd8:	dc55      	bgt.n	800cd86 <__multiply+0x136>
 800ccda:	6107      	str	r7, [r0, #16]
 800ccdc:	b005      	add	sp, #20
 800ccde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce2:	f843 2b04 	str.w	r2, [r3], #4
 800cce6:	e7db      	b.n	800cca0 <__multiply+0x50>
 800cce8:	f8b3 a000 	ldrh.w	sl, [r3]
 800ccec:	f1ba 0f00 	cmp.w	sl, #0
 800ccf0:	d020      	beq.n	800cd34 <__multiply+0xe4>
 800ccf2:	f105 0e14 	add.w	lr, r5, #20
 800ccf6:	46b1      	mov	r9, r6
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ccfe:	f8d9 b000 	ldr.w	fp, [r9]
 800cd02:	b2a1      	uxth	r1, r4
 800cd04:	fa1f fb8b 	uxth.w	fp, fp
 800cd08:	fb0a b101 	mla	r1, sl, r1, fp
 800cd0c:	4411      	add	r1, r2
 800cd0e:	f8d9 2000 	ldr.w	r2, [r9]
 800cd12:	0c24      	lsrs	r4, r4, #16
 800cd14:	0c12      	lsrs	r2, r2, #16
 800cd16:	fb0a 2404 	mla	r4, sl, r4, r2
 800cd1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cd1e:	b289      	uxth	r1, r1
 800cd20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cd24:	45f4      	cmp	ip, lr
 800cd26:	f849 1b04 	str.w	r1, [r9], #4
 800cd2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cd2e:	d8e4      	bhi.n	800ccfa <__multiply+0xaa>
 800cd30:	9901      	ldr	r1, [sp, #4]
 800cd32:	5072      	str	r2, [r6, r1]
 800cd34:	9a03      	ldr	r2, [sp, #12]
 800cd36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd3a:	3304      	adds	r3, #4
 800cd3c:	f1b9 0f00 	cmp.w	r9, #0
 800cd40:	d01f      	beq.n	800cd82 <__multiply+0x132>
 800cd42:	6834      	ldr	r4, [r6, #0]
 800cd44:	f105 0114 	add.w	r1, r5, #20
 800cd48:	46b6      	mov	lr, r6
 800cd4a:	f04f 0a00 	mov.w	sl, #0
 800cd4e:	880a      	ldrh	r2, [r1, #0]
 800cd50:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cd54:	fb09 b202 	mla	r2, r9, r2, fp
 800cd58:	4492      	add	sl, r2
 800cd5a:	b2a4      	uxth	r4, r4
 800cd5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cd60:	f84e 4b04 	str.w	r4, [lr], #4
 800cd64:	f851 4b04 	ldr.w	r4, [r1], #4
 800cd68:	f8be 2000 	ldrh.w	r2, [lr]
 800cd6c:	0c24      	lsrs	r4, r4, #16
 800cd6e:	fb09 2404 	mla	r4, r9, r4, r2
 800cd72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cd76:	458c      	cmp	ip, r1
 800cd78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cd7c:	d8e7      	bhi.n	800cd4e <__multiply+0xfe>
 800cd7e:	9a01      	ldr	r2, [sp, #4]
 800cd80:	50b4      	str	r4, [r6, r2]
 800cd82:	3604      	adds	r6, #4
 800cd84:	e7a3      	b.n	800ccce <__multiply+0x7e>
 800cd86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1a5      	bne.n	800ccda <__multiply+0x8a>
 800cd8e:	3f01      	subs	r7, #1
 800cd90:	e7a1      	b.n	800ccd6 <__multiply+0x86>
 800cd92:	bf00      	nop
 800cd94:	0800f734 	.word	0x0800f734
 800cd98:	0800f828 	.word	0x0800f828

0800cd9c <__pow5mult>:
 800cd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda0:	4615      	mov	r5, r2
 800cda2:	f012 0203 	ands.w	r2, r2, #3
 800cda6:	4606      	mov	r6, r0
 800cda8:	460f      	mov	r7, r1
 800cdaa:	d007      	beq.n	800cdbc <__pow5mult+0x20>
 800cdac:	4c25      	ldr	r4, [pc, #148]	; (800ce44 <__pow5mult+0xa8>)
 800cdae:	3a01      	subs	r2, #1
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdb6:	f7ff fe51 	bl	800ca5c <__multadd>
 800cdba:	4607      	mov	r7, r0
 800cdbc:	10ad      	asrs	r5, r5, #2
 800cdbe:	d03d      	beq.n	800ce3c <__pow5mult+0xa0>
 800cdc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cdc2:	b97c      	cbnz	r4, 800cde4 <__pow5mult+0x48>
 800cdc4:	2010      	movs	r0, #16
 800cdc6:	f7ff fdcd 	bl	800c964 <malloc>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	6270      	str	r0, [r6, #36]	; 0x24
 800cdce:	b928      	cbnz	r0, 800cddc <__pow5mult+0x40>
 800cdd0:	4b1d      	ldr	r3, [pc, #116]	; (800ce48 <__pow5mult+0xac>)
 800cdd2:	481e      	ldr	r0, [pc, #120]	; (800ce4c <__pow5mult+0xb0>)
 800cdd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cdd8:	f000 fd82 	bl	800d8e0 <__assert_func>
 800cddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cde0:	6004      	str	r4, [r0, #0]
 800cde2:	60c4      	str	r4, [r0, #12]
 800cde4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cde8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdec:	b94c      	cbnz	r4, 800ce02 <__pow5mult+0x66>
 800cdee:	f240 2171 	movw	r1, #625	; 0x271
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7ff ff16 	bl	800cc24 <__i2b>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdfe:	4604      	mov	r4, r0
 800ce00:	6003      	str	r3, [r0, #0]
 800ce02:	f04f 0900 	mov.w	r9, #0
 800ce06:	07eb      	lsls	r3, r5, #31
 800ce08:	d50a      	bpl.n	800ce20 <__pow5mult+0x84>
 800ce0a:	4639      	mov	r1, r7
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f7ff ff1e 	bl	800cc50 <__multiply>
 800ce14:	4639      	mov	r1, r7
 800ce16:	4680      	mov	r8, r0
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7ff fdfd 	bl	800ca18 <_Bfree>
 800ce1e:	4647      	mov	r7, r8
 800ce20:	106d      	asrs	r5, r5, #1
 800ce22:	d00b      	beq.n	800ce3c <__pow5mult+0xa0>
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	b938      	cbnz	r0, 800ce38 <__pow5mult+0x9c>
 800ce28:	4622      	mov	r2, r4
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f7ff ff0f 	bl	800cc50 <__multiply>
 800ce32:	6020      	str	r0, [r4, #0]
 800ce34:	f8c0 9000 	str.w	r9, [r0]
 800ce38:	4604      	mov	r4, r0
 800ce3a:	e7e4      	b.n	800ce06 <__pow5mult+0x6a>
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce42:	bf00      	nop
 800ce44:	0800f978 	.word	0x0800f978
 800ce48:	0800f6be 	.word	0x0800f6be
 800ce4c:	0800f828 	.word	0x0800f828

0800ce50 <__lshift>:
 800ce50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	460c      	mov	r4, r1
 800ce56:	6849      	ldr	r1, [r1, #4]
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce5e:	68a3      	ldr	r3, [r4, #8]
 800ce60:	4607      	mov	r7, r0
 800ce62:	4691      	mov	r9, r2
 800ce64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce68:	f108 0601 	add.w	r6, r8, #1
 800ce6c:	42b3      	cmp	r3, r6
 800ce6e:	db0b      	blt.n	800ce88 <__lshift+0x38>
 800ce70:	4638      	mov	r0, r7
 800ce72:	f7ff fd91 	bl	800c998 <_Balloc>
 800ce76:	4605      	mov	r5, r0
 800ce78:	b948      	cbnz	r0, 800ce8e <__lshift+0x3e>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	4b28      	ldr	r3, [pc, #160]	; (800cf20 <__lshift+0xd0>)
 800ce7e:	4829      	ldr	r0, [pc, #164]	; (800cf24 <__lshift+0xd4>)
 800ce80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ce84:	f000 fd2c 	bl	800d8e0 <__assert_func>
 800ce88:	3101      	adds	r1, #1
 800ce8a:	005b      	lsls	r3, r3, #1
 800ce8c:	e7ee      	b.n	800ce6c <__lshift+0x1c>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f100 0114 	add.w	r1, r0, #20
 800ce94:	f100 0210 	add.w	r2, r0, #16
 800ce98:	4618      	mov	r0, r3
 800ce9a:	4553      	cmp	r3, sl
 800ce9c:	db33      	blt.n	800cf06 <__lshift+0xb6>
 800ce9e:	6920      	ldr	r0, [r4, #16]
 800cea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cea4:	f104 0314 	add.w	r3, r4, #20
 800cea8:	f019 091f 	ands.w	r9, r9, #31
 800ceac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ceb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ceb4:	d02b      	beq.n	800cf0e <__lshift+0xbe>
 800ceb6:	f1c9 0e20 	rsb	lr, r9, #32
 800ceba:	468a      	mov	sl, r1
 800cebc:	2200      	movs	r2, #0
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	fa00 f009 	lsl.w	r0, r0, r9
 800cec4:	4302      	orrs	r2, r0
 800cec6:	f84a 2b04 	str.w	r2, [sl], #4
 800ceca:	f853 2b04 	ldr.w	r2, [r3], #4
 800cece:	459c      	cmp	ip, r3
 800ced0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ced4:	d8f3      	bhi.n	800cebe <__lshift+0x6e>
 800ced6:	ebac 0304 	sub.w	r3, ip, r4
 800ceda:	3b15      	subs	r3, #21
 800cedc:	f023 0303 	bic.w	r3, r3, #3
 800cee0:	3304      	adds	r3, #4
 800cee2:	f104 0015 	add.w	r0, r4, #21
 800cee6:	4584      	cmp	ip, r0
 800cee8:	bf38      	it	cc
 800ceea:	2304      	movcc	r3, #4
 800ceec:	50ca      	str	r2, [r1, r3]
 800ceee:	b10a      	cbz	r2, 800cef4 <__lshift+0xa4>
 800cef0:	f108 0602 	add.w	r6, r8, #2
 800cef4:	3e01      	subs	r6, #1
 800cef6:	4638      	mov	r0, r7
 800cef8:	612e      	str	r6, [r5, #16]
 800cefa:	4621      	mov	r1, r4
 800cefc:	f7ff fd8c 	bl	800ca18 <_Bfree>
 800cf00:	4628      	mov	r0, r5
 800cf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf06:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	e7c5      	b.n	800ce9a <__lshift+0x4a>
 800cf0e:	3904      	subs	r1, #4
 800cf10:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf14:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf18:	459c      	cmp	ip, r3
 800cf1a:	d8f9      	bhi.n	800cf10 <__lshift+0xc0>
 800cf1c:	e7ea      	b.n	800cef4 <__lshift+0xa4>
 800cf1e:	bf00      	nop
 800cf20:	0800f734 	.word	0x0800f734
 800cf24:	0800f828 	.word	0x0800f828

0800cf28 <__mcmp>:
 800cf28:	b530      	push	{r4, r5, lr}
 800cf2a:	6902      	ldr	r2, [r0, #16]
 800cf2c:	690c      	ldr	r4, [r1, #16]
 800cf2e:	1b12      	subs	r2, r2, r4
 800cf30:	d10e      	bne.n	800cf50 <__mcmp+0x28>
 800cf32:	f100 0314 	add.w	r3, r0, #20
 800cf36:	3114      	adds	r1, #20
 800cf38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cf3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cf40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cf44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf48:	42a5      	cmp	r5, r4
 800cf4a:	d003      	beq.n	800cf54 <__mcmp+0x2c>
 800cf4c:	d305      	bcc.n	800cf5a <__mcmp+0x32>
 800cf4e:	2201      	movs	r2, #1
 800cf50:	4610      	mov	r0, r2
 800cf52:	bd30      	pop	{r4, r5, pc}
 800cf54:	4283      	cmp	r3, r0
 800cf56:	d3f3      	bcc.n	800cf40 <__mcmp+0x18>
 800cf58:	e7fa      	b.n	800cf50 <__mcmp+0x28>
 800cf5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf5e:	e7f7      	b.n	800cf50 <__mcmp+0x28>

0800cf60 <__mdiff>:
 800cf60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	460c      	mov	r4, r1
 800cf66:	4606      	mov	r6, r0
 800cf68:	4611      	mov	r1, r2
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4617      	mov	r7, r2
 800cf6e:	f7ff ffdb 	bl	800cf28 <__mcmp>
 800cf72:	1e05      	subs	r5, r0, #0
 800cf74:	d110      	bne.n	800cf98 <__mdiff+0x38>
 800cf76:	4629      	mov	r1, r5
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff fd0d 	bl	800c998 <_Balloc>
 800cf7e:	b930      	cbnz	r0, 800cf8e <__mdiff+0x2e>
 800cf80:	4b39      	ldr	r3, [pc, #228]	; (800d068 <__mdiff+0x108>)
 800cf82:	4602      	mov	r2, r0
 800cf84:	f240 2132 	movw	r1, #562	; 0x232
 800cf88:	4838      	ldr	r0, [pc, #224]	; (800d06c <__mdiff+0x10c>)
 800cf8a:	f000 fca9 	bl	800d8e0 <__assert_func>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf98:	bfa4      	itt	ge
 800cf9a:	463b      	movge	r3, r7
 800cf9c:	4627      	movge	r7, r4
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	6879      	ldr	r1, [r7, #4]
 800cfa2:	bfa6      	itte	ge
 800cfa4:	461c      	movge	r4, r3
 800cfa6:	2500      	movge	r5, #0
 800cfa8:	2501      	movlt	r5, #1
 800cfaa:	f7ff fcf5 	bl	800c998 <_Balloc>
 800cfae:	b920      	cbnz	r0, 800cfba <__mdiff+0x5a>
 800cfb0:	4b2d      	ldr	r3, [pc, #180]	; (800d068 <__mdiff+0x108>)
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cfb8:	e7e6      	b.n	800cf88 <__mdiff+0x28>
 800cfba:	693e      	ldr	r6, [r7, #16]
 800cfbc:	60c5      	str	r5, [r0, #12]
 800cfbe:	6925      	ldr	r5, [r4, #16]
 800cfc0:	f107 0114 	add.w	r1, r7, #20
 800cfc4:	f104 0914 	add.w	r9, r4, #20
 800cfc8:	f100 0e14 	add.w	lr, r0, #20
 800cfcc:	f107 0210 	add.w	r2, r7, #16
 800cfd0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cfd4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cfd8:	46f2      	mov	sl, lr
 800cfda:	2700      	movs	r7, #0
 800cfdc:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cfe4:	fa1f f883 	uxth.w	r8, r3
 800cfe8:	fa17 f78b 	uxtah	r7, r7, fp
 800cfec:	0c1b      	lsrs	r3, r3, #16
 800cfee:	eba7 0808 	sub.w	r8, r7, r8
 800cff2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cff6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cffa:	fa1f f888 	uxth.w	r8, r8
 800cffe:	141f      	asrs	r7, r3, #16
 800d000:	454d      	cmp	r5, r9
 800d002:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d006:	f84a 3b04 	str.w	r3, [sl], #4
 800d00a:	d8e7      	bhi.n	800cfdc <__mdiff+0x7c>
 800d00c:	1b2b      	subs	r3, r5, r4
 800d00e:	3b15      	subs	r3, #21
 800d010:	f023 0303 	bic.w	r3, r3, #3
 800d014:	3304      	adds	r3, #4
 800d016:	3415      	adds	r4, #21
 800d018:	42a5      	cmp	r5, r4
 800d01a:	bf38      	it	cc
 800d01c:	2304      	movcc	r3, #4
 800d01e:	4419      	add	r1, r3
 800d020:	4473      	add	r3, lr
 800d022:	469e      	mov	lr, r3
 800d024:	460d      	mov	r5, r1
 800d026:	4565      	cmp	r5, ip
 800d028:	d30e      	bcc.n	800d048 <__mdiff+0xe8>
 800d02a:	f10c 0203 	add.w	r2, ip, #3
 800d02e:	1a52      	subs	r2, r2, r1
 800d030:	f022 0203 	bic.w	r2, r2, #3
 800d034:	3903      	subs	r1, #3
 800d036:	458c      	cmp	ip, r1
 800d038:	bf38      	it	cc
 800d03a:	2200      	movcc	r2, #0
 800d03c:	441a      	add	r2, r3
 800d03e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d042:	b17b      	cbz	r3, 800d064 <__mdiff+0x104>
 800d044:	6106      	str	r6, [r0, #16]
 800d046:	e7a5      	b.n	800cf94 <__mdiff+0x34>
 800d048:	f855 8b04 	ldr.w	r8, [r5], #4
 800d04c:	fa17 f488 	uxtah	r4, r7, r8
 800d050:	1422      	asrs	r2, r4, #16
 800d052:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d056:	b2a4      	uxth	r4, r4
 800d058:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d05c:	f84e 4b04 	str.w	r4, [lr], #4
 800d060:	1417      	asrs	r7, r2, #16
 800d062:	e7e0      	b.n	800d026 <__mdiff+0xc6>
 800d064:	3e01      	subs	r6, #1
 800d066:	e7ea      	b.n	800d03e <__mdiff+0xde>
 800d068:	0800f734 	.word	0x0800f734
 800d06c:	0800f828 	.word	0x0800f828

0800d070 <__ulp>:
 800d070:	b082      	sub	sp, #8
 800d072:	ed8d 0b00 	vstr	d0, [sp]
 800d076:	9b01      	ldr	r3, [sp, #4]
 800d078:	4912      	ldr	r1, [pc, #72]	; (800d0c4 <__ulp+0x54>)
 800d07a:	4019      	ands	r1, r3
 800d07c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d080:	2900      	cmp	r1, #0
 800d082:	dd05      	ble.n	800d090 <__ulp+0x20>
 800d084:	2200      	movs	r2, #0
 800d086:	460b      	mov	r3, r1
 800d088:	ec43 2b10 	vmov	d0, r2, r3
 800d08c:	b002      	add	sp, #8
 800d08e:	4770      	bx	lr
 800d090:	4249      	negs	r1, r1
 800d092:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d096:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d09a:	f04f 0200 	mov.w	r2, #0
 800d09e:	f04f 0300 	mov.w	r3, #0
 800d0a2:	da04      	bge.n	800d0ae <__ulp+0x3e>
 800d0a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d0a8:	fa41 f300 	asr.w	r3, r1, r0
 800d0ac:	e7ec      	b.n	800d088 <__ulp+0x18>
 800d0ae:	f1a0 0114 	sub.w	r1, r0, #20
 800d0b2:	291e      	cmp	r1, #30
 800d0b4:	bfda      	itte	le
 800d0b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d0ba:	fa20 f101 	lsrle.w	r1, r0, r1
 800d0be:	2101      	movgt	r1, #1
 800d0c0:	460a      	mov	r2, r1
 800d0c2:	e7e1      	b.n	800d088 <__ulp+0x18>
 800d0c4:	7ff00000 	.word	0x7ff00000

0800d0c8 <__b2d>:
 800d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ca:	6905      	ldr	r5, [r0, #16]
 800d0cc:	f100 0714 	add.w	r7, r0, #20
 800d0d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d0d4:	1f2e      	subs	r6, r5, #4
 800d0d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7ff fd52 	bl	800cb84 <__hi0bits>
 800d0e0:	f1c0 0320 	rsb	r3, r0, #32
 800d0e4:	280a      	cmp	r0, #10
 800d0e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d164 <__b2d+0x9c>
 800d0ea:	600b      	str	r3, [r1, #0]
 800d0ec:	dc14      	bgt.n	800d118 <__b2d+0x50>
 800d0ee:	f1c0 0e0b 	rsb	lr, r0, #11
 800d0f2:	fa24 f10e 	lsr.w	r1, r4, lr
 800d0f6:	42b7      	cmp	r7, r6
 800d0f8:	ea41 030c 	orr.w	r3, r1, ip
 800d0fc:	bf34      	ite	cc
 800d0fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d102:	2100      	movcs	r1, #0
 800d104:	3015      	adds	r0, #21
 800d106:	fa04 f000 	lsl.w	r0, r4, r0
 800d10a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d10e:	ea40 0201 	orr.w	r2, r0, r1
 800d112:	ec43 2b10 	vmov	d0, r2, r3
 800d116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d118:	42b7      	cmp	r7, r6
 800d11a:	bf3a      	itte	cc
 800d11c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d120:	f1a5 0608 	subcc.w	r6, r5, #8
 800d124:	2100      	movcs	r1, #0
 800d126:	380b      	subs	r0, #11
 800d128:	d017      	beq.n	800d15a <__b2d+0x92>
 800d12a:	f1c0 0c20 	rsb	ip, r0, #32
 800d12e:	fa04 f500 	lsl.w	r5, r4, r0
 800d132:	42be      	cmp	r6, r7
 800d134:	fa21 f40c 	lsr.w	r4, r1, ip
 800d138:	ea45 0504 	orr.w	r5, r5, r4
 800d13c:	bf8c      	ite	hi
 800d13e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d142:	2400      	movls	r4, #0
 800d144:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d148:	fa01 f000 	lsl.w	r0, r1, r0
 800d14c:	fa24 f40c 	lsr.w	r4, r4, ip
 800d150:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d154:	ea40 0204 	orr.w	r2, r0, r4
 800d158:	e7db      	b.n	800d112 <__b2d+0x4a>
 800d15a:	ea44 030c 	orr.w	r3, r4, ip
 800d15e:	460a      	mov	r2, r1
 800d160:	e7d7      	b.n	800d112 <__b2d+0x4a>
 800d162:	bf00      	nop
 800d164:	3ff00000 	.word	0x3ff00000

0800d168 <__d2b>:
 800d168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d16c:	4689      	mov	r9, r1
 800d16e:	2101      	movs	r1, #1
 800d170:	ec57 6b10 	vmov	r6, r7, d0
 800d174:	4690      	mov	r8, r2
 800d176:	f7ff fc0f 	bl	800c998 <_Balloc>
 800d17a:	4604      	mov	r4, r0
 800d17c:	b930      	cbnz	r0, 800d18c <__d2b+0x24>
 800d17e:	4602      	mov	r2, r0
 800d180:	4b25      	ldr	r3, [pc, #148]	; (800d218 <__d2b+0xb0>)
 800d182:	4826      	ldr	r0, [pc, #152]	; (800d21c <__d2b+0xb4>)
 800d184:	f240 310a 	movw	r1, #778	; 0x30a
 800d188:	f000 fbaa 	bl	800d8e0 <__assert_func>
 800d18c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d194:	bb35      	cbnz	r5, 800d1e4 <__d2b+0x7c>
 800d196:	2e00      	cmp	r6, #0
 800d198:	9301      	str	r3, [sp, #4]
 800d19a:	d028      	beq.n	800d1ee <__d2b+0x86>
 800d19c:	4668      	mov	r0, sp
 800d19e:	9600      	str	r6, [sp, #0]
 800d1a0:	f7ff fd10 	bl	800cbc4 <__lo0bits>
 800d1a4:	9900      	ldr	r1, [sp, #0]
 800d1a6:	b300      	cbz	r0, 800d1ea <__d2b+0x82>
 800d1a8:	9a01      	ldr	r2, [sp, #4]
 800d1aa:	f1c0 0320 	rsb	r3, r0, #32
 800d1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d1b2:	430b      	orrs	r3, r1
 800d1b4:	40c2      	lsrs	r2, r0
 800d1b6:	6163      	str	r3, [r4, #20]
 800d1b8:	9201      	str	r2, [sp, #4]
 800d1ba:	9b01      	ldr	r3, [sp, #4]
 800d1bc:	61a3      	str	r3, [r4, #24]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bf14      	ite	ne
 800d1c2:	2202      	movne	r2, #2
 800d1c4:	2201      	moveq	r2, #1
 800d1c6:	6122      	str	r2, [r4, #16]
 800d1c8:	b1d5      	cbz	r5, 800d200 <__d2b+0x98>
 800d1ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1ce:	4405      	add	r5, r0
 800d1d0:	f8c9 5000 	str.w	r5, [r9]
 800d1d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1d8:	f8c8 0000 	str.w	r0, [r8]
 800d1dc:	4620      	mov	r0, r4
 800d1de:	b003      	add	sp, #12
 800d1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1e8:	e7d5      	b.n	800d196 <__d2b+0x2e>
 800d1ea:	6161      	str	r1, [r4, #20]
 800d1ec:	e7e5      	b.n	800d1ba <__d2b+0x52>
 800d1ee:	a801      	add	r0, sp, #4
 800d1f0:	f7ff fce8 	bl	800cbc4 <__lo0bits>
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	6163      	str	r3, [r4, #20]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	6122      	str	r2, [r4, #16]
 800d1fc:	3020      	adds	r0, #32
 800d1fe:	e7e3      	b.n	800d1c8 <__d2b+0x60>
 800d200:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d204:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d208:	f8c9 0000 	str.w	r0, [r9]
 800d20c:	6918      	ldr	r0, [r3, #16]
 800d20e:	f7ff fcb9 	bl	800cb84 <__hi0bits>
 800d212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d216:	e7df      	b.n	800d1d8 <__d2b+0x70>
 800d218:	0800f734 	.word	0x0800f734
 800d21c:	0800f828 	.word	0x0800f828

0800d220 <__ratio>:
 800d220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	4688      	mov	r8, r1
 800d226:	4669      	mov	r1, sp
 800d228:	4681      	mov	r9, r0
 800d22a:	f7ff ff4d 	bl	800d0c8 <__b2d>
 800d22e:	a901      	add	r1, sp, #4
 800d230:	4640      	mov	r0, r8
 800d232:	ec55 4b10 	vmov	r4, r5, d0
 800d236:	f7ff ff47 	bl	800d0c8 <__b2d>
 800d23a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d23e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d242:	eba3 0c02 	sub.w	ip, r3, r2
 800d246:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d24a:	1a9b      	subs	r3, r3, r2
 800d24c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d250:	ec51 0b10 	vmov	r0, r1, d0
 800d254:	2b00      	cmp	r3, #0
 800d256:	bfd6      	itet	le
 800d258:	460a      	movle	r2, r1
 800d25a:	462a      	movgt	r2, r5
 800d25c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d260:	468b      	mov	fp, r1
 800d262:	462f      	mov	r7, r5
 800d264:	bfd4      	ite	le
 800d266:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d26a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d26e:	4620      	mov	r0, r4
 800d270:	ee10 2a10 	vmov	r2, s0
 800d274:	465b      	mov	r3, fp
 800d276:	4639      	mov	r1, r7
 800d278:	f7f3 fb10 	bl	800089c <__aeabi_ddiv>
 800d27c:	ec41 0b10 	vmov	d0, r0, r1
 800d280:	b003      	add	sp, #12
 800d282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d286 <__copybits>:
 800d286:	3901      	subs	r1, #1
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	1149      	asrs	r1, r1, #5
 800d28c:	6914      	ldr	r4, [r2, #16]
 800d28e:	3101      	adds	r1, #1
 800d290:	f102 0314 	add.w	r3, r2, #20
 800d294:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d298:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d29c:	1f05      	subs	r5, r0, #4
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	d30c      	bcc.n	800d2bc <__copybits+0x36>
 800d2a2:	1aa3      	subs	r3, r4, r2
 800d2a4:	3b11      	subs	r3, #17
 800d2a6:	f023 0303 	bic.w	r3, r3, #3
 800d2aa:	3211      	adds	r2, #17
 800d2ac:	42a2      	cmp	r2, r4
 800d2ae:	bf88      	it	hi
 800d2b0:	2300      	movhi	r3, #0
 800d2b2:	4418      	add	r0, r3
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	4288      	cmp	r0, r1
 800d2b8:	d305      	bcc.n	800d2c6 <__copybits+0x40>
 800d2ba:	bd70      	pop	{r4, r5, r6, pc}
 800d2bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800d2c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2c4:	e7eb      	b.n	800d29e <__copybits+0x18>
 800d2c6:	f840 3b04 	str.w	r3, [r0], #4
 800d2ca:	e7f4      	b.n	800d2b6 <__copybits+0x30>

0800d2cc <__any_on>:
 800d2cc:	f100 0214 	add.w	r2, r0, #20
 800d2d0:	6900      	ldr	r0, [r0, #16]
 800d2d2:	114b      	asrs	r3, r1, #5
 800d2d4:	4298      	cmp	r0, r3
 800d2d6:	b510      	push	{r4, lr}
 800d2d8:	db11      	blt.n	800d2fe <__any_on+0x32>
 800d2da:	dd0a      	ble.n	800d2f2 <__any_on+0x26>
 800d2dc:	f011 011f 	ands.w	r1, r1, #31
 800d2e0:	d007      	beq.n	800d2f2 <__any_on+0x26>
 800d2e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2e6:	fa24 f001 	lsr.w	r0, r4, r1
 800d2ea:	fa00 f101 	lsl.w	r1, r0, r1
 800d2ee:	428c      	cmp	r4, r1
 800d2f0:	d10b      	bne.n	800d30a <__any_on+0x3e>
 800d2f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d803      	bhi.n	800d302 <__any_on+0x36>
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	bd10      	pop	{r4, pc}
 800d2fe:	4603      	mov	r3, r0
 800d300:	e7f7      	b.n	800d2f2 <__any_on+0x26>
 800d302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d306:	2900      	cmp	r1, #0
 800d308:	d0f5      	beq.n	800d2f6 <__any_on+0x2a>
 800d30a:	2001      	movs	r0, #1
 800d30c:	e7f6      	b.n	800d2fc <__any_on+0x30>

0800d30e <_calloc_r>:
 800d30e:	b513      	push	{r0, r1, r4, lr}
 800d310:	434a      	muls	r2, r1
 800d312:	4611      	mov	r1, r2
 800d314:	9201      	str	r2, [sp, #4]
 800d316:	f000 f859 	bl	800d3cc <_malloc_r>
 800d31a:	4604      	mov	r4, r0
 800d31c:	b118      	cbz	r0, 800d326 <_calloc_r+0x18>
 800d31e:	9a01      	ldr	r2, [sp, #4]
 800d320:	2100      	movs	r1, #0
 800d322:	f7fc fa7f 	bl	8009824 <memset>
 800d326:	4620      	mov	r0, r4
 800d328:	b002      	add	sp, #8
 800d32a:	bd10      	pop	{r4, pc}

0800d32c <_free_r>:
 800d32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d32e:	2900      	cmp	r1, #0
 800d330:	d048      	beq.n	800d3c4 <_free_r+0x98>
 800d332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d336:	9001      	str	r0, [sp, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f1a1 0404 	sub.w	r4, r1, #4
 800d33e:	bfb8      	it	lt
 800d340:	18e4      	addlt	r4, r4, r3
 800d342:	f000 fb41 	bl	800d9c8 <__malloc_lock>
 800d346:	4a20      	ldr	r2, [pc, #128]	; (800d3c8 <_free_r+0x9c>)
 800d348:	9801      	ldr	r0, [sp, #4]
 800d34a:	6813      	ldr	r3, [r2, #0]
 800d34c:	4615      	mov	r5, r2
 800d34e:	b933      	cbnz	r3, 800d35e <_free_r+0x32>
 800d350:	6063      	str	r3, [r4, #4]
 800d352:	6014      	str	r4, [r2, #0]
 800d354:	b003      	add	sp, #12
 800d356:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d35a:	f000 bb3b 	b.w	800d9d4 <__malloc_unlock>
 800d35e:	42a3      	cmp	r3, r4
 800d360:	d90b      	bls.n	800d37a <_free_r+0x4e>
 800d362:	6821      	ldr	r1, [r4, #0]
 800d364:	1862      	adds	r2, r4, r1
 800d366:	4293      	cmp	r3, r2
 800d368:	bf04      	itt	eq
 800d36a:	681a      	ldreq	r2, [r3, #0]
 800d36c:	685b      	ldreq	r3, [r3, #4]
 800d36e:	6063      	str	r3, [r4, #4]
 800d370:	bf04      	itt	eq
 800d372:	1852      	addeq	r2, r2, r1
 800d374:	6022      	streq	r2, [r4, #0]
 800d376:	602c      	str	r4, [r5, #0]
 800d378:	e7ec      	b.n	800d354 <_free_r+0x28>
 800d37a:	461a      	mov	r2, r3
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	b10b      	cbz	r3, 800d384 <_free_r+0x58>
 800d380:	42a3      	cmp	r3, r4
 800d382:	d9fa      	bls.n	800d37a <_free_r+0x4e>
 800d384:	6811      	ldr	r1, [r2, #0]
 800d386:	1855      	adds	r5, r2, r1
 800d388:	42a5      	cmp	r5, r4
 800d38a:	d10b      	bne.n	800d3a4 <_free_r+0x78>
 800d38c:	6824      	ldr	r4, [r4, #0]
 800d38e:	4421      	add	r1, r4
 800d390:	1854      	adds	r4, r2, r1
 800d392:	42a3      	cmp	r3, r4
 800d394:	6011      	str	r1, [r2, #0]
 800d396:	d1dd      	bne.n	800d354 <_free_r+0x28>
 800d398:	681c      	ldr	r4, [r3, #0]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	6053      	str	r3, [r2, #4]
 800d39e:	4421      	add	r1, r4
 800d3a0:	6011      	str	r1, [r2, #0]
 800d3a2:	e7d7      	b.n	800d354 <_free_r+0x28>
 800d3a4:	d902      	bls.n	800d3ac <_free_r+0x80>
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	6003      	str	r3, [r0, #0]
 800d3aa:	e7d3      	b.n	800d354 <_free_r+0x28>
 800d3ac:	6825      	ldr	r5, [r4, #0]
 800d3ae:	1961      	adds	r1, r4, r5
 800d3b0:	428b      	cmp	r3, r1
 800d3b2:	bf04      	itt	eq
 800d3b4:	6819      	ldreq	r1, [r3, #0]
 800d3b6:	685b      	ldreq	r3, [r3, #4]
 800d3b8:	6063      	str	r3, [r4, #4]
 800d3ba:	bf04      	itt	eq
 800d3bc:	1949      	addeq	r1, r1, r5
 800d3be:	6021      	streq	r1, [r4, #0]
 800d3c0:	6054      	str	r4, [r2, #4]
 800d3c2:	e7c7      	b.n	800d354 <_free_r+0x28>
 800d3c4:	b003      	add	sp, #12
 800d3c6:	bd30      	pop	{r4, r5, pc}
 800d3c8:	2000022c 	.word	0x2000022c

0800d3cc <_malloc_r>:
 800d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ce:	1ccd      	adds	r5, r1, #3
 800d3d0:	f025 0503 	bic.w	r5, r5, #3
 800d3d4:	3508      	adds	r5, #8
 800d3d6:	2d0c      	cmp	r5, #12
 800d3d8:	bf38      	it	cc
 800d3da:	250c      	movcc	r5, #12
 800d3dc:	2d00      	cmp	r5, #0
 800d3de:	4606      	mov	r6, r0
 800d3e0:	db01      	blt.n	800d3e6 <_malloc_r+0x1a>
 800d3e2:	42a9      	cmp	r1, r5
 800d3e4:	d903      	bls.n	800d3ee <_malloc_r+0x22>
 800d3e6:	230c      	movs	r3, #12
 800d3e8:	6033      	str	r3, [r6, #0]
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ee:	f000 faeb 	bl	800d9c8 <__malloc_lock>
 800d3f2:	4921      	ldr	r1, [pc, #132]	; (800d478 <_malloc_r+0xac>)
 800d3f4:	680a      	ldr	r2, [r1, #0]
 800d3f6:	4614      	mov	r4, r2
 800d3f8:	b99c      	cbnz	r4, 800d422 <_malloc_r+0x56>
 800d3fa:	4f20      	ldr	r7, [pc, #128]	; (800d47c <_malloc_r+0xb0>)
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	b923      	cbnz	r3, 800d40a <_malloc_r+0x3e>
 800d400:	4621      	mov	r1, r4
 800d402:	4630      	mov	r0, r6
 800d404:	f000 f9e8 	bl	800d7d8 <_sbrk_r>
 800d408:	6038      	str	r0, [r7, #0]
 800d40a:	4629      	mov	r1, r5
 800d40c:	4630      	mov	r0, r6
 800d40e:	f000 f9e3 	bl	800d7d8 <_sbrk_r>
 800d412:	1c43      	adds	r3, r0, #1
 800d414:	d123      	bne.n	800d45e <_malloc_r+0x92>
 800d416:	230c      	movs	r3, #12
 800d418:	6033      	str	r3, [r6, #0]
 800d41a:	4630      	mov	r0, r6
 800d41c:	f000 fada 	bl	800d9d4 <__malloc_unlock>
 800d420:	e7e3      	b.n	800d3ea <_malloc_r+0x1e>
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	1b5b      	subs	r3, r3, r5
 800d426:	d417      	bmi.n	800d458 <_malloc_r+0x8c>
 800d428:	2b0b      	cmp	r3, #11
 800d42a:	d903      	bls.n	800d434 <_malloc_r+0x68>
 800d42c:	6023      	str	r3, [r4, #0]
 800d42e:	441c      	add	r4, r3
 800d430:	6025      	str	r5, [r4, #0]
 800d432:	e004      	b.n	800d43e <_malloc_r+0x72>
 800d434:	6863      	ldr	r3, [r4, #4]
 800d436:	42a2      	cmp	r2, r4
 800d438:	bf0c      	ite	eq
 800d43a:	600b      	streq	r3, [r1, #0]
 800d43c:	6053      	strne	r3, [r2, #4]
 800d43e:	4630      	mov	r0, r6
 800d440:	f000 fac8 	bl	800d9d4 <__malloc_unlock>
 800d444:	f104 000b 	add.w	r0, r4, #11
 800d448:	1d23      	adds	r3, r4, #4
 800d44a:	f020 0007 	bic.w	r0, r0, #7
 800d44e:	1ac2      	subs	r2, r0, r3
 800d450:	d0cc      	beq.n	800d3ec <_malloc_r+0x20>
 800d452:	1a1b      	subs	r3, r3, r0
 800d454:	50a3      	str	r3, [r4, r2]
 800d456:	e7c9      	b.n	800d3ec <_malloc_r+0x20>
 800d458:	4622      	mov	r2, r4
 800d45a:	6864      	ldr	r4, [r4, #4]
 800d45c:	e7cc      	b.n	800d3f8 <_malloc_r+0x2c>
 800d45e:	1cc4      	adds	r4, r0, #3
 800d460:	f024 0403 	bic.w	r4, r4, #3
 800d464:	42a0      	cmp	r0, r4
 800d466:	d0e3      	beq.n	800d430 <_malloc_r+0x64>
 800d468:	1a21      	subs	r1, r4, r0
 800d46a:	4630      	mov	r0, r6
 800d46c:	f000 f9b4 	bl	800d7d8 <_sbrk_r>
 800d470:	3001      	adds	r0, #1
 800d472:	d1dd      	bne.n	800d430 <_malloc_r+0x64>
 800d474:	e7cf      	b.n	800d416 <_malloc_r+0x4a>
 800d476:	bf00      	nop
 800d478:	2000022c 	.word	0x2000022c
 800d47c:	20000230 	.word	0x20000230

0800d480 <__sfputc_r>:
 800d480:	6893      	ldr	r3, [r2, #8]
 800d482:	3b01      	subs	r3, #1
 800d484:	2b00      	cmp	r3, #0
 800d486:	b410      	push	{r4}
 800d488:	6093      	str	r3, [r2, #8]
 800d48a:	da08      	bge.n	800d49e <__sfputc_r+0x1e>
 800d48c:	6994      	ldr	r4, [r2, #24]
 800d48e:	42a3      	cmp	r3, r4
 800d490:	db01      	blt.n	800d496 <__sfputc_r+0x16>
 800d492:	290a      	cmp	r1, #10
 800d494:	d103      	bne.n	800d49e <__sfputc_r+0x1e>
 800d496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d49a:	f7fd bd99 	b.w	800afd0 <__swbuf_r>
 800d49e:	6813      	ldr	r3, [r2, #0]
 800d4a0:	1c58      	adds	r0, r3, #1
 800d4a2:	6010      	str	r0, [r2, #0]
 800d4a4:	7019      	strb	r1, [r3, #0]
 800d4a6:	4608      	mov	r0, r1
 800d4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <__sfputs_r>:
 800d4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	460f      	mov	r7, r1
 800d4b4:	4614      	mov	r4, r2
 800d4b6:	18d5      	adds	r5, r2, r3
 800d4b8:	42ac      	cmp	r4, r5
 800d4ba:	d101      	bne.n	800d4c0 <__sfputs_r+0x12>
 800d4bc:	2000      	movs	r0, #0
 800d4be:	e007      	b.n	800d4d0 <__sfputs_r+0x22>
 800d4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c4:	463a      	mov	r2, r7
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f7ff ffda 	bl	800d480 <__sfputc_r>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d1f3      	bne.n	800d4b8 <__sfputs_r+0xa>
 800d4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4d4 <_vfiprintf_r>:
 800d4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	460d      	mov	r5, r1
 800d4da:	b09d      	sub	sp, #116	; 0x74
 800d4dc:	4614      	mov	r4, r2
 800d4de:	4698      	mov	r8, r3
 800d4e0:	4606      	mov	r6, r0
 800d4e2:	b118      	cbz	r0, 800d4ec <_vfiprintf_r+0x18>
 800d4e4:	6983      	ldr	r3, [r0, #24]
 800d4e6:	b90b      	cbnz	r3, 800d4ec <_vfiprintf_r+0x18>
 800d4e8:	f7fe fdc4 	bl	800c074 <__sinit>
 800d4ec:	4b89      	ldr	r3, [pc, #548]	; (800d714 <_vfiprintf_r+0x240>)
 800d4ee:	429d      	cmp	r5, r3
 800d4f0:	d11b      	bne.n	800d52a <_vfiprintf_r+0x56>
 800d4f2:	6875      	ldr	r5, [r6, #4]
 800d4f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4f6:	07d9      	lsls	r1, r3, #31
 800d4f8:	d405      	bmi.n	800d506 <_vfiprintf_r+0x32>
 800d4fa:	89ab      	ldrh	r3, [r5, #12]
 800d4fc:	059a      	lsls	r2, r3, #22
 800d4fe:	d402      	bmi.n	800d506 <_vfiprintf_r+0x32>
 800d500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d502:	f7ff f9c8 	bl	800c896 <__retarget_lock_acquire_recursive>
 800d506:	89ab      	ldrh	r3, [r5, #12]
 800d508:	071b      	lsls	r3, r3, #28
 800d50a:	d501      	bpl.n	800d510 <_vfiprintf_r+0x3c>
 800d50c:	692b      	ldr	r3, [r5, #16]
 800d50e:	b9eb      	cbnz	r3, 800d54c <_vfiprintf_r+0x78>
 800d510:	4629      	mov	r1, r5
 800d512:	4630      	mov	r0, r6
 800d514:	f7fd fdae 	bl	800b074 <__swsetup_r>
 800d518:	b1c0      	cbz	r0, 800d54c <_vfiprintf_r+0x78>
 800d51a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d51c:	07dc      	lsls	r4, r3, #31
 800d51e:	d50e      	bpl.n	800d53e <_vfiprintf_r+0x6a>
 800d520:	f04f 30ff 	mov.w	r0, #4294967295
 800d524:	b01d      	add	sp, #116	; 0x74
 800d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52a:	4b7b      	ldr	r3, [pc, #492]	; (800d718 <_vfiprintf_r+0x244>)
 800d52c:	429d      	cmp	r5, r3
 800d52e:	d101      	bne.n	800d534 <_vfiprintf_r+0x60>
 800d530:	68b5      	ldr	r5, [r6, #8]
 800d532:	e7df      	b.n	800d4f4 <_vfiprintf_r+0x20>
 800d534:	4b79      	ldr	r3, [pc, #484]	; (800d71c <_vfiprintf_r+0x248>)
 800d536:	429d      	cmp	r5, r3
 800d538:	bf08      	it	eq
 800d53a:	68f5      	ldreq	r5, [r6, #12]
 800d53c:	e7da      	b.n	800d4f4 <_vfiprintf_r+0x20>
 800d53e:	89ab      	ldrh	r3, [r5, #12]
 800d540:	0598      	lsls	r0, r3, #22
 800d542:	d4ed      	bmi.n	800d520 <_vfiprintf_r+0x4c>
 800d544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d546:	f7ff f9a7 	bl	800c898 <__retarget_lock_release_recursive>
 800d54a:	e7e9      	b.n	800d520 <_vfiprintf_r+0x4c>
 800d54c:	2300      	movs	r3, #0
 800d54e:	9309      	str	r3, [sp, #36]	; 0x24
 800d550:	2320      	movs	r3, #32
 800d552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d556:	f8cd 800c 	str.w	r8, [sp, #12]
 800d55a:	2330      	movs	r3, #48	; 0x30
 800d55c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d720 <_vfiprintf_r+0x24c>
 800d560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d564:	f04f 0901 	mov.w	r9, #1
 800d568:	4623      	mov	r3, r4
 800d56a:	469a      	mov	sl, r3
 800d56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d570:	b10a      	cbz	r2, 800d576 <_vfiprintf_r+0xa2>
 800d572:	2a25      	cmp	r2, #37	; 0x25
 800d574:	d1f9      	bne.n	800d56a <_vfiprintf_r+0x96>
 800d576:	ebba 0b04 	subs.w	fp, sl, r4
 800d57a:	d00b      	beq.n	800d594 <_vfiprintf_r+0xc0>
 800d57c:	465b      	mov	r3, fp
 800d57e:	4622      	mov	r2, r4
 800d580:	4629      	mov	r1, r5
 800d582:	4630      	mov	r0, r6
 800d584:	f7ff ff93 	bl	800d4ae <__sfputs_r>
 800d588:	3001      	adds	r0, #1
 800d58a:	f000 80aa 	beq.w	800d6e2 <_vfiprintf_r+0x20e>
 800d58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d590:	445a      	add	r2, fp
 800d592:	9209      	str	r2, [sp, #36]	; 0x24
 800d594:	f89a 3000 	ldrb.w	r3, [sl]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 80a2 	beq.w	800d6e2 <_vfiprintf_r+0x20e>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5a8:	f10a 0a01 	add.w	sl, sl, #1
 800d5ac:	9304      	str	r3, [sp, #16]
 800d5ae:	9307      	str	r3, [sp, #28]
 800d5b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d5b6:	4654      	mov	r4, sl
 800d5b8:	2205      	movs	r2, #5
 800d5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5be:	4858      	ldr	r0, [pc, #352]	; (800d720 <_vfiprintf_r+0x24c>)
 800d5c0:	f7f2 fe36 	bl	8000230 <memchr>
 800d5c4:	9a04      	ldr	r2, [sp, #16]
 800d5c6:	b9d8      	cbnz	r0, 800d600 <_vfiprintf_r+0x12c>
 800d5c8:	06d1      	lsls	r1, r2, #27
 800d5ca:	bf44      	itt	mi
 800d5cc:	2320      	movmi	r3, #32
 800d5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5d2:	0713      	lsls	r3, r2, #28
 800d5d4:	bf44      	itt	mi
 800d5d6:	232b      	movmi	r3, #43	; 0x2b
 800d5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5e2:	d015      	beq.n	800d610 <_vfiprintf_r+0x13c>
 800d5e4:	9a07      	ldr	r2, [sp, #28]
 800d5e6:	4654      	mov	r4, sl
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	f04f 0c0a 	mov.w	ip, #10
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5f4:	3b30      	subs	r3, #48	; 0x30
 800d5f6:	2b09      	cmp	r3, #9
 800d5f8:	d94e      	bls.n	800d698 <_vfiprintf_r+0x1c4>
 800d5fa:	b1b0      	cbz	r0, 800d62a <_vfiprintf_r+0x156>
 800d5fc:	9207      	str	r2, [sp, #28]
 800d5fe:	e014      	b.n	800d62a <_vfiprintf_r+0x156>
 800d600:	eba0 0308 	sub.w	r3, r0, r8
 800d604:	fa09 f303 	lsl.w	r3, r9, r3
 800d608:	4313      	orrs	r3, r2
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	46a2      	mov	sl, r4
 800d60e:	e7d2      	b.n	800d5b6 <_vfiprintf_r+0xe2>
 800d610:	9b03      	ldr	r3, [sp, #12]
 800d612:	1d19      	adds	r1, r3, #4
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	9103      	str	r1, [sp, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	bfbb      	ittet	lt
 800d61c:	425b      	neglt	r3, r3
 800d61e:	f042 0202 	orrlt.w	r2, r2, #2
 800d622:	9307      	strge	r3, [sp, #28]
 800d624:	9307      	strlt	r3, [sp, #28]
 800d626:	bfb8      	it	lt
 800d628:	9204      	strlt	r2, [sp, #16]
 800d62a:	7823      	ldrb	r3, [r4, #0]
 800d62c:	2b2e      	cmp	r3, #46	; 0x2e
 800d62e:	d10c      	bne.n	800d64a <_vfiprintf_r+0x176>
 800d630:	7863      	ldrb	r3, [r4, #1]
 800d632:	2b2a      	cmp	r3, #42	; 0x2a
 800d634:	d135      	bne.n	800d6a2 <_vfiprintf_r+0x1ce>
 800d636:	9b03      	ldr	r3, [sp, #12]
 800d638:	1d1a      	adds	r2, r3, #4
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	9203      	str	r2, [sp, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	bfb8      	it	lt
 800d642:	f04f 33ff 	movlt.w	r3, #4294967295
 800d646:	3402      	adds	r4, #2
 800d648:	9305      	str	r3, [sp, #20]
 800d64a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d730 <_vfiprintf_r+0x25c>
 800d64e:	7821      	ldrb	r1, [r4, #0]
 800d650:	2203      	movs	r2, #3
 800d652:	4650      	mov	r0, sl
 800d654:	f7f2 fdec 	bl	8000230 <memchr>
 800d658:	b140      	cbz	r0, 800d66c <_vfiprintf_r+0x198>
 800d65a:	2340      	movs	r3, #64	; 0x40
 800d65c:	eba0 000a 	sub.w	r0, r0, sl
 800d660:	fa03 f000 	lsl.w	r0, r3, r0
 800d664:	9b04      	ldr	r3, [sp, #16]
 800d666:	4303      	orrs	r3, r0
 800d668:	3401      	adds	r4, #1
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d670:	482c      	ldr	r0, [pc, #176]	; (800d724 <_vfiprintf_r+0x250>)
 800d672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d676:	2206      	movs	r2, #6
 800d678:	f7f2 fdda 	bl	8000230 <memchr>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d03f      	beq.n	800d700 <_vfiprintf_r+0x22c>
 800d680:	4b29      	ldr	r3, [pc, #164]	; (800d728 <_vfiprintf_r+0x254>)
 800d682:	bb1b      	cbnz	r3, 800d6cc <_vfiprintf_r+0x1f8>
 800d684:	9b03      	ldr	r3, [sp, #12]
 800d686:	3307      	adds	r3, #7
 800d688:	f023 0307 	bic.w	r3, r3, #7
 800d68c:	3308      	adds	r3, #8
 800d68e:	9303      	str	r3, [sp, #12]
 800d690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d692:	443b      	add	r3, r7
 800d694:	9309      	str	r3, [sp, #36]	; 0x24
 800d696:	e767      	b.n	800d568 <_vfiprintf_r+0x94>
 800d698:	fb0c 3202 	mla	r2, ip, r2, r3
 800d69c:	460c      	mov	r4, r1
 800d69e:	2001      	movs	r0, #1
 800d6a0:	e7a5      	b.n	800d5ee <_vfiprintf_r+0x11a>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	3401      	adds	r4, #1
 800d6a6:	9305      	str	r3, [sp, #20]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f04f 0c0a 	mov.w	ip, #10
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6b4:	3a30      	subs	r2, #48	; 0x30
 800d6b6:	2a09      	cmp	r2, #9
 800d6b8:	d903      	bls.n	800d6c2 <_vfiprintf_r+0x1ee>
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d0c5      	beq.n	800d64a <_vfiprintf_r+0x176>
 800d6be:	9105      	str	r1, [sp, #20]
 800d6c0:	e7c3      	b.n	800d64a <_vfiprintf_r+0x176>
 800d6c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e7f0      	b.n	800d6ae <_vfiprintf_r+0x1da>
 800d6cc:	ab03      	add	r3, sp, #12
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	462a      	mov	r2, r5
 800d6d2:	4b16      	ldr	r3, [pc, #88]	; (800d72c <_vfiprintf_r+0x258>)
 800d6d4:	a904      	add	r1, sp, #16
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f7fc f94c 	bl	8009974 <_printf_float>
 800d6dc:	4607      	mov	r7, r0
 800d6de:	1c78      	adds	r0, r7, #1
 800d6e0:	d1d6      	bne.n	800d690 <_vfiprintf_r+0x1bc>
 800d6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6e4:	07d9      	lsls	r1, r3, #31
 800d6e6:	d405      	bmi.n	800d6f4 <_vfiprintf_r+0x220>
 800d6e8:	89ab      	ldrh	r3, [r5, #12]
 800d6ea:	059a      	lsls	r2, r3, #22
 800d6ec:	d402      	bmi.n	800d6f4 <_vfiprintf_r+0x220>
 800d6ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6f0:	f7ff f8d2 	bl	800c898 <__retarget_lock_release_recursive>
 800d6f4:	89ab      	ldrh	r3, [r5, #12]
 800d6f6:	065b      	lsls	r3, r3, #25
 800d6f8:	f53f af12 	bmi.w	800d520 <_vfiprintf_r+0x4c>
 800d6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6fe:	e711      	b.n	800d524 <_vfiprintf_r+0x50>
 800d700:	ab03      	add	r3, sp, #12
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	462a      	mov	r2, r5
 800d706:	4b09      	ldr	r3, [pc, #36]	; (800d72c <_vfiprintf_r+0x258>)
 800d708:	a904      	add	r1, sp, #16
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7fc fbd6 	bl	8009ebc <_printf_i>
 800d710:	e7e4      	b.n	800d6dc <_vfiprintf_r+0x208>
 800d712:	bf00      	nop
 800d714:	0800f768 	.word	0x0800f768
 800d718:	0800f788 	.word	0x0800f788
 800d71c:	0800f748 	.word	0x0800f748
 800d720:	0800f984 	.word	0x0800f984
 800d724:	0800f98e 	.word	0x0800f98e
 800d728:	08009975 	.word	0x08009975
 800d72c:	0800d4af 	.word	0x0800d4af
 800d730:	0800f98a 	.word	0x0800f98a

0800d734 <_putc_r>:
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	460d      	mov	r5, r1
 800d738:	4614      	mov	r4, r2
 800d73a:	4606      	mov	r6, r0
 800d73c:	b118      	cbz	r0, 800d746 <_putc_r+0x12>
 800d73e:	6983      	ldr	r3, [r0, #24]
 800d740:	b90b      	cbnz	r3, 800d746 <_putc_r+0x12>
 800d742:	f7fe fc97 	bl	800c074 <__sinit>
 800d746:	4b1c      	ldr	r3, [pc, #112]	; (800d7b8 <_putc_r+0x84>)
 800d748:	429c      	cmp	r4, r3
 800d74a:	d124      	bne.n	800d796 <_putc_r+0x62>
 800d74c:	6874      	ldr	r4, [r6, #4]
 800d74e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d750:	07d8      	lsls	r0, r3, #31
 800d752:	d405      	bmi.n	800d760 <_putc_r+0x2c>
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	0599      	lsls	r1, r3, #22
 800d758:	d402      	bmi.n	800d760 <_putc_r+0x2c>
 800d75a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d75c:	f7ff f89b 	bl	800c896 <__retarget_lock_acquire_recursive>
 800d760:	68a3      	ldr	r3, [r4, #8]
 800d762:	3b01      	subs	r3, #1
 800d764:	2b00      	cmp	r3, #0
 800d766:	60a3      	str	r3, [r4, #8]
 800d768:	da05      	bge.n	800d776 <_putc_r+0x42>
 800d76a:	69a2      	ldr	r2, [r4, #24]
 800d76c:	4293      	cmp	r3, r2
 800d76e:	db1c      	blt.n	800d7aa <_putc_r+0x76>
 800d770:	b2eb      	uxtb	r3, r5
 800d772:	2b0a      	cmp	r3, #10
 800d774:	d019      	beq.n	800d7aa <_putc_r+0x76>
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	1c5a      	adds	r2, r3, #1
 800d77a:	6022      	str	r2, [r4, #0]
 800d77c:	701d      	strb	r5, [r3, #0]
 800d77e:	b2ed      	uxtb	r5, r5
 800d780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d782:	07da      	lsls	r2, r3, #31
 800d784:	d405      	bmi.n	800d792 <_putc_r+0x5e>
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	059b      	lsls	r3, r3, #22
 800d78a:	d402      	bmi.n	800d792 <_putc_r+0x5e>
 800d78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d78e:	f7ff f883 	bl	800c898 <__retarget_lock_release_recursive>
 800d792:	4628      	mov	r0, r5
 800d794:	bd70      	pop	{r4, r5, r6, pc}
 800d796:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <_putc_r+0x88>)
 800d798:	429c      	cmp	r4, r3
 800d79a:	d101      	bne.n	800d7a0 <_putc_r+0x6c>
 800d79c:	68b4      	ldr	r4, [r6, #8]
 800d79e:	e7d6      	b.n	800d74e <_putc_r+0x1a>
 800d7a0:	4b07      	ldr	r3, [pc, #28]	; (800d7c0 <_putc_r+0x8c>)
 800d7a2:	429c      	cmp	r4, r3
 800d7a4:	bf08      	it	eq
 800d7a6:	68f4      	ldreq	r4, [r6, #12]
 800d7a8:	e7d1      	b.n	800d74e <_putc_r+0x1a>
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	f7fd fc0e 	bl	800afd0 <__swbuf_r>
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	e7e3      	b.n	800d780 <_putc_r+0x4c>
 800d7b8:	0800f768 	.word	0x0800f768
 800d7bc:	0800f788 	.word	0x0800f788
 800d7c0:	0800f748 	.word	0x0800f748
 800d7c4:	00000000 	.word	0x00000000

0800d7c8 <nan>:
 800d7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d7d0 <nan+0x8>
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	00000000 	.word	0x00000000
 800d7d4:	7ff80000 	.word	0x7ff80000

0800d7d8 <_sbrk_r>:
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	4d06      	ldr	r5, [pc, #24]	; (800d7f4 <_sbrk_r+0x1c>)
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4604      	mov	r4, r0
 800d7e0:	4608      	mov	r0, r1
 800d7e2:	602b      	str	r3, [r5, #0]
 800d7e4:	f7f6 fe08 	bl	80043f8 <_sbrk>
 800d7e8:	1c43      	adds	r3, r0, #1
 800d7ea:	d102      	bne.n	800d7f2 <_sbrk_r+0x1a>
 800d7ec:	682b      	ldr	r3, [r5, #0]
 800d7ee:	b103      	cbz	r3, 800d7f2 <_sbrk_r+0x1a>
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	bd38      	pop	{r3, r4, r5, pc}
 800d7f4:	2000959c 	.word	0x2000959c

0800d7f8 <__sread>:
 800d7f8:	b510      	push	{r4, lr}
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d800:	f000 f8ee 	bl	800d9e0 <_read_r>
 800d804:	2800      	cmp	r0, #0
 800d806:	bfab      	itete	ge
 800d808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d80a:	89a3      	ldrhlt	r3, [r4, #12]
 800d80c:	181b      	addge	r3, r3, r0
 800d80e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d812:	bfac      	ite	ge
 800d814:	6563      	strge	r3, [r4, #84]	; 0x54
 800d816:	81a3      	strhlt	r3, [r4, #12]
 800d818:	bd10      	pop	{r4, pc}

0800d81a <__swrite>:
 800d81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81e:	461f      	mov	r7, r3
 800d820:	898b      	ldrh	r3, [r1, #12]
 800d822:	05db      	lsls	r3, r3, #23
 800d824:	4605      	mov	r5, r0
 800d826:	460c      	mov	r4, r1
 800d828:	4616      	mov	r6, r2
 800d82a:	d505      	bpl.n	800d838 <__swrite+0x1e>
 800d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d830:	2302      	movs	r3, #2
 800d832:	2200      	movs	r2, #0
 800d834:	f000 f8b6 	bl	800d9a4 <_lseek_r>
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d842:	81a3      	strh	r3, [r4, #12]
 800d844:	4632      	mov	r2, r6
 800d846:	463b      	mov	r3, r7
 800d848:	4628      	mov	r0, r5
 800d84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d84e:	f000 b835 	b.w	800d8bc <_write_r>

0800d852 <__sseek>:
 800d852:	b510      	push	{r4, lr}
 800d854:	460c      	mov	r4, r1
 800d856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d85a:	f000 f8a3 	bl	800d9a4 <_lseek_r>
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	89a3      	ldrh	r3, [r4, #12]
 800d862:	bf15      	itete	ne
 800d864:	6560      	strne	r0, [r4, #84]	; 0x54
 800d866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d86e:	81a3      	strheq	r3, [r4, #12]
 800d870:	bf18      	it	ne
 800d872:	81a3      	strhne	r3, [r4, #12]
 800d874:	bd10      	pop	{r4, pc}

0800d876 <__sclose>:
 800d876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d87a:	f000 b84f 	b.w	800d91c <_close_r>

0800d87e <strncmp>:
 800d87e:	b510      	push	{r4, lr}
 800d880:	b16a      	cbz	r2, 800d89e <strncmp+0x20>
 800d882:	3901      	subs	r1, #1
 800d884:	1884      	adds	r4, r0, r2
 800d886:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d88a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d88e:	4293      	cmp	r3, r2
 800d890:	d103      	bne.n	800d89a <strncmp+0x1c>
 800d892:	42a0      	cmp	r0, r4
 800d894:	d001      	beq.n	800d89a <strncmp+0x1c>
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1f5      	bne.n	800d886 <strncmp+0x8>
 800d89a:	1a98      	subs	r0, r3, r2
 800d89c:	bd10      	pop	{r4, pc}
 800d89e:	4610      	mov	r0, r2
 800d8a0:	e7fc      	b.n	800d89c <strncmp+0x1e>

0800d8a2 <__ascii_wctomb>:
 800d8a2:	b149      	cbz	r1, 800d8b8 <__ascii_wctomb+0x16>
 800d8a4:	2aff      	cmp	r2, #255	; 0xff
 800d8a6:	bf85      	ittet	hi
 800d8a8:	238a      	movhi	r3, #138	; 0x8a
 800d8aa:	6003      	strhi	r3, [r0, #0]
 800d8ac:	700a      	strbls	r2, [r1, #0]
 800d8ae:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8b2:	bf98      	it	ls
 800d8b4:	2001      	movls	r0, #1
 800d8b6:	4770      	bx	lr
 800d8b8:	4608      	mov	r0, r1
 800d8ba:	4770      	bx	lr

0800d8bc <_write_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	4d07      	ldr	r5, [pc, #28]	; (800d8dc <_write_r+0x20>)
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	4608      	mov	r0, r1
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	602a      	str	r2, [r5, #0]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f7f6 fd78 	bl	80043c0 <_write>
 800d8d0:	1c43      	adds	r3, r0, #1
 800d8d2:	d102      	bne.n	800d8da <_write_r+0x1e>
 800d8d4:	682b      	ldr	r3, [r5, #0]
 800d8d6:	b103      	cbz	r3, 800d8da <_write_r+0x1e>
 800d8d8:	6023      	str	r3, [r4, #0]
 800d8da:	bd38      	pop	{r3, r4, r5, pc}
 800d8dc:	2000959c 	.word	0x2000959c

0800d8e0 <__assert_func>:
 800d8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8e2:	4614      	mov	r4, r2
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	4b09      	ldr	r3, [pc, #36]	; (800d90c <__assert_func+0x2c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	68d8      	ldr	r0, [r3, #12]
 800d8ee:	b14c      	cbz	r4, 800d904 <__assert_func+0x24>
 800d8f0:	4b07      	ldr	r3, [pc, #28]	; (800d910 <__assert_func+0x30>)
 800d8f2:	9100      	str	r1, [sp, #0]
 800d8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8f8:	4906      	ldr	r1, [pc, #24]	; (800d914 <__assert_func+0x34>)
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	f000 f81e 	bl	800d93c <fiprintf>
 800d900:	f000 f880 	bl	800da04 <abort>
 800d904:	4b04      	ldr	r3, [pc, #16]	; (800d918 <__assert_func+0x38>)
 800d906:	461c      	mov	r4, r3
 800d908:	e7f3      	b.n	800d8f2 <__assert_func+0x12>
 800d90a:	bf00      	nop
 800d90c:	2000002c 	.word	0x2000002c
 800d910:	0800f995 	.word	0x0800f995
 800d914:	0800f9a2 	.word	0x0800f9a2
 800d918:	0800f9d0 	.word	0x0800f9d0

0800d91c <_close_r>:
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4d06      	ldr	r5, [pc, #24]	; (800d938 <_close_r+0x1c>)
 800d920:	2300      	movs	r3, #0
 800d922:	4604      	mov	r4, r0
 800d924:	4608      	mov	r0, r1
 800d926:	602b      	str	r3, [r5, #0]
 800d928:	f7f6 fd58 	bl	80043dc <_close>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_close_r+0x1a>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	b103      	cbz	r3, 800d936 <_close_r+0x1a>
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	2000959c 	.word	0x2000959c

0800d93c <fiprintf>:
 800d93c:	b40e      	push	{r1, r2, r3}
 800d93e:	b503      	push	{r0, r1, lr}
 800d940:	4601      	mov	r1, r0
 800d942:	ab03      	add	r3, sp, #12
 800d944:	4805      	ldr	r0, [pc, #20]	; (800d95c <fiprintf+0x20>)
 800d946:	f853 2b04 	ldr.w	r2, [r3], #4
 800d94a:	6800      	ldr	r0, [r0, #0]
 800d94c:	9301      	str	r3, [sp, #4]
 800d94e:	f7ff fdc1 	bl	800d4d4 <_vfiprintf_r>
 800d952:	b002      	add	sp, #8
 800d954:	f85d eb04 	ldr.w	lr, [sp], #4
 800d958:	b003      	add	sp, #12
 800d95a:	4770      	bx	lr
 800d95c:	2000002c 	.word	0x2000002c

0800d960 <_fstat_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	4d07      	ldr	r5, [pc, #28]	; (800d980 <_fstat_r+0x20>)
 800d964:	2300      	movs	r3, #0
 800d966:	4604      	mov	r4, r0
 800d968:	4608      	mov	r0, r1
 800d96a:	4611      	mov	r1, r2
 800d96c:	602b      	str	r3, [r5, #0]
 800d96e:	f7f6 fd39 	bl	80043e4 <_fstat>
 800d972:	1c43      	adds	r3, r0, #1
 800d974:	d102      	bne.n	800d97c <_fstat_r+0x1c>
 800d976:	682b      	ldr	r3, [r5, #0]
 800d978:	b103      	cbz	r3, 800d97c <_fstat_r+0x1c>
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	bd38      	pop	{r3, r4, r5, pc}
 800d97e:	bf00      	nop
 800d980:	2000959c 	.word	0x2000959c

0800d984 <_isatty_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4d06      	ldr	r5, [pc, #24]	; (800d9a0 <_isatty_r+0x1c>)
 800d988:	2300      	movs	r3, #0
 800d98a:	4604      	mov	r4, r0
 800d98c:	4608      	mov	r0, r1
 800d98e:	602b      	str	r3, [r5, #0]
 800d990:	f7f6 fd2e 	bl	80043f0 <_isatty>
 800d994:	1c43      	adds	r3, r0, #1
 800d996:	d102      	bne.n	800d99e <_isatty_r+0x1a>
 800d998:	682b      	ldr	r3, [r5, #0]
 800d99a:	b103      	cbz	r3, 800d99e <_isatty_r+0x1a>
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
 800d9a0:	2000959c 	.word	0x2000959c

0800d9a4 <_lseek_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	4d07      	ldr	r5, [pc, #28]	; (800d9c4 <_lseek_r+0x20>)
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	4608      	mov	r0, r1
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	602a      	str	r2, [r5, #0]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	f7f6 fd1e 	bl	80043f4 <_lseek>
 800d9b8:	1c43      	adds	r3, r0, #1
 800d9ba:	d102      	bne.n	800d9c2 <_lseek_r+0x1e>
 800d9bc:	682b      	ldr	r3, [r5, #0]
 800d9be:	b103      	cbz	r3, 800d9c2 <_lseek_r+0x1e>
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	bd38      	pop	{r3, r4, r5, pc}
 800d9c4:	2000959c 	.word	0x2000959c

0800d9c8 <__malloc_lock>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	; (800d9d0 <__malloc_lock+0x8>)
 800d9ca:	f7fe bf64 	b.w	800c896 <__retarget_lock_acquire_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	20009594 	.word	0x20009594

0800d9d4 <__malloc_unlock>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	; (800d9dc <__malloc_unlock+0x8>)
 800d9d6:	f7fe bf5f 	b.w	800c898 <__retarget_lock_release_recursive>
 800d9da:	bf00      	nop
 800d9dc:	20009594 	.word	0x20009594

0800d9e0 <_read_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d07      	ldr	r5, [pc, #28]	; (800da00 <_read_r+0x20>)
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	4608      	mov	r0, r1
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	602a      	str	r2, [r5, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	f7f6 fcd8 	bl	80043a4 <_read>
 800d9f4:	1c43      	adds	r3, r0, #1
 800d9f6:	d102      	bne.n	800d9fe <_read_r+0x1e>
 800d9f8:	682b      	ldr	r3, [r5, #0]
 800d9fa:	b103      	cbz	r3, 800d9fe <_read_r+0x1e>
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	bd38      	pop	{r3, r4, r5, pc}
 800da00:	2000959c 	.word	0x2000959c

0800da04 <abort>:
 800da04:	b508      	push	{r3, lr}
 800da06:	2006      	movs	r0, #6
 800da08:	f000 f82c 	bl	800da64 <raise>
 800da0c:	2001      	movs	r0, #1
 800da0e:	f7f6 fcc3 	bl	8004398 <_exit>

0800da12 <_raise_r>:
 800da12:	291f      	cmp	r1, #31
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	d904      	bls.n	800da26 <_raise_r+0x14>
 800da1c:	2316      	movs	r3, #22
 800da1e:	6003      	str	r3, [r0, #0]
 800da20:	f04f 30ff 	mov.w	r0, #4294967295
 800da24:	bd38      	pop	{r3, r4, r5, pc}
 800da26:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da28:	b112      	cbz	r2, 800da30 <_raise_r+0x1e>
 800da2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da2e:	b94b      	cbnz	r3, 800da44 <_raise_r+0x32>
 800da30:	4620      	mov	r0, r4
 800da32:	f000 f831 	bl	800da98 <_getpid_r>
 800da36:	462a      	mov	r2, r5
 800da38:	4601      	mov	r1, r0
 800da3a:	4620      	mov	r0, r4
 800da3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da40:	f000 b818 	b.w	800da74 <_kill_r>
 800da44:	2b01      	cmp	r3, #1
 800da46:	d00a      	beq.n	800da5e <_raise_r+0x4c>
 800da48:	1c59      	adds	r1, r3, #1
 800da4a:	d103      	bne.n	800da54 <_raise_r+0x42>
 800da4c:	2316      	movs	r3, #22
 800da4e:	6003      	str	r3, [r0, #0]
 800da50:	2001      	movs	r0, #1
 800da52:	e7e7      	b.n	800da24 <_raise_r+0x12>
 800da54:	2400      	movs	r4, #0
 800da56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da5a:	4628      	mov	r0, r5
 800da5c:	4798      	blx	r3
 800da5e:	2000      	movs	r0, #0
 800da60:	e7e0      	b.n	800da24 <_raise_r+0x12>
	...

0800da64 <raise>:
 800da64:	4b02      	ldr	r3, [pc, #8]	; (800da70 <raise+0xc>)
 800da66:	4601      	mov	r1, r0
 800da68:	6818      	ldr	r0, [r3, #0]
 800da6a:	f7ff bfd2 	b.w	800da12 <_raise_r>
 800da6e:	bf00      	nop
 800da70:	2000002c 	.word	0x2000002c

0800da74 <_kill_r>:
 800da74:	b538      	push	{r3, r4, r5, lr}
 800da76:	4d07      	ldr	r5, [pc, #28]	; (800da94 <_kill_r+0x20>)
 800da78:	2300      	movs	r3, #0
 800da7a:	4604      	mov	r4, r0
 800da7c:	4608      	mov	r0, r1
 800da7e:	4611      	mov	r1, r2
 800da80:	602b      	str	r3, [r5, #0]
 800da82:	f7f6 fc81 	bl	8004388 <_kill>
 800da86:	1c43      	adds	r3, r0, #1
 800da88:	d102      	bne.n	800da90 <_kill_r+0x1c>
 800da8a:	682b      	ldr	r3, [r5, #0]
 800da8c:	b103      	cbz	r3, 800da90 <_kill_r+0x1c>
 800da8e:	6023      	str	r3, [r4, #0]
 800da90:	bd38      	pop	{r3, r4, r5, pc}
 800da92:	bf00      	nop
 800da94:	2000959c 	.word	0x2000959c

0800da98 <_getpid_r>:
 800da98:	f7f6 bc74 	b.w	8004384 <_getpid>

0800da9c <round>:
 800da9c:	ec51 0b10 	vmov	r0, r1, d0
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800daa6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800daaa:	2c13      	cmp	r4, #19
 800daac:	ee10 2a10 	vmov	r2, s0
 800dab0:	460b      	mov	r3, r1
 800dab2:	dc19      	bgt.n	800dae8 <round+0x4c>
 800dab4:	2c00      	cmp	r4, #0
 800dab6:	da09      	bge.n	800dacc <round+0x30>
 800dab8:	3401      	adds	r4, #1
 800daba:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dabe:	d103      	bne.n	800dac8 <round+0x2c>
 800dac0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dac4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dac8:	2100      	movs	r1, #0
 800daca:	e028      	b.n	800db1e <round+0x82>
 800dacc:	4d15      	ldr	r5, [pc, #84]	; (800db24 <round+0x88>)
 800dace:	4125      	asrs	r5, r4
 800dad0:	ea01 0605 	and.w	r6, r1, r5
 800dad4:	4332      	orrs	r2, r6
 800dad6:	d00e      	beq.n	800daf6 <round+0x5a>
 800dad8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dadc:	fa42 f404 	asr.w	r4, r2, r4
 800dae0:	4423      	add	r3, r4
 800dae2:	ea23 0305 	bic.w	r3, r3, r5
 800dae6:	e7ef      	b.n	800dac8 <round+0x2c>
 800dae8:	2c33      	cmp	r4, #51	; 0x33
 800daea:	dd07      	ble.n	800dafc <round+0x60>
 800daec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800daf0:	d101      	bne.n	800daf6 <round+0x5a>
 800daf2:	f7f2 fbf3 	bl	80002dc <__adddf3>
 800daf6:	ec41 0b10 	vmov	d0, r0, r1
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800db00:	f04f 35ff 	mov.w	r5, #4294967295
 800db04:	40f5      	lsrs	r5, r6
 800db06:	4228      	tst	r0, r5
 800db08:	d0f5      	beq.n	800daf6 <round+0x5a>
 800db0a:	2101      	movs	r1, #1
 800db0c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800db10:	fa01 f404 	lsl.w	r4, r1, r4
 800db14:	1912      	adds	r2, r2, r4
 800db16:	bf28      	it	cs
 800db18:	185b      	addcs	r3, r3, r1
 800db1a:	ea22 0105 	bic.w	r1, r2, r5
 800db1e:	4608      	mov	r0, r1
 800db20:	4619      	mov	r1, r3
 800db22:	e7e8      	b.n	800daf6 <round+0x5a>
 800db24:	000fffff 	.word	0x000fffff

0800db28 <exp>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	ed2d 8b02 	vpush	{d8}
 800db2e:	ec55 4b10 	vmov	r4, r5, d0
 800db32:	f000 f875 	bl	800dc20 <__ieee754_exp>
 800db36:	4b22      	ldr	r3, [pc, #136]	; (800dbc0 <exp+0x98>)
 800db38:	eeb0 8a40 	vmov.f32	s16, s0
 800db3c:	eef0 8a60 	vmov.f32	s17, s1
 800db40:	f993 3000 	ldrsb.w	r3, [r3]
 800db44:	3301      	adds	r3, #1
 800db46:	d012      	beq.n	800db6e <exp+0x46>
 800db48:	ec45 4b10 	vmov	d0, r4, r5
 800db4c:	f000 fa64 	bl	800e018 <finite>
 800db50:	b168      	cbz	r0, 800db6e <exp+0x46>
 800db52:	a313      	add	r3, pc, #76	; (adr r3, 800dba0 <exp+0x78>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	4620      	mov	r0, r4
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7f3 f804 	bl	8000b68 <__aeabi_dcmpgt>
 800db60:	b160      	cbz	r0, 800db7c <exp+0x54>
 800db62:	f7fb fe0d 	bl	8009780 <__errno>
 800db66:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800dba8 <exp+0x80>
 800db6a:	2322      	movs	r3, #34	; 0x22
 800db6c:	6003      	str	r3, [r0, #0]
 800db6e:	eeb0 0a48 	vmov.f32	s0, s16
 800db72:	eef0 0a68 	vmov.f32	s1, s17
 800db76:	ecbd 8b02 	vpop	{d8}
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
 800db7c:	a30c      	add	r3, pc, #48	; (adr r3, 800dbb0 <exp+0x88>)
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	4620      	mov	r0, r4
 800db84:	4629      	mov	r1, r5
 800db86:	f7f2 ffd1 	bl	8000b2c <__aeabi_dcmplt>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d0ef      	beq.n	800db6e <exp+0x46>
 800db8e:	f7fb fdf7 	bl	8009780 <__errno>
 800db92:	2322      	movs	r3, #34	; 0x22
 800db94:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800dbb8 <exp+0x90>
 800db98:	6003      	str	r3, [r0, #0]
 800db9a:	e7e8      	b.n	800db6e <exp+0x46>
 800db9c:	f3af 8000 	nop.w
 800dba0:	fefa39ef 	.word	0xfefa39ef
 800dba4:	40862e42 	.word	0x40862e42
 800dba8:	00000000 	.word	0x00000000
 800dbac:	7ff00000 	.word	0x7ff00000
 800dbb0:	d52d3051 	.word	0xd52d3051
 800dbb4:	c0874910 	.word	0xc0874910
	...
 800dbc0:	20000200 	.word	0x20000200

0800dbc4 <fmodf>:
 800dbc4:	b508      	push	{r3, lr}
 800dbc6:	ed2d 8b02 	vpush	{d8}
 800dbca:	eef0 8a40 	vmov.f32	s17, s0
 800dbce:	eeb0 8a60 	vmov.f32	s16, s1
 800dbd2:	f000 f99f 	bl	800df14 <__ieee754_fmodf>
 800dbd6:	4b0f      	ldr	r3, [pc, #60]	; (800dc14 <fmodf+0x50>)
 800dbd8:	f993 3000 	ldrsb.w	r3, [r3]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	d016      	beq.n	800dc0e <fmodf+0x4a>
 800dbe0:	eeb4 8a48 	vcmp.f32	s16, s16
 800dbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe8:	d611      	bvs.n	800dc0e <fmodf+0x4a>
 800dbea:	eef4 8a68 	vcmp.f32	s17, s17
 800dbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf2:	d60c      	bvs.n	800dc0e <fmodf+0x4a>
 800dbf4:	eddf 8a08 	vldr	s17, [pc, #32]	; 800dc18 <fmodf+0x54>
 800dbf8:	eeb4 8a68 	vcmp.f32	s16, s17
 800dbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc00:	d105      	bne.n	800dc0e <fmodf+0x4a>
 800dc02:	f7fb fdbd 	bl	8009780 <__errno>
 800dc06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dc0a:	2321      	movs	r3, #33	; 0x21
 800dc0c:	6003      	str	r3, [r0, #0]
 800dc0e:	ecbd 8b02 	vpop	{d8}
 800dc12:	bd08      	pop	{r3, pc}
 800dc14:	20000200 	.word	0x20000200
	...

0800dc20 <__ieee754_exp>:
 800dc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc24:	ec55 4b10 	vmov	r4, r5, d0
 800dc28:	49b1      	ldr	r1, [pc, #708]	; (800def0 <__ieee754_exp+0x2d0>)
 800dc2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc2e:	428b      	cmp	r3, r1
 800dc30:	ed2d 8b04 	vpush	{d8-d9}
 800dc34:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800dc38:	d937      	bls.n	800dcaa <__ieee754_exp+0x8a>
 800dc3a:	49ae      	ldr	r1, [pc, #696]	; (800def4 <__ieee754_exp+0x2d4>)
 800dc3c:	428b      	cmp	r3, r1
 800dc3e:	d916      	bls.n	800dc6e <__ieee754_exp+0x4e>
 800dc40:	ee10 3a10 	vmov	r3, s0
 800dc44:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	d009      	beq.n	800dc60 <__ieee754_exp+0x40>
 800dc4c:	ee10 2a10 	vmov	r2, s0
 800dc50:	462b      	mov	r3, r5
 800dc52:	4620      	mov	r0, r4
 800dc54:	4629      	mov	r1, r5
 800dc56:	f7f2 fb41 	bl	80002dc <__adddf3>
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	460d      	mov	r5, r1
 800dc5e:	e000      	b.n	800dc62 <__ieee754_exp+0x42>
 800dc60:	bb06      	cbnz	r6, 800dca4 <__ieee754_exp+0x84>
 800dc62:	ecbd 8b04 	vpop	{d8-d9}
 800dc66:	ec45 4b10 	vmov	d0, r4, r5
 800dc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6e:	a38a      	add	r3, pc, #552	; (adr r3, 800de98 <__ieee754_exp+0x278>)
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	ee10 0a10 	vmov	r0, s0
 800dc78:	4629      	mov	r1, r5
 800dc7a:	f7f2 ff75 	bl	8000b68 <__aeabi_dcmpgt>
 800dc7e:	b138      	cbz	r0, 800dc90 <__ieee754_exp+0x70>
 800dc80:	a387      	add	r3, pc, #540	; (adr r3, 800dea0 <__ieee754_exp+0x280>)
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	4610      	mov	r0, r2
 800dc88:	4619      	mov	r1, r3
 800dc8a:	f7f2 fcdd 	bl	8000648 <__aeabi_dmul>
 800dc8e:	e7e4      	b.n	800dc5a <__ieee754_exp+0x3a>
 800dc90:	a385      	add	r3, pc, #532	; (adr r3, 800dea8 <__ieee754_exp+0x288>)
 800dc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc96:	4620      	mov	r0, r4
 800dc98:	4629      	mov	r1, r5
 800dc9a:	f7f2 ff47 	bl	8000b2c <__aeabi_dcmplt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f000 8087 	beq.w	800ddb2 <__ieee754_exp+0x192>
 800dca4:	2400      	movs	r4, #0
 800dca6:	2500      	movs	r5, #0
 800dca8:	e7db      	b.n	800dc62 <__ieee754_exp+0x42>
 800dcaa:	4a93      	ldr	r2, [pc, #588]	; (800def8 <__ieee754_exp+0x2d8>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	f240 80ac 	bls.w	800de0a <__ieee754_exp+0x1ea>
 800dcb2:	4a92      	ldr	r2, [pc, #584]	; (800defc <__ieee754_exp+0x2dc>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d87c      	bhi.n	800ddb2 <__ieee754_exp+0x192>
 800dcb8:	4b91      	ldr	r3, [pc, #580]	; (800df00 <__ieee754_exp+0x2e0>)
 800dcba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	ee10 0a10 	vmov	r0, s0
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	f7f2 fb06 	bl	80002d8 <__aeabi_dsub>
 800dccc:	4b8d      	ldr	r3, [pc, #564]	; (800df04 <__ieee754_exp+0x2e4>)
 800dcce:	00f7      	lsls	r7, r6, #3
 800dcd0:	443b      	add	r3, r7
 800dcd2:	ed93 7b00 	vldr	d7, [r3]
 800dcd6:	f1c6 0a01 	rsb	sl, r6, #1
 800dcda:	4680      	mov	r8, r0
 800dcdc:	4689      	mov	r9, r1
 800dcde:	ebaa 0a06 	sub.w	sl, sl, r6
 800dce2:	eeb0 8a47 	vmov.f32	s16, s14
 800dce6:	eef0 8a67 	vmov.f32	s17, s15
 800dcea:	ec53 2b18 	vmov	r2, r3, d8
 800dcee:	4640      	mov	r0, r8
 800dcf0:	4649      	mov	r1, r9
 800dcf2:	f7f2 faf1 	bl	80002d8 <__aeabi_dsub>
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	4620      	mov	r0, r4
 800dd00:	4629      	mov	r1, r5
 800dd02:	f7f2 fca1 	bl	8000648 <__aeabi_dmul>
 800dd06:	a36a      	add	r3, pc, #424	; (adr r3, 800deb0 <__ieee754_exp+0x290>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460f      	mov	r7, r1
 800dd10:	f7f2 fc9a 	bl	8000648 <__aeabi_dmul>
 800dd14:	a368      	add	r3, pc, #416	; (adr r3, 800deb8 <__ieee754_exp+0x298>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f7f2 fadd 	bl	80002d8 <__aeabi_dsub>
 800dd1e:	4632      	mov	r2, r6
 800dd20:	463b      	mov	r3, r7
 800dd22:	f7f2 fc91 	bl	8000648 <__aeabi_dmul>
 800dd26:	a366      	add	r3, pc, #408	; (adr r3, 800dec0 <__ieee754_exp+0x2a0>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	f7f2 fad6 	bl	80002dc <__adddf3>
 800dd30:	4632      	mov	r2, r6
 800dd32:	463b      	mov	r3, r7
 800dd34:	f7f2 fc88 	bl	8000648 <__aeabi_dmul>
 800dd38:	a363      	add	r3, pc, #396	; (adr r3, 800dec8 <__ieee754_exp+0x2a8>)
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	f7f2 facb 	bl	80002d8 <__aeabi_dsub>
 800dd42:	4632      	mov	r2, r6
 800dd44:	463b      	mov	r3, r7
 800dd46:	f7f2 fc7f 	bl	8000648 <__aeabi_dmul>
 800dd4a:	a361      	add	r3, pc, #388	; (adr r3, 800ded0 <__ieee754_exp+0x2b0>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 fac4 	bl	80002dc <__adddf3>
 800dd54:	4632      	mov	r2, r6
 800dd56:	463b      	mov	r3, r7
 800dd58:	f7f2 fc76 	bl	8000648 <__aeabi_dmul>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	460b      	mov	r3, r1
 800dd60:	4620      	mov	r0, r4
 800dd62:	4629      	mov	r1, r5
 800dd64:	f7f2 fab8 	bl	80002d8 <__aeabi_dsub>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	460f      	mov	r7, r1
 800dd70:	4620      	mov	r0, r4
 800dd72:	4629      	mov	r1, r5
 800dd74:	f7f2 fc68 	bl	8000648 <__aeabi_dmul>
 800dd78:	ec41 0b19 	vmov	d9, r0, r1
 800dd7c:	f1ba 0f00 	cmp.w	sl, #0
 800dd80:	d15d      	bne.n	800de3e <__ieee754_exp+0x21e>
 800dd82:	2200      	movs	r2, #0
 800dd84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	f7f2 faa4 	bl	80002d8 <__aeabi_dsub>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	ec51 0b19 	vmov	r0, r1, d9
 800dd98:	f7f2 fd80 	bl	800089c <__aeabi_ddiv>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	462b      	mov	r3, r5
 800dda0:	f7f2 fa9a 	bl	80002d8 <__aeabi_dsub>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	2000      	movs	r0, #0
 800ddaa:	4957      	ldr	r1, [pc, #348]	; (800df08 <__ieee754_exp+0x2e8>)
 800ddac:	f7f2 fa94 	bl	80002d8 <__aeabi_dsub>
 800ddb0:	e753      	b.n	800dc5a <__ieee754_exp+0x3a>
 800ddb2:	4856      	ldr	r0, [pc, #344]	; (800df0c <__ieee754_exp+0x2ec>)
 800ddb4:	a348      	add	r3, pc, #288	; (adr r3, 800ded8 <__ieee754_exp+0x2b8>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ddbe:	4629      	mov	r1, r5
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f7f2 fc41 	bl	8000648 <__aeabi_dmul>
 800ddc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddca:	f7f2 fa87 	bl	80002dc <__adddf3>
 800ddce:	f7f2 feeb 	bl	8000ba8 <__aeabi_d2iz>
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	f7f2 fbce 	bl	8000574 <__aeabi_i2d>
 800ddd8:	a341      	add	r3, pc, #260	; (adr r3, 800dee0 <__ieee754_exp+0x2c0>)
 800ddda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddde:	4606      	mov	r6, r0
 800dde0:	460f      	mov	r7, r1
 800dde2:	f7f2 fc31 	bl	8000648 <__aeabi_dmul>
 800dde6:	4602      	mov	r2, r0
 800dde8:	460b      	mov	r3, r1
 800ddea:	4620      	mov	r0, r4
 800ddec:	4629      	mov	r1, r5
 800ddee:	f7f2 fa73 	bl	80002d8 <__aeabi_dsub>
 800ddf2:	a33d      	add	r3, pc, #244	; (adr r3, 800dee8 <__ieee754_exp+0x2c8>)
 800ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf8:	4680      	mov	r8, r0
 800ddfa:	4689      	mov	r9, r1
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	4639      	mov	r1, r7
 800de00:	f7f2 fc22 	bl	8000648 <__aeabi_dmul>
 800de04:	ec41 0b18 	vmov	d8, r0, r1
 800de08:	e76f      	b.n	800dcea <__ieee754_exp+0xca>
 800de0a:	4a41      	ldr	r2, [pc, #260]	; (800df10 <__ieee754_exp+0x2f0>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d811      	bhi.n	800de34 <__ieee754_exp+0x214>
 800de10:	a323      	add	r3, pc, #140	; (adr r3, 800dea0 <__ieee754_exp+0x280>)
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	ee10 0a10 	vmov	r0, s0
 800de1a:	4629      	mov	r1, r5
 800de1c:	f7f2 fa5e 	bl	80002dc <__adddf3>
 800de20:	4b39      	ldr	r3, [pc, #228]	; (800df08 <__ieee754_exp+0x2e8>)
 800de22:	2200      	movs	r2, #0
 800de24:	f7f2 fea0 	bl	8000b68 <__aeabi_dcmpgt>
 800de28:	b138      	cbz	r0, 800de3a <__ieee754_exp+0x21a>
 800de2a:	4b37      	ldr	r3, [pc, #220]	; (800df08 <__ieee754_exp+0x2e8>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	4620      	mov	r0, r4
 800de30:	4629      	mov	r1, r5
 800de32:	e710      	b.n	800dc56 <__ieee754_exp+0x36>
 800de34:	f04f 0a00 	mov.w	sl, #0
 800de38:	e75f      	b.n	800dcfa <__ieee754_exp+0xda>
 800de3a:	4682      	mov	sl, r0
 800de3c:	e75d      	b.n	800dcfa <__ieee754_exp+0xda>
 800de3e:	4632      	mov	r2, r6
 800de40:	463b      	mov	r3, r7
 800de42:	2000      	movs	r0, #0
 800de44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800de48:	f7f2 fa46 	bl	80002d8 <__aeabi_dsub>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	ec51 0b19 	vmov	r0, r1, d9
 800de54:	f7f2 fd22 	bl	800089c <__aeabi_ddiv>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	ec51 0b18 	vmov	r0, r1, d8
 800de60:	f7f2 fa3a 	bl	80002d8 <__aeabi_dsub>
 800de64:	4642      	mov	r2, r8
 800de66:	464b      	mov	r3, r9
 800de68:	f7f2 fa36 	bl	80002d8 <__aeabi_dsub>
 800de6c:	4602      	mov	r2, r0
 800de6e:	460b      	mov	r3, r1
 800de70:	2000      	movs	r0, #0
 800de72:	4925      	ldr	r1, [pc, #148]	; (800df08 <__ieee754_exp+0x2e8>)
 800de74:	f7f2 fa30 	bl	80002d8 <__aeabi_dsub>
 800de78:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800de7c:	4592      	cmp	sl, r2
 800de7e:	db02      	blt.n	800de86 <__ieee754_exp+0x266>
 800de80:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800de84:	e6e9      	b.n	800dc5a <__ieee754_exp+0x3a>
 800de86:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800de8a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800de8e:	2200      	movs	r2, #0
 800de90:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800de94:	e6f9      	b.n	800dc8a <__ieee754_exp+0x6a>
 800de96:	bf00      	nop
 800de98:	fefa39ef 	.word	0xfefa39ef
 800de9c:	40862e42 	.word	0x40862e42
 800dea0:	8800759c 	.word	0x8800759c
 800dea4:	7e37e43c 	.word	0x7e37e43c
 800dea8:	d52d3051 	.word	0xd52d3051
 800deac:	c0874910 	.word	0xc0874910
 800deb0:	72bea4d0 	.word	0x72bea4d0
 800deb4:	3e663769 	.word	0x3e663769
 800deb8:	c5d26bf1 	.word	0xc5d26bf1
 800debc:	3ebbbd41 	.word	0x3ebbbd41
 800dec0:	af25de2c 	.word	0xaf25de2c
 800dec4:	3f11566a 	.word	0x3f11566a
 800dec8:	16bebd93 	.word	0x16bebd93
 800decc:	3f66c16c 	.word	0x3f66c16c
 800ded0:	5555553e 	.word	0x5555553e
 800ded4:	3fc55555 	.word	0x3fc55555
 800ded8:	652b82fe 	.word	0x652b82fe
 800dedc:	3ff71547 	.word	0x3ff71547
 800dee0:	fee00000 	.word	0xfee00000
 800dee4:	3fe62e42 	.word	0x3fe62e42
 800dee8:	35793c76 	.word	0x35793c76
 800deec:	3dea39ef 	.word	0x3dea39ef
 800def0:	40862e41 	.word	0x40862e41
 800def4:	7fefffff 	.word	0x7fefffff
 800def8:	3fd62e42 	.word	0x3fd62e42
 800defc:	3ff0a2b1 	.word	0x3ff0a2b1
 800df00:	0800f9e8 	.word	0x0800f9e8
 800df04:	0800f9f8 	.word	0x0800f9f8
 800df08:	3ff00000 	.word	0x3ff00000
 800df0c:	0800f9d8 	.word	0x0800f9d8
 800df10:	3e2fffff 	.word	0x3e2fffff

0800df14 <__ieee754_fmodf>:
 800df14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df16:	ee10 6a90 	vmov	r6, s1
 800df1a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800df1e:	d009      	beq.n	800df34 <__ieee754_fmodf+0x20>
 800df20:	ee10 2a10 	vmov	r2, s0
 800df24:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800df28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df2c:	da02      	bge.n	800df34 <__ieee754_fmodf+0x20>
 800df2e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800df32:	dd04      	ble.n	800df3e <__ieee754_fmodf+0x2a>
 800df34:	ee60 0a20 	vmul.f32	s1, s0, s1
 800df38:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800df3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3e:	42ab      	cmp	r3, r5
 800df40:	dbfc      	blt.n	800df3c <__ieee754_fmodf+0x28>
 800df42:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800df46:	d106      	bne.n	800df56 <__ieee754_fmodf+0x42>
 800df48:	4a32      	ldr	r2, [pc, #200]	; (800e014 <__ieee754_fmodf+0x100>)
 800df4a:	0fe3      	lsrs	r3, r4, #31
 800df4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df50:	ed93 0a00 	vldr	s0, [r3]
 800df54:	e7f2      	b.n	800df3c <__ieee754_fmodf+0x28>
 800df56:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800df5a:	d13f      	bne.n	800dfdc <__ieee754_fmodf+0xc8>
 800df5c:	0219      	lsls	r1, r3, #8
 800df5e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800df62:	2900      	cmp	r1, #0
 800df64:	dc37      	bgt.n	800dfd6 <__ieee754_fmodf+0xc2>
 800df66:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800df6a:	d13d      	bne.n	800dfe8 <__ieee754_fmodf+0xd4>
 800df6c:	022f      	lsls	r7, r5, #8
 800df6e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800df72:	2f00      	cmp	r7, #0
 800df74:	da35      	bge.n	800dfe2 <__ieee754_fmodf+0xce>
 800df76:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800df7a:	bfbb      	ittet	lt
 800df7c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800df80:	1a12      	sublt	r2, r2, r0
 800df82:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800df86:	4093      	lsllt	r3, r2
 800df88:	bfa8      	it	ge
 800df8a:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800df8e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800df92:	bfb5      	itete	lt
 800df94:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800df98:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800df9c:	1a52      	sublt	r2, r2, r1
 800df9e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800dfa2:	bfb8      	it	lt
 800dfa4:	4095      	lsllt	r5, r2
 800dfa6:	1a40      	subs	r0, r0, r1
 800dfa8:	1b5a      	subs	r2, r3, r5
 800dfaa:	bb00      	cbnz	r0, 800dfee <__ieee754_fmodf+0xda>
 800dfac:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800dfb0:	bf38      	it	cc
 800dfb2:	4613      	movcc	r3, r2
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d0c7      	beq.n	800df48 <__ieee754_fmodf+0x34>
 800dfb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dfbc:	db1f      	blt.n	800dffe <__ieee754_fmodf+0xea>
 800dfbe:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800dfc2:	db1f      	blt.n	800e004 <__ieee754_fmodf+0xf0>
 800dfc4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800dfc8:	317f      	adds	r1, #127	; 0x7f
 800dfca:	4323      	orrs	r3, r4
 800dfcc:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800dfd0:	ee00 3a10 	vmov	s0, r3
 800dfd4:	e7b2      	b.n	800df3c <__ieee754_fmodf+0x28>
 800dfd6:	3801      	subs	r0, #1
 800dfd8:	0049      	lsls	r1, r1, #1
 800dfda:	e7c2      	b.n	800df62 <__ieee754_fmodf+0x4e>
 800dfdc:	15d8      	asrs	r0, r3, #23
 800dfde:	387f      	subs	r0, #127	; 0x7f
 800dfe0:	e7c1      	b.n	800df66 <__ieee754_fmodf+0x52>
 800dfe2:	3901      	subs	r1, #1
 800dfe4:	007f      	lsls	r7, r7, #1
 800dfe6:	e7c4      	b.n	800df72 <__ieee754_fmodf+0x5e>
 800dfe8:	15e9      	asrs	r1, r5, #23
 800dfea:	397f      	subs	r1, #127	; 0x7f
 800dfec:	e7c3      	b.n	800df76 <__ieee754_fmodf+0x62>
 800dfee:	2a00      	cmp	r2, #0
 800dff0:	da02      	bge.n	800dff8 <__ieee754_fmodf+0xe4>
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	3801      	subs	r0, #1
 800dff6:	e7d7      	b.n	800dfa8 <__ieee754_fmodf+0x94>
 800dff8:	d0a6      	beq.n	800df48 <__ieee754_fmodf+0x34>
 800dffa:	0053      	lsls	r3, r2, #1
 800dffc:	e7fa      	b.n	800dff4 <__ieee754_fmodf+0xe0>
 800dffe:	005b      	lsls	r3, r3, #1
 800e000:	3901      	subs	r1, #1
 800e002:	e7d9      	b.n	800dfb8 <__ieee754_fmodf+0xa4>
 800e004:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800e008:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800e00c:	3182      	adds	r1, #130	; 0x82
 800e00e:	410b      	asrs	r3, r1
 800e010:	4323      	orrs	r3, r4
 800e012:	e7dd      	b.n	800dfd0 <__ieee754_fmodf+0xbc>
 800e014:	0800fa08 	.word	0x0800fa08

0800e018 <finite>:
 800e018:	b082      	sub	sp, #8
 800e01a:	ed8d 0b00 	vstr	d0, [sp]
 800e01e:	9801      	ldr	r0, [sp, #4]
 800e020:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e024:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e028:	0fc0      	lsrs	r0, r0, #31
 800e02a:	b002      	add	sp, #8
 800e02c:	4770      	bx	lr
	...

0800e030 <_init>:
 800e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e032:	bf00      	nop
 800e034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e036:	bc08      	pop	{r3}
 800e038:	469e      	mov	lr, r3
 800e03a:	4770      	bx	lr

0800e03c <_fini>:
 800e03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03e:	bf00      	nop
 800e040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e042:	bc08      	pop	{r3}
 800e044:	469e      	mov	lr, r3
 800e046:	4770      	bx	lr
