
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdcc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800bfb0  0800bfb0  0001bfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c540  0800c540  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c548  0800c548  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c548  0800c548  0001c548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c54c  0800c54c  0001c54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009390  200001e0  0800c730  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009570  0800c730  00029570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250de  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f47  00000000  00000000  000452ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00049238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  0004acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af16  00000000  00000000  0004c5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e598  00000000  00000000  000774c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a569  00000000  00000000  00095a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001affc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008334  00000000  00000000  001b001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bf94 	.word	0x0800bf94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800bf94 	.word	0x0800bf94

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f008 f939 	bl	8009220 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_ADC1_Init+0xe8>)
 800100c:	2200      	movs	r2, #0
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	4817      	ldr	r0, [pc, #92]	; (8001078 <MX_ADC1_Init+0xe8>)
 800101a:	f002 f979 	bl	8003310 <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001024:	f001 fa58 	bl	80024d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001034:	f003 f9ee 	bl	8004414 <HAL_ADCEx_MultiModeConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800103e:	f001 fa4b 	bl	80024d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_ADC1_Init+0xec>)
 8001044:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001046:	2306      	movs	r3, #6
 8001048:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104e:	237f      	movs	r3, #127	; 0x7f
 8001050:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001052:	2304      	movs	r3, #4
 8001054:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001060:	f002 fd10 	bl	8003a84 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800106a:	f001 fa35 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000278 	.word	0x20000278
 800107c:	19200040 	.word	0x19200040

08001080 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2220      	movs	r2, #32
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f008 f8c7 	bl	8009220 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <MX_ADC2_Init+0xc0>)
 8001094:	4a2b      	ldr	r2, [pc, #172]	; (8001144 <MX_ADC2_Init+0xc4>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <MX_ADC2_Init+0xc0>)
 800109a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800109e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010fc:	f002 f908 	bl	8003310 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001106:	f001 f9e7 	bl	80024d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC2_Init+0xc8>)
 800110c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	; 0x7f
 8001118:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_ADC2_Init+0xc0>)
 8001128:	f002 fcac 	bl	8003a84 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001132:	f001 f9d1 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000020c 	.word	0x2000020c
 8001144:	50000100 	.word	0x50000100
 8001148:	1d500080 	.word	0x1d500080

0800114c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f008 f85b 	bl	8009220 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <MX_ADC3_Init+0xe4>)
 800116c:	4a31      	ldr	r2, [pc, #196]	; (8001234 <MX_ADC3_Init+0xe8>)
 800116e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <MX_ADC3_Init+0xe4>)
 8001172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001176:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_ADC3_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <MX_ADC3_Init+0xe4>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_ADC3_Init+0xe4>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_ADC3_Init+0xe4>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_ADC3_Init+0xe4>)
 8001192:	2204      	movs	r2, #4
 8001194:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_ADC3_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_ADC3_Init+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011d2:	4817      	ldr	r0, [pc, #92]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011d4:	f002 f89c 	bl	8003310 <HAL_ADC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011de:	f001 f97b 	bl	80024d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <MX_ADC3_Init+0xe4>)
 80011ee:	f003 f911 	bl	8004414 <HAL_ADCEx_MultiModeConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011f8:	f001 f96e 	bl	80024d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_ADC3_Init+0xec>)
 80011fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001200:	2306      	movs	r3, #6
 8001202:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001208:	237f      	movs	r3, #127	; 0x7f
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800120c:	2304      	movs	r3, #4
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_ADC3_Init+0xe4>)
 800121a:	f002 fc33 	bl	8003a84 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001224:	f001 f958 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3730      	adds	r7, #48	; 0x30
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200002e4 	.word	0x200002e4
 8001234:	50000400 	.word	0x50000400
 8001238:	32601000 	.word	0x32601000

0800123c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800125c:	d12d      	bne.n	80012ba <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_ADC_MspInit+0x140>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a45      	ldr	r2, [pc, #276]	; (800137c <HAL_ADC_MspInit+0x140>)
 8001266:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001268:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_ADC_MspInit+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	4a42      	ldr	r2, [pc, #264]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001276:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800127a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127c:	4b40      	ldr	r3, [pc, #256]	; (8001380 <HAL_ADC_MspInit+0x144>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_ADC_MspInit+0x144>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a3c      	ldr	r2, [pc, #240]	; (8001380 <HAL_ADC_MspInit+0x144>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	2301      	movs	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	4619      	mov	r1, r3
 80012b2:	4834      	ldr	r0, [pc, #208]	; (8001384 <HAL_ADC_MspInit+0x148>)
 80012b4:	f003 fc60 	bl	8004b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012b8:	e05b      	b.n	8001372 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a32      	ldr	r2, [pc, #200]	; (8001388 <HAL_ADC_MspInit+0x14c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d12d      	bne.n	8001320 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_ADC_MspInit+0x140>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a2c      	ldr	r2, [pc, #176]	; (800137c <HAL_ADC_MspInit+0x140>)
 80012cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_ADC_MspInit+0x140>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10b      	bne.n	80012ee <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_ADC_MspInit+0x144>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a29      	ldr	r2, [pc, #164]	; (8001380 <HAL_ADC_MspInit+0x144>)
 80012dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <HAL_ADC_MspInit+0x144>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_ADC_MspInit+0x144>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <HAL_ADC_MspInit+0x144>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_ADC_MspInit+0x144>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001306:	2302      	movs	r3, #2
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130a:	2303      	movs	r3, #3
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <HAL_ADC_MspInit+0x148>)
 800131a:	f003 fc2d 	bl	8004b78 <HAL_GPIO_Init>
}
 800131e:	e028      	b.n	8001372 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_ADC_MspInit+0x150>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d123      	bne.n	8001372 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_ADC_MspInit+0x144>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_ADC_MspInit+0x144>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <HAL_ADC_MspInit+0x154>)
 800136e:	f003 fc03 	bl	8004b78 <HAL_GPIO_Init>
}
 8001372:	bf00      	nop
 8001374:	3738      	adds	r7, #56	; 0x38
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001fc 	.word	0x200001fc
 8001380:	40021000 	.word	0x40021000
 8001384:	48000800 	.word	0x48000800
 8001388:	50000100 	.word	0x50000100
 800138c:	50000400 	.word	0x50000400
 8001390:	48000400 	.word	0x48000400

08001394 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80013a6:	2200      	movs	r2, #0
 80013a8:	2110      	movs	r1, #16
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f003 fd65 	bl	8004e7c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	1c9a      	adds	r2, r3, #2
 80013b8:	2364      	movs	r3, #100	; 0x64
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <drv_spi_write+0x58>)
 80013c0:	f004 fe53 	bl	800606a <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80013c4:	bf00      	nop
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <drv_spi_write+0x58>)
 80013c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d0f9      	beq.n	80013c6 <drv_spi_write+0x32>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80013d2:	2201      	movs	r2, #1
 80013d4:	2110      	movs	r1, #16
 80013d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013da:	f003 fd4f 	bl	8004e7c <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	885b      	ldrh	r3, [r3, #2]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000941c 	.word	0x2000941c

080013f0 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	463b      	mov	r3, r7
 80013f8:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 80013fc:	463b      	mov	r3, r7
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffc6 	bl	8001394 <drv_spi_write>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	463b      	mov	r3, r7
 800141a:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 800141e:	463b      	mov	r3, r7
 8001420:	f248 0101 	movw	r1, #32769	; 0x8001
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ffb5 	bl	8001394 <drv_spi_write>
 800142a:	4603      	mov	r3, r0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001442:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	02db      	lsls	r3, r3, #11
 8001448:	b21b      	sxth	r3, r3
 800144a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800144e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001452:	b21b      	sxth	r3, r3
 8001454:	b29a      	uxth	r2, r3
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff99 	bl	8001394 <drv_spi_write>
 8001462:	4603      	mov	r3, r0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	f107 0408 	add.w	r4, r7, #8
 8001476:	e884 0003 	stmia.w	r4, {r0, r1}
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	02db      	lsls	r3, r3, #11
 8001482:	b21a      	sxth	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21b      	sxth	r3, r3
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff7d 	bl	8001394 <drv_spi_write>
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}

080014a2 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80014a2:	b590      	push	{r4, r7, lr}
 80014a4:	b087      	sub	sp, #28
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	f107 0408 	add.w	r4, r7, #8
 80014ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	025b      	lsls	r3, r3, #9
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014be:	b21a      	sxth	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	015b      	lsls	r3, r3, #5
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21a      	sxth	r2, r3
 80014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21a      	sxth	r2, r3
 8001506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001510:	8afa      	ldrh	r2, [r7, #22]
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff3b 	bl	8001394 <drv_spi_write>
}
 800151e:	bf00      	nop
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}

08001526 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001526:	b590      	push	{r4, r7, lr}
 8001528:	b087      	sub	sp, #28
 800152a:	af00      	add	r7, sp, #0
 800152c:	f107 0408 	add.w	r4, r7, #8
 8001530:	e884 0003 	stmia.w	r4, {r0, r1}
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	b21b      	sxth	r3, r3
 800153e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001542:	b21a      	sxth	r2, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21a      	sxth	r2, r3
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 800156c:	8afa      	ldrh	r2, [r7, #22]
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff0d 	bl	8001394 <drv_spi_write>
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}

08001582 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001582:	b590      	push	{r4, r7, lr}
 8001584:	b087      	sub	sp, #28
 8001586:	af00      	add	r7, sp, #0
 8001588:	f107 0408 	add.w	r4, r7, #8
 800158c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	b21b      	sxth	r3, r3
 800159a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800159e:	b21a      	sxth	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b6:	019b      	lsls	r3, r3, #6
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 80015f0:	8afa      	ldrh	r2, [r7, #22]
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fecb 	bl	8001394 <drv_spi_write>
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}

08001606 <drv_disable_gd>:
void drv_enable_gd(DRVStruct drv){
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
	drv_write_register(drv, DCR, val);
}
void drv_disable_gd(DRVStruct drv){
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	463b      	mov	r3, r7
 800160e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8001612:	2202      	movs	r2, #2
 8001614:	463b      	mov	r3, r7
 8001616:	e893 0003 	ldmia.w	r3, {r0, r1}
 800161a:	f7ff ff0b 	bl	8001434 <drv_read_register>
 800161e:	4603      	mov	r3, r0
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8001626:	89fb      	ldrh	r3, [r7, #14]
 8001628:	2202      	movs	r2, #2
 800162a:	4639      	mov	r1, r7
 800162c:	c903      	ldmia	r1, {r0, r1}
 800162e:	f7ff ff1d 	bl	800146c <drv_write_register>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	463b      	mov	r3, r7
 8001644:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8001648:	463b      	mov	r3, r7
 800164a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800164e:	f7ff fecf 	bl	80013f0 <drv_read_FSR1>
 8001652:	4603      	mov	r3, r0
 8001654:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 8001656:	463b      	mov	r3, r7
 8001658:	e893 0003 	ldmia.w	r3, {r0, r1}
 800165c:	f7ff fed9 	bl	8001412 <drv_read_FSR2>
 8001660:	4603      	mov	r3, r0
 8001662:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <drv_print_faults+0x38>
 800166e:	4857      	ldr	r0, [pc, #348]	; (80017cc <drv_print_faults+0x190>)
 8001670:	f008 fa48 	bl	8009b04 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <drv_print_faults+0x48>
 800167e:	4854      	ldr	r0, [pc, #336]	; (80017d0 <drv_print_faults+0x194>)
 8001680:	f008 fa40 	bl	8009b04 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001684:	89fb      	ldrh	r3, [r7, #14]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <drv_print_faults+0x58>
 800168e:	4851      	ldr	r0, [pc, #324]	; (80017d4 <drv_print_faults+0x198>)
 8001690:	f008 fa38 	bl	8009b04 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <drv_print_faults+0x68>
 800169e:	484e      	ldr	r0, [pc, #312]	; (80017d8 <drv_print_faults+0x19c>)
 80016a0:	f008 fa30 	bl	8009b04 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <drv_print_faults+0x78>
 80016ae:	484b      	ldr	r0, [pc, #300]	; (80017dc <drv_print_faults+0x1a0>)
 80016b0:	f008 fa28 	bl	8009b04 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <drv_print_faults+0x88>
 80016be:	4848      	ldr	r0, [pc, #288]	; (80017e0 <drv_print_faults+0x1a4>)
 80016c0:	f008 fa20 	bl	8009b04 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <drv_print_faults+0x98>
 80016ce:	4845      	ldr	r0, [pc, #276]	; (80017e4 <drv_print_faults+0x1a8>)
 80016d0:	f008 fa18 	bl	8009b04 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <drv_print_faults+0xa8>
 80016de:	4842      	ldr	r0, [pc, #264]	; (80017e8 <drv_print_faults+0x1ac>)
 80016e0:	f008 fa10 	bl	8009b04 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 80016e4:	89fb      	ldrh	r3, [r7, #14]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <drv_print_faults+0xb8>
 80016ee:	483f      	ldr	r0, [pc, #252]	; (80017ec <drv_print_faults+0x1b0>)
 80016f0:	f008 fa08 	bl	8009b04 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <drv_print_faults+0xc8>
 80016fe:	483c      	ldr	r0, [pc, #240]	; (80017f0 <drv_print_faults+0x1b4>)
 8001700:	f008 fa00 	bl	8009b04 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001704:	89fb      	ldrh	r3, [r7, #14]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <drv_print_faults+0xd8>
 800170e:	4839      	ldr	r0, [pc, #228]	; (80017f4 <drv_print_faults+0x1b8>)
 8001710:	f008 f9f8 	bl	8009b04 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <drv_print_faults+0xe8>
 800171e:	4836      	ldr	r0, [pc, #216]	; (80017f8 <drv_print_faults+0x1bc>)
 8001720:	f008 f9f0 	bl	8009b04 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001724:	89bb      	ldrh	r3, [r7, #12]
 8001726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800172a:	2b00      	cmp	r3, #0
 800172c:	d002      	beq.n	8001734 <drv_print_faults+0xf8>
 800172e:	4833      	ldr	r0, [pc, #204]	; (80017fc <drv_print_faults+0x1c0>)
 8001730:	f008 f9e8 	bl	8009b04 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001734:	89bb      	ldrh	r3, [r7, #12]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <drv_print_faults+0x108>
 800173e:	4830      	ldr	r0, [pc, #192]	; (8001800 <drv_print_faults+0x1c4>)
 8001740:	f008 f9e0 	bl	8009b04 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <drv_print_faults+0x118>
 800174e:	482d      	ldr	r0, [pc, #180]	; (8001804 <drv_print_faults+0x1c8>)
 8001750:	f008 f9d8 	bl	8009b04 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <drv_print_faults+0x128>
 800175e:	482a      	ldr	r0, [pc, #168]	; (8001808 <drv_print_faults+0x1cc>)
 8001760:	f008 f9d0 	bl	8009b04 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <drv_print_faults+0x138>
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <drv_print_faults+0x1d0>)
 8001770:	f008 f9c8 	bl	8009b04 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001774:	89bb      	ldrh	r3, [r7, #12]
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <drv_print_faults+0x148>
 800177e:	4824      	ldr	r0, [pc, #144]	; (8001810 <drv_print_faults+0x1d4>)
 8001780:	f008 f9c0 	bl	8009b04 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001784:	89bb      	ldrh	r3, [r7, #12]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <drv_print_faults+0x158>
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <drv_print_faults+0x1d8>)
 8001790:	f008 f9b8 	bl	8009b04 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8001794:	89bb      	ldrh	r3, [r7, #12]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <drv_print_faults+0x168>
 800179e:	481e      	ldr	r0, [pc, #120]	; (8001818 <drv_print_faults+0x1dc>)
 80017a0:	f008 f9b0 	bl	8009b04 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 80017a4:	89bb      	ldrh	r3, [r7, #12]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <drv_print_faults+0x178>
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <drv_print_faults+0x1e0>)
 80017b0:	f008 f9a8 	bl	8009b04 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <drv_print_faults+0x188>
 80017be:	4818      	ldr	r0, [pc, #96]	; (8001820 <drv_print_faults+0x1e4>)
 80017c0:	f008 f9a0 	bl	8009b04 <iprintf>

}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0800bfb0 	.word	0x0800bfb0
 80017d0:	0800bfbc 	.word	0x0800bfbc
 80017d4:	0800bfc8 	.word	0x0800bfc8
 80017d8:	0800bfd0 	.word	0x0800bfd0
 80017dc:	0800bfd8 	.word	0x0800bfd8
 80017e0:	0800bfe0 	.word	0x0800bfe0
 80017e4:	0800bfec 	.word	0x0800bfec
 80017e8:	0800bff8 	.word	0x0800bff8
 80017ec:	0800c004 	.word	0x0800c004
 80017f0:	0800c010 	.word	0x0800c010
 80017f4:	0800c01c 	.word	0x0800c01c
 80017f8:	0800c028 	.word	0x0800c028
 80017fc:	0800c030 	.word	0x0800c030
 8001800:	0800c038 	.word	0x0800c038
 8001804:	0800c040 	.word	0x0800c040
 8001808:	0800c048 	.word	0x0800c048
 800180c:	0800c050 	.word	0x0800c050
 8001810:	0800c05c 	.word	0x0800c05c
 8001814:	0800c068 	.word	0x0800c068
 8001818:	0800c074 	.word	0x0800c074
 800181c:	0800c080 	.word	0x0800c080
 8001820:	0800c08c 	.word	0x0800c08c

08001824 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 800182a:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <MX_FDCAN2_Init+0x84>)
 800182c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 800183c:	2200      	movs	r2, #0
 800183e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001842:	2200      	movs	r2, #0
 8001844:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001848:	2200      	movs	r2, #0
 800184a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 800184e:	2201      	movs	r2, #1
 8001850:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001854:	2201      	movs	r2, #1
 8001856:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 800185a:	2202      	movs	r2, #2
 800185c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001860:	2202      	movs	r2, #2
 8001862:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001866:	2201      	movs	r2, #1
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 800186c:	2201      	movs	r2, #1
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001872:	2201      	movs	r2, #1
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001878:	2201      	movs	r2, #1
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001884:	2200      	movs	r2, #0
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 800188a:	2200      	movs	r2, #0
 800188c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_FDCAN2_Init+0x80>)
 8001890:	f002 ffac 	bl	80047ec <HAL_FDCAN_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 800189a:	f000 fe1d 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000350 	.word	0x20000350
 80018a8:	40006800 	.word	0x40006800

080018ac <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_FDCAN_MspInit+0x7c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d127      	bne.n	800191e <HAL_FDCAN_MspInit+0x72>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_FDCAN_MspInit+0x80>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_FDCAN_MspInit+0x80>)
 80018d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018d8:	6593      	str	r3, [r2, #88]	; 0x58
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_FDCAN_MspInit+0x80>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_FDCAN_MspInit+0x80>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_FDCAN_MspInit+0x80>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_FDCAN_MspInit+0x80>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800190e:	2309      	movs	r3, #9
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_FDCAN_MspInit+0x84>)
 800191a:	f003 f92d 	bl	8004b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40006800 	.word	0x40006800
 800192c:	40021000 	.word	0x40021000
 8001930:	48000400 	.word	0x48000400

08001934 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195c:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001980:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8001984:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <set_dtc+0x140>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d136      	bne.n	80019fa <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800198c:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <set_dtc+0x144>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800199a:	edd7 7a05 	vldr	s15, [r7, #20]
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <set_dtc+0x144>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019aa:	ee17 2a90 	vmov	r2, s15
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <set_dtc+0x144>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019be:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <set_dtc+0x144>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ce:	ee17 2a90 	vmov	r2, s15
 80019d2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <set_dtc+0x144>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <set_dtc+0x144>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f2:	ee17 2a90 	vmov	r2, s15
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80019f8:	e035      	b.n	8001a66 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <set_dtc+0x144>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <set_dtc+0x144>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a18:	ee17 2a90 	vmov	r2, s15
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <set_dtc+0x144>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <set_dtc+0x144>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3c:	ee17 2a90 	vmov	r2, s15
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <set_dtc+0x144>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <set_dtc+0x144>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a60:	ee17 2a90 	vmov	r2, s15
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a66:	bf00      	nop
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20008f0c 	.word	0x20008f0c
 8001a78:	20009480 	.word	0x20009480

08001a7c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <analog_sample+0xe8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10e      	bne.n	8001aaa <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8001a8c:	4836      	ldr	r0, [pc, #216]	; (8001b68 <analog_sample+0xec>)
 8001a8e:	f001 ffeb 	bl	8003a68 <HAL_ADC_GetValue>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8001a9a:	4834      	ldr	r0, [pc, #208]	; (8001b6c <analog_sample+0xf0>)
 8001a9c:	f001 ffe4 	bl	8003a68 <HAL_ADC_GetValue>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	e00d      	b.n	8001ac6 <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8001aaa:	4830      	ldr	r0, [pc, #192]	; (8001b6c <analog_sample+0xf0>)
 8001aac:	f001 ffdc 	bl	8003a68 <HAL_ADC_GetValue>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8001ab8:	482b      	ldr	r0, [pc, #172]	; (8001b68 <analog_sample+0xec>)
 8001aba:	f001 ffd5 	bl	8003a68 <HAL_ADC_GetValue>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8001ac6:	4828      	ldr	r0, [pc, #160]	; (8001b68 <analog_sample+0xec>)
 8001ac8:	f001 fde4 	bl	8003694 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	4825      	ldr	r0, [pc, #148]	; (8001b68 <analog_sample+0xec>)
 8001ad2:	f001 fec3 	bl	800385c <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8001ad6:	4826      	ldr	r0, [pc, #152]	; (8001b70 <analog_sample+0xf4>)
 8001ad8:	f001 ffc6 	bl	8003a68 <HAL_ADC_GetValue>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001b74 <analog_sample+0xf8>
 8001af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b12:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001b78 <analog_sample+0xfc>
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b34:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001b78 <analog_sample+0xfc>
 8001b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b48:	eeb1 7a67 	vneg.f32	s14, s15
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20008f0c 	.word	0x20008f0c
 8001b68:	20000278 	.word	0x20000278
 8001b6c:	2000020c 	.word	0x2000020c
 8001b70:	200002e4 	.word	0x200002e4
 8001b74:	3c533333 	.word	0x3c533333
 8001b78:	3ca50000 	.word	0x3ca50000

08001b7c <zero_current>:
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);

    }

void zero_current(ControllerStruct *controller){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8001b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b90:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fec2 	bl	8001934 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e00f      	b.n	8001bd6 <zero_current+0x5a>
    	analog_sample(controller);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff60 	bl	8001a7c <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbeb      	blt.n	8001bb6 <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	fb92 f2f3 	sdiv	r2, r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    }
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a42      	ldr	r2, [pc, #264]	; (8001d18 <init_controller_params+0x114>)
 8001c10:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <init_controller_params+0x114>)
 8001c16:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8001c18:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <init_controller_params+0x118>)
 8001c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001d20 <init_controller_params+0x11c>
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <init_controller_params+0x118>)
 8001c2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c32:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d20 <init_controller_params+0x11c>
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <init_controller_params+0x118>)
 8001c42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c46:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001d24 <init_controller_params+0x120>
 8001c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001d28 <init_controller_params+0x124>
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001c7a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001d2c <init_controller_params+0x128>
 8001c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <init_controller_params+0x12c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e036      	b.n	8001d06 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001d34 <init_controller_params+0x130>
 8001ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001caa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001d38 <init_controller_params+0x134>
 8001cae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cb2:	ee16 0a90 	vmov	r0, s13
 8001cb6:	f7fe fc6f 	bl	8000598 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	ec43 2b10 	vmov	d0, r2, r3
 8001cc2:	f009 ff91 	bl	800bbe8 <exp>
 8001cc6:	ec51 0b10 	vmov	r0, r1, d0
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <init_controller_params+0x138>)
 8001cd0:	f7fe fcba 	bl	8000648 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <init_controller_params+0x13c>)
 8001ce2:	f7fe fafb 	bl	80002dc <__adddf3>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe ff83 	bl	8000bf8 <__aeabi_d2f>
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	333c      	adds	r3, #60	; 0x3c
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b7f      	cmp	r3, #127	; 0x7f
 8001d0a:	ddc5      	ble.n	8001c98 <init_controller_params+0x94>
    }

    }
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	3d3851ec 	.word	0x3d3851ec
 8001d1c:	2000065c 	.word	0x2000065c
 8001d20:	38d1b717 	.word	0x38d1b717
 8001d24:	37d1b717 	.word	0x37d1b717
 8001d28:	40c90fdb 	.word	0x40c90fdb
 8001d2c:	3dcccccd 	.word	0x3dcccccd
 8001d30:	20008f0c 	.word	0x20008f0c
 8001d34:	bc000000 	.word	0xbc000000
 8001d38:	3d03126f 	.word	0x3d03126f
 8001d3c:	3ff33333 	.word	0x3ff33333
 8001d40:	3ff00000 	.word	0x3ff00000

08001d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a38      	ldr	r2, [pc, #224]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a2c      	ldr	r2, [pc, #176]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <MX_GPIO_Init+0xfc>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	210c      	movs	r1, #12
 8001dbe:	4821      	ldr	r0, [pc, #132]	; (8001e44 <MX_GPIO_Init+0x100>)
 8001dc0:	f003 f85c 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f003 f855 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd8:	481b      	ldr	r0, [pc, #108]	; (8001e48 <MX_GPIO_Init+0x104>)
 8001dda:	f003 f84f 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dde:	230c      	movs	r3, #12
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4813      	ldr	r0, [pc, #76]	; (8001e44 <MX_GPIO_Init+0x100>)
 8001df6:	f002 febf 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8001dfa:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f002 feaf 	bl	8004b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_GPIO_Init+0x104>)
 8001e34:	f002 fea0 	bl	8004b78 <HAL_GPIO_Init>

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000800 	.word	0x48000800
 8001e48:	48000400 	.word	0x48000400

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea6:	f000 ff74 	bl	8002d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eaa:	f000 fab3 	bl	8002414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eae:	f7ff ff49 	bl	8001d44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001eb2:	f7ff f86d 	bl	8000f90 <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8001eb6:	f7ff fcb5 	bl	8001824 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8001eba:	f000 fb4d 	bl	8002558 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001ebe:	f000 fe8d 	bl	8002bdc <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001ec2:	f000 fb87 	bl	80025d4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001ec6:	f000 fd5f 	bl	8002988 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001eca:	f7ff f8d9 	bl	8001080 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001ece:	f7ff f93d 	bl	800114c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED2, 1 );
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	48b9      	ldr	r0, [pc, #740]	; (80021bc <main+0x31c>)
 8001ed8:	f002 ffd0 	bl	8004e7c <HAL_GPIO_WritePin>

  //preference_writer_init(&prefs, 6);
  //preference_writer_load(prefs);

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 8001edc:	4bb8      	ldr	r3, [pc, #736]	; (80021c0 <main+0x320>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d102      	bne.n	8001eec <main+0x4c>
 8001ee6:	4bb6      	ldr	r3, [pc, #728]	; (80021c0 <main+0x320>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8001eec:	4bb4      	ldr	r3, [pc, #720]	; (80021c0 <main+0x320>)
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d102      	bne.n	8001efc <main+0x5c>
 8001ef6:	4bb2      	ldr	r3, [pc, #712]	; (80021c0 <main+0x320>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8001efc:	4bb1      	ldr	r3, [pc, #708]	; (80021c4 <main+0x324>)
 8001efe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f02:	eef4 7a67 	vcmp.f32	s15, s15
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	d609      	bvs.n	8001f20 <main+0x80>
 8001f0c:	4bad      	ldr	r3, [pc, #692]	; (80021c4 <main+0x324>)
 8001f0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f16:	eef4 7a47 	vcmp.f32	s15, s14
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	d102      	bne.n	8001f26 <main+0x86>
 8001f20:	4ba8      	ldr	r3, [pc, #672]	; (80021c4 <main+0x324>)
 8001f22:	4aa9      	ldr	r2, [pc, #676]	; (80021c8 <main+0x328>)
 8001f24:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8001f26:	4ba7      	ldr	r3, [pc, #668]	; (80021c4 <main+0x324>)
 8001f28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f2c:	eef4 7a67 	vcmp.f32	s15, s15
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	d609      	bvs.n	8001f4a <main+0xaa>
 8001f36:	4ba3      	ldr	r3, [pc, #652]	; (80021c4 <main+0x324>)
 8001f38:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f40:	eef4 7a47 	vcmp.f32	s15, s14
 8001f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f48:	d102      	bne.n	8001f50 <main+0xb0>
 8001f4a:	4b9e      	ldr	r3, [pc, #632]	; (80021c4 <main+0x324>)
 8001f4c:	4a9f      	ldr	r2, [pc, #636]	; (80021cc <main+0x32c>)
 8001f4e:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8001f50:	4b9c      	ldr	r3, [pc, #624]	; (80021c4 <main+0x324>)
 8001f52:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f56:	eef4 7a67 	vcmp.f32	s15, s15
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d609      	bvs.n	8001f74 <main+0xd4>
 8001f60:	4b98      	ldr	r3, [pc, #608]	; (80021c4 <main+0x324>)
 8001f62:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f66:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f6a:	eef4 7a47 	vcmp.f32	s15, s14
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	d103      	bne.n	8001f7c <main+0xdc>
 8001f74:	4b93      	ldr	r3, [pc, #588]	; (80021c4 <main+0x324>)
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8001f7c:	4b90      	ldr	r3, [pc, #576]	; (80021c0 <main+0x320>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d102      	bne.n	8001f8c <main+0xec>
 8001f86:	4b8e      	ldr	r3, [pc, #568]	; (80021c0 <main+0x320>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8001f8c:	4b8c      	ldr	r3, [pc, #560]	; (80021c0 <main+0x320>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d102      	bne.n	8001f9c <main+0xfc>
 8001f96:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <main+0x320>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8001f9c:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <main+0x320>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d103      	bne.n	8001fae <main+0x10e>
 8001fa6:	4b86      	ldr	r3, [pc, #536]	; (80021c0 <main+0x320>)
 8001fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fac:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8001fae:	4b85      	ldr	r3, [pc, #532]	; (80021c4 <main+0x324>)
 8001fb0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fb4:	eef4 7a67 	vcmp.f32	s15, s15
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	d609      	bvs.n	8001fd2 <main+0x132>
 8001fbe:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <main+0x324>)
 8001fc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fc4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001fc8:	eef4 7a47 	vcmp.f32	s15, s14
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	d103      	bne.n	8001fda <main+0x13a>
 8001fd2:	4b7c      	ldr	r3, [pc, #496]	; (80021c4 <main+0x324>)
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8001fda:	4b7a      	ldr	r3, [pc, #488]	; (80021c4 <main+0x324>)
 8001fdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fe0:	eef4 7a67 	vcmp.f32	s15, s15
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	d609      	bvs.n	8001ffe <main+0x15e>
 8001fea:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <main+0x324>)
 8001fec:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ff0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001ff4:	eef4 7a47 	vcmp.f32	s15, s14
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffc:	d102      	bne.n	8002004 <main+0x164>
 8001ffe:	4b71      	ldr	r3, [pc, #452]	; (80021c4 <main+0x324>)
 8002000:	4a73      	ldr	r2, [pc, #460]	; (80021d0 <main+0x330>)
 8002002:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8002004:	4b6f      	ldr	r3, [pc, #444]	; (80021c4 <main+0x324>)
 8002006:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800200a:	eef4 7a67 	vcmp.f32	s15, s15
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	d609      	bvs.n	8002028 <main+0x188>
 8002014:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <main+0x324>)
 8002016:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800201a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800201e:	eef4 7a47 	vcmp.f32	s15, s14
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d102      	bne.n	800202e <main+0x18e>
 8002028:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <main+0x324>)
 800202a:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <main+0x334>)
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <main+0x324>)
 8002030:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002034:	eef4 7a67 	vcmp.f32	s15, s15
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d609      	bvs.n	8002052 <main+0x1b2>
 800203e:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <main+0x324>)
 8002040:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002044:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002048:	eef4 7a47 	vcmp.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	d102      	bne.n	8002058 <main+0x1b8>
 8002052:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <main+0x324>)
 8002054:	4a60      	ldr	r2, [pc, #384]	; (80021d8 <main+0x338>)
 8002056:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <main+0x324>)
 800205a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800205e:	eef4 7a67 	vcmp.f32	s15, s15
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d609      	bvs.n	800207c <main+0x1dc>
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <main+0x324>)
 800206a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800206e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002072:	eef4 7a47 	vcmp.f32	s15, s14
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d102      	bne.n	8002082 <main+0x1e2>
 800207c:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <main+0x324>)
 800207e:	4a57      	ldr	r2, [pc, #348]	; (80021dc <main+0x33c>)
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <main+0x324>)
 8002084:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002088:	eef4 7a67 	vcmp.f32	s15, s15
 800208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002090:	d609      	bvs.n	80020a6 <main+0x206>
 8002092:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <main+0x324>)
 8002094:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002098:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800209c:	eef4 7a47 	vcmp.f32	s15, s14
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d103      	bne.n	80020ae <main+0x20e>
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <main+0x324>)
 80020a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 80020ae:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <main+0x324>)
 80020b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020b4:	eef4 7a67 	vcmp.f32	s15, s15
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	d609      	bvs.n	80020d2 <main+0x232>
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <main+0x324>)
 80020c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80020c8:	eef4 7a47 	vcmp.f32	s15, s14
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	d103      	bne.n	80020da <main+0x23a>
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <main+0x324>)
 80020d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <main+0x324>)
 80020dc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80020e0:	eef4 7a67 	vcmp.f32	s15, s15
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d609      	bvs.n	80020fe <main+0x25e>
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <main+0x324>)
 80020ec:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80020f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80020f4:	eef4 7a47 	vcmp.f32	s15, s14
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	d102      	bne.n	8002104 <main+0x264>
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <main+0x324>)
 8002100:	4a37      	ldr	r2, [pc, #220]	; (80021e0 <main+0x340>)
 8002102:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <main+0x324>)
 8002106:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800210a:	eef4 7a67 	vcmp.f32	s15, s15
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	d609      	bvs.n	8002128 <main+0x288>
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <main+0x324>)
 8002116:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800211a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800211e:	eef4 7a47 	vcmp.f32	s15, s14
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d102      	bne.n	800212e <main+0x28e>
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <main+0x324>)
 800212a:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <main+0x338>)
 800212c:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <main+0x324>)
 8002130:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002134:	eef4 7a67 	vcmp.f32	s15, s15
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	d702      	bvc.n	8002144 <main+0x2a4>
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <main+0x324>)
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <main+0x344>)
 8002142:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <main+0x324>)
 8002146:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800214a:	eef4 7a67 	vcmp.f32	s15, s15
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d702      	bvc.n	800215a <main+0x2ba>
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <main+0x324>)
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <main+0x348>)
 8002158:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <main+0x324>)
 800215c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002160:	eef4 7a67 	vcmp.f32	s15, s15
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d702      	bvc.n	8002170 <main+0x2d0>
 800216a:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <main+0x324>)
 800216c:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <main+0x34c>)
 800216e:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <main+0x324>)
 8002172:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002176:	eef4 7a67 	vcmp.f32	s15, s15
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d702      	bvc.n	8002186 <main+0x2e6>
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <main+0x324>)
 8002182:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <main+0x350>)
 8002184:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800218e:	4819      	ldr	r0, [pc, #100]	; (80021f4 <main+0x354>)
 8002190:	f007 fcb8 	bl	8009b04 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8002194:	4818      	ldr	r0, [pc, #96]	; (80021f8 <main+0x358>)
 8002196:	f7ff fd35 	bl	8001c04 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800219a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800219e:	2100      	movs	r1, #0
 80021a0:	4816      	ldr	r0, [pc, #88]	; (80021fc <main+0x35c>)
 80021a2:	f007 f83d 	bl	8009220 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <main+0x320>)
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <main+0x360>)
 80021ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  comm_encoder.e_zero = E_ZERO;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <main+0x320>)
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <main+0x360>)
 80021b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80021ba:	e023      	b.n	8002204 <main+0x364>
 80021bc:	48000800 	.word	0x48000800
 80021c0:	20008f0c 	.word	0x20008f0c
 80021c4:	2000065c 	.word	0x2000065c
 80021c8:	447a0000 	.word	0x447a0000
 80021cc:	42200000 	.word	0x42200000
 80021d0:	42fa0000 	.word	0x42fa0000
 80021d4:	41600000 	.word	0x41600000
 80021d8:	40a00000 	.word	0x40a00000
 80021dc:	41a80000 	.word	0x41a80000
 80021e0:	43fa0000 	.word	0x43fa0000
 80021e4:	41480000 	.word	0x41480000
 80021e8:	c1480000 	.word	0xc1480000
 80021ec:	42820000 	.word	0x42820000
 80021f0:	c2820000 	.word	0xc2820000
 80021f4:	0800c098 	.word	0x0800c098
 80021f8:	2000075c 	.word	0x2000075c
 80021fc:	20008c7c 	.word	0x20008c7c
 8002200:	200003b8 	.word	0x200003b8
  comm_encoder.ppairs = PPAIRS;
 8002204:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <main+0x540>)
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	4a76      	ldr	r2, [pc, #472]	; (80023e4 <main+0x544>)
 800220a:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 800220c:	2164      	movs	r1, #100	; 0x64
 800220e:	4875      	ldr	r0, [pc, #468]	; (80023e4 <main+0x544>)
 8002210:	f000 f96a 	bl	80024e8 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8002214:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <main+0x544>)
 8002216:	4a74      	ldr	r2, [pc, #464]	; (80023e8 <main+0x548>)
 8002218:	338c      	adds	r3, #140	; 0x8c
 800221a:	f102 0118 	add.w	r1, r2, #24
 800221e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002222:	4618      	mov	r0, r3
 8002224:	f006 ffee 	bl	8009204 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8002228:	4870      	ldr	r0, [pc, #448]	; (80023ec <main+0x54c>)
 800222a:	f001 fa33 	bl	8003694 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800222e:	4870      	ldr	r0, [pc, #448]	; (80023f0 <main+0x550>)
 8002230:	f001 fa30 	bl	8003694 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8002234:	486f      	ldr	r0, [pc, #444]	; (80023f4 <main+0x554>)
 8002236:	f001 fa2d 	bl	8003694 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 800223a:	2201      	movs	r2, #1
 800223c:	2110      	movs	r1, #16
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f002 fe1b 	bl	8004e7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002250:	f002 fe14 	bl	8004e7c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f000 fe0d 	bl	8002e74 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 800225a:	2001      	movs	r0, #1
 800225c:	f000 fe0a 	bl	8002e74 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8002260:	4b65      	ldr	r3, [pc, #404]	; (80023f8 <main+0x558>)
 8002262:	2201      	movs	r2, #1
 8002264:	9206      	str	r2, [sp, #24]
 8002266:	2200      	movs	r2, #0
 8002268:	9205      	str	r2, [sp, #20]
 800226a:	2200      	movs	r2, #0
 800226c:	9204      	str	r2, [sp, #16]
 800226e:	2200      	movs	r2, #0
 8002270:	9203      	str	r2, [sp, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	9202      	str	r2, [sp, #8]
 8002276:	2201      	movs	r2, #1
 8002278:	9201      	str	r2, [sp, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	9200      	str	r2, [sp, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2000      	movs	r0, #0
 8002282:	4610      	mov	r0, r2
 8002284:	889b      	ldrh	r3, [r3, #4]
 8002286:	2100      	movs	r1, #0
 8002288:	f363 010f 	bfi	r1, r3, #0, #16
 800228c:	2300      	movs	r3, #0
 800228e:	2200      	movs	r2, #0
 8002290:	f7ff f907 	bl	80014a2 <drv_write_DCR>
  HAL_Delay(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f000 fded 	bl	8002e74 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 800229a:	4b57      	ldr	r3, [pc, #348]	; (80023f8 <main+0x558>)
 800229c:	2203      	movs	r2, #3
 800229e:	9206      	str	r2, [sp, #24]
 80022a0:	2201      	movs	r2, #1
 80022a2:	9205      	str	r2, [sp, #20]
 80022a4:	2201      	movs	r2, #1
 80022a6:	9204      	str	r2, [sp, #16]
 80022a8:	2201      	movs	r2, #1
 80022aa:	9203      	str	r2, [sp, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	9202      	str	r2, [sp, #8]
 80022b0:	2203      	movs	r2, #3
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	9200      	str	r2, [sp, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2000      	movs	r0, #0
 80022bc:	4610      	mov	r0, r2
 80022be:	889b      	ldrh	r3, [r3, #4]
 80022c0:	2100      	movs	r1, #0
 80022c2:	f363 010f 	bfi	r1, r3, #0, #16
 80022c6:	2301      	movs	r3, #1
 80022c8:	2200      	movs	r2, #0
 80022ca:	f7ff f95a 	bl	8001582 <drv_write_CSACR>
  HAL_Delay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 fdd0 	bl	8002e74 <HAL_Delay>
  zero_current(&controller);
 80022d4:	4849      	ldr	r0, [pc, #292]	; (80023fc <main+0x55c>)
 80022d6:	f7ff fc51 	bl	8001b7c <zero_current>
  HAL_Delay(1);
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fdca 	bl	8002e74 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <main+0x558>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	9206      	str	r2, [sp, #24]
 80022e6:	2200      	movs	r2, #0
 80022e8:	9205      	str	r2, [sp, #20]
 80022ea:	2200      	movs	r2, #0
 80022ec:	9204      	str	r2, [sp, #16]
 80022ee:	2200      	movs	r2, #0
 80022f0:	9203      	str	r2, [sp, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	9202      	str	r2, [sp, #8]
 80022f6:	2203      	movs	r2, #3
 80022f8:	9201      	str	r2, [sp, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	9200      	str	r2, [sp, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2000      	movs	r0, #0
 8002302:	4610      	mov	r0, r2
 8002304:	889b      	ldrh	r3, [r3, #4]
 8002306:	2100      	movs	r1, #0
 8002308:	f363 010f 	bfi	r1, r3, #0, #16
 800230c:	2301      	movs	r3, #1
 800230e:	2200      	movs	r2, #0
 8002310:	f7ff f937 	bl	8001582 <drv_write_CSACR>
  HAL_Delay(1);
 8002314:	2001      	movs	r0, #1
 8002316:	f000 fdad 	bl	8002e74 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_88);
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <main+0x558>)
 800231c:	220f      	movs	r2, #15
 800231e:	9202      	str	r2, [sp, #8]
 8002320:	2203      	movs	r2, #3
 8002322:	9201      	str	r2, [sp, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	9200      	str	r2, [sp, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2000      	movs	r0, #0
 800232c:	4610      	mov	r0, r2
 800232e:	889b      	ldrh	r3, [r3, #4]
 8002330:	2100      	movs	r1, #0
 8002332:	f363 010f 	bfi	r1, r3, #0, #16
 8002336:	2300      	movs	r3, #0
 8002338:	2201      	movs	r2, #1
 800233a:	f7ff f8f4 	bl	8001526 <drv_write_OCPCR>
  HAL_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fd98 	bl	8002e74 <HAL_Delay>
  drv_disable_gd(drv);
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <main+0x558>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2100      	movs	r1, #0
 800234a:	4611      	mov	r1, r2
 800234c:	889a      	ldrh	r2, [r3, #4]
 800234e:	2300      	movs	r3, #0
 8002350:	f362 030f 	bfi	r3, r2, #0, #16
 8002354:	4608      	mov	r0, r1
 8002356:	4619      	mov	r1, r3
 8002358:	f7ff f955 	bl	8001606 <drv_disable_gd>
  HAL_Delay(1);
 800235c:	2001      	movs	r0, #1
 800235e:	f000 fd89 	bl	8002e74 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <main+0x55c>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <main+0x55c>)
 800236a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800236e:	4619      	mov	r1, r3
 8002370:	4823      	ldr	r0, [pc, #140]	; (8002400 <main+0x560>)
 8002372:	f007 fbc7 	bl	8009b04 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002376:	2100      	movs	r1, #0
 8002378:	4822      	ldr	r0, [pc, #136]	; (8002404 <main+0x564>)
 800237a:	f004 fb7b 	bl	8006a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800237e:	2104      	movs	r1, #4
 8002380:	4820      	ldr	r0, [pc, #128]	; (8002404 <main+0x564>)
 8002382:	f004 fb77 	bl	8006a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002386:	2108      	movs	r1, #8
 8002388:	481e      	ldr	r0, [pc, #120]	; (8002404 <main+0x564>)
 800238a:	f004 fb73 	bl	8006a74 <HAL_TIM_PWM_Start>
  can_tx_init(&can_tx);
  HAL_CAN_Start(&CAN_H); //start CAN
  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 800238e:	2101      	movs	r1, #1
 8002390:	2019      	movs	r0, #25
 8002392:	f7ff fd5b 	bl	8001e4c <__NVIC_SetPriority>
  NVIC_SetPriority(CAN_ISR, 3);
 8002396:	2103      	movs	r1, #3
 8002398:	2015      	movs	r0, #21
 800239a:	f7ff fd57 	bl	8001e4c <__NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <main+0x568>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <main+0x568>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <main+0x568>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80023b0:	2201      	movs	r2, #1
 80023b2:	4916      	ldr	r1, [pc, #88]	; (800240c <main+0x56c>)
 80023b4:	4816      	ldr	r0, [pc, #88]	; (8002410 <main+0x570>)
 80023b6:	f005 fdc9 	bl	8007f4c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80023ba:	4812      	ldr	r0, [pc, #72]	; (8002404 <main+0x564>)
 80023bc:	f004 fa20 	bl	8006800 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(150);
 80023c0:	2096      	movs	r0, #150	; 0x96
 80023c2:	f000 fd57 	bl	8002e74 <HAL_Delay>
	  drv_print_faults(drv);
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <main+0x558>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	4611      	mov	r1, r2
 80023ce:	889a      	ldrh	r2, [r3, #4]
 80023d0:	2300      	movs	r3, #0
 80023d2:	f362 030f 	bfi	r3, r2, #0, #16
 80023d6:	4608      	mov	r0, r1
 80023d8:	4619      	mov	r1, r3
 80023da:	f7ff f92f 	bl	800163c <drv_print_faults>
	  HAL_Delay(150);
 80023de:	e7ef      	b.n	80023c0 <main+0x520>
 80023e0:	2000065c 	.word	0x2000065c
 80023e4:	200003b8 	.word	0x200003b8
 80023e8:	20008f0c 	.word	0x20008f0c
 80023ec:	20000278 	.word	0x20000278
 80023f0:	2000020c 	.word	0x2000020c
 80023f4:	200002e4 	.word	0x200002e4
 80023f8:	20009338 	.word	0x20009338
 80023fc:	2000075c 	.word	0x2000075c
 8002400:	0800c0bc 	.word	0x0800c0bc
 8002404:	20009480 	.word	0x20009480
 8002408:	2000064c 	.word	0x2000064c
 800240c:	20000648 	.word	0x20000648
 8002410:	200094cc 	.word	0x200094cc

08002414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a8      	sub	sp, #160	; 0xa0
 8002418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f006 fefc 	bl	8009220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002438:	463b      	mov	r3, r7
 800243a:	2254      	movs	r2, #84	; 0x54
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f006 feee 	bl	8009220 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002444:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002448:	f002 fd30 	bl	8004eac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800244c:	2302      	movs	r3, #2
 800244e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002454:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002456:	2340      	movs	r3, #64	; 0x40
 8002458:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002460:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fdd5 	bl	8005014 <HAL_RCC_OscConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8002470:	f000 f832 	bl	80024d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002474:	230f      	movs	r3, #15
 8002476:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002478:	2301      	movs	r3, #1
 800247a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800247c:	2300      	movs	r3, #0
 800247e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002480:	2300      	movs	r3, #0
 8002482:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002484:	2300      	movs	r3, #0
 8002486:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002488:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f003 f8d8 	bl	8005644 <HAL_RCC_ClockConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800249a:	f000 f81d 	bl	80024d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <SystemClock_Config+0xc0>)
 80024a0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80024a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80024ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80024b0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80024b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fade 	bl	8005a7c <HAL_RCCEx_PeriphCLKConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80024c6:	f000 f807 	bl	80024d8 <Error_Handler>
  }
}
 80024ca:	bf00      	nop
 80024cc:	37a0      	adds	r7, #160	; 0xa0
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	00019002 	.word	0x00019002

080024d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e023      	b.n	8002540 <ps_warmup+0x58>
		encoder->spi_tx_word = 0x0000;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80024fe:	2200      	movs	r2, #0
 8002500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002508:	f002 fcb8 	bl	8004e7c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	2364      	movs	r3, #100	; 0x64
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2301      	movs	r3, #1
 8002518:	480e      	ldr	r0, [pc, #56]	; (8002554 <ps_warmup+0x6c>)
 800251a:	f003 fda6 	bl	800606a <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800251e:	bf00      	nop
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <ps_warmup+0x6c>)
 8002522:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d0f9      	beq.n	8002520 <ps_warmup+0x38>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800252c:	2201      	movs	r2, #1
 800252e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002536:	f002 fca1 	bl	8004e7c <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3301      	adds	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbd7      	blt.n	80024f8 <ps_warmup+0x10>
	}
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200093b8 	.word	0x200093b8

08002558 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <MX_SPI1_Init+0x74>)
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <MX_SPI1_Init+0x78>)
 8002560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <MX_SPI1_Init+0x74>)
 8002564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <MX_SPI1_Init+0x74>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <MX_SPI1_Init+0x74>)
 8002572:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002576:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <MX_SPI1_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_SPI1_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <MX_SPI1_Init+0x74>)
 8002586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <MX_SPI1_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_SPI1_Init+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <MX_SPI1_Init+0x74>)
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_SPI1_Init+0x74>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <MX_SPI1_Init+0x74>)
 80025a6:	2207      	movs	r2, #7
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_SPI1_Init+0x74>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <MX_SPI1_Init+0x74>)
 80025b2:	2208      	movs	r2, #8
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_SPI1_Init+0x74>)
 80025b8:	f003 fcac 	bl	8005f14 <HAL_SPI_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025c2:	f7ff ff89 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000941c 	.word	0x2000941c
 80025d0:	40013000 	.word	0x40013000

080025d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_SPI3_Init+0x74>)
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <MX_SPI3_Init+0x78>)
 80025dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_SPI3_Init+0x74>)
 80025e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MX_SPI3_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <MX_SPI3_Init+0x74>)
 80025ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80025f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <MX_SPI3_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <MX_SPI3_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_SPI3_Init+0x74>)
 8002602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002606:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <MX_SPI3_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_SPI3_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_SPI3_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_SPI3_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_SPI3_Init+0x74>)
 8002622:	2207      	movs	r2, #7
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_SPI3_Init+0x74>)
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_SPI3_Init+0x74>)
 800262e:	2208      	movs	r2, #8
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_SPI3_Init+0x74>)
 8002634:	f003 fc6e 	bl	8005f14 <HAL_SPI_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800263e:	f7ff ff4b 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200093b8 	.word	0x200093b8
 800264c:	40003c00 	.word	0x40003c00

08002650 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2f      	ldr	r2, [pc, #188]	; (800272c <HAL_SPI_MspInit+0xdc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d129      	bne.n	80026c6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 8002678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800267c:	6613      	str	r3, [r2, #96]	; 0x60
 800267e:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026a2:	23e0      	movs	r3, #224	; 0xe0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026b2:	2305      	movs	r3, #5
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	4619      	mov	r1, r3
 80026bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c0:	f002 fa5a 	bl	8004b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80026c4:	e02d      	b.n	8002722 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_SPI_MspInit+0xe4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d128      	bne.n	8002722 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	4a16      	ldr	r2, [pc, #88]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	6593      	str	r3, [r2, #88]	; 0x58
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_SPI_MspInit+0xe0>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002700:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002712:	2306      	movs	r3, #6
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	4806      	ldr	r0, [pc, #24]	; (8002738 <HAL_SPI_MspInit+0xe8>)
 800271e:	f002 fa2b 	bl	8004b78 <HAL_GPIO_Init>
}
 8002722:	bf00      	nop
 8002724:	3730      	adds	r7, #48	; 0x30
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40013000 	.word	0x40013000
 8002730:	40021000 	.word	0x40021000
 8002734:	40003c00 	.word	0x40003c00
 8002738:	48000800 	.word	0x48000800

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_MspInit+0x44>)
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <HAL_MspInit+0x44>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6613      	str	r3, [r2, #96]	; 0x60
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_MspInit+0x44>)
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_MspInit+0x44>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_MspInit+0x44>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_MspInit+0x44>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002772:	f002 fc3f 	bl	8004ff4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000

08002784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <NMI_Handler+0x4>

0800278a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <MemManage_Handler+0x4>

08002796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279a:	e7fe      	b.n	800279a <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d0:	f000 fb32 	bl	8002e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
	return 1;
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_kill>:

int _kill(int pid, int sig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027f2:	f006 fcdd 	bl	80091b0 <__errno>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2216      	movs	r2, #22
 80027fa:	601a      	str	r2, [r3, #0]
	return -1;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_exit>:

void _exit (int status)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002810:	f04f 31ff 	mov.w	r1, #4294967295
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ffe7 	bl	80027e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800281a:	e7fe      	b.n	800281a <_exit+0x12>

0800281c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e00a      	b.n	8002844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800282e:	f3af 8000 	nop.w
 8002832:	4601      	mov	r1, r0
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	60ba      	str	r2, [r7, #8]
 800283a:	b2ca      	uxtb	r2, r1
 800283c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3301      	adds	r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	dbf0      	blt.n	800282e <_read+0x12>
	}

return len;
 800284c:	687b      	ldr	r3, [r7, #4]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e009      	b.n	800287c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	60ba      	str	r2, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fa41 	bl	8002cf8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	dbf1      	blt.n	8002868 <_write+0x12>
	}
	return len;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_close>:

int _close(int file)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
	return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b6:	605a      	str	r2, [r3, #4]
	return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_isatty>:

int _isatty(int file)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	return 1;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
	return 0;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f006 fc42 	bl	80091b0 <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20020000 	.word	0x20020000
 8002958:	00000400 	.word	0x00000400
 800295c:	20000200 	.word	0x20000200
 8002960:	20009570 	.word	0x20009570

08002964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b09c      	sub	sp, #112	; 0x70
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	2234      	movs	r2, #52	; 0x34
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f006 fc2c 	bl	8009220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029c8:	4b56      	ldr	r3, [pc, #344]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029ca:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <MX_TIM1_Init+0x1a0>)
 80029cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029ce:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029da:	4b52      	ldr	r3, [pc, #328]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029e8:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b4d      	ldr	r3, [pc, #308]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029f4:	484b      	ldr	r0, [pc, #300]	; (8002b24 <MX_TIM1_Init+0x19c>)
 80029f6:	f003 feab 	bl	8006750 <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002a00:	f7ff fd6a 	bl	80024d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4844      	ldr	r0, [pc, #272]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002a12:	f004 fac7 	bl	8006fa4 <HAL_TIM_ConfigClockSource>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a1c:	f7ff fd5c 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a20:	4840      	ldr	r0, [pc, #256]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002a22:	f003 ffc6 	bl	80069b2 <HAL_TIM_PWM_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002a2c:	f7ff fd54 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002a30:	483c      	ldr	r0, [pc, #240]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002a32:	f003 ff5d 	bl	80068f0 <HAL_TIM_OC_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8002a3c:	f7ff fd4c 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a50:	4619      	mov	r1, r3
 8002a52:	4834      	ldr	r0, [pc, #208]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002a54:	f005 f84c 	bl	8007af0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8002a5e:	f7ff fd3b 	bl	80024d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a62:	2360      	movs	r3, #96	; 0x60
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a82:	2200      	movs	r2, #0
 8002a84:	4619      	mov	r1, r3
 8002a86:	4827      	ldr	r0, [pc, #156]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002a88:	f004 f97c 	bl	8006d84 <HAL_TIM_PWM_ConfigChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002a92:	f7ff fd21 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4821      	ldr	r0, [pc, #132]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002aa0:	f004 f970 	bl	8006d84 <HAL_TIM_PWM_ConfigChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002aaa:	f7ff fd15 	bl	80024d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ab2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	4619      	mov	r1, r3
 8002aba:	481a      	ldr	r0, [pc, #104]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002abc:	f004 f8ec 	bl	8006c98 <HAL_TIM_OC_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002ac6:	f7ff fd07 	bl	80024d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002af0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4807      	ldr	r0, [pc, #28]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002b08:	f005 f888 	bl	8007c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 8002b12:	f7ff fce1 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b16:	4803      	ldr	r0, [pc, #12]	; (8002b24 <MX_TIM1_Init+0x19c>)
 8002b18:	f000 f828 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 8002b1c:	bf00      	nop
 8002b1e:	3770      	adds	r7, #112	; 0x70
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20009480 	.word	0x20009480
 8002b28:	40012c00 	.word	0x40012c00

08002b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_TIM_Base_MspInit+0x38>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10b      	bne.n	8002b56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_TIM_Base_MspInit+0x3c>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	4a09      	ldr	r2, [pc, #36]	; (8002b68 <HAL_TIM_Base_MspInit+0x3c>)
 8002b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b48:	6613      	str	r3, [r2, #96]	; 0x60
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_TIM_Base_MspInit+0x3c>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_TIM_MspPostInit+0x68>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11d      	bne.n	8002bca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_TIM_MspPostInit+0x6c>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_TIM_MspPostInit+0x6c>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_TIM_MspPostInit+0x6c>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002ba6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002baa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002bb8:	2306      	movs	r3, #6
 8002bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc6:	f001 ffd7 	bl	8004b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40021000 	.word	0x40021000

08002bdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002be0:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002be2:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <MX_USART2_UART_Init+0x94>)
 8002be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c02:	220c      	movs	r2, #12
 8002c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c24:	4811      	ldr	r0, [pc, #68]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c26:	f005 f8ab 	bl	8007d80 <HAL_UART_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c30:	f7ff fc52 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c34:	2100      	movs	r1, #0
 8002c36:	480d      	ldr	r0, [pc, #52]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c38:	f006 f9ef 	bl	800901a <HAL_UARTEx_SetTxFifoThreshold>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c42:	f7ff fc49 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c46:	2100      	movs	r1, #0
 8002c48:	4808      	ldr	r0, [pc, #32]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c4a:	f006 fa24 	bl	8009096 <HAL_UARTEx_SetRxFifoThreshold>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c54:	f7ff fc40 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c58:	4804      	ldr	r0, [pc, #16]	; (8002c6c <MX_USART2_UART_Init+0x90>)
 8002c5a:	f006 f9a5 	bl	8008fa8 <HAL_UARTEx_DisableFifoMode>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c64:	f7ff fc38 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200094cc 	.word	0x200094cc
 8002c70:	40004400 	.word	0x40004400

08002c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_UART_MspInit+0x7c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d128      	bne.n	8002ce8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_UART_MspInit+0x80>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_UART_MspInit+0x80>)
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_UART_MspInit+0x80>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_UART_MspInit+0x80>)
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_UART_MspInit+0x80>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_UART_MspInit+0x80>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cc6:	230c      	movs	r3, #12
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce4:	f001 ff48 	bl	8004b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40004400 	.word	0x40004400
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8002d00:	1d39      	adds	r1, r7, #4
 8002d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d06:	2201      	movs	r2, #1
 8002d08:	4803      	ldr	r0, [pc, #12]	; (8002d18 <__io_putchar+0x20>)
 8002d0a:	f005 f889 	bl	8007e20 <HAL_UART_Transmit>
return 0;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200094cc 	.word	0x200094cc

08002d1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8002d24:	2201      	movs	r2, #1
 8002d26:	4904      	ldr	r1, [pc, #16]	; (8002d38 <HAL_UART_RxCpltCallback+0x1c>)
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <HAL_UART_RxCpltCallback+0x20>)
 8002d2a:	f005 f90f 	bl	8007f4c <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000648 	.word	0x20000648
 8002d3c:	200094cc 	.word	0x200094cc

08002d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d40:	480d      	ldr	r0, [pc, #52]	; (8002d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d44:	480d      	ldr	r0, [pc, #52]	; (8002d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d46:	490e      	ldr	r1, [pc, #56]	; (8002d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <LoopForever+0xe>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d5c:	4c0b      	ldr	r4, [pc, #44]	; (8002d8c <LoopForever+0x16>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d6a:	f7ff fdfb 	bl	8002964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f006 fa25 	bl	80091bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d72:	f7ff f895 	bl	8001ea0 <main>

08002d76 <LoopForever>:

LoopForever:
    b LoopForever
 8002d76:	e7fe      	b.n	8002d76 <LoopForever>
  ldr   r0, =_estack
 8002d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d80:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d84:	0800c550 	.word	0x0800c550
  ldr r2, =_sbss
 8002d88:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d8c:	20009570 	.word	0x20009570

08002d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC1_2_IRQHandler>

08002d92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f001 fcf3 	bl	8004788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002da2:	2000      	movs	r0, #0
 8002da4:	f000 f80e 	bl	8002dc4 <HAL_InitTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	71fb      	strb	r3, [r7, #7]
 8002db2:	e001      	b.n	8002db8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002db4:	f7ff fcc2 	bl	800273c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002db8:	79fb      	ldrb	r3, [r7, #7]

}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_InitTick+0x68>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d022      	beq.n	8002e1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_InitTick+0x6c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_InitTick+0x68>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 fcf0 	bl	80047d2 <HAL_SYSTICK_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d809      	bhi.n	8002e12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	f04f 30ff 	mov.w	r0, #4294967295
 8002e06:	f001 fcca 	bl	800479e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_InitTick+0x70>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	e007      	b.n	8002e22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e004      	b.n	8002e22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000008 	.word	0x20000008
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_IncTick+0x1c>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_IncTick+0x20>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	4a03      	ldr	r2, [pc, #12]	; (8002e54 <HAL_IncTick+0x1c>)
 8002e48:	6013      	str	r3, [r2, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	2000955c 	.word	0x2000955c
 8002e58:	20000008 	.word	0x20000008

08002e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_GetTick+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	2000955c 	.word	0x2000955c

08002e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7ff ffee 	bl	8002e5c <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d004      	beq.n	8002e98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_Delay+0x40>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e98:	bf00      	nop
 8002e9a:	f7ff ffdf 	bl	8002e5c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d8f7      	bhi.n	8002e9a <HAL_Delay+0x26>
  {
  }
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000008 	.word	0x20000008

08002eb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3360      	adds	r3, #96	; 0x60
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <LL_ADC_SetOffset+0x44>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	03fff000 	.word	0x03fff000

08002f68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3360      	adds	r3, #96	; 0x60
 8002f76:	461a      	mov	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3360      	adds	r3, #96	; 0x60
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3360      	adds	r3, #96	; 0x60
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3360      	adds	r3, #96	; 0x60
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	431a      	orrs	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	615a      	str	r2, [r3, #20]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003082:	b480      	push	{r7}
 8003084:	b087      	sub	sp, #28
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3330      	adds	r3, #48	; 0x30
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	4413      	add	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	211f      	movs	r1, #31
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	401a      	ands	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	f003 011f 	and.w	r1, r3, #31
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	431a      	orrs	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030da:	b480      	push	{r7}
 80030dc:	b087      	sub	sp, #28
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3314      	adds	r3, #20
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	0e5b      	lsrs	r3, r3, #25
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	4413      	add	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	0d1b      	lsrs	r3, r3, #20
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2107      	movs	r1, #7
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	0d1b      	lsrs	r3, r3, #20
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	431a      	orrs	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0318 	and.w	r3, r3, #24
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003154:	40d9      	lsrs	r1, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	400b      	ands	r3, r1
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	431a      	orrs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	0007ffff 	.word	0x0007ffff

08003178 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 031f 	and.w	r3, r3, #31
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6093      	str	r3, [r2, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e8:	d101      	bne.n	80031ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800320c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003210:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003238:	d101      	bne.n	800323e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800325c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <LL_ADC_IsEnabled+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_IsEnabled+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032ae:	f043 0204 	orr.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d101      	bne.n	80032da <LL_ADC_REG_IsConversionOngoing+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d101      	bne.n	8003300 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1af      	b.n	800368a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7fd ff7f 	bl	800123c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff3f 	bl	80031d4 <LL_ADC_IsDeepPowerDownEnabled>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d004      	beq.n	8003366 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff25 	bl	80031b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff5a 	bl	8003224 <LL_ADC_IsInternalRegulatorEnabled>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d115      	bne.n	80033a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ff3e 	bl	80031fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003380:	4b9f      	ldr	r3, [pc, #636]	; (8003600 <HAL_ADC_Init+0x2f0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	4a9f      	ldr	r2, [pc, #636]	; (8003604 <HAL_ADC_Init+0x2f4>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003394:	e002      	b.n	800339c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3b01      	subs	r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f9      	bne.n	8003396 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff3c 	bl	8003224 <LL_ADC_IsInternalRegulatorEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	f043 0210 	orr.w	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff75 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 80033d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 8148 	bne.w	8003678 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 8144 	bne.w	8003678 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033f8:	f043 0202 	orr.w	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff35 	bl	8003274 <LL_ADC_IsEnabled>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d141      	bne.n	8003494 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003418:	d004      	beq.n	8003424 <HAL_ADC_Init+0x114>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7a      	ldr	r2, [pc, #488]	; (8003608 <HAL_ADC_Init+0x2f8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10f      	bne.n	8003444 <HAL_ADC_Init+0x134>
 8003424:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003428:	f7ff ff24 	bl	8003274 <LL_ADC_IsEnabled>
 800342c:	4604      	mov	r4, r0
 800342e:	4876      	ldr	r0, [pc, #472]	; (8003608 <HAL_ADC_Init+0x2f8>)
 8003430:	f7ff ff20 	bl	8003274 <LL_ADC_IsEnabled>
 8003434:	4603      	mov	r3, r0
 8003436:	4323      	orrs	r3, r4
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e012      	b.n	800346a <HAL_ADC_Init+0x15a>
 8003444:	4871      	ldr	r0, [pc, #452]	; (800360c <HAL_ADC_Init+0x2fc>)
 8003446:	f7ff ff15 	bl	8003274 <LL_ADC_IsEnabled>
 800344a:	4604      	mov	r4, r0
 800344c:	4870      	ldr	r0, [pc, #448]	; (8003610 <HAL_ADC_Init+0x300>)
 800344e:	f7ff ff11 	bl	8003274 <LL_ADC_IsEnabled>
 8003452:	4603      	mov	r3, r0
 8003454:	431c      	orrs	r4, r3
 8003456:	486f      	ldr	r0, [pc, #444]	; (8003614 <HAL_ADC_Init+0x304>)
 8003458:	f7ff ff0c 	bl	8003274 <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	4323      	orrs	r3, r4
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003476:	d004      	beq.n	8003482 <HAL_ADC_Init+0x172>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a62      	ldr	r2, [pc, #392]	; (8003608 <HAL_ADC_Init+0x2f8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_ADC_Init+0x176>
 8003482:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_ADC_Init+0x308>)
 8003484:	e000      	b.n	8003488 <HAL_ADC_Init+0x178>
 8003486:	4a65      	ldr	r2, [pc, #404]	; (800361c <HAL_ADC_Init+0x30c>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7ff fd12 	bl	8002eb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7f5b      	ldrb	r3, [r3, #29]
 8003498:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800349e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80034a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80034aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d106      	bne.n	80034d0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	045b      	lsls	r3, r3, #17
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_ADC_Init+0x310>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fed1 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 8003520:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fede 	bl	80032e8 <LL_ADC_INJ_IsConversionOngoing>
 800352c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d17f      	bne.n	8003634 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d17c      	bne.n	8003634 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800353e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003546:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003556:	f023 0302 	bic.w	r3, r3, #2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	430b      	orrs	r3, r1
 8003562:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d017      	beq.n	800359c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800357a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003584:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6911      	ldr	r1, [r2, #16]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	430b      	orrs	r3, r1
 8003596:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800359a:	e013      	b.n	80035c4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d12a      	bne.n	8003624 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035f0:	430a      	orrs	r2, r1
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	e019      	b.n	8003634 <HAL_ADC_Init+0x324>
 8003600:	20000000 	.word	0x20000000
 8003604:	053e2d63 	.word	0x053e2d63
 8003608:	50000100 	.word	0x50000100
 800360c:	50000400 	.word	0x50000400
 8003610:	50000500 	.word	0x50000500
 8003614:	50000600 	.word	0x50000600
 8003618:	50000300 	.word	0x50000300
 800361c:	50000700 	.word	0x50000700
 8003620:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10c      	bne.n	8003656 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f023 010f 	bic.w	r1, r3, #15
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	1e5a      	subs	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
 8003654:	e007      	b.n	8003666 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 020f 	bic.w	r2, r2, #15
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c
 8003676:	e007      	b.n	8003688 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003688:	7ffb      	ldrb	r3, [r7, #31]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	bf00      	nop

08003694 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a4:	d004      	beq.n	80036b0 <HAL_ADC_Start+0x1c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_ADC_Start+0x1b4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_Start+0x20>
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_ADC_Start+0x1b8>)
 80036b2:	e000      	b.n	80036b6 <HAL_ADC_Start+0x22>
 80036b4:	4b66      	ldr	r3, [pc, #408]	; (8003850 <HAL_ADC_Start+0x1bc>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fd5e 	bl	8003178 <LL_ADC_GetMultimode>
 80036bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fdfd 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 80b4 	bne.w	8003838 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_ADC_Start+0x4a>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0af      	b.n	800383e <HAL_ADC_Start+0x1aa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fe0c 	bl	8004304 <ADC_Enable>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 809b 	bne.w	800382e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <HAL_ADC_Start+0x1b4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_ADC_Start+0x96>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4e      	ldr	r2, [pc, #312]	; (8003854 <HAL_ADC_Start+0x1c0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d002      	beq.n	8003726 <HAL_ADC_Start+0x92>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	e003      	b.n	800372e <HAL_ADC_Start+0x9a>
 8003726:	4b4c      	ldr	r3, [pc, #304]	; (8003858 <HAL_ADC_Start+0x1c4>)
 8003728:	e001      	b.n	800372e <HAL_ADC_Start+0x9a>
 800372a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4293      	cmp	r3, r2
 8003734:	d002      	beq.n	800373c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003740:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003754:	d106      	bne.n	8003764 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	f023 0206 	bic.w	r2, r3, #6
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	661a      	str	r2, [r3, #96]	; 0x60
 8003762:	e002      	b.n	800376a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	221c      	movs	r2, #28
 8003770:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a32      	ldr	r2, [pc, #200]	; (8003848 <HAL_ADC_Start+0x1b4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_ADC_Start+0x104>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a32      	ldr	r2, [pc, #200]	; (8003854 <HAL_ADC_Start+0x1c0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d002      	beq.n	8003794 <HAL_ADC_Start+0x100>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	e003      	b.n	800379c <HAL_ADC_Start+0x108>
 8003794:	4b30      	ldr	r3, [pc, #192]	; (8003858 <HAL_ADC_Start+0x1c4>)
 8003796:	e001      	b.n	800379c <HAL_ADC_Start+0x108>
 8003798:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d008      	beq.n	80037b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d002      	beq.n	80037b6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d114      	bne.n	80037e0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fd5e 	bl	800329a <LL_ADC_REG_StartConversion>
 80037de:	e02d      	b.n	800383c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_ADC_Start+0x1b4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_ADC_Start+0x176>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a16      	ldr	r2, [pc, #88]	; (8003854 <HAL_ADC_Start+0x1c0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d002      	beq.n	8003806 <HAL_ADC_Start+0x172>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	e003      	b.n	800380e <HAL_ADC_Start+0x17a>
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <HAL_ADC_Start+0x1c4>)
 8003808:	e001      	b.n	800380e <HAL_ADC_Start+0x17a>
 800380a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800380e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00f      	beq.n	800383c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003824:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	; 0x5c
 800382c:	e006      	b.n	800383c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003836:	e001      	b.n	800383c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003838:	2302      	movs	r3, #2
 800383a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800383c:	7dfb      	ldrb	r3, [r7, #23]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	50000100 	.word	0x50000100
 800384c:	50000300 	.word	0x50000300
 8003850:	50000700 	.word	0x50000700
 8003854:	50000500 	.word	0x50000500
 8003858:	50000400 	.word	0x50000400

0800385c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800386e:	d004      	beq.n	800387a <HAL_ADC_PollForConversion+0x1e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a77      	ldr	r2, [pc, #476]	; (8003a54 <HAL_ADC_PollForConversion+0x1f8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <HAL_ADC_PollForConversion+0x22>
 800387a:	4b77      	ldr	r3, [pc, #476]	; (8003a58 <HAL_ADC_PollForConversion+0x1fc>)
 800387c:	e000      	b.n	8003880 <HAL_ADC_PollForConversion+0x24>
 800387e:	4b77      	ldr	r3, [pc, #476]	; (8003a5c <HAL_ADC_PollForConversion+0x200>)
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fc79 	bl	8003178 <LL_ADC_GetMultimode>
 8003886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d102      	bne.n	8003896 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003890:	2308      	movs	r3, #8
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e037      	b.n	8003906 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d002      	beq.n	80038a8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2b09      	cmp	r3, #9
 80038a6:	d111      	bne.n	80038cc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0c1      	b.n	8003a4a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038c6:	2304      	movs	r3, #4
 80038c8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80038ca:	e01c      	b.n	8003906 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d4:	d004      	beq.n	80038e0 <HAL_ADC_PollForConversion+0x84>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5e      	ldr	r2, [pc, #376]	; (8003a54 <HAL_ADC_PollForConversion+0x1f8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_PollForConversion+0x88>
 80038e0:	4b5d      	ldr	r3, [pc, #372]	; (8003a58 <HAL_ADC_PollForConversion+0x1fc>)
 80038e2:	e000      	b.n	80038e6 <HAL_ADC_PollForConversion+0x8a>
 80038e4:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <HAL_ADC_PollForConversion+0x200>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fc54 	bl	8003194 <LL_ADC_GetMultiDMATransfer>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0a3      	b.n	8003a4a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003902:	2304      	movs	r3, #4
 8003904:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003906:	f7ff faa9 	bl	8002e5c <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800390c:	e021      	b.n	8003952 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d01d      	beq.n	8003952 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003916:	f7ff faa1 	bl	8002e5c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <HAL_ADC_PollForConversion+0xd0>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d112      	bne.n	8003952 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f043 0204 	orr.w	r2, r3, #4
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e07b      	b.n	8003a4a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0d6      	beq.n	800390e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fb73 	bl	800305c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7f5b      	ldrb	r3, [r3, #29]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d118      	bne.n	80039b6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b08      	cmp	r3, #8
 8003990:	d111      	bne.n	80039b6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_ADC_PollForConversion+0x1f8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_ADC_PollForConversion+0x178>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <HAL_ADC_PollForConversion+0x204>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d002      	beq.n	80039d0 <HAL_ADC_PollForConversion+0x174>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	e003      	b.n	80039d8 <HAL_ADC_PollForConversion+0x17c>
 80039d0:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <HAL_ADC_PollForConversion+0x208>)
 80039d2:	e001      	b.n	80039d8 <HAL_ADC_PollForConversion+0x17c>
 80039d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	4293      	cmp	r3, r2
 80039de:	d008      	beq.n	80039f2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d002      	beq.n	80039f2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b09      	cmp	r3, #9
 80039f0:	d104      	bne.n	80039fc <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e014      	b.n	8003a26 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <HAL_ADC_PollForConversion+0x1f8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_ADC_PollForConversion+0x1be>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_ADC_PollForConversion+0x204>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d002      	beq.n	8003a16 <HAL_ADC_PollForConversion+0x1ba>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	e003      	b.n	8003a1e <HAL_ADC_PollForConversion+0x1c2>
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_ADC_PollForConversion+0x208>)
 8003a18:	e001      	b.n	8003a1e <HAL_ADC_PollForConversion+0x1c2>
 8003a1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d104      	bne.n	8003a36 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2208      	movs	r2, #8
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e008      	b.n	8003a48 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	220c      	movs	r2, #12
 8003a46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	50000100 	.word	0x50000100
 8003a58:	50000300 	.word	0x50000300
 8003a5c:	50000700 	.word	0x50000700
 8003a60:	50000500 	.word	0x50000500
 8003a64:	50000400 	.word	0x50000400

08003a68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0b6      	sub	sp, #216	; 0xd8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x24>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	f000 bc13 	b.w	80042ce <HAL_ADC_ConfigChannel+0x84a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fc04 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 83f3 	bne.w	80042a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7ff fad7 	bl	8003082 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fbf2 	bl	80032c2 <LL_ADC_REG_IsConversionOngoing>
 8003ade:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fbfe 	bl	80032e8 <LL_ADC_INJ_IsConversionOngoing>
 8003aec:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003af0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 81d9 	bne.w	8003eac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f040 81d4 	bne.w	8003eac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b0c:	d10f      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f7ff fade 	bl	80030da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fa85 	bl	8003036 <LL_ADC_SetSamplingTimeCommonConfig>
 8003b2c:	e00e      	b.n	8003b4c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f7ff facd 	bl	80030da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fa75 	bl	8003036 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d022      	beq.n	8003bb4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6919      	ldr	r1, [r3, #16]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b7e:	f7ff f9cf 	bl	8002f20 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6919      	ldr	r1, [r3, #16]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f7ff fa1b 	bl	8002fca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6919      	ldr	r1, [r3, #16]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x126>
 8003ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba8:	e000      	b.n	8003bac <HAL_ADC_ConfigChannel+0x128>
 8003baa:	2300      	movs	r3, #0
 8003bac:	461a      	mov	r2, r3
 8003bae:	f7ff fa27 	bl	8003000 <LL_ADC_SetOffsetSaturation>
 8003bb2:	e17b      	b.n	8003eac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f9d4 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x15c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f9c9 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	f003 021f 	and.w	r2, r3, #31
 8003bde:	e01e      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x19a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f9be 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003c0e:	2320      	movs	r3, #32
 8003c10:	e004      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x1b2>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0e9b      	lsrs	r3, r3, #26
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	e018      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x1e4>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003c5a:	2320      	movs	r3, #32
 8003c5c:	e004      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d106      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff f98d 	bl	8002f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff f971 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x222>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff f966 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	0e9b      	lsrs	r3, r3, #26
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	e01e      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x260>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff f95b 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	e004      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x278>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	0e9b      	lsrs	r3, r3, #26
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	e018      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x2aa>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e004      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d106      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f92a 	bl	8002f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2102      	movs	r1, #2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f90e 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x2e8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff f903 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	f003 021f 	and.w	r2, r3, #31
 8003d6a:	e01e      	b.n	8003daa <HAL_ADC_ConfigChannel+0x326>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2102      	movs	r1, #2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f8f8 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	e004      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x33e>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	0e9b      	lsrs	r3, r3, #26
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	e016      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x36c>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003de2:	2320      	movs	r3, #32
 8003de4:	e004      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d106      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff f8c9 	bl	8002f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2103      	movs	r1, #3
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff f8ad 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x3aa>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2103      	movs	r1, #3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f8a2 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	e017      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x3da>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2103      	movs	r1, #3
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff f897 	bl	8002f68 <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e48:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003e50:	2320      	movs	r3, #32
 8003e52:	e003      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x3f2>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0e9b      	lsrs	r3, r3, #26
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	e011      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x416>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	e003      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d106      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2103      	movs	r1, #3
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f874 	bl	8002f94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff f9df 	bl	8003274 <LL_ADC_IsEnabled>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f040 813d 	bne.w	8004138 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6819      	ldr	r1, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f7ff f930 	bl	8003130 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4aa2      	ldr	r2, [pc, #648]	; (8004160 <HAL_ADC_ConfigChannel+0x6dc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f040 812e 	bne.w	8004138 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x480>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	0e9b      	lsrs	r3, r3, #26
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2b09      	cmp	r3, #9
 8003efa:	bf94      	ite	ls
 8003efc:	2301      	movls	r3, #1
 8003efe:	2300      	movhi	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	e019      	b.n	8003f38 <HAL_ADC_ConfigChannel+0x4b4>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f14:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	e003      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2b09      	cmp	r3, #9
 8003f30:	bf94      	ite	ls
 8003f32:	2301      	movls	r3, #1
 8003f34:	2300      	movhi	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d079      	beq.n	8004030 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x4d4>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0e9b      	lsrs	r3, r3, #26
 8003f4e:	3301      	adds	r3, #1
 8003f50:	069b      	lsls	r3, r3, #26
 8003f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f56:	e015      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x500>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f60:	fa93 f3a3 	rbit	r3, r3
 8003f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f68:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003f70:	2320      	movs	r3, #32
 8003f72:	e003      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x520>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	0e9b      	lsrs	r3, r3, #26
 8003f96:	3301      	adds	r3, #1
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	e017      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x550>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	e003      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	3301      	adds	r3, #1
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	ea42 0103 	orr.w	r1, r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x576>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	3301      	adds	r3, #1
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	051b      	lsls	r3, r3, #20
 8003ff8:	e018      	b.n	800402c <HAL_ADC_ConfigChannel+0x5a8>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004012:	2320      	movs	r3, #32
 8004014:	e003      	b.n	800401e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800402c:	430b      	orrs	r3, r1
 800402e:	e07e      	b.n	800412e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <HAL_ADC_ConfigChannel+0x5c8>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	3301      	adds	r3, #1
 8004044:	069b      	lsls	r3, r3, #26
 8004046:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800404a:	e015      	b.n	8004078 <HAL_ADC_ConfigChannel+0x5f4>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	fa93 f3a3 	rbit	r3, r3
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e003      	b.n	8004070 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	3301      	adds	r3, #1
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x614>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	3301      	adds	r3, #1
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2101      	movs	r1, #1
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	e017      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x644>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	61fb      	str	r3, [r7, #28]
  return result;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80040b0:	2320      	movs	r3, #32
 80040b2:	e003      	b.n	80040bc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	3301      	adds	r3, #1
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10d      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x670>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	3301      	adds	r3, #1
 80040e0:	f003 021f 	and.w	r2, r3, #31
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	3b1e      	subs	r3, #30
 80040ec:	051b      	lsls	r3, r3, #20
 80040ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040f2:	e01b      	b.n	800412c <HAL_ADC_ConfigChannel+0x6a8>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	613b      	str	r3, [r7, #16]
  return result;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3301      	adds	r3, #1
 800411a:	f003 021f 	and.w	r2, r3, #31
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	3b1e      	subs	r3, #30
 8004126:	051b      	lsls	r3, r3, #20
 8004128:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800412c:	430b      	orrs	r3, r1
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	6892      	ldr	r2, [r2, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	f7fe ffd1 	bl	80030da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_ADC_ConfigChannel+0x6e0>)
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80be 	beq.w	80042c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800414e:	d004      	beq.n	800415a <HAL_ADC_ConfigChannel+0x6d6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <HAL_ADC_ConfigChannel+0x6e4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10a      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x6ec>
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <HAL_ADC_ConfigChannel+0x6e8>)
 800415c:	e009      	b.n	8004172 <HAL_ADC_ConfigChannel+0x6ee>
 800415e:	bf00      	nop
 8004160:	407f0000 	.word	0x407f0000
 8004164:	80080000 	.word	0x80080000
 8004168:	50000100 	.word	0x50000100
 800416c:	50000300 	.word	0x50000300
 8004170:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_ADC_ConfigChannel+0x854>)
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fec6 	bl	8002f04 <LL_ADC_GetCommonPathInternalCh>
 8004178:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a56      	ldr	r2, [pc, #344]	; (80042dc <HAL_ADC_ConfigChannel+0x858>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_ADC_ConfigChannel+0x70c>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a55      	ldr	r2, [pc, #340]	; (80042e0 <HAL_ADC_ConfigChannel+0x85c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d13a      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d134      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a4:	d005      	beq.n	80041b2 <HAL_ADC_ConfigChannel+0x72e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a4e      	ldr	r2, [pc, #312]	; (80042e4 <HAL_ADC_ConfigChannel+0x860>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	f040 8085 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ba:	d004      	beq.n	80041c6 <HAL_ADC_ConfigChannel+0x742>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a49      	ldr	r2, [pc, #292]	; (80042e8 <HAL_ADC_ConfigChannel+0x864>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x746>
 80041c6:	4a49      	ldr	r2, [pc, #292]	; (80042ec <HAL_ADC_ConfigChannel+0x868>)
 80041c8:	e000      	b.n	80041cc <HAL_ADC_ConfigChannel+0x748>
 80041ca:	4a43      	ldr	r2, [pc, #268]	; (80042d8 <HAL_ADC_ConfigChannel+0x854>)
 80041cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fe fe81 	bl	8002ede <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041dc:	4b44      	ldr	r3, [pc, #272]	; (80042f0 <HAL_ADC_ConfigChannel+0x86c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	4a44      	ldr	r2, [pc, #272]	; (80042f4 <HAL_ADC_ConfigChannel+0x870>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	4613      	mov	r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041f6:	e002      	b.n	80041fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f9      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004204:	e05a      	b.n	80042bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <HAL_ADC_ConfigChannel+0x874>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d125      	bne.n	800425c <HAL_ADC_ConfigChannel+0x7d8>
 8004210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11f      	bne.n	800425c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <HAL_ADC_ConfigChannel+0x864>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d104      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x7ac>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a34      	ldr	r2, [pc, #208]	; (80042fc <HAL_ADC_ConfigChannel+0x878>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d047      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004238:	d004      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x7c0>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2a      	ldr	r2, [pc, #168]	; (80042e8 <HAL_ADC_ConfigChannel+0x864>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d101      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x7c4>
 8004244:	4a29      	ldr	r2, [pc, #164]	; (80042ec <HAL_ADC_ConfigChannel+0x868>)
 8004246:	e000      	b.n	800424a <HAL_ADC_ConfigChannel+0x7c6>
 8004248:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_ADC_ConfigChannel+0x854>)
 800424a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800424e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe fe42 	bl	8002ede <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800425a:	e031      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a27      	ldr	r2, [pc, #156]	; (8004300 <HAL_ADC_ConfigChannel+0x87c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d12d      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004266:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d127      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <HAL_ADC_ConfigChannel+0x864>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004284:	d004      	beq.n	8004290 <HAL_ADC_ConfigChannel+0x80c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_ADC_ConfigChannel+0x864>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x810>
 8004290:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_ADC_ConfigChannel+0x868>)
 8004292:	e000      	b.n	8004296 <HAL_ADC_ConfigChannel+0x812>
 8004294:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_ADC_ConfigChannel+0x854>)
 8004296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800429a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe fe1c 	bl	8002ede <LL_ADC_SetCommonPathInternalCh>
 80042a6:	e00c      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80042ba:	e002      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042bc:	bf00      	nop
 80042be:	e000      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80042ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	37d8      	adds	r7, #216	; 0xd8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	50000700 	.word	0x50000700
 80042dc:	c3210000 	.word	0xc3210000
 80042e0:	90c00010 	.word	0x90c00010
 80042e4:	50000600 	.word	0x50000600
 80042e8:	50000100 	.word	0x50000100
 80042ec:	50000300 	.word	0x50000300
 80042f0:	20000000 	.word	0x20000000
 80042f4:	053e2d63 	.word	0x053e2d63
 80042f8:	c7520000 	.word	0xc7520000
 80042fc:	50000500 	.word	0x50000500
 8004300:	cb840000 	.word	0xcb840000

08004304 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe ffaf 	bl	8003274 <LL_ADC_IsEnabled>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d14d      	bne.n	80043b8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <ADC_Enable+0xc0>)
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e039      	b.n	80043ba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe ff7e 	bl	800324c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004350:	f7fe fd84 	bl	8002e5c <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004356:	e028      	b.n	80043aa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe ff89 	bl	8003274 <LL_ADC_IsEnabled>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe ff6d 	bl	800324c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004372:	f7fe fd73 	bl	8002e5c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d914      	bls.n	80043aa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d00d      	beq.n	80043aa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	f043 0210 	orr.w	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	f043 0201 	orr.w	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e007      	b.n	80043ba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d1cf      	bne.n	8004358 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	8000003f 	.word	0x8000003f

080043c8 <LL_ADC_IsEnabled>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <LL_ADC_IsEnabled+0x18>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <LL_ADC_IsEnabled+0x1a>
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_ADC_REG_IsConversionOngoing>:
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d101      	bne.n	8004406 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b0a1      	sub	sp, #132	; 0x84
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800442e:	2302      	movs	r3, #2
 8004430:	e0e7      	b.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800443a:	2300      	movs	r3, #0
 800443c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800443e:	2300      	movs	r3, #0
 8004440:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800444a:	d102      	bne.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800444c:	4b6f      	ldr	r3, [pc, #444]	; (800460c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	e009      	b.n	8004466 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a6e      	ldr	r2, [pc, #440]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d102      	bne.n	8004462 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800445c:	4b6d      	ldr	r3, [pc, #436]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	e001      	b.n	8004466 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0be      	b.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff ffb1 	bl	80043ee <LL_ADC_REG_IsConversionOngoing>
 800448c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ffab 	bl	80043ee <LL_ADC_REG_IsConversionOngoing>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 80a0 	bne.w	80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 809c 	bne.w	80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b0:	d004      	beq.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a55      	ldr	r2, [pc, #340]	; (800460c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044bc:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80044be:	e000      	b.n	80044c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044c0:	4b56      	ldr	r3, [pc, #344]	; (800461c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80044c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d04b      	beq.n	8004564 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044de:	035b      	lsls	r3, r3, #13
 80044e0:	430b      	orrs	r3, r1
 80044e2:	431a      	orrs	r2, r3
 80044e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f0:	d004      	beq.n	80044fc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a45      	ldr	r2, [pc, #276]	; (800460c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10f      	bne.n	800451c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80044fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004500:	f7ff ff62 	bl	80043c8 <LL_ADC_IsEnabled>
 8004504:	4604      	mov	r4, r0
 8004506:	4841      	ldr	r0, [pc, #260]	; (800460c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004508:	f7ff ff5e 	bl	80043c8 <LL_ADC_IsEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	4323      	orrs	r3, r4
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	e012      	b.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800451c:	483c      	ldr	r0, [pc, #240]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800451e:	f7ff ff53 	bl	80043c8 <LL_ADC_IsEnabled>
 8004522:	4604      	mov	r4, r0
 8004524:	483b      	ldr	r0, [pc, #236]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004526:	f7ff ff4f 	bl	80043c8 <LL_ADC_IsEnabled>
 800452a:	4603      	mov	r3, r0
 800452c:	431c      	orrs	r4, r3
 800452e:	483c      	ldr	r0, [pc, #240]	; (8004620 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004530:	f7ff ff4a 	bl	80043c8 <LL_ADC_IsEnabled>
 8004534:	4603      	mov	r3, r0
 8004536:	4323      	orrs	r3, r4
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d056      	beq.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800454e:	f023 030f 	bic.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	6811      	ldr	r1, [r2, #0]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	6892      	ldr	r2, [r2, #8]
 800455a:	430a      	orrs	r2, r1
 800455c:	431a      	orrs	r2, r3
 800455e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004560:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004562:	e047      	b.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800456e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004578:	d004      	beq.n	8004584 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a23      	ldr	r2, [pc, #140]	; (800460c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10f      	bne.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004584:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004588:	f7ff ff1e 	bl	80043c8 <LL_ADC_IsEnabled>
 800458c:	4604      	mov	r4, r0
 800458e:	481f      	ldr	r0, [pc, #124]	; (800460c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004590:	f7ff ff1a 	bl	80043c8 <LL_ADC_IsEnabled>
 8004594:	4603      	mov	r3, r0
 8004596:	4323      	orrs	r3, r4
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e012      	b.n	80045ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045a4:	481a      	ldr	r0, [pc, #104]	; (8004610 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045a6:	f7ff ff0f 	bl	80043c8 <LL_ADC_IsEnabled>
 80045aa:	4604      	mov	r4, r0
 80045ac:	4819      	ldr	r0, [pc, #100]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045ae:	f7ff ff0b 	bl	80043c8 <LL_ADC_IsEnabled>
 80045b2:	4603      	mov	r3, r0
 80045b4:	431c      	orrs	r4, r3
 80045b6:	481a      	ldr	r0, [pc, #104]	; (8004620 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045b8:	f7ff ff06 	bl	80043c8 <LL_ADC_IsEnabled>
 80045bc:	4603      	mov	r3, r0
 80045be:	4323      	orrs	r3, r4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d012      	beq.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045d6:	f023 030f 	bic.w	r3, r3, #15
 80045da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045de:	e009      	b.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045f2:	e000      	b.n	80045f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004602:	4618      	mov	r0, r3
 8004604:	3784      	adds	r7, #132	; 0x84
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}
 800460a:	bf00      	nop
 800460c:	50000100 	.word	0x50000100
 8004610:	50000400 	.word	0x50000400
 8004614:	50000500 	.word	0x50000500
 8004618:	50000300 	.word	0x50000300
 800461c:	50000700 	.word	0x50000700
 8004620:	50000600 	.word	0x50000600

08004624 <__NVIC_SetPriorityGrouping>:
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <__NVIC_SetPriorityGrouping+0x44>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004640:	4013      	ands	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800464c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004656:	4a04      	ldr	r2, [pc, #16]	; (8004668 <__NVIC_SetPriorityGrouping+0x44>)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	60d3      	str	r3, [r2, #12]
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <__NVIC_GetPriorityGrouping>:
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <__NVIC_GetPriorityGrouping+0x18>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	f003 0307 	and.w	r3, r3, #7
}
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <__NVIC_SetPriority>:
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	2b00      	cmp	r3, #0
 800469a:	db0a      	blt.n	80046b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	490c      	ldr	r1, [pc, #48]	; (80046d4 <__NVIC_SetPriority+0x4c>)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	0112      	lsls	r2, r2, #4
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	440b      	add	r3, r1
 80046ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046b0:	e00a      	b.n	80046c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4908      	ldr	r1, [pc, #32]	; (80046d8 <__NVIC_SetPriority+0x50>)
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	3b04      	subs	r3, #4
 80046c0:	0112      	lsls	r2, r2, #4
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	440b      	add	r3, r1
 80046c6:	761a      	strb	r2, [r3, #24]
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000e100 	.word	0xe000e100
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f1c3 0307 	rsb	r3, r3, #7
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	bf28      	it	cs
 80046fa:	2304      	movcs	r3, #4
 80046fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3304      	adds	r3, #4
 8004702:	2b06      	cmp	r3, #6
 8004704:	d902      	bls.n	800470c <NVIC_EncodePriority+0x30>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3b03      	subs	r3, #3
 800470a:	e000      	b.n	800470e <NVIC_EncodePriority+0x32>
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	401a      	ands	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004724:	f04f 31ff 	mov.w	r1, #4294967295
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	43d9      	mvns	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	4313      	orrs	r3, r2
         );
}
 8004736:	4618      	mov	r0, r3
 8004738:	3724      	adds	r7, #36	; 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004754:	d301      	bcc.n	800475a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004756:	2301      	movs	r3, #1
 8004758:	e00f      	b.n	800477a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <SysTick_Config+0x40>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004762:	210f      	movs	r1, #15
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	f7ff ff8e 	bl	8004688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <SysTick_Config+0x40>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004772:	4b04      	ldr	r3, [pc, #16]	; (8004784 <SysTick_Config+0x40>)
 8004774:	2207      	movs	r2, #7
 8004776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000e010 	.word	0xe000e010

08004788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff47 	bl	8004624 <__NVIC_SetPriorityGrouping>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	4603      	mov	r3, r0
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047ac:	f7ff ff5e 	bl	800466c <__NVIC_GetPriorityGrouping>
 80047b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7ff ff90 	bl	80046dc <NVIC_EncodePriority>
 80047bc:	4602      	mov	r2, r0
 80047be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff5f 	bl	8004688 <__NVIC_SetPriority>
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ffb2 	bl	8004744 <SysTick_Config>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e147      	b.n	8004a8e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd f84a 	bl	80018ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0210 	bic.w	r2, r2, #16
 8004826:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004828:	f7fe fb18 	bl	8002e5c <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800482e:	e012      	b.n	8004856 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004830:	f7fe fb14 	bl	8002e5c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b0a      	cmp	r3, #10
 800483c:	d90b      	bls.n	8004856 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2203      	movs	r2, #3
 800484e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e11b      	b.n	8004a8e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b08      	cmp	r3, #8
 8004862:	d0e5      	beq.n	8004830 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004874:	f7fe faf2 	bl	8002e5c <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800487a:	e012      	b.n	80048a2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800487c:	f7fe faee 	bl	8002e5c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b0a      	cmp	r3, #10
 8004888:	d90b      	bls.n	80048a2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2203      	movs	r2, #3
 800489a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e0f5      	b.n	8004a8e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0e5      	beq.n	800487c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0202 	orr.w	r2, r2, #2
 80048be:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a74      	ldr	r2, [pc, #464]	; (8004a98 <HAL_FDCAN_Init+0x2ac>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d103      	bne.n	80048d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80048ca:	4a74      	ldr	r2, [pc, #464]	; (8004a9c <HAL_FDCAN_Init+0x2b0>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	7c1b      	ldrb	r3, [r3, #16]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d108      	bne.n	80048ec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e8:	619a      	str	r2, [r3, #24]
 80048ea:	e007      	b.n	80048fc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7c5b      	ldrb	r3, [r3, #17]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004912:	619a      	str	r2, [r3, #24]
 8004914:	e007      	b.n	8004926 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004924:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	7c9b      	ldrb	r3, [r3, #18]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d108      	bne.n	8004940 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800493c:	619a      	str	r2, [r3, #24]
 800493e:	e007      	b.n	8004950 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800494e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699a      	ldr	r2, [r3, #24]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004974:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0210 	bic.w	r2, r2, #16
 8004984:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d108      	bne.n	80049a0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0204 	orr.w	r2, r2, #4
 800499c:	619a      	str	r2, [r3, #24]
 800499e:	e02c      	b.n	80049fa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d028      	beq.n	80049fa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d01c      	beq.n	80049ea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049be:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0210 	orr.w	r2, r2, #16
 80049ce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d110      	bne.n	80049fa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0220 	orr.w	r2, r2, #32
 80049e6:	619a      	str	r2, [r3, #24]
 80049e8:	e007      	b.n	80049fa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699a      	ldr	r2, [r3, #24]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0220 	orr.w	r2, r2, #32
 80049f8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a0a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a12:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a22:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a24:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2e:	d115      	bne.n	8004a5c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a3e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	3b01      	subs	r3, #1
 8004a46:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a48:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	3b01      	subs	r3, #1
 8004a52:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a58:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a5a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f814 	bl	8004aa0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40006400 	.word	0x40006400
 8004a9c:	40006500 	.word	0x40006500

08004aa0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004aa8:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004aaa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d103      	bne.n	8004abe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004abc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004ace:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ade:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	041a      	lsls	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b04:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	061a      	lsls	r2, r3, #24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e005      	b.n	8004b52 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3f3      	bcc.n	8004b46 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	4000a400 	.word	0x4000a400
 8004b70:	40006800 	.word	0x40006800
 8004b74:	40006c00 	.word	0x40006c00

08004b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b86:	e15a      	b.n	8004e3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	4013      	ands	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 814c 	beq.w	8004e38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d007      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb4:	2b11      	cmp	r3, #17
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b12      	cmp	r3, #18
 8004bbe:	d130      	bne.n	8004c22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0201 	and.w	r2, r3, #1
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d003      	beq.n	8004c62 <HAL_GPIO_Init+0xea>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b12      	cmp	r3, #18
 8004c60:	d123      	bne.n	8004caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	08da      	lsrs	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3208      	adds	r2, #8
 8004c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	220f      	movs	r2, #15
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	08da      	lsrs	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3208      	adds	r2, #8
 8004ca4:	6939      	ldr	r1, [r7, #16]
 8004ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0203 	and.w	r2, r3, #3
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80a6 	beq.w	8004e38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cec:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <HAL_GPIO_Init+0x2e4>)
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	4a5a      	ldr	r2, [pc, #360]	; (8004e5c <HAL_GPIO_Init+0x2e4>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6613      	str	r3, [r2, #96]	; 0x60
 8004cf8:	4b58      	ldr	r3, [pc, #352]	; (8004e5c <HAL_GPIO_Init+0x2e4>)
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d04:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <HAL_GPIO_Init+0x2e8>)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	220f      	movs	r2, #15
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	43db      	mvns	r3, r3
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4013      	ands	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d2e:	d01f      	beq.n	8004d70 <HAL_GPIO_Init+0x1f8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a4c      	ldr	r2, [pc, #304]	; (8004e64 <HAL_GPIO_Init+0x2ec>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d019      	beq.n	8004d6c <HAL_GPIO_Init+0x1f4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a4b      	ldr	r2, [pc, #300]	; (8004e68 <HAL_GPIO_Init+0x2f0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <HAL_GPIO_Init+0x1f0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <HAL_GPIO_Init+0x2f4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00d      	beq.n	8004d64 <HAL_GPIO_Init+0x1ec>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a49      	ldr	r2, [pc, #292]	; (8004e70 <HAL_GPIO_Init+0x2f8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <HAL_GPIO_Init+0x1e8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a48      	ldr	r2, [pc, #288]	; (8004e74 <HAL_GPIO_Init+0x2fc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_GPIO_Init+0x1e4>
 8004d58:	2305      	movs	r3, #5
 8004d5a:	e00a      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d5c:	2306      	movs	r3, #6
 8004d5e:	e008      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d60:	2304      	movs	r3, #4
 8004d62:	e006      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d64:	2303      	movs	r3, #3
 8004d66:	e004      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e002      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_GPIO_Init+0x1fa>
 8004d70:	2300      	movs	r3, #0
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	f002 0203 	and.w	r2, r2, #3
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	4093      	lsls	r3, r2
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d82:	4937      	ldr	r1, [pc, #220]	; (8004e60 <HAL_GPIO_Init+0x2e8>)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	3302      	adds	r3, #2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d90:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004db4:	4a30      	ldr	r2, [pc, #192]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de4:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e08:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <HAL_GPIO_Init+0x300>)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f47f ae9d 	bne.w	8004b88 <HAL_GPIO_Init+0x10>
  }
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40010000 	.word	0x40010000
 8004e64:	48000400 	.word	0x48000400
 8004e68:	48000800 	.word	0x48000800
 8004e6c:	48000c00 	.word	0x48000c00
 8004e70:	48001000 	.word	0x48001000
 8004e74:	48001400 	.word	0x48001400
 8004e78:	40010400 	.word	0x40010400

08004e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e8c:	787b      	ldrb	r3, [r7, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e92:	887a      	ldrh	r2, [r7, #2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e98:	e002      	b.n	8004ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d141      	bne.n	8004f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eba:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec6:	d131      	bne.n	8004f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ec8:	4b47      	ldr	r3, [pc, #284]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ece:	4a46      	ldr	r2, [pc, #280]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ed8:	4b43      	ldr	r3, [pc, #268]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ee0:	4a41      	ldr	r2, [pc, #260]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2232      	movs	r2, #50	; 0x32
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	4a3f      	ldr	r2, [pc, #252]	; (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	0c9b      	lsrs	r3, r3, #18
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004efe:	e002      	b.n	8004f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f06:	4b38      	ldr	r3, [pc, #224]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d102      	bne.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f2      	bne.n	8004f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f1a:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f26:	d158      	bne.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e057      	b.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f2c:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f32:	4a2d      	ldr	r2, [pc, #180]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f3c:	e04d      	b.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f44:	d141      	bne.n	8004fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f46:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f52:	d131      	bne.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5a:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f74:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2232      	movs	r2, #50	; 0x32
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	0c9b      	lsrs	r3, r3, #18
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f8a:	e002      	b.n	8004f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d102      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f2      	bne.n	8004f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb2:	d112      	bne.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e011      	b.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fc8:	e007      	b.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fd2:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	20000000 	.word	0x20000000
 8004ff0:	431bde83 	.word	0x431bde83

08004ff4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	; (8005010 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005002:	6093      	str	r3, [r2, #8]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40007000 	.word	0x40007000

08005014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e308      	b.n	8005638 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d075      	beq.n	800511e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005032:	4ba3      	ldr	r3, [pc, #652]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503c:	4ba0      	ldr	r3, [pc, #640]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d102      	bne.n	8005052 <HAL_RCC_OscConfig+0x3e>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b03      	cmp	r3, #3
 8005050:	d002      	beq.n	8005058 <HAL_RCC_OscConfig+0x44>
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d10b      	bne.n	8005070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	4b99      	ldr	r3, [pc, #612]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05b      	beq.n	800511c <HAL_RCC_OscConfig+0x108>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d157      	bne.n	800511c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e2e3      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d106      	bne.n	8005088 <HAL_RCC_OscConfig+0x74>
 800507a:	4b91      	ldr	r3, [pc, #580]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a90      	ldr	r2, [pc, #576]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e01d      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x98>
 8005092:	4b8b      	ldr	r3, [pc, #556]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a8a      	ldr	r2, [pc, #552]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4b88      	ldr	r3, [pc, #544]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a87      	ldr	r2, [pc, #540]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e00b      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 80050ac:	4b84      	ldr	r3, [pc, #528]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a83      	ldr	r2, [pc, #524]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b81      	ldr	r3, [pc, #516]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a80      	ldr	r2, [pc, #512]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80050be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fd fec6 	bl	8002e5c <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fd fec2 	bl	8002e5c <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	; 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e2a8      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e6:	4b76      	ldr	r3, [pc, #472]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0xc0>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fd feb2 	bl	8002e5c <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fd feae 	bl	8002e5c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	; 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e294      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800510e:	4b6c      	ldr	r3, [pc, #432]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0xe8>
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d075      	beq.n	8005216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800512a:	4b65      	ldr	r3, [pc, #404]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005134:	4b62      	ldr	r3, [pc, #392]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b0c      	cmp	r3, #12
 8005142:	d102      	bne.n	800514a <HAL_RCC_OscConfig+0x136>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d002      	beq.n	8005150 <HAL_RCC_OscConfig+0x13c>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b04      	cmp	r3, #4
 800514e:	d11f      	bne.n	8005190 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005150:	4b5b      	ldr	r3, [pc, #364]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_RCC_OscConfig+0x154>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e267      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b55      	ldr	r3, [pc, #340]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	4952      	ldr	r1, [pc, #328]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800517c:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <HAL_RCC_OscConfig+0x2b0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7fd fe1f 	bl	8002dc4 <HAL_InitTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d043      	beq.n	8005214 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e253      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d023      	beq.n	80051e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005198:	4b49      	ldr	r3, [pc, #292]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a48      	ldr	r2, [pc, #288]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd fe5a 	bl	8002e5c <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ac:	f7fd fe56 	bl	8002e5c <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e23c      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051be:	4b40      	ldr	r3, [pc, #256]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b3d      	ldr	r3, [pc, #244]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	061b      	lsls	r3, r3, #24
 80051d8:	4939      	ldr	r1, [pc, #228]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	604b      	str	r3, [r1, #4]
 80051de:	e01a      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e0:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a36      	ldr	r2, [pc, #216]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80051e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fd fe36 	bl	8002e5c <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f4:	f7fd fe32 	bl	8002e5c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e218      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x1e0>
 8005212:	e000      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005214:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d03c      	beq.n	800529c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01c      	beq.n	8005264 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800522c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005230:	4a23      	ldr	r2, [pc, #140]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fd fe0f 	bl	8002e5c <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005242:	f7fd fe0b 	bl	8002e5c <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1f1      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ef      	beq.n	8005242 <HAL_RCC_OscConfig+0x22e>
 8005262:	e01b      	b.n	800529c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005264:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526a:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005274:	f7fd fdf2 	bl	8002e5c <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800527c:	f7fd fdee 	bl	8002e5c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e1d4      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1ef      	bne.n	800527c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80ab 	beq.w	8005400 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	2300      	movs	r3, #0
 80052ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052ae:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_RCC_OscConfig+0x2b4>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e005      	b.n	80052ca <HAL_RCC_OscConfig+0x2b6>
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	20000004 	.word	0x20000004
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ce:	4baf      	ldr	r3, [pc, #700]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d2:	4aae      	ldr	r2, [pc, #696]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d8:	6593      	str	r3, [r2, #88]	; 0x58
 80052da:	4bac      	ldr	r3, [pc, #688]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ea:	4ba9      	ldr	r3, [pc, #676]	; (8005590 <HAL_RCC_OscConfig+0x57c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f6:	4ba6      	ldr	r3, [pc, #664]	; (8005590 <HAL_RCC_OscConfig+0x57c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4aa5      	ldr	r2, [pc, #660]	; (8005590 <HAL_RCC_OscConfig+0x57c>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fd fdab 	bl	8002e5c <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fd fda7 	bl	8002e5c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e18d      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531c:	4b9c      	ldr	r3, [pc, #624]	; (8005590 <HAL_RCC_OscConfig+0x57c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d108      	bne.n	8005342 <HAL_RCC_OscConfig+0x32e>
 8005330:	4b96      	ldr	r3, [pc, #600]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	4a95      	ldr	r2, [pc, #596]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005340:	e024      	b.n	800538c <HAL_RCC_OscConfig+0x378>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b05      	cmp	r3, #5
 8005348:	d110      	bne.n	800536c <HAL_RCC_OscConfig+0x358>
 800534a:	4b90      	ldr	r3, [pc, #576]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	4a8e      	ldr	r2, [pc, #568]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005352:	f043 0304 	orr.w	r3, r3, #4
 8005356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800535a:	4b8c      	ldr	r3, [pc, #560]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	4a8a      	ldr	r2, [pc, #552]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800536a:	e00f      	b.n	800538c <HAL_RCC_OscConfig+0x378>
 800536c:	4b87      	ldr	r3, [pc, #540]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	4a86      	ldr	r2, [pc, #536]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800537c:	4b83      	ldr	r3, [pc, #524]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	4a82      	ldr	r2, [pc, #520]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005384:	f023 0304 	bic.w	r3, r3, #4
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fd fd62 	bl	8002e5c <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fd fd5e 	bl	8002e5c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e142      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b2:	4b76      	ldr	r3, [pc, #472]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0ed      	beq.n	800539c <HAL_RCC_OscConfig+0x388>
 80053c0:	e015      	b.n	80053ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c2:	f7fd fd4b 	bl	8002e5c <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fd fd47 	bl	8002e5c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e12b      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e0:	4b6a      	ldr	r3, [pc, #424]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ed      	bne.n	80053ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ee:	7ffb      	ldrb	r3, [r7, #31]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d105      	bne.n	8005400 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f4:	4b65      	ldr	r3, [pc, #404]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	4a64      	ldr	r2, [pc, #400]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80053fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d03c      	beq.n	8005486 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01c      	beq.n	800544e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005414:	4b5d      	ldr	r3, [pc, #372]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800541a:	4a5c      	ldr	r2, [pc, #368]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd fd1a 	bl	8002e5c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800542c:	f7fd fd16 	bl	8002e5c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0fc      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800543e:	4b53      	ldr	r3, [pc, #332]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <HAL_RCC_OscConfig+0x418>
 800544c:	e01b      	b.n	8005486 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800544e:	4b4f      	ldr	r3, [pc, #316]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005454:	4a4d      	ldr	r2, [pc, #308]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fd fcfd 	bl	8002e5c <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005466:	f7fd fcf9 	bl	8002e5c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e0df      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005478:	4b44      	ldr	r3, [pc, #272]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800547a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ef      	bne.n	8005466 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80d3 	beq.w	8005636 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005490:	4b3e      	ldr	r3, [pc, #248]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b0c      	cmp	r3, #12
 800549a:	f000 808d 	beq.w	80055b8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d15a      	bne.n	800555c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a6:	4b39      	ldr	r3, [pc, #228]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a38      	ldr	r2, [pc, #224]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80054ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b2:	f7fd fcd3 	bl	8002e5c <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fd fccf 	bl	8002e5c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e0b5      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054cc:	4b2f      	ldr	r3, [pc, #188]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f0      	bne.n	80054ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054d8:	4b2c      	ldr	r3, [pc, #176]	; (800558c <HAL_RCC_OscConfig+0x578>)
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <HAL_RCC_OscConfig+0x580>)
 80054de:	4013      	ands	r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6a11      	ldr	r1, [r2, #32]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054e8:	3a01      	subs	r2, #1
 80054ea:	0112      	lsls	r2, r2, #4
 80054ec:	4311      	orrs	r1, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054f2:	0212      	lsls	r2, r2, #8
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054fa:	0852      	lsrs	r2, r2, #1
 80054fc:	3a01      	subs	r2, #1
 80054fe:	0552      	lsls	r2, r2, #21
 8005500:	4311      	orrs	r1, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005506:	0852      	lsrs	r2, r2, #1
 8005508:	3a01      	subs	r2, #1
 800550a:	0652      	lsls	r2, r2, #25
 800550c:	4311      	orrs	r1, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005512:	06d2      	lsls	r2, r2, #27
 8005514:	430a      	orrs	r2, r1
 8005516:	491d      	ldr	r1, [pc, #116]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005518:	4313      	orrs	r3, r2
 800551a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005526:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005528:	4b18      	ldr	r3, [pc, #96]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800552e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fd fc92 	bl	8002e5c <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553c:	f7fd fc8e 	bl	8002e5c <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e074      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x528>
 800555a:	e06c      	b.n	8005636 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005566:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005568:	4b08      	ldr	r3, [pc, #32]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a07      	ldr	r2, [pc, #28]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_OscConfig+0x578>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_RCC_OscConfig+0x578>)
 800557a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800557e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005582:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fd fc6a 	bl	8002e5c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558a:	e00e      	b.n	80055aa <HAL_RCC_OscConfig+0x596>
 800558c:	40021000 	.word	0x40021000
 8005590:	40007000 	.word	0x40007000
 8005594:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fd fc60 	bl	8002e5c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e046      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055aa:	4b25      	ldr	r3, [pc, #148]	; (8005640 <HAL_RCC_OscConfig+0x62c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x584>
 80055b6:	e03e      	b.n	8005636 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e039      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <HAL_RCC_OscConfig+0x62c>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d12c      	bne.n	8005632 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	3b01      	subs	r3, #1
 80055e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d123      	bne.n	8005632 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d11b      	bne.n	8005632 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d113      	bne.n	8005632 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	3b01      	subs	r3, #1
 8005618:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d109      	bne.n	8005632 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	3b01      	subs	r3, #1
 800562c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000

08005644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e11e      	b.n	800589a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800565c:	4b91      	ldr	r3, [pc, #580]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d910      	bls.n	800568c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566a:	4b8e      	ldr	r3, [pc, #568]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 020f 	bic.w	r2, r3, #15
 8005672:	498c      	ldr	r1, [pc, #560]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b8a      	ldr	r3, [pc, #552]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e106      	b.n	800589a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d073      	beq.n	8005780 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b03      	cmp	r3, #3
 800569e:	d129      	bne.n	80056f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a0:	4b81      	ldr	r3, [pc, #516]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0f4      	b.n	800589a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056b0:	f000 f99e 	bl	80059f0 <RCC_GetSysClockFreqFromPLLSource>
 80056b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4a7c      	ldr	r2, [pc, #496]	; (80058ac <HAL_RCC_ClockConfig+0x268>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d93f      	bls.n	800573e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056be:	4b7a      	ldr	r3, [pc, #488]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d033      	beq.n	800573e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d12f      	bne.n	800573e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056de:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056e6:	4a70      	ldr	r2, [pc, #448]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80056e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e024      	b.n	800573e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d107      	bne.n	800570c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056fc:	4b6a      	ldr	r3, [pc, #424]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0c6      	b.n	800589a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800570c:	4b66      	ldr	r3, [pc, #408]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0be      	b.n	800589a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800571c:	f000 f8ce 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 8005720:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4a61      	ldr	r2, [pc, #388]	; (80058ac <HAL_RCC_ClockConfig+0x268>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d909      	bls.n	800573e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800572a:	4b5f      	ldr	r3, [pc, #380]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005732:	4a5d      	ldr	r2, [pc, #372]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 8005734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005738:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800573e:	4b5a      	ldr	r3, [pc, #360]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4957      	ldr	r1, [pc, #348]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800574c:	4313      	orrs	r3, r2
 800574e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005750:	f7fd fb84 	bl	8002e5c <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	e00a      	b.n	800576e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005758:	f7fd fb80 	bl	8002e5c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e095      	b.n	800589a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	4b4e      	ldr	r3, [pc, #312]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 020c 	and.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	429a      	cmp	r2, r3
 800577e:	d1eb      	bne.n	8005758 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d023      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005798:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	4a42      	ldr	r2, [pc, #264]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800579e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057b0:	4b3d      	ldr	r3, [pc, #244]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80057ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c0:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4936      	ldr	r1, [pc, #216]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	608b      	str	r3, [r1, #8]
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d105      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057da:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	4a32      	ldr	r2, [pc, #200]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 80057e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057e6:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d21d      	bcs.n	8005830 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f4:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f023 020f 	bic.w	r2, r3, #15
 80057fc:	4929      	ldr	r1, [pc, #164]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005804:	f7fd fb2a 	bl	8002e5c <HAL_GetTick>
 8005808:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	e00a      	b.n	8005822 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800580c:	f7fd fb26 	bl	8002e5c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	f241 3288 	movw	r2, #5000	; 0x1388
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e03b      	b.n	800589a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <HAL_RCC_ClockConfig+0x260>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d1ed      	bne.n	800580c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800583c:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4917      	ldr	r1, [pc, #92]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800585a:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	490f      	ldr	r1, [pc, #60]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800586e:	f000 f825 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 8005872:	4602      	mov	r2, r0
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <HAL_RCC_ClockConfig+0x264>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	490c      	ldr	r1, [pc, #48]	; (80058b0 <HAL_RCC_ClockConfig+0x26c>)
 8005880:	5ccb      	ldrb	r3, [r1, r3]
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <HAL_RCC_ClockConfig+0x270>)
 800588c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <HAL_RCC_ClockConfig+0x274>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fa96 	bl	8002dc4 <HAL_InitTick>
 8005898:	4603      	mov	r3, r0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40022000 	.word	0x40022000
 80058a8:	40021000 	.word	0x40021000
 80058ac:	04c4b400 	.word	0x04c4b400
 80058b0:	0800c0e4 	.word	0x0800c0e4
 80058b4:	20000000 	.word	0x20000000
 80058b8:	20000004 	.word	0x20000004

080058bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058c2:	4b2c      	ldr	r3, [pc, #176]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d102      	bne.n	80058d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058ce:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	e047      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058d4:	4b27      	ldr	r3, [pc, #156]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d102      	bne.n	80058e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058e0:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	e03e      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058e6:	4b23      	ldr	r3, [pc, #140]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d136      	bne.n	8005960 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058f2:	4b20      	ldr	r3, [pc, #128]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058fc:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3301      	adds	r3, #1
 8005908:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d10c      	bne.n	800592a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005910:	4a1a      	ldr	r2, [pc, #104]	; (800597c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	4a16      	ldr	r2, [pc, #88]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 800591a:	68d2      	ldr	r2, [r2, #12]
 800591c:	0a12      	lsrs	r2, r2, #8
 800591e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	617b      	str	r3, [r7, #20]
      break;
 8005928:	e00c      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800592a:	4a13      	ldr	r2, [pc, #76]	; (8005978 <HAL_RCC_GetSysClockFreq+0xbc>)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005932:	4a10      	ldr	r2, [pc, #64]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005934:	68d2      	ldr	r2, [r2, #12]
 8005936:	0a12      	lsrs	r2, r2, #8
 8005938:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800593c:	fb02 f303 	mul.w	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]
      break;
 8005942:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	0e5b      	lsrs	r3, r3, #25
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	3301      	adds	r3, #1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e001      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005964:	693b      	ldr	r3, [r7, #16]
}
 8005966:	4618      	mov	r0, r3
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
 8005978:	00f42400 	.word	0x00f42400
 800597c:	007a1200 	.word	0x007a1200

08005980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005984:	4b03      	ldr	r3, [pc, #12]	; (8005994 <HAL_RCC_GetHCLKFreq+0x14>)
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20000000 	.word	0x20000000

08005998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800599c:	f7ff fff0 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4904      	ldr	r1, [pc, #16]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40021000 	.word	0x40021000
 80059c0:	0800c0f4 	.word	0x0800c0f4

080059c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059c8:	f7ff ffda 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0adb      	lsrs	r3, r3, #11
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4904      	ldr	r1, [pc, #16]	; (80059ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	0800c0f4 	.word	0x0800c0f4

080059f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a00:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d10c      	bne.n	8005a2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a14:	4a17      	ldr	r2, [pc, #92]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a1e:	68d2      	ldr	r2, [r2, #12]
 8005a20:	0a12      	lsrs	r2, r2, #8
 8005a22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	617b      	str	r3, [r7, #20]
    break;
 8005a2c:	e00c      	b.n	8005a48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2e:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	4a0e      	ldr	r2, [pc, #56]	; (8005a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	0a12      	lsrs	r2, r2, #8
 8005a3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
 8005a44:	617b      	str	r3, [r7, #20]
    break;
 8005a46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	0e5b      	lsrs	r3, r3, #25
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	3301      	adds	r3, #1
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a62:	687b      	ldr	r3, [r7, #4]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	40021000 	.word	0x40021000
 8005a74:	007a1200 	.word	0x007a1200
 8005a78:	00f42400 	.word	0x00f42400

08005a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a84:	2300      	movs	r3, #0
 8005a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8098 	beq.w	8005bca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9e:	4b43      	ldr	r3, [pc, #268]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aaa:	4b40      	ldr	r3, [pc, #256]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	4a3f      	ldr	r2, [pc, #252]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ab6:	4b3d      	ldr	r3, [pc, #244]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac6:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a39      	ldr	r2, [pc, #228]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ad2:	f7fd f9c3 	bl	8002e5c <HAL_GetTick>
 8005ad6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad8:	e009      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ada:	f7fd f9bf 	bl	8002e5c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d902      	bls.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	74fb      	strb	r3, [r7, #19]
        break;
 8005aec:	e005      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0ef      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005afa:	7cfb      	ldrb	r3, [r7, #19]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d159      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b00:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d01e      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d019      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b1c:	4b23      	ldr	r3, [pc, #140]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b28:	4b20      	ldr	r3, [pc, #128]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b38:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b48:	4a18      	ldr	r2, [pc, #96]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5a:	f7fd f97f 	bl	8002e5c <HAL_GetTick>
 8005b5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b60:	e00b      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b62:	f7fd f97b 	bl	8002e5c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d902      	bls.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	74fb      	strb	r3, [r7, #19]
            break;
 8005b78:	e006      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ec      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8e:	4b07      	ldr	r3, [pc, #28]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9c:	4903      	ldr	r1, [pc, #12]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ba6:	7cfb      	ldrb	r3, [r7, #19]
 8005ba8:	74bb      	strb	r3, [r7, #18]
 8005baa:	e005      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	7cfb      	ldrb	r3, [r7, #19]
 8005bb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bb8:	7c7b      	ldrb	r3, [r7, #17]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bbe:	4baf      	ldr	r3, [pc, #700]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc2:	4aae      	ldr	r2, [pc, #696]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bd6:	4ba9      	ldr	r3, [pc, #676]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f023 0203 	bic.w	r2, r3, #3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	49a5      	ldr	r1, [pc, #660]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bf8:	4ba0      	ldr	r3, [pc, #640]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f023 020c 	bic.w	r2, r3, #12
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	499d      	ldr	r1, [pc, #628]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c1a:	4b98      	ldr	r3, [pc, #608]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4994      	ldr	r1, [pc, #592]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c3c:	4b8f      	ldr	r3, [pc, #572]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	498c      	ldr	r1, [pc, #560]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c5e:	4b87      	ldr	r3, [pc, #540]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	4983      	ldr	r1, [pc, #524]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c80:	4b7e      	ldr	r3, [pc, #504]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	497b      	ldr	r1, [pc, #492]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ca2:	4b76      	ldr	r3, [pc, #472]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	4972      	ldr	r1, [pc, #456]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cc4:	4b6d      	ldr	r3, [pc, #436]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	496a      	ldr	r1, [pc, #424]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ce6:	4b65      	ldr	r3, [pc, #404]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	4961      	ldr	r1, [pc, #388]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d08:	4b5c      	ldr	r3, [pc, #368]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d0e:	f023 0203 	bic.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	4959      	ldr	r1, [pc, #356]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d2a:	4b54      	ldr	r3, [pc, #336]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4950      	ldr	r1, [pc, #320]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d015      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d4c:	4b4b      	ldr	r3, [pc, #300]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	4948      	ldr	r1, [pc, #288]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6a:	d105      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6c:	4b43      	ldr	r3, [pc, #268]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a42      	ldr	r2, [pc, #264]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d015      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d84:	4b3d      	ldr	r3, [pc, #244]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	493a      	ldr	r1, [pc, #232]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da2:	d105      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da4:	4b35      	ldr	r3, [pc, #212]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d015      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dbc:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	492c      	ldr	r1, [pc, #176]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dda:	d105      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005de6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d015      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df4:	4b21      	ldr	r3, [pc, #132]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	491e      	ldr	r1, [pc, #120]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e14:	4b19      	ldr	r3, [pc, #100]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e2c:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4910      	ldr	r1, [pc, #64]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d018      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	4902      	ldr	r1, [pc, #8]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e7a:	e001      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005e7c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e88:	d105      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e8a:	4b21      	ldr	r3, [pc, #132]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	4a20      	ldr	r2, [pc, #128]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e94:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d015      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb0:	4917      	ldr	r1, [pc, #92]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d105      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4a12      	ldr	r2, [pc, #72]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ecc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d015      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee8:	4909      	ldr	r1, [pc, #36]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef8:	d105      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f04:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f06:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000

08005f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e09d      	b.n	8006062 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f36:	d009      	beq.n	8005f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	61da      	str	r2, [r3, #28]
 8005f3e:	e005      	b.n	8005f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fc fb72 	bl	8002650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f8c:	d902      	bls.n	8005f94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e002      	b.n	8005f9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fa2:	d007      	beq.n	8005fb4 <HAL_SPI_Init+0xa0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff6:	ea42 0103 	orr.w	r1, r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	f003 0204 	and.w	r2, r3, #4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006030:	ea42 0103 	orr.w	r1, r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b08a      	sub	sp, #40	; 0x28
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006078:	2301      	movs	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x26>
 800608c:	2302      	movs	r3, #2
 800608e:	e1fb      	b.n	8006488 <HAL_SPI_TransmitReceive+0x41e>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006098:	f7fc fee0 	bl	8002e5c <HAL_GetTick>
 800609c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060ac:	887b      	ldrh	r3, [r7, #2]
 80060ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060b0:	887b      	ldrh	r3, [r7, #2]
 80060b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060b4:	7efb      	ldrb	r3, [r7, #27]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d00e      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x6e>
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c0:	d106      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x66>
 80060ca:	7efb      	ldrb	r3, [r7, #27]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d003      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060d6:	e1cd      	b.n	8006474 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_SPI_TransmitReceive+0x80>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_TransmitReceive+0x80>
 80060e4:	887b      	ldrh	r3, [r7, #2]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060f0:	e1c0      	b.n	8006474 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d003      	beq.n	8006106 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2205      	movs	r2, #5
 8006102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	887a      	ldrh	r2, [r7, #2]
 8006116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	887a      	ldrh	r2, [r7, #2]
 800611e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	887a      	ldrh	r2, [r7, #2]
 800612c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	887a      	ldrh	r2, [r7, #2]
 8006132:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006148:	d802      	bhi.n	8006150 <HAL_SPI_TransmitReceive+0xe6>
 800614a:	8a3b      	ldrh	r3, [r7, #16]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d908      	bls.n	8006162 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	e007      	b.n	8006172 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006170:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d007      	beq.n	8006190 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800618e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006198:	d97c      	bls.n	8006294 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x13e>
 80061a2:	8a7b      	ldrh	r3, [r7, #18]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d169      	bne.n	800627c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	881a      	ldrh	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061cc:	e056      	b.n	800627c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d11b      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x1aa>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d016      	beq.n	8006214 <HAL_SPI_TransmitReceive+0x1aa>
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d113      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	881a      	ldrh	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	1c9a      	adds	r2, r3, #2
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b01      	cmp	r3, #1
 8006220:	d11c      	bne.n	800625c <HAL_SPI_TransmitReceive+0x1f2>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	b292      	uxth	r2, r2
 800623a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006258:	2301      	movs	r3, #1
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800625c:	f7fc fdfe 	bl	8002e5c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006268:	429a      	cmp	r2, r3
 800626a:	d807      	bhi.n	800627c <HAL_SPI_TransmitReceive+0x212>
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d003      	beq.n	800627c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800627a:	e0fb      	b.n	8006474 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1a3      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x164>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800628c:	b29b      	uxth	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d19d      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x164>
 8006292:	e0df      	b.n	8006454 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x23a>
 800629c:	8a7b      	ldrh	r3, [r7, #18]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	f040 80cb 	bne.w	800643a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d912      	bls.n	80062d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	881a      	ldrh	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	1c9a      	adds	r2, r3, #2
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b02      	subs	r3, #2
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062d2:	e0b2      	b.n	800643a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062fa:	e09e      	b.n	800643a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d134      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x30a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02f      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x30a>
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	2b01      	cmp	r3, #1
 8006318:	d12c      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d912      	bls.n	800634a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b02      	subs	r3, #2
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006348:	e012      	b.n	8006370 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	330c      	adds	r3, #12
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d148      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x3aa>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d042      	beq.n	8006414 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d923      	bls.n	80063e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	b292      	uxth	r2, r2
 80063a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b02      	subs	r3, #2
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d81f      	bhi.n	8006410 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	e016      	b.n	8006410 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f103 020c 	add.w	r2, r3, #12
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	7812      	ldrb	r2, [r2, #0]
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006410:	2301      	movs	r3, #1
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006414:	f7fc fd22 	bl	8002e5c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006420:	429a      	cmp	r2, r3
 8006422:	d803      	bhi.n	800642c <HAL_SPI_TransmitReceive+0x3c2>
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d102      	bne.n	8006432 <HAL_SPI_TransmitReceive+0x3c8>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006438:	e01c      	b.n	8006474 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	f47f af5b 	bne.w	80062fc <HAL_SPI_TransmitReceive+0x292>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	f47f af54 	bne.w	80062fc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006454:	69fa      	ldr	r2, [r7, #28]
 8006456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f933 	bl	80066c4 <SPI_EndRxTxTransaction>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d006      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	661a      	str	r2, [r3, #96]	; 0x60
 8006470:	e000      	b.n	8006474 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	; 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064a0:	f7fc fcdc 	bl	8002e5c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	1a9b      	subs	r3, r3, r2
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	4413      	add	r3, r2
 80064ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064b0:	f7fc fcd4 	bl	8002e5c <HAL_GetTick>
 80064b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	015b      	lsls	r3, r3, #5
 80064bc:	0d1b      	lsrs	r3, r3, #20
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
 80064c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064c6:	e054      	b.n	8006572 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d050      	beq.n	8006572 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064d0:	f7fc fcc4 	bl	8002e5c <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d902      	bls.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d13d      	bne.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fe:	d111      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006508:	d004      	beq.n	8006514 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006512:	d107      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652c:	d10f      	bne.n	800654e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800654c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e017      	b.n	8006592 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3b01      	subs	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4013      	ands	r3, r2
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	bf0c      	ite	eq
 8006582:	2301      	moveq	r3, #1
 8006584:	2300      	movne	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	429a      	cmp	r2, r3
 800658e:	d19b      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000000 	.word	0x20000000

080065a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065ae:	f7fc fc55 	bl	8002e5c <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	4413      	add	r3, r2
 80065bc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065be:	f7fc fc4d 	bl	8002e5c <HAL_GetTick>
 80065c2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065c4:	4b3e      	ldr	r3, [pc, #248]	; (80066c0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	00da      	lsls	r2, r3, #3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	0d1b      	lsrs	r3, r3, #20
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	fb02 f303 	mul.w	r3, r2, r3
 80065da:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80065dc:	e062      	b.n	80066a4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065e4:	d109      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x5a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d106      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80065f8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d050      	beq.n	80066a4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006602:	f7fc fc2b 	bl	8002e5c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	429a      	cmp	r2, r3
 8006610:	d902      	bls.n	8006618 <SPI_WaitFifoStateUntilTimeout+0x78>
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13d      	bne.n	8006694 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006630:	d111      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663a:	d004      	beq.n	8006646 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d107      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	d10f      	bne.n	8006680 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800667e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e010      	b.n	80066b6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d194      	bne.n	80065de <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000000 	.word	0x20000000

080066c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff ff5f 	bl	80065a0 <SPI_WaitFifoStateUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e027      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff fec4 	bl	8006490 <SPI_WaitFlagStateUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e014      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff ff38 	bl	80065a0 <SPI_WaitFifoStateUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e000      	b.n	8006748 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e049      	b.n	80067f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fc f9d8 	bl	8002b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 fd1a 	bl	80071c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e054      	b.n	80068c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d022      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006842:	d01d      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d018      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d013      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <HAL_TIM_Base_Start_IT+0xdc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00e      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d009      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d004      	beq.n	8006880 <HAL_TIM_Base_Start_IT+0x80>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d115      	bne.n	80068ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	4b19      	ldr	r3, [pc, #100]	; (80068ec <HAL_TIM_Base_Start_IT+0xec>)
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b06      	cmp	r3, #6
 8006890:	d015      	beq.n	80068be <HAL_TIM_Base_Start_IT+0xbe>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006898:	d011      	beq.n	80068be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068aa:	e008      	b.n	80068be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	e000      	b.n	80068c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40013400 	.word	0x40013400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40015000 	.word	0x40015000
 80068ec:	00010007 	.word	0x00010007

080068f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e049      	b.n	8006996 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f841 	bl	800699e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3304      	adds	r3, #4
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f000 fc4a 	bl	80071c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e049      	b.n	8006a58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d106      	bne.n	80069de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f841 	bl	8006a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f000 fbe9 	bl	80071c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <HAL_TIM_PWM_Start+0x24>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	bf14      	ite	ne
 8006a90:	2301      	movne	r3, #1
 8006a92:	2300      	moveq	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	e03c      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d109      	bne.n	8006ab2 <HAL_TIM_PWM_Start+0x3e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	bf14      	ite	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	2300      	moveq	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	e02f      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d109      	bne.n	8006acc <HAL_TIM_PWM_Start+0x58>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	e022      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d109      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x72>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	bf14      	ite	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	2300      	moveq	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	e015      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d109      	bne.n	8006b00 <HAL_TIM_PWM_Start+0x8c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	e008      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0a6      	b.n	8006c68 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start+0xb6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b28:	e023      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xc6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b38:	e01b      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_PWM_Start+0xd6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b48:	e013      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_PWM_Start+0xe6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b58:	e00b      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_PWM_Start+0xf6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b68:	e003      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2201      	movs	r2, #1
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 ff92 	bl	8007aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a3a      	ldr	r2, [pc, #232]	; (8006c70 <HAL_TIM_PWM_Start+0x1fc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_PWM_Start+0x148>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a39      	ldr	r2, [pc, #228]	; (8006c74 <HAL_TIM_PWM_Start+0x200>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_PWM_Start+0x148>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a37      	ldr	r2, [pc, #220]	; (8006c78 <HAL_TIM_PWM_Start+0x204>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_PWM_Start+0x148>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a36      	ldr	r2, [pc, #216]	; (8006c7c <HAL_TIM_PWM_Start+0x208>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_PWM_Start+0x148>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a34      	ldr	r2, [pc, #208]	; (8006c80 <HAL_TIM_PWM_Start+0x20c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_PWM_Start+0x148>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a33      	ldr	r2, [pc, #204]	; (8006c84 <HAL_TIM_PWM_Start+0x210>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIM_PWM_Start+0x14c>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <HAL_TIM_PWM_Start+0x14e>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <HAL_TIM_PWM_Start+0x1fc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x1b2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be8:	d01d      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x1b2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <HAL_TIM_PWM_Start+0x214>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x1b2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a24      	ldr	r2, [pc, #144]	; (8006c8c <HAL_TIM_PWM_Start+0x218>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x1b2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a23      	ldr	r2, [pc, #140]	; (8006c90 <HAL_TIM_PWM_Start+0x21c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x1b2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_TIM_PWM_Start+0x200>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x1b2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_TIM_PWM_Start+0x204>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIM_PWM_Start+0x1b2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a18      	ldr	r2, [pc, #96]	; (8006c84 <HAL_TIM_PWM_Start+0x210>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d115      	bne.n	8006c52 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <HAL_TIM_PWM_Start+0x220>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2b06      	cmp	r3, #6
 8006c36:	d015      	beq.n	8006c64 <HAL_TIM_PWM_Start+0x1f0>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3e:	d011      	beq.n	8006c64 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c50:	e008      	b.n	8006c64 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0201 	orr.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	e000      	b.n	8006c66 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40013400 	.word	0x40013400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40014400 	.word	0x40014400
 8006c80:	40014800 	.word	0x40014800
 8006c84:	40015000 	.word	0x40015000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	00010007 	.word	0x00010007

08006c98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e064      	b.n	8006d7c <HAL_TIM_OC_ConfigChannel+0xe4>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b14      	cmp	r3, #20
 8006cbe:	d857      	bhi.n	8006d70 <HAL_TIM_OC_ConfigChannel+0xd8>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006d1d 	.word	0x08006d1d
 8006ccc:	08006d71 	.word	0x08006d71
 8006cd0:	08006d71 	.word	0x08006d71
 8006cd4:	08006d71 	.word	0x08006d71
 8006cd8:	08006d2b 	.word	0x08006d2b
 8006cdc:	08006d71 	.word	0x08006d71
 8006ce0:	08006d71 	.word	0x08006d71
 8006ce4:	08006d71 	.word	0x08006d71
 8006ce8:	08006d39 	.word	0x08006d39
 8006cec:	08006d71 	.word	0x08006d71
 8006cf0:	08006d71 	.word	0x08006d71
 8006cf4:	08006d71 	.word	0x08006d71
 8006cf8:	08006d47 	.word	0x08006d47
 8006cfc:	08006d71 	.word	0x08006d71
 8006d00:	08006d71 	.word	0x08006d71
 8006d04:	08006d71 	.word	0x08006d71
 8006d08:	08006d55 	.word	0x08006d55
 8006d0c:	08006d71 	.word	0x08006d71
 8006d10:	08006d71 	.word	0x08006d71
 8006d14:	08006d71 	.word	0x08006d71
 8006d18:	08006d63 	.word	0x08006d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 faf8 	bl	8007318 <TIM_OC1_SetConfig>
      break;
 8006d28:	e023      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb8b 	bl	800744c <TIM_OC2_SetConfig>
      break;
 8006d36:	e01c      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fc18 	bl	8007574 <TIM_OC3_SetConfig>
      break;
 8006d44:	e015      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fca3 	bl	8007698 <TIM_OC4_SetConfig>
      break;
 8006d52:	e00e      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fd30 	bl	80077c0 <TIM_OC5_SetConfig>
      break;
 8006d60:	e007      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fd93 	bl	8007894 <TIM_OC6_SetConfig>
      break;
 8006d6e:	e000      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8006d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e0fd      	b.n	8006f9a <HAL_TIM_PWM_ConfigChannel+0x216>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b14      	cmp	r3, #20
 8006daa:	f200 80f0 	bhi.w	8006f8e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006e09 	.word	0x08006e09
 8006db8:	08006f8f 	.word	0x08006f8f
 8006dbc:	08006f8f 	.word	0x08006f8f
 8006dc0:	08006f8f 	.word	0x08006f8f
 8006dc4:	08006e49 	.word	0x08006e49
 8006dc8:	08006f8f 	.word	0x08006f8f
 8006dcc:	08006f8f 	.word	0x08006f8f
 8006dd0:	08006f8f 	.word	0x08006f8f
 8006dd4:	08006e8b 	.word	0x08006e8b
 8006dd8:	08006f8f 	.word	0x08006f8f
 8006ddc:	08006f8f 	.word	0x08006f8f
 8006de0:	08006f8f 	.word	0x08006f8f
 8006de4:	08006ecb 	.word	0x08006ecb
 8006de8:	08006f8f 	.word	0x08006f8f
 8006dec:	08006f8f 	.word	0x08006f8f
 8006df0:	08006f8f 	.word	0x08006f8f
 8006df4:	08006f0d 	.word	0x08006f0d
 8006df8:	08006f8f 	.word	0x08006f8f
 8006dfc:	08006f8f 	.word	0x08006f8f
 8006e00:	08006f8f 	.word	0x08006f8f
 8006e04:	08006f4d 	.word	0x08006f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fa82 	bl	8007318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0208 	orr.w	r2, r2, #8
 8006e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0204 	bic.w	r2, r2, #4
 8006e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6999      	ldr	r1, [r3, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	619a      	str	r2, [r3, #24]
      break;
 8006e46:	e0a3      	b.n	8006f90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fafc 	bl	800744c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6999      	ldr	r1, [r3, #24]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	021a      	lsls	r2, r3, #8
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	619a      	str	r2, [r3, #24]
      break;
 8006e88:	e082      	b.n	8006f90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fb6f 	bl	8007574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0208 	orr.w	r2, r2, #8
 8006ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0204 	bic.w	r2, r2, #4
 8006eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	61da      	str	r2, [r3, #28]
      break;
 8006ec8:	e062      	b.n	8006f90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fbe1 	bl	8007698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69da      	ldr	r2, [r3, #28]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69d9      	ldr	r1, [r3, #28]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	021a      	lsls	r2, r3, #8
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	61da      	str	r2, [r3, #28]
      break;
 8006f0a:	e041      	b.n	8006f90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fc54 	bl	80077c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0208 	orr.w	r2, r2, #8
 8006f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0204 	bic.w	r2, r2, #4
 8006f36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	691a      	ldr	r2, [r3, #16]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006f4a:	e021      	b.n	8006f90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fc9e 	bl	8007894 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	021a      	lsls	r2, r3, #8
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006f8c:	e000      	b.n	8006f90 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006f8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop

08006fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIM_ConfigClockSource+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e0f5      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x204>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fe6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a6e      	ldr	r2, [pc, #440]	; (80071b0 <HAL_TIM_ConfigClockSource+0x20c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	f000 80c1 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 8006ffc:	4a6c      	ldr	r2, [pc, #432]	; (80071b0 <HAL_TIM_ConfigClockSource+0x20c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	f200 80c6 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007004:	4a6b      	ldr	r2, [pc, #428]	; (80071b4 <HAL_TIM_ConfigClockSource+0x210>)
 8007006:	4293      	cmp	r3, r2
 8007008:	f000 80b9 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 800700c:	4a69      	ldr	r2, [pc, #420]	; (80071b4 <HAL_TIM_ConfigClockSource+0x210>)
 800700e:	4293      	cmp	r3, r2
 8007010:	f200 80be 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007014:	4a68      	ldr	r2, [pc, #416]	; (80071b8 <HAL_TIM_ConfigClockSource+0x214>)
 8007016:	4293      	cmp	r3, r2
 8007018:	f000 80b1 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 800701c:	4a66      	ldr	r2, [pc, #408]	; (80071b8 <HAL_TIM_ConfigClockSource+0x214>)
 800701e:	4293      	cmp	r3, r2
 8007020:	f200 80b6 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007024:	4a65      	ldr	r2, [pc, #404]	; (80071bc <HAL_TIM_ConfigClockSource+0x218>)
 8007026:	4293      	cmp	r3, r2
 8007028:	f000 80a9 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 800702c:	4a63      	ldr	r2, [pc, #396]	; (80071bc <HAL_TIM_ConfigClockSource+0x218>)
 800702e:	4293      	cmp	r3, r2
 8007030:	f200 80ae 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007034:	4a62      	ldr	r2, [pc, #392]	; (80071c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	f000 80a1 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 800703c:	4a60      	ldr	r2, [pc, #384]	; (80071c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f200 80a6 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007044:	4a5f      	ldr	r2, [pc, #380]	; (80071c4 <HAL_TIM_ConfigClockSource+0x220>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f000 8099 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 800704c:	4a5d      	ldr	r2, [pc, #372]	; (80071c4 <HAL_TIM_ConfigClockSource+0x220>)
 800704e:	4293      	cmp	r3, r2
 8007050:	f200 809e 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007054:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007058:	f000 8091 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 800705c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007060:	f200 8096 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007068:	f000 8089 	beq.w	800717e <HAL_TIM_ConfigClockSource+0x1da>
 800706c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007070:	f200 808e 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007078:	d03e      	beq.n	80070f8 <HAL_TIM_ConfigClockSource+0x154>
 800707a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707e:	f200 8087 	bhi.w	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007086:	f000 8085 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x1f0>
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708e:	d87f      	bhi.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007090:	2b70      	cmp	r3, #112	; 0x70
 8007092:	d01a      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x126>
 8007094:	2b70      	cmp	r3, #112	; 0x70
 8007096:	d87b      	bhi.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 8007098:	2b60      	cmp	r3, #96	; 0x60
 800709a:	d050      	beq.n	800713e <HAL_TIM_ConfigClockSource+0x19a>
 800709c:	2b60      	cmp	r3, #96	; 0x60
 800709e:	d877      	bhi.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 80070a0:	2b50      	cmp	r3, #80	; 0x50
 80070a2:	d03c      	beq.n	800711e <HAL_TIM_ConfigClockSource+0x17a>
 80070a4:	2b50      	cmp	r3, #80	; 0x50
 80070a6:	d873      	bhi.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	d058      	beq.n	800715e <HAL_TIM_ConfigClockSource+0x1ba>
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d86f      	bhi.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 80070b0:	2b30      	cmp	r3, #48	; 0x30
 80070b2:	d064      	beq.n	800717e <HAL_TIM_ConfigClockSource+0x1da>
 80070b4:	2b30      	cmp	r3, #48	; 0x30
 80070b6:	d86b      	bhi.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d060      	beq.n	800717e <HAL_TIM_ConfigClockSource+0x1da>
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d867      	bhi.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d05c      	beq.n	800717e <HAL_TIM_ConfigClockSource+0x1da>
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d05a      	beq.n	800717e <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80070c8:	e062      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6899      	ldr	r1, [r3, #8]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f000 fcc3 	bl	8007a64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	609a      	str	r2, [r3, #8]
      break;
 80070f6:	e04e      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6818      	ldr	r0, [r3, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	6899      	ldr	r1, [r3, #8]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f000 fcac 	bl	8007a64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800711a:	609a      	str	r2, [r3, #8]
      break;
 800711c:	e03b      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	6859      	ldr	r1, [r3, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	461a      	mov	r2, r3
 800712c:	f000 fc1e 	bl	800796c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2150      	movs	r1, #80	; 0x50
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fc77 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 800713c:	e02b      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6859      	ldr	r1, [r3, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	461a      	mov	r2, r3
 800714c:	f000 fc3d 	bl	80079ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2160      	movs	r1, #96	; 0x60
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fc67 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 800715c:	e01b      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6859      	ldr	r1, [r3, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	461a      	mov	r2, r3
 800716c:	f000 fbfe 	bl	800796c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2140      	movs	r1, #64	; 0x40
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fc57 	bl	8007a2a <TIM_ITRx_SetConfig>
      break;
 800717c:	e00b      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f000 fc4e 	bl	8007a2a <TIM_ITRx_SetConfig>
        break;
 800718e:	e002      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8007194:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	00100070 	.word	0x00100070
 80071b4:	00100060 	.word	0x00100060
 80071b8:	00100050 	.word	0x00100050
 80071bc:	00100040 	.word	0x00100040
 80071c0:	00100030 	.word	0x00100030
 80071c4:	00100020 	.word	0x00100020

080071c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a46      	ldr	r2, [pc, #280]	; (80072f4 <TIM_Base_SetConfig+0x12c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d017      	beq.n	8007210 <TIM_Base_SetConfig+0x48>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e6:	d013      	beq.n	8007210 <TIM_Base_SetConfig+0x48>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a43      	ldr	r2, [pc, #268]	; (80072f8 <TIM_Base_SetConfig+0x130>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00f      	beq.n	8007210 <TIM_Base_SetConfig+0x48>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a42      	ldr	r2, [pc, #264]	; (80072fc <TIM_Base_SetConfig+0x134>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00b      	beq.n	8007210 <TIM_Base_SetConfig+0x48>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a41      	ldr	r2, [pc, #260]	; (8007300 <TIM_Base_SetConfig+0x138>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_Base_SetConfig+0x48>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a40      	ldr	r2, [pc, #256]	; (8007304 <TIM_Base_SetConfig+0x13c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_Base_SetConfig+0x48>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a3f      	ldr	r2, [pc, #252]	; (8007308 <TIM_Base_SetConfig+0x140>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d108      	bne.n	8007222 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a33      	ldr	r2, [pc, #204]	; (80072f4 <TIM_Base_SetConfig+0x12c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d023      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d01f      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a30      	ldr	r2, [pc, #192]	; (80072f8 <TIM_Base_SetConfig+0x130>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d01b      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2f      	ldr	r2, [pc, #188]	; (80072fc <TIM_Base_SetConfig+0x134>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d017      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2e      	ldr	r2, [pc, #184]	; (8007300 <TIM_Base_SetConfig+0x138>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a2d      	ldr	r2, [pc, #180]	; (8007304 <TIM_Base_SetConfig+0x13c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00f      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a2d      	ldr	r2, [pc, #180]	; (800730c <TIM_Base_SetConfig+0x144>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00b      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2c      	ldr	r2, [pc, #176]	; (8007310 <TIM_Base_SetConfig+0x148>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a2b      	ldr	r2, [pc, #172]	; (8007314 <TIM_Base_SetConfig+0x14c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d003      	beq.n	8007272 <TIM_Base_SetConfig+0xaa>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a26      	ldr	r2, [pc, #152]	; (8007308 <TIM_Base_SetConfig+0x140>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d108      	bne.n	8007284 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <TIM_Base_SetConfig+0x12c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <TIM_Base_SetConfig+0x110>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a14      	ldr	r2, [pc, #80]	; (8007304 <TIM_Base_SetConfig+0x13c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00f      	beq.n	80072d8 <TIM_Base_SetConfig+0x110>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a14      	ldr	r2, [pc, #80]	; (800730c <TIM_Base_SetConfig+0x144>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00b      	beq.n	80072d8 <TIM_Base_SetConfig+0x110>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a13      	ldr	r2, [pc, #76]	; (8007310 <TIM_Base_SetConfig+0x148>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_Base_SetConfig+0x110>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a12      	ldr	r2, [pc, #72]	; (8007314 <TIM_Base_SetConfig+0x14c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_Base_SetConfig+0x110>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <TIM_Base_SetConfig+0x140>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d103      	bne.n	80072e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	615a      	str	r2, [r3, #20]
}
 80072e6:	bf00      	nop
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800
 8007300:	40000c00 	.word	0x40000c00
 8007304:	40013400 	.word	0x40013400
 8007308:	40015000 	.word	0x40015000
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400
 8007314:	40014800 	.word	0x40014800

08007318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f023 0201 	bic.w	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f023 0302 	bic.w	r3, r3, #2
 8007364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a30      	ldr	r2, [pc, #192]	; (8007434 <TIM_OC1_SetConfig+0x11c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <TIM_OC1_SetConfig+0x88>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <TIM_OC1_SetConfig+0x120>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00f      	beq.n	80073a0 <TIM_OC1_SetConfig+0x88>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a2e      	ldr	r2, [pc, #184]	; (800743c <TIM_OC1_SetConfig+0x124>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00b      	beq.n	80073a0 <TIM_OC1_SetConfig+0x88>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a2d      	ldr	r2, [pc, #180]	; (8007440 <TIM_OC1_SetConfig+0x128>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_OC1_SetConfig+0x88>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a2c      	ldr	r2, [pc, #176]	; (8007444 <TIM_OC1_SetConfig+0x12c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_OC1_SetConfig+0x88>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a2b      	ldr	r2, [pc, #172]	; (8007448 <TIM_OC1_SetConfig+0x130>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d10c      	bne.n	80073ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0308 	bic.w	r3, r3, #8
 80073a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f023 0304 	bic.w	r3, r3, #4
 80073b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <TIM_OC1_SetConfig+0x11c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <TIM_OC1_SetConfig+0xd2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <TIM_OC1_SetConfig+0x120>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00f      	beq.n	80073ea <TIM_OC1_SetConfig+0xd2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1b      	ldr	r2, [pc, #108]	; (800743c <TIM_OC1_SetConfig+0x124>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00b      	beq.n	80073ea <TIM_OC1_SetConfig+0xd2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <TIM_OC1_SetConfig+0x128>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d007      	beq.n	80073ea <TIM_OC1_SetConfig+0xd2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a19      	ldr	r2, [pc, #100]	; (8007444 <TIM_OC1_SetConfig+0x12c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d003      	beq.n	80073ea <TIM_OC1_SetConfig+0xd2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a18      	ldr	r2, [pc, #96]	; (8007448 <TIM_OC1_SetConfig+0x130>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d111      	bne.n	800740e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	621a      	str	r2, [r3, #32]
}
 8007428:	bf00      	nop
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800
 8007448:	40015000 	.word	0x40015000

0800744c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f023 0210 	bic.w	r2, r3, #16
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f023 0320 	bic.w	r3, r3, #32
 800749a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a2c      	ldr	r2, [pc, #176]	; (800755c <TIM_OC2_SetConfig+0x110>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d007      	beq.n	80074c0 <TIM_OC2_SetConfig+0x74>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a2b      	ldr	r2, [pc, #172]	; (8007560 <TIM_OC2_SetConfig+0x114>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_OC2_SetConfig+0x74>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a2a      	ldr	r2, [pc, #168]	; (8007564 <TIM_OC2_SetConfig+0x118>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d10d      	bne.n	80074dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a1f      	ldr	r2, [pc, #124]	; (800755c <TIM_OC2_SetConfig+0x110>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d013      	beq.n	800750c <TIM_OC2_SetConfig+0xc0>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <TIM_OC2_SetConfig+0x114>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00f      	beq.n	800750c <TIM_OC2_SetConfig+0xc0>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <TIM_OC2_SetConfig+0x11c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00b      	beq.n	800750c <TIM_OC2_SetConfig+0xc0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a1d      	ldr	r2, [pc, #116]	; (800756c <TIM_OC2_SetConfig+0x120>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d007      	beq.n	800750c <TIM_OC2_SetConfig+0xc0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a1c      	ldr	r2, [pc, #112]	; (8007570 <TIM_OC2_SetConfig+0x124>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_OC2_SetConfig+0xc0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a17      	ldr	r2, [pc, #92]	; (8007564 <TIM_OC2_SetConfig+0x118>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d113      	bne.n	8007534 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800751a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40013400 	.word	0x40013400
 8007564:	40015000 	.word	0x40015000
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400
 8007570:	40014800 	.word	0x40014800

08007574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0303 	bic.w	r3, r3, #3
 80075ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2b      	ldr	r2, [pc, #172]	; (8007680 <TIM_OC3_SetConfig+0x10c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d007      	beq.n	80075e6 <TIM_OC3_SetConfig+0x72>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2a      	ldr	r2, [pc, #168]	; (8007684 <TIM_OC3_SetConfig+0x110>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC3_SetConfig+0x72>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a29      	ldr	r2, [pc, #164]	; (8007688 <TIM_OC3_SetConfig+0x114>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d10d      	bne.n	8007602 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <TIM_OC3_SetConfig+0x10c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <TIM_OC3_SetConfig+0xbe>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1d      	ldr	r2, [pc, #116]	; (8007684 <TIM_OC3_SetConfig+0x110>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00f      	beq.n	8007632 <TIM_OC3_SetConfig+0xbe>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1d      	ldr	r2, [pc, #116]	; (800768c <TIM_OC3_SetConfig+0x118>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00b      	beq.n	8007632 <TIM_OC3_SetConfig+0xbe>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <TIM_OC3_SetConfig+0x11c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d007      	beq.n	8007632 <TIM_OC3_SetConfig+0xbe>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <TIM_OC3_SetConfig+0x120>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_OC3_SetConfig+0xbe>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a16      	ldr	r2, [pc, #88]	; (8007688 <TIM_OC3_SetConfig+0x114>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d113      	bne.n	800765a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	621a      	str	r2, [r3, #32]
}
 8007674:	bf00      	nop
 8007676:	371c      	adds	r7, #28
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40013400 	.word	0x40013400
 8007688:	40015000 	.word	0x40015000
 800768c:	40014000 	.word	0x40014000
 8007690:	40014400 	.word	0x40014400
 8007694:	40014800 	.word	0x40014800

08007698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	031b      	lsls	r3, r3, #12
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a2c      	ldr	r2, [pc, #176]	; (80077a8 <TIM_OC4_SetConfig+0x110>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d007      	beq.n	800770c <TIM_OC4_SetConfig+0x74>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a2b      	ldr	r2, [pc, #172]	; (80077ac <TIM_OC4_SetConfig+0x114>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_OC4_SetConfig+0x74>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2a      	ldr	r2, [pc, #168]	; (80077b0 <TIM_OC4_SetConfig+0x118>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d10d      	bne.n	8007728 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1f      	ldr	r2, [pc, #124]	; (80077a8 <TIM_OC4_SetConfig+0x110>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d013      	beq.n	8007758 <TIM_OC4_SetConfig+0xc0>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a1e      	ldr	r2, [pc, #120]	; (80077ac <TIM_OC4_SetConfig+0x114>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00f      	beq.n	8007758 <TIM_OC4_SetConfig+0xc0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <TIM_OC4_SetConfig+0x11c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00b      	beq.n	8007758 <TIM_OC4_SetConfig+0xc0>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a1d      	ldr	r2, [pc, #116]	; (80077b8 <TIM_OC4_SetConfig+0x120>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d007      	beq.n	8007758 <TIM_OC4_SetConfig+0xc0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1c      	ldr	r2, [pc, #112]	; (80077bc <TIM_OC4_SetConfig+0x124>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d003      	beq.n	8007758 <TIM_OC4_SetConfig+0xc0>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a17      	ldr	r2, [pc, #92]	; (80077b0 <TIM_OC4_SetConfig+0x118>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d113      	bne.n	8007780 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800775e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007766:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	019b      	lsls	r3, r3, #6
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	019b      	lsls	r3, r3, #6
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	621a      	str	r2, [r3, #32]
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40012c00 	.word	0x40012c00
 80077ac:	40013400 	.word	0x40013400
 80077b0:	40015000 	.word	0x40015000
 80077b4:	40014000 	.word	0x40014000
 80077b8:	40014400 	.word	0x40014400
 80077bc:	40014800 	.word	0x40014800

080077c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	041b      	lsls	r3, r3, #16
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a19      	ldr	r2, [pc, #100]	; (800787c <TIM_OC5_SetConfig+0xbc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d013      	beq.n	8007842 <TIM_OC5_SetConfig+0x82>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a18      	ldr	r2, [pc, #96]	; (8007880 <TIM_OC5_SetConfig+0xc0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00f      	beq.n	8007842 <TIM_OC5_SetConfig+0x82>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a17      	ldr	r2, [pc, #92]	; (8007884 <TIM_OC5_SetConfig+0xc4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00b      	beq.n	8007842 <TIM_OC5_SetConfig+0x82>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a16      	ldr	r2, [pc, #88]	; (8007888 <TIM_OC5_SetConfig+0xc8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d007      	beq.n	8007842 <TIM_OC5_SetConfig+0x82>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a15      	ldr	r2, [pc, #84]	; (800788c <TIM_OC5_SetConfig+0xcc>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d003      	beq.n	8007842 <TIM_OC5_SetConfig+0x82>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a14      	ldr	r2, [pc, #80]	; (8007890 <TIM_OC5_SetConfig+0xd0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d109      	bne.n	8007856 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	621a      	str	r2, [r3, #32]
}
 8007870:	bf00      	nop
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40013400 	.word	0x40013400
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800
 8007890:	40015000 	.word	0x40015000

08007894 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	051b      	lsls	r3, r3, #20
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <TIM_OC6_SetConfig+0xc0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <TIM_OC6_SetConfig+0x84>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a19      	ldr	r2, [pc, #100]	; (8007958 <TIM_OC6_SetConfig+0xc4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00f      	beq.n	8007918 <TIM_OC6_SetConfig+0x84>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a18      	ldr	r2, [pc, #96]	; (800795c <TIM_OC6_SetConfig+0xc8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00b      	beq.n	8007918 <TIM_OC6_SetConfig+0x84>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a17      	ldr	r2, [pc, #92]	; (8007960 <TIM_OC6_SetConfig+0xcc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d007      	beq.n	8007918 <TIM_OC6_SetConfig+0x84>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a16      	ldr	r2, [pc, #88]	; (8007964 <TIM_OC6_SetConfig+0xd0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d003      	beq.n	8007918 <TIM_OC6_SetConfig+0x84>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <TIM_OC6_SetConfig+0xd4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d109      	bne.n	800792c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800791e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	029b      	lsls	r3, r3, #10
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	621a      	str	r2, [r3, #32]
}
 8007946:	bf00      	nop
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40012c00 	.word	0x40012c00
 8007958:	40013400 	.word	0x40013400
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800
 8007968:	40015000 	.word	0x40015000

0800796c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f023 0201 	bic.w	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	4313      	orrs	r3, r2
 80079a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f023 030a 	bic.w	r3, r3, #10
 80079a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b087      	sub	sp, #28
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f023 0210 	bic.w	r2, r3, #16
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	031b      	lsls	r3, r3, #12
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	f043 0307 	orr.w	r3, r3, #7
 8007a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	609a      	str	r2, [r3, #8]
}
 8007a58:	bf00      	nop
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	021a      	lsls	r2, r3, #8
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	431a      	orrs	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	609a      	str	r2, [r3, #8]
}
 8007a98:	bf00      	nop
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1a      	ldr	r2, [r3, #32]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	401a      	ands	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f003 031f 	and.w	r3, r3, #31
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8007adc:	431a      	orrs	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	621a      	str	r2, [r3, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e074      	b.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a34      	ldr	r2, [pc, #208]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a33      	ldr	r2, [pc, #204]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a31      	ldr	r2, [pc, #196]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d108      	bne.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d022      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d01d      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d018      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d013      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00e      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d009      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d004      	beq.n	8007bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a11      	ldr	r2, [pc, #68]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d10c      	bne.n	8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40013400 	.word	0x40013400
 8007c08:	40015000 	.word	0x40015000
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	40014000 	.word	0x40014000

08007c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e096      	b.n	8007d66 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	041b      	lsls	r3, r3, #16
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a2f      	ldr	r2, [pc, #188]	; (8007d74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d009      	beq.n	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	; (8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d004      	beq.n	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2c      	ldr	r2, [pc, #176]	; (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d106      	bne.n	8007cde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a24      	ldr	r2, [pc, #144]	; (8007d74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d009      	beq.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a22      	ldr	r2, [pc, #136]	; (8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a21      	ldr	r2, [pc, #132]	; (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d12b      	bne.n	8007d54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	051b      	lsls	r3, r3, #20
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a11      	ldr	r2, [pc, #68]	; (8007d74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d009      	beq.n	8007d46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a10      	ldr	r2, [pc, #64]	; (8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d004      	beq.n	8007d46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0e      	ldr	r2, [pc, #56]	; (8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d106      	bne.n	8007d54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	40013400 	.word	0x40013400
 8007d7c:	40015000 	.word	0x40015000

08007d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e042      	b.n	8007e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7fa ff65 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2224      	movs	r2, #36	; 0x24
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f91e 	bl	8008004 <UART_SetConfig>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e022      	b.n	8007e18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fbdc 	bl	8008598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fc63 	bl	80086dc <UART_CheckIdleState>
 8007e16:	4603      	mov	r3, r0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	f040 8083 	bne.w	8007f42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <HAL_UART_Transmit+0x28>
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e07b      	b.n	8007f44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_UART_Transmit+0x3a>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e074      	b.n	8007f44 <HAL_UART_Transmit+0x124>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2221      	movs	r2, #33	; 0x21
 8007e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e72:	f7fa fff3 	bl	8002e5c <HAL_GetTick>
 8007e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	88fa      	ldrh	r2, [r7, #6]
 8007e7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	88fa      	ldrh	r2, [r7, #6]
 8007e84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	d108      	bne.n	8007ea4 <HAL_UART_Transmit+0x84>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d104      	bne.n	8007ea4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	e003      	b.n	8007eac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007eb4:	e02c      	b.n	8007f10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2180      	movs	r1, #128	; 0x80
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fc56 	bl	8008772 <UART_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e039      	b.n	8007f44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10b      	bne.n	8007eee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	3302      	adds	r3, #2
 8007eea:	61bb      	str	r3, [r7, #24]
 8007eec:	e007      	b.n	8007efe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	781a      	ldrb	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	3301      	adds	r3, #1
 8007efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1cc      	bne.n	8007eb6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2140      	movs	r1, #64	; 0x40
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 fc23 	bl	8008772 <UART_WaitOnFlagUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e006      	b.n	8007f44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e000      	b.n	8007f44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
  }
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d131      	bne.n	8007fc8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <HAL_UART_Receive_IT+0x24>
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e02a      	b.n	8007fca <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UART_Receive_IT+0x36>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e023      	b.n	8007fca <HAL_UART_Receive_IT+0x7e>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a0f      	ldr	r2, [pc, #60]	; (8007fd4 <HAL_UART_Receive_IT+0x88>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00e      	beq.n	8007fb8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007fb6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	68b9      	ldr	r1, [r7, #8]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fc58 	bl	8008874 <UART_Start_Receive_IT>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	e000      	b.n	8007fca <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007fc8:	2302      	movs	r3, #2
  }
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40008000 	.word	0x40008000

08007fd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008004:	b5b0      	push	{r4, r5, r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	4313      	orrs	r3, r2
 8008026:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4bb1      	ldr	r3, [pc, #708]	; (80082f4 <UART_SetConfig+0x2f0>)
 8008030:	4013      	ands	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6812      	ldr	r2, [r2, #0]
 8008036:	69f9      	ldr	r1, [r7, #28]
 8008038:	430b      	orrs	r3, r1
 800803a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4aa6      	ldr	r2, [pc, #664]	; (80082f8 <UART_SetConfig+0x2f4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	4313      	orrs	r3, r2
 800806a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008076:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	69f9      	ldr	r1, [r7, #28]
 8008080:	430b      	orrs	r3, r1
 8008082:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	f023 010f 	bic.w	r1, r3, #15
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a97      	ldr	r2, [pc, #604]	; (80082fc <UART_SetConfig+0x2f8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d120      	bne.n	80080e6 <UART_SetConfig+0xe2>
 80080a4:	4b96      	ldr	r3, [pc, #600]	; (8008300 <UART_SetConfig+0x2fc>)
 80080a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d816      	bhi.n	80080e0 <UART_SetConfig+0xdc>
 80080b2:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <UART_SetConfig+0xb4>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	080080c9 	.word	0x080080c9
 80080bc:	080080d5 	.word	0x080080d5
 80080c0:	080080cf 	.word	0x080080cf
 80080c4:	080080db 	.word	0x080080db
 80080c8:	2301      	movs	r3, #1
 80080ca:	76fb      	strb	r3, [r7, #27]
 80080cc:	e0e7      	b.n	800829e <UART_SetConfig+0x29a>
 80080ce:	2302      	movs	r3, #2
 80080d0:	76fb      	strb	r3, [r7, #27]
 80080d2:	e0e4      	b.n	800829e <UART_SetConfig+0x29a>
 80080d4:	2304      	movs	r3, #4
 80080d6:	76fb      	strb	r3, [r7, #27]
 80080d8:	e0e1      	b.n	800829e <UART_SetConfig+0x29a>
 80080da:	2308      	movs	r3, #8
 80080dc:	76fb      	strb	r3, [r7, #27]
 80080de:	e0de      	b.n	800829e <UART_SetConfig+0x29a>
 80080e0:	2310      	movs	r3, #16
 80080e2:	76fb      	strb	r3, [r7, #27]
 80080e4:	e0db      	b.n	800829e <UART_SetConfig+0x29a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a86      	ldr	r2, [pc, #536]	; (8008304 <UART_SetConfig+0x300>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d132      	bne.n	8008156 <UART_SetConfig+0x152>
 80080f0:	4b83      	ldr	r3, [pc, #524]	; (8008300 <UART_SetConfig+0x2fc>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	f003 030c 	and.w	r3, r3, #12
 80080fa:	2b0c      	cmp	r3, #12
 80080fc:	d828      	bhi.n	8008150 <UART_SetConfig+0x14c>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0x100>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008139 	.word	0x08008139
 8008108:	08008151 	.word	0x08008151
 800810c:	08008151 	.word	0x08008151
 8008110:	08008151 	.word	0x08008151
 8008114:	08008145 	.word	0x08008145
 8008118:	08008151 	.word	0x08008151
 800811c:	08008151 	.word	0x08008151
 8008120:	08008151 	.word	0x08008151
 8008124:	0800813f 	.word	0x0800813f
 8008128:	08008151 	.word	0x08008151
 800812c:	08008151 	.word	0x08008151
 8008130:	08008151 	.word	0x08008151
 8008134:	0800814b 	.word	0x0800814b
 8008138:	2300      	movs	r3, #0
 800813a:	76fb      	strb	r3, [r7, #27]
 800813c:	e0af      	b.n	800829e <UART_SetConfig+0x29a>
 800813e:	2302      	movs	r3, #2
 8008140:	76fb      	strb	r3, [r7, #27]
 8008142:	e0ac      	b.n	800829e <UART_SetConfig+0x29a>
 8008144:	2304      	movs	r3, #4
 8008146:	76fb      	strb	r3, [r7, #27]
 8008148:	e0a9      	b.n	800829e <UART_SetConfig+0x29a>
 800814a:	2308      	movs	r3, #8
 800814c:	76fb      	strb	r3, [r7, #27]
 800814e:	e0a6      	b.n	800829e <UART_SetConfig+0x29a>
 8008150:	2310      	movs	r3, #16
 8008152:	76fb      	strb	r3, [r7, #27]
 8008154:	e0a3      	b.n	800829e <UART_SetConfig+0x29a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a6b      	ldr	r2, [pc, #428]	; (8008308 <UART_SetConfig+0x304>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d120      	bne.n	80081a2 <UART_SetConfig+0x19e>
 8008160:	4b67      	ldr	r3, [pc, #412]	; (8008300 <UART_SetConfig+0x2fc>)
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008166:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800816a:	2b30      	cmp	r3, #48	; 0x30
 800816c:	d013      	beq.n	8008196 <UART_SetConfig+0x192>
 800816e:	2b30      	cmp	r3, #48	; 0x30
 8008170:	d814      	bhi.n	800819c <UART_SetConfig+0x198>
 8008172:	2b20      	cmp	r3, #32
 8008174:	d009      	beq.n	800818a <UART_SetConfig+0x186>
 8008176:	2b20      	cmp	r3, #32
 8008178:	d810      	bhi.n	800819c <UART_SetConfig+0x198>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <UART_SetConfig+0x180>
 800817e:	2b10      	cmp	r3, #16
 8008180:	d006      	beq.n	8008190 <UART_SetConfig+0x18c>
 8008182:	e00b      	b.n	800819c <UART_SetConfig+0x198>
 8008184:	2300      	movs	r3, #0
 8008186:	76fb      	strb	r3, [r7, #27]
 8008188:	e089      	b.n	800829e <UART_SetConfig+0x29a>
 800818a:	2302      	movs	r3, #2
 800818c:	76fb      	strb	r3, [r7, #27]
 800818e:	e086      	b.n	800829e <UART_SetConfig+0x29a>
 8008190:	2304      	movs	r3, #4
 8008192:	76fb      	strb	r3, [r7, #27]
 8008194:	e083      	b.n	800829e <UART_SetConfig+0x29a>
 8008196:	2308      	movs	r3, #8
 8008198:	76fb      	strb	r3, [r7, #27]
 800819a:	e080      	b.n	800829e <UART_SetConfig+0x29a>
 800819c:	2310      	movs	r3, #16
 800819e:	76fb      	strb	r3, [r7, #27]
 80081a0:	e07d      	b.n	800829e <UART_SetConfig+0x29a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a59      	ldr	r2, [pc, #356]	; (800830c <UART_SetConfig+0x308>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d120      	bne.n	80081ee <UART_SetConfig+0x1ea>
 80081ac:	4b54      	ldr	r3, [pc, #336]	; (8008300 <UART_SetConfig+0x2fc>)
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081b6:	2bc0      	cmp	r3, #192	; 0xc0
 80081b8:	d013      	beq.n	80081e2 <UART_SetConfig+0x1de>
 80081ba:	2bc0      	cmp	r3, #192	; 0xc0
 80081bc:	d814      	bhi.n	80081e8 <UART_SetConfig+0x1e4>
 80081be:	2b80      	cmp	r3, #128	; 0x80
 80081c0:	d009      	beq.n	80081d6 <UART_SetConfig+0x1d2>
 80081c2:	2b80      	cmp	r3, #128	; 0x80
 80081c4:	d810      	bhi.n	80081e8 <UART_SetConfig+0x1e4>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <UART_SetConfig+0x1cc>
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d006      	beq.n	80081dc <UART_SetConfig+0x1d8>
 80081ce:	e00b      	b.n	80081e8 <UART_SetConfig+0x1e4>
 80081d0:	2300      	movs	r3, #0
 80081d2:	76fb      	strb	r3, [r7, #27]
 80081d4:	e063      	b.n	800829e <UART_SetConfig+0x29a>
 80081d6:	2302      	movs	r3, #2
 80081d8:	76fb      	strb	r3, [r7, #27]
 80081da:	e060      	b.n	800829e <UART_SetConfig+0x29a>
 80081dc:	2304      	movs	r3, #4
 80081de:	76fb      	strb	r3, [r7, #27]
 80081e0:	e05d      	b.n	800829e <UART_SetConfig+0x29a>
 80081e2:	2308      	movs	r3, #8
 80081e4:	76fb      	strb	r3, [r7, #27]
 80081e6:	e05a      	b.n	800829e <UART_SetConfig+0x29a>
 80081e8:	2310      	movs	r3, #16
 80081ea:	76fb      	strb	r3, [r7, #27]
 80081ec:	e057      	b.n	800829e <UART_SetConfig+0x29a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a47      	ldr	r2, [pc, #284]	; (8008310 <UART_SetConfig+0x30c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d125      	bne.n	8008244 <UART_SetConfig+0x240>
 80081f8:	4b41      	ldr	r3, [pc, #260]	; (8008300 <UART_SetConfig+0x2fc>)
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008206:	d017      	beq.n	8008238 <UART_SetConfig+0x234>
 8008208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800820c:	d817      	bhi.n	800823e <UART_SetConfig+0x23a>
 800820e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008212:	d00b      	beq.n	800822c <UART_SetConfig+0x228>
 8008214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008218:	d811      	bhi.n	800823e <UART_SetConfig+0x23a>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <UART_SetConfig+0x222>
 800821e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008222:	d006      	beq.n	8008232 <UART_SetConfig+0x22e>
 8008224:	e00b      	b.n	800823e <UART_SetConfig+0x23a>
 8008226:	2300      	movs	r3, #0
 8008228:	76fb      	strb	r3, [r7, #27]
 800822a:	e038      	b.n	800829e <UART_SetConfig+0x29a>
 800822c:	2302      	movs	r3, #2
 800822e:	76fb      	strb	r3, [r7, #27]
 8008230:	e035      	b.n	800829e <UART_SetConfig+0x29a>
 8008232:	2304      	movs	r3, #4
 8008234:	76fb      	strb	r3, [r7, #27]
 8008236:	e032      	b.n	800829e <UART_SetConfig+0x29a>
 8008238:	2308      	movs	r3, #8
 800823a:	76fb      	strb	r3, [r7, #27]
 800823c:	e02f      	b.n	800829e <UART_SetConfig+0x29a>
 800823e:	2310      	movs	r3, #16
 8008240:	76fb      	strb	r3, [r7, #27]
 8008242:	e02c      	b.n	800829e <UART_SetConfig+0x29a>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a2b      	ldr	r2, [pc, #172]	; (80082f8 <UART_SetConfig+0x2f4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d125      	bne.n	800829a <UART_SetConfig+0x296>
 800824e:	4b2c      	ldr	r3, [pc, #176]	; (8008300 <UART_SetConfig+0x2fc>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800825c:	d017      	beq.n	800828e <UART_SetConfig+0x28a>
 800825e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008262:	d817      	bhi.n	8008294 <UART_SetConfig+0x290>
 8008264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008268:	d00b      	beq.n	8008282 <UART_SetConfig+0x27e>
 800826a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800826e:	d811      	bhi.n	8008294 <UART_SetConfig+0x290>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <UART_SetConfig+0x278>
 8008274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008278:	d006      	beq.n	8008288 <UART_SetConfig+0x284>
 800827a:	e00b      	b.n	8008294 <UART_SetConfig+0x290>
 800827c:	2300      	movs	r3, #0
 800827e:	76fb      	strb	r3, [r7, #27]
 8008280:	e00d      	b.n	800829e <UART_SetConfig+0x29a>
 8008282:	2302      	movs	r3, #2
 8008284:	76fb      	strb	r3, [r7, #27]
 8008286:	e00a      	b.n	800829e <UART_SetConfig+0x29a>
 8008288:	2304      	movs	r3, #4
 800828a:	76fb      	strb	r3, [r7, #27]
 800828c:	e007      	b.n	800829e <UART_SetConfig+0x29a>
 800828e:	2308      	movs	r3, #8
 8008290:	76fb      	strb	r3, [r7, #27]
 8008292:	e004      	b.n	800829e <UART_SetConfig+0x29a>
 8008294:	2310      	movs	r3, #16
 8008296:	76fb      	strb	r3, [r7, #27]
 8008298:	e001      	b.n	800829e <UART_SetConfig+0x29a>
 800829a:	2310      	movs	r3, #16
 800829c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <UART_SetConfig+0x2f4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	f040 809f 	bne.w	80083e8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082aa:	7efb      	ldrb	r3, [r7, #27]
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d837      	bhi.n	8008320 <UART_SetConfig+0x31c>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <UART_SetConfig+0x2b4>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	08008321 	.word	0x08008321
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	08008321 	.word	0x08008321
 80082c8:	080082eb 	.word	0x080082eb
 80082cc:	08008321 	.word	0x08008321
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008319 	.word	0x08008319
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082dc:	f7fd fb5c 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 80082e0:	6178      	str	r0, [r7, #20]
        break;
 80082e2:	e022      	b.n	800832a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <UART_SetConfig+0x310>)
 80082e6:	617b      	str	r3, [r7, #20]
        break;
 80082e8:	e01f      	b.n	800832a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ea:	f7fd fae7 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 80082ee:	6178      	str	r0, [r7, #20]
        break;
 80082f0:	e01b      	b.n	800832a <UART_SetConfig+0x326>
 80082f2:	bf00      	nop
 80082f4:	cfff69f3 	.word	0xcfff69f3
 80082f8:	40008000 	.word	0x40008000
 80082fc:	40013800 	.word	0x40013800
 8008300:	40021000 	.word	0x40021000
 8008304:	40004400 	.word	0x40004400
 8008308:	40004800 	.word	0x40004800
 800830c:	40004c00 	.word	0x40004c00
 8008310:	40005000 	.word	0x40005000
 8008314:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800831c:	617b      	str	r3, [r7, #20]
        break;
 800831e:	e004      	b.n	800832a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	76bb      	strb	r3, [r7, #26]
        break;
 8008328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 811b 	beq.w	8008568 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	4a96      	ldr	r2, [pc, #600]	; (8008590 <UART_SetConfig+0x58c>)
 8008338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800833c:	461a      	mov	r2, r3
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	fbb3 f3f2 	udiv	r3, r3, r2
 8008344:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	4613      	mov	r3, r2
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	4413      	add	r3, r2
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	429a      	cmp	r2, r3
 8008354:	d305      	bcc.n	8008362 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	429a      	cmp	r2, r3
 8008360:	d902      	bls.n	8008368 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	76bb      	strb	r3, [r7, #26]
 8008366:	e0ff      	b.n	8008568 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	4618      	mov	r0, r3
 800836c:	f04f 0100 	mov.w	r1, #0
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	4a86      	ldr	r2, [pc, #536]	; (8008590 <UART_SetConfig+0x58c>)
 8008376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800837a:	b29a      	uxth	r2, r3
 800837c:	f04f 0300 	mov.w	r3, #0
 8008380:	f7f8 fc8a 	bl	8000c98 <__aeabi_uldivmod>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4610      	mov	r0, r2
 800838a:	4619      	mov	r1, r3
 800838c:	f04f 0200 	mov.w	r2, #0
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	020b      	lsls	r3, r1, #8
 8008396:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800839a:	0202      	lsls	r2, r0, #8
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	6849      	ldr	r1, [r1, #4]
 80083a0:	0849      	lsrs	r1, r1, #1
 80083a2:	4608      	mov	r0, r1
 80083a4:	f04f 0100 	mov.w	r1, #0
 80083a8:	1814      	adds	r4, r2, r0
 80083aa:	eb43 0501 	adc.w	r5, r3, r1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	4620      	mov	r0, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7f8 fc6c 	bl	8000c98 <__aeabi_uldivmod>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4613      	mov	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ce:	d308      	bcc.n	80083e2 <UART_SetConfig+0x3de>
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083d6:	d204      	bcs.n	80083e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	60da      	str	r2, [r3, #12]
 80083e0:	e0c2      	b.n	8008568 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	76bb      	strb	r3, [r7, #26]
 80083e6:	e0bf      	b.n	8008568 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f0:	d165      	bne.n	80084be <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80083f2:	7efb      	ldrb	r3, [r7, #27]
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d828      	bhi.n	800844a <UART_SetConfig+0x446>
 80083f8:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <UART_SetConfig+0x3fc>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	08008425 	.word	0x08008425
 8008404:	0800842d 	.word	0x0800842d
 8008408:	08008435 	.word	0x08008435
 800840c:	0800844b 	.word	0x0800844b
 8008410:	0800843b 	.word	0x0800843b
 8008414:	0800844b 	.word	0x0800844b
 8008418:	0800844b 	.word	0x0800844b
 800841c:	0800844b 	.word	0x0800844b
 8008420:	08008443 	.word	0x08008443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008424:	f7fd fab8 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8008428:	6178      	str	r0, [r7, #20]
        break;
 800842a:	e013      	b.n	8008454 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800842c:	f7fd faca 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8008430:	6178      	str	r0, [r7, #20]
        break;
 8008432:	e00f      	b.n	8008454 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008434:	4b57      	ldr	r3, [pc, #348]	; (8008594 <UART_SetConfig+0x590>)
 8008436:	617b      	str	r3, [r7, #20]
        break;
 8008438:	e00c      	b.n	8008454 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800843a:	f7fd fa3f 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 800843e:	6178      	str	r0, [r7, #20]
        break;
 8008440:	e008      	b.n	8008454 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008446:	617b      	str	r3, [r7, #20]
        break;
 8008448:	e004      	b.n	8008454 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	76bb      	strb	r3, [r7, #26]
        break;
 8008452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8086 	beq.w	8008568 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	4a4b      	ldr	r2, [pc, #300]	; (8008590 <UART_SetConfig+0x58c>)
 8008462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008466:	461a      	mov	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	fbb3 f3f2 	udiv	r3, r3, r2
 800846e:	005a      	lsls	r2, r3, #1
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	085b      	lsrs	r3, r3, #1
 8008476:	441a      	add	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008480:	b29b      	uxth	r3, r3
 8008482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	2b0f      	cmp	r3, #15
 8008488:	d916      	bls.n	80084b8 <UART_SetConfig+0x4b4>
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008490:	d212      	bcs.n	80084b8 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	b29b      	uxth	r3, r3
 8008496:	f023 030f 	bic.w	r3, r3, #15
 800849a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	085b      	lsrs	r3, r3, #1
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	89fb      	ldrh	r3, [r7, #14]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	89fa      	ldrh	r2, [r7, #14]
 80084b4:	60da      	str	r2, [r3, #12]
 80084b6:	e057      	b.n	8008568 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	76bb      	strb	r3, [r7, #26]
 80084bc:	e054      	b.n	8008568 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084be:	7efb      	ldrb	r3, [r7, #27]
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d828      	bhi.n	8008516 <UART_SetConfig+0x512>
 80084c4:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <UART_SetConfig+0x4c8>)
 80084c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ca:	bf00      	nop
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	080084f9 	.word	0x080084f9
 80084d4:	08008501 	.word	0x08008501
 80084d8:	08008517 	.word	0x08008517
 80084dc:	08008507 	.word	0x08008507
 80084e0:	08008517 	.word	0x08008517
 80084e4:	08008517 	.word	0x08008517
 80084e8:	08008517 	.word	0x08008517
 80084ec:	0800850f 	.word	0x0800850f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f0:	f7fd fa52 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 80084f4:	6178      	str	r0, [r7, #20]
        break;
 80084f6:	e013      	b.n	8008520 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f8:	f7fd fa64 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 80084fc:	6178      	str	r0, [r7, #20]
        break;
 80084fe:	e00f      	b.n	8008520 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008500:	4b24      	ldr	r3, [pc, #144]	; (8008594 <UART_SetConfig+0x590>)
 8008502:	617b      	str	r3, [r7, #20]
        break;
 8008504:	e00c      	b.n	8008520 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008506:	f7fd f9d9 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 800850a:	6178      	str	r0, [r7, #20]
        break;
 800850c:	e008      	b.n	8008520 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008512:	617b      	str	r3, [r7, #20]
        break;
 8008514:	e004      	b.n	8008520 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	76bb      	strb	r3, [r7, #26]
        break;
 800851e:	bf00      	nop
    }

    if (pclk != 0U)
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d020      	beq.n	8008568 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	4a19      	ldr	r2, [pc, #100]	; (8008590 <UART_SetConfig+0x58c>)
 800852c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008530:	461a      	mov	r2, r3
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	fbb3 f2f2 	udiv	r2, r3, r2
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	441a      	add	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	fbb2 f3f3 	udiv	r3, r2, r3
 8008548:	b29b      	uxth	r3, r3
 800854a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	2b0f      	cmp	r3, #15
 8008550:	d908      	bls.n	8008564 <UART_SetConfig+0x560>
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008558:	d204      	bcs.n	8008564 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	60da      	str	r2, [r3, #12]
 8008562:	e001      	b.n	8008568 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008584:	7ebb      	ldrb	r3, [r7, #26]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3720      	adds	r7, #32
 800858a:	46bd      	mov	sp, r7
 800858c:	bdb0      	pop	{r4, r5, r7, pc}
 800858e:	bf00      	nop
 8008590:	0800c0fc 	.word	0x0800c0fc
 8008594:	00f42400 	.word	0x00f42400

08008598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	f003 0308 	and.w	r3, r3, #8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862c:	f003 0310 	and.w	r3, r3, #16
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01a      	beq.n	80086ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008696:	d10a      	bne.n	80086ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	605a      	str	r2, [r3, #4]
  }
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086ec:	f7fa fbb6 	bl	8002e5c <HAL_GetTick>
 80086f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0308 	and.w	r3, r3, #8
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d10e      	bne.n	800871e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f82f 	bl	8008772 <UART_WaitOnFlagUntilTimeout>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e025      	b.n	800876a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b04      	cmp	r3, #4
 800872a:	d10e      	bne.n	800874a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800872c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f819 	bl	8008772 <UART_WaitOnFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e00f      	b.n	800876a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2220      	movs	r2, #32
 800874e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2220      	movs	r2, #32
 8008756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	603b      	str	r3, [r7, #0]
 800877e:	4613      	mov	r3, r2
 8008780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008782:	e062      	b.n	800884a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d05e      	beq.n	800884a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800878c:	f7fa fb66 	bl	8002e5c <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	429a      	cmp	r2, r3
 800879a:	d302      	bcc.n	80087a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d11d      	bne.n	80087de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 0201 	bic.w	r2, r2, #1
 80087c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e045      	b.n	800886a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d02e      	beq.n	800884a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087fa:	d126      	bne.n	800884a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008804:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008814:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0201 	bic.w	r2, r2, #1
 8008824:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2220      	movs	r2, #32
 800883a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e00f      	b.n	800886a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4013      	ands	r3, r2
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	429a      	cmp	r2, r3
 8008858:	bf0c      	ite	eq
 800885a:	2301      	moveq	r3, #1
 800885c:	2300      	movne	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	429a      	cmp	r2, r3
 8008866:	d08d      	beq.n	8008784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	88fa      	ldrh	r2, [r7, #6]
 8008894:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	d10e      	bne.n	80088c6 <UART_Start_Receive_IT+0x52>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d105      	bne.n	80088bc <UART_Start_Receive_IT+0x48>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80088b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088ba:	e02d      	b.n	8008918 <UART_Start_Receive_IT+0xa4>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	22ff      	movs	r2, #255	; 0xff
 80088c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088c4:	e028      	b.n	8008918 <UART_Start_Receive_IT+0xa4>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10d      	bne.n	80088ea <UART_Start_Receive_IT+0x76>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <UART_Start_Receive_IT+0x6c>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	22ff      	movs	r2, #255	; 0xff
 80088da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088de:	e01b      	b.n	8008918 <UART_Start_Receive_IT+0xa4>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	227f      	movs	r2, #127	; 0x7f
 80088e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088e8:	e016      	b.n	8008918 <UART_Start_Receive_IT+0xa4>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088f2:	d10d      	bne.n	8008910 <UART_Start_Receive_IT+0x9c>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d104      	bne.n	8008906 <UART_Start_Receive_IT+0x92>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	227f      	movs	r2, #127	; 0x7f
 8008900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008904:	e008      	b.n	8008918 <UART_Start_Receive_IT+0xa4>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	223f      	movs	r2, #63	; 0x3f
 800890a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800890e:	e003      	b.n	8008918 <UART_Start_Receive_IT+0xa4>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2222      	movs	r2, #34	; 0x22
 8008924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800893c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008940:	d12a      	bne.n	8008998 <UART_Start_Receive_IT+0x124>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008948:	88fa      	ldrh	r2, [r7, #6]
 800894a:	429a      	cmp	r2, r3
 800894c:	d324      	bcc.n	8008998 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008956:	d107      	bne.n	8008968 <UART_Start_Receive_IT+0xf4>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <UART_Start_Receive_IT+0x16c>)
 8008964:	671a      	str	r2, [r3, #112]	; 0x70
 8008966:	e002      	b.n	800896e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4a1e      	ldr	r2, [pc, #120]	; (80089e4 <UART_Start_Receive_IT+0x170>)
 800896c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008984:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008994:	609a      	str	r2, [r3, #8]
 8008996:	e01b      	b.n	80089d0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a0:	d107      	bne.n	80089b2 <UART_Start_Receive_IT+0x13e>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d103      	bne.n	80089b2 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4a0e      	ldr	r2, [pc, #56]	; (80089e8 <UART_Start_Receive_IT+0x174>)
 80089ae:	671a      	str	r2, [r3, #112]	; 0x70
 80089b0:	e002      	b.n	80089b8 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <UART_Start_Receive_IT+0x178>)
 80089b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80089ce:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	08008da5 	.word	0x08008da5
 80089e4:	08008ba1 	.word	0x08008ba1
 80089e8:	08008ac9 	.word	0x08008ac9
 80089ec:	080089f1 	.word	0x080089f1

080089f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089fe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a06:	2b22      	cmp	r3, #34	; 0x22
 8008a08:	d152      	bne.n	8008ab0 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a12:	89bb      	ldrh	r3, [r7, #12]
 8008a14:	b2d9      	uxtb	r1, r3
 8008a16:	89fb      	ldrh	r3, [r7, #14]
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	400a      	ands	r2, r1
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d139      	bne.n	8008ac0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a5a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0201 	bic.w	r2, r2, #1
 8008a6a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d10f      	bne.n	8008aa2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0210 	bic.w	r2, r2, #16
 8008a90:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff faa6 	bl	8007fec <HAL_UARTEx_RxEventCallback>
 8008aa0:	e002      	b.n	8008aa8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7fa f93a 	bl	8002d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aae:	e007      	b.n	8008ac0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0208 	orr.w	r2, r2, #8
 8008abe:	619a      	str	r2, [r3, #24]
}
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ad6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ade:	2b22      	cmp	r3, #34	; 0x22
 8008ae0:	d152      	bne.n	8008b88 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aee:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008af0:	89ba      	ldrh	r2, [r7, #12]
 8008af2:	89fb      	ldrh	r3, [r7, #14]
 8008af4:	4013      	ands	r3, r2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b00:	1c9a      	adds	r2, r3, #2
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d139      	bne.n	8008b98 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b32:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 0201 	bic.w	r2, r2, #1
 8008b42:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d10f      	bne.n	8008b7a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0210 	bic.w	r2, r2, #16
 8008b68:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff fa3a 	bl	8007fec <HAL_UARTEx_RxEventCallback>
 8008b78:	e002      	b.n	8008b80 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7fa f8ce 	bl	8002d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b86:	e007      	b.n	8008b98 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f042 0208 	orr.w	r2, r2, #8
 8008b96:	619a      	str	r2, [r3, #24]
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bae:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bce:	2b22      	cmp	r3, #34	; 0x22
 8008bd0:	f040 80da 	bne.w	8008d88 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bda:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bdc:	e0aa      	b.n	8008d34 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008be6:	89bb      	ldrh	r3, [r7, #12]
 8008be8:	b2d9      	uxtb	r1, r3
 8008bea:	8b7b      	ldrh	r3, [r7, #26]
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf2:	400a      	ands	r2, r1
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d04d      	beq.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d010      	beq.n	8008c52 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00b      	beq.n	8008c52 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c48:	f043 0201 	orr.w	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d010      	beq.n	8008c7e <UART_RxISR_8BIT_FIFOEN+0xde>
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c74:	f043 0204 	orr.w	r2, r3, #4
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d010      	beq.n	8008caa <UART_RxISR_8BIT_FIFOEN+0x10a>
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2204      	movs	r2, #4
 8008c98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ca0:	f043 0202 	orr.w	r2, r3, #2
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d006      	beq.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff f98f 	bl	8007fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d132      	bne.n	8008d34 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cdc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d10f      	bne.n	8008d28 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0210 	bic.w	r2, r2, #16
 8008d16:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff f963 	bl	8007fec <HAL_UARTEx_RxEventCallback>
 8008d26:	e002      	b.n	8008d2e <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7f9 fff7 	bl	8002d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d34:	89fb      	ldrh	r3, [r7, #14]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f003 0320 	and.w	r3, r3, #32
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f47f af4c 	bne.w	8008bde <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d4c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d4e:	897b      	ldrh	r3, [r7, #10]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d021      	beq.n	8008d98 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d5a:	897a      	ldrh	r2, [r7, #10]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d21b      	bcs.n	8008d98 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008d6e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a0b      	ldr	r2, [pc, #44]	; (8008da0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8008d74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0220 	orr.w	r2, r2, #32
 8008d84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d86:	e007      	b.n	8008d98 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0208 	orr.w	r2, r2, #8
 8008d96:	619a      	str	r2, [r3, #24]
}
 8008d98:	bf00      	nop
 8008d9a:	3720      	adds	r7, #32
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	080089f1 	.word	0x080089f1

08008da4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08a      	sub	sp, #40	; 0x28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008db2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd2:	2b22      	cmp	r3, #34	; 0x22
 8008dd4:	f040 80da 	bne.w	8008f8c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dde:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008de0:	e0aa      	b.n	8008f38 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dee:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008df0:	8aba      	ldrh	r2, [r7, #20]
 8008df2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008df4:	4013      	ands	r3, r2
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e00:	1c9a      	adds	r2, r3, #2
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d04d      	beq.n	8008ec6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d010      	beq.n	8008e56 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2201      	movs	r2, #1
 8008e44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4c:	f043 0201 	orr.w	r2, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d010      	beq.n	8008e82 <UART_RxISR_16BIT_FIFOEN+0xde>
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00b      	beq.n	8008e82 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e78:	f043 0204 	orr.w	r2, r3, #4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d010      	beq.n	8008eae <UART_RxISR_16BIT_FIFOEN+0x10a>
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2204      	movs	r2, #4
 8008e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea4:	f043 0202 	orr.w	r2, r3, #2
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d006      	beq.n	8008ec6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff f88d 	bl	8007fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d132      	bne.n	8008f38 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ee0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d10f      	bne.n	8008f2c <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0210 	bic.w	r2, r2, #16
 8008f1a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff f861 	bl	8007fec <HAL_UARTEx_RxEventCallback>
 8008f2a:	e002      	b.n	8008f32 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7f9 fef5 	bl	8002d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f38:	8afb      	ldrh	r3, [r7, #22]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f47f af4c 	bne.w	8008de2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f50:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f52:	89fb      	ldrh	r3, [r7, #14]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d021      	beq.n	8008f9c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f5e:	89fa      	ldrh	r2, [r7, #14]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d21b      	bcs.n	8008f9c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008f72:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8008f78:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f042 0220 	orr.w	r2, r2, #32
 8008f88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f8a:	e007      	b.n	8008f9c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0208 	orr.w	r2, r2, #8
 8008f9a:	619a      	str	r2, [r3, #24]
}
 8008f9c:	bf00      	nop
 8008f9e:	3728      	adds	r7, #40	; 0x28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	08008ac9 	.word	0x08008ac9

08008fa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d101      	bne.n	8008fbe <HAL_UARTEx_DisableFifoMode+0x16>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e027      	b.n	800900e <HAL_UARTEx_DisableFifoMode+0x66>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2224      	movs	r2, #36	; 0x24
 8008fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f022 0201 	bic.w	r2, r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800902e:	2302      	movs	r3, #2
 8009030:	e02d      	b.n	800908e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2224      	movs	r2, #36	; 0x24
 800903e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0201 	bic.w	r2, r2, #1
 8009058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f850 	bl	8009114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e02d      	b.n	800910a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2224      	movs	r2, #36	; 0x24
 80090ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0201 	bic.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f812 	bl	8009114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009120:	2b00      	cmp	r3, #0
 8009122:	d108      	bne.n	8009136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009134:	e031      	b.n	800919a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009136:	2308      	movs	r3, #8
 8009138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800913a:	2308      	movs	r3, #8
 800913c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	0e5b      	lsrs	r3, r3, #25
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 0307 	and.w	r3, r3, #7
 800914c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	0f5b      	lsrs	r3, r3, #29
 8009156:	b2db      	uxtb	r3, r3
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	7b3a      	ldrb	r2, [r7, #12]
 8009162:	4911      	ldr	r1, [pc, #68]	; (80091a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009164:	5c8a      	ldrb	r2, [r1, r2]
 8009166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800916a:	7b3a      	ldrb	r2, [r7, #12]
 800916c:	490f      	ldr	r1, [pc, #60]	; (80091ac <UARTEx_SetNbDataToProcess+0x98>)
 800916e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009170:	fb93 f3f2 	sdiv	r3, r3, r2
 8009174:	b29a      	uxth	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	7b7a      	ldrb	r2, [r7, #13]
 8009180:	4909      	ldr	r1, [pc, #36]	; (80091a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009182:	5c8a      	ldrb	r2, [r1, r2]
 8009184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009188:	7b7a      	ldrb	r2, [r7, #13]
 800918a:	4908      	ldr	r1, [pc, #32]	; (80091ac <UARTEx_SetNbDataToProcess+0x98>)
 800918c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800918e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009192:	b29a      	uxth	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	0800c114 	.word	0x0800c114
 80091ac:	0800c11c 	.word	0x0800c11c

080091b0 <__errno>:
 80091b0:	4b01      	ldr	r3, [pc, #4]	; (80091b8 <__errno+0x8>)
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	2000000c 	.word	0x2000000c

080091bc <__libc_init_array>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	4d0d      	ldr	r5, [pc, #52]	; (80091f4 <__libc_init_array+0x38>)
 80091c0:	4c0d      	ldr	r4, [pc, #52]	; (80091f8 <__libc_init_array+0x3c>)
 80091c2:	1b64      	subs	r4, r4, r5
 80091c4:	10a4      	asrs	r4, r4, #2
 80091c6:	2600      	movs	r6, #0
 80091c8:	42a6      	cmp	r6, r4
 80091ca:	d109      	bne.n	80091e0 <__libc_init_array+0x24>
 80091cc:	4d0b      	ldr	r5, [pc, #44]	; (80091fc <__libc_init_array+0x40>)
 80091ce:	4c0c      	ldr	r4, [pc, #48]	; (8009200 <__libc_init_array+0x44>)
 80091d0:	f002 fee0 	bl	800bf94 <_init>
 80091d4:	1b64      	subs	r4, r4, r5
 80091d6:	10a4      	asrs	r4, r4, #2
 80091d8:	2600      	movs	r6, #0
 80091da:	42a6      	cmp	r6, r4
 80091dc:	d105      	bne.n	80091ea <__libc_init_array+0x2e>
 80091de:	bd70      	pop	{r4, r5, r6, pc}
 80091e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e4:	4798      	blx	r3
 80091e6:	3601      	adds	r6, #1
 80091e8:	e7ee      	b.n	80091c8 <__libc_init_array+0xc>
 80091ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ee:	4798      	blx	r3
 80091f0:	3601      	adds	r6, #1
 80091f2:	e7f2      	b.n	80091da <__libc_init_array+0x1e>
 80091f4:	0800c548 	.word	0x0800c548
 80091f8:	0800c548 	.word	0x0800c548
 80091fc:	0800c548 	.word	0x0800c548
 8009200:	0800c54c 	.word	0x0800c54c

08009204 <memcpy>:
 8009204:	440a      	add	r2, r1
 8009206:	4291      	cmp	r1, r2
 8009208:	f100 33ff 	add.w	r3, r0, #4294967295
 800920c:	d100      	bne.n	8009210 <memcpy+0xc>
 800920e:	4770      	bx	lr
 8009210:	b510      	push	{r4, lr}
 8009212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800921a:	4291      	cmp	r1, r2
 800921c:	d1f9      	bne.n	8009212 <memcpy+0xe>
 800921e:	bd10      	pop	{r4, pc}

08009220 <memset>:
 8009220:	4402      	add	r2, r0
 8009222:	4603      	mov	r3, r0
 8009224:	4293      	cmp	r3, r2
 8009226:	d100      	bne.n	800922a <memset+0xa>
 8009228:	4770      	bx	lr
 800922a:	f803 1b01 	strb.w	r1, [r3], #1
 800922e:	e7f9      	b.n	8009224 <memset+0x4>

08009230 <__cvt>:
 8009230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009234:	ec55 4b10 	vmov	r4, r5, d0
 8009238:	2d00      	cmp	r5, #0
 800923a:	460e      	mov	r6, r1
 800923c:	4619      	mov	r1, r3
 800923e:	462b      	mov	r3, r5
 8009240:	bfbb      	ittet	lt
 8009242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009246:	461d      	movlt	r5, r3
 8009248:	2300      	movge	r3, #0
 800924a:	232d      	movlt	r3, #45	; 0x2d
 800924c:	700b      	strb	r3, [r1, #0]
 800924e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009250:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009254:	4691      	mov	r9, r2
 8009256:	f023 0820 	bic.w	r8, r3, #32
 800925a:	bfbc      	itt	lt
 800925c:	4622      	movlt	r2, r4
 800925e:	4614      	movlt	r4, r2
 8009260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009264:	d005      	beq.n	8009272 <__cvt+0x42>
 8009266:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800926a:	d100      	bne.n	800926e <__cvt+0x3e>
 800926c:	3601      	adds	r6, #1
 800926e:	2102      	movs	r1, #2
 8009270:	e000      	b.n	8009274 <__cvt+0x44>
 8009272:	2103      	movs	r1, #3
 8009274:	ab03      	add	r3, sp, #12
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	ab02      	add	r3, sp, #8
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	ec45 4b10 	vmov	d0, r4, r5
 8009280:	4653      	mov	r3, sl
 8009282:	4632      	mov	r2, r6
 8009284:	f000 fda4 	bl	8009dd0 <_dtoa_r>
 8009288:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800928c:	4607      	mov	r7, r0
 800928e:	d102      	bne.n	8009296 <__cvt+0x66>
 8009290:	f019 0f01 	tst.w	r9, #1
 8009294:	d022      	beq.n	80092dc <__cvt+0xac>
 8009296:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800929a:	eb07 0906 	add.w	r9, r7, r6
 800929e:	d110      	bne.n	80092c2 <__cvt+0x92>
 80092a0:	783b      	ldrb	r3, [r7, #0]
 80092a2:	2b30      	cmp	r3, #48	; 0x30
 80092a4:	d10a      	bne.n	80092bc <__cvt+0x8c>
 80092a6:	2200      	movs	r2, #0
 80092a8:	2300      	movs	r3, #0
 80092aa:	4620      	mov	r0, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7f7 fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80092b2:	b918      	cbnz	r0, 80092bc <__cvt+0x8c>
 80092b4:	f1c6 0601 	rsb	r6, r6, #1
 80092b8:	f8ca 6000 	str.w	r6, [sl]
 80092bc:	f8da 3000 	ldr.w	r3, [sl]
 80092c0:	4499      	add	r9, r3
 80092c2:	2200      	movs	r2, #0
 80092c4:	2300      	movs	r3, #0
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f7 fc25 	bl	8000b18 <__aeabi_dcmpeq>
 80092ce:	b108      	cbz	r0, 80092d4 <__cvt+0xa4>
 80092d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80092d4:	2230      	movs	r2, #48	; 0x30
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	454b      	cmp	r3, r9
 80092da:	d307      	bcc.n	80092ec <__cvt+0xbc>
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092e0:	1bdb      	subs	r3, r3, r7
 80092e2:	4638      	mov	r0, r7
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	b004      	add	sp, #16
 80092e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ec:	1c59      	adds	r1, r3, #1
 80092ee:	9103      	str	r1, [sp, #12]
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	e7f0      	b.n	80092d6 <__cvt+0xa6>

080092f4 <__exponent>:
 80092f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092f6:	4603      	mov	r3, r0
 80092f8:	2900      	cmp	r1, #0
 80092fa:	bfb8      	it	lt
 80092fc:	4249      	neglt	r1, r1
 80092fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009302:	bfb4      	ite	lt
 8009304:	222d      	movlt	r2, #45	; 0x2d
 8009306:	222b      	movge	r2, #43	; 0x2b
 8009308:	2909      	cmp	r1, #9
 800930a:	7042      	strb	r2, [r0, #1]
 800930c:	dd2a      	ble.n	8009364 <__exponent+0x70>
 800930e:	f10d 0407 	add.w	r4, sp, #7
 8009312:	46a4      	mov	ip, r4
 8009314:	270a      	movs	r7, #10
 8009316:	46a6      	mov	lr, r4
 8009318:	460a      	mov	r2, r1
 800931a:	fb91 f6f7 	sdiv	r6, r1, r7
 800931e:	fb07 1516 	mls	r5, r7, r6, r1
 8009322:	3530      	adds	r5, #48	; 0x30
 8009324:	2a63      	cmp	r2, #99	; 0x63
 8009326:	f104 34ff 	add.w	r4, r4, #4294967295
 800932a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800932e:	4631      	mov	r1, r6
 8009330:	dcf1      	bgt.n	8009316 <__exponent+0x22>
 8009332:	3130      	adds	r1, #48	; 0x30
 8009334:	f1ae 0502 	sub.w	r5, lr, #2
 8009338:	f804 1c01 	strb.w	r1, [r4, #-1]
 800933c:	1c44      	adds	r4, r0, #1
 800933e:	4629      	mov	r1, r5
 8009340:	4561      	cmp	r1, ip
 8009342:	d30a      	bcc.n	800935a <__exponent+0x66>
 8009344:	f10d 0209 	add.w	r2, sp, #9
 8009348:	eba2 020e 	sub.w	r2, r2, lr
 800934c:	4565      	cmp	r5, ip
 800934e:	bf88      	it	hi
 8009350:	2200      	movhi	r2, #0
 8009352:	4413      	add	r3, r2
 8009354:	1a18      	subs	r0, r3, r0
 8009356:	b003      	add	sp, #12
 8009358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800935e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009362:	e7ed      	b.n	8009340 <__exponent+0x4c>
 8009364:	2330      	movs	r3, #48	; 0x30
 8009366:	3130      	adds	r1, #48	; 0x30
 8009368:	7083      	strb	r3, [r0, #2]
 800936a:	70c1      	strb	r1, [r0, #3]
 800936c:	1d03      	adds	r3, r0, #4
 800936e:	e7f1      	b.n	8009354 <__exponent+0x60>

08009370 <_printf_float>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	ed2d 8b02 	vpush	{d8}
 8009378:	b08d      	sub	sp, #52	; 0x34
 800937a:	460c      	mov	r4, r1
 800937c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009380:	4616      	mov	r6, r2
 8009382:	461f      	mov	r7, r3
 8009384:	4605      	mov	r5, r0
 8009386:	f001 fcc7 	bl	800ad18 <_localeconv_r>
 800938a:	f8d0 a000 	ldr.w	sl, [r0]
 800938e:	4650      	mov	r0, sl
 8009390:	f7f6 ff46 	bl	8000220 <strlen>
 8009394:	2300      	movs	r3, #0
 8009396:	930a      	str	r3, [sp, #40]	; 0x28
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	9305      	str	r3, [sp, #20]
 800939c:	f8d8 3000 	ldr.w	r3, [r8]
 80093a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093a4:	3307      	adds	r3, #7
 80093a6:	f023 0307 	bic.w	r3, r3, #7
 80093aa:	f103 0208 	add.w	r2, r3, #8
 80093ae:	f8c8 2000 	str.w	r2, [r8]
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80093be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093c2:	9307      	str	r3, [sp, #28]
 80093c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80093c8:	ee08 0a10 	vmov	s16, r0
 80093cc:	4b9f      	ldr	r3, [pc, #636]	; (800964c <_printf_float+0x2dc>)
 80093ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093d2:	f04f 32ff 	mov.w	r2, #4294967295
 80093d6:	f7f7 fbd1 	bl	8000b7c <__aeabi_dcmpun>
 80093da:	bb88      	cbnz	r0, 8009440 <_printf_float+0xd0>
 80093dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093e0:	4b9a      	ldr	r3, [pc, #616]	; (800964c <_printf_float+0x2dc>)
 80093e2:	f04f 32ff 	mov.w	r2, #4294967295
 80093e6:	f7f7 fbab 	bl	8000b40 <__aeabi_dcmple>
 80093ea:	bb48      	cbnz	r0, 8009440 <_printf_float+0xd0>
 80093ec:	2200      	movs	r2, #0
 80093ee:	2300      	movs	r3, #0
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f7 fb9a 	bl	8000b2c <__aeabi_dcmplt>
 80093f8:	b110      	cbz	r0, 8009400 <_printf_float+0x90>
 80093fa:	232d      	movs	r3, #45	; 0x2d
 80093fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009400:	4b93      	ldr	r3, [pc, #588]	; (8009650 <_printf_float+0x2e0>)
 8009402:	4894      	ldr	r0, [pc, #592]	; (8009654 <_printf_float+0x2e4>)
 8009404:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009408:	bf94      	ite	ls
 800940a:	4698      	movls	r8, r3
 800940c:	4680      	movhi	r8, r0
 800940e:	2303      	movs	r3, #3
 8009410:	6123      	str	r3, [r4, #16]
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	f023 0204 	bic.w	r2, r3, #4
 8009418:	6022      	str	r2, [r4, #0]
 800941a:	f04f 0900 	mov.w	r9, #0
 800941e:	9700      	str	r7, [sp, #0]
 8009420:	4633      	mov	r3, r6
 8009422:	aa0b      	add	r2, sp, #44	; 0x2c
 8009424:	4621      	mov	r1, r4
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f9d8 	bl	80097dc <_printf_common>
 800942c:	3001      	adds	r0, #1
 800942e:	f040 8090 	bne.w	8009552 <_printf_float+0x1e2>
 8009432:	f04f 30ff 	mov.w	r0, #4294967295
 8009436:	b00d      	add	sp, #52	; 0x34
 8009438:	ecbd 8b02 	vpop	{d8}
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	4640      	mov	r0, r8
 8009446:	4649      	mov	r1, r9
 8009448:	f7f7 fb98 	bl	8000b7c <__aeabi_dcmpun>
 800944c:	b140      	cbz	r0, 8009460 <_printf_float+0xf0>
 800944e:	464b      	mov	r3, r9
 8009450:	2b00      	cmp	r3, #0
 8009452:	bfbc      	itt	lt
 8009454:	232d      	movlt	r3, #45	; 0x2d
 8009456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800945a:	487f      	ldr	r0, [pc, #508]	; (8009658 <_printf_float+0x2e8>)
 800945c:	4b7f      	ldr	r3, [pc, #508]	; (800965c <_printf_float+0x2ec>)
 800945e:	e7d1      	b.n	8009404 <_printf_float+0x94>
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009466:	9206      	str	r2, [sp, #24]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	d13f      	bne.n	80094ec <_printf_float+0x17c>
 800946c:	2306      	movs	r3, #6
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	9b05      	ldr	r3, [sp, #20]
 8009472:	6861      	ldr	r1, [r4, #4]
 8009474:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009478:	2300      	movs	r3, #0
 800947a:	9303      	str	r3, [sp, #12]
 800947c:	ab0a      	add	r3, sp, #40	; 0x28
 800947e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009482:	ab09      	add	r3, sp, #36	; 0x24
 8009484:	ec49 8b10 	vmov	d0, r8, r9
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	6022      	str	r2, [r4, #0]
 800948c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff fecd 	bl	8009230 <__cvt>
 8009496:	9b06      	ldr	r3, [sp, #24]
 8009498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800949a:	2b47      	cmp	r3, #71	; 0x47
 800949c:	4680      	mov	r8, r0
 800949e:	d108      	bne.n	80094b2 <_printf_float+0x142>
 80094a0:	1cc8      	adds	r0, r1, #3
 80094a2:	db02      	blt.n	80094aa <_printf_float+0x13a>
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	4299      	cmp	r1, r3
 80094a8:	dd41      	ble.n	800952e <_printf_float+0x1be>
 80094aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80094ae:	fa5f fb8b 	uxtb.w	fp, fp
 80094b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094b6:	d820      	bhi.n	80094fa <_printf_float+0x18a>
 80094b8:	3901      	subs	r1, #1
 80094ba:	465a      	mov	r2, fp
 80094bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094c0:	9109      	str	r1, [sp, #36]	; 0x24
 80094c2:	f7ff ff17 	bl	80092f4 <__exponent>
 80094c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c8:	1813      	adds	r3, r2, r0
 80094ca:	2a01      	cmp	r2, #1
 80094cc:	4681      	mov	r9, r0
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	dc02      	bgt.n	80094d8 <_printf_float+0x168>
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	07d2      	lsls	r2, r2, #31
 80094d6:	d501      	bpl.n	80094dc <_printf_float+0x16c>
 80094d8:	3301      	adds	r3, #1
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d09c      	beq.n	800941e <_printf_float+0xae>
 80094e4:	232d      	movs	r3, #45	; 0x2d
 80094e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ea:	e798      	b.n	800941e <_printf_float+0xae>
 80094ec:	9a06      	ldr	r2, [sp, #24]
 80094ee:	2a47      	cmp	r2, #71	; 0x47
 80094f0:	d1be      	bne.n	8009470 <_printf_float+0x100>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1bc      	bne.n	8009470 <_printf_float+0x100>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e7b9      	b.n	800946e <_printf_float+0xfe>
 80094fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094fe:	d118      	bne.n	8009532 <_printf_float+0x1c2>
 8009500:	2900      	cmp	r1, #0
 8009502:	6863      	ldr	r3, [r4, #4]
 8009504:	dd0b      	ble.n	800951e <_printf_float+0x1ae>
 8009506:	6121      	str	r1, [r4, #16]
 8009508:	b913      	cbnz	r3, 8009510 <_printf_float+0x1a0>
 800950a:	6822      	ldr	r2, [r4, #0]
 800950c:	07d0      	lsls	r0, r2, #31
 800950e:	d502      	bpl.n	8009516 <_printf_float+0x1a6>
 8009510:	3301      	adds	r3, #1
 8009512:	440b      	add	r3, r1
 8009514:	6123      	str	r3, [r4, #16]
 8009516:	65a1      	str	r1, [r4, #88]	; 0x58
 8009518:	f04f 0900 	mov.w	r9, #0
 800951c:	e7de      	b.n	80094dc <_printf_float+0x16c>
 800951e:	b913      	cbnz	r3, 8009526 <_printf_float+0x1b6>
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	07d2      	lsls	r2, r2, #31
 8009524:	d501      	bpl.n	800952a <_printf_float+0x1ba>
 8009526:	3302      	adds	r3, #2
 8009528:	e7f4      	b.n	8009514 <_printf_float+0x1a4>
 800952a:	2301      	movs	r3, #1
 800952c:	e7f2      	b.n	8009514 <_printf_float+0x1a4>
 800952e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009534:	4299      	cmp	r1, r3
 8009536:	db05      	blt.n	8009544 <_printf_float+0x1d4>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	6121      	str	r1, [r4, #16]
 800953c:	07d8      	lsls	r0, r3, #31
 800953e:	d5ea      	bpl.n	8009516 <_printf_float+0x1a6>
 8009540:	1c4b      	adds	r3, r1, #1
 8009542:	e7e7      	b.n	8009514 <_printf_float+0x1a4>
 8009544:	2900      	cmp	r1, #0
 8009546:	bfd4      	ite	le
 8009548:	f1c1 0202 	rsble	r2, r1, #2
 800954c:	2201      	movgt	r2, #1
 800954e:	4413      	add	r3, r2
 8009550:	e7e0      	b.n	8009514 <_printf_float+0x1a4>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	055a      	lsls	r2, r3, #21
 8009556:	d407      	bmi.n	8009568 <_printf_float+0x1f8>
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	4642      	mov	r2, r8
 800955c:	4631      	mov	r1, r6
 800955e:	4628      	mov	r0, r5
 8009560:	47b8      	blx	r7
 8009562:	3001      	adds	r0, #1
 8009564:	d12c      	bne.n	80095c0 <_printf_float+0x250>
 8009566:	e764      	b.n	8009432 <_printf_float+0xc2>
 8009568:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800956c:	f240 80e0 	bls.w	8009730 <_printf_float+0x3c0>
 8009570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009574:	2200      	movs	r2, #0
 8009576:	2300      	movs	r3, #0
 8009578:	f7f7 face 	bl	8000b18 <__aeabi_dcmpeq>
 800957c:	2800      	cmp	r0, #0
 800957e:	d034      	beq.n	80095ea <_printf_float+0x27a>
 8009580:	4a37      	ldr	r2, [pc, #220]	; (8009660 <_printf_float+0x2f0>)
 8009582:	2301      	movs	r3, #1
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	f43f af51 	beq.w	8009432 <_printf_float+0xc2>
 8009590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009594:	429a      	cmp	r2, r3
 8009596:	db02      	blt.n	800959e <_printf_float+0x22e>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	07d8      	lsls	r0, r3, #31
 800959c:	d510      	bpl.n	80095c0 <_printf_float+0x250>
 800959e:	ee18 3a10 	vmov	r3, s16
 80095a2:	4652      	mov	r2, sl
 80095a4:	4631      	mov	r1, r6
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b8      	blx	r7
 80095aa:	3001      	adds	r0, #1
 80095ac:	f43f af41 	beq.w	8009432 <_printf_float+0xc2>
 80095b0:	f04f 0800 	mov.w	r8, #0
 80095b4:	f104 091a 	add.w	r9, r4, #26
 80095b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ba:	3b01      	subs	r3, #1
 80095bc:	4543      	cmp	r3, r8
 80095be:	dc09      	bgt.n	80095d4 <_printf_float+0x264>
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	079b      	lsls	r3, r3, #30
 80095c4:	f100 8105 	bmi.w	80097d2 <_printf_float+0x462>
 80095c8:	68e0      	ldr	r0, [r4, #12]
 80095ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095cc:	4298      	cmp	r0, r3
 80095ce:	bfb8      	it	lt
 80095d0:	4618      	movlt	r0, r3
 80095d2:	e730      	b.n	8009436 <_printf_float+0xc6>
 80095d4:	2301      	movs	r3, #1
 80095d6:	464a      	mov	r2, r9
 80095d8:	4631      	mov	r1, r6
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	f43f af27 	beq.w	8009432 <_printf_float+0xc2>
 80095e4:	f108 0801 	add.w	r8, r8, #1
 80095e8:	e7e6      	b.n	80095b8 <_printf_float+0x248>
 80095ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc39      	bgt.n	8009664 <_printf_float+0x2f4>
 80095f0:	4a1b      	ldr	r2, [pc, #108]	; (8009660 <_printf_float+0x2f0>)
 80095f2:	2301      	movs	r3, #1
 80095f4:	4631      	mov	r1, r6
 80095f6:	4628      	mov	r0, r5
 80095f8:	47b8      	blx	r7
 80095fa:	3001      	adds	r0, #1
 80095fc:	f43f af19 	beq.w	8009432 <_printf_float+0xc2>
 8009600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009604:	4313      	orrs	r3, r2
 8009606:	d102      	bne.n	800960e <_printf_float+0x29e>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	07d9      	lsls	r1, r3, #31
 800960c:	d5d8      	bpl.n	80095c0 <_printf_float+0x250>
 800960e:	ee18 3a10 	vmov	r3, s16
 8009612:	4652      	mov	r2, sl
 8009614:	4631      	mov	r1, r6
 8009616:	4628      	mov	r0, r5
 8009618:	47b8      	blx	r7
 800961a:	3001      	adds	r0, #1
 800961c:	f43f af09 	beq.w	8009432 <_printf_float+0xc2>
 8009620:	f04f 0900 	mov.w	r9, #0
 8009624:	f104 0a1a 	add.w	sl, r4, #26
 8009628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800962a:	425b      	negs	r3, r3
 800962c:	454b      	cmp	r3, r9
 800962e:	dc01      	bgt.n	8009634 <_printf_float+0x2c4>
 8009630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009632:	e792      	b.n	800955a <_printf_float+0x1ea>
 8009634:	2301      	movs	r3, #1
 8009636:	4652      	mov	r2, sl
 8009638:	4631      	mov	r1, r6
 800963a:	4628      	mov	r0, r5
 800963c:	47b8      	blx	r7
 800963e:	3001      	adds	r0, #1
 8009640:	f43f aef7 	beq.w	8009432 <_printf_float+0xc2>
 8009644:	f109 0901 	add.w	r9, r9, #1
 8009648:	e7ee      	b.n	8009628 <_printf_float+0x2b8>
 800964a:	bf00      	nop
 800964c:	7fefffff 	.word	0x7fefffff
 8009650:	0800c128 	.word	0x0800c128
 8009654:	0800c12c 	.word	0x0800c12c
 8009658:	0800c134 	.word	0x0800c134
 800965c:	0800c130 	.word	0x0800c130
 8009660:	0800c138 	.word	0x0800c138
 8009664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009668:	429a      	cmp	r2, r3
 800966a:	bfa8      	it	ge
 800966c:	461a      	movge	r2, r3
 800966e:	2a00      	cmp	r2, #0
 8009670:	4691      	mov	r9, r2
 8009672:	dc37      	bgt.n	80096e4 <_printf_float+0x374>
 8009674:	f04f 0b00 	mov.w	fp, #0
 8009678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800967c:	f104 021a 	add.w	r2, r4, #26
 8009680:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009682:	9305      	str	r3, [sp, #20]
 8009684:	eba3 0309 	sub.w	r3, r3, r9
 8009688:	455b      	cmp	r3, fp
 800968a:	dc33      	bgt.n	80096f4 <_printf_float+0x384>
 800968c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009690:	429a      	cmp	r2, r3
 8009692:	db3b      	blt.n	800970c <_printf_float+0x39c>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	07da      	lsls	r2, r3, #31
 8009698:	d438      	bmi.n	800970c <_printf_float+0x39c>
 800969a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800969c:	9b05      	ldr	r3, [sp, #20]
 800969e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	eba2 0901 	sub.w	r9, r2, r1
 80096a6:	4599      	cmp	r9, r3
 80096a8:	bfa8      	it	ge
 80096aa:	4699      	movge	r9, r3
 80096ac:	f1b9 0f00 	cmp.w	r9, #0
 80096b0:	dc35      	bgt.n	800971e <_printf_float+0x3ae>
 80096b2:	f04f 0800 	mov.w	r8, #0
 80096b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096ba:	f104 0a1a 	add.w	sl, r4, #26
 80096be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096c2:	1a9b      	subs	r3, r3, r2
 80096c4:	eba3 0309 	sub.w	r3, r3, r9
 80096c8:	4543      	cmp	r3, r8
 80096ca:	f77f af79 	ble.w	80095c0 <_printf_float+0x250>
 80096ce:	2301      	movs	r3, #1
 80096d0:	4652      	mov	r2, sl
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	f43f aeaa 	beq.w	8009432 <_printf_float+0xc2>
 80096de:	f108 0801 	add.w	r8, r8, #1
 80096e2:	e7ec      	b.n	80096be <_printf_float+0x34e>
 80096e4:	4613      	mov	r3, r2
 80096e6:	4631      	mov	r1, r6
 80096e8:	4642      	mov	r2, r8
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b8      	blx	r7
 80096ee:	3001      	adds	r0, #1
 80096f0:	d1c0      	bne.n	8009674 <_printf_float+0x304>
 80096f2:	e69e      	b.n	8009432 <_printf_float+0xc2>
 80096f4:	2301      	movs	r3, #1
 80096f6:	4631      	mov	r1, r6
 80096f8:	4628      	mov	r0, r5
 80096fa:	9205      	str	r2, [sp, #20]
 80096fc:	47b8      	blx	r7
 80096fe:	3001      	adds	r0, #1
 8009700:	f43f ae97 	beq.w	8009432 <_printf_float+0xc2>
 8009704:	9a05      	ldr	r2, [sp, #20]
 8009706:	f10b 0b01 	add.w	fp, fp, #1
 800970a:	e7b9      	b.n	8009680 <_printf_float+0x310>
 800970c:	ee18 3a10 	vmov	r3, s16
 8009710:	4652      	mov	r2, sl
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	47b8      	blx	r7
 8009718:	3001      	adds	r0, #1
 800971a:	d1be      	bne.n	800969a <_printf_float+0x32a>
 800971c:	e689      	b.n	8009432 <_printf_float+0xc2>
 800971e:	9a05      	ldr	r2, [sp, #20]
 8009720:	464b      	mov	r3, r9
 8009722:	4442      	add	r2, r8
 8009724:	4631      	mov	r1, r6
 8009726:	4628      	mov	r0, r5
 8009728:	47b8      	blx	r7
 800972a:	3001      	adds	r0, #1
 800972c:	d1c1      	bne.n	80096b2 <_printf_float+0x342>
 800972e:	e680      	b.n	8009432 <_printf_float+0xc2>
 8009730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009732:	2a01      	cmp	r2, #1
 8009734:	dc01      	bgt.n	800973a <_printf_float+0x3ca>
 8009736:	07db      	lsls	r3, r3, #31
 8009738:	d538      	bpl.n	80097ac <_printf_float+0x43c>
 800973a:	2301      	movs	r3, #1
 800973c:	4642      	mov	r2, r8
 800973e:	4631      	mov	r1, r6
 8009740:	4628      	mov	r0, r5
 8009742:	47b8      	blx	r7
 8009744:	3001      	adds	r0, #1
 8009746:	f43f ae74 	beq.w	8009432 <_printf_float+0xc2>
 800974a:	ee18 3a10 	vmov	r3, s16
 800974e:	4652      	mov	r2, sl
 8009750:	4631      	mov	r1, r6
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	f43f ae6b 	beq.w	8009432 <_printf_float+0xc2>
 800975c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009760:	2200      	movs	r2, #0
 8009762:	2300      	movs	r3, #0
 8009764:	f7f7 f9d8 	bl	8000b18 <__aeabi_dcmpeq>
 8009768:	b9d8      	cbnz	r0, 80097a2 <_printf_float+0x432>
 800976a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976c:	f108 0201 	add.w	r2, r8, #1
 8009770:	3b01      	subs	r3, #1
 8009772:	4631      	mov	r1, r6
 8009774:	4628      	mov	r0, r5
 8009776:	47b8      	blx	r7
 8009778:	3001      	adds	r0, #1
 800977a:	d10e      	bne.n	800979a <_printf_float+0x42a>
 800977c:	e659      	b.n	8009432 <_printf_float+0xc2>
 800977e:	2301      	movs	r3, #1
 8009780:	4652      	mov	r2, sl
 8009782:	4631      	mov	r1, r6
 8009784:	4628      	mov	r0, r5
 8009786:	47b8      	blx	r7
 8009788:	3001      	adds	r0, #1
 800978a:	f43f ae52 	beq.w	8009432 <_printf_float+0xc2>
 800978e:	f108 0801 	add.w	r8, r8, #1
 8009792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009794:	3b01      	subs	r3, #1
 8009796:	4543      	cmp	r3, r8
 8009798:	dcf1      	bgt.n	800977e <_printf_float+0x40e>
 800979a:	464b      	mov	r3, r9
 800979c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097a0:	e6dc      	b.n	800955c <_printf_float+0x1ec>
 80097a2:	f04f 0800 	mov.w	r8, #0
 80097a6:	f104 0a1a 	add.w	sl, r4, #26
 80097aa:	e7f2      	b.n	8009792 <_printf_float+0x422>
 80097ac:	2301      	movs	r3, #1
 80097ae:	4642      	mov	r2, r8
 80097b0:	e7df      	b.n	8009772 <_printf_float+0x402>
 80097b2:	2301      	movs	r3, #1
 80097b4:	464a      	mov	r2, r9
 80097b6:	4631      	mov	r1, r6
 80097b8:	4628      	mov	r0, r5
 80097ba:	47b8      	blx	r7
 80097bc:	3001      	adds	r0, #1
 80097be:	f43f ae38 	beq.w	8009432 <_printf_float+0xc2>
 80097c2:	f108 0801 	add.w	r8, r8, #1
 80097c6:	68e3      	ldr	r3, [r4, #12]
 80097c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097ca:	1a5b      	subs	r3, r3, r1
 80097cc:	4543      	cmp	r3, r8
 80097ce:	dcf0      	bgt.n	80097b2 <_printf_float+0x442>
 80097d0:	e6fa      	b.n	80095c8 <_printf_float+0x258>
 80097d2:	f04f 0800 	mov.w	r8, #0
 80097d6:	f104 0919 	add.w	r9, r4, #25
 80097da:	e7f4      	b.n	80097c6 <_printf_float+0x456>

080097dc <_printf_common>:
 80097dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e0:	4616      	mov	r6, r2
 80097e2:	4699      	mov	r9, r3
 80097e4:	688a      	ldr	r2, [r1, #8]
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097ec:	4293      	cmp	r3, r2
 80097ee:	bfb8      	it	lt
 80097f0:	4613      	movlt	r3, r2
 80097f2:	6033      	str	r3, [r6, #0]
 80097f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097f8:	4607      	mov	r7, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	b10a      	cbz	r2, 8009802 <_printf_common+0x26>
 80097fe:	3301      	adds	r3, #1
 8009800:	6033      	str	r3, [r6, #0]
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	0699      	lsls	r1, r3, #26
 8009806:	bf42      	ittt	mi
 8009808:	6833      	ldrmi	r3, [r6, #0]
 800980a:	3302      	addmi	r3, #2
 800980c:	6033      	strmi	r3, [r6, #0]
 800980e:	6825      	ldr	r5, [r4, #0]
 8009810:	f015 0506 	ands.w	r5, r5, #6
 8009814:	d106      	bne.n	8009824 <_printf_common+0x48>
 8009816:	f104 0a19 	add.w	sl, r4, #25
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	6832      	ldr	r2, [r6, #0]
 800981e:	1a9b      	subs	r3, r3, r2
 8009820:	42ab      	cmp	r3, r5
 8009822:	dc26      	bgt.n	8009872 <_printf_common+0x96>
 8009824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009828:	1e13      	subs	r3, r2, #0
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	bf18      	it	ne
 800982e:	2301      	movne	r3, #1
 8009830:	0692      	lsls	r2, r2, #26
 8009832:	d42b      	bmi.n	800988c <_printf_common+0xb0>
 8009834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009838:	4649      	mov	r1, r9
 800983a:	4638      	mov	r0, r7
 800983c:	47c0      	blx	r8
 800983e:	3001      	adds	r0, #1
 8009840:	d01e      	beq.n	8009880 <_printf_common+0xa4>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	68e5      	ldr	r5, [r4, #12]
 8009846:	6832      	ldr	r2, [r6, #0]
 8009848:	f003 0306 	and.w	r3, r3, #6
 800984c:	2b04      	cmp	r3, #4
 800984e:	bf08      	it	eq
 8009850:	1aad      	subeq	r5, r5, r2
 8009852:	68a3      	ldr	r3, [r4, #8]
 8009854:	6922      	ldr	r2, [r4, #16]
 8009856:	bf0c      	ite	eq
 8009858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800985c:	2500      	movne	r5, #0
 800985e:	4293      	cmp	r3, r2
 8009860:	bfc4      	itt	gt
 8009862:	1a9b      	subgt	r3, r3, r2
 8009864:	18ed      	addgt	r5, r5, r3
 8009866:	2600      	movs	r6, #0
 8009868:	341a      	adds	r4, #26
 800986a:	42b5      	cmp	r5, r6
 800986c:	d11a      	bne.n	80098a4 <_printf_common+0xc8>
 800986e:	2000      	movs	r0, #0
 8009870:	e008      	b.n	8009884 <_printf_common+0xa8>
 8009872:	2301      	movs	r3, #1
 8009874:	4652      	mov	r2, sl
 8009876:	4649      	mov	r1, r9
 8009878:	4638      	mov	r0, r7
 800987a:	47c0      	blx	r8
 800987c:	3001      	adds	r0, #1
 800987e:	d103      	bne.n	8009888 <_printf_common+0xac>
 8009880:	f04f 30ff 	mov.w	r0, #4294967295
 8009884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009888:	3501      	adds	r5, #1
 800988a:	e7c6      	b.n	800981a <_printf_common+0x3e>
 800988c:	18e1      	adds	r1, r4, r3
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	2030      	movs	r0, #48	; 0x30
 8009892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009896:	4422      	add	r2, r4
 8009898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800989c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098a0:	3302      	adds	r3, #2
 80098a2:	e7c7      	b.n	8009834 <_printf_common+0x58>
 80098a4:	2301      	movs	r3, #1
 80098a6:	4622      	mov	r2, r4
 80098a8:	4649      	mov	r1, r9
 80098aa:	4638      	mov	r0, r7
 80098ac:	47c0      	blx	r8
 80098ae:	3001      	adds	r0, #1
 80098b0:	d0e6      	beq.n	8009880 <_printf_common+0xa4>
 80098b2:	3601      	adds	r6, #1
 80098b4:	e7d9      	b.n	800986a <_printf_common+0x8e>
	...

080098b8 <_printf_i>:
 80098b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098bc:	460c      	mov	r4, r1
 80098be:	4691      	mov	r9, r2
 80098c0:	7e27      	ldrb	r7, [r4, #24]
 80098c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098c4:	2f78      	cmp	r7, #120	; 0x78
 80098c6:	4680      	mov	r8, r0
 80098c8:	469a      	mov	sl, r3
 80098ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ce:	d807      	bhi.n	80098e0 <_printf_i+0x28>
 80098d0:	2f62      	cmp	r7, #98	; 0x62
 80098d2:	d80a      	bhi.n	80098ea <_printf_i+0x32>
 80098d4:	2f00      	cmp	r7, #0
 80098d6:	f000 80d8 	beq.w	8009a8a <_printf_i+0x1d2>
 80098da:	2f58      	cmp	r7, #88	; 0x58
 80098dc:	f000 80a3 	beq.w	8009a26 <_printf_i+0x16e>
 80098e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098e8:	e03a      	b.n	8009960 <_printf_i+0xa8>
 80098ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098ee:	2b15      	cmp	r3, #21
 80098f0:	d8f6      	bhi.n	80098e0 <_printf_i+0x28>
 80098f2:	a001      	add	r0, pc, #4	; (adr r0, 80098f8 <_printf_i+0x40>)
 80098f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098f8:	08009951 	.word	0x08009951
 80098fc:	08009965 	.word	0x08009965
 8009900:	080098e1 	.word	0x080098e1
 8009904:	080098e1 	.word	0x080098e1
 8009908:	080098e1 	.word	0x080098e1
 800990c:	080098e1 	.word	0x080098e1
 8009910:	08009965 	.word	0x08009965
 8009914:	080098e1 	.word	0x080098e1
 8009918:	080098e1 	.word	0x080098e1
 800991c:	080098e1 	.word	0x080098e1
 8009920:	080098e1 	.word	0x080098e1
 8009924:	08009a71 	.word	0x08009a71
 8009928:	08009995 	.word	0x08009995
 800992c:	08009a53 	.word	0x08009a53
 8009930:	080098e1 	.word	0x080098e1
 8009934:	080098e1 	.word	0x080098e1
 8009938:	08009a93 	.word	0x08009a93
 800993c:	080098e1 	.word	0x080098e1
 8009940:	08009995 	.word	0x08009995
 8009944:	080098e1 	.word	0x080098e1
 8009948:	080098e1 	.word	0x080098e1
 800994c:	08009a5b 	.word	0x08009a5b
 8009950:	680b      	ldr	r3, [r1, #0]
 8009952:	1d1a      	adds	r2, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	600a      	str	r2, [r1, #0]
 8009958:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800995c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009960:	2301      	movs	r3, #1
 8009962:	e0a3      	b.n	8009aac <_printf_i+0x1f4>
 8009964:	6825      	ldr	r5, [r4, #0]
 8009966:	6808      	ldr	r0, [r1, #0]
 8009968:	062e      	lsls	r6, r5, #24
 800996a:	f100 0304 	add.w	r3, r0, #4
 800996e:	d50a      	bpl.n	8009986 <_printf_i+0xce>
 8009970:	6805      	ldr	r5, [r0, #0]
 8009972:	600b      	str	r3, [r1, #0]
 8009974:	2d00      	cmp	r5, #0
 8009976:	da03      	bge.n	8009980 <_printf_i+0xc8>
 8009978:	232d      	movs	r3, #45	; 0x2d
 800997a:	426d      	negs	r5, r5
 800997c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009980:	485e      	ldr	r0, [pc, #376]	; (8009afc <_printf_i+0x244>)
 8009982:	230a      	movs	r3, #10
 8009984:	e019      	b.n	80099ba <_printf_i+0x102>
 8009986:	f015 0f40 	tst.w	r5, #64	; 0x40
 800998a:	6805      	ldr	r5, [r0, #0]
 800998c:	600b      	str	r3, [r1, #0]
 800998e:	bf18      	it	ne
 8009990:	b22d      	sxthne	r5, r5
 8009992:	e7ef      	b.n	8009974 <_printf_i+0xbc>
 8009994:	680b      	ldr	r3, [r1, #0]
 8009996:	6825      	ldr	r5, [r4, #0]
 8009998:	1d18      	adds	r0, r3, #4
 800999a:	6008      	str	r0, [r1, #0]
 800999c:	0628      	lsls	r0, r5, #24
 800999e:	d501      	bpl.n	80099a4 <_printf_i+0xec>
 80099a0:	681d      	ldr	r5, [r3, #0]
 80099a2:	e002      	b.n	80099aa <_printf_i+0xf2>
 80099a4:	0669      	lsls	r1, r5, #25
 80099a6:	d5fb      	bpl.n	80099a0 <_printf_i+0xe8>
 80099a8:	881d      	ldrh	r5, [r3, #0]
 80099aa:	4854      	ldr	r0, [pc, #336]	; (8009afc <_printf_i+0x244>)
 80099ac:	2f6f      	cmp	r7, #111	; 0x6f
 80099ae:	bf0c      	ite	eq
 80099b0:	2308      	moveq	r3, #8
 80099b2:	230a      	movne	r3, #10
 80099b4:	2100      	movs	r1, #0
 80099b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099ba:	6866      	ldr	r6, [r4, #4]
 80099bc:	60a6      	str	r6, [r4, #8]
 80099be:	2e00      	cmp	r6, #0
 80099c0:	bfa2      	ittt	ge
 80099c2:	6821      	ldrge	r1, [r4, #0]
 80099c4:	f021 0104 	bicge.w	r1, r1, #4
 80099c8:	6021      	strge	r1, [r4, #0]
 80099ca:	b90d      	cbnz	r5, 80099d0 <_printf_i+0x118>
 80099cc:	2e00      	cmp	r6, #0
 80099ce:	d04d      	beq.n	8009a6c <_printf_i+0x1b4>
 80099d0:	4616      	mov	r6, r2
 80099d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80099d6:	fb03 5711 	mls	r7, r3, r1, r5
 80099da:	5dc7      	ldrb	r7, [r0, r7]
 80099dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099e0:	462f      	mov	r7, r5
 80099e2:	42bb      	cmp	r3, r7
 80099e4:	460d      	mov	r5, r1
 80099e6:	d9f4      	bls.n	80099d2 <_printf_i+0x11a>
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d10b      	bne.n	8009a04 <_printf_i+0x14c>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	07df      	lsls	r7, r3, #31
 80099f0:	d508      	bpl.n	8009a04 <_printf_i+0x14c>
 80099f2:	6923      	ldr	r3, [r4, #16]
 80099f4:	6861      	ldr	r1, [r4, #4]
 80099f6:	4299      	cmp	r1, r3
 80099f8:	bfde      	ittt	le
 80099fa:	2330      	movle	r3, #48	; 0x30
 80099fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a04:	1b92      	subs	r2, r2, r6
 8009a06:	6122      	str	r2, [r4, #16]
 8009a08:	f8cd a000 	str.w	sl, [sp]
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	aa03      	add	r2, sp, #12
 8009a10:	4621      	mov	r1, r4
 8009a12:	4640      	mov	r0, r8
 8009a14:	f7ff fee2 	bl	80097dc <_printf_common>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d14c      	bne.n	8009ab6 <_printf_i+0x1fe>
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	b004      	add	sp, #16
 8009a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a26:	4835      	ldr	r0, [pc, #212]	; (8009afc <_printf_i+0x244>)
 8009a28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	680e      	ldr	r6, [r1, #0]
 8009a30:	061f      	lsls	r7, r3, #24
 8009a32:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a36:	600e      	str	r6, [r1, #0]
 8009a38:	d514      	bpl.n	8009a64 <_printf_i+0x1ac>
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	bf44      	itt	mi
 8009a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a42:	6023      	strmi	r3, [r4, #0]
 8009a44:	b91d      	cbnz	r5, 8009a4e <_printf_i+0x196>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	f023 0320 	bic.w	r3, r3, #32
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	2310      	movs	r3, #16
 8009a50:	e7b0      	b.n	80099b4 <_printf_i+0xfc>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	f043 0320 	orr.w	r3, r3, #32
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	2378      	movs	r3, #120	; 0x78
 8009a5c:	4828      	ldr	r0, [pc, #160]	; (8009b00 <_printf_i+0x248>)
 8009a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a62:	e7e3      	b.n	8009a2c <_printf_i+0x174>
 8009a64:	065e      	lsls	r6, r3, #25
 8009a66:	bf48      	it	mi
 8009a68:	b2ad      	uxthmi	r5, r5
 8009a6a:	e7e6      	b.n	8009a3a <_printf_i+0x182>
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	e7bb      	b.n	80099e8 <_printf_i+0x130>
 8009a70:	680b      	ldr	r3, [r1, #0]
 8009a72:	6826      	ldr	r6, [r4, #0]
 8009a74:	6960      	ldr	r0, [r4, #20]
 8009a76:	1d1d      	adds	r5, r3, #4
 8009a78:	600d      	str	r5, [r1, #0]
 8009a7a:	0635      	lsls	r5, r6, #24
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	d501      	bpl.n	8009a84 <_printf_i+0x1cc>
 8009a80:	6018      	str	r0, [r3, #0]
 8009a82:	e002      	b.n	8009a8a <_printf_i+0x1d2>
 8009a84:	0671      	lsls	r1, r6, #25
 8009a86:	d5fb      	bpl.n	8009a80 <_printf_i+0x1c8>
 8009a88:	8018      	strh	r0, [r3, #0]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	4616      	mov	r6, r2
 8009a90:	e7ba      	b.n	8009a08 <_printf_i+0x150>
 8009a92:	680b      	ldr	r3, [r1, #0]
 8009a94:	1d1a      	adds	r2, r3, #4
 8009a96:	600a      	str	r2, [r1, #0]
 8009a98:	681e      	ldr	r6, [r3, #0]
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7f6 fbc6 	bl	8000230 <memchr>
 8009aa4:	b108      	cbz	r0, 8009aaa <_printf_i+0x1f2>
 8009aa6:	1b80      	subs	r0, r0, r6
 8009aa8:	6060      	str	r0, [r4, #4]
 8009aaa:	6863      	ldr	r3, [r4, #4]
 8009aac:	6123      	str	r3, [r4, #16]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab4:	e7a8      	b.n	8009a08 <_printf_i+0x150>
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	4632      	mov	r2, r6
 8009aba:	4649      	mov	r1, r9
 8009abc:	4640      	mov	r0, r8
 8009abe:	47d0      	blx	sl
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d0ab      	beq.n	8009a1c <_printf_i+0x164>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	079b      	lsls	r3, r3, #30
 8009ac8:	d413      	bmi.n	8009af2 <_printf_i+0x23a>
 8009aca:	68e0      	ldr	r0, [r4, #12]
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	bfb8      	it	lt
 8009ad2:	4618      	movlt	r0, r3
 8009ad4:	e7a4      	b.n	8009a20 <_printf_i+0x168>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4632      	mov	r2, r6
 8009ada:	4649      	mov	r1, r9
 8009adc:	4640      	mov	r0, r8
 8009ade:	47d0      	blx	sl
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d09b      	beq.n	8009a1c <_printf_i+0x164>
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	68e3      	ldr	r3, [r4, #12]
 8009ae8:	9903      	ldr	r1, [sp, #12]
 8009aea:	1a5b      	subs	r3, r3, r1
 8009aec:	42ab      	cmp	r3, r5
 8009aee:	dcf2      	bgt.n	8009ad6 <_printf_i+0x21e>
 8009af0:	e7eb      	b.n	8009aca <_printf_i+0x212>
 8009af2:	2500      	movs	r5, #0
 8009af4:	f104 0619 	add.w	r6, r4, #25
 8009af8:	e7f5      	b.n	8009ae6 <_printf_i+0x22e>
 8009afa:	bf00      	nop
 8009afc:	0800c13a 	.word	0x0800c13a
 8009b00:	0800c14b 	.word	0x0800c14b

08009b04 <iprintf>:
 8009b04:	b40f      	push	{r0, r1, r2, r3}
 8009b06:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <iprintf+0x2c>)
 8009b08:	b513      	push	{r0, r1, r4, lr}
 8009b0a:	681c      	ldr	r4, [r3, #0]
 8009b0c:	b124      	cbz	r4, 8009b18 <iprintf+0x14>
 8009b0e:	69a3      	ldr	r3, [r4, #24]
 8009b10:	b913      	cbnz	r3, 8009b18 <iprintf+0x14>
 8009b12:	4620      	mov	r0, r4
 8009b14:	f001 f862 	bl	800abdc <__sinit>
 8009b18:	ab05      	add	r3, sp, #20
 8009b1a:	9a04      	ldr	r2, [sp, #16]
 8009b1c:	68a1      	ldr	r1, [r4, #8]
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	4620      	mov	r0, r4
 8009b22:	f001 fde1 	bl	800b6e8 <_vfiprintf_r>
 8009b26:	b002      	add	sp, #8
 8009b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b2c:	b004      	add	sp, #16
 8009b2e:	4770      	bx	lr
 8009b30:	2000000c 	.word	0x2000000c

08009b34 <__swbuf_r>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	460e      	mov	r6, r1
 8009b38:	4614      	mov	r4, r2
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	b118      	cbz	r0, 8009b46 <__swbuf_r+0x12>
 8009b3e:	6983      	ldr	r3, [r0, #24]
 8009b40:	b90b      	cbnz	r3, 8009b46 <__swbuf_r+0x12>
 8009b42:	f001 f84b 	bl	800abdc <__sinit>
 8009b46:	4b21      	ldr	r3, [pc, #132]	; (8009bcc <__swbuf_r+0x98>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	d12b      	bne.n	8009ba4 <__swbuf_r+0x70>
 8009b4c:	686c      	ldr	r4, [r5, #4]
 8009b4e:	69a3      	ldr	r3, [r4, #24]
 8009b50:	60a3      	str	r3, [r4, #8]
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	071a      	lsls	r2, r3, #28
 8009b56:	d52f      	bpl.n	8009bb8 <__swbuf_r+0x84>
 8009b58:	6923      	ldr	r3, [r4, #16]
 8009b5a:	b36b      	cbz	r3, 8009bb8 <__swbuf_r+0x84>
 8009b5c:	6923      	ldr	r3, [r4, #16]
 8009b5e:	6820      	ldr	r0, [r4, #0]
 8009b60:	1ac0      	subs	r0, r0, r3
 8009b62:	6963      	ldr	r3, [r4, #20]
 8009b64:	b2f6      	uxtb	r6, r6
 8009b66:	4283      	cmp	r3, r0
 8009b68:	4637      	mov	r7, r6
 8009b6a:	dc04      	bgt.n	8009b76 <__swbuf_r+0x42>
 8009b6c:	4621      	mov	r1, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 ffa0 	bl	800aab4 <_fflush_r>
 8009b74:	bb30      	cbnz	r0, 8009bc4 <__swbuf_r+0x90>
 8009b76:	68a3      	ldr	r3, [r4, #8]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	60a3      	str	r3, [r4, #8]
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	701e      	strb	r6, [r3, #0]
 8009b84:	6963      	ldr	r3, [r4, #20]
 8009b86:	3001      	adds	r0, #1
 8009b88:	4283      	cmp	r3, r0
 8009b8a:	d004      	beq.n	8009b96 <__swbuf_r+0x62>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	07db      	lsls	r3, r3, #31
 8009b90:	d506      	bpl.n	8009ba0 <__swbuf_r+0x6c>
 8009b92:	2e0a      	cmp	r6, #10
 8009b94:	d104      	bne.n	8009ba0 <__swbuf_r+0x6c>
 8009b96:	4621      	mov	r1, r4
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f000 ff8b 	bl	800aab4 <_fflush_r>
 8009b9e:	b988      	cbnz	r0, 8009bc4 <__swbuf_r+0x90>
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <__swbuf_r+0x9c>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	d101      	bne.n	8009bae <__swbuf_r+0x7a>
 8009baa:	68ac      	ldr	r4, [r5, #8]
 8009bac:	e7cf      	b.n	8009b4e <__swbuf_r+0x1a>
 8009bae:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <__swbuf_r+0xa0>)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	bf08      	it	eq
 8009bb4:	68ec      	ldreq	r4, [r5, #12]
 8009bb6:	e7ca      	b.n	8009b4e <__swbuf_r+0x1a>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 f80c 	bl	8009bd8 <__swsetup_r>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d0cb      	beq.n	8009b5c <__swbuf_r+0x28>
 8009bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8009bc8:	e7ea      	b.n	8009ba0 <__swbuf_r+0x6c>
 8009bca:	bf00      	nop
 8009bcc:	0800c314 	.word	0x0800c314
 8009bd0:	0800c334 	.word	0x0800c334
 8009bd4:	0800c2f4 	.word	0x0800c2f4

08009bd8 <__swsetup_r>:
 8009bd8:	4b32      	ldr	r3, [pc, #200]	; (8009ca4 <__swsetup_r+0xcc>)
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	681d      	ldr	r5, [r3, #0]
 8009bde:	4606      	mov	r6, r0
 8009be0:	460c      	mov	r4, r1
 8009be2:	b125      	cbz	r5, 8009bee <__swsetup_r+0x16>
 8009be4:	69ab      	ldr	r3, [r5, #24]
 8009be6:	b913      	cbnz	r3, 8009bee <__swsetup_r+0x16>
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 fff7 	bl	800abdc <__sinit>
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <__swsetup_r+0xd0>)
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d10f      	bne.n	8009c14 <__swsetup_r+0x3c>
 8009bf4:	686c      	ldr	r4, [r5, #4]
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bfc:	0719      	lsls	r1, r3, #28
 8009bfe:	d42c      	bmi.n	8009c5a <__swsetup_r+0x82>
 8009c00:	06dd      	lsls	r5, r3, #27
 8009c02:	d411      	bmi.n	8009c28 <__swsetup_r+0x50>
 8009c04:	2309      	movs	r3, #9
 8009c06:	6033      	str	r3, [r6, #0]
 8009c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c12:	e03e      	b.n	8009c92 <__swsetup_r+0xba>
 8009c14:	4b25      	ldr	r3, [pc, #148]	; (8009cac <__swsetup_r+0xd4>)
 8009c16:	429c      	cmp	r4, r3
 8009c18:	d101      	bne.n	8009c1e <__swsetup_r+0x46>
 8009c1a:	68ac      	ldr	r4, [r5, #8]
 8009c1c:	e7eb      	b.n	8009bf6 <__swsetup_r+0x1e>
 8009c1e:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <__swsetup_r+0xd8>)
 8009c20:	429c      	cmp	r4, r3
 8009c22:	bf08      	it	eq
 8009c24:	68ec      	ldreq	r4, [r5, #12]
 8009c26:	e7e6      	b.n	8009bf6 <__swsetup_r+0x1e>
 8009c28:	0758      	lsls	r0, r3, #29
 8009c2a:	d512      	bpl.n	8009c52 <__swsetup_r+0x7a>
 8009c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c2e:	b141      	cbz	r1, 8009c42 <__swsetup_r+0x6a>
 8009c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c34:	4299      	cmp	r1, r3
 8009c36:	d002      	beq.n	8009c3e <__swsetup_r+0x66>
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f001 fc81 	bl	800b540 <_free_r>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	6363      	str	r3, [r4, #52]	; 0x34
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	6063      	str	r3, [r4, #4]
 8009c4e:	6923      	ldr	r3, [r4, #16]
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	f043 0308 	orr.w	r3, r3, #8
 8009c58:	81a3      	strh	r3, [r4, #12]
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	b94b      	cbnz	r3, 8009c72 <__swsetup_r+0x9a>
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c68:	d003      	beq.n	8009c72 <__swsetup_r+0x9a>
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f001 f87f 	bl	800ad70 <__smakebuf_r>
 8009c72:	89a0      	ldrh	r0, [r4, #12]
 8009c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c78:	f010 0301 	ands.w	r3, r0, #1
 8009c7c:	d00a      	beq.n	8009c94 <__swsetup_r+0xbc>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60a3      	str	r3, [r4, #8]
 8009c82:	6963      	ldr	r3, [r4, #20]
 8009c84:	425b      	negs	r3, r3
 8009c86:	61a3      	str	r3, [r4, #24]
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	b943      	cbnz	r3, 8009c9e <__swsetup_r+0xc6>
 8009c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c90:	d1ba      	bne.n	8009c08 <__swsetup_r+0x30>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	0781      	lsls	r1, r0, #30
 8009c96:	bf58      	it	pl
 8009c98:	6963      	ldrpl	r3, [r4, #20]
 8009c9a:	60a3      	str	r3, [r4, #8]
 8009c9c:	e7f4      	b.n	8009c88 <__swsetup_r+0xb0>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	e7f7      	b.n	8009c92 <__swsetup_r+0xba>
 8009ca2:	bf00      	nop
 8009ca4:	2000000c 	.word	0x2000000c
 8009ca8:	0800c314 	.word	0x0800c314
 8009cac:	0800c334 	.word	0x0800c334
 8009cb0:	0800c2f4 	.word	0x0800c2f4

08009cb4 <quorem>:
 8009cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb8:	6903      	ldr	r3, [r0, #16]
 8009cba:	690c      	ldr	r4, [r1, #16]
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	f2c0 8081 	blt.w	8009dc6 <quorem+0x112>
 8009cc4:	3c01      	subs	r4, #1
 8009cc6:	f101 0814 	add.w	r8, r1, #20
 8009cca:	f100 0514 	add.w	r5, r0, #20
 8009cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cec:	d331      	bcc.n	8009d52 <quorem+0x9e>
 8009cee:	f04f 0e00 	mov.w	lr, #0
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	46ac      	mov	ip, r5
 8009cf6:	46f2      	mov	sl, lr
 8009cf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009cfc:	b293      	uxth	r3, r2
 8009cfe:	fb06 e303 	mla	r3, r6, r3, lr
 8009d02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	ebaa 0303 	sub.w	r3, sl, r3
 8009d0c:	0c12      	lsrs	r2, r2, #16
 8009d0e:	f8dc a000 	ldr.w	sl, [ip]
 8009d12:	fb06 e202 	mla	r2, r6, r2, lr
 8009d16:	fa13 f38a 	uxtah	r3, r3, sl
 8009d1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d1e:	fa1f fa82 	uxth.w	sl, r2
 8009d22:	f8dc 2000 	ldr.w	r2, [ip]
 8009d26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009d2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d34:	4581      	cmp	r9, r0
 8009d36:	f84c 3b04 	str.w	r3, [ip], #4
 8009d3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d3e:	d2db      	bcs.n	8009cf8 <quorem+0x44>
 8009d40:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d44:	b92b      	cbnz	r3, 8009d52 <quorem+0x9e>
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	3b04      	subs	r3, #4
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	d32e      	bcc.n	8009dae <quorem+0xfa>
 8009d50:	613c      	str	r4, [r7, #16]
 8009d52:	4638      	mov	r0, r7
 8009d54:	f001 fae4 	bl	800b320 <__mcmp>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	db24      	blt.n	8009da6 <quorem+0xf2>
 8009d5c:	3601      	adds	r6, #1
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f04f 0c00 	mov.w	ip, #0
 8009d64:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d68:	f8d0 e000 	ldr.w	lr, [r0]
 8009d6c:	b293      	uxth	r3, r2
 8009d6e:	ebac 0303 	sub.w	r3, ip, r3
 8009d72:	0c12      	lsrs	r2, r2, #16
 8009d74:	fa13 f38e 	uxtah	r3, r3, lr
 8009d78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d86:	45c1      	cmp	r9, r8
 8009d88:	f840 3b04 	str.w	r3, [r0], #4
 8009d8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d90:	d2e8      	bcs.n	8009d64 <quorem+0xb0>
 8009d92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d9a:	b922      	cbnz	r2, 8009da6 <quorem+0xf2>
 8009d9c:	3b04      	subs	r3, #4
 8009d9e:	429d      	cmp	r5, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	d30a      	bcc.n	8009dba <quorem+0x106>
 8009da4:	613c      	str	r4, [r7, #16]
 8009da6:	4630      	mov	r0, r6
 8009da8:	b003      	add	sp, #12
 8009daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dae:	6812      	ldr	r2, [r2, #0]
 8009db0:	3b04      	subs	r3, #4
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	d1cc      	bne.n	8009d50 <quorem+0x9c>
 8009db6:	3c01      	subs	r4, #1
 8009db8:	e7c7      	b.n	8009d4a <quorem+0x96>
 8009dba:	6812      	ldr	r2, [r2, #0]
 8009dbc:	3b04      	subs	r3, #4
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	d1f0      	bne.n	8009da4 <quorem+0xf0>
 8009dc2:	3c01      	subs	r4, #1
 8009dc4:	e7eb      	b.n	8009d9e <quorem+0xea>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e7ee      	b.n	8009da8 <quorem+0xf4>
 8009dca:	0000      	movs	r0, r0
 8009dcc:	0000      	movs	r0, r0
	...

08009dd0 <_dtoa_r>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	ed2d 8b02 	vpush	{d8}
 8009dd8:	ec57 6b10 	vmov	r6, r7, d0
 8009ddc:	b095      	sub	sp, #84	; 0x54
 8009dde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009de0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009de4:	9105      	str	r1, [sp, #20]
 8009de6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009dea:	4604      	mov	r4, r0
 8009dec:	9209      	str	r2, [sp, #36]	; 0x24
 8009dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df0:	b975      	cbnz	r5, 8009e10 <_dtoa_r+0x40>
 8009df2:	2010      	movs	r0, #16
 8009df4:	f000 fffc 	bl	800adf0 <malloc>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6260      	str	r0, [r4, #36]	; 0x24
 8009dfc:	b920      	cbnz	r0, 8009e08 <_dtoa_r+0x38>
 8009dfe:	4bb2      	ldr	r3, [pc, #712]	; (800a0c8 <_dtoa_r+0x2f8>)
 8009e00:	21ea      	movs	r1, #234	; 0xea
 8009e02:	48b2      	ldr	r0, [pc, #712]	; (800a0cc <_dtoa_r+0x2fc>)
 8009e04:	f001 fe12 	bl	800ba2c <__assert_func>
 8009e08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e0c:	6005      	str	r5, [r0, #0]
 8009e0e:	60c5      	str	r5, [r0, #12]
 8009e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e12:	6819      	ldr	r1, [r3, #0]
 8009e14:	b151      	cbz	r1, 8009e2c <_dtoa_r+0x5c>
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	604a      	str	r2, [r1, #4]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4093      	lsls	r3, r2
 8009e1e:	608b      	str	r3, [r1, #8]
 8009e20:	4620      	mov	r0, r4
 8009e22:	f001 f83f 	bl	800aea4 <_Bfree>
 8009e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	1e3b      	subs	r3, r7, #0
 8009e2e:	bfb9      	ittee	lt
 8009e30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e34:	9303      	strlt	r3, [sp, #12]
 8009e36:	2300      	movge	r3, #0
 8009e38:	f8c8 3000 	strge.w	r3, [r8]
 8009e3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009e40:	4ba3      	ldr	r3, [pc, #652]	; (800a0d0 <_dtoa_r+0x300>)
 8009e42:	bfbc      	itt	lt
 8009e44:	2201      	movlt	r2, #1
 8009e46:	f8c8 2000 	strlt.w	r2, [r8]
 8009e4a:	ea33 0309 	bics.w	r3, r3, r9
 8009e4e:	d11b      	bne.n	8009e88 <_dtoa_r+0xb8>
 8009e50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e52:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e5c:	4333      	orrs	r3, r6
 8009e5e:	f000 857a 	beq.w	800a956 <_dtoa_r+0xb86>
 8009e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e64:	b963      	cbnz	r3, 8009e80 <_dtoa_r+0xb0>
 8009e66:	4b9b      	ldr	r3, [pc, #620]	; (800a0d4 <_dtoa_r+0x304>)
 8009e68:	e024      	b.n	8009eb4 <_dtoa_r+0xe4>
 8009e6a:	4b9b      	ldr	r3, [pc, #620]	; (800a0d8 <_dtoa_r+0x308>)
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	9800      	ldr	r0, [sp, #0]
 8009e76:	b015      	add	sp, #84	; 0x54
 8009e78:	ecbd 8b02 	vpop	{d8}
 8009e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e80:	4b94      	ldr	r3, [pc, #592]	; (800a0d4 <_dtoa_r+0x304>)
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	3303      	adds	r3, #3
 8009e86:	e7f3      	b.n	8009e70 <_dtoa_r+0xa0>
 8009e88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	ec51 0b17 	vmov	r0, r1, d7
 8009e92:	2300      	movs	r3, #0
 8009e94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009e98:	f7f6 fe3e 	bl	8000b18 <__aeabi_dcmpeq>
 8009e9c:	4680      	mov	r8, r0
 8009e9e:	b158      	cbz	r0, 8009eb8 <_dtoa_r+0xe8>
 8009ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8551 	beq.w	800a950 <_dtoa_r+0xb80>
 8009eae:	488b      	ldr	r0, [pc, #556]	; (800a0dc <_dtoa_r+0x30c>)
 8009eb0:	6018      	str	r0, [r3, #0]
 8009eb2:	1e43      	subs	r3, r0, #1
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	e7dd      	b.n	8009e74 <_dtoa_r+0xa4>
 8009eb8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009ebc:	aa12      	add	r2, sp, #72	; 0x48
 8009ebe:	a913      	add	r1, sp, #76	; 0x4c
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 fad1 	bl	800b468 <__d2b>
 8009ec6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009eca:	4683      	mov	fp, r0
 8009ecc:	2d00      	cmp	r5, #0
 8009ece:	d07c      	beq.n	8009fca <_dtoa_r+0x1fa>
 8009ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ed2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eda:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009ede:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ee2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009eea:	4b7d      	ldr	r3, [pc, #500]	; (800a0e0 <_dtoa_r+0x310>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	4630      	mov	r0, r6
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	f7f6 f9f1 	bl	80002d8 <__aeabi_dsub>
 8009ef6:	a36e      	add	r3, pc, #440	; (adr r3, 800a0b0 <_dtoa_r+0x2e0>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f7f6 fba4 	bl	8000648 <__aeabi_dmul>
 8009f00:	a36d      	add	r3, pc, #436	; (adr r3, 800a0b8 <_dtoa_r+0x2e8>)
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	f7f6 f9e9 	bl	80002dc <__adddf3>
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	460f      	mov	r7, r1
 8009f10:	f7f6 fb30 	bl	8000574 <__aeabi_i2d>
 8009f14:	a36a      	add	r3, pc, #424	; (adr r3, 800a0c0 <_dtoa_r+0x2f0>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f7f6 fb95 	bl	8000648 <__aeabi_dmul>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 f9d9 	bl	80002dc <__adddf3>
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	f7f6 fe3b 	bl	8000ba8 <__aeabi_d2iz>
 8009f32:	2200      	movs	r2, #0
 8009f34:	4682      	mov	sl, r0
 8009f36:	2300      	movs	r3, #0
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fdf6 	bl	8000b2c <__aeabi_dcmplt>
 8009f40:	b148      	cbz	r0, 8009f56 <_dtoa_r+0x186>
 8009f42:	4650      	mov	r0, sl
 8009f44:	f7f6 fb16 	bl	8000574 <__aeabi_i2d>
 8009f48:	4632      	mov	r2, r6
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	f7f6 fde4 	bl	8000b18 <__aeabi_dcmpeq>
 8009f50:	b908      	cbnz	r0, 8009f56 <_dtoa_r+0x186>
 8009f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f56:	f1ba 0f16 	cmp.w	sl, #22
 8009f5a:	d854      	bhi.n	800a006 <_dtoa_r+0x236>
 8009f5c:	4b61      	ldr	r3, [pc, #388]	; (800a0e4 <_dtoa_r+0x314>)
 8009f5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f6a:	f7f6 fddf 	bl	8000b2c <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d04b      	beq.n	800a00a <_dtoa_r+0x23a>
 8009f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f76:	2300      	movs	r3, #0
 8009f78:	930e      	str	r3, [sp, #56]	; 0x38
 8009f7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f7c:	1b5d      	subs	r5, r3, r5
 8009f7e:	1e6b      	subs	r3, r5, #1
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	bf43      	ittte	mi
 8009f84:	2300      	movmi	r3, #0
 8009f86:	f1c5 0801 	rsbmi	r8, r5, #1
 8009f8a:	9304      	strmi	r3, [sp, #16]
 8009f8c:	f04f 0800 	movpl.w	r8, #0
 8009f90:	f1ba 0f00 	cmp.w	sl, #0
 8009f94:	db3b      	blt.n	800a00e <_dtoa_r+0x23e>
 8009f96:	9b04      	ldr	r3, [sp, #16]
 8009f98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009f9c:	4453      	add	r3, sl
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9306      	str	r3, [sp, #24]
 8009fa4:	9b05      	ldr	r3, [sp, #20]
 8009fa6:	2b09      	cmp	r3, #9
 8009fa8:	d869      	bhi.n	800a07e <_dtoa_r+0x2ae>
 8009faa:	2b05      	cmp	r3, #5
 8009fac:	bfc4      	itt	gt
 8009fae:	3b04      	subgt	r3, #4
 8009fb0:	9305      	strgt	r3, [sp, #20]
 8009fb2:	9b05      	ldr	r3, [sp, #20]
 8009fb4:	f1a3 0302 	sub.w	r3, r3, #2
 8009fb8:	bfcc      	ite	gt
 8009fba:	2500      	movgt	r5, #0
 8009fbc:	2501      	movle	r5, #1
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d869      	bhi.n	800a096 <_dtoa_r+0x2c6>
 8009fc2:	e8df f003 	tbb	[pc, r3]
 8009fc6:	4e2c      	.short	0x4e2c
 8009fc8:	5a4c      	.short	0x5a4c
 8009fca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009fce:	441d      	add	r5, r3
 8009fd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	bfc1      	itttt	gt
 8009fd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fdc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009fe0:	fa09 f303 	lslgt.w	r3, r9, r3
 8009fe4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009fe8:	bfda      	itte	le
 8009fea:	f1c3 0320 	rsble	r3, r3, #32
 8009fee:	fa06 f003 	lslle.w	r0, r6, r3
 8009ff2:	4318      	orrgt	r0, r3
 8009ff4:	f7f6 faae 	bl	8000554 <__aeabi_ui2d>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a000:	3d01      	subs	r5, #1
 800a002:	9310      	str	r3, [sp, #64]	; 0x40
 800a004:	e771      	b.n	8009eea <_dtoa_r+0x11a>
 800a006:	2301      	movs	r3, #1
 800a008:	e7b6      	b.n	8009f78 <_dtoa_r+0x1a8>
 800a00a:	900e      	str	r0, [sp, #56]	; 0x38
 800a00c:	e7b5      	b.n	8009f7a <_dtoa_r+0x1aa>
 800a00e:	f1ca 0300 	rsb	r3, sl, #0
 800a012:	9306      	str	r3, [sp, #24]
 800a014:	2300      	movs	r3, #0
 800a016:	eba8 080a 	sub.w	r8, r8, sl
 800a01a:	930d      	str	r3, [sp, #52]	; 0x34
 800a01c:	e7c2      	b.n	8009fa4 <_dtoa_r+0x1d4>
 800a01e:	2300      	movs	r3, #0
 800a020:	9308      	str	r3, [sp, #32]
 800a022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a024:	2b00      	cmp	r3, #0
 800a026:	dc39      	bgt.n	800a09c <_dtoa_r+0x2cc>
 800a028:	f04f 0901 	mov.w	r9, #1
 800a02c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a030:	464b      	mov	r3, r9
 800a032:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a036:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a038:	2200      	movs	r2, #0
 800a03a:	6042      	str	r2, [r0, #4]
 800a03c:	2204      	movs	r2, #4
 800a03e:	f102 0614 	add.w	r6, r2, #20
 800a042:	429e      	cmp	r6, r3
 800a044:	6841      	ldr	r1, [r0, #4]
 800a046:	d92f      	bls.n	800a0a8 <_dtoa_r+0x2d8>
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 feeb 	bl	800ae24 <_Balloc>
 800a04e:	9000      	str	r0, [sp, #0]
 800a050:	2800      	cmp	r0, #0
 800a052:	d14b      	bne.n	800a0ec <_dtoa_r+0x31c>
 800a054:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <_dtoa_r+0x318>)
 800a056:	4602      	mov	r2, r0
 800a058:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a05c:	e6d1      	b.n	8009e02 <_dtoa_r+0x32>
 800a05e:	2301      	movs	r3, #1
 800a060:	e7de      	b.n	800a020 <_dtoa_r+0x250>
 800a062:	2300      	movs	r3, #0
 800a064:	9308      	str	r3, [sp, #32]
 800a066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a068:	eb0a 0903 	add.w	r9, sl, r3
 800a06c:	f109 0301 	add.w	r3, r9, #1
 800a070:	2b01      	cmp	r3, #1
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	bfb8      	it	lt
 800a076:	2301      	movlt	r3, #1
 800a078:	e7dd      	b.n	800a036 <_dtoa_r+0x266>
 800a07a:	2301      	movs	r3, #1
 800a07c:	e7f2      	b.n	800a064 <_dtoa_r+0x294>
 800a07e:	2501      	movs	r5, #1
 800a080:	2300      	movs	r3, #0
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	9508      	str	r5, [sp, #32]
 800a086:	f04f 39ff 	mov.w	r9, #4294967295
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a090:	2312      	movs	r3, #18
 800a092:	9209      	str	r2, [sp, #36]	; 0x24
 800a094:	e7cf      	b.n	800a036 <_dtoa_r+0x266>
 800a096:	2301      	movs	r3, #1
 800a098:	9308      	str	r3, [sp, #32]
 800a09a:	e7f4      	b.n	800a086 <_dtoa_r+0x2b6>
 800a09c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a0a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	e7c6      	b.n	800a036 <_dtoa_r+0x266>
 800a0a8:	3101      	adds	r1, #1
 800a0aa:	6041      	str	r1, [r0, #4]
 800a0ac:	0052      	lsls	r2, r2, #1
 800a0ae:	e7c6      	b.n	800a03e <_dtoa_r+0x26e>
 800a0b0:	636f4361 	.word	0x636f4361
 800a0b4:	3fd287a7 	.word	0x3fd287a7
 800a0b8:	8b60c8b3 	.word	0x8b60c8b3
 800a0bc:	3fc68a28 	.word	0x3fc68a28
 800a0c0:	509f79fb 	.word	0x509f79fb
 800a0c4:	3fd34413 	.word	0x3fd34413
 800a0c8:	0800c26a 	.word	0x0800c26a
 800a0cc:	0800c281 	.word	0x0800c281
 800a0d0:	7ff00000 	.word	0x7ff00000
 800a0d4:	0800c266 	.word	0x0800c266
 800a0d8:	0800c25d 	.word	0x0800c25d
 800a0dc:	0800c139 	.word	0x0800c139
 800a0e0:	3ff80000 	.word	0x3ff80000
 800a0e4:	0800c3e8 	.word	0x0800c3e8
 800a0e8:	0800c2e0 	.word	0x0800c2e0
 800a0ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ee:	9a00      	ldr	r2, [sp, #0]
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	9b01      	ldr	r3, [sp, #4]
 800a0f4:	2b0e      	cmp	r3, #14
 800a0f6:	f200 80ad 	bhi.w	800a254 <_dtoa_r+0x484>
 800a0fa:	2d00      	cmp	r5, #0
 800a0fc:	f000 80aa 	beq.w	800a254 <_dtoa_r+0x484>
 800a100:	f1ba 0f00 	cmp.w	sl, #0
 800a104:	dd36      	ble.n	800a174 <_dtoa_r+0x3a4>
 800a106:	4ac3      	ldr	r2, [pc, #780]	; (800a414 <_dtoa_r+0x644>)
 800a108:	f00a 030f 	and.w	r3, sl, #15
 800a10c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a110:	ed93 7b00 	vldr	d7, [r3]
 800a114:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a118:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a11c:	eeb0 8a47 	vmov.f32	s16, s14
 800a120:	eef0 8a67 	vmov.f32	s17, s15
 800a124:	d016      	beq.n	800a154 <_dtoa_r+0x384>
 800a126:	4bbc      	ldr	r3, [pc, #752]	; (800a418 <_dtoa_r+0x648>)
 800a128:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a12c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a130:	f7f6 fbb4 	bl	800089c <__aeabi_ddiv>
 800a134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a138:	f007 070f 	and.w	r7, r7, #15
 800a13c:	2503      	movs	r5, #3
 800a13e:	4eb6      	ldr	r6, [pc, #728]	; (800a418 <_dtoa_r+0x648>)
 800a140:	b957      	cbnz	r7, 800a158 <_dtoa_r+0x388>
 800a142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a146:	ec53 2b18 	vmov	r2, r3, d8
 800a14a:	f7f6 fba7 	bl	800089c <__aeabi_ddiv>
 800a14e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a152:	e029      	b.n	800a1a8 <_dtoa_r+0x3d8>
 800a154:	2502      	movs	r5, #2
 800a156:	e7f2      	b.n	800a13e <_dtoa_r+0x36e>
 800a158:	07f9      	lsls	r1, r7, #31
 800a15a:	d508      	bpl.n	800a16e <_dtoa_r+0x39e>
 800a15c:	ec51 0b18 	vmov	r0, r1, d8
 800a160:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a164:	f7f6 fa70 	bl	8000648 <__aeabi_dmul>
 800a168:	ec41 0b18 	vmov	d8, r0, r1
 800a16c:	3501      	adds	r5, #1
 800a16e:	107f      	asrs	r7, r7, #1
 800a170:	3608      	adds	r6, #8
 800a172:	e7e5      	b.n	800a140 <_dtoa_r+0x370>
 800a174:	f000 80a6 	beq.w	800a2c4 <_dtoa_r+0x4f4>
 800a178:	f1ca 0600 	rsb	r6, sl, #0
 800a17c:	4ba5      	ldr	r3, [pc, #660]	; (800a414 <_dtoa_r+0x644>)
 800a17e:	4fa6      	ldr	r7, [pc, #664]	; (800a418 <_dtoa_r+0x648>)
 800a180:	f006 020f 	and.w	r2, r6, #15
 800a184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a190:	f7f6 fa5a 	bl	8000648 <__aeabi_dmul>
 800a194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a198:	1136      	asrs	r6, r6, #4
 800a19a:	2300      	movs	r3, #0
 800a19c:	2502      	movs	r5, #2
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	f040 8085 	bne.w	800a2ae <_dtoa_r+0x4de>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1d2      	bne.n	800a14e <_dtoa_r+0x37e>
 800a1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 808c 	beq.w	800a2c8 <_dtoa_r+0x4f8>
 800a1b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1b4:	4b99      	ldr	r3, [pc, #612]	; (800a41c <_dtoa_r+0x64c>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 fcb6 	bl	8000b2c <__aeabi_dcmplt>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	f000 8081 	beq.w	800a2c8 <_dtoa_r+0x4f8>
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d07d      	beq.n	800a2c8 <_dtoa_r+0x4f8>
 800a1cc:	f1b9 0f00 	cmp.w	r9, #0
 800a1d0:	dd3c      	ble.n	800a24c <_dtoa_r+0x47c>
 800a1d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1d6:	9307      	str	r3, [sp, #28]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4b91      	ldr	r3, [pc, #580]	; (800a420 <_dtoa_r+0x650>)
 800a1dc:	4630      	mov	r0, r6
 800a1de:	4639      	mov	r1, r7
 800a1e0:	f7f6 fa32 	bl	8000648 <__aeabi_dmul>
 800a1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e8:	3501      	adds	r5, #1
 800a1ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a1ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f7f6 f9be 	bl	8000574 <__aeabi_i2d>
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	f7f6 fa24 	bl	8000648 <__aeabi_dmul>
 800a200:	4b88      	ldr	r3, [pc, #544]	; (800a424 <_dtoa_r+0x654>)
 800a202:	2200      	movs	r2, #0
 800a204:	f7f6 f86a 	bl	80002dc <__adddf3>
 800a208:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a214:	2b00      	cmp	r3, #0
 800a216:	d15c      	bne.n	800a2d2 <_dtoa_r+0x502>
 800a218:	4b83      	ldr	r3, [pc, #524]	; (800a428 <_dtoa_r+0x658>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	4630      	mov	r0, r6
 800a21e:	4639      	mov	r1, r7
 800a220:	f7f6 f85a 	bl	80002d8 <__aeabi_dsub>
 800a224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a228:	4606      	mov	r6, r0
 800a22a:	460f      	mov	r7, r1
 800a22c:	f7f6 fc9c 	bl	8000b68 <__aeabi_dcmpgt>
 800a230:	2800      	cmp	r0, #0
 800a232:	f040 8296 	bne.w	800a762 <_dtoa_r+0x992>
 800a236:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a23a:	4630      	mov	r0, r6
 800a23c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a240:	4639      	mov	r1, r7
 800a242:	f7f6 fc73 	bl	8000b2c <__aeabi_dcmplt>
 800a246:	2800      	cmp	r0, #0
 800a248:	f040 8288 	bne.w	800a75c <_dtoa_r+0x98c>
 800a24c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a250:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a256:	2b00      	cmp	r3, #0
 800a258:	f2c0 8158 	blt.w	800a50c <_dtoa_r+0x73c>
 800a25c:	f1ba 0f0e 	cmp.w	sl, #14
 800a260:	f300 8154 	bgt.w	800a50c <_dtoa_r+0x73c>
 800a264:	4b6b      	ldr	r3, [pc, #428]	; (800a414 <_dtoa_r+0x644>)
 800a266:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a26a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a270:	2b00      	cmp	r3, #0
 800a272:	f280 80e3 	bge.w	800a43c <_dtoa_r+0x66c>
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f300 80df 	bgt.w	800a43c <_dtoa_r+0x66c>
 800a27e:	f040 826d 	bne.w	800a75c <_dtoa_r+0x98c>
 800a282:	4b69      	ldr	r3, [pc, #420]	; (800a428 <_dtoa_r+0x658>)
 800a284:	2200      	movs	r2, #0
 800a286:	4640      	mov	r0, r8
 800a288:	4649      	mov	r1, r9
 800a28a:	f7f6 f9dd 	bl	8000648 <__aeabi_dmul>
 800a28e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a292:	f7f6 fc5f 	bl	8000b54 <__aeabi_dcmpge>
 800a296:	9e01      	ldr	r6, [sp, #4]
 800a298:	4637      	mov	r7, r6
 800a29a:	2800      	cmp	r0, #0
 800a29c:	f040 8243 	bne.w	800a726 <_dtoa_r+0x956>
 800a2a0:	9d00      	ldr	r5, [sp, #0]
 800a2a2:	2331      	movs	r3, #49	; 0x31
 800a2a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a2a8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ac:	e23f      	b.n	800a72e <_dtoa_r+0x95e>
 800a2ae:	07f2      	lsls	r2, r6, #31
 800a2b0:	d505      	bpl.n	800a2be <_dtoa_r+0x4ee>
 800a2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b6:	f7f6 f9c7 	bl	8000648 <__aeabi_dmul>
 800a2ba:	3501      	adds	r5, #1
 800a2bc:	2301      	movs	r3, #1
 800a2be:	1076      	asrs	r6, r6, #1
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	e76c      	b.n	800a19e <_dtoa_r+0x3ce>
 800a2c4:	2502      	movs	r5, #2
 800a2c6:	e76f      	b.n	800a1a8 <_dtoa_r+0x3d8>
 800a2c8:	9b01      	ldr	r3, [sp, #4]
 800a2ca:	f8cd a01c 	str.w	sl, [sp, #28]
 800a2ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a2d0:	e78d      	b.n	800a1ee <_dtoa_r+0x41e>
 800a2d2:	9900      	ldr	r1, [sp, #0]
 800a2d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2d8:	4b4e      	ldr	r3, [pc, #312]	; (800a414 <_dtoa_r+0x644>)
 800a2da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2de:	4401      	add	r1, r0
 800a2e0:	9102      	str	r1, [sp, #8]
 800a2e2:	9908      	ldr	r1, [sp, #32]
 800a2e4:	eeb0 8a47 	vmov.f32	s16, s14
 800a2e8:	eef0 8a67 	vmov.f32	s17, s15
 800a2ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	d045      	beq.n	800a384 <_dtoa_r+0x5b4>
 800a2f8:	494c      	ldr	r1, [pc, #304]	; (800a42c <_dtoa_r+0x65c>)
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f7f6 face 	bl	800089c <__aeabi_ddiv>
 800a300:	ec53 2b18 	vmov	r2, r3, d8
 800a304:	f7f5 ffe8 	bl	80002d8 <__aeabi_dsub>
 800a308:	9d00      	ldr	r5, [sp, #0]
 800a30a:	ec41 0b18 	vmov	d8, r0, r1
 800a30e:	4639      	mov	r1, r7
 800a310:	4630      	mov	r0, r6
 800a312:	f7f6 fc49 	bl	8000ba8 <__aeabi_d2iz>
 800a316:	900c      	str	r0, [sp, #48]	; 0x30
 800a318:	f7f6 f92c 	bl	8000574 <__aeabi_i2d>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f5 ffd8 	bl	80002d8 <__aeabi_dsub>
 800a328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a32a:	3330      	adds	r3, #48	; 0x30
 800a32c:	f805 3b01 	strb.w	r3, [r5], #1
 800a330:	ec53 2b18 	vmov	r2, r3, d8
 800a334:	4606      	mov	r6, r0
 800a336:	460f      	mov	r7, r1
 800a338:	f7f6 fbf8 	bl	8000b2c <__aeabi_dcmplt>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d165      	bne.n	800a40c <_dtoa_r+0x63c>
 800a340:	4632      	mov	r2, r6
 800a342:	463b      	mov	r3, r7
 800a344:	4935      	ldr	r1, [pc, #212]	; (800a41c <_dtoa_r+0x64c>)
 800a346:	2000      	movs	r0, #0
 800a348:	f7f5 ffc6 	bl	80002d8 <__aeabi_dsub>
 800a34c:	ec53 2b18 	vmov	r2, r3, d8
 800a350:	f7f6 fbec 	bl	8000b2c <__aeabi_dcmplt>
 800a354:	2800      	cmp	r0, #0
 800a356:	f040 80b9 	bne.w	800a4cc <_dtoa_r+0x6fc>
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	429d      	cmp	r5, r3
 800a35e:	f43f af75 	beq.w	800a24c <_dtoa_r+0x47c>
 800a362:	4b2f      	ldr	r3, [pc, #188]	; (800a420 <_dtoa_r+0x650>)
 800a364:	ec51 0b18 	vmov	r0, r1, d8
 800a368:	2200      	movs	r2, #0
 800a36a:	f7f6 f96d 	bl	8000648 <__aeabi_dmul>
 800a36e:	4b2c      	ldr	r3, [pc, #176]	; (800a420 <_dtoa_r+0x650>)
 800a370:	ec41 0b18 	vmov	d8, r0, r1
 800a374:	2200      	movs	r2, #0
 800a376:	4630      	mov	r0, r6
 800a378:	4639      	mov	r1, r7
 800a37a:	f7f6 f965 	bl	8000648 <__aeabi_dmul>
 800a37e:	4606      	mov	r6, r0
 800a380:	460f      	mov	r7, r1
 800a382:	e7c4      	b.n	800a30e <_dtoa_r+0x53e>
 800a384:	ec51 0b17 	vmov	r0, r1, d7
 800a388:	f7f6 f95e 	bl	8000648 <__aeabi_dmul>
 800a38c:	9b02      	ldr	r3, [sp, #8]
 800a38e:	9d00      	ldr	r5, [sp, #0]
 800a390:	930c      	str	r3, [sp, #48]	; 0x30
 800a392:	ec41 0b18 	vmov	d8, r0, r1
 800a396:	4639      	mov	r1, r7
 800a398:	4630      	mov	r0, r6
 800a39a:	f7f6 fc05 	bl	8000ba8 <__aeabi_d2iz>
 800a39e:	9011      	str	r0, [sp, #68]	; 0x44
 800a3a0:	f7f6 f8e8 	bl	8000574 <__aeabi_i2d>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	4639      	mov	r1, r7
 800a3ac:	f7f5 ff94 	bl	80002d8 <__aeabi_dsub>
 800a3b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3b2:	3330      	adds	r3, #48	; 0x30
 800a3b4:	f805 3b01 	strb.w	r3, [r5], #1
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	4606      	mov	r6, r0
 800a3be:	460f      	mov	r7, r1
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	d134      	bne.n	800a430 <_dtoa_r+0x660>
 800a3c6:	4b19      	ldr	r3, [pc, #100]	; (800a42c <_dtoa_r+0x65c>)
 800a3c8:	ec51 0b18 	vmov	r0, r1, d8
 800a3cc:	f7f5 ff86 	bl	80002dc <__adddf3>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f6 fbc6 	bl	8000b68 <__aeabi_dcmpgt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d175      	bne.n	800a4cc <_dtoa_r+0x6fc>
 800a3e0:	ec53 2b18 	vmov	r2, r3, d8
 800a3e4:	4911      	ldr	r1, [pc, #68]	; (800a42c <_dtoa_r+0x65c>)
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7f5 ff76 	bl	80002d8 <__aeabi_dsub>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f6 fb9a 	bl	8000b2c <__aeabi_dcmplt>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	f43f af27 	beq.w	800a24c <_dtoa_r+0x47c>
 800a3fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a400:	1e6b      	subs	r3, r5, #1
 800a402:	930c      	str	r3, [sp, #48]	; 0x30
 800a404:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a408:	2b30      	cmp	r3, #48	; 0x30
 800a40a:	d0f8      	beq.n	800a3fe <_dtoa_r+0x62e>
 800a40c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a410:	e04a      	b.n	800a4a8 <_dtoa_r+0x6d8>
 800a412:	bf00      	nop
 800a414:	0800c3e8 	.word	0x0800c3e8
 800a418:	0800c3c0 	.word	0x0800c3c0
 800a41c:	3ff00000 	.word	0x3ff00000
 800a420:	40240000 	.word	0x40240000
 800a424:	401c0000 	.word	0x401c0000
 800a428:	40140000 	.word	0x40140000
 800a42c:	3fe00000 	.word	0x3fe00000
 800a430:	4baf      	ldr	r3, [pc, #700]	; (800a6f0 <_dtoa_r+0x920>)
 800a432:	f7f6 f909 	bl	8000648 <__aeabi_dmul>
 800a436:	4606      	mov	r6, r0
 800a438:	460f      	mov	r7, r1
 800a43a:	e7ac      	b.n	800a396 <_dtoa_r+0x5c6>
 800a43c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a440:	9d00      	ldr	r5, [sp, #0]
 800a442:	4642      	mov	r2, r8
 800a444:	464b      	mov	r3, r9
 800a446:	4630      	mov	r0, r6
 800a448:	4639      	mov	r1, r7
 800a44a:	f7f6 fa27 	bl	800089c <__aeabi_ddiv>
 800a44e:	f7f6 fbab 	bl	8000ba8 <__aeabi_d2iz>
 800a452:	9002      	str	r0, [sp, #8]
 800a454:	f7f6 f88e 	bl	8000574 <__aeabi_i2d>
 800a458:	4642      	mov	r2, r8
 800a45a:	464b      	mov	r3, r9
 800a45c:	f7f6 f8f4 	bl	8000648 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4630      	mov	r0, r6
 800a466:	4639      	mov	r1, r7
 800a468:	f7f5 ff36 	bl	80002d8 <__aeabi_dsub>
 800a46c:	9e02      	ldr	r6, [sp, #8]
 800a46e:	9f01      	ldr	r7, [sp, #4]
 800a470:	3630      	adds	r6, #48	; 0x30
 800a472:	f805 6b01 	strb.w	r6, [r5], #1
 800a476:	9e00      	ldr	r6, [sp, #0]
 800a478:	1bae      	subs	r6, r5, r6
 800a47a:	42b7      	cmp	r7, r6
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	d137      	bne.n	800a4f2 <_dtoa_r+0x722>
 800a482:	f7f5 ff2b 	bl	80002dc <__adddf3>
 800a486:	4642      	mov	r2, r8
 800a488:	464b      	mov	r3, r9
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	f7f6 fb6b 	bl	8000b68 <__aeabi_dcmpgt>
 800a492:	b9c8      	cbnz	r0, 800a4c8 <_dtoa_r+0x6f8>
 800a494:	4642      	mov	r2, r8
 800a496:	464b      	mov	r3, r9
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f6 fb3c 	bl	8000b18 <__aeabi_dcmpeq>
 800a4a0:	b110      	cbz	r0, 800a4a8 <_dtoa_r+0x6d8>
 800a4a2:	9b02      	ldr	r3, [sp, #8]
 800a4a4:	07d9      	lsls	r1, r3, #31
 800a4a6:	d40f      	bmi.n	800a4c8 <_dtoa_r+0x6f8>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	f000 fcfa 	bl	800aea4 <_Bfree>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	702b      	strb	r3, [r5, #0]
 800a4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4b6:	f10a 0001 	add.w	r0, sl, #1
 800a4ba:	6018      	str	r0, [r3, #0]
 800a4bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f43f acd8 	beq.w	8009e74 <_dtoa_r+0xa4>
 800a4c4:	601d      	str	r5, [r3, #0]
 800a4c6:	e4d5      	b.n	8009e74 <_dtoa_r+0xa4>
 800a4c8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	461d      	mov	r5, r3
 800a4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4d4:	2a39      	cmp	r2, #57	; 0x39
 800a4d6:	d108      	bne.n	800a4ea <_dtoa_r+0x71a>
 800a4d8:	9a00      	ldr	r2, [sp, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d1f7      	bne.n	800a4ce <_dtoa_r+0x6fe>
 800a4de:	9a07      	ldr	r2, [sp, #28]
 800a4e0:	9900      	ldr	r1, [sp, #0]
 800a4e2:	3201      	adds	r2, #1
 800a4e4:	9207      	str	r2, [sp, #28]
 800a4e6:	2230      	movs	r2, #48	; 0x30
 800a4e8:	700a      	strb	r2, [r1, #0]
 800a4ea:	781a      	ldrb	r2, [r3, #0]
 800a4ec:	3201      	adds	r2, #1
 800a4ee:	701a      	strb	r2, [r3, #0]
 800a4f0:	e78c      	b.n	800a40c <_dtoa_r+0x63c>
 800a4f2:	4b7f      	ldr	r3, [pc, #508]	; (800a6f0 <_dtoa_r+0x920>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f7f6 f8a7 	bl	8000648 <__aeabi_dmul>
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	f7f6 fb09 	bl	8000b18 <__aeabi_dcmpeq>
 800a506:	2800      	cmp	r0, #0
 800a508:	d09b      	beq.n	800a442 <_dtoa_r+0x672>
 800a50a:	e7cd      	b.n	800a4a8 <_dtoa_r+0x6d8>
 800a50c:	9a08      	ldr	r2, [sp, #32]
 800a50e:	2a00      	cmp	r2, #0
 800a510:	f000 80c4 	beq.w	800a69c <_dtoa_r+0x8cc>
 800a514:	9a05      	ldr	r2, [sp, #20]
 800a516:	2a01      	cmp	r2, #1
 800a518:	f300 80a8 	bgt.w	800a66c <_dtoa_r+0x89c>
 800a51c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a51e:	2a00      	cmp	r2, #0
 800a520:	f000 80a0 	beq.w	800a664 <_dtoa_r+0x894>
 800a524:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a528:	9e06      	ldr	r6, [sp, #24]
 800a52a:	4645      	mov	r5, r8
 800a52c:	9a04      	ldr	r2, [sp, #16]
 800a52e:	2101      	movs	r1, #1
 800a530:	441a      	add	r2, r3
 800a532:	4620      	mov	r0, r4
 800a534:	4498      	add	r8, r3
 800a536:	9204      	str	r2, [sp, #16]
 800a538:	f000 fd70 	bl	800b01c <__i2b>
 800a53c:	4607      	mov	r7, r0
 800a53e:	2d00      	cmp	r5, #0
 800a540:	dd0b      	ble.n	800a55a <_dtoa_r+0x78a>
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	dd08      	ble.n	800a55a <_dtoa_r+0x78a>
 800a548:	42ab      	cmp	r3, r5
 800a54a:	9a04      	ldr	r2, [sp, #16]
 800a54c:	bfa8      	it	ge
 800a54e:	462b      	movge	r3, r5
 800a550:	eba8 0803 	sub.w	r8, r8, r3
 800a554:	1aed      	subs	r5, r5, r3
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	9b06      	ldr	r3, [sp, #24]
 800a55c:	b1fb      	cbz	r3, 800a59e <_dtoa_r+0x7ce>
 800a55e:	9b08      	ldr	r3, [sp, #32]
 800a560:	2b00      	cmp	r3, #0
 800a562:	f000 809f 	beq.w	800a6a4 <_dtoa_r+0x8d4>
 800a566:	2e00      	cmp	r6, #0
 800a568:	dd11      	ble.n	800a58e <_dtoa_r+0x7be>
 800a56a:	4639      	mov	r1, r7
 800a56c:	4632      	mov	r2, r6
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 fe10 	bl	800b194 <__pow5mult>
 800a574:	465a      	mov	r2, fp
 800a576:	4601      	mov	r1, r0
 800a578:	4607      	mov	r7, r0
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 fd64 	bl	800b048 <__multiply>
 800a580:	4659      	mov	r1, fp
 800a582:	9007      	str	r0, [sp, #28]
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fc8d 	bl	800aea4 <_Bfree>
 800a58a:	9b07      	ldr	r3, [sp, #28]
 800a58c:	469b      	mov	fp, r3
 800a58e:	9b06      	ldr	r3, [sp, #24]
 800a590:	1b9a      	subs	r2, r3, r6
 800a592:	d004      	beq.n	800a59e <_dtoa_r+0x7ce>
 800a594:	4659      	mov	r1, fp
 800a596:	4620      	mov	r0, r4
 800a598:	f000 fdfc 	bl	800b194 <__pow5mult>
 800a59c:	4683      	mov	fp, r0
 800a59e:	2101      	movs	r1, #1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f000 fd3b 	bl	800b01c <__i2b>
 800a5a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	dd7c      	ble.n	800a6a8 <_dtoa_r+0x8d8>
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 fdee 	bl	800b194 <__pow5mult>
 800a5b8:	9b05      	ldr	r3, [sp, #20]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	4606      	mov	r6, r0
 800a5be:	dd76      	ble.n	800a6ae <_dtoa_r+0x8de>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9306      	str	r3, [sp, #24]
 800a5c4:	6933      	ldr	r3, [r6, #16]
 800a5c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5ca:	6918      	ldr	r0, [r3, #16]
 800a5cc:	f000 fcd6 	bl	800af7c <__hi0bits>
 800a5d0:	f1c0 0020 	rsb	r0, r0, #32
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	4418      	add	r0, r3
 800a5d8:	f010 001f 	ands.w	r0, r0, #31
 800a5dc:	f000 8086 	beq.w	800a6ec <_dtoa_r+0x91c>
 800a5e0:	f1c0 0320 	rsb	r3, r0, #32
 800a5e4:	2b04      	cmp	r3, #4
 800a5e6:	dd7f      	ble.n	800a6e8 <_dtoa_r+0x918>
 800a5e8:	f1c0 001c 	rsb	r0, r0, #28
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	4403      	add	r3, r0
 800a5f0:	4480      	add	r8, r0
 800a5f2:	4405      	add	r5, r0
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	f1b8 0f00 	cmp.w	r8, #0
 800a5fa:	dd05      	ble.n	800a608 <_dtoa_r+0x838>
 800a5fc:	4659      	mov	r1, fp
 800a5fe:	4642      	mov	r2, r8
 800a600:	4620      	mov	r0, r4
 800a602:	f000 fe21 	bl	800b248 <__lshift>
 800a606:	4683      	mov	fp, r0
 800a608:	9b04      	ldr	r3, [sp, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dd05      	ble.n	800a61a <_dtoa_r+0x84a>
 800a60e:	4631      	mov	r1, r6
 800a610:	461a      	mov	r2, r3
 800a612:	4620      	mov	r0, r4
 800a614:	f000 fe18 	bl	800b248 <__lshift>
 800a618:	4606      	mov	r6, r0
 800a61a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d069      	beq.n	800a6f4 <_dtoa_r+0x924>
 800a620:	4631      	mov	r1, r6
 800a622:	4658      	mov	r0, fp
 800a624:	f000 fe7c 	bl	800b320 <__mcmp>
 800a628:	2800      	cmp	r0, #0
 800a62a:	da63      	bge.n	800a6f4 <_dtoa_r+0x924>
 800a62c:	2300      	movs	r3, #0
 800a62e:	4659      	mov	r1, fp
 800a630:	220a      	movs	r2, #10
 800a632:	4620      	mov	r0, r4
 800a634:	f000 fc58 	bl	800aee8 <__multadd>
 800a638:	9b08      	ldr	r3, [sp, #32]
 800a63a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a63e:	4683      	mov	fp, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 818f 	beq.w	800a964 <_dtoa_r+0xb94>
 800a646:	4639      	mov	r1, r7
 800a648:	2300      	movs	r3, #0
 800a64a:	220a      	movs	r2, #10
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 fc4b 	bl	800aee8 <__multadd>
 800a652:	f1b9 0f00 	cmp.w	r9, #0
 800a656:	4607      	mov	r7, r0
 800a658:	f300 808e 	bgt.w	800a778 <_dtoa_r+0x9a8>
 800a65c:	9b05      	ldr	r3, [sp, #20]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	dc50      	bgt.n	800a704 <_dtoa_r+0x934>
 800a662:	e089      	b.n	800a778 <_dtoa_r+0x9a8>
 800a664:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a666:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a66a:	e75d      	b.n	800a528 <_dtoa_r+0x758>
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	1e5e      	subs	r6, r3, #1
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	42b3      	cmp	r3, r6
 800a674:	bfbf      	itttt	lt
 800a676:	9b06      	ldrlt	r3, [sp, #24]
 800a678:	9606      	strlt	r6, [sp, #24]
 800a67a:	1af2      	sublt	r2, r6, r3
 800a67c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a67e:	bfb6      	itet	lt
 800a680:	189b      	addlt	r3, r3, r2
 800a682:	1b9e      	subge	r6, r3, r6
 800a684:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a686:	9b01      	ldr	r3, [sp, #4]
 800a688:	bfb8      	it	lt
 800a68a:	2600      	movlt	r6, #0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfb5      	itete	lt
 800a690:	eba8 0503 	sublt.w	r5, r8, r3
 800a694:	9b01      	ldrge	r3, [sp, #4]
 800a696:	2300      	movlt	r3, #0
 800a698:	4645      	movge	r5, r8
 800a69a:	e747      	b.n	800a52c <_dtoa_r+0x75c>
 800a69c:	9e06      	ldr	r6, [sp, #24]
 800a69e:	9f08      	ldr	r7, [sp, #32]
 800a6a0:	4645      	mov	r5, r8
 800a6a2:	e74c      	b.n	800a53e <_dtoa_r+0x76e>
 800a6a4:	9a06      	ldr	r2, [sp, #24]
 800a6a6:	e775      	b.n	800a594 <_dtoa_r+0x7c4>
 800a6a8:	9b05      	ldr	r3, [sp, #20]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	dc18      	bgt.n	800a6e0 <_dtoa_r+0x910>
 800a6ae:	9b02      	ldr	r3, [sp, #8]
 800a6b0:	b9b3      	cbnz	r3, 800a6e0 <_dtoa_r+0x910>
 800a6b2:	9b03      	ldr	r3, [sp, #12]
 800a6b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6b8:	b9a3      	cbnz	r3, 800a6e4 <_dtoa_r+0x914>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6c0:	0d1b      	lsrs	r3, r3, #20
 800a6c2:	051b      	lsls	r3, r3, #20
 800a6c4:	b12b      	cbz	r3, 800a6d2 <_dtoa_r+0x902>
 800a6c6:	9b04      	ldr	r3, [sp, #16]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	f108 0801 	add.w	r8, r8, #1
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	9306      	str	r3, [sp, #24]
 800a6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f47f af74 	bne.w	800a5c4 <_dtoa_r+0x7f4>
 800a6dc:	2001      	movs	r0, #1
 800a6de:	e779      	b.n	800a5d4 <_dtoa_r+0x804>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e7f6      	b.n	800a6d2 <_dtoa_r+0x902>
 800a6e4:	9b02      	ldr	r3, [sp, #8]
 800a6e6:	e7f4      	b.n	800a6d2 <_dtoa_r+0x902>
 800a6e8:	d085      	beq.n	800a5f6 <_dtoa_r+0x826>
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	301c      	adds	r0, #28
 800a6ee:	e77d      	b.n	800a5ec <_dtoa_r+0x81c>
 800a6f0:	40240000 	.word	0x40240000
 800a6f4:	9b01      	ldr	r3, [sp, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	dc38      	bgt.n	800a76c <_dtoa_r+0x99c>
 800a6fa:	9b05      	ldr	r3, [sp, #20]
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	dd35      	ble.n	800a76c <_dtoa_r+0x99c>
 800a700:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a704:	f1b9 0f00 	cmp.w	r9, #0
 800a708:	d10d      	bne.n	800a726 <_dtoa_r+0x956>
 800a70a:	4631      	mov	r1, r6
 800a70c:	464b      	mov	r3, r9
 800a70e:	2205      	movs	r2, #5
 800a710:	4620      	mov	r0, r4
 800a712:	f000 fbe9 	bl	800aee8 <__multadd>
 800a716:	4601      	mov	r1, r0
 800a718:	4606      	mov	r6, r0
 800a71a:	4658      	mov	r0, fp
 800a71c:	f000 fe00 	bl	800b320 <__mcmp>
 800a720:	2800      	cmp	r0, #0
 800a722:	f73f adbd 	bgt.w	800a2a0 <_dtoa_r+0x4d0>
 800a726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a728:	9d00      	ldr	r5, [sp, #0]
 800a72a:	ea6f 0a03 	mvn.w	sl, r3
 800a72e:	f04f 0800 	mov.w	r8, #0
 800a732:	4631      	mov	r1, r6
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fbb5 	bl	800aea4 <_Bfree>
 800a73a:	2f00      	cmp	r7, #0
 800a73c:	f43f aeb4 	beq.w	800a4a8 <_dtoa_r+0x6d8>
 800a740:	f1b8 0f00 	cmp.w	r8, #0
 800a744:	d005      	beq.n	800a752 <_dtoa_r+0x982>
 800a746:	45b8      	cmp	r8, r7
 800a748:	d003      	beq.n	800a752 <_dtoa_r+0x982>
 800a74a:	4641      	mov	r1, r8
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 fba9 	bl	800aea4 <_Bfree>
 800a752:	4639      	mov	r1, r7
 800a754:	4620      	mov	r0, r4
 800a756:	f000 fba5 	bl	800aea4 <_Bfree>
 800a75a:	e6a5      	b.n	800a4a8 <_dtoa_r+0x6d8>
 800a75c:	2600      	movs	r6, #0
 800a75e:	4637      	mov	r7, r6
 800a760:	e7e1      	b.n	800a726 <_dtoa_r+0x956>
 800a762:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a764:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a768:	4637      	mov	r7, r6
 800a76a:	e599      	b.n	800a2a0 <_dtoa_r+0x4d0>
 800a76c:	9b08      	ldr	r3, [sp, #32]
 800a76e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 80fd 	beq.w	800a972 <_dtoa_r+0xba2>
 800a778:	2d00      	cmp	r5, #0
 800a77a:	dd05      	ble.n	800a788 <_dtoa_r+0x9b8>
 800a77c:	4639      	mov	r1, r7
 800a77e:	462a      	mov	r2, r5
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fd61 	bl	800b248 <__lshift>
 800a786:	4607      	mov	r7, r0
 800a788:	9b06      	ldr	r3, [sp, #24]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d05c      	beq.n	800a848 <_dtoa_r+0xa78>
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	4620      	mov	r0, r4
 800a792:	f000 fb47 	bl	800ae24 <_Balloc>
 800a796:	4605      	mov	r5, r0
 800a798:	b928      	cbnz	r0, 800a7a6 <_dtoa_r+0x9d6>
 800a79a:	4b80      	ldr	r3, [pc, #512]	; (800a99c <_dtoa_r+0xbcc>)
 800a79c:	4602      	mov	r2, r0
 800a79e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7a2:	f7ff bb2e 	b.w	8009e02 <_dtoa_r+0x32>
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	3202      	adds	r2, #2
 800a7aa:	0092      	lsls	r2, r2, #2
 800a7ac:	f107 010c 	add.w	r1, r7, #12
 800a7b0:	300c      	adds	r0, #12
 800a7b2:	f7fe fd27 	bl	8009204 <memcpy>
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fd44 	bl	800b248 <__lshift>
 800a7c0:	9b00      	ldr	r3, [sp, #0]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	444b      	add	r3, r9
 800a7ca:	9307      	str	r3, [sp, #28]
 800a7cc:	9b02      	ldr	r3, [sp, #8]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	46b8      	mov	r8, r7
 800a7d4:	9306      	str	r3, [sp, #24]
 800a7d6:	4607      	mov	r7, r0
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	4631      	mov	r1, r6
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4658      	mov	r0, fp
 800a7e0:	9302      	str	r3, [sp, #8]
 800a7e2:	f7ff fa67 	bl	8009cb4 <quorem>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	3330      	adds	r3, #48	; 0x30
 800a7ea:	9004      	str	r0, [sp, #16]
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	4658      	mov	r0, fp
 800a7f0:	9308      	str	r3, [sp, #32]
 800a7f2:	f000 fd95 	bl	800b320 <__mcmp>
 800a7f6:	463a      	mov	r2, r7
 800a7f8:	4681      	mov	r9, r0
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fdab 	bl	800b358 <__mdiff>
 800a802:	68c2      	ldr	r2, [r0, #12]
 800a804:	9b08      	ldr	r3, [sp, #32]
 800a806:	4605      	mov	r5, r0
 800a808:	bb02      	cbnz	r2, 800a84c <_dtoa_r+0xa7c>
 800a80a:	4601      	mov	r1, r0
 800a80c:	4658      	mov	r0, fp
 800a80e:	f000 fd87 	bl	800b320 <__mcmp>
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	4602      	mov	r2, r0
 800a816:	4629      	mov	r1, r5
 800a818:	4620      	mov	r0, r4
 800a81a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a81e:	f000 fb41 	bl	800aea4 <_Bfree>
 800a822:	9b05      	ldr	r3, [sp, #20]
 800a824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a826:	9d01      	ldr	r5, [sp, #4]
 800a828:	ea43 0102 	orr.w	r1, r3, r2
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	430b      	orrs	r3, r1
 800a830:	9b08      	ldr	r3, [sp, #32]
 800a832:	d10d      	bne.n	800a850 <_dtoa_r+0xa80>
 800a834:	2b39      	cmp	r3, #57	; 0x39
 800a836:	d029      	beq.n	800a88c <_dtoa_r+0xabc>
 800a838:	f1b9 0f00 	cmp.w	r9, #0
 800a83c:	dd01      	ble.n	800a842 <_dtoa_r+0xa72>
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	3331      	adds	r3, #49	; 0x31
 800a842:	9a02      	ldr	r2, [sp, #8]
 800a844:	7013      	strb	r3, [r2, #0]
 800a846:	e774      	b.n	800a732 <_dtoa_r+0x962>
 800a848:	4638      	mov	r0, r7
 800a84a:	e7b9      	b.n	800a7c0 <_dtoa_r+0x9f0>
 800a84c:	2201      	movs	r2, #1
 800a84e:	e7e2      	b.n	800a816 <_dtoa_r+0xa46>
 800a850:	f1b9 0f00 	cmp.w	r9, #0
 800a854:	db06      	blt.n	800a864 <_dtoa_r+0xa94>
 800a856:	9905      	ldr	r1, [sp, #20]
 800a858:	ea41 0909 	orr.w	r9, r1, r9
 800a85c:	9906      	ldr	r1, [sp, #24]
 800a85e:	ea59 0101 	orrs.w	r1, r9, r1
 800a862:	d120      	bne.n	800a8a6 <_dtoa_r+0xad6>
 800a864:	2a00      	cmp	r2, #0
 800a866:	ddec      	ble.n	800a842 <_dtoa_r+0xa72>
 800a868:	4659      	mov	r1, fp
 800a86a:	2201      	movs	r2, #1
 800a86c:	4620      	mov	r0, r4
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	f000 fcea 	bl	800b248 <__lshift>
 800a874:	4631      	mov	r1, r6
 800a876:	4683      	mov	fp, r0
 800a878:	f000 fd52 	bl	800b320 <__mcmp>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	dc02      	bgt.n	800a888 <_dtoa_r+0xab8>
 800a882:	d1de      	bne.n	800a842 <_dtoa_r+0xa72>
 800a884:	07da      	lsls	r2, r3, #31
 800a886:	d5dc      	bpl.n	800a842 <_dtoa_r+0xa72>
 800a888:	2b39      	cmp	r3, #57	; 0x39
 800a88a:	d1d8      	bne.n	800a83e <_dtoa_r+0xa6e>
 800a88c:	9a02      	ldr	r2, [sp, #8]
 800a88e:	2339      	movs	r3, #57	; 0x39
 800a890:	7013      	strb	r3, [r2, #0]
 800a892:	462b      	mov	r3, r5
 800a894:	461d      	mov	r5, r3
 800a896:	3b01      	subs	r3, #1
 800a898:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a89c:	2a39      	cmp	r2, #57	; 0x39
 800a89e:	d050      	beq.n	800a942 <_dtoa_r+0xb72>
 800a8a0:	3201      	adds	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
 800a8a4:	e745      	b.n	800a732 <_dtoa_r+0x962>
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	dd03      	ble.n	800a8b2 <_dtoa_r+0xae2>
 800a8aa:	2b39      	cmp	r3, #57	; 0x39
 800a8ac:	d0ee      	beq.n	800a88c <_dtoa_r+0xabc>
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	e7c7      	b.n	800a842 <_dtoa_r+0xa72>
 800a8b2:	9a01      	ldr	r2, [sp, #4]
 800a8b4:	9907      	ldr	r1, [sp, #28]
 800a8b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a8ba:	428a      	cmp	r2, r1
 800a8bc:	d02a      	beq.n	800a914 <_dtoa_r+0xb44>
 800a8be:	4659      	mov	r1, fp
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fb0f 	bl	800aee8 <__multadd>
 800a8ca:	45b8      	cmp	r8, r7
 800a8cc:	4683      	mov	fp, r0
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	f04f 020a 	mov.w	r2, #10
 800a8d6:	4641      	mov	r1, r8
 800a8d8:	4620      	mov	r0, r4
 800a8da:	d107      	bne.n	800a8ec <_dtoa_r+0xb1c>
 800a8dc:	f000 fb04 	bl	800aee8 <__multadd>
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	9b01      	ldr	r3, [sp, #4]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	e775      	b.n	800a7d8 <_dtoa_r+0xa08>
 800a8ec:	f000 fafc 	bl	800aee8 <__multadd>
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	220a      	movs	r2, #10
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 faf5 	bl	800aee8 <__multadd>
 800a8fe:	4607      	mov	r7, r0
 800a900:	e7f0      	b.n	800a8e4 <_dtoa_r+0xb14>
 800a902:	f1b9 0f00 	cmp.w	r9, #0
 800a906:	9a00      	ldr	r2, [sp, #0]
 800a908:	bfcc      	ite	gt
 800a90a:	464d      	movgt	r5, r9
 800a90c:	2501      	movle	r5, #1
 800a90e:	4415      	add	r5, r2
 800a910:	f04f 0800 	mov.w	r8, #0
 800a914:	4659      	mov	r1, fp
 800a916:	2201      	movs	r2, #1
 800a918:	4620      	mov	r0, r4
 800a91a:	9301      	str	r3, [sp, #4]
 800a91c:	f000 fc94 	bl	800b248 <__lshift>
 800a920:	4631      	mov	r1, r6
 800a922:	4683      	mov	fp, r0
 800a924:	f000 fcfc 	bl	800b320 <__mcmp>
 800a928:	2800      	cmp	r0, #0
 800a92a:	dcb2      	bgt.n	800a892 <_dtoa_r+0xac2>
 800a92c:	d102      	bne.n	800a934 <_dtoa_r+0xb64>
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	07db      	lsls	r3, r3, #31
 800a932:	d4ae      	bmi.n	800a892 <_dtoa_r+0xac2>
 800a934:	462b      	mov	r3, r5
 800a936:	461d      	mov	r5, r3
 800a938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93c:	2a30      	cmp	r2, #48	; 0x30
 800a93e:	d0fa      	beq.n	800a936 <_dtoa_r+0xb66>
 800a940:	e6f7      	b.n	800a732 <_dtoa_r+0x962>
 800a942:	9a00      	ldr	r2, [sp, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d1a5      	bne.n	800a894 <_dtoa_r+0xac4>
 800a948:	f10a 0a01 	add.w	sl, sl, #1
 800a94c:	2331      	movs	r3, #49	; 0x31
 800a94e:	e779      	b.n	800a844 <_dtoa_r+0xa74>
 800a950:	4b13      	ldr	r3, [pc, #76]	; (800a9a0 <_dtoa_r+0xbd0>)
 800a952:	f7ff baaf 	b.w	8009eb4 <_dtoa_r+0xe4>
 800a956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f47f aa86 	bne.w	8009e6a <_dtoa_r+0x9a>
 800a95e:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <_dtoa_r+0xbd4>)
 800a960:	f7ff baa8 	b.w	8009eb4 <_dtoa_r+0xe4>
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	dc03      	bgt.n	800a972 <_dtoa_r+0xba2>
 800a96a:	9b05      	ldr	r3, [sp, #20]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	f73f aec9 	bgt.w	800a704 <_dtoa_r+0x934>
 800a972:	9d00      	ldr	r5, [sp, #0]
 800a974:	4631      	mov	r1, r6
 800a976:	4658      	mov	r0, fp
 800a978:	f7ff f99c 	bl	8009cb4 <quorem>
 800a97c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a980:	f805 3b01 	strb.w	r3, [r5], #1
 800a984:	9a00      	ldr	r2, [sp, #0]
 800a986:	1aaa      	subs	r2, r5, r2
 800a988:	4591      	cmp	r9, r2
 800a98a:	ddba      	ble.n	800a902 <_dtoa_r+0xb32>
 800a98c:	4659      	mov	r1, fp
 800a98e:	2300      	movs	r3, #0
 800a990:	220a      	movs	r2, #10
 800a992:	4620      	mov	r0, r4
 800a994:	f000 faa8 	bl	800aee8 <__multadd>
 800a998:	4683      	mov	fp, r0
 800a99a:	e7eb      	b.n	800a974 <_dtoa_r+0xba4>
 800a99c:	0800c2e0 	.word	0x0800c2e0
 800a9a0:	0800c138 	.word	0x0800c138
 800a9a4:	0800c25d 	.word	0x0800c25d

0800a9a8 <__sflush_r>:
 800a9a8:	898a      	ldrh	r2, [r1, #12]
 800a9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	0710      	lsls	r0, r2, #28
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	d458      	bmi.n	800aa68 <__sflush_r+0xc0>
 800a9b6:	684b      	ldr	r3, [r1, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	dc05      	bgt.n	800a9c8 <__sflush_r+0x20>
 800a9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dc02      	bgt.n	800a9c8 <__sflush_r+0x20>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ca:	2e00      	cmp	r6, #0
 800a9cc:	d0f9      	beq.n	800a9c2 <__sflush_r+0x1a>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9d4:	682f      	ldr	r7, [r5, #0]
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	d032      	beq.n	800aa40 <__sflush_r+0x98>
 800a9da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	075a      	lsls	r2, r3, #29
 800a9e0:	d505      	bpl.n	800a9ee <__sflush_r+0x46>
 800a9e2:	6863      	ldr	r3, [r4, #4]
 800a9e4:	1ac0      	subs	r0, r0, r3
 800a9e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9e8:	b10b      	cbz	r3, 800a9ee <__sflush_r+0x46>
 800a9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9f4:	6a21      	ldr	r1, [r4, #32]
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b0      	blx	r6
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	89a3      	ldrh	r3, [r4, #12]
 800a9fe:	d106      	bne.n	800aa0e <__sflush_r+0x66>
 800aa00:	6829      	ldr	r1, [r5, #0]
 800aa02:	291d      	cmp	r1, #29
 800aa04:	d82c      	bhi.n	800aa60 <__sflush_r+0xb8>
 800aa06:	4a2a      	ldr	r2, [pc, #168]	; (800aab0 <__sflush_r+0x108>)
 800aa08:	40ca      	lsrs	r2, r1
 800aa0a:	07d6      	lsls	r6, r2, #31
 800aa0c:	d528      	bpl.n	800aa60 <__sflush_r+0xb8>
 800aa0e:	2200      	movs	r2, #0
 800aa10:	6062      	str	r2, [r4, #4]
 800aa12:	04d9      	lsls	r1, r3, #19
 800aa14:	6922      	ldr	r2, [r4, #16]
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	d504      	bpl.n	800aa24 <__sflush_r+0x7c>
 800aa1a:	1c42      	adds	r2, r0, #1
 800aa1c:	d101      	bne.n	800aa22 <__sflush_r+0x7a>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	b903      	cbnz	r3, 800aa24 <__sflush_r+0x7c>
 800aa22:	6560      	str	r0, [r4, #84]	; 0x54
 800aa24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa26:	602f      	str	r7, [r5, #0]
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	d0ca      	beq.n	800a9c2 <__sflush_r+0x1a>
 800aa2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa30:	4299      	cmp	r1, r3
 800aa32:	d002      	beq.n	800aa3a <__sflush_r+0x92>
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 fd83 	bl	800b540 <_free_r>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	6360      	str	r0, [r4, #52]	; 0x34
 800aa3e:	e7c1      	b.n	800a9c4 <__sflush_r+0x1c>
 800aa40:	6a21      	ldr	r1, [r4, #32]
 800aa42:	2301      	movs	r3, #1
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b0      	blx	r6
 800aa48:	1c41      	adds	r1, r0, #1
 800aa4a:	d1c7      	bne.n	800a9dc <__sflush_r+0x34>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0c4      	beq.n	800a9dc <__sflush_r+0x34>
 800aa52:	2b1d      	cmp	r3, #29
 800aa54:	d001      	beq.n	800aa5a <__sflush_r+0xb2>
 800aa56:	2b16      	cmp	r3, #22
 800aa58:	d101      	bne.n	800aa5e <__sflush_r+0xb6>
 800aa5a:	602f      	str	r7, [r5, #0]
 800aa5c:	e7b1      	b.n	800a9c2 <__sflush_r+0x1a>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	e7ad      	b.n	800a9c4 <__sflush_r+0x1c>
 800aa68:	690f      	ldr	r7, [r1, #16]
 800aa6a:	2f00      	cmp	r7, #0
 800aa6c:	d0a9      	beq.n	800a9c2 <__sflush_r+0x1a>
 800aa6e:	0793      	lsls	r3, r2, #30
 800aa70:	680e      	ldr	r6, [r1, #0]
 800aa72:	bf08      	it	eq
 800aa74:	694b      	ldreq	r3, [r1, #20]
 800aa76:	600f      	str	r7, [r1, #0]
 800aa78:	bf18      	it	ne
 800aa7a:	2300      	movne	r3, #0
 800aa7c:	eba6 0807 	sub.w	r8, r6, r7
 800aa80:	608b      	str	r3, [r1, #8]
 800aa82:	f1b8 0f00 	cmp.w	r8, #0
 800aa86:	dd9c      	ble.n	800a9c2 <__sflush_r+0x1a>
 800aa88:	6a21      	ldr	r1, [r4, #32]
 800aa8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa8c:	4643      	mov	r3, r8
 800aa8e:	463a      	mov	r2, r7
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b0      	blx	r6
 800aa94:	2800      	cmp	r0, #0
 800aa96:	dc06      	bgt.n	800aaa6 <__sflush_r+0xfe>
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa9e:	81a3      	strh	r3, [r4, #12]
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e78e      	b.n	800a9c4 <__sflush_r+0x1c>
 800aaa6:	4407      	add	r7, r0
 800aaa8:	eba8 0800 	sub.w	r8, r8, r0
 800aaac:	e7e9      	b.n	800aa82 <__sflush_r+0xda>
 800aaae:	bf00      	nop
 800aab0:	20400001 	.word	0x20400001

0800aab4 <_fflush_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	690b      	ldr	r3, [r1, #16]
 800aab8:	4605      	mov	r5, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	b913      	cbnz	r3, 800aac4 <_fflush_r+0x10>
 800aabe:	2500      	movs	r5, #0
 800aac0:	4628      	mov	r0, r5
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	b118      	cbz	r0, 800aace <_fflush_r+0x1a>
 800aac6:	6983      	ldr	r3, [r0, #24]
 800aac8:	b90b      	cbnz	r3, 800aace <_fflush_r+0x1a>
 800aaca:	f000 f887 	bl	800abdc <__sinit>
 800aace:	4b14      	ldr	r3, [pc, #80]	; (800ab20 <_fflush_r+0x6c>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	d11b      	bne.n	800ab0c <_fflush_r+0x58>
 800aad4:	686c      	ldr	r4, [r5, #4]
 800aad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0ef      	beq.n	800aabe <_fflush_r+0xa>
 800aade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aae0:	07d0      	lsls	r0, r2, #31
 800aae2:	d404      	bmi.n	800aaee <_fflush_r+0x3a>
 800aae4:	0599      	lsls	r1, r3, #22
 800aae6:	d402      	bmi.n	800aaee <_fflush_r+0x3a>
 800aae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaea:	f000 f91a 	bl	800ad22 <__retarget_lock_acquire_recursive>
 800aaee:	4628      	mov	r0, r5
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	f7ff ff59 	bl	800a9a8 <__sflush_r>
 800aaf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaf8:	07da      	lsls	r2, r3, #31
 800aafa:	4605      	mov	r5, r0
 800aafc:	d4e0      	bmi.n	800aac0 <_fflush_r+0xc>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	059b      	lsls	r3, r3, #22
 800ab02:	d4dd      	bmi.n	800aac0 <_fflush_r+0xc>
 800ab04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab06:	f000 f90d 	bl	800ad24 <__retarget_lock_release_recursive>
 800ab0a:	e7d9      	b.n	800aac0 <_fflush_r+0xc>
 800ab0c:	4b05      	ldr	r3, [pc, #20]	; (800ab24 <_fflush_r+0x70>)
 800ab0e:	429c      	cmp	r4, r3
 800ab10:	d101      	bne.n	800ab16 <_fflush_r+0x62>
 800ab12:	68ac      	ldr	r4, [r5, #8]
 800ab14:	e7df      	b.n	800aad6 <_fflush_r+0x22>
 800ab16:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <_fflush_r+0x74>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	bf08      	it	eq
 800ab1c:	68ec      	ldreq	r4, [r5, #12]
 800ab1e:	e7da      	b.n	800aad6 <_fflush_r+0x22>
 800ab20:	0800c314 	.word	0x0800c314
 800ab24:	0800c334 	.word	0x0800c334
 800ab28:	0800c2f4 	.word	0x0800c2f4

0800ab2c <std>:
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	e9c0 3300 	strd	r3, r3, [r0]
 800ab36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab3a:	6083      	str	r3, [r0, #8]
 800ab3c:	8181      	strh	r1, [r0, #12]
 800ab3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab40:	81c2      	strh	r2, [r0, #14]
 800ab42:	6183      	str	r3, [r0, #24]
 800ab44:	4619      	mov	r1, r3
 800ab46:	2208      	movs	r2, #8
 800ab48:	305c      	adds	r0, #92	; 0x5c
 800ab4a:	f7fe fb69 	bl	8009220 <memset>
 800ab4e:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <std+0x38>)
 800ab50:	6263      	str	r3, [r4, #36]	; 0x24
 800ab52:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <std+0x3c>)
 800ab54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <std+0x40>)
 800ab58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <std+0x44>)
 800ab5c:	6224      	str	r4, [r4, #32]
 800ab5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab60:	bd10      	pop	{r4, pc}
 800ab62:	bf00      	nop
 800ab64:	0800b969 	.word	0x0800b969
 800ab68:	0800b98b 	.word	0x0800b98b
 800ab6c:	0800b9c3 	.word	0x0800b9c3
 800ab70:	0800b9e7 	.word	0x0800b9e7

0800ab74 <_cleanup_r>:
 800ab74:	4901      	ldr	r1, [pc, #4]	; (800ab7c <_cleanup_r+0x8>)
 800ab76:	f000 b8af 	b.w	800acd8 <_fwalk_reent>
 800ab7a:	bf00      	nop
 800ab7c:	0800aab5 	.word	0x0800aab5

0800ab80 <__sfmoreglue>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	1e4a      	subs	r2, r1, #1
 800ab84:	2568      	movs	r5, #104	; 0x68
 800ab86:	4355      	muls	r5, r2
 800ab88:	460e      	mov	r6, r1
 800ab8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab8e:	f000 fd27 	bl	800b5e0 <_malloc_r>
 800ab92:	4604      	mov	r4, r0
 800ab94:	b140      	cbz	r0, 800aba8 <__sfmoreglue+0x28>
 800ab96:	2100      	movs	r1, #0
 800ab98:	e9c0 1600 	strd	r1, r6, [r0]
 800ab9c:	300c      	adds	r0, #12
 800ab9e:	60a0      	str	r0, [r4, #8]
 800aba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aba4:	f7fe fb3c 	bl	8009220 <memset>
 800aba8:	4620      	mov	r0, r4
 800abaa:	bd70      	pop	{r4, r5, r6, pc}

0800abac <__sfp_lock_acquire>:
 800abac:	4801      	ldr	r0, [pc, #4]	; (800abb4 <__sfp_lock_acquire+0x8>)
 800abae:	f000 b8b8 	b.w	800ad22 <__retarget_lock_acquire_recursive>
 800abb2:	bf00      	nop
 800abb4:	20009568 	.word	0x20009568

0800abb8 <__sfp_lock_release>:
 800abb8:	4801      	ldr	r0, [pc, #4]	; (800abc0 <__sfp_lock_release+0x8>)
 800abba:	f000 b8b3 	b.w	800ad24 <__retarget_lock_release_recursive>
 800abbe:	bf00      	nop
 800abc0:	20009568 	.word	0x20009568

0800abc4 <__sinit_lock_acquire>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__sinit_lock_acquire+0x8>)
 800abc6:	f000 b8ac 	b.w	800ad22 <__retarget_lock_acquire_recursive>
 800abca:	bf00      	nop
 800abcc:	20009563 	.word	0x20009563

0800abd0 <__sinit_lock_release>:
 800abd0:	4801      	ldr	r0, [pc, #4]	; (800abd8 <__sinit_lock_release+0x8>)
 800abd2:	f000 b8a7 	b.w	800ad24 <__retarget_lock_release_recursive>
 800abd6:	bf00      	nop
 800abd8:	20009563 	.word	0x20009563

0800abdc <__sinit>:
 800abdc:	b510      	push	{r4, lr}
 800abde:	4604      	mov	r4, r0
 800abe0:	f7ff fff0 	bl	800abc4 <__sinit_lock_acquire>
 800abe4:	69a3      	ldr	r3, [r4, #24]
 800abe6:	b11b      	cbz	r3, 800abf0 <__sinit+0x14>
 800abe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abec:	f7ff bff0 	b.w	800abd0 <__sinit_lock_release>
 800abf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abf4:	6523      	str	r3, [r4, #80]	; 0x50
 800abf6:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <__sinit+0x68>)
 800abf8:	4a13      	ldr	r2, [pc, #76]	; (800ac48 <__sinit+0x6c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	bf04      	itt	eq
 800ac02:	2301      	moveq	r3, #1
 800ac04:	61a3      	streq	r3, [r4, #24]
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 f820 	bl	800ac4c <__sfp>
 800ac0c:	6060      	str	r0, [r4, #4]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 f81c 	bl	800ac4c <__sfp>
 800ac14:	60a0      	str	r0, [r4, #8]
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f818 	bl	800ac4c <__sfp>
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	60e0      	str	r0, [r4, #12]
 800ac20:	2104      	movs	r1, #4
 800ac22:	6860      	ldr	r0, [r4, #4]
 800ac24:	f7ff ff82 	bl	800ab2c <std>
 800ac28:	68a0      	ldr	r0, [r4, #8]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	2109      	movs	r1, #9
 800ac2e:	f7ff ff7d 	bl	800ab2c <std>
 800ac32:	68e0      	ldr	r0, [r4, #12]
 800ac34:	2202      	movs	r2, #2
 800ac36:	2112      	movs	r1, #18
 800ac38:	f7ff ff78 	bl	800ab2c <std>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	61a3      	str	r3, [r4, #24]
 800ac40:	e7d2      	b.n	800abe8 <__sinit+0xc>
 800ac42:	bf00      	nop
 800ac44:	0800c124 	.word	0x0800c124
 800ac48:	0800ab75 	.word	0x0800ab75

0800ac4c <__sfp>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	4607      	mov	r7, r0
 800ac50:	f7ff ffac 	bl	800abac <__sfp_lock_acquire>
 800ac54:	4b1e      	ldr	r3, [pc, #120]	; (800acd0 <__sfp+0x84>)
 800ac56:	681e      	ldr	r6, [r3, #0]
 800ac58:	69b3      	ldr	r3, [r6, #24]
 800ac5a:	b913      	cbnz	r3, 800ac62 <__sfp+0x16>
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f7ff ffbd 	bl	800abdc <__sinit>
 800ac62:	3648      	adds	r6, #72	; 0x48
 800ac64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	d503      	bpl.n	800ac74 <__sfp+0x28>
 800ac6c:	6833      	ldr	r3, [r6, #0]
 800ac6e:	b30b      	cbz	r3, 800acb4 <__sfp+0x68>
 800ac70:	6836      	ldr	r6, [r6, #0]
 800ac72:	e7f7      	b.n	800ac64 <__sfp+0x18>
 800ac74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac78:	b9d5      	cbnz	r5, 800acb0 <__sfp+0x64>
 800ac7a:	4b16      	ldr	r3, [pc, #88]	; (800acd4 <__sfp+0x88>)
 800ac7c:	60e3      	str	r3, [r4, #12]
 800ac7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac82:	6665      	str	r5, [r4, #100]	; 0x64
 800ac84:	f000 f84c 	bl	800ad20 <__retarget_lock_init_recursive>
 800ac88:	f7ff ff96 	bl	800abb8 <__sfp_lock_release>
 800ac8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac94:	6025      	str	r5, [r4, #0]
 800ac96:	61a5      	str	r5, [r4, #24]
 800ac98:	2208      	movs	r2, #8
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aca0:	f7fe fabe 	bl	8009220 <memset>
 800aca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acac:	4620      	mov	r0, r4
 800acae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb0:	3468      	adds	r4, #104	; 0x68
 800acb2:	e7d9      	b.n	800ac68 <__sfp+0x1c>
 800acb4:	2104      	movs	r1, #4
 800acb6:	4638      	mov	r0, r7
 800acb8:	f7ff ff62 	bl	800ab80 <__sfmoreglue>
 800acbc:	4604      	mov	r4, r0
 800acbe:	6030      	str	r0, [r6, #0]
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d1d5      	bne.n	800ac70 <__sfp+0x24>
 800acc4:	f7ff ff78 	bl	800abb8 <__sfp_lock_release>
 800acc8:	230c      	movs	r3, #12
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	e7ee      	b.n	800acac <__sfp+0x60>
 800acce:	bf00      	nop
 800acd0:	0800c124 	.word	0x0800c124
 800acd4:	ffff0001 	.word	0xffff0001

0800acd8 <_fwalk_reent>:
 800acd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acdc:	4606      	mov	r6, r0
 800acde:	4688      	mov	r8, r1
 800ace0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ace4:	2700      	movs	r7, #0
 800ace6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acea:	f1b9 0901 	subs.w	r9, r9, #1
 800acee:	d505      	bpl.n	800acfc <_fwalk_reent+0x24>
 800acf0:	6824      	ldr	r4, [r4, #0]
 800acf2:	2c00      	cmp	r4, #0
 800acf4:	d1f7      	bne.n	800ace6 <_fwalk_reent+0xe>
 800acf6:	4638      	mov	r0, r7
 800acf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acfc:	89ab      	ldrh	r3, [r5, #12]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d907      	bls.n	800ad12 <_fwalk_reent+0x3a>
 800ad02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad06:	3301      	adds	r3, #1
 800ad08:	d003      	beq.n	800ad12 <_fwalk_reent+0x3a>
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	47c0      	blx	r8
 800ad10:	4307      	orrs	r7, r0
 800ad12:	3568      	adds	r5, #104	; 0x68
 800ad14:	e7e9      	b.n	800acea <_fwalk_reent+0x12>
	...

0800ad18 <_localeconv_r>:
 800ad18:	4800      	ldr	r0, [pc, #0]	; (800ad1c <_localeconv_r+0x4>)
 800ad1a:	4770      	bx	lr
 800ad1c:	20000160 	.word	0x20000160

0800ad20 <__retarget_lock_init_recursive>:
 800ad20:	4770      	bx	lr

0800ad22 <__retarget_lock_acquire_recursive>:
 800ad22:	4770      	bx	lr

0800ad24 <__retarget_lock_release_recursive>:
 800ad24:	4770      	bx	lr

0800ad26 <__swhatbuf_r>:
 800ad26:	b570      	push	{r4, r5, r6, lr}
 800ad28:	460e      	mov	r6, r1
 800ad2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2e:	2900      	cmp	r1, #0
 800ad30:	b096      	sub	sp, #88	; 0x58
 800ad32:	4614      	mov	r4, r2
 800ad34:	461d      	mov	r5, r3
 800ad36:	da07      	bge.n	800ad48 <__swhatbuf_r+0x22>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	89b3      	ldrh	r3, [r6, #12]
 800ad3e:	061a      	lsls	r2, r3, #24
 800ad40:	d410      	bmi.n	800ad64 <__swhatbuf_r+0x3e>
 800ad42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad46:	e00e      	b.n	800ad66 <__swhatbuf_r+0x40>
 800ad48:	466a      	mov	r2, sp
 800ad4a:	f000 feaf 	bl	800baac <_fstat_r>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	dbf2      	blt.n	800ad38 <__swhatbuf_r+0x12>
 800ad52:	9a01      	ldr	r2, [sp, #4]
 800ad54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad5c:	425a      	negs	r2, r3
 800ad5e:	415a      	adcs	r2, r3
 800ad60:	602a      	str	r2, [r5, #0]
 800ad62:	e7ee      	b.n	800ad42 <__swhatbuf_r+0x1c>
 800ad64:	2340      	movs	r3, #64	; 0x40
 800ad66:	2000      	movs	r0, #0
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	b016      	add	sp, #88	; 0x58
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad70 <__smakebuf_r>:
 800ad70:	898b      	ldrh	r3, [r1, #12]
 800ad72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad74:	079d      	lsls	r5, r3, #30
 800ad76:	4606      	mov	r6, r0
 800ad78:	460c      	mov	r4, r1
 800ad7a:	d507      	bpl.n	800ad8c <__smakebuf_r+0x1c>
 800ad7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	6123      	str	r3, [r4, #16]
 800ad84:	2301      	movs	r3, #1
 800ad86:	6163      	str	r3, [r4, #20]
 800ad88:	b002      	add	sp, #8
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	ab01      	add	r3, sp, #4
 800ad8e:	466a      	mov	r2, sp
 800ad90:	f7ff ffc9 	bl	800ad26 <__swhatbuf_r>
 800ad94:	9900      	ldr	r1, [sp, #0]
 800ad96:	4605      	mov	r5, r0
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f000 fc21 	bl	800b5e0 <_malloc_r>
 800ad9e:	b948      	cbnz	r0, 800adb4 <__smakebuf_r+0x44>
 800ada0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada4:	059a      	lsls	r2, r3, #22
 800ada6:	d4ef      	bmi.n	800ad88 <__smakebuf_r+0x18>
 800ada8:	f023 0303 	bic.w	r3, r3, #3
 800adac:	f043 0302 	orr.w	r3, r3, #2
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	e7e3      	b.n	800ad7c <__smakebuf_r+0xc>
 800adb4:	4b0d      	ldr	r3, [pc, #52]	; (800adec <__smakebuf_r+0x7c>)
 800adb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	6020      	str	r0, [r4, #0]
 800adbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	9b00      	ldr	r3, [sp, #0]
 800adc4:	6163      	str	r3, [r4, #20]
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	6120      	str	r0, [r4, #16]
 800adca:	b15b      	cbz	r3, 800ade4 <__smakebuf_r+0x74>
 800adcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800add0:	4630      	mov	r0, r6
 800add2:	f000 fe7d 	bl	800bad0 <_isatty_r>
 800add6:	b128      	cbz	r0, 800ade4 <__smakebuf_r+0x74>
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	f023 0303 	bic.w	r3, r3, #3
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	81a3      	strh	r3, [r4, #12]
 800ade4:	89a0      	ldrh	r0, [r4, #12]
 800ade6:	4305      	orrs	r5, r0
 800ade8:	81a5      	strh	r5, [r4, #12]
 800adea:	e7cd      	b.n	800ad88 <__smakebuf_r+0x18>
 800adec:	0800ab75 	.word	0x0800ab75

0800adf0 <malloc>:
 800adf0:	4b02      	ldr	r3, [pc, #8]	; (800adfc <malloc+0xc>)
 800adf2:	4601      	mov	r1, r0
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	f000 bbf3 	b.w	800b5e0 <_malloc_r>
 800adfa:	bf00      	nop
 800adfc:	2000000c 	.word	0x2000000c

0800ae00 <__ascii_mbtowc>:
 800ae00:	b082      	sub	sp, #8
 800ae02:	b901      	cbnz	r1, 800ae06 <__ascii_mbtowc+0x6>
 800ae04:	a901      	add	r1, sp, #4
 800ae06:	b142      	cbz	r2, 800ae1a <__ascii_mbtowc+0x1a>
 800ae08:	b14b      	cbz	r3, 800ae1e <__ascii_mbtowc+0x1e>
 800ae0a:	7813      	ldrb	r3, [r2, #0]
 800ae0c:	600b      	str	r3, [r1, #0]
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	1e10      	subs	r0, r2, #0
 800ae12:	bf18      	it	ne
 800ae14:	2001      	movne	r0, #1
 800ae16:	b002      	add	sp, #8
 800ae18:	4770      	bx	lr
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	e7fb      	b.n	800ae16 <__ascii_mbtowc+0x16>
 800ae1e:	f06f 0001 	mvn.w	r0, #1
 800ae22:	e7f8      	b.n	800ae16 <__ascii_mbtowc+0x16>

0800ae24 <_Balloc>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae28:	4604      	mov	r4, r0
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	b976      	cbnz	r6, 800ae4c <_Balloc+0x28>
 800ae2e:	2010      	movs	r0, #16
 800ae30:	f7ff ffde 	bl	800adf0 <malloc>
 800ae34:	4602      	mov	r2, r0
 800ae36:	6260      	str	r0, [r4, #36]	; 0x24
 800ae38:	b920      	cbnz	r0, 800ae44 <_Balloc+0x20>
 800ae3a:	4b18      	ldr	r3, [pc, #96]	; (800ae9c <_Balloc+0x78>)
 800ae3c:	4818      	ldr	r0, [pc, #96]	; (800aea0 <_Balloc+0x7c>)
 800ae3e:	2166      	movs	r1, #102	; 0x66
 800ae40:	f000 fdf4 	bl	800ba2c <__assert_func>
 800ae44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae48:	6006      	str	r6, [r0, #0]
 800ae4a:	60c6      	str	r6, [r0, #12]
 800ae4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae4e:	68f3      	ldr	r3, [r6, #12]
 800ae50:	b183      	cbz	r3, 800ae74 <_Balloc+0x50>
 800ae52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae5a:	b9b8      	cbnz	r0, 800ae8c <_Balloc+0x68>
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	fa01 f605 	lsl.w	r6, r1, r5
 800ae62:	1d72      	adds	r2, r6, #5
 800ae64:	0092      	lsls	r2, r2, #2
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 fb5a 	bl	800b520 <_calloc_r>
 800ae6c:	b160      	cbz	r0, 800ae88 <_Balloc+0x64>
 800ae6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae72:	e00e      	b.n	800ae92 <_Balloc+0x6e>
 800ae74:	2221      	movs	r2, #33	; 0x21
 800ae76:	2104      	movs	r1, #4
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 fb51 	bl	800b520 <_calloc_r>
 800ae7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae80:	60f0      	str	r0, [r6, #12]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e4      	bne.n	800ae52 <_Balloc+0x2e>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	6802      	ldr	r2, [r0, #0]
 800ae8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae92:	2300      	movs	r3, #0
 800ae94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae98:	e7f7      	b.n	800ae8a <_Balloc+0x66>
 800ae9a:	bf00      	nop
 800ae9c:	0800c26a 	.word	0x0800c26a
 800aea0:	0800c35e 	.word	0x0800c35e

0800aea4 <_Bfree>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b976      	cbnz	r6, 800aecc <_Bfree+0x28>
 800aeae:	2010      	movs	r0, #16
 800aeb0:	f7ff ff9e 	bl	800adf0 <malloc>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	6268      	str	r0, [r5, #36]	; 0x24
 800aeb8:	b920      	cbnz	r0, 800aec4 <_Bfree+0x20>
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <_Bfree+0x3c>)
 800aebc:	4809      	ldr	r0, [pc, #36]	; (800aee4 <_Bfree+0x40>)
 800aebe:	218a      	movs	r1, #138	; 0x8a
 800aec0:	f000 fdb4 	bl	800ba2c <__assert_func>
 800aec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec8:	6006      	str	r6, [r0, #0]
 800aeca:	60c6      	str	r6, [r0, #12]
 800aecc:	b13c      	cbz	r4, 800aede <_Bfree+0x3a>
 800aece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aed0:	6862      	ldr	r2, [r4, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aed8:	6021      	str	r1, [r4, #0]
 800aeda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aede:	bd70      	pop	{r4, r5, r6, pc}
 800aee0:	0800c26a 	.word	0x0800c26a
 800aee4:	0800c35e 	.word	0x0800c35e

0800aee8 <__multadd>:
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	690e      	ldr	r6, [r1, #16]
 800aeee:	4607      	mov	r7, r0
 800aef0:	4698      	mov	r8, r3
 800aef2:	460c      	mov	r4, r1
 800aef4:	f101 0014 	add.w	r0, r1, #20
 800aef8:	2300      	movs	r3, #0
 800aefa:	6805      	ldr	r5, [r0, #0]
 800aefc:	b2a9      	uxth	r1, r5
 800aefe:	fb02 8101 	mla	r1, r2, r1, r8
 800af02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af06:	0c2d      	lsrs	r5, r5, #16
 800af08:	fb02 c505 	mla	r5, r2, r5, ip
 800af0c:	b289      	uxth	r1, r1
 800af0e:	3301      	adds	r3, #1
 800af10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af14:	429e      	cmp	r6, r3
 800af16:	f840 1b04 	str.w	r1, [r0], #4
 800af1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af1e:	dcec      	bgt.n	800aefa <__multadd+0x12>
 800af20:	f1b8 0f00 	cmp.w	r8, #0
 800af24:	d022      	beq.n	800af6c <__multadd+0x84>
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	42b3      	cmp	r3, r6
 800af2a:	dc19      	bgt.n	800af60 <__multadd+0x78>
 800af2c:	6861      	ldr	r1, [r4, #4]
 800af2e:	4638      	mov	r0, r7
 800af30:	3101      	adds	r1, #1
 800af32:	f7ff ff77 	bl	800ae24 <_Balloc>
 800af36:	4605      	mov	r5, r0
 800af38:	b928      	cbnz	r0, 800af46 <__multadd+0x5e>
 800af3a:	4602      	mov	r2, r0
 800af3c:	4b0d      	ldr	r3, [pc, #52]	; (800af74 <__multadd+0x8c>)
 800af3e:	480e      	ldr	r0, [pc, #56]	; (800af78 <__multadd+0x90>)
 800af40:	21b5      	movs	r1, #181	; 0xb5
 800af42:	f000 fd73 	bl	800ba2c <__assert_func>
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	3202      	adds	r2, #2
 800af4a:	f104 010c 	add.w	r1, r4, #12
 800af4e:	0092      	lsls	r2, r2, #2
 800af50:	300c      	adds	r0, #12
 800af52:	f7fe f957 	bl	8009204 <memcpy>
 800af56:	4621      	mov	r1, r4
 800af58:	4638      	mov	r0, r7
 800af5a:	f7ff ffa3 	bl	800aea4 <_Bfree>
 800af5e:	462c      	mov	r4, r5
 800af60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800af64:	3601      	adds	r6, #1
 800af66:	f8c3 8014 	str.w	r8, [r3, #20]
 800af6a:	6126      	str	r6, [r4, #16]
 800af6c:	4620      	mov	r0, r4
 800af6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af72:	bf00      	nop
 800af74:	0800c2e0 	.word	0x0800c2e0
 800af78:	0800c35e 	.word	0x0800c35e

0800af7c <__hi0bits>:
 800af7c:	0c03      	lsrs	r3, r0, #16
 800af7e:	041b      	lsls	r3, r3, #16
 800af80:	b9d3      	cbnz	r3, 800afb8 <__hi0bits+0x3c>
 800af82:	0400      	lsls	r0, r0, #16
 800af84:	2310      	movs	r3, #16
 800af86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af8a:	bf04      	itt	eq
 800af8c:	0200      	lsleq	r0, r0, #8
 800af8e:	3308      	addeq	r3, #8
 800af90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af94:	bf04      	itt	eq
 800af96:	0100      	lsleq	r0, r0, #4
 800af98:	3304      	addeq	r3, #4
 800af9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af9e:	bf04      	itt	eq
 800afa0:	0080      	lsleq	r0, r0, #2
 800afa2:	3302      	addeq	r3, #2
 800afa4:	2800      	cmp	r0, #0
 800afa6:	db05      	blt.n	800afb4 <__hi0bits+0x38>
 800afa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afac:	f103 0301 	add.w	r3, r3, #1
 800afb0:	bf08      	it	eq
 800afb2:	2320      	moveq	r3, #32
 800afb4:	4618      	mov	r0, r3
 800afb6:	4770      	bx	lr
 800afb8:	2300      	movs	r3, #0
 800afba:	e7e4      	b.n	800af86 <__hi0bits+0xa>

0800afbc <__lo0bits>:
 800afbc:	6803      	ldr	r3, [r0, #0]
 800afbe:	f013 0207 	ands.w	r2, r3, #7
 800afc2:	4601      	mov	r1, r0
 800afc4:	d00b      	beq.n	800afde <__lo0bits+0x22>
 800afc6:	07da      	lsls	r2, r3, #31
 800afc8:	d424      	bmi.n	800b014 <__lo0bits+0x58>
 800afca:	0798      	lsls	r0, r3, #30
 800afcc:	bf49      	itett	mi
 800afce:	085b      	lsrmi	r3, r3, #1
 800afd0:	089b      	lsrpl	r3, r3, #2
 800afd2:	2001      	movmi	r0, #1
 800afd4:	600b      	strmi	r3, [r1, #0]
 800afd6:	bf5c      	itt	pl
 800afd8:	600b      	strpl	r3, [r1, #0]
 800afda:	2002      	movpl	r0, #2
 800afdc:	4770      	bx	lr
 800afde:	b298      	uxth	r0, r3
 800afe0:	b9b0      	cbnz	r0, 800b010 <__lo0bits+0x54>
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	2010      	movs	r0, #16
 800afe6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800afea:	bf04      	itt	eq
 800afec:	0a1b      	lsreq	r3, r3, #8
 800afee:	3008      	addeq	r0, #8
 800aff0:	071a      	lsls	r2, r3, #28
 800aff2:	bf04      	itt	eq
 800aff4:	091b      	lsreq	r3, r3, #4
 800aff6:	3004      	addeq	r0, #4
 800aff8:	079a      	lsls	r2, r3, #30
 800affa:	bf04      	itt	eq
 800affc:	089b      	lsreq	r3, r3, #2
 800affe:	3002      	addeq	r0, #2
 800b000:	07da      	lsls	r2, r3, #31
 800b002:	d403      	bmi.n	800b00c <__lo0bits+0x50>
 800b004:	085b      	lsrs	r3, r3, #1
 800b006:	f100 0001 	add.w	r0, r0, #1
 800b00a:	d005      	beq.n	800b018 <__lo0bits+0x5c>
 800b00c:	600b      	str	r3, [r1, #0]
 800b00e:	4770      	bx	lr
 800b010:	4610      	mov	r0, r2
 800b012:	e7e8      	b.n	800afe6 <__lo0bits+0x2a>
 800b014:	2000      	movs	r0, #0
 800b016:	4770      	bx	lr
 800b018:	2020      	movs	r0, #32
 800b01a:	4770      	bx	lr

0800b01c <__i2b>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	460c      	mov	r4, r1
 800b020:	2101      	movs	r1, #1
 800b022:	f7ff feff 	bl	800ae24 <_Balloc>
 800b026:	4602      	mov	r2, r0
 800b028:	b928      	cbnz	r0, 800b036 <__i2b+0x1a>
 800b02a:	4b05      	ldr	r3, [pc, #20]	; (800b040 <__i2b+0x24>)
 800b02c:	4805      	ldr	r0, [pc, #20]	; (800b044 <__i2b+0x28>)
 800b02e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b032:	f000 fcfb 	bl	800ba2c <__assert_func>
 800b036:	2301      	movs	r3, #1
 800b038:	6144      	str	r4, [r0, #20]
 800b03a:	6103      	str	r3, [r0, #16]
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	0800c2e0 	.word	0x0800c2e0
 800b044:	0800c35e 	.word	0x0800c35e

0800b048 <__multiply>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	4614      	mov	r4, r2
 800b04e:	690a      	ldr	r2, [r1, #16]
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	429a      	cmp	r2, r3
 800b054:	bfb8      	it	lt
 800b056:	460b      	movlt	r3, r1
 800b058:	460d      	mov	r5, r1
 800b05a:	bfbc      	itt	lt
 800b05c:	4625      	movlt	r5, r4
 800b05e:	461c      	movlt	r4, r3
 800b060:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b064:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b068:	68ab      	ldr	r3, [r5, #8]
 800b06a:	6869      	ldr	r1, [r5, #4]
 800b06c:	eb0a 0709 	add.w	r7, sl, r9
 800b070:	42bb      	cmp	r3, r7
 800b072:	b085      	sub	sp, #20
 800b074:	bfb8      	it	lt
 800b076:	3101      	addlt	r1, #1
 800b078:	f7ff fed4 	bl	800ae24 <_Balloc>
 800b07c:	b930      	cbnz	r0, 800b08c <__multiply+0x44>
 800b07e:	4602      	mov	r2, r0
 800b080:	4b42      	ldr	r3, [pc, #264]	; (800b18c <__multiply+0x144>)
 800b082:	4843      	ldr	r0, [pc, #268]	; (800b190 <__multiply+0x148>)
 800b084:	f240 115d 	movw	r1, #349	; 0x15d
 800b088:	f000 fcd0 	bl	800ba2c <__assert_func>
 800b08c:	f100 0614 	add.w	r6, r0, #20
 800b090:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b094:	4633      	mov	r3, r6
 800b096:	2200      	movs	r2, #0
 800b098:	4543      	cmp	r3, r8
 800b09a:	d31e      	bcc.n	800b0da <__multiply+0x92>
 800b09c:	f105 0c14 	add.w	ip, r5, #20
 800b0a0:	f104 0314 	add.w	r3, r4, #20
 800b0a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b0a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b0ac:	9202      	str	r2, [sp, #8]
 800b0ae:	ebac 0205 	sub.w	r2, ip, r5
 800b0b2:	3a15      	subs	r2, #21
 800b0b4:	f022 0203 	bic.w	r2, r2, #3
 800b0b8:	3204      	adds	r2, #4
 800b0ba:	f105 0115 	add.w	r1, r5, #21
 800b0be:	458c      	cmp	ip, r1
 800b0c0:	bf38      	it	cc
 800b0c2:	2204      	movcc	r2, #4
 800b0c4:	9201      	str	r2, [sp, #4]
 800b0c6:	9a02      	ldr	r2, [sp, #8]
 800b0c8:	9303      	str	r3, [sp, #12]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d808      	bhi.n	800b0e0 <__multiply+0x98>
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	dc55      	bgt.n	800b17e <__multiply+0x136>
 800b0d2:	6107      	str	r7, [r0, #16]
 800b0d4:	b005      	add	sp, #20
 800b0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0da:	f843 2b04 	str.w	r2, [r3], #4
 800b0de:	e7db      	b.n	800b098 <__multiply+0x50>
 800b0e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0e4:	f1ba 0f00 	cmp.w	sl, #0
 800b0e8:	d020      	beq.n	800b12c <__multiply+0xe4>
 800b0ea:	f105 0e14 	add.w	lr, r5, #20
 800b0ee:	46b1      	mov	r9, r6
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0f6:	f8d9 b000 	ldr.w	fp, [r9]
 800b0fa:	b2a1      	uxth	r1, r4
 800b0fc:	fa1f fb8b 	uxth.w	fp, fp
 800b100:	fb0a b101 	mla	r1, sl, r1, fp
 800b104:	4411      	add	r1, r2
 800b106:	f8d9 2000 	ldr.w	r2, [r9]
 800b10a:	0c24      	lsrs	r4, r4, #16
 800b10c:	0c12      	lsrs	r2, r2, #16
 800b10e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b112:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b116:	b289      	uxth	r1, r1
 800b118:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b11c:	45f4      	cmp	ip, lr
 800b11e:	f849 1b04 	str.w	r1, [r9], #4
 800b122:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b126:	d8e4      	bhi.n	800b0f2 <__multiply+0xaa>
 800b128:	9901      	ldr	r1, [sp, #4]
 800b12a:	5072      	str	r2, [r6, r1]
 800b12c:	9a03      	ldr	r2, [sp, #12]
 800b12e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b132:	3304      	adds	r3, #4
 800b134:	f1b9 0f00 	cmp.w	r9, #0
 800b138:	d01f      	beq.n	800b17a <__multiply+0x132>
 800b13a:	6834      	ldr	r4, [r6, #0]
 800b13c:	f105 0114 	add.w	r1, r5, #20
 800b140:	46b6      	mov	lr, r6
 800b142:	f04f 0a00 	mov.w	sl, #0
 800b146:	880a      	ldrh	r2, [r1, #0]
 800b148:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b14c:	fb09 b202 	mla	r2, r9, r2, fp
 800b150:	4492      	add	sl, r2
 800b152:	b2a4      	uxth	r4, r4
 800b154:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b158:	f84e 4b04 	str.w	r4, [lr], #4
 800b15c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b160:	f8be 2000 	ldrh.w	r2, [lr]
 800b164:	0c24      	lsrs	r4, r4, #16
 800b166:	fb09 2404 	mla	r4, r9, r4, r2
 800b16a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b16e:	458c      	cmp	ip, r1
 800b170:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b174:	d8e7      	bhi.n	800b146 <__multiply+0xfe>
 800b176:	9a01      	ldr	r2, [sp, #4]
 800b178:	50b4      	str	r4, [r6, r2]
 800b17a:	3604      	adds	r6, #4
 800b17c:	e7a3      	b.n	800b0c6 <__multiply+0x7e>
 800b17e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1a5      	bne.n	800b0d2 <__multiply+0x8a>
 800b186:	3f01      	subs	r7, #1
 800b188:	e7a1      	b.n	800b0ce <__multiply+0x86>
 800b18a:	bf00      	nop
 800b18c:	0800c2e0 	.word	0x0800c2e0
 800b190:	0800c35e 	.word	0x0800c35e

0800b194 <__pow5mult>:
 800b194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b198:	4615      	mov	r5, r2
 800b19a:	f012 0203 	ands.w	r2, r2, #3
 800b19e:	4606      	mov	r6, r0
 800b1a0:	460f      	mov	r7, r1
 800b1a2:	d007      	beq.n	800b1b4 <__pow5mult+0x20>
 800b1a4:	4c25      	ldr	r4, [pc, #148]	; (800b23c <__pow5mult+0xa8>)
 800b1a6:	3a01      	subs	r2, #1
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1ae:	f7ff fe9b 	bl	800aee8 <__multadd>
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	10ad      	asrs	r5, r5, #2
 800b1b6:	d03d      	beq.n	800b234 <__pow5mult+0xa0>
 800b1b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ba:	b97c      	cbnz	r4, 800b1dc <__pow5mult+0x48>
 800b1bc:	2010      	movs	r0, #16
 800b1be:	f7ff fe17 	bl	800adf0 <malloc>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b1c6:	b928      	cbnz	r0, 800b1d4 <__pow5mult+0x40>
 800b1c8:	4b1d      	ldr	r3, [pc, #116]	; (800b240 <__pow5mult+0xac>)
 800b1ca:	481e      	ldr	r0, [pc, #120]	; (800b244 <__pow5mult+0xb0>)
 800b1cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1d0:	f000 fc2c 	bl	800ba2c <__assert_func>
 800b1d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1d8:	6004      	str	r4, [r0, #0]
 800b1da:	60c4      	str	r4, [r0, #12]
 800b1dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1e4:	b94c      	cbnz	r4, 800b1fa <__pow5mult+0x66>
 800b1e6:	f240 2171 	movw	r1, #625	; 0x271
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff ff16 	bl	800b01c <__i2b>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	f04f 0900 	mov.w	r9, #0
 800b1fe:	07eb      	lsls	r3, r5, #31
 800b200:	d50a      	bpl.n	800b218 <__pow5mult+0x84>
 800b202:	4639      	mov	r1, r7
 800b204:	4622      	mov	r2, r4
 800b206:	4630      	mov	r0, r6
 800b208:	f7ff ff1e 	bl	800b048 <__multiply>
 800b20c:	4639      	mov	r1, r7
 800b20e:	4680      	mov	r8, r0
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff fe47 	bl	800aea4 <_Bfree>
 800b216:	4647      	mov	r7, r8
 800b218:	106d      	asrs	r5, r5, #1
 800b21a:	d00b      	beq.n	800b234 <__pow5mult+0xa0>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	b938      	cbnz	r0, 800b230 <__pow5mult+0x9c>
 800b220:	4622      	mov	r2, r4
 800b222:	4621      	mov	r1, r4
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff ff0f 	bl	800b048 <__multiply>
 800b22a:	6020      	str	r0, [r4, #0]
 800b22c:	f8c0 9000 	str.w	r9, [r0]
 800b230:	4604      	mov	r4, r0
 800b232:	e7e4      	b.n	800b1fe <__pow5mult+0x6a>
 800b234:	4638      	mov	r0, r7
 800b236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23a:	bf00      	nop
 800b23c:	0800c4b0 	.word	0x0800c4b0
 800b240:	0800c26a 	.word	0x0800c26a
 800b244:	0800c35e 	.word	0x0800c35e

0800b248 <__lshift>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	460c      	mov	r4, r1
 800b24e:	6849      	ldr	r1, [r1, #4]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	4607      	mov	r7, r0
 800b25a:	4691      	mov	r9, r2
 800b25c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b260:	f108 0601 	add.w	r6, r8, #1
 800b264:	42b3      	cmp	r3, r6
 800b266:	db0b      	blt.n	800b280 <__lshift+0x38>
 800b268:	4638      	mov	r0, r7
 800b26a:	f7ff fddb 	bl	800ae24 <_Balloc>
 800b26e:	4605      	mov	r5, r0
 800b270:	b948      	cbnz	r0, 800b286 <__lshift+0x3e>
 800b272:	4602      	mov	r2, r0
 800b274:	4b28      	ldr	r3, [pc, #160]	; (800b318 <__lshift+0xd0>)
 800b276:	4829      	ldr	r0, [pc, #164]	; (800b31c <__lshift+0xd4>)
 800b278:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b27c:	f000 fbd6 	bl	800ba2c <__assert_func>
 800b280:	3101      	adds	r1, #1
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	e7ee      	b.n	800b264 <__lshift+0x1c>
 800b286:	2300      	movs	r3, #0
 800b288:	f100 0114 	add.w	r1, r0, #20
 800b28c:	f100 0210 	add.w	r2, r0, #16
 800b290:	4618      	mov	r0, r3
 800b292:	4553      	cmp	r3, sl
 800b294:	db33      	blt.n	800b2fe <__lshift+0xb6>
 800b296:	6920      	ldr	r0, [r4, #16]
 800b298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b29c:	f104 0314 	add.w	r3, r4, #20
 800b2a0:	f019 091f 	ands.w	r9, r9, #31
 800b2a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2ac:	d02b      	beq.n	800b306 <__lshift+0xbe>
 800b2ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b2b2:	468a      	mov	sl, r1
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2bc:	4302      	orrs	r2, r0
 800b2be:	f84a 2b04 	str.w	r2, [sl], #4
 800b2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c6:	459c      	cmp	ip, r3
 800b2c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2cc:	d8f3      	bhi.n	800b2b6 <__lshift+0x6e>
 800b2ce:	ebac 0304 	sub.w	r3, ip, r4
 800b2d2:	3b15      	subs	r3, #21
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	3304      	adds	r3, #4
 800b2da:	f104 0015 	add.w	r0, r4, #21
 800b2de:	4584      	cmp	ip, r0
 800b2e0:	bf38      	it	cc
 800b2e2:	2304      	movcc	r3, #4
 800b2e4:	50ca      	str	r2, [r1, r3]
 800b2e6:	b10a      	cbz	r2, 800b2ec <__lshift+0xa4>
 800b2e8:	f108 0602 	add.w	r6, r8, #2
 800b2ec:	3e01      	subs	r6, #1
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	612e      	str	r6, [r5, #16]
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	f7ff fdd6 	bl	800aea4 <_Bfree>
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b302:	3301      	adds	r3, #1
 800b304:	e7c5      	b.n	800b292 <__lshift+0x4a>
 800b306:	3904      	subs	r1, #4
 800b308:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b310:	459c      	cmp	ip, r3
 800b312:	d8f9      	bhi.n	800b308 <__lshift+0xc0>
 800b314:	e7ea      	b.n	800b2ec <__lshift+0xa4>
 800b316:	bf00      	nop
 800b318:	0800c2e0 	.word	0x0800c2e0
 800b31c:	0800c35e 	.word	0x0800c35e

0800b320 <__mcmp>:
 800b320:	b530      	push	{r4, r5, lr}
 800b322:	6902      	ldr	r2, [r0, #16]
 800b324:	690c      	ldr	r4, [r1, #16]
 800b326:	1b12      	subs	r2, r2, r4
 800b328:	d10e      	bne.n	800b348 <__mcmp+0x28>
 800b32a:	f100 0314 	add.w	r3, r0, #20
 800b32e:	3114      	adds	r1, #20
 800b330:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b338:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b33c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b340:	42a5      	cmp	r5, r4
 800b342:	d003      	beq.n	800b34c <__mcmp+0x2c>
 800b344:	d305      	bcc.n	800b352 <__mcmp+0x32>
 800b346:	2201      	movs	r2, #1
 800b348:	4610      	mov	r0, r2
 800b34a:	bd30      	pop	{r4, r5, pc}
 800b34c:	4283      	cmp	r3, r0
 800b34e:	d3f3      	bcc.n	800b338 <__mcmp+0x18>
 800b350:	e7fa      	b.n	800b348 <__mcmp+0x28>
 800b352:	f04f 32ff 	mov.w	r2, #4294967295
 800b356:	e7f7      	b.n	800b348 <__mcmp+0x28>

0800b358 <__mdiff>:
 800b358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	460c      	mov	r4, r1
 800b35e:	4606      	mov	r6, r0
 800b360:	4611      	mov	r1, r2
 800b362:	4620      	mov	r0, r4
 800b364:	4617      	mov	r7, r2
 800b366:	f7ff ffdb 	bl	800b320 <__mcmp>
 800b36a:	1e05      	subs	r5, r0, #0
 800b36c:	d110      	bne.n	800b390 <__mdiff+0x38>
 800b36e:	4629      	mov	r1, r5
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fd57 	bl	800ae24 <_Balloc>
 800b376:	b930      	cbnz	r0, 800b386 <__mdiff+0x2e>
 800b378:	4b39      	ldr	r3, [pc, #228]	; (800b460 <__mdiff+0x108>)
 800b37a:	4602      	mov	r2, r0
 800b37c:	f240 2132 	movw	r1, #562	; 0x232
 800b380:	4838      	ldr	r0, [pc, #224]	; (800b464 <__mdiff+0x10c>)
 800b382:	f000 fb53 	bl	800ba2c <__assert_func>
 800b386:	2301      	movs	r3, #1
 800b388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b390:	bfa4      	itt	ge
 800b392:	463b      	movge	r3, r7
 800b394:	4627      	movge	r7, r4
 800b396:	4630      	mov	r0, r6
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	bfa6      	itte	ge
 800b39c:	461c      	movge	r4, r3
 800b39e:	2500      	movge	r5, #0
 800b3a0:	2501      	movlt	r5, #1
 800b3a2:	f7ff fd3f 	bl	800ae24 <_Balloc>
 800b3a6:	b920      	cbnz	r0, 800b3b2 <__mdiff+0x5a>
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <__mdiff+0x108>)
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3b0:	e7e6      	b.n	800b380 <__mdiff+0x28>
 800b3b2:	693e      	ldr	r6, [r7, #16]
 800b3b4:	60c5      	str	r5, [r0, #12]
 800b3b6:	6925      	ldr	r5, [r4, #16]
 800b3b8:	f107 0114 	add.w	r1, r7, #20
 800b3bc:	f104 0914 	add.w	r9, r4, #20
 800b3c0:	f100 0e14 	add.w	lr, r0, #20
 800b3c4:	f107 0210 	add.w	r2, r7, #16
 800b3c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b3cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b3d0:	46f2      	mov	sl, lr
 800b3d2:	2700      	movs	r7, #0
 800b3d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3dc:	fa1f f883 	uxth.w	r8, r3
 800b3e0:	fa17 f78b 	uxtah	r7, r7, fp
 800b3e4:	0c1b      	lsrs	r3, r3, #16
 800b3e6:	eba7 0808 	sub.w	r8, r7, r8
 800b3ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3f2:	fa1f f888 	uxth.w	r8, r8
 800b3f6:	141f      	asrs	r7, r3, #16
 800b3f8:	454d      	cmp	r5, r9
 800b3fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3fe:	f84a 3b04 	str.w	r3, [sl], #4
 800b402:	d8e7      	bhi.n	800b3d4 <__mdiff+0x7c>
 800b404:	1b2b      	subs	r3, r5, r4
 800b406:	3b15      	subs	r3, #21
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	3304      	adds	r3, #4
 800b40e:	3415      	adds	r4, #21
 800b410:	42a5      	cmp	r5, r4
 800b412:	bf38      	it	cc
 800b414:	2304      	movcc	r3, #4
 800b416:	4419      	add	r1, r3
 800b418:	4473      	add	r3, lr
 800b41a:	469e      	mov	lr, r3
 800b41c:	460d      	mov	r5, r1
 800b41e:	4565      	cmp	r5, ip
 800b420:	d30e      	bcc.n	800b440 <__mdiff+0xe8>
 800b422:	f10c 0203 	add.w	r2, ip, #3
 800b426:	1a52      	subs	r2, r2, r1
 800b428:	f022 0203 	bic.w	r2, r2, #3
 800b42c:	3903      	subs	r1, #3
 800b42e:	458c      	cmp	ip, r1
 800b430:	bf38      	it	cc
 800b432:	2200      	movcc	r2, #0
 800b434:	441a      	add	r2, r3
 800b436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b43a:	b17b      	cbz	r3, 800b45c <__mdiff+0x104>
 800b43c:	6106      	str	r6, [r0, #16]
 800b43e:	e7a5      	b.n	800b38c <__mdiff+0x34>
 800b440:	f855 8b04 	ldr.w	r8, [r5], #4
 800b444:	fa17 f488 	uxtah	r4, r7, r8
 800b448:	1422      	asrs	r2, r4, #16
 800b44a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b44e:	b2a4      	uxth	r4, r4
 800b450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b454:	f84e 4b04 	str.w	r4, [lr], #4
 800b458:	1417      	asrs	r7, r2, #16
 800b45a:	e7e0      	b.n	800b41e <__mdiff+0xc6>
 800b45c:	3e01      	subs	r6, #1
 800b45e:	e7ea      	b.n	800b436 <__mdiff+0xde>
 800b460:	0800c2e0 	.word	0x0800c2e0
 800b464:	0800c35e 	.word	0x0800c35e

0800b468 <__d2b>:
 800b468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b46c:	4689      	mov	r9, r1
 800b46e:	2101      	movs	r1, #1
 800b470:	ec57 6b10 	vmov	r6, r7, d0
 800b474:	4690      	mov	r8, r2
 800b476:	f7ff fcd5 	bl	800ae24 <_Balloc>
 800b47a:	4604      	mov	r4, r0
 800b47c:	b930      	cbnz	r0, 800b48c <__d2b+0x24>
 800b47e:	4602      	mov	r2, r0
 800b480:	4b25      	ldr	r3, [pc, #148]	; (800b518 <__d2b+0xb0>)
 800b482:	4826      	ldr	r0, [pc, #152]	; (800b51c <__d2b+0xb4>)
 800b484:	f240 310a 	movw	r1, #778	; 0x30a
 800b488:	f000 fad0 	bl	800ba2c <__assert_func>
 800b48c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b494:	bb35      	cbnz	r5, 800b4e4 <__d2b+0x7c>
 800b496:	2e00      	cmp	r6, #0
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	d028      	beq.n	800b4ee <__d2b+0x86>
 800b49c:	4668      	mov	r0, sp
 800b49e:	9600      	str	r6, [sp, #0]
 800b4a0:	f7ff fd8c 	bl	800afbc <__lo0bits>
 800b4a4:	9900      	ldr	r1, [sp, #0]
 800b4a6:	b300      	cbz	r0, 800b4ea <__d2b+0x82>
 800b4a8:	9a01      	ldr	r2, [sp, #4]
 800b4aa:	f1c0 0320 	rsb	r3, r0, #32
 800b4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b2:	430b      	orrs	r3, r1
 800b4b4:	40c2      	lsrs	r2, r0
 800b4b6:	6163      	str	r3, [r4, #20]
 800b4b8:	9201      	str	r2, [sp, #4]
 800b4ba:	9b01      	ldr	r3, [sp, #4]
 800b4bc:	61a3      	str	r3, [r4, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bf14      	ite	ne
 800b4c2:	2202      	movne	r2, #2
 800b4c4:	2201      	moveq	r2, #1
 800b4c6:	6122      	str	r2, [r4, #16]
 800b4c8:	b1d5      	cbz	r5, 800b500 <__d2b+0x98>
 800b4ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4ce:	4405      	add	r5, r0
 800b4d0:	f8c9 5000 	str.w	r5, [r9]
 800b4d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4d8:	f8c8 0000 	str.w	r0, [r8]
 800b4dc:	4620      	mov	r0, r4
 800b4de:	b003      	add	sp, #12
 800b4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4e8:	e7d5      	b.n	800b496 <__d2b+0x2e>
 800b4ea:	6161      	str	r1, [r4, #20]
 800b4ec:	e7e5      	b.n	800b4ba <__d2b+0x52>
 800b4ee:	a801      	add	r0, sp, #4
 800b4f0:	f7ff fd64 	bl	800afbc <__lo0bits>
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	6163      	str	r3, [r4, #20]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	6122      	str	r2, [r4, #16]
 800b4fc:	3020      	adds	r0, #32
 800b4fe:	e7e3      	b.n	800b4c8 <__d2b+0x60>
 800b500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b508:	f8c9 0000 	str.w	r0, [r9]
 800b50c:	6918      	ldr	r0, [r3, #16]
 800b50e:	f7ff fd35 	bl	800af7c <__hi0bits>
 800b512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b516:	e7df      	b.n	800b4d8 <__d2b+0x70>
 800b518:	0800c2e0 	.word	0x0800c2e0
 800b51c:	0800c35e 	.word	0x0800c35e

0800b520 <_calloc_r>:
 800b520:	b513      	push	{r0, r1, r4, lr}
 800b522:	434a      	muls	r2, r1
 800b524:	4611      	mov	r1, r2
 800b526:	9201      	str	r2, [sp, #4]
 800b528:	f000 f85a 	bl	800b5e0 <_malloc_r>
 800b52c:	4604      	mov	r4, r0
 800b52e:	b118      	cbz	r0, 800b538 <_calloc_r+0x18>
 800b530:	9a01      	ldr	r2, [sp, #4]
 800b532:	2100      	movs	r1, #0
 800b534:	f7fd fe74 	bl	8009220 <memset>
 800b538:	4620      	mov	r0, r4
 800b53a:	b002      	add	sp, #8
 800b53c:	bd10      	pop	{r4, pc}
	...

0800b540 <_free_r>:
 800b540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b542:	2900      	cmp	r1, #0
 800b544:	d048      	beq.n	800b5d8 <_free_r+0x98>
 800b546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b54a:	9001      	str	r0, [sp, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f1a1 0404 	sub.w	r4, r1, #4
 800b552:	bfb8      	it	lt
 800b554:	18e4      	addlt	r4, r4, r3
 800b556:	f000 fadd 	bl	800bb14 <__malloc_lock>
 800b55a:	4a20      	ldr	r2, [pc, #128]	; (800b5dc <_free_r+0x9c>)
 800b55c:	9801      	ldr	r0, [sp, #4]
 800b55e:	6813      	ldr	r3, [r2, #0]
 800b560:	4615      	mov	r5, r2
 800b562:	b933      	cbnz	r3, 800b572 <_free_r+0x32>
 800b564:	6063      	str	r3, [r4, #4]
 800b566:	6014      	str	r4, [r2, #0]
 800b568:	b003      	add	sp, #12
 800b56a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b56e:	f000 bad7 	b.w	800bb20 <__malloc_unlock>
 800b572:	42a3      	cmp	r3, r4
 800b574:	d90b      	bls.n	800b58e <_free_r+0x4e>
 800b576:	6821      	ldr	r1, [r4, #0]
 800b578:	1862      	adds	r2, r4, r1
 800b57a:	4293      	cmp	r3, r2
 800b57c:	bf04      	itt	eq
 800b57e:	681a      	ldreq	r2, [r3, #0]
 800b580:	685b      	ldreq	r3, [r3, #4]
 800b582:	6063      	str	r3, [r4, #4]
 800b584:	bf04      	itt	eq
 800b586:	1852      	addeq	r2, r2, r1
 800b588:	6022      	streq	r2, [r4, #0]
 800b58a:	602c      	str	r4, [r5, #0]
 800b58c:	e7ec      	b.n	800b568 <_free_r+0x28>
 800b58e:	461a      	mov	r2, r3
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	b10b      	cbz	r3, 800b598 <_free_r+0x58>
 800b594:	42a3      	cmp	r3, r4
 800b596:	d9fa      	bls.n	800b58e <_free_r+0x4e>
 800b598:	6811      	ldr	r1, [r2, #0]
 800b59a:	1855      	adds	r5, r2, r1
 800b59c:	42a5      	cmp	r5, r4
 800b59e:	d10b      	bne.n	800b5b8 <_free_r+0x78>
 800b5a0:	6824      	ldr	r4, [r4, #0]
 800b5a2:	4421      	add	r1, r4
 800b5a4:	1854      	adds	r4, r2, r1
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	6011      	str	r1, [r2, #0]
 800b5aa:	d1dd      	bne.n	800b568 <_free_r+0x28>
 800b5ac:	681c      	ldr	r4, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	6053      	str	r3, [r2, #4]
 800b5b2:	4421      	add	r1, r4
 800b5b4:	6011      	str	r1, [r2, #0]
 800b5b6:	e7d7      	b.n	800b568 <_free_r+0x28>
 800b5b8:	d902      	bls.n	800b5c0 <_free_r+0x80>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	e7d3      	b.n	800b568 <_free_r+0x28>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf04      	itt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	6063      	str	r3, [r4, #4]
 800b5ce:	bf04      	itt	eq
 800b5d0:	1949      	addeq	r1, r1, r5
 800b5d2:	6021      	streq	r1, [r4, #0]
 800b5d4:	6054      	str	r4, [r2, #4]
 800b5d6:	e7c7      	b.n	800b568 <_free_r+0x28>
 800b5d8:	b003      	add	sp, #12
 800b5da:	bd30      	pop	{r4, r5, pc}
 800b5dc:	20000204 	.word	0x20000204

0800b5e0 <_malloc_r>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	1ccd      	adds	r5, r1, #3
 800b5e4:	f025 0503 	bic.w	r5, r5, #3
 800b5e8:	3508      	adds	r5, #8
 800b5ea:	2d0c      	cmp	r5, #12
 800b5ec:	bf38      	it	cc
 800b5ee:	250c      	movcc	r5, #12
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	db01      	blt.n	800b5fa <_malloc_r+0x1a>
 800b5f6:	42a9      	cmp	r1, r5
 800b5f8:	d903      	bls.n	800b602 <_malloc_r+0x22>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	6033      	str	r3, [r6, #0]
 800b5fe:	2000      	movs	r0, #0
 800b600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b602:	f000 fa87 	bl	800bb14 <__malloc_lock>
 800b606:	4921      	ldr	r1, [pc, #132]	; (800b68c <_malloc_r+0xac>)
 800b608:	680a      	ldr	r2, [r1, #0]
 800b60a:	4614      	mov	r4, r2
 800b60c:	b99c      	cbnz	r4, 800b636 <_malloc_r+0x56>
 800b60e:	4f20      	ldr	r7, [pc, #128]	; (800b690 <_malloc_r+0xb0>)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	b923      	cbnz	r3, 800b61e <_malloc_r+0x3e>
 800b614:	4621      	mov	r1, r4
 800b616:	4630      	mov	r0, r6
 800b618:	f000 f996 	bl	800b948 <_sbrk_r>
 800b61c:	6038      	str	r0, [r7, #0]
 800b61e:	4629      	mov	r1, r5
 800b620:	4630      	mov	r0, r6
 800b622:	f000 f991 	bl	800b948 <_sbrk_r>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d123      	bne.n	800b672 <_malloc_r+0x92>
 800b62a:	230c      	movs	r3, #12
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 fa76 	bl	800bb20 <__malloc_unlock>
 800b634:	e7e3      	b.n	800b5fe <_malloc_r+0x1e>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	1b5b      	subs	r3, r3, r5
 800b63a:	d417      	bmi.n	800b66c <_malloc_r+0x8c>
 800b63c:	2b0b      	cmp	r3, #11
 800b63e:	d903      	bls.n	800b648 <_malloc_r+0x68>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	441c      	add	r4, r3
 800b644:	6025      	str	r5, [r4, #0]
 800b646:	e004      	b.n	800b652 <_malloc_r+0x72>
 800b648:	6863      	ldr	r3, [r4, #4]
 800b64a:	42a2      	cmp	r2, r4
 800b64c:	bf0c      	ite	eq
 800b64e:	600b      	streq	r3, [r1, #0]
 800b650:	6053      	strne	r3, [r2, #4]
 800b652:	4630      	mov	r0, r6
 800b654:	f000 fa64 	bl	800bb20 <__malloc_unlock>
 800b658:	f104 000b 	add.w	r0, r4, #11
 800b65c:	1d23      	adds	r3, r4, #4
 800b65e:	f020 0007 	bic.w	r0, r0, #7
 800b662:	1ac2      	subs	r2, r0, r3
 800b664:	d0cc      	beq.n	800b600 <_malloc_r+0x20>
 800b666:	1a1b      	subs	r3, r3, r0
 800b668:	50a3      	str	r3, [r4, r2]
 800b66a:	e7c9      	b.n	800b600 <_malloc_r+0x20>
 800b66c:	4622      	mov	r2, r4
 800b66e:	6864      	ldr	r4, [r4, #4]
 800b670:	e7cc      	b.n	800b60c <_malloc_r+0x2c>
 800b672:	1cc4      	adds	r4, r0, #3
 800b674:	f024 0403 	bic.w	r4, r4, #3
 800b678:	42a0      	cmp	r0, r4
 800b67a:	d0e3      	beq.n	800b644 <_malloc_r+0x64>
 800b67c:	1a21      	subs	r1, r4, r0
 800b67e:	4630      	mov	r0, r6
 800b680:	f000 f962 	bl	800b948 <_sbrk_r>
 800b684:	3001      	adds	r0, #1
 800b686:	d1dd      	bne.n	800b644 <_malloc_r+0x64>
 800b688:	e7cf      	b.n	800b62a <_malloc_r+0x4a>
 800b68a:	bf00      	nop
 800b68c:	20000204 	.word	0x20000204
 800b690:	20000208 	.word	0x20000208

0800b694 <__sfputc_r>:
 800b694:	6893      	ldr	r3, [r2, #8]
 800b696:	3b01      	subs	r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	b410      	push	{r4}
 800b69c:	6093      	str	r3, [r2, #8]
 800b69e:	da08      	bge.n	800b6b2 <__sfputc_r+0x1e>
 800b6a0:	6994      	ldr	r4, [r2, #24]
 800b6a2:	42a3      	cmp	r3, r4
 800b6a4:	db01      	blt.n	800b6aa <__sfputc_r+0x16>
 800b6a6:	290a      	cmp	r1, #10
 800b6a8:	d103      	bne.n	800b6b2 <__sfputc_r+0x1e>
 800b6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ae:	f7fe ba41 	b.w	8009b34 <__swbuf_r>
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	1c58      	adds	r0, r3, #1
 800b6b6:	6010      	str	r0, [r2, #0]
 800b6b8:	7019      	strb	r1, [r3, #0]
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <__sfputs_r>:
 800b6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460f      	mov	r7, r1
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	18d5      	adds	r5, r2, r3
 800b6cc:	42ac      	cmp	r4, r5
 800b6ce:	d101      	bne.n	800b6d4 <__sfputs_r+0x12>
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e007      	b.n	800b6e4 <__sfputs_r+0x22>
 800b6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d8:	463a      	mov	r2, r7
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ffda 	bl	800b694 <__sfputc_r>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d1f3      	bne.n	800b6cc <__sfputs_r+0xa>
 800b6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6e8 <_vfiprintf_r>:
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	b09d      	sub	sp, #116	; 0x74
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	4698      	mov	r8, r3
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	b118      	cbz	r0, 800b700 <_vfiprintf_r+0x18>
 800b6f8:	6983      	ldr	r3, [r0, #24]
 800b6fa:	b90b      	cbnz	r3, 800b700 <_vfiprintf_r+0x18>
 800b6fc:	f7ff fa6e 	bl	800abdc <__sinit>
 800b700:	4b89      	ldr	r3, [pc, #548]	; (800b928 <_vfiprintf_r+0x240>)
 800b702:	429d      	cmp	r5, r3
 800b704:	d11b      	bne.n	800b73e <_vfiprintf_r+0x56>
 800b706:	6875      	ldr	r5, [r6, #4]
 800b708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b70a:	07d9      	lsls	r1, r3, #31
 800b70c:	d405      	bmi.n	800b71a <_vfiprintf_r+0x32>
 800b70e:	89ab      	ldrh	r3, [r5, #12]
 800b710:	059a      	lsls	r2, r3, #22
 800b712:	d402      	bmi.n	800b71a <_vfiprintf_r+0x32>
 800b714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b716:	f7ff fb04 	bl	800ad22 <__retarget_lock_acquire_recursive>
 800b71a:	89ab      	ldrh	r3, [r5, #12]
 800b71c:	071b      	lsls	r3, r3, #28
 800b71e:	d501      	bpl.n	800b724 <_vfiprintf_r+0x3c>
 800b720:	692b      	ldr	r3, [r5, #16]
 800b722:	b9eb      	cbnz	r3, 800b760 <_vfiprintf_r+0x78>
 800b724:	4629      	mov	r1, r5
 800b726:	4630      	mov	r0, r6
 800b728:	f7fe fa56 	bl	8009bd8 <__swsetup_r>
 800b72c:	b1c0      	cbz	r0, 800b760 <_vfiprintf_r+0x78>
 800b72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b730:	07dc      	lsls	r4, r3, #31
 800b732:	d50e      	bpl.n	800b752 <_vfiprintf_r+0x6a>
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	b01d      	add	sp, #116	; 0x74
 800b73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73e:	4b7b      	ldr	r3, [pc, #492]	; (800b92c <_vfiprintf_r+0x244>)
 800b740:	429d      	cmp	r5, r3
 800b742:	d101      	bne.n	800b748 <_vfiprintf_r+0x60>
 800b744:	68b5      	ldr	r5, [r6, #8]
 800b746:	e7df      	b.n	800b708 <_vfiprintf_r+0x20>
 800b748:	4b79      	ldr	r3, [pc, #484]	; (800b930 <_vfiprintf_r+0x248>)
 800b74a:	429d      	cmp	r5, r3
 800b74c:	bf08      	it	eq
 800b74e:	68f5      	ldreq	r5, [r6, #12]
 800b750:	e7da      	b.n	800b708 <_vfiprintf_r+0x20>
 800b752:	89ab      	ldrh	r3, [r5, #12]
 800b754:	0598      	lsls	r0, r3, #22
 800b756:	d4ed      	bmi.n	800b734 <_vfiprintf_r+0x4c>
 800b758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b75a:	f7ff fae3 	bl	800ad24 <__retarget_lock_release_recursive>
 800b75e:	e7e9      	b.n	800b734 <_vfiprintf_r+0x4c>
 800b760:	2300      	movs	r3, #0
 800b762:	9309      	str	r3, [sp, #36]	; 0x24
 800b764:	2320      	movs	r3, #32
 800b766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b76a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b76e:	2330      	movs	r3, #48	; 0x30
 800b770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b934 <_vfiprintf_r+0x24c>
 800b774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b778:	f04f 0901 	mov.w	r9, #1
 800b77c:	4623      	mov	r3, r4
 800b77e:	469a      	mov	sl, r3
 800b780:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b784:	b10a      	cbz	r2, 800b78a <_vfiprintf_r+0xa2>
 800b786:	2a25      	cmp	r2, #37	; 0x25
 800b788:	d1f9      	bne.n	800b77e <_vfiprintf_r+0x96>
 800b78a:	ebba 0b04 	subs.w	fp, sl, r4
 800b78e:	d00b      	beq.n	800b7a8 <_vfiprintf_r+0xc0>
 800b790:	465b      	mov	r3, fp
 800b792:	4622      	mov	r2, r4
 800b794:	4629      	mov	r1, r5
 800b796:	4630      	mov	r0, r6
 800b798:	f7ff ff93 	bl	800b6c2 <__sfputs_r>
 800b79c:	3001      	adds	r0, #1
 800b79e:	f000 80aa 	beq.w	800b8f6 <_vfiprintf_r+0x20e>
 800b7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a4:	445a      	add	r2, fp
 800b7a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 80a2 	beq.w	800b8f6 <_vfiprintf_r+0x20e>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7bc:	f10a 0a01 	add.w	sl, sl, #1
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	9307      	str	r3, [sp, #28]
 800b7c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7c8:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ca:	4654      	mov	r4, sl
 800b7cc:	2205      	movs	r2, #5
 800b7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d2:	4858      	ldr	r0, [pc, #352]	; (800b934 <_vfiprintf_r+0x24c>)
 800b7d4:	f7f4 fd2c 	bl	8000230 <memchr>
 800b7d8:	9a04      	ldr	r2, [sp, #16]
 800b7da:	b9d8      	cbnz	r0, 800b814 <_vfiprintf_r+0x12c>
 800b7dc:	06d1      	lsls	r1, r2, #27
 800b7de:	bf44      	itt	mi
 800b7e0:	2320      	movmi	r3, #32
 800b7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e6:	0713      	lsls	r3, r2, #28
 800b7e8:	bf44      	itt	mi
 800b7ea:	232b      	movmi	r3, #43	; 0x2b
 800b7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f6:	d015      	beq.n	800b824 <_vfiprintf_r+0x13c>
 800b7f8:	9a07      	ldr	r2, [sp, #28]
 800b7fa:	4654      	mov	r4, sl
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f04f 0c0a 	mov.w	ip, #10
 800b802:	4621      	mov	r1, r4
 800b804:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b808:	3b30      	subs	r3, #48	; 0x30
 800b80a:	2b09      	cmp	r3, #9
 800b80c:	d94e      	bls.n	800b8ac <_vfiprintf_r+0x1c4>
 800b80e:	b1b0      	cbz	r0, 800b83e <_vfiprintf_r+0x156>
 800b810:	9207      	str	r2, [sp, #28]
 800b812:	e014      	b.n	800b83e <_vfiprintf_r+0x156>
 800b814:	eba0 0308 	sub.w	r3, r0, r8
 800b818:	fa09 f303 	lsl.w	r3, r9, r3
 800b81c:	4313      	orrs	r3, r2
 800b81e:	9304      	str	r3, [sp, #16]
 800b820:	46a2      	mov	sl, r4
 800b822:	e7d2      	b.n	800b7ca <_vfiprintf_r+0xe2>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	1d19      	adds	r1, r3, #4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	9103      	str	r1, [sp, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bfbb      	ittet	lt
 800b830:	425b      	neglt	r3, r3
 800b832:	f042 0202 	orrlt.w	r2, r2, #2
 800b836:	9307      	strge	r3, [sp, #28]
 800b838:	9307      	strlt	r3, [sp, #28]
 800b83a:	bfb8      	it	lt
 800b83c:	9204      	strlt	r2, [sp, #16]
 800b83e:	7823      	ldrb	r3, [r4, #0]
 800b840:	2b2e      	cmp	r3, #46	; 0x2e
 800b842:	d10c      	bne.n	800b85e <_vfiprintf_r+0x176>
 800b844:	7863      	ldrb	r3, [r4, #1]
 800b846:	2b2a      	cmp	r3, #42	; 0x2a
 800b848:	d135      	bne.n	800b8b6 <_vfiprintf_r+0x1ce>
 800b84a:	9b03      	ldr	r3, [sp, #12]
 800b84c:	1d1a      	adds	r2, r3, #4
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	9203      	str	r2, [sp, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	bfb8      	it	lt
 800b856:	f04f 33ff 	movlt.w	r3, #4294967295
 800b85a:	3402      	adds	r4, #2
 800b85c:	9305      	str	r3, [sp, #20]
 800b85e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b944 <_vfiprintf_r+0x25c>
 800b862:	7821      	ldrb	r1, [r4, #0]
 800b864:	2203      	movs	r2, #3
 800b866:	4650      	mov	r0, sl
 800b868:	f7f4 fce2 	bl	8000230 <memchr>
 800b86c:	b140      	cbz	r0, 800b880 <_vfiprintf_r+0x198>
 800b86e:	2340      	movs	r3, #64	; 0x40
 800b870:	eba0 000a 	sub.w	r0, r0, sl
 800b874:	fa03 f000 	lsl.w	r0, r3, r0
 800b878:	9b04      	ldr	r3, [sp, #16]
 800b87a:	4303      	orrs	r3, r0
 800b87c:	3401      	adds	r4, #1
 800b87e:	9304      	str	r3, [sp, #16]
 800b880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b884:	482c      	ldr	r0, [pc, #176]	; (800b938 <_vfiprintf_r+0x250>)
 800b886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b88a:	2206      	movs	r2, #6
 800b88c:	f7f4 fcd0 	bl	8000230 <memchr>
 800b890:	2800      	cmp	r0, #0
 800b892:	d03f      	beq.n	800b914 <_vfiprintf_r+0x22c>
 800b894:	4b29      	ldr	r3, [pc, #164]	; (800b93c <_vfiprintf_r+0x254>)
 800b896:	bb1b      	cbnz	r3, 800b8e0 <_vfiprintf_r+0x1f8>
 800b898:	9b03      	ldr	r3, [sp, #12]
 800b89a:	3307      	adds	r3, #7
 800b89c:	f023 0307 	bic.w	r3, r3, #7
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	9303      	str	r3, [sp, #12]
 800b8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a6:	443b      	add	r3, r7
 800b8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8aa:	e767      	b.n	800b77c <_vfiprintf_r+0x94>
 800b8ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	2001      	movs	r0, #1
 800b8b4:	e7a5      	b.n	800b802 <_vfiprintf_r+0x11a>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	3401      	adds	r4, #1
 800b8ba:	9305      	str	r3, [sp, #20]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	f04f 0c0a 	mov.w	ip, #10
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8c8:	3a30      	subs	r2, #48	; 0x30
 800b8ca:	2a09      	cmp	r2, #9
 800b8cc:	d903      	bls.n	800b8d6 <_vfiprintf_r+0x1ee>
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0c5      	beq.n	800b85e <_vfiprintf_r+0x176>
 800b8d2:	9105      	str	r1, [sp, #20]
 800b8d4:	e7c3      	b.n	800b85e <_vfiprintf_r+0x176>
 800b8d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8da:	4604      	mov	r4, r0
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e7f0      	b.n	800b8c2 <_vfiprintf_r+0x1da>
 800b8e0:	ab03      	add	r3, sp, #12
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4b16      	ldr	r3, [pc, #88]	; (800b940 <_vfiprintf_r+0x258>)
 800b8e8:	a904      	add	r1, sp, #16
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7fd fd40 	bl	8009370 <_printf_float>
 800b8f0:	4607      	mov	r7, r0
 800b8f2:	1c78      	adds	r0, r7, #1
 800b8f4:	d1d6      	bne.n	800b8a4 <_vfiprintf_r+0x1bc>
 800b8f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8f8:	07d9      	lsls	r1, r3, #31
 800b8fa:	d405      	bmi.n	800b908 <_vfiprintf_r+0x220>
 800b8fc:	89ab      	ldrh	r3, [r5, #12]
 800b8fe:	059a      	lsls	r2, r3, #22
 800b900:	d402      	bmi.n	800b908 <_vfiprintf_r+0x220>
 800b902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b904:	f7ff fa0e 	bl	800ad24 <__retarget_lock_release_recursive>
 800b908:	89ab      	ldrh	r3, [r5, #12]
 800b90a:	065b      	lsls	r3, r3, #25
 800b90c:	f53f af12 	bmi.w	800b734 <_vfiprintf_r+0x4c>
 800b910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b912:	e711      	b.n	800b738 <_vfiprintf_r+0x50>
 800b914:	ab03      	add	r3, sp, #12
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	462a      	mov	r2, r5
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <_vfiprintf_r+0x258>)
 800b91c:	a904      	add	r1, sp, #16
 800b91e:	4630      	mov	r0, r6
 800b920:	f7fd ffca 	bl	80098b8 <_printf_i>
 800b924:	e7e4      	b.n	800b8f0 <_vfiprintf_r+0x208>
 800b926:	bf00      	nop
 800b928:	0800c314 	.word	0x0800c314
 800b92c:	0800c334 	.word	0x0800c334
 800b930:	0800c2f4 	.word	0x0800c2f4
 800b934:	0800c4bc 	.word	0x0800c4bc
 800b938:	0800c4c6 	.word	0x0800c4c6
 800b93c:	08009371 	.word	0x08009371
 800b940:	0800b6c3 	.word	0x0800b6c3
 800b944:	0800c4c2 	.word	0x0800c4c2

0800b948 <_sbrk_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d06      	ldr	r5, [pc, #24]	; (800b964 <_sbrk_r+0x1c>)
 800b94c:	2300      	movs	r3, #0
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	f7f6 ffd0 	bl	80028f8 <_sbrk>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_sbrk_r+0x1a>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_sbrk_r+0x1a>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	2000956c 	.word	0x2000956c

0800b968 <__sread>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b970:	f000 f8dc 	bl	800bb2c <_read_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	bfab      	itete	ge
 800b978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b97a:	89a3      	ldrhlt	r3, [r4, #12]
 800b97c:	181b      	addge	r3, r3, r0
 800b97e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b982:	bfac      	ite	ge
 800b984:	6563      	strge	r3, [r4, #84]	; 0x54
 800b986:	81a3      	strhlt	r3, [r4, #12]
 800b988:	bd10      	pop	{r4, pc}

0800b98a <__swrite>:
 800b98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98e:	461f      	mov	r7, r3
 800b990:	898b      	ldrh	r3, [r1, #12]
 800b992:	05db      	lsls	r3, r3, #23
 800b994:	4605      	mov	r5, r0
 800b996:	460c      	mov	r4, r1
 800b998:	4616      	mov	r6, r2
 800b99a:	d505      	bpl.n	800b9a8 <__swrite+0x1e>
 800b99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f000 f8a4 	bl	800baf0 <_lseek_r>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9be:	f000 b823 	b.w	800ba08 <_write_r>

0800b9c2 <__sseek>:
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ca:	f000 f891 	bl	800baf0 <_lseek_r>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	bf15      	itete	ne
 800b9d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9de:	81a3      	strheq	r3, [r4, #12]
 800b9e0:	bf18      	it	ne
 800b9e2:	81a3      	strhne	r3, [r4, #12]
 800b9e4:	bd10      	pop	{r4, pc}

0800b9e6 <__sclose>:
 800b9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ea:	f000 b83d 	b.w	800ba68 <_close_r>

0800b9ee <__ascii_wctomb>:
 800b9ee:	b149      	cbz	r1, 800ba04 <__ascii_wctomb+0x16>
 800b9f0:	2aff      	cmp	r2, #255	; 0xff
 800b9f2:	bf85      	ittet	hi
 800b9f4:	238a      	movhi	r3, #138	; 0x8a
 800b9f6:	6003      	strhi	r3, [r0, #0]
 800b9f8:	700a      	strbls	r2, [r1, #0]
 800b9fa:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9fe:	bf98      	it	ls
 800ba00:	2001      	movls	r0, #1
 800ba02:	4770      	bx	lr
 800ba04:	4608      	mov	r0, r1
 800ba06:	4770      	bx	lr

0800ba08 <_write_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_write_r+0x20>)
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4611      	mov	r1, r2
 800ba12:	2200      	movs	r2, #0
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f7f6 ff1d 	bl	8002856 <_write>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_write_r+0x1e>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_write_r+0x1e>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	2000956c 	.word	0x2000956c

0800ba2c <__assert_func>:
 800ba2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba2e:	4614      	mov	r4, r2
 800ba30:	461a      	mov	r2, r3
 800ba32:	4b09      	ldr	r3, [pc, #36]	; (800ba58 <__assert_func+0x2c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4605      	mov	r5, r0
 800ba38:	68d8      	ldr	r0, [r3, #12]
 800ba3a:	b14c      	cbz	r4, 800ba50 <__assert_func+0x24>
 800ba3c:	4b07      	ldr	r3, [pc, #28]	; (800ba5c <__assert_func+0x30>)
 800ba3e:	9100      	str	r1, [sp, #0]
 800ba40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba44:	4906      	ldr	r1, [pc, #24]	; (800ba60 <__assert_func+0x34>)
 800ba46:	462b      	mov	r3, r5
 800ba48:	f000 f81e 	bl	800ba88 <fiprintf>
 800ba4c:	f000 f880 	bl	800bb50 <abort>
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <__assert_func+0x38>)
 800ba52:	461c      	mov	r4, r3
 800ba54:	e7f3      	b.n	800ba3e <__assert_func+0x12>
 800ba56:	bf00      	nop
 800ba58:	2000000c 	.word	0x2000000c
 800ba5c:	0800c4cd 	.word	0x0800c4cd
 800ba60:	0800c4da 	.word	0x0800c4da
 800ba64:	0800c508 	.word	0x0800c508

0800ba68 <_close_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	; (800ba84 <_close_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f6 ff0b 	bl	800288e <_close>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_close_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_close_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	2000956c 	.word	0x2000956c

0800ba88 <fiprintf>:
 800ba88:	b40e      	push	{r1, r2, r3}
 800ba8a:	b503      	push	{r0, r1, lr}
 800ba8c:	4601      	mov	r1, r0
 800ba8e:	ab03      	add	r3, sp, #12
 800ba90:	4805      	ldr	r0, [pc, #20]	; (800baa8 <fiprintf+0x20>)
 800ba92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba96:	6800      	ldr	r0, [r0, #0]
 800ba98:	9301      	str	r3, [sp, #4]
 800ba9a:	f7ff fe25 	bl	800b6e8 <_vfiprintf_r>
 800ba9e:	b002      	add	sp, #8
 800baa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800baa4:	b003      	add	sp, #12
 800baa6:	4770      	bx	lr
 800baa8:	2000000c 	.word	0x2000000c

0800baac <_fstat_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d07      	ldr	r5, [pc, #28]	; (800bacc <_fstat_r+0x20>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	f7f6 fef4 	bl	80028a6 <_fstat>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d102      	bne.n	800bac8 <_fstat_r+0x1c>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	b103      	cbz	r3, 800bac8 <_fstat_r+0x1c>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	2000956c 	.word	0x2000956c

0800bad0 <_isatty_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d06      	ldr	r5, [pc, #24]	; (800baec <_isatty_r+0x1c>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f6 fef3 	bl	80028c6 <_isatty>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_isatty_r+0x1a>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_isatty_r+0x1a>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	2000956c 	.word	0x2000956c

0800baf0 <_lseek_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d07      	ldr	r5, [pc, #28]	; (800bb10 <_lseek_r+0x20>)
 800baf4:	4604      	mov	r4, r0
 800baf6:	4608      	mov	r0, r1
 800baf8:	4611      	mov	r1, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f6 feec 	bl	80028dc <_lseek>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_lseek_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_lseek_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	2000956c 	.word	0x2000956c

0800bb14 <__malloc_lock>:
 800bb14:	4801      	ldr	r0, [pc, #4]	; (800bb1c <__malloc_lock+0x8>)
 800bb16:	f7ff b904 	b.w	800ad22 <__retarget_lock_acquire_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	20009564 	.word	0x20009564

0800bb20 <__malloc_unlock>:
 800bb20:	4801      	ldr	r0, [pc, #4]	; (800bb28 <__malloc_unlock+0x8>)
 800bb22:	f7ff b8ff 	b.w	800ad24 <__retarget_lock_release_recursive>
 800bb26:	bf00      	nop
 800bb28:	20009564 	.word	0x20009564

0800bb2c <_read_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d07      	ldr	r5, [pc, #28]	; (800bb4c <_read_r+0x20>)
 800bb30:	4604      	mov	r4, r0
 800bb32:	4608      	mov	r0, r1
 800bb34:	4611      	mov	r1, r2
 800bb36:	2200      	movs	r2, #0
 800bb38:	602a      	str	r2, [r5, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f7f6 fe6e 	bl	800281c <_read>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	d102      	bne.n	800bb4a <_read_r+0x1e>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	b103      	cbz	r3, 800bb4a <_read_r+0x1e>
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	bd38      	pop	{r3, r4, r5, pc}
 800bb4c:	2000956c 	.word	0x2000956c

0800bb50 <abort>:
 800bb50:	b508      	push	{r3, lr}
 800bb52:	2006      	movs	r0, #6
 800bb54:	f000 f82c 	bl	800bbb0 <raise>
 800bb58:	2001      	movs	r0, #1
 800bb5a:	f7f6 fe55 	bl	8002808 <_exit>

0800bb5e <_raise_r>:
 800bb5e:	291f      	cmp	r1, #31
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4604      	mov	r4, r0
 800bb64:	460d      	mov	r5, r1
 800bb66:	d904      	bls.n	800bb72 <_raise_r+0x14>
 800bb68:	2316      	movs	r3, #22
 800bb6a:	6003      	str	r3, [r0, #0]
 800bb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb70:	bd38      	pop	{r3, r4, r5, pc}
 800bb72:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb74:	b112      	cbz	r2, 800bb7c <_raise_r+0x1e>
 800bb76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb7a:	b94b      	cbnz	r3, 800bb90 <_raise_r+0x32>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 f831 	bl	800bbe4 <_getpid_r>
 800bb82:	462a      	mov	r2, r5
 800bb84:	4601      	mov	r1, r0
 800bb86:	4620      	mov	r0, r4
 800bb88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb8c:	f000 b818 	b.w	800bbc0 <_kill_r>
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d00a      	beq.n	800bbaa <_raise_r+0x4c>
 800bb94:	1c59      	adds	r1, r3, #1
 800bb96:	d103      	bne.n	800bba0 <_raise_r+0x42>
 800bb98:	2316      	movs	r3, #22
 800bb9a:	6003      	str	r3, [r0, #0]
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	e7e7      	b.n	800bb70 <_raise_r+0x12>
 800bba0:	2400      	movs	r4, #0
 800bba2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bba6:	4628      	mov	r0, r5
 800bba8:	4798      	blx	r3
 800bbaa:	2000      	movs	r0, #0
 800bbac:	e7e0      	b.n	800bb70 <_raise_r+0x12>
	...

0800bbb0 <raise>:
 800bbb0:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <raise+0xc>)
 800bbb2:	4601      	mov	r1, r0
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	f7ff bfd2 	b.w	800bb5e <_raise_r>
 800bbba:	bf00      	nop
 800bbbc:	2000000c 	.word	0x2000000c

0800bbc0 <_kill_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	4d07      	ldr	r5, [pc, #28]	; (800bbe0 <_kill_r+0x20>)
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	4608      	mov	r0, r1
 800bbca:	4611      	mov	r1, r2
 800bbcc:	602b      	str	r3, [r5, #0]
 800bbce:	f7f6 fe0b 	bl	80027e8 <_kill>
 800bbd2:	1c43      	adds	r3, r0, #1
 800bbd4:	d102      	bne.n	800bbdc <_kill_r+0x1c>
 800bbd6:	682b      	ldr	r3, [r5, #0]
 800bbd8:	b103      	cbz	r3, 800bbdc <_kill_r+0x1c>
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	bd38      	pop	{r3, r4, r5, pc}
 800bbde:	bf00      	nop
 800bbe0:	2000956c 	.word	0x2000956c

0800bbe4 <_getpid_r>:
 800bbe4:	f7f6 bdf8 	b.w	80027d8 <_getpid>

0800bbe8 <exp>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	ed2d 8b02 	vpush	{d8}
 800bbee:	ec55 4b10 	vmov	r4, r5, d0
 800bbf2:	f000 f849 	bl	800bc88 <__ieee754_exp>
 800bbf6:	4b22      	ldr	r3, [pc, #136]	; (800bc80 <exp+0x98>)
 800bbf8:	eeb0 8a40 	vmov.f32	s16, s0
 800bbfc:	eef0 8a60 	vmov.f32	s17, s1
 800bc00:	f993 3000 	ldrsb.w	r3, [r3]
 800bc04:	3301      	adds	r3, #1
 800bc06:	d012      	beq.n	800bc2e <exp+0x46>
 800bc08:	ec45 4b10 	vmov	d0, r4, r5
 800bc0c:	f000 f9b6 	bl	800bf7c <finite>
 800bc10:	b168      	cbz	r0, 800bc2e <exp+0x46>
 800bc12:	a313      	add	r3, pc, #76	; (adr r3, 800bc60 <exp+0x78>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	f7f4 ffa4 	bl	8000b68 <__aeabi_dcmpgt>
 800bc20:	b160      	cbz	r0, 800bc3c <exp+0x54>
 800bc22:	f7fd fac5 	bl	80091b0 <__errno>
 800bc26:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800bc68 <exp+0x80>
 800bc2a:	2322      	movs	r3, #34	; 0x22
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	eeb0 0a48 	vmov.f32	s0, s16
 800bc32:	eef0 0a68 	vmov.f32	s1, s17
 800bc36:	ecbd 8b02 	vpop	{d8}
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	a30c      	add	r3, pc, #48	; (adr r3, 800bc70 <exp+0x88>)
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	4620      	mov	r0, r4
 800bc44:	4629      	mov	r1, r5
 800bc46:	f7f4 ff71 	bl	8000b2c <__aeabi_dcmplt>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d0ef      	beq.n	800bc2e <exp+0x46>
 800bc4e:	f7fd faaf 	bl	80091b0 <__errno>
 800bc52:	2322      	movs	r3, #34	; 0x22
 800bc54:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800bc78 <exp+0x90>
 800bc58:	6003      	str	r3, [r0, #0]
 800bc5a:	e7e8      	b.n	800bc2e <exp+0x46>
 800bc5c:	f3af 8000 	nop.w
 800bc60:	fefa39ef 	.word	0xfefa39ef
 800bc64:	40862e42 	.word	0x40862e42
 800bc68:	00000000 	.word	0x00000000
 800bc6c:	7ff00000 	.word	0x7ff00000
 800bc70:	d52d3051 	.word	0xd52d3051
 800bc74:	c0874910 	.word	0xc0874910
	...
 800bc80:	200001dc 	.word	0x200001dc
 800bc84:	00000000 	.word	0x00000000

0800bc88 <__ieee754_exp>:
 800bc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc8c:	ec55 4b10 	vmov	r4, r5, d0
 800bc90:	49b1      	ldr	r1, [pc, #708]	; (800bf58 <__ieee754_exp+0x2d0>)
 800bc92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc96:	428b      	cmp	r3, r1
 800bc98:	ed2d 8b04 	vpush	{d8-d9}
 800bc9c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800bca0:	d937      	bls.n	800bd12 <__ieee754_exp+0x8a>
 800bca2:	49ae      	ldr	r1, [pc, #696]	; (800bf5c <__ieee754_exp+0x2d4>)
 800bca4:	428b      	cmp	r3, r1
 800bca6:	d916      	bls.n	800bcd6 <__ieee754_exp+0x4e>
 800bca8:	ee10 3a10 	vmov	r3, s0
 800bcac:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	d009      	beq.n	800bcc8 <__ieee754_exp+0x40>
 800bcb4:	ee10 2a10 	vmov	r2, s0
 800bcb8:	462b      	mov	r3, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7f4 fb0d 	bl	80002dc <__adddf3>
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	460d      	mov	r5, r1
 800bcc6:	e000      	b.n	800bcca <__ieee754_exp+0x42>
 800bcc8:	bb06      	cbnz	r6, 800bd0c <__ieee754_exp+0x84>
 800bcca:	ecbd 8b04 	vpop	{d8-d9}
 800bcce:	ec45 4b10 	vmov	d0, r4, r5
 800bcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd6:	a38a      	add	r3, pc, #552	; (adr r3, 800bf00 <__ieee754_exp+0x278>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	ee10 0a10 	vmov	r0, s0
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 ff41 	bl	8000b68 <__aeabi_dcmpgt>
 800bce6:	b138      	cbz	r0, 800bcf8 <__ieee754_exp+0x70>
 800bce8:	a387      	add	r3, pc, #540	; (adr r3, 800bf08 <__ieee754_exp+0x280>)
 800bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcee:	4610      	mov	r0, r2
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	f7f4 fca9 	bl	8000648 <__aeabi_dmul>
 800bcf6:	e7e4      	b.n	800bcc2 <__ieee754_exp+0x3a>
 800bcf8:	a385      	add	r3, pc, #532	; (adr r3, 800bf10 <__ieee754_exp+0x288>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 ff13 	bl	8000b2c <__aeabi_dcmplt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f000 8087 	beq.w	800be1a <__ieee754_exp+0x192>
 800bd0c:	2400      	movs	r4, #0
 800bd0e:	2500      	movs	r5, #0
 800bd10:	e7db      	b.n	800bcca <__ieee754_exp+0x42>
 800bd12:	4a93      	ldr	r2, [pc, #588]	; (800bf60 <__ieee754_exp+0x2d8>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	f240 80ac 	bls.w	800be72 <__ieee754_exp+0x1ea>
 800bd1a:	4a92      	ldr	r2, [pc, #584]	; (800bf64 <__ieee754_exp+0x2dc>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d87c      	bhi.n	800be1a <__ieee754_exp+0x192>
 800bd20:	4b91      	ldr	r3, [pc, #580]	; (800bf68 <__ieee754_exp+0x2e0>)
 800bd22:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2a:	ee10 0a10 	vmov	r0, s0
 800bd2e:	4629      	mov	r1, r5
 800bd30:	f7f4 fad2 	bl	80002d8 <__aeabi_dsub>
 800bd34:	4b8d      	ldr	r3, [pc, #564]	; (800bf6c <__ieee754_exp+0x2e4>)
 800bd36:	00f7      	lsls	r7, r6, #3
 800bd38:	443b      	add	r3, r7
 800bd3a:	ed93 7b00 	vldr	d7, [r3]
 800bd3e:	f1c6 0a01 	rsb	sl, r6, #1
 800bd42:	4680      	mov	r8, r0
 800bd44:	4689      	mov	r9, r1
 800bd46:	ebaa 0a06 	sub.w	sl, sl, r6
 800bd4a:	eeb0 8a47 	vmov.f32	s16, s14
 800bd4e:	eef0 8a67 	vmov.f32	s17, s15
 800bd52:	ec53 2b18 	vmov	r2, r3, d8
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 fabd 	bl	80002d8 <__aeabi_dsub>
 800bd5e:	4604      	mov	r4, r0
 800bd60:	460d      	mov	r5, r1
 800bd62:	4622      	mov	r2, r4
 800bd64:	462b      	mov	r3, r5
 800bd66:	4620      	mov	r0, r4
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7f4 fc6d 	bl	8000648 <__aeabi_dmul>
 800bd6e:	a36a      	add	r3, pc, #424	; (adr r3, 800bf18 <__ieee754_exp+0x290>)
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	4606      	mov	r6, r0
 800bd76:	460f      	mov	r7, r1
 800bd78:	f7f4 fc66 	bl	8000648 <__aeabi_dmul>
 800bd7c:	a368      	add	r3, pc, #416	; (adr r3, 800bf20 <__ieee754_exp+0x298>)
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	f7f4 faa9 	bl	80002d8 <__aeabi_dsub>
 800bd86:	4632      	mov	r2, r6
 800bd88:	463b      	mov	r3, r7
 800bd8a:	f7f4 fc5d 	bl	8000648 <__aeabi_dmul>
 800bd8e:	a366      	add	r3, pc, #408	; (adr r3, 800bf28 <__ieee754_exp+0x2a0>)
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f7f4 faa2 	bl	80002dc <__adddf3>
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	f7f4 fc54 	bl	8000648 <__aeabi_dmul>
 800bda0:	a363      	add	r3, pc, #396	; (adr r3, 800bf30 <__ieee754_exp+0x2a8>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fa97 	bl	80002d8 <__aeabi_dsub>
 800bdaa:	4632      	mov	r2, r6
 800bdac:	463b      	mov	r3, r7
 800bdae:	f7f4 fc4b 	bl	8000648 <__aeabi_dmul>
 800bdb2:	a361      	add	r3, pc, #388	; (adr r3, 800bf38 <__ieee754_exp+0x2b0>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa90 	bl	80002dc <__adddf3>
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	463b      	mov	r3, r7
 800bdc0:	f7f4 fc42 	bl	8000648 <__aeabi_dmul>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4620      	mov	r0, r4
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f7f4 fa84 	bl	80002d8 <__aeabi_dsub>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	460f      	mov	r7, r1
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 fc34 	bl	8000648 <__aeabi_dmul>
 800bde0:	ec41 0b19 	vmov	d9, r0, r1
 800bde4:	f1ba 0f00 	cmp.w	sl, #0
 800bde8:	d15d      	bne.n	800bea6 <__ieee754_exp+0x21e>
 800bdea:	2200      	movs	r2, #0
 800bdec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fa70 	bl	80002d8 <__aeabi_dsub>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	ec51 0b19 	vmov	r0, r1, d9
 800be00:	f7f4 fd4c 	bl	800089c <__aeabi_ddiv>
 800be04:	4622      	mov	r2, r4
 800be06:	462b      	mov	r3, r5
 800be08:	f7f4 fa66 	bl	80002d8 <__aeabi_dsub>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	2000      	movs	r0, #0
 800be12:	4957      	ldr	r1, [pc, #348]	; (800bf70 <__ieee754_exp+0x2e8>)
 800be14:	f7f4 fa60 	bl	80002d8 <__aeabi_dsub>
 800be18:	e753      	b.n	800bcc2 <__ieee754_exp+0x3a>
 800be1a:	4856      	ldr	r0, [pc, #344]	; (800bf74 <__ieee754_exp+0x2ec>)
 800be1c:	a348      	add	r3, pc, #288	; (adr r3, 800bf40 <__ieee754_exp+0x2b8>)
 800be1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be22:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800be26:	4629      	mov	r1, r5
 800be28:	4620      	mov	r0, r4
 800be2a:	f7f4 fc0d 	bl	8000648 <__aeabi_dmul>
 800be2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be32:	f7f4 fa53 	bl	80002dc <__adddf3>
 800be36:	f7f4 feb7 	bl	8000ba8 <__aeabi_d2iz>
 800be3a:	4682      	mov	sl, r0
 800be3c:	f7f4 fb9a 	bl	8000574 <__aeabi_i2d>
 800be40:	a341      	add	r3, pc, #260	; (adr r3, 800bf48 <__ieee754_exp+0x2c0>)
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	4606      	mov	r6, r0
 800be48:	460f      	mov	r7, r1
 800be4a:	f7f4 fbfd 	bl	8000648 <__aeabi_dmul>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4620      	mov	r0, r4
 800be54:	4629      	mov	r1, r5
 800be56:	f7f4 fa3f 	bl	80002d8 <__aeabi_dsub>
 800be5a:	a33d      	add	r3, pc, #244	; (adr r3, 800bf50 <__ieee754_exp+0x2c8>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	4680      	mov	r8, r0
 800be62:	4689      	mov	r9, r1
 800be64:	4630      	mov	r0, r6
 800be66:	4639      	mov	r1, r7
 800be68:	f7f4 fbee 	bl	8000648 <__aeabi_dmul>
 800be6c:	ec41 0b18 	vmov	d8, r0, r1
 800be70:	e76f      	b.n	800bd52 <__ieee754_exp+0xca>
 800be72:	4a41      	ldr	r2, [pc, #260]	; (800bf78 <__ieee754_exp+0x2f0>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d811      	bhi.n	800be9c <__ieee754_exp+0x214>
 800be78:	a323      	add	r3, pc, #140	; (adr r3, 800bf08 <__ieee754_exp+0x280>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	ee10 0a10 	vmov	r0, s0
 800be82:	4629      	mov	r1, r5
 800be84:	f7f4 fa2a 	bl	80002dc <__adddf3>
 800be88:	4b39      	ldr	r3, [pc, #228]	; (800bf70 <__ieee754_exp+0x2e8>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	f7f4 fe6c 	bl	8000b68 <__aeabi_dcmpgt>
 800be90:	b138      	cbz	r0, 800bea2 <__ieee754_exp+0x21a>
 800be92:	4b37      	ldr	r3, [pc, #220]	; (800bf70 <__ieee754_exp+0x2e8>)
 800be94:	2200      	movs	r2, #0
 800be96:	4620      	mov	r0, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	e710      	b.n	800bcbe <__ieee754_exp+0x36>
 800be9c:	f04f 0a00 	mov.w	sl, #0
 800bea0:	e75f      	b.n	800bd62 <__ieee754_exp+0xda>
 800bea2:	4682      	mov	sl, r0
 800bea4:	e75d      	b.n	800bd62 <__ieee754_exp+0xda>
 800bea6:	4632      	mov	r2, r6
 800bea8:	463b      	mov	r3, r7
 800beaa:	2000      	movs	r0, #0
 800beac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800beb0:	f7f4 fa12 	bl	80002d8 <__aeabi_dsub>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	ec51 0b19 	vmov	r0, r1, d9
 800bebc:	f7f4 fcee 	bl	800089c <__aeabi_ddiv>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	ec51 0b18 	vmov	r0, r1, d8
 800bec8:	f7f4 fa06 	bl	80002d8 <__aeabi_dsub>
 800becc:	4642      	mov	r2, r8
 800bece:	464b      	mov	r3, r9
 800bed0:	f7f4 fa02 	bl	80002d8 <__aeabi_dsub>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	2000      	movs	r0, #0
 800beda:	4925      	ldr	r1, [pc, #148]	; (800bf70 <__ieee754_exp+0x2e8>)
 800bedc:	f7f4 f9fc 	bl	80002d8 <__aeabi_dsub>
 800bee0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800bee4:	4592      	cmp	sl, r2
 800bee6:	db02      	blt.n	800beee <__ieee754_exp+0x266>
 800bee8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800beec:	e6e9      	b.n	800bcc2 <__ieee754_exp+0x3a>
 800beee:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800bef2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800bef6:	2200      	movs	r2, #0
 800bef8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800befc:	e6f9      	b.n	800bcf2 <__ieee754_exp+0x6a>
 800befe:	bf00      	nop
 800bf00:	fefa39ef 	.word	0xfefa39ef
 800bf04:	40862e42 	.word	0x40862e42
 800bf08:	8800759c 	.word	0x8800759c
 800bf0c:	7e37e43c 	.word	0x7e37e43c
 800bf10:	d52d3051 	.word	0xd52d3051
 800bf14:	c0874910 	.word	0xc0874910
 800bf18:	72bea4d0 	.word	0x72bea4d0
 800bf1c:	3e663769 	.word	0x3e663769
 800bf20:	c5d26bf1 	.word	0xc5d26bf1
 800bf24:	3ebbbd41 	.word	0x3ebbbd41
 800bf28:	af25de2c 	.word	0xaf25de2c
 800bf2c:	3f11566a 	.word	0x3f11566a
 800bf30:	16bebd93 	.word	0x16bebd93
 800bf34:	3f66c16c 	.word	0x3f66c16c
 800bf38:	5555553e 	.word	0x5555553e
 800bf3c:	3fc55555 	.word	0x3fc55555
 800bf40:	652b82fe 	.word	0x652b82fe
 800bf44:	3ff71547 	.word	0x3ff71547
 800bf48:	fee00000 	.word	0xfee00000
 800bf4c:	3fe62e42 	.word	0x3fe62e42
 800bf50:	35793c76 	.word	0x35793c76
 800bf54:	3dea39ef 	.word	0x3dea39ef
 800bf58:	40862e41 	.word	0x40862e41
 800bf5c:	7fefffff 	.word	0x7fefffff
 800bf60:	3fd62e42 	.word	0x3fd62e42
 800bf64:	3ff0a2b1 	.word	0x3ff0a2b1
 800bf68:	0800c520 	.word	0x0800c520
 800bf6c:	0800c530 	.word	0x0800c530
 800bf70:	3ff00000 	.word	0x3ff00000
 800bf74:	0800c510 	.word	0x0800c510
 800bf78:	3e2fffff 	.word	0x3e2fffff

0800bf7c <finite>:
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	ed8d 0b00 	vstr	d0, [sp]
 800bf82:	9801      	ldr	r0, [sp, #4]
 800bf84:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bf88:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bf8c:	0fc0      	lsrs	r0, r0, #31
 800bf8e:	b002      	add	sp, #8
 800bf90:	4770      	bx	lr
	...

0800bf94 <_init>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_fini>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr
