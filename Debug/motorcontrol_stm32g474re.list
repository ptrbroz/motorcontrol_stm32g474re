
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d588  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017c8  0800d768  0800d768  0001d768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef30  0800ef30  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef30  0800ef30  0001ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef38  0800ef38  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef38  0800ef38  0001ef38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef3c  0800ef3c  0001ef3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800ef40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009398  20000208  0800f144  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200095a0  0800f144  000295a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e1a2  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bc8  00000000  00000000  0005e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020369  00000000  00000000  00064f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  00085308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003f10  00000000  00000000  000869e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da76  00000000  00000000  0008a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000316fa  00000000  00000000  000b836e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011b36b  00000000  00000000  000e9a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00204dd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065a0  00000000  00000000  00204e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d750 	.word	0x0800d750

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800d750 	.word	0x0800d750

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	2400      	movs	r4, #0
{
 8001040:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	4621      	mov	r1, r4
 8001044:	2220      	movs	r2, #32
 8001046:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001048:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800104c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	f007 ffd5 	bl	8008ffc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001054:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001058:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105c:	2204      	movs	r2, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800105e:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001060:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001066:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	e9c0 5100 	strd	r5, r1, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001072:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800107c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	6182      	str	r2, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	f003 fa9a 	bl	80045bc <HAL_ADC_Init>
 8001088:	b9c8      	cbnz	r0, 80010be <MX_ADC1_Init+0x82>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108a:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC1_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001090:	a901      	add	r1, sp, #4
 8001092:	f003 ff15 	bl	8004ec0 <HAL_ADCEx_MultiModeConfigChannel>
 8001096:	b9c8      	cbnz	r0, 80010cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_6;
 800109c:	2306      	movs	r3, #6
 800109e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010a2:	2400      	movs	r4, #0
 80010a4:	257f      	movs	r5, #127	; 0x7f
 80010a6:	2204      	movs	r2, #4
 80010a8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_6;
 80010ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80010b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	f003 fbae 	bl	8004814 <HAL_ADC_ConfigChannel>
 80010b8:	b920      	cbnz	r0, 80010c4 <MX_ADC1_Init+0x88>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ba:	b00d      	add	sp, #52	; 0x34
 80010bc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010be:	f002 fc75 	bl	80039ac <Error_Handler>
 80010c2:	e7e2      	b.n	800108a <MX_ADC1_Init+0x4e>
    Error_Handler();
 80010c4:	f002 fc72 	bl	80039ac <Error_Handler>
}
 80010c8:	b00d      	add	sp, #52	; 0x34
 80010ca:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010cc:	f002 fc6e 	bl	80039ac <Error_Handler>
 80010d0:	e7e2      	b.n	8001098 <MX_ADC1_Init+0x5c>
 80010d2:	bf00      	nop
 80010d4:	200002ac 	.word	0x200002ac
 80010d8:	19200040 	.word	0x19200040
 80010dc:	00000000 	.word	0x00000000

080010e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4668      	mov	r0, sp
 80010ea:	f007 ff87 	bl	8008ffc <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_ADC2_Init+0x88>)
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC2_Init+0x8c>)
 80010f2:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010f8:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010fa:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	2104      	movs	r1, #4
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 80010fe:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001100:	8383      	strh	r3, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	6181      	str	r1, [r0, #24]
  hadc2.Init.NbrOfConversion = 1;
 8001110:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001112:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001116:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001120:	f003 fa4c 	bl	80045bc <HAL_ADC_Init>
 8001124:	b998      	cbnz	r0, 800114e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001126:	a30e      	add	r3, pc, #56	; (adr r3, 8001160 <MX_ADC2_Init+0x80>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	2400      	movs	r4, #0
 800112e:	e9cd 2300 	strd	r2, r3, [sp]
 8001132:	257f      	movs	r5, #127	; 0x7f
 8001134:	2204      	movs	r2, #4
 8001136:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_ADC2_Init+0x88>)
 800113a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_7;
 800113c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001140:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001144:	f003 fb66 	bl	8004814 <HAL_ADC_ConfigChannel>
 8001148:	b920      	cbnz	r0, 8001154 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800114a:	b009      	add	sp, #36	; 0x24
 800114c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800114e:	f002 fc2d 	bl	80039ac <Error_Handler>
 8001152:	e7e8      	b.n	8001126 <MX_ADC2_Init+0x46>
    Error_Handler();
 8001154:	f002 fc2a 	bl	80039ac <Error_Handler>
}
 8001158:	b009      	add	sp, #36	; 0x24
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	1d500080 	.word	0x1d500080
 8001164:	00000006 	.word	0x00000006
 8001168:	20000240 	.word	0x20000240
 800116c:	50000100 	.word	0x50000100

08001170 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001170:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001172:	2400      	movs	r4, #0
{
 8001174:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	4621      	mov	r1, r4
 8001178:	2220      	movs	r2, #32
 800117a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800117c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001180:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	f007 ff3b 	bl	8008ffc <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <MX_ADC3_Init+0xa0>)
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_ADC3_Init+0xa4>)
 800118a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8001190:	2110      	movs	r1, #16
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.GainCompensation = 0;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8001194:	2301      	movs	r3, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001196:	8384      	strh	r4, [r0, #28]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 80011a0:	e9c0 5101 	strd	r5, r1, [r0, #4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a4:	60c4      	str	r4, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011aa:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ae:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011b0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b4:	6182      	str	r2, [r0, #24]
  hadc3.Init.NbrOfConversion = 1;
 80011b6:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b8:	f003 fa00 	bl	80045bc <HAL_ADC_Init>
 80011bc:	b9d0      	cbnz	r0, 80011f4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <MX_ADC3_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c2:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c4:	a901      	add	r1, sp, #4
 80011c6:	f003 fe7b 	bl	8004ec0 <HAL_ADCEx_MultiModeConfigChannel>
 80011ca:	b9d0      	cbnz	r0, 8001202 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011cc:	a30e      	add	r3, pc, #56	; (adr r3, 8001208 <MX_ADC3_Init+0x98>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	2407      	movs	r4, #7
 80011d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011d8:	257f      	movs	r5, #127	; 0x7f
 80011da:	2204      	movs	r2, #4
 80011dc:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_ADC3_Init+0xa0>)
 80011e0:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_12;
 80011e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80011e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ea:	f003 fb13 	bl	8004814 <HAL_ADC_ConfigChannel>
 80011ee:	b920      	cbnz	r0, 80011fa <MX_ADC3_Init+0x8a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f0:	b00d      	add	sp, #52	; 0x34
 80011f2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011f4:	f002 fbda 	bl	80039ac <Error_Handler>
 80011f8:	e7e1      	b.n	80011be <MX_ADC3_Init+0x4e>
    Error_Handler();
 80011fa:	f002 fbd7 	bl	80039ac <Error_Handler>
}
 80011fe:	b00d      	add	sp, #52	; 0x34
 8001200:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001202:	f002 fbd3 	bl	80039ac <Error_Handler>
 8001206:	e7e1      	b.n	80011cc <MX_ADC3_Init+0x5c>
 8001208:	32601000 	.word	0x32601000
 800120c:	00000006 	.word	0x00000006
 8001210:	20000318 	.word	0x20000318
 8001214:	50000400 	.word	0x50000400

08001218 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001218:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800121a:	6802      	ldr	r2, [r0, #0]
{
 800121c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8001220:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001228:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800122c:	930a      	str	r3, [sp, #40]	; 0x28
  if(adcHandle->Instance==ADC1)
 800122e:	d023      	beq.n	8001278 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001230:	4939      	ldr	r1, [pc, #228]	; (8001318 <HAL_ADC_MspInit+0x100>)
 8001232:	428a      	cmp	r2, r1
 8001234:	d004      	beq.n	8001240 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001236:	4939      	ldr	r1, [pc, #228]	; (800131c <HAL_ADC_MspInit+0x104>)
 8001238:	428a      	cmp	r2, r1
 800123a:	d04f      	beq.n	80012dc <HAL_ADC_MspInit+0xc4>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800123c:	b00d      	add	sp, #52	; 0x34
 800123e:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001240:	4a37      	ldr	r2, [pc, #220]	; (8001320 <HAL_ADC_MspInit+0x108>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001246:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124a:	d03c      	beq.n	80012c6 <HAL_ADC_MspInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_ADC_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	4836      	ldr	r0, [pc, #216]	; (8001328 <HAL_ADC_MspInit+0x110>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001252:	f042 0204 	orr.w	r2, r2, #4
 8001256:	64da      	str	r2, [r3, #76]	; 0x4c
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001260:	2202      	movs	r2, #2
 8001262:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001268:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f004 fd70 	bl	8005d54 <HAL_GPIO_Init>
}
 8001274:	b00d      	add	sp, #52	; 0x34
 8001276:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_ADC_MspInit+0x108>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800127e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001280:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001282:	d015      	beq.n	80012b0 <HAL_ADC_MspInit+0x98>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_ADC_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <HAL_ADC_MspInit+0x110>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800128a:	f042 0204 	orr.w	r2, r2, #4
 800128e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001298:	2201      	movs	r2, #1
 800129a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f004 fd54 	bl	8005d54 <HAL_GPIO_Init>
}
 80012ac:	b00d      	add	sp, #52	; 0x34
 80012ae:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_ADC_MspInit+0x10c>)
 80012b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]
 80012c4:	e7de      	b.n	8001284 <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_ADC_MspInit+0x10c>)
 80012c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	9b02      	ldr	r3, [sp, #8]
 80012da:	e7b7      	b.n	800124c <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012dc:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_ADC_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012e0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80012e2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80012e6:	64d1      	str	r1, [r2, #76]	; 0x4c
 80012e8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80012ea:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80012ee:	9104      	str	r1, [sp, #16]
 80012f0:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80012f4:	f041 0102 	orr.w	r1, r1, #2
 80012f8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80012fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	f002 0202 	and.w	r2, r2, #2
 8001302:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001304:	2303      	movs	r3, #3
 8001306:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f004 fd20 	bl	8005d54 <HAL_GPIO_Init>
}
 8001314:	e792      	b.n	800123c <HAL_ADC_MspInit+0x24>
 8001316:	bf00      	nop
 8001318:	50000100 	.word	0x50000100
 800131c:	50000400 	.word	0x50000400
 8001320:	20000224 	.word	0x20000224
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800
 800132c:	48000400 	.word	0x48000400

08001330 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001334:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001540 <order_phases+0x210>
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001338:	ed2d 8b02 	vpush	{d8}
	PHASE_ORDER = 0;
 800133c:	f04f 0900 	mov.w	r9, #0
 8001340:	f8c8 9000 	str.w	r9, [r8]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001344:	4614      	mov	r4, r2

	static int pf1, pf2, pf3, pf4, pf5;



	if(!cal->started){
 8001346:	7c12      	ldrb	r2, [r2, #16]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001348:	b085      	sub	sp, #20
 800134a:	4607      	mov	r7, r0
 800134c:	460e      	mov	r6, r1
 800134e:	461d      	mov	r5, r3
	if(!cal->started){
 8001350:	2a00      	cmp	r2, #0
 8001352:	f000 808f 	beq.w	8001474 <order_phases+0x144>
		printf("Checking phase sign, pole pairs\r\n");
		cal->started = 1;
		cal->start_count = loop_count;
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001356:	68e3      	ldr	r3, [r4, #12]
						}
					}
				}
			}
		}
		debugCounter++;
 8001358:	4a6b      	ldr	r2, [pc, #428]	; (8001508 <order_phases+0x1d8>)
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800135a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800150c <order_phases+0x1dc>
		return;
		//debug sine end
		}


    if(cal->time < T1){
 800135e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001510 <order_phases+0x1e0>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001362:	1aed      	subs	r5, r5, r3
 8001364:	ee07 5a90 	vmov	s15, r5
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		debugCounter++;
 800136c:	6813      	ldr	r3, [r2, #0]
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800136e:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 8001372:	eef4 7ae6 	vcmpe.f32	s15, s13
		debugCounter++;
 8001376:	3301      	adds	r3, #1
    if(cal->time < T1){
 8001378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800137c:	ed84 7a05 	vstr	s14, [r4, #20]
		debugCounter++;
 8001380:	6013      	str	r3, [r2, #0]
    if(cal->time < T1){
 8001382:	f100 80ba 	bmi.w	80014fa <order_phases+0x1ca>
        controller->i_q_des = 0.0f;
        commutate(controller, &cal->cal_position);
    	cal->theta_start = encoder->angle_multiturn[0];
    	return;
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 8001386:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001514 <order_phases+0x1e4>
 800138a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	d51c      	bpl.n	80013ce <order_phases+0x9e>
    	if(pf2){
 8001394:	4d60      	ldr	r5, [pc, #384]	; (8001518 <order_phases+0x1e8>)
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 80a6 	bne.w	80014ea <order_phases+0x1ba>
    	    printf("p2\n\r");
    	    pf2 = 0;
    	}
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 800139e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013a2:	ee37 7a67 	vsub.f32	s14, s14, s15
    	cal->cal_position.elec_angle = cal->theta_ref;
 80013a6:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80013aa:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80013ae:	ee27 7a27 	vmul.f32	s14, s14, s15
		commutate(controller, &cal->cal_position);
 80013b2:	4619      	mov	r1, r3
 80013b4:	4630      	mov	r0, r6
 80013b6:	312c      	adds	r1, #44	; 0x2c
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80013b8:	ed84 7a02 	vstr	s14, [r4, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80013bc:	ed83 7a22 	vstr	s14, [r3, #136]	; 0x88
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
    PHASE_ORDER = cal->phase_order;
    PPAIRS = (float)cal->ppairs;
    cal->started = 0;
    cal->done_ordering = 1;	// Finished checking phase order
}
 80013c0:	b005      	add	sp, #20
 80013c2:	ecbd 8b02 	vpop	{d8}
 80013c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		commutate(controller, &cal->cal_position);
 80013ca:	f001 b80d 	b.w	80023e8 <commutate>
	reset_foc(controller);
 80013ce:	4608      	mov	r0, r1
 80013d0:	f000 ff94 	bl	80022fc <reset_foc>
	float theta_end = encoder->angle_multiturn[0];
 80013d4:	ed97 8a03 	vldr	s16, [r7, #12]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80013d8:	edd4 8a06 	vldr	s17, [r4, #24]
 80013dc:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800151c <order_phases+0x1ec>
 80013e0:	ee78 7a68 	vsub.f32	s15, s16, s17
 80013e4:	eef0 7ae7 	vabs.f32	s15, s15
 80013e8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80013ec:	ee17 0a90 	vmov	r0, s15
 80013f0:	f7ff f8d2 	bl	8000598 <__aeabi_f2d>
 80013f4:	ec41 0b10 	vmov	d0, r0, r1
 80013f8:	f00b fee0 	bl	800d1bc <round>
 80013fc:	ec51 0b10 	vmov	r0, r1, d0
 8001400:	f7ff fbfa 	bl	8000bf8 <__aeabi_d2uiz>
	if(cal->theta_start < theta_end){
 8001404:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 800140c:	7020      	strb	r0, [r4, #0]
	if(cal->theta_start < theta_end){
 800140e:	d466      	bmi.n	80014de <order_phases+0x1ae>
		cal->phase_order = 1;
 8001410:	2301      	movs	r3, #1
		printf("Swapping phase sign\r\n");
 8001412:	4843      	ldr	r0, [pc, #268]	; (8001520 <order_phases+0x1f0>)
		cal->phase_order = 1;
 8001414:	f884 3020 	strb.w	r3, [r4, #32]
		printf("Swapping phase sign\r\n");
 8001418:	f008 fae8 	bl	80099ec <puts>
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 800141c:	7821      	ldrb	r1, [r4, #0]
 800141e:	4841      	ldr	r0, [pc, #260]	; (8001524 <order_phases+0x1f4>)
 8001420:	f008 fa5e 	bl	80098e0 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001424:	69a0      	ldr	r0, [r4, #24]
 8001426:	f7ff f8b7 	bl	8000598 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ee18 0a10 	vmov	r0, s16
 8001432:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001436:	f7ff f8af 	bl	8000598 <__aeabi_f2d>
 800143a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800143e:	e9cd 0100 	strd	r0, r1, [sp]
 8001442:	4839      	ldr	r0, [pc, #228]	; (8001528 <order_phases+0x1f8>)
 8001444:	f008 fa4c 	bl	80098e0 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001448:	f894 3020 	ldrb.w	r3, [r4, #32]
 800144c:	f8c8 3000 	str.w	r3, [r8]
    PPAIRS = (float)cal->ppairs;
 8001450:	7823      	ldrb	r3, [r4, #0]
 8001452:	4936      	ldr	r1, [pc, #216]	; (800152c <order_phases+0x1fc>)
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cal->started = 0;
 800145c:	2200      	movs	r2, #0
    cal->done_ordering = 1;	// Finished checking phase order
 800145e:	2301      	movs	r3, #1
    PPAIRS = (float)cal->ppairs;
 8001460:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
    cal->started = 0;
 8001464:	7422      	strb	r2, [r4, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001466:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800146a:	b005      	add	sp, #20
 800146c:	ecbd 8b02 	vpop	{d8}
 8001470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Checking phase sign, pole pairs\r\n");
 8001474:	482e      	ldr	r0, [pc, #184]	; (8001530 <order_phases+0x200>)
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 8001476:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001544 <order_phases+0x214>
		printf("Checking phase sign, pole pairs\r\n");
 800147a:	f008 fab7 	bl	80099ec <puts>
		debugCounter++;
 800147e:	4a22      	ldr	r2, [pc, #136]	; (8001508 <order_phases+0x1d8>)
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 8001480:	4825      	ldr	r0, [pc, #148]	; (8001518 <order_phases+0x1e8>)
		debugCounter++;
 8001482:	6813      	ldr	r3, [r2, #0]
		cal->start_count = loop_count;
 8001484:	60e5      	str	r5, [r4, #12]
		debugCounter++;
 8001486:	3301      	adds	r3, #1
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001488:	2100      	movs	r1, #0
		debugCounter++;
 800148a:	6013      	str	r3, [r2, #0]
		cal->started = 1;
 800148c:	2301      	movs	r3, #1
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 800148e:	6003      	str	r3, [r0, #0]
		cal->started = 1;
 8001490:	7423      	strb	r3, [r4, #16]
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 8001492:	f8c8 3000 	str.w	r3, [r8]
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001496:	6161      	str	r1, [r4, #20]
    		printf("p1\n\r");
 8001498:	4826      	ldr	r0, [pc, #152]	; (8001534 <order_phases+0x204>)
 800149a:	f008 fa21 	bl	80098e0 <iprintf>
    		pf1 = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c8 3000 	str.w	r3, [r8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80014a4:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
    	cal->theta_ref = 0;//W_CAL*cal->time;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        cal->cal_position.elec_velocity = 0;
 80014b0:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        controller->i_d_des = I_CAL;
 80014b4:	491d      	ldr	r1, [pc, #116]	; (800152c <order_phases+0x1fc>)
        cal->cal_position.elec_velocity = 0;
 80014b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        controller->i_d_des = I_CAL;
 80014ba:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80014bc:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
        commutate(controller, &cal->cal_position);
 80014c0:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 80014c4:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80014c8:	4630      	mov	r0, r6
 80014ca:	312c      	adds	r1, #44	; 0x2c
 80014cc:	f000 ff8c 	bl	80023e8 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	61a3      	str	r3, [r4, #24]
}
 80014d4:	b005      	add	sp, #20
 80014d6:	ecbd 8b02 	vpop	{d8}
 80014da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cal->phase_order = 0;
 80014de:	f884 9020 	strb.w	r9, [r4, #32]
		printf("Phase order correct\r\n");
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <order_phases+0x208>)
 80014e4:	f008 fa82 	bl	80099ec <puts>
 80014e8:	e798      	b.n	800141c <order_phases+0xec>
    	    printf("p2\n\r");
 80014ea:	4814      	ldr	r0, [pc, #80]	; (800153c <order_phases+0x20c>)
 80014ec:	f008 f9f8 	bl	80098e0 <iprintf>
    	    pf2 = 0;
 80014f0:	ed94 7a05 	vldr	s14, [r4, #20]
 80014f4:	f8c5 9000 	str.w	r9, [r5]
 80014f8:	e751      	b.n	800139e <order_phases+0x6e>
    	if(pf1){
 80014fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001544 <order_phases+0x214>
 80014fe:	f8d8 3000 	ldr.w	r3, [r8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0ce      	beq.n	80014a4 <order_phases+0x174>
 8001506:	e7c7      	b.n	8001498 <order_phases+0x168>
 8001508:	20000228 	.word	0x20000228
 800150c:	3812ccf7 	.word	0x3812ccf7
 8001510:	46df36db 	.word	0x46df36db
 8001514:	4735bb63 	.word	0x4735bb63
 8001518:	20000230 	.word	0x20000230
 800151c:	40c90fdb 	.word	0x40c90fdb
 8001520:	0800d7b4 	.word	0x0800d7b4
 8001524:	0800d7cc 	.word	0x0800d7cc
 8001528:	0800d7e0 	.word	0x0800d7e0
 800152c:	2000068c 	.word	0x2000068c
 8001530:	0800d768 	.word	0x0800d768
 8001534:	0800d78c 	.word	0x0800d78c
 8001538:	0800d79c 	.word	0x0800d79c
 800153c:	0800d794 	.word	0x0800d794
 8001540:	20008f3c 	.word	0x20008f3c
 8001544:	2000022c 	.word	0x2000022c

08001548 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800154c:	ed2d 8b02 	vpush	{d8}
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001550:	7c17      	ldrb	r7, [r2, #16]
void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001552:	b082      	sub	sp, #8
 8001554:	4614      	mov	r4, r2
 8001556:	4680      	mov	r8, r0
 8001558:	460d      	mov	r5, r1
 800155a:	461e      	mov	r6, r3
	if(!cal->started){
 800155c:	2f00      	cmp	r7, #0
 800155e:	f000 80cf 	beq.w	8001700 <calibrate_encoder+0x1b8>
			cal->start_count = loop_count;
			cal->next_sample_time = T1;
			cal->sample_count = 0;
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001562:	68d3      	ldr	r3, [r2, #12]
 8001564:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 80018c8 <calibrate_encoder+0x380>

    if(cal->time < T1){
 8001568:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80018cc <calibrate_encoder+0x384>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800156c:	1af6      	subs	r6, r6, r3
 800156e:	ee07 6a90 	vmov	s15, r6
 8001572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001576:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 800157a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001582:	ed82 7a05 	vstr	s14, [r2, #20]
    if(cal->time < T1){
 8001586:	f100 80c7 	bmi.w	8001718 <calibrate_encoder+0x1d0>

    	cal->theta_start = encoder->angle_multiturn[0];
    	cal->next_sample_time = cal->time;
    	return;
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 800158a:	4ed1      	ldr	r6, [pc, #836]	; (80018d0 <calibrate_encoder+0x388>)
 800158c:	ed9f 6ad1 	vldr	s12, [pc, #836]	; 80018d4 <calibrate_encoder+0x38c>
 8001590:	edd6 6a0a 	vldr	s13, [r6, #40]	; 0x28
 8001594:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001598:	eef0 5a67 	vmov.f32	s11, s15
 800159c:	eee6 5a86 	vfma.f32	s11, s13, s12
 80015a0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	f100 80d2 	bmi.w	8001750 <calibrate_encoder+0x208>
			cal->sample_count++;

		}
		return;
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80015ac:	ed9f 6aca 	vldr	s12, [pc, #808]	; 80018d8 <calibrate_encoder+0x390>
 80015b0:	eee6 7a86 	vfma.f32	s15, s13, s12
 80015b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	f100 8126 	bmi.w	800180c <calibrate_encoder+0x2c4>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
    }

    reset_foc(controller);
 80015c0:	4608      	mov	r0, r1
 80015c2:	f000 fe9b 	bl	80022fc <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015c6:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80015ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80015ce:	ee17 3a10 	vmov	r3, s14
 80015d2:	01da      	lsls	r2, r3, #7
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	f340 8173 	ble.w	80018c0 <calibrate_encoder+0x378>
 80015da:	eb04 2343 	add.w	r3, r4, r3, lsl #9
 80015de:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80015e2:	f104 0128 	add.w	r1, r4, #40	; 0x28
    int ezero_mean = 0;
 80015e6:	2300      	movs	r3, #0
		ezero_mean += cal->error_arr[i];
 80015e8:	f851 0f04 	ldr.w	r0, [r1, #4]!
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015ec:	4291      	cmp	r1, r2
		ezero_mean += cal->error_arr[i];
 80015ee:	4403      	add	r3, r0
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015f0:	d1fa      	bne.n	80015e8 <calibrate_encoder+0xa0>
 80015f2:	ee07 3a10 	vmov	s14, r3
 80015f6:	eeba 7aec 	vcvt.f32.s32	s14, s14, #7
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80015fa:	eec7 6a27 	vdiv.f32	s13, s14, s15

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80015fe:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
			}
			moving_avg = moving_avg/window;
			int lut_index = lut_offset + i;
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001600:	4fb6      	ldr	r7, [pc, #728]	; (80018dc <calibrate_encoder+0x394>)
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001602:	f5d5 3580 	rsbs	r5, r5, #65536	; 0x10000
 8001606:	bf48      	it	mi
 8001608:	f205 15ff 	addwmi	r5, r5, #511	; 0x1ff
 800160c:	126d      	asrs	r5, r5, #9
	for(int i = 0; i<N_LUT; i++){
 800160e:	f04f 0800 	mov.w	r8, #0
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001612:	eddf 8ab3 	vldr	s17, [pc, #716]	; 80018e0 <calibrate_encoder+0x398>
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001616:	eebd 7ae6 	vcvt.s32.f32	s14, s13
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800161a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 800161e:	ee17 2a10 	vmov	r2, s14
 8001622:	ed84 7a07 	vstr	s14, [r4, #28]
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001626:	ee07 8a10 	vmov	s14, r8
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800162a:	ee27 6aa8 	vmul.f32	s12, s15, s17
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 800162e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001632:	ee36 5a48 	vsub.f32	s10, s12, s16
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001636:	ee65 5aa7 	vmul.f32	s11, s11, s15
			for(int j = (-window)/2; j<(window)/2; j++){
 800163a:	f06f 013f 	mvn.w	r1, #63	; 0x3f
			int moving_avg = 0;
 800163e:	2000      	movs	r0, #0
 8001640:	e011      	b.n	8001666 <calibrate_encoder+0x11e>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001642:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001646:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	bf48      	it	mi
 8001650:	eefd 7ae6 	vcvtmi.s32.f32	s15, s13
				moving_avg += cal->error_arr[index];
 8001654:	ee17 3a90 	vmov	r3, s15
 8001658:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			for(int j = (-window)/2; j<(window)/2; j++){
 800165c:	3101      	adds	r1, #1
				moving_avg += cal->error_arr[index];
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			for(int j = (-window)/2; j<(window)/2; j++){
 8001660:	2940      	cmp	r1, #64	; 0x40
				moving_avg += cal->error_arr[index];
 8001662:	4418      	add	r0, r3
			for(int j = (-window)/2; j<(window)/2; j++){
 8001664:	d012      	beq.n	800168c <calibrate_encoder+0x144>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001666:	ee07 1a90 	vmov	s15, r1
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001676:	ee17 3a90 	vmov	r3, s15
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800167a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 800167e:	2b00      	cmp	r3, #0
 8001680:	ee36 7a86 	vadd.f32	s14, s13, s12
 8001684:	dadd      	bge.n	8001642 <calibrate_encoder+0xfa>
 8001686:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800168a:	e7e3      	b.n	8001654 <calibrate_encoder+0x10c>
			moving_avg = moving_avg/window;
 800168c:	2800      	cmp	r0, #0
 800168e:	bfb8      	it	lt
 8001690:	307f      	addlt	r0, #127	; 0x7f
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001692:	2d7f      	cmp	r5, #127	; 0x7f
			moving_avg = moving_avg/window;
 8001694:	ea4f 10e0 	mov.w	r0, r0, asr #7
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001698:	dd16      	ble.n	80016c8 <calibrate_encoder+0x180>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 800169a:	f505 53fc 	add.w	r3, r5, #8064	; 0x1f80
 800169e:	330a      	adds	r3, #10
 80016a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016a4:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016a6:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
	for(int i = 0; i<N_LUT; i++){
 80016aa:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016ae:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016b0:	4638      	mov	r0, r7
 80016b2:	f008 f915 	bl	80098e0 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 80016b6:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80016ba:	f105 0501 	add.w	r5, r5, #1
 80016be:	d015      	beq.n	80016ec <calibrate_encoder+0x1a4>
 80016c0:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80016c4:	69e2      	ldr	r2, [r4, #28]
 80016c6:	e7ae      	b.n	8001626 <calibrate_encoder+0xde>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016c8:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 80016cc:	330a      	adds	r3, #10
 80016ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016d2:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016d4:	4629      	mov	r1, r5
	for(int i = 0; i<N_LUT; i++){
 80016d6:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016da:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016dc:	4638      	mov	r0, r7
 80016de:	f008 f8ff 	bl	80098e0 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 80016e2:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80016e6:	f105 0501 	add.w	r5, r5, #1
 80016ea:	d1e9      	bne.n	80016c0 <calibrate_encoder+0x178>

		}

	cal->started = 0;
 80016ec:	2200      	movs	r2, #0
	cal->done_cal = 1;
 80016ee:	2301      	movs	r3, #1
	cal->started = 0;
 80016f0:	7422      	strb	r2, [r4, #16]
	cal->done_cal = 1;
 80016f2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80016f6:	b002      	add	sp, #8
 80016f8:	ecbd 8b02 	vpop	{d8}
 80016fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Starting offset cal and linearization\r\n");
 8001700:	4878      	ldr	r0, [pc, #480]	; (80018e4 <calibrate_encoder+0x39c>)
 8001702:	f008 f973 	bl	80099ec <puts>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001706:	2100      	movs	r1, #0
			cal->started = 1;
 8001708:	2201      	movs	r2, #1
			cal->next_sample_time = T1;
 800170a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
			cal->start_count = loop_count;
 800170e:	60e6      	str	r6, [r4, #12]
			cal->sample_count = 0;
 8001710:	84a7      	strh	r7, [r4, #36]	; 0x24
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001712:	6161      	str	r1, [r4, #20]
			cal->started = 1;
 8001714:	7422      	strb	r2, [r4, #16]
			cal->next_sample_time = T1;
 8001716:	62a3      	str	r3, [r4, #40]	; 0x28
        cal->cal_position.elec_angle = cal->theta_ref;
 8001718:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        cal->theta_ref = 0;//W_CAL*cal->time;
 800171c:	2300      	movs	r3, #0
        controller->i_d_des = I_CAL;
 800171e:	496c      	ldr	r1, [pc, #432]	; (80018d0 <calibrate_encoder+0x388>)
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001720:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001722:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        controller->i_d_des = I_CAL;
 8001726:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8001728:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
        commutate(controller, &cal->cal_position);
 800172c:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 8001730:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001734:	4628      	mov	r0, r5
 8001736:	312c      	adds	r1, #44	; 0x2c
 8001738:	f000 fe56 	bl	80023e8 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 800173c:	f8d8 200c 	ldr.w	r2, [r8, #12]
    	cal->next_sample_time = cal->time;
 8001740:	6963      	ldr	r3, [r4, #20]
    	cal->theta_start = encoder->angle_multiturn[0];
 8001742:	61a2      	str	r2, [r4, #24]
    	cal->next_sample_time = cal->time;
 8001744:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001746:	b002      	add	sp, #8
 8001748:	ecbd 8b02 	vpop	{d8}
 800174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001750:	edd2 7a02 	vldr	s15, [r2, #8]
 8001754:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80018e8 <calibrate_encoder+0x3a0>
		cal->cal_position.elec_angle = cal->theta_ref;
 8001758:	f502 4302 	add.w	r3, r2, #33280	; 0x8200
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 800175c:	ee77 7a87 	vadd.f32	s15, s15, s14
		commutate(controller, &cal->cal_position);
 8001760:	4619      	mov	r1, r3
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001762:	edc2 7a02 	vstr	s15, [r2, #8]
		commutate(controller, &cal->cal_position);
 8001766:	4628      	mov	r0, r5
		cal->cal_position.elec_angle = cal->theta_ref;
 8001768:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 800176c:	312c      	adds	r1, #44	; 0x2c
 800176e:	f000 fe3b 	bl	80023e8 <commutate>
		if(cal->time > cal->next_sample_time){
 8001772:	ed94 7a05 	vldr	s14, [r4, #20]
 8001776:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800177a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	ddb8      	ble.n	80016f6 <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001784:	ed94 7a02 	vldr	s14, [r4, #8]
 8001788:	eddf 7a58 	vldr	s15, [pc, #352]	; 80018ec <calibrate_encoder+0x3a4>
 800178c:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001790:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001794:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001798:	ee67 7a27 	vmul.f32	s15, s14, s15
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800179c:	eb04 0288 	add.w	r2, r4, r8, lsl #2
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017a0:	eec7 6a86 	vdiv.f32	s13, s15, s12
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017a4:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017a8:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80017ac:	ee17 7a90 	vmov	r7, s15
			int error = encoder->raw - count_ref;//- encoder->raw;
 80017b0:	1bdb      	subs	r3, r3, r7
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017b2:	13dd      	asrs	r5, r3, #15
 80017b4:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 80017b8:	441d      	add	r5, r3
 80017ba:	62d5      	str	r5, [r2, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017bc:	f7fe feec 	bl	8000598 <__aeabi_f2d>
 80017c0:	462b      	mov	r3, r5
 80017c2:	e9cd 0100 	strd	r0, r1, [sp]
 80017c6:	463a      	mov	r2, r7
 80017c8:	4849      	ldr	r0, [pc, #292]	; (80018f0 <calibrate_encoder+0x3a8>)
 80017ca:	4641      	mov	r1, r8
 80017cc:	f008 f888 	bl	80098e0 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017d0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80017d4:	eddf 7a47 	vldr	s15, [pc, #284]	; 80018f4 <calibrate_encoder+0x3ac>
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017d8:	eddf 6a41 	vldr	s13, [pc, #260]	; 80018e0 <calibrate_encoder+0x398>
 80017dc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017de:	ee37 7a27 	vadd.f32	s14, s14, s15
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017ea:	ed96 7a0a 	vldr	s14, [r6, #40]	; 0x28
 80017ee:	eee7 7a26 	vfma.f32	s15, s14, s13
 80017f2:	ee07 3a10 	vmov	s14, r3
 80017f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	f43f af78 	beq.w	80016f6 <calibrate_encoder+0x1ae>
			cal->sample_count++;
 8001806:	3301      	adds	r3, #1
 8001808:	84a3      	strh	r3, [r4, #36]	; 0x24
 800180a:	e774      	b.n	80016f6 <calibrate_encoder+0x1ae>
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800180c:	edd2 7a02 	vldr	s15, [r2, #8]
 8001810:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80018e8 <calibrate_encoder+0x3a0>
 8001814:	ee77 7ac7 	vsub.f32	s15, s15, s14
		controller->i_q_des = 0.0f;
 8001818:	2300      	movs	r3, #0
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800181a:	edc2 7a02 	vstr	s15, [r2, #8]
		controller->i_d_des = I_CAL;
 800181e:	6cb2      	ldr	r2, [r6, #72]	; 0x48
		controller->i_q_des = 0.0f;
 8001820:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001824:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
		controller->i_d_des = I_CAL;
 8001828:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		commutate(controller, &cal->cal_position);
 800182c:	4619      	mov	r1, r3
		cal->cal_position.elec_angle = cal->theta_ref;
 800182e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 8001832:	4628      	mov	r0, r5
 8001834:	312c      	adds	r1, #44	; 0x2c
 8001836:	f000 fdd7 	bl	80023e8 <commutate>
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800183a:	ed94 7a05 	vldr	s14, [r4, #20]
 800183e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8001842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	f77f af54 	ble.w	80016f6 <calibrate_encoder+0x1ae>
 800184e:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 8001850:	2f00      	cmp	r7, #0
 8001852:	f43f af50 	beq.w	80016f6 <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001856:	ed94 7a02 	vldr	s14, [r4, #8]
 800185a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80018ec <calibrate_encoder+0x3a4>
 800185e:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001862:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 800186e:	eec7 6a86 	vdiv.f32	s13, s15, s12
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001872:	6aca      	ldr	r2, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001874:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001878:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800187c:	ee17 6a90 	vmov	r6, s15
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001880:	1b9b      	subs	r3, r3, r6
			error = error + ENC_CPR*(error<0);
 8001882:	13dd      	asrs	r5, r3, #15
 8001884:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 8001888:	441d      	add	r5, r3
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800188a:	4415      	add	r5, r2
 800188c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001890:	106d      	asrs	r5, r5, #1
 8001892:	62cd      	str	r5, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001894:	f7fe fe80 	bl	8000598 <__aeabi_f2d>
 8001898:	462b      	mov	r3, r5
 800189a:	e9cd 0100 	strd	r0, r1, [sp]
 800189e:	4632      	mov	r2, r6
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <calibrate_encoder+0x3a8>)
 80018a2:	4639      	mov	r1, r7
 80018a4:	f008 f81c 	bl	80098e0 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018a8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80018ac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80018f4 <calibrate_encoder+0x3ac>
			cal->sample_count--;
 80018b0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018b2:	ee77 7a87 	vadd.f32	s15, s15, s14
			cal->sample_count--;
 80018b6:	3b01      	subs	r3, #1
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018b8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
			cal->sample_count--;
 80018bc:	84a3      	strh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018be:	e71a      	b.n	80016f6 <calibrate_encoder+0x1ae>
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80018c0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80018f8 <calibrate_encoder+0x3b0>
 80018c4:	e699      	b.n	80015fa <calibrate_encoder+0xb2>
 80018c6:	bf00      	nop
 80018c8:	3812ccf7 	.word	0x3812ccf7
 80018cc:	46df36db 	.word	0x46df36db
 80018d0:	2000068c 	.word	0x2000068c
 80018d4:	3f20d97c 	.word	0x3f20d97c
 80018d8:	3fa0d97c 	.word	0x3fa0d97c
 80018dc:	0800d834 	.word	0x0800d834
 80018e0:	43000000 	.word	0x43000000
 80018e4:	0800d7fc 	.word	0x0800d7fc
 80018e8:	39b78035 	.word	0x39b78035
 80018ec:	4622f983 	.word	0x4622f983
 80018f0:	0800d824 	.word	0x0800d824
 80018f4:	3ba0d97c 	.word	0x3ba0d97c
 80018f8:	00000000 	.word	0x00000000

080018fc <drv_write_DCR>:
}
void drv_write_register(DRVStruct drv, int reg, int val){
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, (reg<<11)|val);
}
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018fc:	b530      	push	{r4, r5, lr}
 80018fe:	b085      	sub	sp, #20
 8001900:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001904:	ea44 2242 	orr.w	r2, r4, r2, lsl #9
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001908:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800190a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800190e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001910:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001916:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800191a:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800191c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001920:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001922:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 8001926:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800192a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800192e:	ac02      	add	r4, sp, #8
 8001930:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001938:	2200      	movs	r2, #0
 800193a:	2110      	movs	r1, #16
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001940:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001944:	f004 fafa 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <drv_write_DCR+0x78>)
 800194e:	2301      	movs	r3, #1
 8001950:	4621      	mov	r1, r4
 8001952:	f10d 020a 	add.w	r2, sp, #10
 8001956:	f005 fa49 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <drv_write_DCR+0x78>)
 800195c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001960:	2a02      	cmp	r2, #2
 8001962:	d0fb      	beq.n	800195c <drv_write_DCR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001964:	2201      	movs	r2, #1
 8001966:	2110      	movs	r1, #16
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f004 fae6 	bl	8005f3c <HAL_GPIO_WritePin>
	uint16_t mask = 0x07FF;
	//printf("spi w %d, data being %d \n\r", val, (val&mask));
	uint16_t retval = drv_spi_write(&drv, val);
	//printf("loop retval = %d\n\r", (retval&mask));
}
 8001970:	b005      	add	sp, #20
 8001972:	bd30      	pop	{r4, r5, pc}
 8001974:	2000944c 	.word	0x2000944c

08001978 <drv_write_OCPCR>:
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001978:	b530      	push	{r4, r5, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001980:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001984:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001986:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800198a:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
 800198e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001992:	ac02      	add	r4, sp, #8
 8001994:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001998:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 800199c:	2200      	movs	r2, #0
 800199e:	2110      	movs	r1, #16
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 80019a4:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 80019a8:	f004 fac8 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 80019ac:	2364      	movs	r3, #100	; 0x64
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <drv_write_OCPCR+0x60>)
 80019b2:	2301      	movs	r3, #1
 80019b4:	4621      	mov	r1, r4
 80019b6:	f10d 020a 	add.w	r2, sp, #10
 80019ba:	f005 fa17 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <drv_write_OCPCR+0x60>)
 80019c0:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80019c4:	2a02      	cmp	r2, #2
 80019c6:	d0fb      	beq.n	80019c0 <drv_write_OCPCR+0x48>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80019c8:	2201      	movs	r2, #1
 80019ca:	2110      	movs	r1, #16
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f004 fab4 	bl	8005f3c <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 80019d4:	b005      	add	sp, #20
 80019d6:	bd30      	pop	{r4, r5, pc}
 80019d8:	2000944c 	.word	0x2000944c

080019dc <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019dc:	b530      	push	{r4, r5, lr}
 80019de:	b085      	sub	sp, #20
 80019e0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019e4:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019ea:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019f0:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019fc:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001a00:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001a02:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001a06:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001a0a:	ea42 2343 	orr.w	r3, r2, r3, lsl #9
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001a0e:	ac02      	add	r4, sp, #8
 8001a10:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001a14:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a20:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a24:	f004 fa8a 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <drv_write_CSACR+0x78>)
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4621      	mov	r1, r4
 8001a32:	f10d 020a 	add.w	r2, sp, #10
 8001a36:	f005 f9d9 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <drv_write_CSACR+0x78>)
 8001a3c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001a40:	2a02      	cmp	r2, #2
 8001a42:	d0fb      	beq.n	8001a3c <drv_write_CSACR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001a44:	2201      	movs	r2, #1
 8001a46:	2110      	movs	r1, #16
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f004 fa76 	bl	8005f3c <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 8001a50:	b005      	add	sp, #20
 8001a52:	bd30      	pop	{r4, r5, pc}
 8001a54:	2000944c 	.word	0x2000944c

08001a58 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8001a58:	b530      	push	{r4, r5, lr}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	ac02      	add	r4, sp, #8
 8001a5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a62:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001a66:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001a6a:	9004      	str	r0, [sp, #16]
 8001a6c:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a70:	2200      	movs	r2, #0
 8001a72:	2110      	movs	r1, #16
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a78:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a7c:	f004 fa5e 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a80:	2364      	movs	r3, #100	; 0x64
 8001a82:	481d      	ldr	r0, [pc, #116]	; (8001af8 <drv_enable_gd+0xa0>)
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	a904      	add	r1, sp, #16
 8001a88:	f10d 0212 	add.w	r2, sp, #18
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	4605      	mov	r5, r0
 8001a90:	f005 f9ac 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001a94:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d0fb      	beq.n	8001a94 <drv_enable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f004 fa4a 	bl	8005f3c <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001aa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001ab0:	f8ad 1014 	strh.w	r1, [sp, #20]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
	drv_spi_write(&drv, (reg<<11)|val);
 8001ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001abc:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001ac6:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001aca:	f004 fa37 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001ace:	2364      	movs	r3, #100	; 0x64
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <drv_enable_gd+0xa0>)
 8001ad4:	f10d 0212 	add.w	r2, sp, #18
 8001ad8:	a904      	add	r1, sp, #16
 8001ada:	2301      	movs	r3, #1
 8001adc:	f005 f986 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001ae0:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d0fb      	beq.n	8001ae0 <drv_enable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2110      	movs	r1, #16
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f004 fa24 	bl	8005f3c <HAL_GPIO_WritePin>
}
 8001af4:	b007      	add	sp, #28
 8001af6:	bd30      	pop	{r4, r5, pc}
 8001af8:	2000944c 	.word	0x2000944c

08001afc <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8001afc:	b530      	push	{r4, r5, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	ac02      	add	r4, sp, #8
 8001b02:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b06:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001b0a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001b0e:	9004      	str	r0, [sp, #16]
 8001b10:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b14:	2200      	movs	r2, #0
 8001b16:	2110      	movs	r1, #16
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b1c:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b20:	f004 fa0c 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b24:	2364      	movs	r3, #100	; 0x64
 8001b26:	481d      	ldr	r0, [pc, #116]	; (8001b9c <drv_disable_gd+0xa0>)
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	a904      	add	r1, sp, #16
 8001b2c:	f10d 0212 	add.w	r2, sp, #18
 8001b30:	2301      	movs	r3, #1
 8001b32:	4605      	mov	r5, r0
 8001b34:	f005 f95a 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b38:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d0fb      	beq.n	8001b38 <drv_disable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b40:	2201      	movs	r2, #1
 8001b42:	2110      	movs	r1, #16
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f004 f9f8 	bl	8005f3c <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b50:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001b54:	f8ad 1014 	strh.w	r1, [sp, #20]
	drv_spi_write(&drv, (reg<<11)|val);
 8001b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b62:	2200      	movs	r2, #0
 8001b64:	2110      	movs	r1, #16
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b6a:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b6e:	f004 f9e5 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b72:	2364      	movs	r3, #100	; 0x64
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4809      	ldr	r0, [pc, #36]	; (8001b9c <drv_disable_gd+0xa0>)
 8001b78:	f10d 0212 	add.w	r2, sp, #18
 8001b7c:	a904      	add	r1, sp, #16
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f005 f934 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b84:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d0fb      	beq.n	8001b84 <drv_disable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2110      	movs	r1, #16
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b94:	f004 f9d2 	bl	8005f3c <HAL_GPIO_WritePin>
}
 8001b98:	b007      	add	sp, #28
 8001b9a:	bd30      	pop	{r4, r5, pc}
 8001b9c:	2000944c 	.word	0x2000944c

08001ba0 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <MX_FDCAN2_Init+0x40>)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_FDCAN2_Init+0x44>)
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ba4:	2200      	movs	r2, #0
{
 8001ba6:	b510      	push	{r4, lr}
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 1;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 12;
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001ba8:	2103      	movs	r1, #3
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001baa:	240c      	movs	r4, #12
  hfdcan2.Instance = FDCAN2;
 8001bac:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001bae:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.NominalPrescaler = 1;
 8001bb0:	2301      	movs	r3, #1
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001bb2:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001bb6:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001bba:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hfdcan2.Init.DataTimeSeg1 = 12;
  hfdcan2.Init.DataTimeSeg2 = 3;
  hfdcan2.Init.StdFiltersNbr = 1;
  hfdcan2.Init.ExtFiltersNbr = 1;
 8001bbe:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.ProtocolException = DISABLE;
 8001bc2:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001bc4:	63c2      	str	r2, [r0, #60]	; 0x3c
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001bc6:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001bc8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001bca:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001bcc:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001bce:	f003 fb17 	bl	8005200 <HAL_FDCAN_Init>
 8001bd2:	b900      	cbnz	r0, 8001bd6 <MX_FDCAN2_Init+0x36>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001bda:	f001 bee7 	b.w	80039ac <Error_Handler>
 8001bde:	bf00      	nop
 8001be0:	20000384 	.word	0x20000384
 8001be4:	40006800 	.word	0x40006800

08001be8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001be8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(fdcanHandle->Instance==FDCAN2)
 8001bea:	6802      	ldr	r2, [r0, #0]
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_FDCAN_MspInit+0x74>)
{
 8001bee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	2400      	movs	r4, #0
  if(fdcanHandle->Instance==FDCAN2)
 8001bf2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001bf8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001bfc:	9406      	str	r4, [sp, #24]
  if(fdcanHandle->Instance==FDCAN2)
 8001bfe:	d001      	beq.n	8001c04 <HAL_FDCAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001c00:	b008      	add	sp, #32
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c04:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	a902      	add	r1, sp, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	4814      	ldr	r0, [pc, #80]	; (8001c60 <HAL_FDCAN_MspInit+0x78>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c0e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58
 8001c14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c16:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001c1a:	9200      	str	r2, [sp, #0]
 8001c1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c20:	f042 0202 	orr.w	r2, r2, #2
 8001c24:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c2e:	2260      	movs	r2, #96	; 0x60
 8001c30:	2302      	movs	r3, #2
 8001c32:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001c36:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001c42:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f004 f886 	bl	8005d54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 1, 0);
 8001c48:	4622      	mov	r2, r4
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2056      	movs	r0, #86	; 0x56
 8001c4e:	f003 f9fd 	bl	800504c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001c52:	2056      	movs	r0, #86	; 0x56
 8001c54:	f003 fa32 	bl	80050bc <HAL_NVIC_EnableIRQ>
}
 8001c58:	b008      	add	sp, #32
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	40006800 	.word	0x40006800
 8001c60:	48000400 	.word	0x48000400

08001c64 <can_rx_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8001c64:	b530      	push	{r4, r5, lr}
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <can_rx_init+0x3c>)
	msg->filter.IdType = FDCAN_STANDARD_ID;
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	//msg->filter.FilterConfig = FDCAN_FILTER_DISABLE;


	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001c68:	4d0e      	ldr	r5, [pc, #56]	; (8001ca4 <can_rx_init+0x40>)
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001c6a:	685c      	ldr	r4, [r3, #4]
 8001c6c:	6444      	str	r4, [r0, #68]	; 0x44
void can_rx_init(CANRxMessage *msg){
 8001c6e:	b083      	sub	sp, #12
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001c70:	2402      	movs	r4, #2
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001c72:	2201      	movs	r2, #1
	msg->filter.FilterIndex = 0;
 8001c74:	2300      	movs	r3, #0
	msg->filter.FilterID2 = 0x7FF;
 8001c76:	f240 71ff 	movw	r1, #2047	; 0x7ff
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8001c7a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
	msg->filter.FilterID2 = 0x7FF;
 8001c7e:	6481      	str	r1, [r0, #72]	; 0x48
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001c80:	6402      	str	r2, [r0, #64]	; 0x40
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001c82:	63c4      	str	r4, [r0, #60]	; 0x3c
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001c84:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f003 fc39 	bl	8005500 <HAL_FDCAN_ConfigFilter>

	//HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT);
 8001c8e:	9400      	str	r4, [sp, #0]
 8001c90:	4628      	mov	r0, r5
 8001c92:	4623      	mov	r3, r4
 8001c94:	4622      	mov	r2, r4
 8001c96:	4621      	mov	r1, r4
 8001c98:	f003 fc64 	bl	8005564 <HAL_FDCAN_ConfigGlobalFilter>
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
	msg->filter.FilterActivation=ENABLE;
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
	*/
}
 8001c9c:	b003      	add	sp, #12
 8001c9e:	bd30      	pop	{r4, r5, pc}
 8001ca0:	20008f3c 	.word	0x20008f3c
 8001ca4:	20000384 	.word	0x20000384

08001ca8 <can_tx_init>:
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001ca8:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <can_tx_init+0x24>)
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001caa:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001cae:	6891      	ldr	r1, [r2, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001cb0:	6143      	str	r3, [r0, #20]
	msg->tx_header.MessageMarker = 0; //???
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001cb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001cb6:	2300      	movs	r3, #0
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
 8001cb8:	e9c0 3306 	strd	r3, r3, [r0, #24]
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001cbc:	6081      	str	r1, [r0, #8]
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001cbe:	6242      	str	r2, [r0, #36]	; 0x24
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001cc0:	6203      	str	r3, [r0, #32]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 8001cc2:	60c3      	str	r3, [r0, #12]
	msg->tx_header.MessageMarker = 0; //???
 8001cc4:	6283      	str	r3, [r0, #40]	; 0x28
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8001cc6:	6103      	str	r3, [r0, #16]
	msg->tx_header.DLC = 6; 			// message size of 8 byte - DataLength
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard - TxFrameType
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request? - ???
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID - ??? Probably Identifier
	*/
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20008f3c 	.word	0x20008f3c

08001cd0 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd6:	ed2d 8b02 	vpush	{d8}
 8001cda:	ac0a      	add	r4, sp, #40	; 0x28
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ce0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8001ce4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001ce8:	f8bd 0029 	ldrh.w	r0, [sp, #41]	; 0x29
 8001cec:	4c2f      	ldr	r4, [pc, #188]	; (8001dac <unpack_cmd+0xdc>)
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001cee:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001cf2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001cf6:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001cfa:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001cfe:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 8001d02:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001d06:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8001db0 <unpack_cmd+0xe0>
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001d0a:	ea4f 2902 	mov.w	r9, r2, lsl #8
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001d0e:	ea4f 2803 	mov.w	r8, r3, lsl #8
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001d12:	ba40      	rev16	r0, r0
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001d14:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001d18:	091b      	lsrs	r3, r3, #4
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001d1a:	0912      	lsrs	r2, r2, #4
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001d1c:	ea49 0901 	orr.w	r9, r9, r1
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001d20:	b280      	uxth	r0, r0
 8001d22:	2110      	movs	r1, #16
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001d24:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001d28:	ea42 1606 	orr.w	r6, r2, r6, lsl #4
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001d2c:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001d30:	ea48 0807 	orr.w	r8, r8, r7
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001d34:	9f1d      	ldr	r7, [sp, #116]	; 0x74
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001d36:	f001 fe99 	bl	8003a6c <uint_to_float>
 8001d3a:	ed87 0a00 	vstr	s0, [r7]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001d3e:	edd4 0a16 	vldr	s1, [r4, #88]	; 0x58
 8001d42:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8001d46:	4630      	mov	r0, r6
 8001d48:	210c      	movs	r1, #12
 8001d4a:	f001 fe8f 	bl	8003a6c <uint_to_float>
 8001d4e:	ed87 0a01 	vstr	s0, [r7, #4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001d52:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
 8001d56:	4648      	mov	r0, r9
 8001d58:	eeb0 0a48 	vmov.f32	s0, s16
 8001d5c:	210c      	movs	r1, #12
 8001d5e:	f001 fe85 	bl	8003a6c <uint_to_float>
 8001d62:	ed87 0a02 	vstr	s0, [r7, #8]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001d66:	edd4 0a18 	vldr	s1, [r4, #96]	; 0x60
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	eeb0 0a48 	vmov.f32	s0, s16
 8001d70:	210c      	movs	r1, #12
 8001d72:	f001 fe7b 	bl	8003a6c <uint_to_float>
 8001d76:	ed87 0a03 	vstr	s0, [r7, #12]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001d7a:	edd4 0a03 	vldr	s1, [r4, #12]
 8001d7e:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8001d82:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8001d86:	ee60 0a87 	vmul.f32	s1, s1, s14
 8001d8a:	4640      	mov	r0, r8
 8001d8c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001d90:	210c      	movs	r1, #12
 8001d92:	eeb1 0a60 	vneg.f32	s0, s1
 8001d96:	f001 fe69 	bl	8003a6c <uint_to_float>

    }
 8001d9a:	ecbd 8b02 	vpop	{d8}
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001d9e:	ed87 0a04 	vstr	s0, [r7, #16]
    }
 8001da2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001da6:	b004      	add	sp, #16
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000068c 	.word	0x2000068c
 8001db0:	00000000 	.word	0x00000000

08001db4 <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 8001db4:	b410      	push	{r4}
 8001db6:	4c16      	ldr	r4, [pc, #88]	; (8001e10 <load_from_flash+0x5c>)
 8001db8:	f1c4 6000 	rsb	r0, r4, #134217728	; 0x8000000
 8001dbc:	4623      	mov	r3, r4
 8001dbe:	f500 20fb 	add.w	r0, r0, #514048	; 0x7d800
 8001dc2:	f504 7480 	add.w	r4, r4, #256	; 0x100
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
    	uint32_t address = FLOATS_ADDR + i*4;
    	uint64_t doubleWord = *((uint64_t*)(address));
 8001dc6:	18c2      	adds	r2, r0, r3
 8001dc8:	58c1      	ldr	r1, [r0, r3]
 8001dca:	6852      	ldr	r2, [r2, #4]

    	float float1 = *((float*)(&word1));
    	float float2 = *((float*)(&word2));

    	__float_reg[i] =   float1;
    	__float_reg[i+1] = float2;
 8001dcc:	605a      	str	r2, [r3, #4]
    	__float_reg[i] =   float1;
 8001dce:	6019      	str	r1, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	429c      	cmp	r4, r3
 8001dd4:	d1f7      	bne.n	8001dc6 <load_from_flash+0x12>
 8001dd6:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <load_from_flash+0x60>)
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <load_from_flash+0x64>)

    }
    for(int i = 0;i<INTSCOUNT;i=i+2){
 8001dda:	4810      	ldr	r0, [pc, #64]	; (8001e1c <load_from_flash+0x68>)
 8001ddc:	1d11      	adds	r1, r2, #4
    	uint64_t doubleWord = *((uint64_t*)(address));

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;

		float int1 = *((int*)(&word1));
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		float int2 = *((int*)(&word2));
 8001de6:	edd3 7a01 	vldr	s15, [r3, #4]

		__int_reg[i] =   int1;
 8001dea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		float int2 = *((int*)(&word2));
 8001dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		__int_reg[i] =   int1;
 8001df2:	ee17 4a10 	vmov	r4, s14
		__int_reg[i+1] = int2;
 8001df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		__int_reg[i] =   int1;
 8001dfa:	50d4      	str	r4, [r2, r3]
		__int_reg[i+1] = int2;
 8001dfc:	ee17 4a90 	vmov	r4, s15
 8001e00:	50cc      	str	r4, [r1, r3]
    for(int i = 0;i<INTSCOUNT;i=i+2){
 8001e02:	3308      	adds	r3, #8
 8001e04:	4283      	cmp	r3, r0
 8001e06:	d1ea      	bne.n	8001dde <load_from_flash+0x2a>
    }
}
 8001e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	2000068c 	.word	0x2000068c
 8001e14:	17f8b63c 	.word	0x17f8b63c
 8001e18:	0807d900 	.word	0x0807d900
 8001e1c:	0807dd00 	.word	0x0807dd00

08001e20 <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	b087      	sub	sp, #28

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8001e24:	f003 fe52 	bl	8005acc <HAL_FLASH_Unlock>
	if(status!=HAL_OK) return 1;
 8001e28:	b110      	cbz	r0, 8001e30 <save_to_flash+0x10>
 8001e2a:	2001      	movs	r0, #1
    }
    HAL_FLASH_Lock();
    HAL_FLASH_OB_Lock();
    printf("SaveToFlash All Ok\n");
    return 0;
}
 8001e2c:	b007      	add	sp, #28
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = HAL_FLASH_OB_Unlock();
 8001e30:	f003 fe6c 	bl	8005b0c <HAL_FLASH_OB_Unlock>
	if(status!=HAL_OK) return 2;
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d134      	bne.n	8001ea2 <save_to_flash+0x82>
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001e38:	2305      	movs	r3, #5
 8001e3a:	227b      	movs	r2, #123	; 0x7b
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8001e3c:	a901      	add	r1, sp, #4
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001e3e:	2400      	movs	r4, #0
 8001e40:	2502      	movs	r5, #2
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8001e42:	a802      	add	r0, sp, #8
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001e44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e48:	e9cd 4502 	strd	r4, r5, [sp, #8]
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8001e4c:	f003 feaa 	bl	8005ba4 <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 8001e50:	4827      	ldr	r0, [pc, #156]	; (8001ef0 <save_to_flash+0xd0>)
 8001e52:	f007 fd45 	bl	80098e0 <iprintf>
    return error;
 8001e56:	9b01      	ldr	r3, [sp, #4]
    if(eraseError!=0xFFFFFFFF) return 3;
 8001e58:	3301      	adds	r3, #1
 8001e5a:	d002      	beq.n	8001e62 <save_to_flash+0x42>
 8001e5c:	2003      	movs	r0, #3
}
 8001e5e:	b007      	add	sp, #28
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <save_to_flash+0xd4>)
 8001e64:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001e68:	611a      	str	r2, [r3, #16]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6e:	f003 fe6f 	bl	8005b50 <FLASH_WaitForLastOperation>
    if(status!=HAL_OK) return 5;
 8001e72:	bb90      	cbnz	r0, 8001eda <save_to_flash+0xba>
 8001e74:	4c20      	ldr	r4, [pc, #128]	; (8001ef8 <save_to_flash+0xd8>)
 8001e76:	4e21      	ldr	r6, [pc, #132]	; (8001efc <save_to_flash+0xdc>)
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 8001e78:	4605      	mov	r5, r0
 8001e7a:	e002      	b.n	8001e82 <save_to_flash+0x62>
 8001e7c:	3502      	adds	r5, #2
 8001e7e:	2d40      	cmp	r5, #64	; 0x40
 8001e80:	d012      	beq.n	8001ea8 <save_to_flash+0x88>
        uint64_t doubleWord = *((uint64_t*) (__float_reg + i)); //read two floats from array as one uint64
 8001e82:	1933      	adds	r3, r6, r4
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 8001e84:	4621      	mov	r1, r4
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f003 fd70 	bl	8005970 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing float #%d", i);return 6;}
 8001e90:	3408      	adds	r4, #8
 8001e92:	2800      	cmp	r0, #0
 8001e94:	d0f2      	beq.n	8001e7c <save_to_flash+0x5c>
 8001e96:	481a      	ldr	r0, [pc, #104]	; (8001f00 <save_to_flash+0xe0>)
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f007 fd21 	bl	80098e0 <iprintf>
 8001e9e:	2006      	movs	r0, #6
 8001ea0:	e7c4      	b.n	8001e2c <save_to_flash+0xc>
	if(status!=HAL_OK) return 2;
 8001ea2:	2002      	movs	r0, #2
}
 8001ea4:	b007      	add	sp, #28
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea8:	4e16      	ldr	r6, [pc, #88]	; (8001f04 <save_to_flash+0xe4>)
 8001eaa:	4f17      	ldr	r7, [pc, #92]	; (8001f08 <save_to_flash+0xe8>)
    for(int i=0;i<INTSCOUNT;i=i+2){
 8001eac:	4604      	mov	r4, r0
 8001eae:	e003      	b.n	8001eb8 <save_to_flash+0x98>
 8001eb0:	3402      	adds	r4, #2
 8001eb2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001eb6:	d012      	beq.n	8001ede <save_to_flash+0xbe>
        uint64_t doubleWord = *((uint64_t*) (__int_reg + i));
 8001eb8:	19bb      	adds	r3, r7, r6
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, INTS_ADDR + i*sizeof(int), doubleWord);
 8001eba:	4631      	mov	r1, r6
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f003 fd55 	bl	8005970 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing int #%d", i);return 7;}
 8001ec6:	3608      	adds	r6, #8
 8001ec8:	4605      	mov	r5, r0
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <save_to_flash+0x90>
 8001ece:	480f      	ldr	r0, [pc, #60]	; (8001f0c <save_to_flash+0xec>)
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f007 fd05 	bl	80098e0 <iprintf>
 8001ed6:	2007      	movs	r0, #7
 8001ed8:	e7a8      	b.n	8001e2c <save_to_flash+0xc>
    if(status!=HAL_OK) return 5;
 8001eda:	2005      	movs	r0, #5
 8001edc:	e7a6      	b.n	8001e2c <save_to_flash+0xc>
    HAL_FLASH_Lock();
 8001ede:	f003 fe09 	bl	8005af4 <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 8001ee2:	f003 fe27 	bl	8005b34 <HAL_FLASH_OB_Lock>
    printf("SaveToFlash All Ok\n");
 8001ee6:	480a      	ldr	r0, [pc, #40]	; (8001f10 <save_to_flash+0xf0>)
 8001ee8:	f007 fd80 	bl	80099ec <puts>
    return 0;
 8001eec:	4628      	mov	r0, r5
 8001eee:	e79d      	b.n	8001e2c <save_to_flash+0xc>
 8001ef0:	0800d840 	.word	0x0800d840
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	0807d800 	.word	0x0807d800
 8001efc:	17f82e8c 	.word	0x17f82e8c
 8001f00:	0800d858 	.word	0x0800d858
 8001f04:	0807d900 	.word	0x0807d900
 8001f08:	17f8b63c 	.word	0x17f8b63c
 8001f0c:	0800d87c 	.word	0x0800d87c
 8001f10:	0800d8a0 	.word	0x0800d8a0

08001f14 <set_dtc>:

	//printf("foc setDtcs: %f %f %f \n\r", dtc_u, dtc_v, dtc_w);


	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <set_dtc+0xa8>)
	float dtc_u = controller->dtc_u;
 8001f16:	ed90 6a16 	vldr	s12, [r0, #88]	; 0x58
	float dtc_v = controller->dtc_v;
 8001f1a:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
	float dtc_w = controller->dtc_w;
 8001f1e:	edd0 5a18 	vldr	s11, [r0, #96]	; 0x60
	if(!PHASE_ORDER){
 8001f22:	681b      	ldr	r3, [r3, #0]
		dtc_u = 1.0f - controller->dtc_u;
 8001f24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001f28:	ee37 6ac6 	vsub.f32	s12, s15, s12
		dtc_v = 1.0f - controller->dtc_v;
 8001f2c:	ee77 6ac7 	vsub.f32	s13, s15, s14
		dtc_w = 1.0f - controller->dtc_w;
 8001f30:	ee77 7ae5 	vsub.f32	s15, s15, s11
	if(!PHASE_ORDER){
 8001f34:	bb03      	cbnz	r3, 8001f78 <set_dtc+0x64>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <set_dtc+0xac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001f3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f42:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001f46:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001f4a:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8001f4e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001f52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f56:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f5a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001f5e:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8001f62:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001f66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f72:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8001f76:	4770      	bx	lr
	}
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <set_dtc+0xac>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001f80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f84:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001f88:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001f8c:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 8001f90:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001f94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f98:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f9c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001fa0:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 8001fa4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001fa8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	}
}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20008f3c 	.word	0x20008f3c
 8001fc0:	200094b0 	.word	0x200094b0

08001fc4 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8001fc4:	b538      	push	{r3, r4, r5, lr}
	//don't do Vbus
	//HAL_ADC_Start(&ADC_CH_MAIN);
	//HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY); //vbus conversion is slower, probably replace with polling IB if vbus is ever removed

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <analog_sample+0x80>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
void analog_sample (ControllerStruct *controller){
 8001fca:	4604      	mov	r4, r0
	if(!PHASE_ORDER){
 8001fcc:	bb7b      	cbnz	r3, 800202e <analog_sample+0x6a>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8001fce:	481e      	ldr	r0, [pc, #120]	; (8002048 <analog_sample+0x84>)
 8001fd0:	f002 fc1c 	bl	800480c <HAL_ADC_GetValue>
 8001fd4:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8001fd6:	481d      	ldr	r0, [pc, #116]	; (800204c <analog_sample+0x88>)
 8001fd8:	f002 fc18 	bl	800480c <HAL_ADC_GetValue>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60a0      	str	r0, [r4, #8]
	//controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
	//controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
	controller->v_bus = 24.0;

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8001fe0:	e9d4 5124 	ldrd	r5, r1, [r4, #144]	; 0x90
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8001fe4:	6862      	ldr	r2, [r4, #4]
 8001fe6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002050 <analog_sample+0x8c>
    controller->i_c = -controller->i_a - controller->i_b;

    HAL_ADC_Start(&ADC_CH_IA);
 8001fea:	4817      	ldr	r0, [pc, #92]	; (8002048 <analog_sample+0x84>)
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8001fec:	1b52      	subs	r2, r2, r5
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8001fee:	1a5b      	subs	r3, r3, r1
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8001ff0:	ee07 2a10 	vmov	s14, r2
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8001ff4:	ee07 3a90 	vmov	s15, r3
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8001ff8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8001ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002000:	ee27 7a26 	vmul.f32	s14, s14, s13
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002004:	ee67 7aa6 	vmul.f32	s15, s15, s13
	controller->v_bus = 24.0;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <analog_sample+0x90>)
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800200a:	ed84 7a05 	vstr	s14, [r4, #20]
    controller->i_c = -controller->i_a - controller->i_b;
 800200e:	ee77 6a27 	vadd.f32	s13, s14, s15
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002012:	edc4 7a06 	vstr	s15, [r4, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002016:	eeb1 7a66 	vneg.f32	s14, s13
 800201a:	ed84 7a07 	vstr	s14, [r4, #28]
	controller->v_bus = 24.0;
 800201e:	6223      	str	r3, [r4, #32]
    HAL_ADC_Start(&ADC_CH_IA);
 8002020:	f002 feca 	bl	8004db8 <HAL_ADC_Start>
    HAL_ADC_Start(&ADC_CH_IB);

}
 8002024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_ADC_Start(&ADC_CH_IB);
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <analog_sample+0x88>)
 800202a:	f002 bec5 	b.w	8004db8 <HAL_ADC_Start>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800202e:	4807      	ldr	r0, [pc, #28]	; (800204c <analog_sample+0x88>)
 8002030:	f002 fbec 	bl	800480c <HAL_ADC_GetValue>
 8002034:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <analog_sample+0x84>)
 8002038:	f002 fbe8 	bl	800480c <HAL_ADC_GetValue>
 800203c:	4603      	mov	r3, r0
 800203e:	60a0      	str	r0, [r4, #8]
 8002040:	e7ce      	b.n	8001fe0 <analog_sample+0x1c>
 8002042:	bf00      	nop
 8002044:	20008f3c 	.word	0x20008f3c
 8002048:	200002ac 	.word	0x200002ac
 800204c:	20000240 	.word	0x20000240
 8002050:	3ca50000 	.word	0x3ca50000
 8002054:	41c00000 	.word	0x41c00000

08002058 <svm>:
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);

    }

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	ed2d 8b0a 	vpush	{d8-d12}
 800205e:	eef0 9a60 	vmov.f32	s19, s1
 8002062:	eeb0 9a41 	vmov.f32	s18, s2
 8002066:	eeb0 ca40 	vmov.f32	s24, s0
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 800206a:	eeb0 0a60 	vmov.f32	s0, s1
 800206e:	eef0 0a41 	vmov.f32	s1, s2
 8002072:	eeb0 1a61 	vmov.f32	s2, s3
void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002076:	eef0 8a61 	vmov.f32	s17, s3
 800207a:	4606      	mov	r6, r0
 800207c:	460d      	mov	r5, r1
 800207e:	4614      	mov	r4, r2
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002080:	f001 fcbe 	bl	8003a00 <fminf3>
 8002084:	eeb0 1a68 	vmov.f32	s2, s17
 8002088:	eef0 0a49 	vmov.f32	s1, s18
 800208c:	eeb0 8a40 	vmov.f32	s16, s0
 8002090:	eeb0 0a69 	vmov.f32	s0, s19
 8002094:	f001 fc9c 	bl	80039d0 <fmaxf3>
 8002098:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002120 <svm+0xc8>
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800209c:	ed9f ba21 	vldr	s22, [pc, #132]	; 8002124 <svm+0xcc>
 80020a0:	eddf aa21 	vldr	s21, [pc, #132]	; 8002128 <svm+0xd0>
 80020a4:	ed9f aa21 	vldr	s20, [pc, #132]	; 800212c <svm+0xd4>
 80020a8:	eec7 ba8c 	vdiv.f32	s23, s15, s24
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80020ac:	ee38 8a00 	vadd.f32	s16, s16, s0
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80020b0:	eeb6 ca00 	vmov.f32	s24, #96	; 0x3f000000  0.5
 80020b4:	eee8 9a4c 	vfms.f32	s19, s16, s24
 80020b8:	eeb0 0a4b 	vmov.f32	s0, s22
 80020bc:	eef0 0a6a 	vmov.f32	s1, s21
 80020c0:	eea9 0aab 	vfma.f32	s0, s19, s23
 80020c4:	f001 fc74 	bl	80039b0 <fast_fmaxf>
 80020c8:	eeb1 8a48 	vneg.f32	s16, s16
 80020cc:	eef0 0a4a 	vmov.f32	s1, s20
 80020d0:	f001 fc76 	bl	80039c0 <fast_fminf>
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80020d4:	eea8 9a0c 	vfma.f32	s18, s16, s24
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80020d8:	ed86 0a00 	vstr	s0, [r6]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80020dc:	eeb0 0a4b 	vmov.f32	s0, s22
 80020e0:	eef0 0a6a 	vmov.f32	s1, s21
 80020e4:	eea9 0a2b 	vfma.f32	s0, s18, s23
 80020e8:	f001 fc62 	bl	80039b0 <fast_fmaxf>
 80020ec:	eef0 0a4a 	vmov.f32	s1, s20
 80020f0:	f001 fc66 	bl	80039c0 <fast_fminf>
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80020f4:	eee8 8a0c 	vfma.f32	s17, s16, s24
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80020f8:	ed85 0a00 	vstr	s0, [r5]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80020fc:	eeb0 0a4b 	vmov.f32	s0, s22
 8002100:	eef0 0a6a 	vmov.f32	s1, s21
 8002104:	eea8 0aab 	vfma.f32	s0, s17, s23
 8002108:	f001 fc52 	bl	80039b0 <fast_fmaxf>
 800210c:	eef0 0a4a 	vmov.f32	s1, s20
 8002110:	f001 fc56 	bl	80039c0 <fast_fminf>

    }
 8002114:	ecbd 8b0a 	vpop	{d8-d12}
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002118:	ed84 0a00 	vstr	s0, [r4]
    }
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	bf00      	nop
 8002120:	3f133333 	.word	0x3f133333
 8002124:	3ef0a3d7 	.word	0x3ef0a3d7
 8002128:	00000000 	.word	0x00000000
 800212c:	3f70a3d7 	.word	0x3f70a3d7

08002130 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
    int adc_b_offset = 0;
    int n = 1000;
    controller->dtc_u = 0.f;
 8002134:	2300      	movs	r3, #0
void zero_current(ControllerStruct *controller){
 8002136:	ed2d 8b02 	vpush	{d8}
    int adc_b_offset = 0;
 800213a:	2600      	movs	r6, #0
    controller->dtc_u = 0.f;
 800213c:	6583      	str	r3, [r0, #88]	; 0x58
    controller->dtc_v = 0.f;
 800213e:	65c3      	str	r3, [r0, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002140:	6603      	str	r3, [r0, #96]	; 0x60
void zero_current(ControllerStruct *controller){
 8002142:	4682      	mov	sl, r0
 8002144:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002218 <zero_current+0xe8>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002148:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800221c <zero_current+0xec>
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800214c:	4d2f      	ldr	r5, [pc, #188]	; (800220c <zero_current+0xdc>)
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800214e:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8002210 <zero_current+0xe0>
    set_dtc(controller);
 8002152:	f7ff fedf 	bl	8001f14 <set_dtc>
    int adc_a_offset = 0;
 8002156:	4637      	mov	r7, r6
    set_dtc(controller);
 8002158:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800215c:	e034      	b.n	80021c8 <zero_current+0x98>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800215e:	f002 fb55 	bl	800480c <HAL_ADC_GetValue>
 8002162:	f8ca 0004 	str.w	r0, [sl, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002166:	4640      	mov	r0, r8
 8002168:	f002 fb50 	bl	800480c <HAL_ADC_GetValue>
 800216c:	f8ca 0008 	str.w	r0, [sl, #8]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002170:	e9da 1224 	ldrd	r1, r2, [sl, #144]	; 0x90
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002174:	f8da 3004 	ldr.w	r3, [sl, #4]
	controller->v_bus = 24.0;
 8002178:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8002220 <zero_current+0xf0>
 800217c:	f8ca c020 	str.w	ip, [sl, #32]
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002180:	1a5b      	subs	r3, r3, r1
 8002182:	ee07 3a90 	vmov	s15, r3
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002186:	1a83      	subs	r3, r0, r2
 8002188:	ee07 3a10 	vmov	s14, r3
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002190:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002194:	ee67 7a88 	vmul.f32	s15, s15, s16
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002198:	ee27 7a08 	vmul.f32	s14, s14, s16
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800219c:	edca 7a05 	vstr	s15, [sl, #20]
    controller->i_c = -controller->i_a - controller->i_b;
 80021a0:	ee77 7a87 	vadd.f32	s15, s15, s14
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80021a4:	ed8a 7a06 	vstr	s14, [sl, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 80021a8:	eef1 7a67 	vneg.f32	s15, s15
 80021ac:	edca 7a07 	vstr	s15, [sl, #28]
    HAL_ADC_Start(&ADC_CH_IA);
 80021b0:	4628      	mov	r0, r5
 80021b2:	f002 fe01 	bl	8004db8 <HAL_ADC_Start>
    HAL_ADC_Start(&ADC_CH_IB);
 80021b6:	4640      	mov	r0, r8
 80021b8:	f002 fdfe 	bl	8004db8 <HAL_ADC_Start>

    for (int i = 0; i<n; i++){               // Average n samples
    	analog_sample(controller);
    	adc_a_offset +=  controller->adc_a_raw;
    	adc_b_offset += controller->adc_b_raw;
 80021bc:	e9da 2301 	ldrd	r2, r3, [sl, #4]
    for (int i = 0; i<n; i++){               // Average n samples
 80021c0:	3c01      	subs	r4, #1
    	adc_a_offset +=  controller->adc_a_raw;
 80021c2:	4417      	add	r7, r2
    	adc_b_offset += controller->adc_b_raw;
 80021c4:	441e      	add	r6, r3
    for (int i = 0; i<n; i++){               // Average n samples
 80021c6:	d00f      	beq.n	80021e8 <zero_current+0xb8>
	if(!PHASE_ORDER){
 80021c8:	f8d9 3000 	ldr.w	r3, [r9]
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80021cc:	4628      	mov	r0, r5
	if(!PHASE_ORDER){
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0c5      	beq.n	800215e <zero_current+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80021d2:	4640      	mov	r0, r8
 80021d4:	f002 fb1a 	bl	800480c <HAL_ADC_GetValue>
 80021d8:	f8ca 0004 	str.w	r0, [sl, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80021dc:	4628      	mov	r0, r5
 80021de:	f002 fb15 	bl	800480c <HAL_ADC_GetValue>
 80021e2:	f8ca 0008 	str.w	r0, [sl, #8]
 80021e6:	e7c3      	b.n	8002170 <zero_current+0x40>
     }
    controller->adc_a_offset = adc_a_offset/n;
    controller->adc_b_offset = adc_b_offset/n;

    }
 80021e8:	ecbd 8b02 	vpop	{d8}
    controller->adc_a_offset = adc_a_offset/n;
 80021ec:	4909      	ldr	r1, [pc, #36]	; (8002214 <zero_current+0xe4>)
 80021ee:	17fa      	asrs	r2, r7, #31
 80021f0:	fb81 3007 	smull	r3, r0, r1, r7
    controller->adc_b_offset = adc_b_offset/n;
 80021f4:	fb81 3106 	smull	r3, r1, r1, r6
 80021f8:	17f3      	asrs	r3, r6, #31
    controller->adc_a_offset = adc_a_offset/n;
 80021fa:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
    controller->adc_b_offset = adc_b_offset/n;
 80021fe:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 8002202:	e9ca 2324 	strd	r2, r3, [sl, #144]	; 0x90
    }
 8002206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220a:	bf00      	nop
 800220c:	200002ac 	.word	0x200002ac
 8002210:	3ca50000 	.word	0x3ca50000
 8002214:	10624dd3 	.word	0x10624dd3
 8002218:	20008f3c 	.word	0x20008f3c
 800221c:	20000240 	.word	0x20000240
 8002220:	41c00000 	.word	0x41c00000

08002224 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    controller->ki_q = KI_Q;
    controller->k_d = K_SCALE*I_BW;
    controller->k_q = K_SCALE*I_BW;
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
    controller->ki_fw = .1f*controller->ki_d;
    controller->phase_order = PHASE_ORDER;
 8002228:	492a      	ldr	r1, [pc, #168]	; (80022d4 <init_controller_params+0xb0>)
	controller->ki_d = KI_D;
 800222a:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <init_controller_params+0xb4>)
    controller->k_d = K_SCALE*I_BW;
 800222c:	4d2b      	ldr	r5, [pc, #172]	; (80022dc <init_controller_params+0xb8>)
    controller->phase_order = PHASE_ORDER;
 800222e:	6809      	ldr	r1, [r1, #0]
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002230:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80022e0 <init_controller_params+0xbc>
    controller->k_d = K_SCALE*I_BW;
 8002234:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80022e4 <init_controller_params+0xc0>
    controller->ki_fw = .1f*controller->ki_d;
 8002238:	4c2b      	ldr	r4, [pc, #172]	; (80022e8 <init_controller_params+0xc4>)
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 800223a:	4a2c      	ldr	r2, [pc, #176]	; (80022ec <init_controller_params+0xc8>)
 800223c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80022f8 <init_controller_params+0xd4>
 8002240:	4f2b      	ldr	r7, [pc, #172]	; (80022f0 <init_controller_params+0xcc>)
void init_controller_params(ControllerStruct *controller){
 8002242:	ed2d 8b02 	vpush	{d8}
	controller->ki_d = KI_D;
 8002246:	6783      	str	r3, [r0, #120]	; 0x78
    controller->ki_q = KI_Q;
 8002248:	67c3      	str	r3, [r0, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 800224a:	edd5 7a02 	vldr	s15, [r5, #8]
 800224e:	ed9f 8a29 	vldr	s16, [pc, #164]	; 80022f4 <init_controller_params+0xd0>
    controller->ki_fw = .1f*controller->ki_d;
 8002252:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002256:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800225a:	eee7 6a87 	vfma.f32	s13, s15, s14
    controller->phase_order = PHASE_ORDER;
 800225e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8002262:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002266:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800226a:	ee86 7a26 	vdiv.f32	s14, s12, s13
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 800226e:	2401      	movs	r4, #1
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002270:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8002274:	2600      	movs	r6, #0
 8002276:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
    controller->k_d = K_SCALE*I_BW;
 800227a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 800227e:	ee37 7a06 	vadd.f32	s14, s14, s12
    controller->k_d = K_SCALE*I_BW;
 8002282:	edc0 7a1c 	vstr	s15, [r0, #112]	; 0x70
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002286:	ed80 7a21 	vstr	s14, [r0, #132]	; 0x84
    controller->k_q = K_SCALE*I_BW;
 800228a:	edc0 7a1d 	vstr	s15, [r0, #116]	; 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 800228e:	ee07 4a90 	vmov	s15, r4
 8002292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002296:	3401      	adds	r4, #1
 8002298:	ee67 7a88 	vmul.f32	s15, s15, s16
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f97a 	bl	8000598 <__aeabi_f2d>
 80022a4:	ec41 0b10 	vmov	d0, r0, r1
 80022a8:	f00a ffce 	bl	800d248 <exp>
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80022ac:	4642      	mov	r2, r8
 80022ae:	ec51 0b10 	vmov	r0, r1, d0
 80022b2:	464b      	mov	r3, r9
 80022b4:	f7fe f9c8 	bl	8000648 <__aeabi_dmul>
 80022b8:	4632      	mov	r2, r6
 80022ba:	463b      	mov	r3, r7
 80022bc:	f7fe f80e 	bl	80002dc <__adddf3>
 80022c0:	f7fe fcba 	bl	8000c38 <__aeabi_d2f>
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80022c4:	2c80      	cmp	r4, #128	; 0x80
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80022c6:	f845 0b04 	str.w	r0, [r5], #4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80022ca:	d1e0      	bne.n	800228e <init_controller_params+0x6a>
    }

    }
 80022cc:	ecbd 8b02 	vpop	{d8}
 80022d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022d4:	20008f3c 	.word	0x20008f3c
 80022d8:	3d3851ec 	.word	0x3d3851ec
 80022dc:	2000068c 	.word	0x2000068c
 80022e0:	3966980b 	.word	0x3966980b
 80022e4:	38d1b717 	.word	0x38d1b717
 80022e8:	3b9374bd 	.word	0x3b9374bd
 80022ec:	400ccccd 	.word	0x400ccccd
 80022f0:	3ff00000 	.word	0x3ff00000
 80022f4:	be79ffff 	.word	0xbe79ffff
 80022f8:	3ff33333 	.word	0x3ff33333

080022fc <reset_foc>:

void reset_foc(ControllerStruct *controller){

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80022fc:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <reset_foc+0x6c>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8002304:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002308:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800230c:	ee27 7a26 	vmul.f32	s14, s14, s13
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
    controller->i_d_des = 0;
 8002310:	2300      	movs	r3, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002312:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    controller->q_int = 0;
    controller->d_int = 0;
    controller->v_q = 0;
    controller->v_d = 0;
    controller->fw_int = 0;
    controller->otw_flag = 0;
 8002316:	2100      	movs	r1, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002318:	ed82 7a0f 	vstr	s14, [r2, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800231c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8002320:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002324:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002328:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800232c:	ed82 7a0d 	vstr	s14, [r2, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002330:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002338:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800233c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002340:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
    controller->otw_flag = 0;
 8002344:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
    controller->i_d_des = 0;
 8002348:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    controller->i_q_des = 0;
 800234c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    controller->i_d = 0;
 8002350:	63c3      	str	r3, [r0, #60]	; 0x3c
    controller->i_q = 0;
 8002352:	6403      	str	r3, [r0, #64]	; 0x40
    controller->i_q_filt = 0;
 8002354:	6443      	str	r3, [r0, #68]	; 0x44
    controller->q_int = 0;
 8002356:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    controller->d_int = 0;
 800235a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    controller->v_q = 0;
 800235e:	6543      	str	r3, [r0, #84]	; 0x54
    controller->v_d = 0;
 8002360:	6503      	str	r3, [r0, #80]	; 0x50
    controller->fw_int = 0;
 8002362:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

    }
 8002366:	4770      	bx	lr
 8002368:	200094b0 	.word	0x200094b0

0800236c <field_weaken>:

void field_weaken(ControllerStruct *controller)
{
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 800236c:	edd0 7a37 	vldr	s15, [r0, #220]	; 0xdc
 8002370:	edd0 6a38 	vldr	s13, [r0, #224]	; 0xe0
 8002374:	ed90 0a39 	vldr	s0, [r0, #228]	; 0xe4
 8002378:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80023dc <field_weaken+0x70>
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 800237c:	eddf 0a18 	vldr	s1, [pc, #96]	; 80023e0 <field_weaken+0x74>
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002380:	ee77 7ae6 	vsub.f32	s15, s15, s13
{
 8002384:	b510      	push	{r4, lr}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002386:	eea7 0a87 	vfma.f32	s0, s15, s14
{
 800238a:	4604      	mov	r4, r0
 800238c:	ed2d 8b02 	vpush	{d8}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002390:	ed80 0a39 	vstr	s0, [r0, #228]	; 0xe4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002394:	f001 fb14 	bl	80039c0 <fast_fminf>
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <field_weaken+0x78>)
 800239a:	edd3 0a06 	vldr	s1, [r3, #24]
 800239e:	eef1 0a60 	vneg.f32	s1, s1
 80023a2:	f001 fb05 	bl	80039b0 <fast_fmaxf>
       controller->i_d_des = controller->fw_int;
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80023a6:	ed94 7a3b 	vldr	s14, [r4, #236]	; 0xec
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80023aa:	ed84 0a39 	vstr	s0, [r4, #228]	; 0xe4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80023ae:	ee60 7a40 	vnmul.f32	s15, s0, s0
       controller->i_d_des = controller->fw_int;
 80023b2:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80023b6:	eee7 7a07 	vfma.f32	s15, s14, s14
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80023ba:	ed94 0a29 	vldr	s0, [r4, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80023be:	eeb1 8ae7 	vsqrt.f32	s16, s15
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80023c2:	eef0 0a48 	vmov.f32	s1, s16
 80023c6:	f001 fafb 	bl	80039c0 <fast_fminf>
 80023ca:	eef1 0a48 	vneg.f32	s1, s16
 80023ce:	f001 faef 	bl	80039b0 <fast_fmaxf>


}
 80023d2:	ecbd 8b02 	vpop	{d8}
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80023d6:	ed84 0a29 	vstr	s0, [r4, #164]	; 0xa4
}
 80023da:	bd10      	pop	{r4, pc}
 80023dc:	3ba3d70a 	.word	0x3ba3d70a
 80023e0:	00000000 	.word	0x00000000
 80023e4:	2000068c 	.word	0x2000068c

080023e8 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	ed2d 8b08 	vpush	{d8-d11}
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80023ee:	ed91 aa17 	vldr	s20, [r1, #92]	; 0x5c
		controller->dtheta_elec = encoder->elec_velocity;
 80023f2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
		controller->dtheta_mech = encoder->velocity*GR;
 80023f4:	4da6      	ldr	r5, [pc, #664]	; (8002690 <commutate+0x2a8>)
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 80023f6:	edd1 6a03 	vldr	s13, [r1, #12]
		controller->dtheta_mech = encoder->velocity*GR;
 80023fa:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
		controller->dtheta_elec = encoder->elec_velocity;
 80023fe:	6343      	str	r3, [r0, #52]	; 0x34
		controller->theta_elec = encoder->elec_angle;
 8002400:	ed80 aa0b 	vstr	s20, [r0, #44]	; 0x2c
		controller->dtheta_mech = encoder->velocity*GR;
 8002404:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002408:	edd0 aa05 	vldr	s21, [r0, #20]
 800240c:	edd0 ba06 	vldr	s23, [r0, #24]
 8002410:	ed90 ba07 	vldr	s22, [r0, #28]
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002414:	eddf 9a9f 	vldr	s19, [pc, #636]	; 8002694 <commutate+0x2ac>
 8002418:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 8002698 <commutate+0x2b0>
		controller->dtheta_mech = encoder->velocity*GR;
 800241c:	ee67 7a87 	vmul.f32	s15, s15, s14
    float cf = cos_lut(theta);
 8002420:	eeb0 0a4a 	vmov.f32	s0, s20
		controller->dtheta_mech = encoder->velocity*GR;
 8002424:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002428:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44
 800242c:	eec6 7a87 	vdiv.f32	s15, s13, s14
{
 8002430:	4604      	mov	r4, r0
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002432:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002436:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    float cf = cos_lut(theta);
 800243a:	f001 fb53 	bl	8003ae4 <cos_lut>
 800243e:	eeb0 9a40 	vmov.f32	s18, s0
    float sf = sin_lut(theta);
 8002442:	eeb0 0a4a 	vmov.f32	s0, s20
 8002446:	f001 fb27 	bl	8003a98 <sin_lut>
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800244a:	ee69 6a29 	vmul.f32	s13, s18, s19
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800244e:	ee28 6ac9 	vnmul.f32	s12, s17, s18
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002452:	eeb0 7a66 	vmov.f32	s14, s13
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002456:	eef0 7a46 	vmov.f32	s15, s12
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800245a:	eea0 7a28 	vfma.f32	s14, s0, s17
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 800245e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8002462:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002466:	eee0 7a08 	vfma.f32	s15, s0, s16
 800246a:	eea0 6a29 	vfma.f32	s12, s0, s19
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800246e:	ee2b 7a87 	vmul.f32	s14, s23, s14
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002472:	ee6b 7a27 	vmul.f32	s15, s22, s15
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002476:	eed0 6a28 	vfnms.f32	s13, s0, s17
 800247a:	eeaa 7ac0 	vfms.f32	s14, s21, s0
 800247e:	eeeb 7a86 	vfma.f32	s15, s23, s12
 8002482:	eeab 7a26 	vfma.f32	s14, s22, s13
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002486:	eeea 7a89 	vfma.f32	s15, s21, s18
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 800248a:	ed9f 2a84 	vldr	s4, [pc, #528]	; 800269c <commutate+0x2b4>
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800248e:	ed9f 5a84 	vldr	s10, [pc, #528]	; 80026a0 <commutate+0x2b8>
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002492:	edd4 6a08 	vldr	s13, [r4, #32]
 8002496:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
 800249a:	ed9f 3a82 	vldr	s6, [pc, #520]	; 80026a4 <commutate+0x2bc>
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800249e:	ed9f 6a82 	vldr	s12, [pc, #520]	; 80026a8 <commutate+0x2c0>
 80024a2:	edd4 3a11 	vldr	s7, [r4, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80024a6:	ed94 4a12 	vldr	s8, [r4, #72]	; 0x48
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80024aa:	eddf 4a80 	vldr	s9, [pc, #512]	; 80026ac <commutate+0x2c4>
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80024ae:	eddf 5a80 	vldr	s11, [pc, #512]	; 80026b0 <commutate+0x2c8>
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80024b2:	ee66 6a82 	vmul.f32	s13, s13, s4
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80024b6:	ee67 7a85 	vmul.f32	s15, s15, s10
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80024ba:	ee27 7a05 	vmul.f32	s14, s14, s10
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80024be:	eee2 6a83 	vfma.f32	s13, s5, s6
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80024c2:	ee27 5a06 	vmul.f32	s10, s14, s12
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80024c6:	ee27 6a86 	vmul.f32	s12, s15, s12
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80024ca:	eea3 5aa4 	vfma.f32	s10, s7, s9
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80024ce:	eea4 6a24 	vfma.f32	s12, s8, s9
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80024d2:	ee66 5aa5 	vmul.f32	s11, s13, s11
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80024d6:	ed84 5a11 	vstr	s10, [r4, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80024da:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80024de:	edc4 5a37 	vstr	s11, [r4, #220]	; 0xdc
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80024e2:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80024e6:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80024ea:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80024ee:	ed95 0a03 	vldr	s0, [r5, #12]
 80024f2:	ed84 0a3b 	vstr	s0, [r4, #236]	; 0xec
       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80024f6:	f001 fa9b 	bl	8003a30 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 80024fa:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80024fe:	ed94 aa28 	vldr	s20, [r4, #160]	; 0xa0

       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002502:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 8002506:	ed94 0a22 	vldr	s0, [r4, #136]	; 0x88
       float i_q_error = controller->i_q_des - controller->i_q;
 800250a:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800250e:	ed94 9a29 	vldr	s18, [r4, #164]	; 0xa4
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002512:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
       float i_d_error = controller->i_d_des - controller->i_d;
 8002516:	ee3a aa66 	vsub.f32	s20, s20, s13
       float i_q_error = controller->i_q_des - controller->i_q;
 800251a:	ee39 9a47 	vsub.f32	s18, s18, s14
       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800251e:	eea7 0a8a 	vfma.f32	s0, s15, s20
 8002522:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002526:	f001 fa4b 	bl	80039c0 <fast_fminf>
 800252a:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
 800252e:	eef1 0a60 	vneg.f32	s1, s1
 8002532:	f001 fa3d 	bl	80039b0 <fast_fmaxf>

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002536:	edd4 6a1e 	vldr	s13, [r4, #120]	; 0x78
 800253a:	ed94 7a1c 	vldr	s14, [r4, #112]	; 0x70
 800253e:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002542:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002546:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 800254a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800254e:	eee7 7a0a 	vfma.f32	s15, s14, s20
 8002552:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
 8002556:	eeb0 0a67 	vmov.f32	s0, s15
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800255a:	f001 fa31 	bl	80039c0 <fast_fminf>
 800255e:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
 8002562:	eef1 0a60 	vneg.f32	s1, s1
 8002566:	f001 fa23 	bl	80039b0 <fast_fmaxf>
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800256a:	ed94 6a1d 	vldr	s12, [r4, #116]	; 0x74
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800256e:	edd4 6a1f 	vldr	s13, [r4, #124]	; 0x7c
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002572:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002576:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 800257a:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800257e:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002582:	ee66 6a26 	vmul.f32	s13, s12, s13
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002586:	eef0 5a47 	vmov.f32	s11, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 800258a:	ee67 7ae7 	vnmul.f32	s15, s15, s15
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800258e:	eee6 5a09 	vfma.f32	s11, s12, s18
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002592:	eea6 7a89 	vfma.f32	s14, s13, s18
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002596:	eee0 7aa0 	vfma.f32	s15, s1, s1
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800259a:	edc4 5a15 	vstr	s11, [r4, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800259e:	ed84 7a23 	vstr	s14, [r4, #140]	; 0x8c
 80025a2:	eeb0 0a47 	vmov.f32	s0, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80025a6:	eeb1 9ae7 	vsqrt.f32	s18, s15
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80025aa:	f001 fa09 	bl	80039c0 <fast_fminf>
 80025ae:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
 80025b2:	eef1 0a60 	vneg.f32	s1, s1
 80025b6:	f001 f9fb 	bl	80039b0 <fast_fmaxf>
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80025ba:	ed94 7a15 	vldr	s14, [r4, #84]	; 0x54
 80025be:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80025c2:	ed84 0a23 	vstr	s0, [r4, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80025c6:	ee67 7a07 	vmul.f32	s15, s14, s14
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80025ca:	eeb0 0a47 	vmov.f32	s0, s14
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80025ce:	eee6 7aa6 	vfma.f32	s15, s13, s13
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80025d2:	eef0 0a49 	vmov.f32	s1, s18
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80025d6:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80025da:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80025de:	f001 f9ef 	bl	80039c0 <fast_fminf>
 80025e2:	eef1 0a49 	vneg.f32	s1, s18
 80025e6:	f001 f9e3 	bl	80039b0 <fast_fmaxf>

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80025ea:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80025ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80025f2:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80025f6:	ed94 0a37 	vldr	s0, [r4, #220]	; 0xdc
 80025fa:	f001 fa19 	bl	8003a30 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 80025fe:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 8002602:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80026b4 <commutate+0x2cc>
 8002606:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
 800260a:	edd4 aa14 	vldr	s21, [r4, #80]	; 0x50
 800260e:	ed94 ba15 	vldr	s22, [r4, #84]	; 0x54
 8002612:	eea7 aa27 	vfma.f32	s20, s14, s15
    float cf = cos_lut(theta);
 8002616:	eeb0 0a4a 	vmov.f32	s0, s20
 800261a:	f001 fa63 	bl	8003ae4 <cos_lut>
 800261e:	eeb0 9a40 	vmov.f32	s18, s0
    float sf = sin_lut(theta);
 8002622:	eeb0 0a4a 	vmov.f32	s0, s20
 8002626:	f001 fa37 	bl	8003a98 <sin_lut>
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800262a:	ee69 1a29 	vmul.f32	s3, s18, s19
 800262e:	ee68 7ac9 	vnmul.f32	s15, s17, s18
 8002632:	eeb0 1a61 	vmov.f32	s2, s3
 8002636:	eea0 1a28 	vfma.f32	s2, s0, s17

       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800263a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800263e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002642:	eed0 1a28 	vfnms.f32	s3, s0, s17
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002646:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800264a:	eeb0 7a67 	vmov.f32	s14, s15
 800264e:	eea0 7a29 	vfma.f32	s14, s0, s19
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002652:	eee0 7a08 	vfma.f32	s15, s0, s16
    *a = cf*d - sf*q;
 8002656:	ee60 0a4b 	vnmul.f32	s1, s0, s22
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800265a:	ee2b 1a01 	vmul.f32	s2, s22, s2
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800265e:	ee6b 1a21 	vmul.f32	s3, s22, s3
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002662:	eeaa 1a87 	vfma.f32	s2, s21, s14
    *a = cf*d - sf*q;
 8002666:	eeea 0a89 	vfma.f32	s1, s21, s18
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800266a:	eeea 1aa7 	vfma.f32	s3, s21, s15
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800266e:	ed94 0a37 	vldr	s0, [r4, #220]	; 0xdc
    *a = cf*d - sf*q;
 8002672:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002676:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800267a:	edc4 1a1b 	vstr	s3, [r4, #108]	; 0x6c
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800267e:	f7ff fceb 	bl	8002058 <svm>
       //DEBUG zeros
       //svm(controller->v_max, 0*(controller->v_u), 0*(controller->v_v), 0*(controller->v_w), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

       set_dtc(controller);

    }
 8002682:	ecbd 8b08 	vpop	{d8-d11}
       set_dtc(controller);
 8002686:	4620      	mov	r0, r4
    }
 8002688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       set_dtc(controller);
 800268c:	f7ff bc42 	b.w	8001f14 <set_dtc>
 8002690:	2000068c 	.word	0x2000068c
 8002694:	3f5db3d7 	.word	0x3f5db3d7
 8002698:	bf5db3d7 	.word	0xbf5db3d7
 800269c:	3dcccccd 	.word	0x3dcccccd
 80026a0:	3f2aaaab 	.word	0x3f2aaaab
 80026a4:	3f666666 	.word	0x3f666666
 80026a8:	3c23d70a 	.word	0x3c23d70a
 80026ac:	3f7d70a4 	.word	0x3f7d70a4
 80026b0:	3f1fc60a 	.word	0x3f1fc60a
 80026b4:	385c3372 	.word	0x385c3372

080026b8 <torque_control>:


void torque_control(ControllerStruct *controller){

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80026b8:	edd0 7a33 	vldr	s15, [r0, #204]	; 0xcc
 80026bc:	edd0 3a0c 	vldr	s7, [r0, #48]	; 0x30
 80026c0:	edd0 4a35 	vldr	s9, [r0, #212]	; 0xd4
 80026c4:	edd0 6a32 	vldr	s13, [r0, #200]	; 0xc8
 80026c8:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 80026cc:	edd0 5a34 	vldr	s11, [r0, #208]	; 0xd0
    controller->i_q_des = torque_des/(KT*GR);
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <torque_control+0x50>)
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80026d2:	ed90 6a36 	vldr	s12, [r0, #216]	; 0xd8
    controller->i_q_des = torque_des/(KT*GR);
 80026d6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80026da:	ed93 5a11 	vldr	s10, [r3, #68]	; 0x44
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80026de:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80026e2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80026e6:	ee67 7aa4 	vmul.f32	s15, s15, s9
    controller->i_q_des = torque_des/(KT*GR);
 80026ea:	ee27 7a05 	vmul.f32	s14, s14, s10
 80026ee:	eee5 7aa6 	vfma.f32	s15, s11, s13
    controller->i_d_des = 0.0f;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80026f8:	ee77 7a86 	vadd.f32	s15, s15, s12
    controller->i_q_des = torque_des/(KT*GR);
 80026fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002700:	edc0 6a29 	vstr	s13, [r0, #164]	; 0xa4

    }
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	2000068c 	.word	0x2000068c

0800270c <zero_commands>:



void zero_commands(ControllerStruct * controller){
	//printf("ZERO COMMANDS!!");
	controller->t_ff = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
	controller->kp = 0;
 8002712:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	controller->kd = 0;
 8002716:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	controller->p_des = 0;
 800271a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	controller->v_des = 0;
 800271e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	controller->i_q_des = 0;
 8002722:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
 8002726:	4770      	bx	lr

08002728 <fsm_exit_state>:
				break;

		}
 }

 void fsm_exit_state(FSMStruct * fsmstate){
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	7803      	ldrb	r3, [r0, #0]
 800272c:	4604      	mov	r4, r0
 800272e:	2b05      	cmp	r3, #5
 8002730:	d80b      	bhi.n	800274a <fsm_exit_state+0x22>
 8002732:	e8df f003 	tbb	[pc, r3]
 8002736:	0308      	.short	0x0308
 8002738:	08080a0b 	.word	0x08080a0b
				}
				zero_commands(&controller);		// Set commands to zero
				break;
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <fsm_exit_state+0x78>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	8899      	ldrh	r1, [r3, #4]
 8002742:	f7ff f9db 	bl	8001afc <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8002746:	2301      	movs	r3, #1
 8002748:	70e3      	strb	r3, [r4, #3]
				break;
		}

 }
 800274a:	bd38      	pop	{r3, r4, r5, pc}
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 800274c:	4d15      	ldr	r5, [pc, #84]	; (80027a4 <fsm_exit_state+0x7c>)
 800274e:	edd5 7a11 	vldr	s15, [r5, #68]	; 0x44
 8002752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002756:	eef0 7ae7 	vabs.f32	s15, s15
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	d404      	bmi.n	800276e <fsm_exit_state+0x46>
 }
 8002764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				zero_commands(&controller);		// Set commands to zero
 8002768:	480e      	ldr	r0, [pc, #56]	; (80027a4 <fsm_exit_state+0x7c>)
 800276a:	f7ff bfcf 	b.w	800270c <zero_commands>
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 800276e:	edd5 7a12 	vldr	s15, [r5, #72]	; 0x48
 8002772:	eef0 7ae7 	vabs.f32	s15, s15
 8002776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	d5f1      	bpl.n	8002764 <fsm_exit_state+0x3c>
					drv_disable_gd(drv);
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <fsm_exit_state+0x78>)
					fsmstate->ready = 1;
 8002782:	2201      	movs	r2, #1
 8002784:	70c2      	strb	r2, [r0, #3]
					drv_disable_gd(drv);
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	8899      	ldrh	r1, [r3, #4]
 800278a:	f7ff f9b7 	bl	8001afc <drv_disable_gd>
					reset_foc(&controller);
 800278e:	4628      	mov	r0, r5
 8002790:	f7ff fdb4 	bl	80022fc <reset_foc>
					HAL_GPIO_WritePin(LED2, GPIO_PIN_RESET );
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <fsm_exit_state+0x80>)
 8002796:	2200      	movs	r2, #0
 8002798:	2108      	movs	r1, #8
 800279a:	f003 fbcf 	bl	8005f3c <HAL_GPIO_WritePin>
 800279e:	e7e1      	b.n	8002764 <fsm_exit_state+0x3c>
 80027a0:	20009368 	.word	0x20009368
 80027a4:	2000078c 	.word	0x2000078c
 80027a8:	48000800 	.word	0x48000800

080027ac <enter_setup_state>:
	    printf(" esc - Exit to Menu\n\r");

	    //gpio.led->write(0);
 }

 void enter_setup_state(void){
 80027ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("\r\n Configuration Options \n\r");
 80027b0:	486b      	ldr	r0, [pc, #428]	; (8002960 <enter_setup_state+0x1b4>)
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
	    printf("\r\n Motor:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 80027b2:	4c6c      	ldr	r4, [pc, #432]	; (8002964 <enter_setup_state+0x1b8>)
 80027b4:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8002a3c <enter_setup_state+0x290>
 80027b8:	4f6b      	ldr	r7, [pc, #428]	; (8002968 <enter_setup_state+0x1bc>)
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
	    printf("\r\n Control:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 80027ba:	4d6c      	ldr	r5, [pc, #432]	; (800296c <enter_setup_state+0x1c0>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 80027bc:	4e6c      	ldr	r6, [pc, #432]	; (8002970 <enter_setup_state+0x1c4>)
 80027be:	f8df b280 	ldr.w	fp, [pc, #640]	; 8002a40 <enter_setup_state+0x294>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
	    printf("\r\n CAN:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 80027c2:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8002a44 <enter_setup_state+0x298>
 80027c6:	f8df a280 	ldr.w	sl, [pc, #640]	; 8002a48 <enter_setup_state+0x29c>
 void enter_setup_state(void){
 80027ca:	b085      	sub	sp, #20
	    printf("\r\n Configuration Options \n\r");
 80027cc:	f007 f888 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80027d0:	4a68      	ldr	r2, [pc, #416]	; (8002974 <enter_setup_state+0x1c8>)
 80027d2:	4b69      	ldr	r3, [pc, #420]	; (8002978 <enter_setup_state+0x1cc>)
 80027d4:	4969      	ldr	r1, [pc, #420]	; (800297c <enter_setup_state+0x1d0>)
 80027d6:	486a      	ldr	r0, [pc, #424]	; (8002980 <enter_setup_state+0x1d4>)
 80027d8:	e9cd 3200 	strd	r3, r2, [sp]
 80027dc:	4b69      	ldr	r3, [pc, #420]	; (8002984 <enter_setup_state+0x1d8>)
 80027de:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <enter_setup_state+0x1dc>)
 80027e0:	f007 f87e 	bl	80098e0 <iprintf>
	    printf("\r\n Motor:\r\n");
 80027e4:	4869      	ldr	r0, [pc, #420]	; (800298c <enter_setup_state+0x1e0>)
 80027e6:	f007 f901 	bl	80099ec <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 80027ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80027ec:	f7fd fed4 	bl	8000598 <__aeabi_f2d>
 80027f0:	4643      	mov	r3, r8
 80027f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027f6:	4a66      	ldr	r2, [pc, #408]	; (8002990 <enter_setup_state+0x1e4>)
 80027f8:	9700      	str	r7, [sp, #0]
 80027fa:	4966      	ldr	r1, [pc, #408]	; (8002994 <enter_setup_state+0x1e8>)
 80027fc:	4866      	ldr	r0, [pc, #408]	; (8002998 <enter_setup_state+0x1ec>)
 80027fe:	f007 f86f 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8002802:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002804:	f7fd fec8 	bl	8000598 <__aeabi_f2d>
 8002808:	4643      	mov	r3, r8
 800280a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800280e:	4a63      	ldr	r2, [pc, #396]	; (800299c <enter_setup_state+0x1f0>)
 8002810:	4963      	ldr	r1, [pc, #396]	; (80029a0 <enter_setup_state+0x1f4>)
 8002812:	9700      	str	r7, [sp, #0]
 8002814:	4863      	ldr	r0, [pc, #396]	; (80029a4 <enter_setup_state+0x1f8>)
 8002816:	f007 f863 	bl	80098e0 <iprintf>
	    printf("\r\n Control:\r\n");
 800281a:	4863      	ldr	r0, [pc, #396]	; (80029a8 <enter_setup_state+0x1fc>)
 800281c:	f007 f8e6 	bl	80099ec <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8002820:	68a0      	ldr	r0, [r4, #8]
 8002822:	f7fd feb9 	bl	8000598 <__aeabi_f2d>
 8002826:	4b61      	ldr	r3, [pc, #388]	; (80029ac <enter_setup_state+0x200>)
 8002828:	4a61      	ldr	r2, [pc, #388]	; (80029b0 <enter_setup_state+0x204>)
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002830:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <enter_setup_state+0x208>)
 8002832:	4961      	ldr	r1, [pc, #388]	; (80029b8 <enter_setup_state+0x20c>)
 8002834:	4628      	mov	r0, r5
 8002836:	f007 f853 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 800283a:	68e0      	ldr	r0, [r4, #12]
 800283c:	f7fd feac 	bl	8000598 <__aeabi_f2d>
 8002840:	4633      	mov	r3, r6
 8002842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002846:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <enter_setup_state+0x210>)
 8002848:	495d      	ldr	r1, [pc, #372]	; (80029c0 <enter_setup_state+0x214>)
 800284a:	f8cd b000 	str.w	fp, [sp]
 800284e:	4628      	mov	r0, r5
 8002850:	f007 f846 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8002854:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002856:	f7fd fe9f 	bl	8000598 <__aeabi_f2d>
 800285a:	463b      	mov	r3, r7
 800285c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <enter_setup_state+0x218>)
 8002862:	9700      	str	r7, [sp, #0]
 8002864:	4958      	ldr	r1, [pc, #352]	; (80029c8 <enter_setup_state+0x21c>)
 8002866:	4628      	mov	r0, r5
 8002868:	f007 f83a 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 800286c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800286e:	f7fd fe93 	bl	8000598 <__aeabi_f2d>
 8002872:	463b      	mov	r3, r7
 8002874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002878:	4a54      	ldr	r2, [pc, #336]	; (80029cc <enter_setup_state+0x220>)
 800287a:	9700      	str	r7, [sp, #0]
 800287c:	4954      	ldr	r1, [pc, #336]	; (80029d0 <enter_setup_state+0x224>)
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 800287e:	4f55      	ldr	r7, [pc, #340]	; (80029d4 <enter_setup_state+0x228>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8002880:	4628      	mov	r0, r5
 8002882:	f007 f82d 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8002886:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002888:	f7fd fe86 	bl	8000598 <__aeabi_f2d>
 800288c:	4b52      	ldr	r3, [pc, #328]	; (80029d8 <enter_setup_state+0x22c>)
 800288e:	4a53      	ldr	r2, [pc, #332]	; (80029dc <enter_setup_state+0x230>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002896:	4633      	mov	r3, r6
 8002898:	4951      	ldr	r1, [pc, #324]	; (80029e0 <enter_setup_state+0x234>)
 800289a:	4628      	mov	r0, r5
 800289c:	f007 f820 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 80028a0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028a2:	f7fd fe79 	bl	8000598 <__aeabi_f2d>
 80028a6:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <enter_setup_state+0x238>)
 80028a8:	4a4f      	ldr	r2, [pc, #316]	; (80029e8 <enter_setup_state+0x23c>)
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028b0:	4633      	mov	r3, r6
 80028b2:	494e      	ldr	r1, [pc, #312]	; (80029ec <enter_setup_state+0x240>)
 80028b4:	4628      	mov	r0, r5
 80028b6:	f007 f813 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 80028ba:	69a0      	ldr	r0, [r4, #24]
 80028bc:	f7fd fe6c 	bl	8000598 <__aeabi_f2d>
 80028c0:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <enter_setup_state+0x244>)
 80028c2:	4a4c      	ldr	r2, [pc, #304]	; (80029f4 <enter_setup_state+0x248>)
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028ca:	4633      	mov	r3, r6
 80028cc:	494a      	ldr	r1, [pc, #296]	; (80029f8 <enter_setup_state+0x24c>)
 80028ce:	4628      	mov	r0, r5
 80028d0:	f007 f806 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 80028d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80028d6:	f7fd fe5f 	bl	8000598 <__aeabi_f2d>
 80028da:	4633      	mov	r3, r6
 80028dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028e0:	4a46      	ldr	r2, [pc, #280]	; (80029fc <enter_setup_state+0x250>)
 80028e2:	4947      	ldr	r1, [pc, #284]	; (8002a00 <enter_setup_state+0x254>)
 80028e4:	f8cd b000 	str.w	fp, [sp]
 80028e8:	4628      	mov	r0, r5
 80028ea:	f006 fff9 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 80028ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80028f0:	f7fd fe52 	bl	8000598 <__aeabi_f2d>
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <enter_setup_state+0x258>)
 80028f6:	4a44      	ldr	r2, [pc, #272]	; (8002a08 <enter_setup_state+0x25c>)
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028fe:	4633      	mov	r3, r6
 8002900:	4942      	ldr	r1, [pc, #264]	; (8002a0c <enter_setup_state+0x260>)
 8002902:	4628      	mov	r0, r5
 8002904:	f006 ffec 	bl	80098e0 <iprintf>
	    printf("\r\n CAN:\r\n");
 8002908:	4841      	ldr	r0, [pc, #260]	; (8002a10 <enter_setup_state+0x264>)
 800290a:	f007 f86f 	bl	80099ec <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 800290e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <enter_setup_state+0x268>)
 8002916:	4940      	ldr	r1, [pc, #256]	; (8002a18 <enter_setup_state+0x26c>)
 8002918:	9700      	str	r7, [sp, #0]
 800291a:	4643      	mov	r3, r8
 800291c:	4650      	mov	r0, sl
 800291e:	f006 ffdf 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8002922:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	4a3c      	ldr	r2, [pc, #240]	; (8002a1c <enter_setup_state+0x270>)
 800292a:	493d      	ldr	r1, [pc, #244]	; (8002a20 <enter_setup_state+0x274>)
 800292c:	9700      	str	r7, [sp, #0]
 800292e:	4643      	mov	r3, r8
 8002930:	4650      	mov	r0, sl
 8002932:	f006 ffd5 	bl	80098e0 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8002936:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800293a:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <enter_setup_state+0x278>)
 800293c:	493a      	ldr	r1, [pc, #232]	; (8002a28 <enter_setup_state+0x27c>)
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	9200      	str	r2, [sp, #0]
 8002942:	4643      	mov	r3, r8
 8002944:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <enter_setup_state+0x280>)
 8002946:	483a      	ldr	r0, [pc, #232]	; (8002a30 <enter_setup_state+0x284>)
 8002948:	f006 ffca 	bl	80098e0 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 800294c:	4839      	ldr	r0, [pc, #228]	; (8002a34 <enter_setup_state+0x288>)
 800294e:	f006 ffc7 	bl	80098e0 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8002952:	4839      	ldr	r0, [pc, #228]	; (8002a38 <enter_setup_state+0x28c>)
 }
 8002954:	b005      	add	sp, #20
 8002956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 800295a:	f006 bfc1 	b.w	80098e0 <iprintf>
 800295e:	bf00      	nop
 8002960:	0800d990 	.word	0x0800d990
 8002964:	2000068c 	.word	0x2000068c
 8002968:	0800da38 	.word	0x0800da38
 800296c:	0800daa8 	.word	0x0800daa8
 8002970:	0800dad0 	.word	0x0800dad0
 8002974:	0800d9e4 	.word	0x0800d9e4
 8002978:	0800d9f4 	.word	0x0800d9f4
 800297c:	0800d9bc 	.word	0x0800d9bc
 8002980:	0800d9c4 	.word	0x0800d9c4
 8002984:	0800d9ac 	.word	0x0800d9ac
 8002988:	0800d9b0 	.word	0x0800d9b0
 800298c:	0800d9f8 	.word	0x0800d9f8
 8002990:	0800da08 	.word	0x0800da08
 8002994:	0800da14 	.word	0x0800da14
 8002998:	0800da18 	.word	0x0800da18
 800299c:	0800da3c 	.word	0x0800da3c
 80029a0:	0800da54 	.word	0x0800da54
 80029a4:	0800da58 	.word	0x0800da58
 80029a8:	0800da78 	.word	0x0800da78
 80029ac:	0800dac8 	.word	0x0800dac8
 80029b0:	0800da8c 	.word	0x0800da8c
 80029b4:	0800da88 	.word	0x0800da88
 80029b8:	0800daa4 	.word	0x0800daa4
 80029bc:	0800dad4 	.word	0x0800dad4
 80029c0:	0800dae8 	.word	0x0800dae8
 80029c4:	0800daf4 	.word	0x0800daf4
 80029c8:	0800db10 	.word	0x0800db10
 80029cc:	0800db14 	.word	0x0800db14
 80029d0:	0800db34 	.word	0x0800db34
 80029d4:	0800dc20 	.word	0x0800dc20
 80029d8:	0800db58 	.word	0x0800db58
 80029dc:	0800db38 	.word	0x0800db38
 80029e0:	0800db54 	.word	0x0800db54
 80029e4:	0800db84 	.word	0x0800db84
 80029e8:	0800db60 	.word	0x0800db60
 80029ec:	0800db80 	.word	0x0800db80
 80029f0:	0800dba0 	.word	0x0800dba0
 80029f4:	0800db88 	.word	0x0800db88
 80029f8:	0800e9b8 	.word	0x0800e9b8
 80029fc:	0800dba8 	.word	0x0800dba8
 8002a00:	0800dbc0 	.word	0x0800dbc0
 8002a04:	0800dbe0 	.word	0x0800dbe0
 8002a08:	0800dbc4 	.word	0x0800dbc4
 8002a0c:	0800dbdc 	.word	0x0800dbdc
 8002a10:	0800dbe8 	.word	0x0800dbe8
 8002a14:	0800dbf4 	.word	0x0800dbf4
 8002a18:	0800dbfc 	.word	0x0800dbfc
 8002a1c:	0800dc24 	.word	0x0800dc24
 8002a20:	0800dc34 	.word	0x0800dc34
 8002a24:	0800dc78 	.word	0x0800dc78
 8002a28:	0800dc58 	.word	0x0800dc58
 8002a2c:	0800dc38 	.word	0x0800dc38
 8002a30:	0800dc5c 	.word	0x0800dc5c
 8002a34:	0800dc80 	.word	0x0800dc80
 8002a38:	0800dccc 	.word	0x0800dccc
 8002a3c:	0800da04 	.word	0x0800da04
 8002a40:	0800daec 	.word	0x0800daec
 8002a44:	20008f3c 	.word	0x20008f3c
 8002a48:	0800dc00 	.word	0x0800dc00

08002a4c <fsm_enter_state>:
 void fsm_enter_state(FSMStruct * fsmstate){
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	7803      	ldrb	r3, [r0, #0]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d804      	bhi.n	8002a5e <fsm_enter_state+0x12>
 8002a54:	e8df f003 	tbb	[pc, r3]
 8002a58:	033f2808 	.word	0x033f2808
 8002a5c:	04          	.byte	0x04
 8002a5d:	00          	.byte	0x00
 }
 8002a5e:	bd10      	pop	{r4, pc}
 8002a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				enter_setup_state();
 8002a64:	f7ff bea2 	b.w	80027ac <enter_setup_state>
	    printf("\n\r\n\r");
 8002a68:	481f      	ldr	r0, [pc, #124]	; (8002ae8 <fsm_enter_state+0x9c>)
 8002a6a:	f006 ff39 	bl	80098e0 <iprintf>
	    printf(" Commands:\n\r");
 8002a6e:	481f      	ldr	r0, [pc, #124]	; (8002aec <fsm_enter_state+0xa0>)
 8002a70:	f006 ff36 	bl	80098e0 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8002a74:	481e      	ldr	r0, [pc, #120]	; (8002af0 <fsm_enter_state+0xa4>)
 8002a76:	f006 ff33 	bl	80098e0 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8002a7a:	481e      	ldr	r0, [pc, #120]	; (8002af4 <fsm_enter_state+0xa8>)
 8002a7c:	f006 ff30 	bl	80098e0 <iprintf>
	    printf(" s - Setup\n\r");
 8002a80:	481d      	ldr	r0, [pc, #116]	; (8002af8 <fsm_enter_state+0xac>)
 8002a82:	f006 ff2d 	bl	80098e0 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8002a86:	481d      	ldr	r0, [pc, #116]	; (8002afc <fsm_enter_state+0xb0>)
 8002a88:	f006 ff2a 	bl	80098e0 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8002a8c:	481c      	ldr	r0, [pc, #112]	; (8002b00 <fsm_enter_state+0xb4>)
 8002a8e:	f006 ff27 	bl	80098e0 <iprintf>
	    printf(" f - Factory reset flash vars\n\r");
 8002a92:	481c      	ldr	r0, [pc, #112]	; (8002b04 <fsm_enter_state+0xb8>)
 8002a94:	f006 ff24 	bl	80098e0 <iprintf>
	    printf(" d - Variable dump\n\r");
 8002a98:	481b      	ldr	r0, [pc, #108]	; (8002b08 <fsm_enter_state+0xbc>)
 8002a9a:	f006 ff21 	bl	80098e0 <iprintf>
 }
 8002a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    printf(" esc - Exit to Menu\n\r");
 8002aa2:	481a      	ldr	r0, [pc, #104]	; (8002b0c <fsm_enter_state+0xc0>)
 8002aa4:	f006 bf1c 	b.w	80098e0 <iprintf>
				comm_encoder.e_zero = 0;
 8002aa8:	4c19      	ldr	r4, [pc, #100]	; (8002b10 <fsm_enter_state+0xc4>)
				comm_encoder_cal.done_cal = 0;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <fsm_enter_state+0xc8>)
 8002aac:	2100      	movs	r1, #0
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002aae:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8002ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
				comm_encoder.e_zero = 0;
 8002ab6:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
				comm_encoder_cal.done_cal = 0;
 8002aba:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8002abe:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8002ac2:	7419      	strb	r1, [r3, #16]
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002ac4:	f006 fa9a 	bl	8008ffc <memset>
				drv_enable_gd(drv);
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <fsm_enter_state+0xcc>)
 }
 8002aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				drv_enable_gd(drv);
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	8899      	ldrh	r1, [r3, #4]
 8002ad2:	f7fe bfc1 	b.w	8001a58 <drv_enable_gd>
				HAL_GPIO_WritePin(LED2, GPIO_PIN_SET );
 8002ad6:	4811      	ldr	r0, [pc, #68]	; (8002b1c <fsm_enter_state+0xd0>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2108      	movs	r1, #8
 8002adc:	f003 fa2e 	bl	8005f3c <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8002ae0:	480f      	ldr	r0, [pc, #60]	; (8002b20 <fsm_enter_state+0xd4>)
 8002ae2:	f7ff fc0b 	bl	80022fc <reset_foc>
				drv_enable_gd(drv);
 8002ae6:	e7ef      	b.n	8002ac8 <fsm_enter_state+0x7c>
 8002ae8:	0800d8b4 	.word	0x0800d8b4
 8002aec:	0800d8bc 	.word	0x0800d8bc
 8002af0:	0800d8cc 	.word	0x0800d8cc
 8002af4:	0800d8e0 	.word	0x0800d8e0
 8002af8:	0800d8fc 	.word	0x0800d8fc
 8002afc:	0800d90c 	.word	0x0800d90c
 8002b00:	0800d924 	.word	0x0800d924
 8002b04:	0800d940 	.word	0x0800d940
 8002b08:	0800d960 	.word	0x0800d960
 8002b0c:	0800d978 	.word	0x0800d978
 8002b10:	200003e8 	.word	0x200003e8
 8002b14:	20000a80 	.word	0x20000a80
 8002b18:	20009368 	.word	0x20009368
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	2000078c 	.word	0x2000078c

08002b24 <run_fsm>:
 void run_fsm(FSMStruct * fsmstate){
 8002b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 if(fsmstate->next_state != fsmstate->state){
 8002b28:	7803      	ldrb	r3, [r0, #0]
 8002b2a:	7842      	ldrb	r2, [r0, #1]
 8002b2c:	429a      	cmp	r2, r3
 void run_fsm(FSMStruct * fsmstate){
 8002b2e:	4604      	mov	r4, r0
	 if(fsmstate->next_state != fsmstate->state){
 8002b30:	d107      	bne.n	8002b42 <run_fsm+0x1e>
	 switch(fsmstate->state){
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d00c      	beq.n	8002b50 <run_fsm+0x2c>
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d02b      	beq.n	8002b92 <run_fsm+0x6e>
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d01a      	beq.n	8002b74 <run_fsm+0x50>
 }
 8002b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8002b42:	f7ff fdf1 	bl	8002728 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8002b46:	78e3      	ldrb	r3, [r4, #3]
 8002b48:	bb8b      	cbnz	r3, 8002bae <run_fsm+0x8a>
 8002b4a:	7823      	ldrb	r3, [r4, #0]
	 switch(fsmstate->state){
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d1f2      	bne.n	8002b36 <run_fsm+0x12>
				 torque_control(&controller);
 8002b50:	4c36      	ldr	r4, [pc, #216]	; (8002c2c <run_fsm+0x108>)
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff fdb0 	bl	80026b8 <torque_control>
				 field_weaken(&controller);
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fc07 	bl	800236c <field_weaken>
				 commutate(&controller, &comm_encoder);
 8002b5e:	4934      	ldr	r1, [pc, #208]	; (8002c30 <run_fsm+0x10c>)
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff fc41 	bl	80023e8 <commutate>
			 controller.timeout ++;
 8002b66:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 }
 8002b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 if(!comm_encoder_cal.done_ordering){
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <run_fsm+0x110>)
 8002b76:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002b7a:	b183      	cbz	r3, 8002b9e <run_fsm+0x7a>
			 else if(!comm_encoder_cal.done_cal){
 8002b7c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8002b80:	b9db      	cbnz	r3, 8002bba <run_fsm+0x96>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002b82:	492a      	ldr	r1, [pc, #168]	; (8002c2c <run_fsm+0x108>)
 8002b84:	482a      	ldr	r0, [pc, #168]	; (8002c30 <run_fsm+0x10c>)
 8002b86:	f8d1 30b0 	ldr.w	r3, [r1, #176]	; 0xb0
 }
 8002b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002b8e:	f7fe bcdb 	b.w	8001548 <calibrate_encoder>
 }
 8002b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			 ps_print(&comm_encoder, 100);
 8002b96:	4826      	ldr	r0, [pc, #152]	; (8002c30 <run_fsm+0x10c>)
 8002b98:	2164      	movs	r1, #100	; 0x64
 8002b9a:	f001 b8d1 	b.w	8003d40 <ps_print>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002b9e:	4923      	ldr	r1, [pc, #140]	; (8002c2c <run_fsm+0x108>)
 8002ba0:	4823      	ldr	r0, [pc, #140]	; (8002c30 <run_fsm+0x10c>)
 8002ba2:	f8d1 30b0 	ldr.w	r3, [r1, #176]	; 0xb0
 }
 8002ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002baa:	f7fe bbc1 	b.w	8001330 <order_phases>
			 fsmstate->state = fsmstate->next_state;
 8002bae:	7863      	ldrb	r3, [r4, #1]
 8002bb0:	7023      	strb	r3, [r4, #0]
			 fsm_enter_state(fsmstate);
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7ff ff4a 	bl	8002a4c <fsm_enter_state>
 8002bb8:	e7c7      	b.n	8002b4a <run_fsm+0x26>
				 E_ZERO = comm_encoder_cal.ezero;
 8002bba:	69d5      	ldr	r5, [r2, #28]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002bbc:	4f1c      	ldr	r7, [pc, #112]	; (8002c30 <run_fsm+0x10c>)
 8002bbe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002c38 <run_fsm+0x114>
 8002bc2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
				 E_ZERO = comm_encoder_cal.ezero;
 8002bc6:	4e1d      	ldr	r6, [pc, #116]	; (8002c3c <run_fsm+0x118>)
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002bc8:	426b      	negs	r3, r5
 8002bca:	ee00 3a10 	vmov	s0, r3
 8002bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002bd6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002bda:	ee20 0a27 	vmul.f32	s0, s0, s15
				 E_ZERO = comm_encoder_cal.ezero;
 8002bde:	6175      	str	r5, [r6, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002be0:	f00a fb80 	bl	800d2e4 <fmodf>
 8002be4:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002c40 <run_fsm+0x11c>
 8002be8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002bec:	ee17 0a90 	vmov	r0, s15
 8002bf0:	f7fd fcd2 	bl	8000598 <__aeabi_f2d>
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4812      	ldr	r0, [pc, #72]	; (8002c44 <run_fsm+0x120>)
 8002bfc:	f006 fe70 	bl	80098e0 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8002c00:	4911      	ldr	r1, [pc, #68]	; (8002c48 <run_fsm+0x124>)
 8002c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c06:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002c0a:	f006 f9cf 	bl	8008fac <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8002c0e:	490e      	ldr	r1, [pc, #56]	; (8002c48 <run_fsm+0x124>)
 8002c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c14:	f106 0018 	add.w	r0, r6, #24
 8002c18:	f006 f9c8 	bl	8008fac <memcpy>
				 save_to_flash();
 8002c1c:	f7ff f900 	bl	8001e20 <save_to_flash>
				 load_from_flash();
 8002c20:	f7ff f8c8 	bl	8001db4 <load_from_flash>
		fsmstate->next_state = MENU_MODE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	7063      	strb	r3, [r4, #1]
		fsmstate->ready = 0;
 8002c28:	70e3      	strb	r3, [r4, #3]
		return;
 8002c2a:	e788      	b.n	8002b3e <run_fsm+0x1a>
 8002c2c:	2000078c 	.word	0x2000078c
 8002c30:	200003e8 	.word	0x200003e8
 8002c34:	20000a80 	.word	0x20000a80
 8002c38:	37800000 	.word	0x37800000
 8002c3c:	20008f3c 	.word	0x20008f3c
 8002c40:	40c90fdb 	.word	0x40c90fdb
 8002c44:	0800dcf8 	.word	0x0800dcf8
 8002c48:	20008aac 	.word	0x20008aac

08002c4c <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	7b43      	ldrb	r3, [r0, #13]
 8002c50:	3b61      	subs	r3, #97	; 0x61
 8002c52:	4604      	mov	r4, r0
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
			 V_MIN = -V_MAX;
			 printf("V_MAX set to %f\r\n", V_MAX);
			 break;
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8002c54:	1d05      	adds	r5, r0, #4
 8002c56:	2b17      	cmp	r3, #23
 8002c58:	d819      	bhi.n	8002c8e <process_user_input+0x42>
 8002c5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c5e:	0028      	.short	0x0028
 8002c60:	00780050 	.word	0x00780050
 8002c64:	001800a0 	.word	0x001800a0
 8002c68:	00e700bf 	.word	0x00e700bf
 8002c6c:	012e0106 	.word	0x012e0106
 8002c70:	01380018 	.word	0x01380018
 8002c74:	017f0157 	.word	0x017f0157
 8002c78:	00180018 	.word	0x00180018
 8002c7c:	00180189 	.word	0x00180189
 8002c80:	00180018 	.word	0x00180018
 8002c84:	001801ac 	.word	0x001801ac
 8002c88:	001801b6 	.word	0x001801b6
 8002c8c:	020b      	.short	0x020b
 8002c8e:	48e0      	ldr	r0, [pc, #896]	; (8003010 <process_user_input+0x3c4>)
 8002c90:	4629      	mov	r1, r5
 8002c92:	f006 fe25 	bl	80098e0 <iprintf>
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 8002c96:	f7ff f8c3 	bl	8001e20 <save_to_flash>
	 load_from_flash();
 8002c9a:	f7ff f88b 	bl	8001db4 <load_from_flash>
	 enter_setup_state();
 8002c9e:	f7ff fd85 	bl	80027ac <enter_setup_state>

	 fsmstate->bytecount = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	7323      	strb	r3, [r4, #12]
	 fsmstate->cmd_id = 0;
 8002ca6:	7363      	strb	r3, [r4, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8002ca8:	602b      	str	r3, [r5, #0]
 8002caa:	606b      	str	r3, [r5, #4]
 }
 8002cac:	bd38      	pop	{r3, r4, r5, pc}
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f006 f94a 	bl	8008f48 <atof>
 8002cb4:	ec51 0b10 	vmov	r0, r1, d0
 8002cb8:	f7fd ffbe 	bl	8000c38 <__aeabi_d2f>
 8002cbc:	ee07 0a90 	vmov	s15, r0
 8002cc0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	bf88      	it	hi
 8002cce:	eef0 7a47 	vmovhi.f32	s15, s14
 8002cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cd6:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 8003070 <process_user_input+0x424>
 8002cda:	4bce      	ldr	r3, [pc, #824]	; (8003014 <process_user_input+0x3c8>)
 8002cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce0:	bfb8      	it	lt
 8002ce2:	eef0 7a47 	vmovlt.f32	s15, s14
 8002ce6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8002cea:	ee17 0a90 	vmov	r0, s15
 8002cee:	f7fd fc53 	bl	8000598 <__aeabi_f2d>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	48c8      	ldr	r0, [pc, #800]	; (8003018 <process_user_input+0x3cc>)
 8002cf8:	f006 fdf2 	bl	80098e0 <iprintf>
			 break;
 8002cfc:	e7cb      	b.n	8002c96 <process_user_input+0x4a>
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f006 f922 	bl	8008f48 <atof>
 8002d04:	ec51 0b10 	vmov	r0, r1, d0
 8002d08:	f7fd ff96 	bl	8000c38 <__aeabi_d2f>
 8002d0c:	eddf 6ac3 	vldr	s13, [pc, #780]	; 800301c <process_user_input+0x3d0>
 8002d10:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8003020 <process_user_input+0x3d4>
 8002d14:	4bbf      	ldr	r3, [pc, #764]	; (8003014 <process_user_input+0x3c8>)
 8002d16:	ee07 0a90 	vmov	s15, r0
 8002d1a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	bf88      	it	hi
 8002d24:	eef0 7a66 	vmovhi.f32	s15, s13
 8002d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	bfb8      	it	lt
 8002d32:	eef0 7a47 	vmovlt.f32	s15, s14
 8002d36:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8002d3a:	ee17 0a90 	vmov	r0, s15
 8002d3e:	f7fd fc2b 	bl	8000598 <__aeabi_f2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	48b7      	ldr	r0, [pc, #732]	; (8003024 <process_user_input+0x3d8>)
 8002d48:	f006 fdca 	bl	80098e0 <iprintf>
			 break;
 8002d4c:	e7a3      	b.n	8002c96 <process_user_input+0x4a>
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f006 f8fa 	bl	8008f48 <atof>
 8002d54:	ec51 0b10 	vmov	r0, r1, d0
 8002d58:	f7fd ff6e 	bl	8000c38 <__aeabi_d2f>
 8002d5c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003028 <process_user_input+0x3dc>
 8002d60:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8003070 <process_user_input+0x424>
 8002d64:	4bab      	ldr	r3, [pc, #684]	; (8003014 <process_user_input+0x3c8>)
 8002d66:	ee07 0a90 	vmov	s15, r0
 8002d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	bf88      	it	hi
 8002d74:	eef0 7a47 	vmovhi.f32	s15, s14
 8002d78:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	bfb8      	it	lt
 8002d82:	eef0 7a66 	vmovlt.f32	s15, s13
 8002d86:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8002d8a:	ee17 0a90 	vmov	r0, s15
 8002d8e:	f7fd fc03 	bl	8000598 <__aeabi_f2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	48a5      	ldr	r0, [pc, #660]	; (800302c <process_user_input+0x3e0>)
 8002d98:	f006 fda2 	bl	80098e0 <iprintf>
			 break;
 8002d9c:	e77b      	b.n	8002c96 <process_user_input+0x4a>
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f006 f8d2 	bl	8008f48 <atof>
 8002da4:	ec51 0b10 	vmov	r0, r1, d0
 8002da8:	f7fd ff46 	bl	8000c38 <__aeabi_d2f>
 8002dac:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8003070 <process_user_input+0x424>
 8002db0:	4b98      	ldr	r3, [pc, #608]	; (8003014 <process_user_input+0x3c8>)
 8002db2:	ee07 0a90 	vmov	s15, r0
 8002db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbe:	bfb8      	it	lt
 8002dc0:	eef0 7a47 	vmovlt.f32	s15, s14
 8002dc4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8002dc8:	ee17 0a90 	vmov	r0, s15
 8002dcc:	f7fd fbe4 	bl	8000598 <__aeabi_f2d>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4896      	ldr	r0, [pc, #600]	; (8003030 <process_user_input+0x3e4>)
 8002dd6:	f006 fd83 	bl	80098e0 <iprintf>
			 break;
 8002dda:	e75c      	b.n	8002c96 <process_user_input+0x4a>
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f006 f8b3 	bl	8008f48 <atof>
 8002de2:	ec51 0b10 	vmov	r0, r1, d0
 8002de6:	f7fd ff27 	bl	8000c38 <__aeabi_d2f>
 8002dea:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003034 <process_user_input+0x3e8>
 8002dee:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003070 <process_user_input+0x424>
 8002df2:	4b88      	ldr	r3, [pc, #544]	; (8003014 <process_user_input+0x3c8>)
 8002df4:	ee07 0a90 	vmov	s15, r0
 8002df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	bf88      	it	hi
 8002e02:	eef0 7a47 	vmovhi.f32	s15, s14
 8002e06:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	bfb8      	it	lt
 8002e10:	eef0 7a66 	vmovlt.f32	s15, s13
 8002e14:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8002e18:	ee17 0a90 	vmov	r0, s15
 8002e1c:	f7fd fbbc 	bl	8000598 <__aeabi_f2d>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4884      	ldr	r0, [pc, #528]	; (8003038 <process_user_input+0x3ec>)
 8002e26:	f006 fd5b 	bl	80098e0 <iprintf>
			 break;
 8002e2a:	e734      	b.n	8002c96 <process_user_input+0x4a>
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f006 f88b 	bl	8008f48 <atof>
 8002e32:	ec51 0b10 	vmov	r0, r1, d0
 8002e36:	f7fd feff 	bl	8000c38 <__aeabi_d2f>
 8002e3a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800303c <process_user_input+0x3f0>
 8002e3e:	4b75      	ldr	r3, [pc, #468]	; (8003014 <process_user_input+0x3c8>)
 8002e40:	ee07 0a90 	vmov	s15, r0
 8002e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	bfb8      	it	lt
 8002e4e:	eef0 7a47 	vmovlt.f32	s15, s14
 8002e52:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8002e56:	ee17 0a90 	vmov	r0, s15
 8002e5a:	f7fd fb9d 	bl	8000598 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4877      	ldr	r0, [pc, #476]	; (8003040 <process_user_input+0x3f4>)
 8002e64:	f006 fd3c 	bl	80098e0 <iprintf>
			 break;
 8002e68:	e715      	b.n	8002c96 <process_user_input+0x4a>
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f006 f86c 	bl	8008f48 <atof>
 8002e70:	ec51 0b10 	vmov	r0, r1, d0
 8002e74:	f7fd fee0 	bl	8000c38 <__aeabi_d2f>
 8002e78:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003044 <process_user_input+0x3f8>
 8002e7c:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003070 <process_user_input+0x424>
 8002e80:	4b64      	ldr	r3, [pc, #400]	; (8003014 <process_user_input+0x3c8>)
 8002e82:	ee07 0a90 	vmov	s15, r0
 8002e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8e:	bf88      	it	hi
 8002e90:	eef0 7a47 	vmovhi.f32	s15, s14
 8002e94:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	bfb8      	it	lt
 8002e9e:	eef0 7a66 	vmovlt.f32	s15, s13
 8002ea2:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8002ea6:	ee17 0a90 	vmov	r0, s15
 8002eaa:	f7fd fb75 	bl	8000598 <__aeabi_f2d>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4865      	ldr	r0, [pc, #404]	; (8003048 <process_user_input+0x3fc>)
 8002eb4:	f006 fd14 	bl	80098e0 <iprintf>
			 break;
 8002eb8:	e6ed      	b.n	8002c96 <process_user_input+0x4a>
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f006 f847 	bl	8008f4e <atoi>
 8002ec0:	4b62      	ldr	r3, [pc, #392]	; (800304c <process_user_input+0x400>)
 8002ec2:	4601      	mov	r1, r0
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8002ec4:	4862      	ldr	r0, [pc, #392]	; (8003050 <process_user_input+0x404>)
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8002ec6:	6059      	str	r1, [r3, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8002ec8:	f006 fd0a 	bl	80098e0 <iprintf>
			 break;
 8002ecc:	e6e3      	b.n	8002c96 <process_user_input+0x4a>
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f006 f83a 	bl	8008f48 <atof>
 8002ed4:	ec51 0b10 	vmov	r0, r1, d0
 8002ed8:	f7fd feae 	bl	8000c38 <__aeabi_d2f>
 8002edc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003054 <process_user_input+0x408>
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <process_user_input+0x3c8>)
 8002ee2:	ee07 0a90 	vmov	s15, r0
 8002ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	bfb8      	it	lt
 8002ef0:	eef0 7a47 	vmovlt.f32	s15, s14
 8002ef4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8002ef8:	ee17 0a90 	vmov	r0, s15
 8002efc:	f7fd fb4c 	bl	8000598 <__aeabi_f2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4854      	ldr	r0, [pc, #336]	; (8003058 <process_user_input+0x40c>)
 8002f06:	f006 fceb 	bl	80098e0 <iprintf>
			 break;
 8002f0a:	e6c4      	b.n	8002c96 <process_user_input+0x4a>
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f006 f81b 	bl	8008f48 <atof>
 8002f12:	ec51 0b10 	vmov	r0, r1, d0
 8002f16:	f7fd fe8f 	bl	8000c38 <__aeabi_d2f>
 8002f1a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003028 <process_user_input+0x3dc>
 8002f1e:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003070 <process_user_input+0x424>
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <process_user_input+0x3c8>)
 8002f24:	ee07 0a90 	vmov	s15, r0
 8002f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	bf88      	it	hi
 8002f32:	eef0 7a47 	vmovhi.f32	s15, s14
 8002f36:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3e:	bfb8      	it	lt
 8002f40:	eef0 7a66 	vmovlt.f32	s15, s13
 8002f44:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8002f48:	ee17 0a90 	vmov	r0, s15
 8002f4c:	f7fd fb24 	bl	8000598 <__aeabi_f2d>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4841      	ldr	r0, [pc, #260]	; (800305c <process_user_input+0x410>)
 8002f56:	f006 fcc3 	bl	80098e0 <iprintf>
			 break;
 8002f5a:	e69c      	b.n	8002c96 <process_user_input+0x4a>
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f005 fff6 	bl	8008f4e <atoi>
 8002f62:	4b3a      	ldr	r3, [pc, #232]	; (800304c <process_user_input+0x400>)
 8002f64:	4601      	mov	r1, r0
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8002f66:	483e      	ldr	r0, [pc, #248]	; (8003060 <process_user_input+0x414>)
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8002f68:	6099      	str	r1, [r3, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8002f6a:	f006 fcb9 	bl	80098e0 <iprintf>
			 break;
 8002f6e:	e692      	b.n	8002c96 <process_user_input+0x4a>
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8002f70:	4628      	mov	r0, r5
 8002f72:	f005 ffe9 	bl	8008f48 <atof>
 8002f76:	ec51 0b10 	vmov	r0, r1, d0
 8002f7a:	f7fd fe5d 	bl	8000c38 <__aeabi_d2f>
 8002f7e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003070 <process_user_input+0x424>
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <process_user_input+0x3c8>)
 8002f84:	ee07 0a90 	vmov	s15, r0
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	bfb8      	it	lt
 8002f92:	eef0 7a47 	vmovlt.f32	s15, s14
			 P_MIN = -P_MAX;
 8002f96:	eeb1 7a67 	vneg.f32	s14, s15
 8002f9a:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8002f9e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 printf("P_MAX set to %f\r\n", P_MAX);
 8002fa2:	ee17 0a90 	vmov	r0, s15
 8002fa6:	f7fd faf7 	bl	8000598 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	482d      	ldr	r0, [pc, #180]	; (8003064 <process_user_input+0x418>)
 8002fb0:	f006 fc96 	bl	80098e0 <iprintf>
			 break;
 8002fb4:	e66f      	b.n	8002c96 <process_user_input+0x4a>
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f005 ffc9 	bl	8008f4e <atoi>
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <process_user_input+0x400>)
 8002fbe:	4601      	mov	r1, r0
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8002fc0:	4829      	ldr	r0, [pc, #164]	; (8003068 <process_user_input+0x41c>)
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8002fc2:	60d9      	str	r1, [r3, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8002fc4:	f006 fc8c 	bl	80098e0 <iprintf>
			 break;
 8002fc8:	e665      	b.n	8002c96 <process_user_input+0x4a>
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f005 ffbc 	bl	8008f48 <atof>
 8002fd0:	ec51 0b10 	vmov	r0, r1, d0
 8002fd4:	f7fd fe30 	bl	8000c38 <__aeabi_d2f>
 8002fd8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003070 <process_user_input+0x424>
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <process_user_input+0x3c8>)
 8002fde:	ee07 0a90 	vmov	s15, r0
 8002fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	bfb8      	it	lt
 8002fec:	eef0 7a47 	vmovlt.f32	s15, s14
			 V_MIN = -V_MAX;
 8002ff0:	eeb1 7a67 	vneg.f32	s14, s15
 8002ff4:	ed83 7a15 	vstr	s14, [r3, #84]	; 0x54
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8002ff8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("V_MAX set to %f\r\n", V_MAX);
 8002ffc:	ee17 0a90 	vmov	r0, s15
 8003000:	f7fd faca 	bl	8000598 <__aeabi_f2d>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4818      	ldr	r0, [pc, #96]	; (800306c <process_user_input+0x420>)
 800300a:	f006 fc69 	bl	80098e0 <iprintf>
			 break;
 800300e:	e642      	b.n	8002c96 <process_user_input+0x4a>
 8003010:	0800de44 	.word	0x0800de44
 8003014:	2000068c 	.word	0x2000068c
 8003018:	0800ddc0 	.word	0x0800ddc0
 800301c:	44fa0000 	.word	0x44fa0000
 8003020:	42c80000 	.word	0x42c80000
 8003024:	0800dd0c 	.word	0x0800dd0c
 8003028:	42200000 	.word	0x42200000
 800302c:	0800dda8 	.word	0x0800dda8
 8003030:	0800de08 	.word	0x0800de08
 8003034:	42040000 	.word	0x42040000
 8003038:	0800dd60 	.word	0x0800dd60
 800303c:	3a83126f 	.word	0x3a83126f
 8003040:	0800ddd4 	.word	0x0800ddd4
 8003044:	43160000 	.word	0x43160000
 8003048:	0800dd90 	.word	0x0800dd90
 800304c:	20008f3c 	.word	0x20008f3c
 8003050:	0800dd20 	.word	0x0800dd20
 8003054:	38d1b717 	.word	0x38d1b717
 8003058:	0800dde4 	.word	0x0800dde4
 800305c:	0800dd4c 	.word	0x0800dd4c
 8003060:	0800dd34 	.word	0x0800dd34
 8003064:	0800de1c 	.word	0x0800de1c
 8003068:	0800dd78 	.word	0x0800dd78
 800306c:	0800de30 	.word	0x0800de30
 8003070:	00000000 	.word	0x00000000
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003074:	4628      	mov	r0, r5
 8003076:	f005 ff67 	bl	8008f48 <atof>
 800307a:	ec51 0b10 	vmov	r0, r1, d0
 800307e:	f7fd fddb 	bl	8000c38 <__aeabi_d2f>
 8003082:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003070 <process_user_input+0x424>
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <process_user_input+0x468>)
 8003088:	ee07 0a90 	vmov	s15, r0
 800308c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	bfb8      	it	lt
 8003096:	eef0 7a47 	vmovlt.f32	s15, s14
 800309a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 800309e:	ee17 0a90 	vmov	r0, s15
 80030a2:	f7fd fa79 	bl	8000598 <__aeabi_f2d>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4803      	ldr	r0, [pc, #12]	; (80030b8 <process_user_input+0x46c>)
 80030ac:	f006 fc18 	bl	80098e0 <iprintf>
			 break;
 80030b0:	e5f1      	b.n	8002c96 <process_user_input+0x4a>
 80030b2:	bf00      	nop
 80030b4:	2000068c 	.word	0x2000068c
 80030b8:	0800ddf4 	.word	0x0800ddf4

080030bc <update_fsm>:
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80030bc:	291b      	cmp	r1, #27
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80030be:	4603      	mov	r3, r0
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80030c0:	d026      	beq.n	8003110 <update_fsm+0x54>
	switch(fsmstate->state){
 80030c2:	7802      	ldrb	r2, [r0, #0]
 80030c4:	b152      	cbz	r2, 80030dc <update_fsm+0x20>
 80030c6:	2a04      	cmp	r2, #4
 80030c8:	d121      	bne.n	800310e <update_fsm+0x52>
			if(fsm_input == ENTER_CMD){
 80030ca:	290d      	cmp	r1, #13
 80030cc:	d028      	beq.n	8003120 <update_fsm+0x64>
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 80030ce:	7b02      	ldrb	r2, [r0, #12]
 80030d0:	b312      	cbz	r2, 8003118 <update_fsm+0x5c>
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80030d2:	4410      	add	r0, r2
			fsmstate->bytecount++;
 80030d4:	3201      	adds	r2, #1
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80030d6:	70c1      	strb	r1, [r0, #3]
			fsmstate->bytecount++;
 80030d8:	731a      	strb	r2, [r3, #12]
			break;
 80030da:	4770      	bx	lr
			switch (fsm_input){
 80030dc:	3963      	subs	r1, #99	; 0x63
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80030de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e2:	2917      	cmp	r1, #23
 80030e4:	d811      	bhi.n	800310a <update_fsm+0x4e>
 80030e6:	e8df f001 	tbb	[pc, r1]
 80030ea:	7e0c      	.short	0x7e0c
 80030ec:	10104379 	.word	0x10104379
 80030f0:	10101010 	.word	0x10101010
 80030f4:	1010103e 	.word	0x1010103e
 80030f8:	10391010 	.word	0x10391010
 80030fc:	10101010 	.word	0x10101010
 8003100:	1d10      	.short	0x1d10
					fsmstate->next_state = CALIBRATION_MODE;
 8003102:	2101      	movs	r1, #1
					fsmstate->ready = 0;
 8003104:	2200      	movs	r2, #0
					fsmstate->next_state = CALIBRATION_MODE;
 8003106:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 8003108:	70c2      	strb	r2, [r0, #3]
 }
 800310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800310e:	4770      	bx	lr
		fsmstate->next_state = MENU_MODE;
 8003110:	2200      	movs	r2, #0
 8003112:	7042      	strb	r2, [r0, #1]
		fsmstate->ready = 0;
 8003114:	70c2      	strb	r2, [r0, #3]
		return;
 8003116:	4770      	bx	lr
			fsmstate->bytecount++;
 8003118:	3201      	adds	r2, #1
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 800311a:	7341      	strb	r1, [r0, #13]
			fsmstate->bytecount++;
 800311c:	731a      	strb	r2, [r3, #12]
			break;
 800311e:	4770      	bx	lr
				process_user_input(fsmstate);
 8003120:	f7ff bd94 	b.w	8002c4c <process_user_input>
					comm_encoder.m_zero = 0;
 8003124:	4ca4      	ldr	r4, [pc, #656]	; (80033b8 <update_fsm+0x2fc>)
					printf("Zero pos command entry\n\r");
 8003126:	48a5      	ldr	r0, [pc, #660]	; (80033bc <update_fsm+0x300>)
					M_ZERO = comm_encoder.count;
 8003128:	4da5      	ldr	r5, [pc, #660]	; (80033c0 <update_fsm+0x304>)
					printf("Zero pos command entry\n\r");
 800312a:	f006 fbd9 	bl	80098e0 <iprintf>
					ps_sample(&comm_encoder, DT);
 800312e:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 80033c4 <update_fsm+0x308>
					comm_encoder.m_zero = 0;
 8003132:	2300      	movs	r3, #0
					ps_sample(&comm_encoder, DT);
 8003134:	4620      	mov	r0, r4
					comm_encoder.m_zero = 0;
 8003136:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 800313a:	f000 fd2d 	bl	8003b98 <ps_sample>
					HAL_Delay(20);
 800313e:	2014      	movs	r0, #20
 8003140:	f001 fa2a 	bl	8004598 <HAL_Delay>
					M_ZERO = comm_encoder.count;
 8003144:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003146:	612b      	str	r3, [r5, #16]
					save_to_flash();
 8003148:	f7fe fe6a 	bl	8001e20 <save_to_flash>
					load_from_flash();
 800314c:	f7fe fe32 	bl	8001db4 <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 8003150:	6929      	ldr	r1, [r5, #16]
 8003152:	489d      	ldr	r0, [pc, #628]	; (80033c8 <update_fsm+0x30c>)
 }
 8003154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 8003158:	f006 bbc2 	b.w	80098e0 <iprintf>
					fsmstate->next_state = SETUP_MODE;
 800315c:	2104      	movs	r1, #4
					fsmstate->ready = 0;
 800315e:	2200      	movs	r2, #0
					fsmstate->next_state = SETUP_MODE;
 8003160:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 8003162:	70c2      	strb	r2, [r0, #3]
					break;
 8003164:	e7d1      	b.n	800310a <update_fsm+0x4e>
					fsmstate->next_state = MOTOR_MODE;
 8003166:	2102      	movs	r1, #2
					fsmstate->ready = 0;
 8003168:	2200      	movs	r2, #0
					fsmstate->next_state = MOTOR_MODE;
 800316a:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 800316c:	70c2      	strb	r2, [r0, #3]
					break;
 800316e:	e7cc      	b.n	800310a <update_fsm+0x4e>
				    I_BW = 1000;
 8003170:	4b96      	ldr	r3, [pc, #600]	; (80033cc <update_fsm+0x310>)
					E_ZERO = 0;
 8003172:	4a93      	ldr	r2, [pc, #588]	; (80033c0 <update_fsm+0x304>)
				    I_BW = 1000;
 8003174:	4996      	ldr	r1, [pc, #600]	; (80033d0 <update_fsm+0x314>)
 8003176:	6099      	str	r1, [r3, #8]
				    CAN_ID = 1;
 8003178:	2001      	movs	r0, #1
					E_ZERO = 0;
 800317a:	2100      	movs	r1, #0
				    CAN_ID = 1;
 800317c:	6050      	str	r0, [r2, #4]
				    CAN_TIMEOUT = 1000;
 800317e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
					E_ZERO = 0;
 8003182:	6151      	str	r1, [r2, #20]
				    M_ZERO = 0;
 8003184:	6111      	str	r1, [r2, #16]
				    CAN_MASTER = 0;
 8003186:	6091      	str	r1, [r2, #8]
				    CAN_TIMEOUT = 1000;
 8003188:	60d0      	str	r0, [r2, #12]
 800318a:	f102 0018 	add.w	r0, r2, #24
				    PPAIRS = 21.0f;
 800318e:	4a91      	ldr	r2, [pc, #580]	; (80033d4 <update_fsm+0x318>)
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
				    P_MAX = 12.5f;
 8003192:	4a91      	ldr	r2, [pc, #580]	; (80033d8 <update_fsm+0x31c>)
 8003194:	651a      	str	r2, [r3, #80]	; 0x50
				    I_MAX=40;
 8003196:	4d91      	ldr	r5, [pc, #580]	; (80033dc <update_fsm+0x320>)
				    TEMP_MAX = 125.0f;
 8003198:	4c91      	ldr	r4, [pc, #580]	; (80033e0 <update_fsm+0x324>)
				    P_MIN = -12.5f;
 800319a:	4a92      	ldr	r2, [pc, #584]	; (80033e4 <update_fsm+0x328>)
				    I_MAX=40;
 800319c:	60dd      	str	r5, [r3, #12]
				    TEMP_MAX = 125.0f;
 800319e:	621c      	str	r4, [r3, #32]
				    P_MIN = -12.5f;
 80031a0:	64da      	str	r2, [r3, #76]	; 0x4c
				    V_MAX = 65.0f;
 80031a2:	4d91      	ldr	r5, [pc, #580]	; (80033e8 <update_fsm+0x32c>)
				    V_MIN = -65.0f;
 80031a4:	4c91      	ldr	r4, [pc, #580]	; (80033ec <update_fsm+0x330>)
				    V_MAX = 65.0f;
 80031a6:	659d      	str	r5, [r3, #88]	; 0x58
				    I_FW_MAX=0;
 80031a8:	2200      	movs	r2, #0
				    V_MIN = -65.0f;
 80031aa:	655c      	str	r4, [r3, #84]	; 0x54
				    I_FW_MAX=0;
 80031ac:	619a      	str	r2, [r3, #24]
				    R_NOMINAL = 0.0f;
 80031ae:	61da      	str	r2, [r3, #28]
				    I_CAL = 5.0f;
 80031b0:	4d8f      	ldr	r5, [pc, #572]	; (80033f0 <update_fsm+0x334>)
				    KP_MAX = 500.0f;
 80031b2:	4e90      	ldr	r6, [pc, #576]	; (80033f4 <update_fsm+0x338>)
 80031b4:	65de      	str	r6, [r3, #92]	; 0x5c
				    GR = 1.0f;
 80031b6:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80031ba:	f44f 7200 	mov.w	r2, #512	; 0x200
				    I_CAL = 5.0f;
 80031be:	649d      	str	r5, [r3, #72]	; 0x48
				    KD_MAX = 5.0f;
 80031c0:	661d      	str	r5, [r3, #96]	; 0x60
				    GR = 1.0f;
 80031c2:	645c      	str	r4, [r3, #68]	; 0x44
				    KT = 1.0f;
 80031c4:	639c      	str	r4, [r3, #56]	; 0x38
				    for(int i = 0; i < 128; i++){
 80031c6:	f005 ff19 	bl	8008ffc <memset>
				    save_to_flash();
 80031ca:	f7fe fe29 	bl	8001e20 <save_to_flash>
				    load_from_flash();
 80031ce:	f7fe fdf1 	bl	8001db4 <load_from_flash>
 }
 80031d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				    printf("\n\r  FLASH variables reset. \n\r Please cycle power. \n\r\n\r");
 80031d6:	4888      	ldr	r0, [pc, #544]	; (80033f8 <update_fsm+0x33c>)
 80031d8:	f006 bb82 	b.w	80098e0 <iprintf>
					fsmstate->next_state = ENCODER_MODE;
 80031dc:	2105      	movs	r1, #5
					fsmstate->ready = 0;
 80031de:	2200      	movs	r2, #0
					fsmstate->next_state = ENCODER_MODE;
 80031e0:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 80031e2:	70c2      	strb	r2, [r0, #3]
					break;
 80031e4:	e791      	b.n	800310a <update_fsm+0x4e>
						printf("%d ", encLut[i]);
 80031e6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80033c0 <update_fsm+0x304>
					printf("Variable dump:\n\r");
 80031ea:	4884      	ldr	r0, [pc, #528]	; (80033fc <update_fsm+0x340>)
						printf("%d ", encLut[i]);
 80031ec:	4e84      	ldr	r6, [pc, #528]	; (8003400 <update_fsm+0x344>)
							printf("\n\r");
 80031ee:	4f85      	ldr	r7, [pc, #532]	; (8003404 <update_fsm+0x348>)
						printf("%d ", encLut[i]);
 80031f0:	4645      	mov	r5, r8
					printf("Variable dump:\n\r");
 80031f2:	f006 fb75 	bl	80098e0 <iprintf>
					printf("---Enc. LUT:---\n\r");
 80031f6:	4884      	ldr	r0, [pc, #528]	; (8003408 <update_fsm+0x34c>)
 80031f8:	f006 fb72 	bl	80098e0 <iprintf>
						printf("%d ", encLut[i]);
 80031fc:	f855 1f18 	ldr.w	r1, [r5, #24]!
 8003200:	4630      	mov	r0, r6
 8003202:	f006 fb6d 	bl	80098e0 <iprintf>
						i++;
 8003206:	2401      	movs	r4, #1
						printf("%d ", encLut[i]);
 8003208:	f855 1f04 	ldr.w	r1, [r5, #4]!
						i++;
 800320c:	3401      	adds	r4, #1
						printf("%d ", encLut[i]);
 800320e:	4630      	mov	r0, r6
 8003210:	f006 fb66 	bl	80098e0 <iprintf>
						if(i%8==0){
 8003214:	0763      	lsls	r3, r4, #29
 8003216:	d102      	bne.n	800321e <update_fsm+0x162>
							printf("\n\r");
 8003218:	4638      	mov	r0, r7
 800321a:	f006 fb61 	bl	80098e0 <iprintf>
					for(int i = 0; i < 128;){
 800321e:	2c80      	cmp	r4, #128	; 0x80
 8003220:	d1f2      	bne.n	8003208 <update_fsm+0x14c>
					printf("---Int regs:---\n\r");
 8003222:	487a      	ldr	r0, [pc, #488]	; (800340c <update_fsm+0x350>)
					printf("I_BW %f \n\r", I_BW);
 8003224:	4c69      	ldr	r4, [pc, #420]	; (80033cc <update_fsm+0x310>)
					printf("---Int regs:---\n\r");
 8003226:	f006 fb5b 	bl	80098e0 <iprintf>
					printf("PHASE_ORDER %d \n\r", PHASE_ORDER);
 800322a:	f8d8 1000 	ldr.w	r1, [r8]
 800322e:	4878      	ldr	r0, [pc, #480]	; (8003410 <update_fsm+0x354>)
 8003230:	f006 fb56 	bl	80098e0 <iprintf>
					printf("CAN_ID %d \n\r", CAN_ID);
 8003234:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003238:	4876      	ldr	r0, [pc, #472]	; (8003414 <update_fsm+0x358>)
 800323a:	f006 fb51 	bl	80098e0 <iprintf>
					printf("CAN_MASTER %d \n\r", CAN_MASTER);
 800323e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003242:	4875      	ldr	r0, [pc, #468]	; (8003418 <update_fsm+0x35c>)
 8003244:	f006 fb4c 	bl	80098e0 <iprintf>
					printf("CAN_TIMEOUT %d \n\r", CAN_TIMEOUT);
 8003248:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800324c:	4873      	ldr	r0, [pc, #460]	; (800341c <update_fsm+0x360>)
 800324e:	f006 fb47 	bl	80098e0 <iprintf>
					printf("M_ZERO %d \n\r", M_ZERO);
 8003252:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003256:	4872      	ldr	r0, [pc, #456]	; (8003420 <update_fsm+0x364>)
 8003258:	f006 fb42 	bl	80098e0 <iprintf>
					printf("E_ZERO %d \n\r", E_ZERO);
 800325c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8003260:	4870      	ldr	r0, [pc, #448]	; (8003424 <update_fsm+0x368>)
 8003262:	f006 fb3d 	bl	80098e0 <iprintf>
					printf("--Float regs:--\n\r");
 8003266:	4870      	ldr	r0, [pc, #448]	; (8003428 <update_fsm+0x36c>)
 8003268:	f006 fb3a 	bl	80098e0 <iprintf>
					printf("I_BW %f \n\r", I_BW);
 800326c:	68a0      	ldr	r0, [r4, #8]
 800326e:	f7fd f993 	bl	8000598 <__aeabi_f2d>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	486d      	ldr	r0, [pc, #436]	; (800342c <update_fsm+0x370>)
 8003278:	f006 fb32 	bl	80098e0 <iprintf>
					printf("I_MAX %f \n\r", I_MAX);
 800327c:	68e0      	ldr	r0, [r4, #12]
 800327e:	f7fd f98b 	bl	8000598 <__aeabi_f2d>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	486a      	ldr	r0, [pc, #424]	; (8003430 <update_fsm+0x374>)
 8003288:	f006 fb2a 	bl	80098e0 <iprintf>
					printf("THETA_MIN %f \n\r", THETA_MIN);
 800328c:	6920      	ldr	r0, [r4, #16]
 800328e:	f7fd f983 	bl	8000598 <__aeabi_f2d>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4867      	ldr	r0, [pc, #412]	; (8003434 <update_fsm+0x378>)
 8003298:	f006 fb22 	bl	80098e0 <iprintf>
					printf("THETA_MAX %f \n\r", THETA_MAX);
 800329c:	6960      	ldr	r0, [r4, #20]
 800329e:	f7fd f97b 	bl	8000598 <__aeabi_f2d>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4864      	ldr	r0, [pc, #400]	; (8003438 <update_fsm+0x37c>)
 80032a8:	f006 fb1a 	bl	80098e0 <iprintf>
					printf("I_FW_MAX %f \n\r", I_FW_MAX);
 80032ac:	69a0      	ldr	r0, [r4, #24]
 80032ae:	f7fd f973 	bl	8000598 <__aeabi_f2d>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4861      	ldr	r0, [pc, #388]	; (800343c <update_fsm+0x380>)
 80032b8:	f006 fb12 	bl	80098e0 <iprintf>
					printf("R_NOMINAL %f \n\r", R_NOMINAL);
 80032bc:	69e0      	ldr	r0, [r4, #28]
 80032be:	f7fd f96b 	bl	8000598 <__aeabi_f2d>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	485e      	ldr	r0, [pc, #376]	; (8003440 <update_fsm+0x384>)
 80032c8:	f006 fb0a 	bl	80098e0 <iprintf>
					printf("TEMP_MAX %f \n\r", TEMP_MAX);
 80032cc:	6a20      	ldr	r0, [r4, #32]
 80032ce:	f7fd f963 	bl	8000598 <__aeabi_f2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	485b      	ldr	r0, [pc, #364]	; (8003444 <update_fsm+0x388>)
 80032d8:	f006 fb02 	bl	80098e0 <iprintf>
					printf("I_MAX_CONT %f \n\r", I_MAX_CONT);
 80032dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80032de:	f7fd f95b 	bl	8000598 <__aeabi_f2d>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4858      	ldr	r0, [pc, #352]	; (8003448 <update_fsm+0x38c>)
 80032e8:	f006 fafa 	bl	80098e0 <iprintf>
					printf("PPAIRS %f \n\r", PPAIRS);
 80032ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80032ee:	f7fd f953 	bl	8000598 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4855      	ldr	r0, [pc, #340]	; (800344c <update_fsm+0x390>)
 80032f8:	f006 faf2 	bl	80098e0 <iprintf>
					printf("R_PHASE %f \n\r", R_PHASE);
 80032fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80032fe:	f7fd f94b 	bl	8000598 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4852      	ldr	r0, [pc, #328]	; (8003450 <update_fsm+0x394>)
 8003308:	f006 faea 	bl	80098e0 <iprintf>
					printf("KT %f \n\r", KT);
 800330c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800330e:	f7fd f943 	bl	8000598 <__aeabi_f2d>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	484f      	ldr	r0, [pc, #316]	; (8003454 <update_fsm+0x398>)
 8003318:	f006 fae2 	bl	80098e0 <iprintf>
					printf("C_TH %f \n\r", C_TH);
 800331c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800331e:	f7fd f93b 	bl	8000598 <__aeabi_f2d>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	484c      	ldr	r0, [pc, #304]	; (8003458 <update_fsm+0x39c>)
 8003328:	f006 fada 	bl	80098e0 <iprintf>
					printf("GR %f \n\r", GR);
 800332c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800332e:	f7fd f933 	bl	8000598 <__aeabi_f2d>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4849      	ldr	r0, [pc, #292]	; (800345c <update_fsm+0x3a0>)
 8003338:	f006 fad2 	bl	80098e0 <iprintf>
					printf("I_CAL %f \n\r", I_CAL);
 800333c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800333e:	f7fd f92b 	bl	8000598 <__aeabi_f2d>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4846      	ldr	r0, [pc, #280]	; (8003460 <update_fsm+0x3a4>)
 8003348:	f006 faca 	bl	80098e0 <iprintf>
					printf("P_MIN %f \n\r", P_MIN);
 800334c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800334e:	f7fd f923 	bl	8000598 <__aeabi_f2d>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4843      	ldr	r0, [pc, #268]	; (8003464 <update_fsm+0x3a8>)
 8003358:	f006 fac2 	bl	80098e0 <iprintf>
					printf("P_MAX %f \n\r", P_MAX);
 800335c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800335e:	f7fd f91b 	bl	8000598 <__aeabi_f2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4840      	ldr	r0, [pc, #256]	; (8003468 <update_fsm+0x3ac>)
 8003368:	f006 faba 	bl	80098e0 <iprintf>
					printf("V_MIN %f \n\r", V_MIN);
 800336c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800336e:	f7fd f913 	bl	8000598 <__aeabi_f2d>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	483d      	ldr	r0, [pc, #244]	; (800346c <update_fsm+0x3b0>)
 8003378:	f006 fab2 	bl	80098e0 <iprintf>
					printf("V_MAX %f \n\r", V_MAX);
 800337c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800337e:	f7fd f90b 	bl	8000598 <__aeabi_f2d>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	483a      	ldr	r0, [pc, #232]	; (8003470 <update_fsm+0x3b4>)
 8003388:	f006 faaa 	bl	80098e0 <iprintf>
					printf("KP_MAX %f \n\r", KP_MAX);
 800338c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800338e:	f7fd f903 	bl	8000598 <__aeabi_f2d>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4837      	ldr	r0, [pc, #220]	; (8003474 <update_fsm+0x3b8>)
 8003398:	f006 faa2 	bl	80098e0 <iprintf>
					printf("KD_MAX %f \n\r", KD_MAX);
 800339c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800339e:	f7fd f8fb 	bl	8000598 <__aeabi_f2d>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4834      	ldr	r0, [pc, #208]	; (8003478 <update_fsm+0x3bc>)
 80033a8:	f006 fa9a 	bl	80098e0 <iprintf>
 }
 80033ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("----------------\n\r");
 80033b0:	4832      	ldr	r0, [pc, #200]	; (800347c <update_fsm+0x3c0>)
 80033b2:	f006 ba95 	b.w	80098e0 <iprintf>
 80033b6:	bf00      	nop
 80033b8:	200003e8 	.word	0x200003e8
 80033bc:	0800de6c 	.word	0x0800de6c
 80033c0:	20008f3c 	.word	0x20008f3c
 80033c4:	3812ccf7 	.word	0x3812ccf7
 80033c8:	0800de88 	.word	0x0800de88
 80033cc:	2000068c 	.word	0x2000068c
 80033d0:	447a0000 	.word	0x447a0000
 80033d4:	41a80000 	.word	0x41a80000
 80033d8:	41480000 	.word	0x41480000
 80033dc:	42200000 	.word	0x42200000
 80033e0:	42fa0000 	.word	0x42fa0000
 80033e4:	c1480000 	.word	0xc1480000
 80033e8:	42820000 	.word	0x42820000
 80033ec:	c2820000 	.word	0xc2820000
 80033f0:	40a00000 	.word	0x40a00000
 80033f4:	43fa0000 	.word	0x43fa0000
 80033f8:	0800deb0 	.word	0x0800deb0
 80033fc:	0800dee8 	.word	0x0800dee8
 8003400:	0800df10 	.word	0x0800df10
 8003404:	0800dee4 	.word	0x0800dee4
 8003408:	0800defc 	.word	0x0800defc
 800340c:	0800df14 	.word	0x0800df14
 8003410:	0800df28 	.word	0x0800df28
 8003414:	0800df3c 	.word	0x0800df3c
 8003418:	0800df4c 	.word	0x0800df4c
 800341c:	0800df60 	.word	0x0800df60
 8003420:	0800df74 	.word	0x0800df74
 8003424:	0800df84 	.word	0x0800df84
 8003428:	0800df94 	.word	0x0800df94
 800342c:	0800dfa8 	.word	0x0800dfa8
 8003430:	0800dfb4 	.word	0x0800dfb4
 8003434:	0800dfc0 	.word	0x0800dfc0
 8003438:	0800dfd0 	.word	0x0800dfd0
 800343c:	0800dfe0 	.word	0x0800dfe0
 8003440:	0800dff0 	.word	0x0800dff0
 8003444:	0800e000 	.word	0x0800e000
 8003448:	0800e010 	.word	0x0800e010
 800344c:	0800e024 	.word	0x0800e024
 8003450:	0800e034 	.word	0x0800e034
 8003454:	0800e044 	.word	0x0800e044
 8003458:	0800e050 	.word	0x0800e050
 800345c:	0800e05c 	.word	0x0800e05c
 8003460:	0800e068 	.word	0x0800e068
 8003464:	0800e074 	.word	0x0800e074
 8003468:	0800e080 	.word	0x0800e080
 800346c:	0800e08c 	.word	0x0800e08c
 8003470:	0800e098 	.word	0x0800e098
 8003474:	0800e0a4 	.word	0x0800e0a4
 8003478:	0800e0b4 	.word	0x0800e0b4
 800347c:	0800e0c4 	.word	0x0800e0c4

08003480 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003482:	2400      	movs	r4, #0
{
 8003484:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003486:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800348a:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <MX_GPIO_Init+0xcc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003494:	4f2e      	ldr	r7, [pc, #184]	; (8003550 <MX_GPIO_Init+0xd0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003496:	4e2f      	ldr	r6, [pc, #188]	; (8003554 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	64da      	str	r2, [r3, #76]	; 0x4c
 800349e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034a0:	f002 0220 	and.w	r2, r2, #32
 80034a4:	9200      	str	r2, [sp, #0]
 80034a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034aa:	f042 0204 	orr.w	r2, r2, #4
 80034ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80034b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034b2:	f002 0204 	and.w	r2, r2, #4
 80034b6:	9201      	str	r2, [sp, #4]
 80034b8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80034c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034c4:	f002 0201 	and.w	r2, r2, #1
 80034c8:	9202      	str	r2, [sp, #8]
 80034ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034ce:	f042 0202 	orr.w	r2, r2, #2
 80034d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80034dc:	4622      	mov	r2, r4
 80034de:	4638      	mov	r0, r7
 80034e0:	210c      	movs	r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80034e4:	f002 fd2a 	bl	8005f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80034e8:	4622      	mov	r2, r4
 80034ea:	f648 0110 	movw	r1, #34832	; 0x8810
 80034ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f2:	f002 fd23 	bl	8005f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80034f6:	4622      	mov	r2, r4
 80034f8:	4630      	mov	r0, r6
 80034fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034fe:	f002 fd1d 	bl	8005f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003502:	2400      	movs	r4, #0
 8003504:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003506:	4638      	mov	r0, r7
 8003508:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800350a:	220c      	movs	r2, #12
 800350c:	2301      	movs	r3, #1
 800350e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003512:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003516:	f002 fc1d 	bl	8005d54 <HAL_GPIO_Init>
  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 800351c:	f648 0210 	movw	r2, #34832	; 0x8810
 8003520:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003526:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800352a:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352e:	f002 fc11 	bl	8005d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003536:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003538:	a904      	add	r1, sp, #16
 800353a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800353c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003540:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003544:	f002 fc06 	bl	8005d54 <HAL_GPIO_Init>

}
 8003548:	b00b      	add	sp, #44	; 0x2c
 800354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	48000800 	.word	0x48000800
 8003554:	48000400 	.word	0x48000400

08003558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800355a:	2100      	movs	r1, #0
{
 800355c:	b0ab      	sub	sp, #172	; 0xac
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800355e:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003560:	a806      	add	r0, sp, #24
 8003562:	2238      	movs	r2, #56	; 0x38
 8003564:	f005 fd4a 	bl	8008ffc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003568:	4621      	mov	r1, r4
 800356a:	2254      	movs	r2, #84	; 0x54
 800356c:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800356e:	e9cd 4400 	strd	r4, r4, [sp]
 8003572:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003576:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003578:	f005 fd40 	bl	8008ffc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800357c:	4620      	mov	r0, r4
 800357e:	f002 fce3 	bl	8005f48 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003582:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003584:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003586:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003588:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800358a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800358c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8003590:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003594:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003598:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800359a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800359c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800359e:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 85;
 80035a0:	9210      	str	r2, [sp, #64]	; 0x40
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035a2:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a4:	f002 fd56 	bl	8006054 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035a8:	2703      	movs	r7, #3
 80035aa:	2200      	movs	r2, #0
 80035ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035b0:	4668      	mov	r0, sp
 80035b2:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035b8:	e9cd 6700 	strd	r6, r7, [sp]
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80035bc:	4d09      	ldr	r5, [pc, #36]	; (80035e4 <SystemClock_Config+0x8c>)
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035be:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035c0:	f002 ffcc 	bl	800655c <HAL_RCC_ClockConfig>
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80035c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80035c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80035cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d0:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80035d2:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035d6:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80035d8:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80035da:	9123      	str	r1, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035dc:	f003 f8f4 	bl	80067c8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80035e0:	b02b      	add	sp, #172	; 0xac
 80035e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e4:	00019002 	.word	0x00019002

080035e8 <main>:
{
 80035e8:	b580      	push	{r7, lr}
  if(E_ZERO==-1){E_ZERO = 0;}
 80035ea:	4dcd      	ldr	r5, [pc, #820]	; (8003920 <main+0x338>)
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80035ec:	4ccd      	ldr	r4, [pc, #820]	; (8003924 <main+0x33c>)
  init_controller_params(&controller);
 80035ee:	f8df 83a0 	ldr.w	r8, [pc, #928]	; 8003990 <main+0x3a8>
  comm_encoder.m_zero = M_ZERO;
 80035f2:	4fcd      	ldr	r7, [pc, #820]	; (8003928 <main+0x340>)
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80035f4:	4ecd      	ldr	r6, [pc, #820]	; (800392c <main+0x344>)
{
 80035f6:	b088      	sub	sp, #32
  HAL_Init();
 80035f8:	f000 ffac 	bl	8004554 <HAL_Init>
  SystemClock_Config();
 80035fc:	f7ff ffac 	bl	8003558 <SystemClock_Config>
  MX_GPIO_Init();
 8003600:	f7ff ff3e 	bl	8003480 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003604:	f7fd fd1a 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 8003608:	f7fe faca 	bl	8001ba0 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 800360c:	f000 fbce 	bl	8003dac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003610:	f000 feb4 	bl	800437c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8003614:	f000 fbf2 	bl	8003dfc <MX_SPI3_Init>
  MX_TIM1_Init();
 8003618:	f000 fdce 	bl	80041b8 <MX_TIM1_Init>
  MX_ADC2_Init();
 800361c:	f7fd fd60 	bl	80010e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003620:	f7fd fda6 	bl	8001170 <MX_ADC3_Init>
    load_from_flash();
 8003624:	f7fe fbc6 	bl	8001db4 <load_from_flash>
  if(E_ZERO==-1){E_ZERO = 0;}
 8003628:	696b      	ldr	r3, [r5, #20]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800362a:	ed94 7a02 	vldr	s14, [r4, #8]
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 800362e:	48c0      	ldr	r0, [pc, #768]	; (8003930 <main+0x348>)
  if(E_ZERO==-1){E_ZERO = 0;}
 8003630:	3301      	adds	r3, #1
 8003632:	bf04      	itt	eq
 8003634:	2300      	moveq	r3, #0
 8003636:	616b      	streq	r3, [r5, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003638:	692b      	ldr	r3, [r5, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800363a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(M_ZERO==-1){M_ZERO = 0;}
 800363e:	3301      	adds	r3, #1
 8003640:	bf08      	it	eq
 8003642:	2300      	moveq	r3, #0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003644:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003648:	ed94 7a03 	vldr	s14, [r4, #12]
  if(M_ZERO==-1){M_ZERO = 0;}
 800364c:	bf08      	it	eq
 800364e:	612b      	streq	r3, [r5, #16]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003650:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003658:	bf04      	itt	eq
 800365a:	4bb6      	ldreq	r3, [pc, #728]	; (8003934 <main+0x34c>)
 800365c:	60a3      	streq	r3, [r4, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800365e:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003662:	ed94 7a06 	vldr	s14, [r4, #24]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 800366a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800366e:	bf04      	itt	eq
 8003670:	4bb1      	ldreq	r3, [pc, #708]	; (8003938 <main+0x350>)
 8003672:	60e3      	streq	r3, [r4, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003674:	eeb4 7a67 	vcmp.f32	s14, s15
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	bf04      	itt	eq
 800367e:	2300      	moveq	r3, #0
 8003680:	61a3      	streq	r3, [r4, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003682:	686b      	ldr	r3, [r5, #4]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003684:	ed94 7a07 	vldr	s14, [r4, #28]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003688:	3301      	adds	r3, #1
 800368a:	bf04      	itt	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	606b      	streq	r3, [r5, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8003690:	68ab      	ldr	r3, [r5, #8]
 8003692:	3301      	adds	r3, #1
 8003694:	bf04      	itt	eq
 8003696:	2300      	moveq	r3, #0
 8003698:	60ab      	streq	r3, [r5, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 800369a:	68eb      	ldr	r3, [r5, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 800369c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80036a0:	3301      	adds	r3, #1
 80036a2:	bf08      	it	eq
 80036a4:	f44f 737a 	moveq.w	r3, #1000	; 0x3e8
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80036a8:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80036ac:	ed94 7a08 	vldr	s14, [r4, #32]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80036b0:	bf08      	it	eq
 80036b2:	60eb      	streq	r3, [r5, #12]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80036b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	bf08      	it	eq
 80036be:	2300      	moveq	r3, #0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80036c0:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80036c4:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80036c8:	bf08      	it	eq
 80036ca:	61e3      	streq	r3, [r4, #28]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80036cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	bf04      	itt	eq
 80036d6:	4b99      	ldreq	r3, [pc, #612]	; (800393c <main+0x354>)
 80036d8:	6223      	streq	r3, [r4, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80036da:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 80036de:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80036e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 80036e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80036ea:	bf04      	itt	eq
 80036ec:	4b94      	ldreq	r3, [pc, #592]	; (8003940 <main+0x358>)
 80036ee:	6263      	streq	r3, [r4, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 80036f0:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80036f4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80036fc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003700:	bf04      	itt	eq
 8003702:	4b90      	ldreq	r3, [pc, #576]	; (8003944 <main+0x35c>)
 8003704:	64a3      	streq	r3, [r4, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003706:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800370a:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003712:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003716:	bf04      	itt	eq
 8003718:	4b8b      	ldreq	r3, [pc, #556]	; (8003948 <main+0x360>)
 800371a:	62a3      	streq	r3, [r4, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800371c:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003720:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003728:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800372c:	bf08      	it	eq
 800372e:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003732:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003736:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800373a:	bf08      	it	eq
 800373c:	6463      	streq	r3, [r4, #68]	; 0x44
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800373e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	bf08      	it	eq
 8003748:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800374c:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003750:	bf08      	it	eq
 8003752:	63a3      	streq	r3, [r4, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	bf04      	itt	eq
 800375a:	4b7c      	ldreq	r3, [pc, #496]	; (800394c <main+0x364>)
 800375c:	65e3      	streq	r3, [r4, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 800375e:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 8003762:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8003766:	eeb4 7a67 	vcmp.f32	s14, s15
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	bf04      	itt	eq
 8003770:	4b74      	ldreq	r3, [pc, #464]	; (8003944 <main+0x35c>)
 8003772:	6623      	streq	r3, [r4, #96]	; 0x60
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8003774:	a368      	add	r3, pc, #416	; (adr r3, 8003918 <main+0x330>)
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f006 f8b1 	bl	80098e0 <iprintf>
  init_controller_params(&controller);
 800377e:	4640      	mov	r0, r8
 8003780:	f7fe fd50 	bl	8002224 <init_controller_params>
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8003784:	f44f 7224 	mov.w	r2, #656	; 0x290
 8003788:	2100      	movs	r1, #0
 800378a:	4871      	ldr	r0, [pc, #452]	; (8003950 <main+0x368>)
 800378c:	f005 fc36 	bl	8008ffc <memset>
  comm_encoder.m_zero = M_ZERO;
 8003790:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
  comm_encoder.ppairs = PPAIRS;
 8003794:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003796:	66b9      	str	r1, [r7, #104]	; 0x68
  comm_encoder.m_zero = M_ZERO;
 8003798:	e9c7 2321 	strd	r2, r3, [r7, #132]	; 0x84
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 800379c:	4638      	mov	r0, r7
 800379e:	2164      	movs	r1, #100	; 0x64
 80037a0:	f000 f9cc 	bl	8003b3c <ps_warmup>
  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 80037a4:	496b      	ldr	r1, [pc, #428]	; (8003954 <main+0x36c>)
 80037a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037aa:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80037ae:	f005 fbfd 	bl	8008fac <memcpy>
  HAL_ADC_Start(&hadc1);
 80037b2:	4869      	ldr	r0, [pc, #420]	; (8003958 <main+0x370>)
 80037b4:	f001 fb00 	bl	8004db8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80037b8:	4868      	ldr	r0, [pc, #416]	; (800395c <main+0x374>)
 80037ba:	f001 fafd 	bl	8004db8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80037be:	4868      	ldr	r0, [pc, #416]	; (8003960 <main+0x378>)
 80037c0:	f001 fafa 	bl	8004db8 <HAL_ADC_Start>
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80037c4:	2201      	movs	r2, #1
 80037c6:	2110      	movs	r1, #16
 80037c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037cc:	f002 fbb6 	bl	8005f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 80037d0:	2201      	movs	r2, #1
 80037d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80037da:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 80037dc:	f002 fbae 	bl	8005f3c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80037e0:	2001      	movs	r0, #1
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80037e2:	2400      	movs	r4, #0
  HAL_Delay(1);
 80037e4:	f000 fed8 	bl	8004598 <HAL_Delay>
  HAL_Delay(1);
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fed5 	bl	8004598 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80037ee:	88b1      	ldrh	r1, [r6, #4]
 80037f0:	6830      	ldr	r0, [r6, #0]
 80037f2:	9506      	str	r5, [sp, #24]
 80037f4:	4623      	mov	r3, r4
 80037f6:	4622      	mov	r2, r4
 80037f8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80037fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003800:	9501      	str	r5, [sp, #4]
 8003802:	9400      	str	r4, [sp, #0]
 8003804:	f7fe f87a 	bl	80018fc <drv_write_DCR>
	  printf("BEWARE, debug mode with driver error printing disabled!\n\r");
 8003808:	4856      	ldr	r0, [pc, #344]	; (8003964 <main+0x37c>)
 800380a:	f006 f869 	bl	80098e0 <iprintf>
  HAL_Delay(1);
 800380e:	4628      	mov	r0, r5
 8003810:	f000 fec2 	bl	8004598 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8003814:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003818:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800381c:	2703      	movs	r7, #3
 800381e:	9400      	str	r4, [sp, #0]
 8003820:	88b1      	ldrh	r1, [r6, #4]
 8003822:	6830      	ldr	r0, [r6, #0]
 8003824:	9706      	str	r7, [sp, #24]
 8003826:	462b      	mov	r3, r5
 8003828:	4622      	mov	r2, r4
 800382a:	9701      	str	r7, [sp, #4]
 800382c:	f7fe f8d6 	bl	80019dc <drv_write_CSACR>
  HAL_Delay(1);
 8003830:	4628      	mov	r0, r5
 8003832:	f000 feb1 	bl	8004598 <HAL_Delay>
  zero_current(&controller);
 8003836:	4640      	mov	r0, r8
 8003838:	f7fe fc7a 	bl	8002130 <zero_current>
  HAL_Delay(1);
 800383c:	4628      	mov	r0, r5
 800383e:	f000 feab 	bl	8004598 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8003842:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8003846:	e9cd 7501 	strd	r7, r5, [sp, #4]
 800384a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800384e:	9400      	str	r4, [sp, #0]
 8003850:	88b1      	ldrh	r1, [r6, #4]
 8003852:	6830      	ldr	r0, [r6, #0]
 8003854:	462b      	mov	r3, r5
 8003856:	4622      	mov	r2, r4
 8003858:	f7fe f8c0 	bl	80019dc <drv_write_CSACR>
  HAL_Delay(1);
 800385c:	4628      	mov	r0, r5
 800385e:	f000 fe9b 	bl	8004598 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 8003862:	e9cd 7700 	strd	r7, r7, [sp]
 8003866:	f04f 0c0e 	mov.w	ip, #14
 800386a:	4623      	mov	r3, r4
 800386c:	88b1      	ldrh	r1, [r6, #4]
 800386e:	6830      	ldr	r0, [r6, #0]
 8003870:	f8cd c008 	str.w	ip, [sp, #8]
 8003874:	462a      	mov	r2, r5
 8003876:	f7fe f87f 	bl	8001978 <drv_write_OCPCR>
  HAL_Delay(1);
 800387a:	4628      	mov	r0, r5
 800387c:	f000 fe8c 	bl	8004598 <HAL_Delay>
  drv_disable_gd(drv);
 8003880:	88b1      	ldrh	r1, [r6, #4]
 8003882:	6830      	ldr	r0, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	4e38      	ldr	r6, [pc, #224]	; (8003968 <main+0x380>)
 8003886:	f7fe f939 	bl	8001afc <drv_disable_gd>
  HAL_Delay(1);
 800388a:	4628      	mov	r0, r5
 800388c:	f000 fe84 	bl	8004598 <HAL_Delay>
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8003890:	e9d8 1224 	ldrd	r1, r2, [r8, #144]	; 0x90
 8003894:	4835      	ldr	r0, [pc, #212]	; (800396c <main+0x384>)
 8003896:	f006 f823 	bl	80098e0 <iprintf>
  HAL_GPIO_WritePin(LED1, 1 );
 800389a:	4835      	ldr	r0, [pc, #212]	; (8003970 <main+0x388>)
 800389c:	462a      	mov	r2, r5
 800389e:	2104      	movs	r1, #4
 80038a0:	f002 fb4c 	bl	8005f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 1 );
 80038a4:	462a      	mov	r2, r5
 80038a6:	4832      	ldr	r0, [pc, #200]	; (8003970 <main+0x388>)
 80038a8:	2108      	movs	r1, #8
 80038aa:	f002 fb47 	bl	8005f3c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80038ae:	4621      	mov	r1, r4
 80038b0:	4830      	ldr	r0, [pc, #192]	; (8003974 <main+0x38c>)
 80038b2:	f003 fe81 	bl	80075b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80038b6:	2104      	movs	r1, #4
 80038b8:	482e      	ldr	r0, [pc, #184]	; (8003974 <main+0x38c>)
 80038ba:	f003 fe7d 	bl	80075b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80038be:	2108      	movs	r1, #8
 80038c0:	482c      	ldr	r0, [pc, #176]	; (8003974 <main+0x38c>)
 80038c2:	f003 fe79 	bl	80075b8 <HAL_TIM_PWM_Start>
  can_rx_init(&can_rx);
 80038c6:	482c      	ldr	r0, [pc, #176]	; (8003978 <main+0x390>)
 80038c8:	f7fe f9cc 	bl	8001c64 <can_rx_init>
  can_tx_init(&can_tx);
 80038cc:	482b      	ldr	r0, [pc, #172]	; (800397c <main+0x394>)
 80038ce:	f7fe f9eb 	bl	8001ca8 <can_tx_init>
  HAL_FDCAN_Start(&CAN_H);
 80038d2:	482b      	ldr	r0, [pc, #172]	; (8003980 <main+0x398>)
 80038d4:	f001 fe66 	bl	80055a4 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80038d8:	4622      	mov	r2, r4
 80038da:	4629      	mov	r1, r5
 80038dc:	4828      	ldr	r0, [pc, #160]	; (8003980 <main+0x398>)
 80038de:	f001 fef7 	bl	80056d0 <HAL_FDCAN_ActivateNotification>
  state.state = MENU_MODE;
 80038e2:	4b28      	ldr	r3, [pc, #160]	; (8003984 <main+0x39c>)
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80038e4:	4928      	ldr	r1, [pc, #160]	; (8003988 <main+0x3a0>)
  state.ready = 1;
 80038e6:	70dd      	strb	r5, [r3, #3]
 80038e8:	2210      	movs	r2, #16
 80038ea:	2730      	movs	r7, #48	; 0x30
 80038ec:	f886 2319 	strb.w	r2, [r6, #793]	; 0x319
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80038f0:	4826      	ldr	r0, [pc, #152]	; (800398c <main+0x3a4>)
 80038f2:	f886 7356 	strb.w	r7, [r6, #854]	; 0x356
 80038f6:	462a      	mov	r2, r5
  state.next_state = MENU_MODE;
 80038f8:	705c      	strb	r4, [r3, #1]
  state.state = MENU_MODE;
 80038fa:	701c      	strb	r4, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80038fc:	f004 fae4 	bl	8007ec8 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003900:	481c      	ldr	r0, [pc, #112]	; (8003974 <main+0x38c>)
 8003902:	f003 fd7d 	bl	8007400 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED1, 0 );
 8003906:	481a      	ldr	r0, [pc, #104]	; (8003970 <main+0x388>)
 8003908:	4622      	mov	r2, r4
 800390a:	2104      	movs	r1, #4
 800390c:	f002 fb16 	bl	8005f3c <HAL_GPIO_WritePin>
 8003910:	e040      	b.n	8003994 <main+0x3ac>
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	c0000000 	.word	0xc0000000
 800391c:	4000cccc 	.word	0x4000cccc
 8003920:	20008f3c 	.word	0x20008f3c
 8003924:	2000068c 	.word	0x2000068c
 8003928:	200003e8 	.word	0x200003e8
 800392c:	20009368 	.word	0x20009368
 8003930:	0800e0d8 	.word	0x0800e0d8
 8003934:	447a0000 	.word	0x447a0000
 8003938:	42200000 	.word	0x42200000
 800393c:	42fa0000 	.word	0x42fa0000
 8003940:	41600000 	.word	0x41600000
 8003944:	40a00000 	.word	0x40a00000
 8003948:	41a80000 	.word	0x41a80000
 800394c:	43fa0000 	.word	0x43fa0000
 8003950:	20008cac 	.word	0x20008cac
 8003954:	20008f54 	.word	0x20008f54
 8003958:	200002ac 	.word	0x200002ac
 800395c:	20000240 	.word	0x20000240
 8003960:	20000318 	.word	0x20000318
 8003964:	0800e0fc 	.word	0x0800e0fc
 8003968:	e000e100 	.word	0xe000e100
 800396c:	0800e138 	.word	0x0800e138
 8003970:	48000800 	.word	0x48000800
 8003974:	200094b0 	.word	0x200094b0
 8003978:	20009370 	.word	0x20009370
 800397c:	2000933c 	.word	0x2000933c
 8003980:	20000384 	.word	0x20000384
 8003984:	2000067c 	.word	0x2000067c
 8003988:	20000678 	.word	0x20000678
 800398c:	200094fc 	.word	0x200094fc
 8003990:	2000078c 	.word	0x2000078c
  HAL_GPIO_WritePin(LED2, 0 );
 8003994:	4804      	ldr	r0, [pc, #16]	; (80039a8 <main+0x3c0>)
 8003996:	4622      	mov	r2, r4
 8003998:	2108      	movs	r1, #8
 800399a:	f002 facf 	bl	8005f3c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800399e:	2064      	movs	r0, #100	; 0x64
 80039a0:	f000 fdfa 	bl	8004598 <HAL_Delay>
	  if(state.state==MOTOR_MODE){
 80039a4:	e7fb      	b.n	800399e <main+0x3b6>
 80039a6:	bf00      	nop
 80039a8:	48000800 	.word	0x48000800

080039ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop

080039b0 <fast_fmaxf>:
#include "lookup.h"


float fast_fmaxf(float x, float y){
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 80039b0:	eef4 0ac0 	vcmpe.f32	s1, s0
 80039b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 80039b8:	bfa8      	it	ge
 80039ba:	eeb0 0a60 	vmovge.f32	s0, s1
 80039be:	4770      	bx	lr

080039c0 <fast_fminf>:

float fast_fminf(float x, float y){
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80039c0:	eef4 0ac0 	vcmpe.f32	s1, s0
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 80039c8:	bf98      	it	ls
 80039ca:	eeb0 0a60 	vmovls.f32	s0, s1
 80039ce:	4770      	bx	lr

080039d0 <fmaxf3>:

float fmaxf3(float x, float y, float z){
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80039d0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	dd07      	ble.n	80039ea <fmaxf3+0x1a>
 80039da:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80039de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e2:	bfb8      	it	lt
 80039e4:	eeb0 0a41 	vmovlt.f32	s0, s2
 80039e8:	4770      	bx	lr
 80039ea:	eef4 0ac1 	vcmpe.f32	s1, s2
 80039ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f2:	bfb4      	ite	lt
 80039f4:	eeb0 0a41 	vmovlt.f32	s0, s2
 80039f8:	eeb0 0a60 	vmovge.f32	s0, s1
    }
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop

08003a00 <fminf3>:

float fminf3(float x, float y, float z){
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8003a00:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a08:	d507      	bpl.n	8003a1a <fminf3+0x1a>
 8003a0a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a12:	bf88      	it	hi
 8003a14:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003a18:	4770      	bx	lr
 8003a1a:	eef4 0ac1 	vcmpe.f32	s1, s2
 8003a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a22:	bf8c      	ite	hi
 8003a24:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003a28:	eeb0 0a60 	vmovls.f32	s0, s1
    }
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop

08003a30 <limit_norm>:
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8003a30:	edd1 7a00 	vldr	s15, [r1]
 8003a34:	ed90 7a00 	vldr	s14, [r0]
 8003a38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a3c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8003a40:	eef1 6ae7 	vsqrt.f32	s13, s15
    if(norm > limit){
 8003a44:	eef4 6ac0 	vcmpe.f32	s13, s0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	dd0d      	ble.n	8003a6a <limit_norm+0x3a>
        *x = *x * limit/norm;
 8003a4e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003a52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a56:	edc0 7a00 	vstr	s15, [r0]
        *y = *y * limit/norm;
 8003a5a:	edd1 7a00 	vldr	s15, [r1]
 8003a5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003a62:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8003a66:	edc1 7a00 	vstr	s15, [r1]
        }
    }
 8003a6a:	4770      	bx	lr

08003a6c <uint_to_float>:
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	ee07 0a90 	vmov	s15, r0
 8003a72:	fa03 f101 	lsl.w	r1, r3, r1
 8003a76:	3901      	subs	r1, #1
 8003a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float span = x_max - x_min;
 8003a7c:	ee70 0ac0 	vsub.f32	s1, s1, s0
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003a80:	ee07 1a90 	vmov	s15, r1
 8003a84:	ee67 0a20 	vmul.f32	s1, s14, s1
 8003a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8c:	ee80 7aa7 	vdiv.f32	s14, s1, s15
    }
 8003a90:	ee37 0a00 	vadd.f32	s0, s14, s0
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <sin_lut>:

float sin_lut(float theta){
 8003a98:	b508      	push	{r3, lr}
 8003a9a:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 8003a9e:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 8003ad8 <sin_lut+0x40>
 8003aa2:	eef0 0a48 	vmov.f32	s1, s16
 8003aa6:	f009 fc1d 	bl	800d2e4 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8003aaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	bf48      	it	mi
 8003ab4:	ee30 0a08 	vaddmi.f32	s0, s0, s16

	return sin_tab[(int) (LUT_MULT*theta)];
 8003ab8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003adc <sin_lut+0x44>
 8003abc:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <sin_lut+0x48>)
 8003abe:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8003ac2:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8003ac6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003aca:	ee10 2a10 	vmov	r2, s0
 8003ace:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8003ad2:	ed93 0a00 	vldr	s0, [r3]
 8003ad6:	bd08      	pop	{r3, pc}
 8003ad8:	40c90fdb 	.word	0x40c90fdb
 8003adc:	42a2f983 	.word	0x42a2f983
 8003ae0:	0800e160 	.word	0x0800e160

08003ae4 <cos_lut>:

float cos_lut(float theta){
 8003ae4:	b508      	push	{r3, lr}
	return sin_lut(PI_OVER_2_F - theta);
 8003ae6:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003b2c <cos_lut+0x48>
float cos_lut(float theta){
 8003aea:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 8003aee:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8003b30 <cos_lut+0x4c>
 8003af2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003af6:	eef0 0a48 	vmov.f32	s1, s16
 8003afa:	f009 fbf3 	bl	800d2e4 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8003afe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	bf48      	it	mi
 8003b08:	ee30 0a08 	vaddmi.f32	s0, s0, s16
	return sin_tab[(int) (LUT_MULT*theta)];
 8003b0c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003b34 <cos_lut+0x50>
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <cos_lut+0x54>)
 8003b12:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8003b16:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8003b1a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003b1e:	ee10 2a10 	vmov	r2, s0
 8003b22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8003b26:	ed93 0a00 	vldr	s0, [r3]
 8003b2a:	bd08      	pop	{r3, pc}
 8003b2c:	3fc90fdb 	.word	0x3fc90fdb
 8003b30:	40c90fdb 	.word	0x40c90fdb
 8003b34:	42a2f983 	.word	0x42a2f983
 8003b38:	0800e160 	.word	0x0800e160

08003b3c <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8003b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8003b40:	1e0f      	subs	r7, r1, #0
void ps_warmup(EncoderStruct * encoder, int n){
 8003b42:	b082      	sub	sp, #8
	for(int i = 0; i<n; i++){
 8003b44:	dd22      	ble.n	8003b8c <ps_warmup+0x50>
 8003b46:	4c13      	ldr	r4, [pc, #76]	; (8003b94 <ps_warmup+0x58>)
 8003b48:	4606      	mov	r6, r0
 8003b4a:	f100 0802 	add.w	r8, r0, #2
 8003b4e:	2500      	movs	r5, #0
		encoder->spi_tx_word = 0x0000;
 8003b50:	2200      	movs	r2, #0
 8003b52:	8032      	strh	r2, [r6, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8003b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5c:	f002 f9ee 	bl	8005f3c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8003b60:	2364      	movs	r3, #100	; 0x64
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	480b      	ldr	r0, [pc, #44]	; (8003b94 <ps_warmup+0x58>)
 8003b66:	2301      	movs	r3, #1
 8003b68:	4642      	mov	r2, r8
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	f003 f93e 	bl	8006dec <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8003b70:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d0fb      	beq.n	8003b70 <ps_warmup+0x34>
	for(int i = 0; i<n; i++){
 8003b78:	3501      	adds	r5, #1
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b84:	f002 f9da 	bl	8005f3c <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8003b88:	42af      	cmp	r7, r5
 8003b8a:	d1e1      	bne.n	8003b50 <ps_warmup+0x14>
	}
}
 8003b8c:	b002      	add	sp, #8
 8003b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b92:	bf00      	nop
 8003b94:	200093e8 	.word	0x200093e8

08003b98 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8003b98:	b530      	push	{r4, r5, lr}
 8003b9a:	ed2d 8b02 	vpush	{d8}
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8003b9e:	6843      	ldr	r3, [r0, #4]
 8003ba0:	6083      	str	r3, [r0, #8]
void ps_sample(EncoderStruct * encoder, float dt){
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	f100 010c 	add.w	r1, r0, #12
 8003baa:	224c      	movs	r2, #76	; 0x4c
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8003bac:	4625      	mov	r5, r4
 8003bae:	3010      	adds	r0, #16
void ps_sample(EncoderStruct * encoder, float dt){
 8003bb0:	eeb0 8a40 	vmov.f32	s16, s0
 8003bb4:	f005 fa08 	bl	8008fc8 <memmove>
	encoder->spi_tx_word = ENC_READ_WORD;
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f825 2b02 	strh.w	r2, [r5], #2
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8003bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc6:	f002 f9b9 	bl	8005f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
 8003bca:	2364      	movs	r3, #100	; 0x64
 8003bcc:	462a      	mov	r2, r5
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	4854      	ldr	r0, [pc, #336]	; (8003d24 <ps_sample+0x18c>)
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f003 f909 	bl	8006dec <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8003bda:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <ps_sample+0x18c>)
 8003bdc:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d0fb      	beq.n	8003bdc <ps_sample+0x44>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8003be4:	2201      	movs	r2, #1
 8003be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bee:	f002 f9a5 	bl	8005f3c <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8003bf2:	8861      	ldrh	r1, [r4, #2]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
	encoder->count = encoder->raw + off_interp;

	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8003bf4:	4d4c      	ldr	r5, [pc, #304]	; (8003d28 <ps_sample+0x190>)
	encoder->raw = encoder ->spi_rx_word;
 8003bf6:	6761      	str	r1, [r4, #116]	; 0x74
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003bf8:	124b      	asrs	r3, r1, #9
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8003c08:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	int int_angle = encoder->angle_singleturn;
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003c10:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003d2c <ps_sample+0x194>
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003c14:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8003d30 <ps_sample+0x198>
	int_angle = (int)encoder->elec_angle;
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003c18:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003d2c <ps_sample+0x194>
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8003c1c:	1ac0      	subs	r0, r0, r3
 8003c1e:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8003c22:	fb02 f200 	mul.w	r2, r2, r0
 8003c26:	eb03 2362 	add.w	r3, r3, r2, asr #9
	encoder->count = encoder->raw + off_interp;
 8003c2a:	440b      	add	r3, r1
 8003c2c:	67a3      	str	r3, [r4, #120]	; 0x78
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8003c2e:	692a      	ldr	r2, [r5, #16]
 8003c30:	1a9a      	subs	r2, r3, r2
 8003c32:	ee07 2a10 	vmov	s14, r2
 8003c36:	eeba 7ac8 	vcvt.f32.s32	s14, s14, #16
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003c3a:	696a      	ldr	r2, [r5, #20]
	int int_angle = encoder->angle_singleturn;
 8003c3c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003c40:	1a9b      	subs	r3, r3, r2
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c46:	ee37 7a67 	vsub.f32	s14, s14, s15
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003c4a:	ee07 3a90 	vmov	s15, r3
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003c4e:	ee27 7a26 	vmul.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8003c56:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5e:	bf48      	it	mi
 8003c60:	ee37 7a26 	vaddmi.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003c64:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8003c68:	ed84 7a01 	vstr	s14, [r4, #4]
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003c6c:	ee26 6a86 	vmul.f32	s12, s13, s12
 8003c70:	ee67 7a86 	vmul.f32	s15, s15, s12
	int_angle = (int)encoder->elec_angle;
 8003c74:	eebd 6ae7 	vcvt.s32.f32	s12, s15
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003c78:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003c7c:	ee77 7ac6 	vsub.f32	s15, s15, s12
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
	/* Rollover */
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8003c80:	ed94 6a02 	vldr	s12, [r4, #8]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003c84:	ee67 7aa5 	vmul.f32	s15, s15, s11
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8003c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c90:	bf48      	it	mi
 8003c92:	ee77 7aa5 	vaddmi.f32	s15, s15, s11
	if(angle_diff > PI_F){encoder->turns--;}
 8003c96:	eddf 5a27 	vldr	s11, [pc, #156]	; 8003d34 <ps_sample+0x19c>
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8003c9a:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8003c9e:	ee77 7a46 	vsub.f32	s15, s14, s12
	if(angle_diff > PI_F){encoder->turns--;}
 8003ca2:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003caa:	dd25      	ble.n	8003cf8 <ps_sample+0x160>
 8003cac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	else if(angle_diff < -PI_F){encoder->turns++;}
	if(!encoder->first_sample){
 8003cb6:	f894 328c 	ldrb.w	r3, [r4, #652]	; 0x28c
 8003cba:	b36b      	cbz	r3, 8003d18 <ps_sample+0x180>
 8003cbc:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 8003cc0:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8003d2c <ps_sample+0x194>
 8003cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc8:	eea7 7a86 	vfma.f32	s14, s15, s12
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003ccc:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
 8003cd0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003d38 <ps_sample+0x1a0>
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8003cd4:	ed84 7a03 	vstr	s14, [r4, #12]
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003cd8:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce0:	eec7 7a08 	vdiv.f32	s15, s14, s16
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8003ce4:	ee66 6aa7 	vmul.f32	s13, s13, s15
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003ce8:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8003cec:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64

}
 8003cf0:	b003      	add	sp, #12
 8003cf2:	ecbd 8b02 	vpop	{d8}
 8003cf6:	bd30      	pop	{r4, r5, pc}
	else if(angle_diff < -PI_F){encoder->turns++;}
 8003cf8:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003d3c <ps_sample+0x1a4>
 8003cfc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d04:	d5d7      	bpl.n	8003cb6 <ps_sample+0x11e>
 8003d06:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 8003d10:	f894 328c 	ldrb.w	r3, [r4, #652]	; 0x28c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1d1      	bne.n	8003cbc <ps_sample+0x124>
		encoder->first_sample = 1;
 8003d18:	2201      	movs	r2, #1
		encoder->turns = 0;
 8003d1a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		encoder->first_sample = 1;
 8003d1e:	f884 228c 	strb.w	r2, [r4, #652]	; 0x28c
 8003d22:	e7d3      	b.n	8003ccc <ps_sample+0x134>
 8003d24:	200093e8 	.word	0x200093e8
 8003d28:	20008f3c 	.word	0x20008f3c
 8003d2c:	40c90fdb 	.word	0x40c90fdb
 8003d30:	37800000 	.word	0x37800000
 8003d34:	40490fdb 	.word	0x40490fdb
 8003d38:	3d579436 	.word	0x3d579436
 8003d3c:	c0490fdb 	.word	0xc0490fdb

08003d40 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4604      	mov	r4, r0
	printf("Raw: %d", encoder->raw);
 8003d44:	4813      	ldr	r0, [pc, #76]	; (8003d94 <ps_print+0x54>)
 8003d46:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003d48:	f005 fdca 	bl	80098e0 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8003d4c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003d4e:	4812      	ldr	r0, [pc, #72]	; (8003d98 <ps_print+0x58>)
 8003d50:	f005 fdc6 	bl	80098e0 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8003d54:	6860      	ldr	r0, [r4, #4]
 8003d56:	f7fc fc1f 	bl	8000598 <__aeabi_f2d>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	480f      	ldr	r0, [pc, #60]	; (8003d9c <ps_print+0x5c>)
 8003d60:	f005 fdbe 	bl	80098e0 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8003d64:	68e0      	ldr	r0, [r4, #12]
 8003d66:	f7fc fc17 	bl	8000598 <__aeabi_f2d>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	480c      	ldr	r0, [pc, #48]	; (8003da0 <ps_print+0x60>)
 8003d70:	f005 fdb6 	bl	80098e0 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8003d74:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003d76:	f7fc fc0f 	bl	8000598 <__aeabi_f2d>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4809      	ldr	r0, [pc, #36]	; (8003da4 <ps_print+0x64>)
 8003d80:	f005 fdae 	bl	80098e0 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8003d84:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003d88:	4807      	ldr	r0, [pc, #28]	; (8003da8 <ps_print+0x68>)
	//HAL_Delay(dt_ms);
}
 8003d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("   Turns:  %d\r\n", encoder->turns);
 8003d8e:	f005 bda7 	b.w	80098e0 <iprintf>
 8003d92:	bf00      	nop
 8003d94:	0800e960 	.word	0x0800e960
 8003d98:	0800e968 	.word	0x0800e968
 8003d9c:	0800e980 	.word	0x0800e980
 8003da0:	0800e994 	.word	0x0800e994
 8003da4:	0800e9a8 	.word	0x0800e9a8
 8003da8:	0800e9bc 	.word	0x0800e9bc

08003dac <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003dac:	4811      	ldr	r0, [pc, #68]	; (8003df4 <MX_SPI1_Init+0x48>)
{
 8003dae:	b538      	push	{r3, r4, r5, lr}
  hspi1.Instance = SPI1;
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <MX_SPI1_Init+0x4c>)
 8003db2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003db4:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003db8:	2301      	movs	r3, #1
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003dba:	f44f 6570 	mov.w	r5, #3840	; 0xf00
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003dbe:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003dc2:	2130      	movs	r1, #48	; 0x30
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003dc4:	6042      	str	r2, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003dc6:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003dc8:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003dca:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003dcc:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dd0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003dd4:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003dd8:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 7;
 8003dda:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ddc:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dde:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de0:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003de2:	f002 ff7d 	bl	8006ce0 <HAL_SPI_Init>
 8003de6:	b900      	cbnz	r0, 8003dea <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8003dee:	f7ff bddd 	b.w	80039ac <Error_Handler>
 8003df2:	bf00      	nop
 8003df4:	2000944c 	.word	0x2000944c
 8003df8:	40013000 	.word	0x40013000

08003dfc <MX_SPI3_Init>:
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003dfc:	4810      	ldr	r0, [pc, #64]	; (8003e40 <MX_SPI3_Init+0x44>)
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <MX_SPI3_Init+0x48>)
{
 8003e00:	b510      	push	{r4, lr}
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003e02:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi3.Instance = SPI3;
 8003e06:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003e08:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003e0c:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8003e10:	2107      	movs	r1, #7
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003e12:	6043      	str	r3, [r0, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003e14:	60c2      	str	r2, [r0, #12]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003e16:	2300      	movs	r3, #0
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003e18:	2208      	movs	r2, #8
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e1e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003e22:	6184      	str	r4, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8003e24:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003e26:	6083      	str	r3, [r0, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e28:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e2a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003e2c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003e2e:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003e30:	f002 ff56 	bl	8006ce0 <HAL_SPI_Init>
 8003e34:	b900      	cbnz	r0, 8003e38 <MX_SPI3_Init+0x3c>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003e3c:	f7ff bdb6 	b.w	80039ac <Error_Handler>
 8003e40:	200093e8 	.word	0x200093e8
 8003e44:	40003c00 	.word	0x40003c00

08003e48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e48:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8003e4a:	6802      	ldr	r2, [r0, #0]
 8003e4c:	492d      	ldr	r1, [pc, #180]	; (8003f04 <HAL_SPI_MspInit+0xbc>)
{
 8003e4e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e50:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8003e52:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e54:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003e58:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003e5c:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8003e5e:	d004      	beq.n	8003e6a <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8003e60:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_SPI_MspInit+0xc0>)
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d028      	beq.n	8003eb8 <HAL_SPI_MspInit+0x70>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003e66:	b00a      	add	sp, #40	; 0x28
 8003e68:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e6e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e72:	2005      	movs	r0, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e7a:	661a      	str	r2, [r3, #96]	; 0x60
 8003e7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e82:	9200      	str	r2, [sp, #0]
 8003e84:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e90:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e9e:	24e0      	movs	r4, #224	; 0xe0
 8003ea0:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ea6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003eaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eae:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	f001 ff50 	bl	8005d54 <HAL_GPIO_Init>
}
 8003eb4:	b00a      	add	sp, #40	; 0x28
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eb8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ebc:	4813      	ldr	r0, [pc, #76]	; (8003f0c <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ebe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec4:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ec8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003ecc:	9202      	str	r2, [sp, #8]
 8003ece:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ed2:	f042 0204 	orr.w	r2, r2, #4
 8003ed6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ee0:	2306      	movs	r3, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee2:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ee4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eea:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003eec:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
 8003ef0:	2502      	movs	r5, #2
 8003ef2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003ef6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003efa:	f001 ff2b 	bl	8005d54 <HAL_GPIO_Init>
}
 8003efe:	b00a      	add	sp, #40	; 0x28
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	bf00      	nop
 8003f04:	40013000 	.word	0x40013000
 8003f08:	40003c00 	.word	0x40003c00
 8003f0c:	48000800 	.word	0x48000800

08003f10 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_MspInit+0x30>)
 8003f12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	661a      	str	r2, [r3, #96]	; 0x60
 8003f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003f1c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1e:	f002 0201 	and.w	r2, r2, #1
 8003f22:	9200      	str	r2, [sp, #0]
 8003f24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f38:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8003f3a:	f002 b883 	b.w	8006044 <HAL_PWREx_DisableUCPDDeadBattery>
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000

08003f44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f44:	e7fe      	b.n	8003f44 <NMI_Handler>
 8003f46:	bf00      	nop

08003f48 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f48:	e7fe      	b.n	8003f48 <HardFault_Handler>
 8003f4a:	bf00      	nop

08003f4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f4c:	e7fe      	b.n	8003f4c <MemManage_Handler>
 8003f4e:	bf00      	nop

08003f50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f50:	e7fe      	b.n	8003f50 <BusFault_Handler>
 8003f52:	bf00      	nop

08003f54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f54:	e7fe      	b.n	8003f54 <UsageFault_Handler>
 8003f56:	bf00      	nop

08003f58 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop

08003f5c <DebugMon_Handler>:
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop

08003f60 <PendSV_Handler>:
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop

08003f64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f64:	f000 bb06 	b.w	8004574 <HAL_IncTick>

08003f68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003f68:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  HAL_GPIO_WritePin(LED1, 1);
 8003f6a:	4d10      	ldr	r5, [pc, #64]	; (8003fac <TIM1_UP_TIM16_IRQHandler+0x44>)

  analog_sample(&controller);
 8003f6c:	4c10      	ldr	r4, [pc, #64]	; (8003fb0 <TIM1_UP_TIM16_IRQHandler+0x48>)
  HAL_GPIO_WritePin(LED1, 1);
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2104      	movs	r1, #4
 8003f72:	4628      	mov	r0, r5
 8003f74:	f001 ffe2 	bl	8005f3c <HAL_GPIO_WritePin>
  analog_sample(&controller);
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7fe f823 	bl	8001fc4 <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 8003f7e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003fb4 <TIM1_UP_TIM16_IRQHandler+0x4c>
 8003f82:	480d      	ldr	r0, [pc, #52]	; (8003fb8 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8003f84:	f7ff fe08 	bl	8003b98 <ps_sample>

  /* Run Finite State Machine */
  run_fsm(&state);
 8003f88:	480c      	ldr	r0, [pc, #48]	; (8003fbc <TIM1_UP_TIM16_IRQHandler+0x54>)
 8003f8a:	f7fe fdcb 	bl	8002b24 <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 8003f8e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0


  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f92:	480b      	ldr	r0, [pc, #44]	; (8003fc0 <TIM1_UP_TIM16_IRQHandler+0x58>)
  controller.loop_count++;
 8003f94:	3301      	adds	r3, #1
 8003f96:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  HAL_TIM_IRQHandler(&htim1);
 8003f9a:	f003 fc85 	bl	80078a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_GPIO_WritePin(LED1, 0);
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	2200      	movs	r2, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1, 0);
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	f001 bfc8 	b.w	8005f3c <HAL_GPIO_WritePin>
 8003fac:	48000800 	.word	0x48000800
 8003fb0:	2000078c 	.word	0x2000078c
 8003fb4:	3812ccf7 	.word	0x3812ccf7
 8003fb8:	200003e8 	.word	0x200003e8
 8003fbc:	2000067c 	.word	0x2000067c
 8003fc0:	200094b0 	.word	0x200094b0

08003fc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fc6:	4805      	ldr	r0, [pc, #20]	; (8003fdc <USART2_IRQHandler+0x18>)
 8003fc8:	f004 f838 	bl	800803c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 8003fcc:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <USART2_IRQHandler+0x1c>)
  update_fsm(&state, c);
 8003fce:	4805      	ldr	r0, [pc, #20]	; (8003fe4 <USART2_IRQHandler+0x20>)
 8003fd0:	7819      	ldrb	r1, [r3, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8003fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  update_fsm(&state, c);
 8003fd6:	f7ff b871 	b.w	80030bc <update_fsm>
 8003fda:	bf00      	nop
 8003fdc:	200094fc 	.word	0x200094fc
 8003fe0:	20000678 	.word	0x20000678
 8003fe4:	2000067c 	.word	0x2000067c

08003fe8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003fec:	4838      	ldr	r0, [pc, #224]	; (80040d0 <FDCAN2_IT0_IRQHandler+0xe8>)
  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  //TODO send again
  //HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8003fee:	4c39      	ldr	r4, [pc, #228]	; (80040d4 <FDCAN2_IT0_IRQHandler+0xec>)
{
 8003ff0:	b090      	sub	sp, #64	; 0x40
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003ff2:	f001 fbf5 	bl	80057e0 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8003ff6:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <FDCAN2_IT0_IRQHandler+0xf0>)
 8003ff8:	4835      	ldr	r0, [pc, #212]	; (80040d0 <FDCAN2_IT0_IRQHandler+0xe8>)
 8003ffa:	f103 020b 	add.w	r2, r3, #11
 8003ffe:	2140      	movs	r1, #64	; 0x40
 8004000:	f001 fae8 	bl	80055d4 <HAL_FDCAN_GetRxMessage>
  printf("CAN tx disabled!!\n\r");
 8004004:	4835      	ldr	r0, [pc, #212]	; (80040dc <FDCAN2_IT0_IRQHandler+0xf4>)
 8004006:	f005 fc6b 	bl	80098e0 <iprintf>
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800400a:	7926      	ldrb	r6, [r4, #4]
 800400c:	7963      	ldrb	r3, [r4, #5]
 800400e:	79a0      	ldrb	r0, [r4, #6]
 8004010:	7862      	ldrb	r2, [r4, #1]
 8004012:	f894 c002 	ldrb.w	ip, [r4, #2]
 8004016:	78e5      	ldrb	r5, [r4, #3]
 8004018:	79e7      	ldrb	r7, [r4, #7]
 800401a:	ea06 0103 	and.w	r1, r6, r3
 800401e:	4001      	ands	r1, r0
 8004020:	ea02 020c 	and.w	r2, r2, ip
 8004024:	402a      	ands	r2, r5
 8004026:	4039      	ands	r1, r7
 8004028:	4011      	ands	r1, r2
 800402a:	29ff      	cmp	r1, #255	; 0xff
 800402c:	7a25      	ldrb	r5, [r4, #8]
 800402e:	d101      	bne.n	8004034 <FDCAN2_IT0_IRQHandler+0x4c>
 8004030:	2dfc      	cmp	r5, #252	; 0xfc
 8004032:	d025      	beq.n	8004080 <FDCAN2_IT0_IRQHandler+0x98>
	  update_fsm(&state, MOTOR_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8004034:	f1a6 06ff 	sub.w	r6, r6, #255	; 0xff
 8004038:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
 800403c:	fab6 f686 	clz	r6, r6
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	0976      	lsrs	r6, r6, #5
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	4038      	ands	r0, r7
 800404a:	4002      	ands	r2, r0
 800404c:	fb03 f306 	mul.w	r3, r3, r6
 8004050:	2aff      	cmp	r2, #255	; 0xff
 8004052:	bf14      	ite	ne
 8004054:	2300      	movne	r3, #0
 8004056:	f003 0301 	andeq.w	r3, r3, #1
 800405a:	2dfd      	cmp	r5, #253	; 0xfd
 800405c:	bf14      	ite	ne
 800405e:	2200      	movne	r2, #0
 8004060:	f003 0201 	andeq.w	r2, r3, #1
 8004064:	b99a      	cbnz	r2, 800408e <FDCAN2_IT0_IRQHandler+0xa6>
	  update_fsm(&state, MENU_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8004066:	2dfe      	cmp	r5, #254	; 0xfe
 8004068:	bf14      	ite	ne
 800406a:	2500      	movne	r5, #0
 800406c:	f003 0501 	andeq.w	r5, r3, #1
 8004070:	b1a5      	cbz	r5, 800409c <FDCAN2_IT0_IRQHandler+0xb4>
	  update_fsm(&state, ZERO_CMD);
 8004072:	481b      	ldr	r0, [pc, #108]	; (80040e0 <FDCAN2_IT0_IRQHandler+0xf8>)
 8004074:	217a      	movs	r1, #122	; 0x7a
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004076:	b010      	add	sp, #64	; 0x40
 8004078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 800407c:	f7ff b81e 	b.w	80030bc <update_fsm>
 8004080:	4817      	ldr	r0, [pc, #92]	; (80040e0 <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MOTOR_CMD);
 8004082:	216d      	movs	r1, #109	; 0x6d
}
 8004084:	b010      	add	sp, #64	; 0x40
 8004086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 800408a:	f7ff b817 	b.w	80030bc <update_fsm>
 800408e:	4814      	ldr	r0, [pc, #80]	; (80040e0 <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MENU_CMD);
 8004090:	211b      	movs	r1, #27
}
 8004092:	b010      	add	sp, #64	; 0x40
 8004094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004098:	f7ff b810 	b.w	80030bc <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 800409c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80040e8 <FDCAN2_IT0_IRQHandler+0x100>
 80040a0:	4f10      	ldr	r7, [pc, #64]	; (80040e4 <FDCAN2_IT0_IRQHandler+0xfc>)
 80040a2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80040a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80040a8:	466e      	mov	r6, sp
 80040aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80040ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80040ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80040b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80040b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80040b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80040b8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80040bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040c0:	f7fd fe06 	bl	8001cd0 <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 80040c4:	f848 5c14 	str.w	r5, [r8, #-20]
}
 80040c8:	b010      	add	sp, #64	; 0x40
 80040ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ce:	bf00      	nop
 80040d0:	20000384 	.word	0x20000384
 80040d4:	20009370 	.word	0x20009370
 80040d8:	20009371 	.word	0x20009371
 80040dc:	0800e9cc 	.word	0x0800e9cc
 80040e0:	2000067c 	.word	0x2000067c
 80040e4:	20009380 	.word	0x20009380
 80040e8:	20000854 	.word	0x20000854

080040ec <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040ec:	2001      	movs	r0, #1
 80040ee:	4770      	bx	lr

080040f0 <_kill>:

int _kill(int pid, int sig)
{
 80040f0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040f2:	f004 ff31 	bl	8008f58 <__errno>
 80040f6:	2316      	movs	r3, #22
 80040f8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80040fa:	f04f 30ff 	mov.w	r0, #4294967295
 80040fe:	bd08      	pop	{r3, pc}

08004100 <_exit>:

void _exit (int status)
{
 8004100:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004102:	f004 ff29 	bl	8008f58 <__errno>
 8004106:	2316      	movs	r3, #22
 8004108:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800410a:	e7fe      	b.n	800410a <_exit+0xa>

0800410c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800410c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800410e:	1e16      	subs	r6, r2, #0
 8004110:	dd07      	ble.n	8004122 <_read+0x16>
 8004112:	460c      	mov	r4, r1
 8004114:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004116:	f3af 8000 	nop.w
 800411a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411e:	42a5      	cmp	r5, r4
 8004120:	d1f9      	bne.n	8004116 <_read+0xa>
	}

return len;
}
 8004122:	4630      	mov	r0, r6
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	bf00      	nop

08004128 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004128:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412a:	1e16      	subs	r6, r2, #0
 800412c:	dd07      	ble.n	800413e <_write+0x16>
 800412e:	460c      	mov	r4, r1
 8004130:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8004132:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004136:	f000 f9a3 	bl	8004480 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413a:	42ac      	cmp	r4, r5
 800413c:	d1f9      	bne.n	8004132 <_write+0xa>
	}
	return len;
}
 800413e:	4630      	mov	r0, r6
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	bf00      	nop

08004144 <_close>:

int _close(int file)
{
	return -1;
}
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop

0800414c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800414c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004150:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004152:	2000      	movs	r0, #0
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop

08004158 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004158:	2001      	movs	r0, #1
 800415a:	4770      	bx	lr

0800415c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800415c:	2000      	movs	r0, #0
 800415e:	4770      	bx	lr

08004160 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004160:	490c      	ldr	r1, [pc, #48]	; (8004194 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004162:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004164:	680b      	ldr	r3, [r1, #0]
{
 8004166:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004168:	4c0c      	ldr	r4, [pc, #48]	; (800419c <_sbrk+0x3c>)
 800416a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800416c:	b12b      	cbz	r3, 800417a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800416e:	4418      	add	r0, r3
 8004170:	4290      	cmp	r0, r2
 8004172:	d807      	bhi.n	8004184 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004174:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004176:	4618      	mov	r0, r3
 8004178:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <_sbrk+0x40>)
 800417c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800417e:	4418      	add	r0, r3
 8004180:	4290      	cmp	r0, r2
 8004182:	d9f7      	bls.n	8004174 <_sbrk+0x14>
    errno = ENOMEM;
 8004184:	f004 fee8 	bl	8008f58 <__errno>
 8004188:	230c      	movs	r3, #12
 800418a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd10      	pop	{r4, pc}
 8004194:	20000234 	.word	0x20000234
 8004198:	20020000 	.word	0x20020000
 800419c:	00000400 	.word	0x00000400
 80041a0:	200095a0 	.word	0x200095a0

080041a4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041a4:	4a03      	ldr	r2, [pc, #12]	; (80041b4 <SystemInit+0x10>)
 80041a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80041aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80041b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ba:	2400      	movs	r4, #0
{
 80041bc:	b0a7      	sub	sp, #156	; 0x9c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041be:	4d5d      	ldr	r5, [pc, #372]	; (8004334 <MX_TIM1_Init+0x17c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041c0:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041c2:	4621      	mov	r1, r4
 80041c4:	2234      	movs	r2, #52	; 0x34
 80041c6:	a818      	add	r0, sp, #96	; 0x60
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041c8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041cc:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041d0:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80041d4:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 80041d8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041dc:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041de:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041e0:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041e2:	f004 ff0b 	bl	8008ffc <memset>
  htim1.Instance = TIM1;
 80041e6:	4854      	ldr	r0, [pc, #336]	; (8004338 <MX_TIM1_Init+0x180>)
 80041e8:	6028      	str	r0, [r5, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80041ea:	2120      	movs	r1, #32
  htim1.Init.Period = 5950;
 80041ec:	f241 723e 	movw	r2, #5950	; 0x173e
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041f0:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80041f2:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 0;
 80041f4:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 5950;
 80041f8:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.Prescaler = 0;
 80041fc:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041fe:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004200:	f003 f866 	bl	80072d0 <HAL_TIM_Base_Init>
 8004204:	2800      	cmp	r0, #0
 8004206:	d15e      	bne.n	80042c6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800420c:	4849      	ldr	r0, [pc, #292]	; (8004334 <MX_TIM1_Init+0x17c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800420e:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004210:	a906      	add	r1, sp, #24
 8004212:	f003 fa6f 	bl	80076f4 <HAL_TIM_ConfigClockSource>
 8004216:	2800      	cmp	r0, #0
 8004218:	d16a      	bne.n	80042f0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800421a:	4846      	ldr	r0, [pc, #280]	; (8004334 <MX_TIM1_Init+0x17c>)
 800421c:	f003 f934 	bl	8007488 <HAL_TIM_PWM_Init>
 8004220:	2800      	cmp	r0, #0
 8004222:	d162      	bne.n	80042ea <MX_TIM1_Init+0x132>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004224:	2600      	movs	r6, #0
 8004226:	2700      	movs	r7, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004228:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800422a:	4842      	ldr	r0, [pc, #264]	; (8004334 <MX_TIM1_Init+0x17c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800422c:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800422e:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004230:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004234:	f003 fd86 	bl	8007d44 <HAL_TIMEx_MasterConfigSynchronization>
 8004238:	2800      	cmp	r0, #0
 800423a:	d153      	bne.n	80042e4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800423c:	2660      	movs	r6, #96	; 0x60
 800423e:	2700      	movs	r7, #0
 8004240:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004244:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004246:	2600      	movs	r6, #0
 8004248:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800424a:	483a      	ldr	r0, [pc, #232]	; (8004334 <MX_TIM1_Init+0x17c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800424c:	9216      	str	r2, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800424e:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004250:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004254:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004258:	f003 fc72 	bl	8007b40 <HAL_TIM_PWM_ConfigChannel>
 800425c:	2800      	cmp	r0, #0
 800425e:	d13e      	bne.n	80042de <MX_TIM1_Init+0x126>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004260:	4834      	ldr	r0, [pc, #208]	; (8004334 <MX_TIM1_Init+0x17c>)
 8004262:	2204      	movs	r2, #4
 8004264:	a910      	add	r1, sp, #64	; 0x40
 8004266:	f003 fc6b 	bl	8007b40 <HAL_TIM_PWM_ConfigChannel>
 800426a:	bba8      	cbnz	r0, 80042d8 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800426c:	4831      	ldr	r0, [pc, #196]	; (8004334 <MX_TIM1_Init+0x17c>)
 800426e:	a910      	add	r1, sp, #64	; 0x40
 8004270:	2208      	movs	r2, #8
 8004272:	f003 fc65 	bl	8007b40 <HAL_TIM_PWM_ConfigChannel>
 8004276:	bb60      	cbnz	r0, 80042d2 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004278:	2200      	movs	r2, #0
 800427a:	2300      	movs	r3, #0
 800427c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8004280:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8004284:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8004288:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004292:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004296:	2400      	movs	r4, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004298:	2200      	movs	r2, #0
 800429a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800429e:	4825      	ldr	r0, [pc, #148]	; (8004334 <MX_TIM1_Init+0x17c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042a0:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042a2:	a918      	add	r1, sp, #96	; 0x60
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042a4:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042a8:	f003 fdb0 	bl	8007e0c <HAL_TIMEx_ConfigBreakDeadTime>
 80042ac:	b970      	cbnz	r0, 80042cc <MX_TIM1_Init+0x114>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 80042ae:	6829      	ldr	r1, [r5, #0]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <MX_TIM1_Init+0x180>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b2:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 80042b4:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80042ba:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80042be:	930e      	str	r3, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM1)
 80042c0:	d019      	beq.n	80042f6 <MX_TIM1_Init+0x13e>
}
 80042c2:	b027      	add	sp, #156	; 0x9c
 80042c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80042c6:	f7ff fb71 	bl	80039ac <Error_Handler>
 80042ca:	e79d      	b.n	8004208 <MX_TIM1_Init+0x50>
    Error_Handler();
 80042cc:	f7ff fb6e 	bl	80039ac <Error_Handler>
 80042d0:	e7ed      	b.n	80042ae <MX_TIM1_Init+0xf6>
    Error_Handler();
 80042d2:	f7ff fb6b 	bl	80039ac <Error_Handler>
 80042d6:	e7cf      	b.n	8004278 <MX_TIM1_Init+0xc0>
    Error_Handler();
 80042d8:	f7ff fb68 	bl	80039ac <Error_Handler>
 80042dc:	e7c6      	b.n	800426c <MX_TIM1_Init+0xb4>
    Error_Handler();
 80042de:	f7ff fb65 	bl	80039ac <Error_Handler>
 80042e2:	e7bd      	b.n	8004260 <MX_TIM1_Init+0xa8>
    Error_Handler();
 80042e4:	f7ff fb62 	bl	80039ac <Error_Handler>
 80042e8:	e7a8      	b.n	800423c <MX_TIM1_Init+0x84>
    Error_Handler();
 80042ea:	f7ff fb5f 	bl	80039ac <Error_Handler>
 80042ee:	e799      	b.n	8004224 <MX_TIM1_Init+0x6c>
    Error_Handler();
 80042f0:	f7ff fb5c 	bl	80039ac <Error_Handler>
 80042f4:	e791      	b.n	800421a <MX_TIM1_Init+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80042fe:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	64da      	str	r2, [r3, #76]	; 0x4c
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800430a:	900e      	str	r0, [sp, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004312:	2200      	movs	r2, #0
 8004314:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004318:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 800431c:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004322:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8004326:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800432a:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f001 fd12 	bl	8005d54 <HAL_GPIO_Init>
}
 8004330:	b027      	add	sp, #156	; 0x9c
 8004332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004334:	200094b0 	.word	0x200094b0
 8004338:	40012c00 	.word	0x40012c00

0800433c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_TIM_Base_MspInit+0x3c>)
 800433e:	6802      	ldr	r2, [r0, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d000      	beq.n	8004346 <HAL_TIM_Base_MspInit+0xa>
 8004344:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004346:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 800434a:	b500      	push	{lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800434c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800434e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004352:	661a      	str	r2, [r3, #96]	; 0x60
 8004354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8004356:	b083      	sub	sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	2101      	movs	r1, #1
 8004362:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004364:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004366:	f000 fe71 	bl	800504c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800436a:	2019      	movs	r0, #25
}
 800436c:	b003      	add	sp, #12
 800436e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004372:	f000 bea3 	b.w	80050bc <HAL_NVIC_EnableIRQ>
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00

0800437c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800437c:	481f      	ldr	r0, [pc, #124]	; (80043fc <MX_USART2_UART_Init+0x80>)
{
 800437e:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004380:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <MX_USART2_UART_Init+0x84>)
 8004382:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004384:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004388:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800438a:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800438c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004390:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004394:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 115200;
 8004398:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800439a:	6142      	str	r2, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800439c:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800439e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043a0:	f004 fa5a 	bl	8008858 <HAL_UART_Init>
 80043a4:	b970      	cbnz	r0, 80043c4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043a6:	4815      	ldr	r0, [pc, #84]	; (80043fc <MX_USART2_UART_Init+0x80>)
 80043a8:	2100      	movs	r1, #0
 80043aa:	f004 fd51 	bl	8008e50 <HAL_UARTEx_SetTxFifoThreshold>
 80043ae:	b988      	cbnz	r0, 80043d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043b0:	4812      	ldr	r0, [pc, #72]	; (80043fc <MX_USART2_UART_Init+0x80>)
 80043b2:	2100      	movs	r1, #0
 80043b4:	f004 fd8a 	bl	8008ecc <HAL_UARTEx_SetRxFifoThreshold>
 80043b8:	b9a0      	cbnz	r0, 80043e4 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80043ba:	4810      	ldr	r0, [pc, #64]	; (80043fc <MX_USART2_UART_Init+0x80>)
 80043bc:	f004 fd2a 	bl	8008e14 <HAL_UARTEx_DisableFifoMode>
 80043c0:	b9b8      	cbnz	r0, 80043f2 <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80043c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80043c4:	f7ff faf2 	bl	80039ac <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043c8:	480c      	ldr	r0, [pc, #48]	; (80043fc <MX_USART2_UART_Init+0x80>)
 80043ca:	2100      	movs	r1, #0
 80043cc:	f004 fd40 	bl	8008e50 <HAL_UARTEx_SetTxFifoThreshold>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d0ed      	beq.n	80043b0 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80043d4:	f7ff faea 	bl	80039ac <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043d8:	4808      	ldr	r0, [pc, #32]	; (80043fc <MX_USART2_UART_Init+0x80>)
 80043da:	2100      	movs	r1, #0
 80043dc:	f004 fd76 	bl	8008ecc <HAL_UARTEx_SetRxFifoThreshold>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d0ea      	beq.n	80043ba <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80043e4:	f7ff fae2 	bl	80039ac <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80043e8:	4804      	ldr	r0, [pc, #16]	; (80043fc <MX_USART2_UART_Init+0x80>)
 80043ea:	f004 fd13 	bl	8008e14 <HAL_UARTEx_DisableFifoMode>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d0e7      	beq.n	80043c2 <MX_USART2_UART_Init+0x46>
}
 80043f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80043f6:	f7ff bad9 	b.w	80039ac <Error_Handler>
 80043fa:	bf00      	nop
 80043fc:	200094fc 	.word	0x200094fc
 8004400:	40004400 	.word	0x40004400

08004404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004404:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8004406:	6802      	ldr	r2, [r0, #0]
 8004408:	4b1c      	ldr	r3, [pc, #112]	; (800447c <HAL_UART_MspInit+0x78>)
{
 800440a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440c:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 800440e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004414:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004418:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 800441a:	d001      	beq.n	8004420 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800441c:	b008      	add	sp, #32
 800441e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004420:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004424:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8004426:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004428:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800442c:	659a      	str	r2, [r3, #88]	; 0x58
 800442e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004430:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004434:	9200      	str	r2, [sp, #0]
 8004436:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004448:	220c      	movs	r2, #12
 800444a:	2302      	movs	r3, #2
 800444c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004450:	2507      	movs	r5, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004452:	2300      	movs	r3, #0
 8004454:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800445a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445e:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004460:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004462:	f001 fc77 	bl	8005d54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004466:	4622      	mov	r2, r4
 8004468:	2101      	movs	r1, #1
 800446a:	2026      	movs	r0, #38	; 0x26
 800446c:	f000 fdee 	bl	800504c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004470:	2026      	movs	r0, #38	; 0x26
 8004472:	f000 fe23 	bl	80050bc <HAL_NVIC_EnableIRQ>
}
 8004476:	b008      	add	sp, #32
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	bf00      	nop
 800447c:	40004400 	.word	0x40004400

08004480 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8004480:	b500      	push	{lr}
 8004482:	b083      	sub	sp, #12
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8004484:	f64f 73ff 	movw	r3, #65535	; 0xffff
int __io_putchar(int ch) {
 8004488:	9001      	str	r0, [sp, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 800448a:	2201      	movs	r2, #1
 800448c:	a901      	add	r1, sp, #4
 800448e:	4803      	ldr	r0, [pc, #12]	; (800449c <__io_putchar+0x1c>)
 8004490:	f004 fc14 	bl	8008cbc <HAL_UART_Transmit>
return 0;
}
 8004494:	2000      	movs	r0, #0
 8004496:	b003      	add	sp, #12
 8004498:	f85d fb04 	ldr.w	pc, [sp], #4
 800449c:	200094fc 	.word	0x200094fc

080044a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80044a0:	4902      	ldr	r1, [pc, #8]	; (80044ac <HAL_UART_RxCpltCallback+0xc>)
 80044a2:	4803      	ldr	r0, [pc, #12]	; (80044b0 <HAL_UART_RxCpltCallback+0x10>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	f003 bd0f 	b.w	8007ec8 <HAL_UART_Receive_IT>
 80044aa:	bf00      	nop
 80044ac:	20000678 	.word	0x20000678
 80044b0:	200094fc 	.word	0x200094fc

080044b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044b4:	480d      	ldr	r0, [pc, #52]	; (80044ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044b8:	480d      	ldr	r0, [pc, #52]	; (80044f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80044ba:	490e      	ldr	r1, [pc, #56]	; (80044f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044bc:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <LoopForever+0xe>)
  movs r3, #0
 80044be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80044c0:	e002      	b.n	80044c8 <LoopCopyDataInit>

080044c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044c6:	3304      	adds	r3, #4

080044c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044cc:	d3f9      	bcc.n	80044c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ce:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80044d0:	4c0b      	ldr	r4, [pc, #44]	; (8004500 <LoopForever+0x16>)
  movs r3, #0
 80044d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044d4:	e001      	b.n	80044da <LoopFillZerobss>

080044d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d8:	3204      	adds	r2, #4

080044da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044dc:	d3fb      	bcc.n	80044d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044de:	f7ff fe61 	bl	80041a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044e2:	f004 fd3f 	bl	8008f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044e6:	f7ff f87f 	bl	80035e8 <main>

080044ea <LoopForever>:

LoopForever:
    b LoopForever
 80044ea:	e7fe      	b.n	80044ea <LoopForever>
  ldr   r0, =_estack
 80044ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044f4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80044f8:	0800ef40 	.word	0x0800ef40
  ldr r2, =_sbss
 80044fc:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004500:	200095a0 	.word	0x200095a0

08004504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004504:	e7fe      	b.n	8004504 <ADC1_2_IRQHandler>
	...

08004508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004508:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <HAL_InitTick+0x40>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	b90b      	cbnz	r3, 8004514 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004510:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004512:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004514:	490d      	ldr	r1, [pc, #52]	; (800454c <HAL_InitTick+0x44>)
 8004516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800451a:	4605      	mov	r5, r0
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	6808      	ldr	r0, [r1, #0]
 8004522:	fbb0 f0f3 	udiv	r0, r0, r3
 8004526:	f000 fdd7 	bl	80050d8 <HAL_SYSTICK_Config>
 800452a:	4604      	mov	r4, r0
 800452c:	2800      	cmp	r0, #0
 800452e:	d1ef      	bne.n	8004510 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004530:	2d0f      	cmp	r5, #15
 8004532:	d8ed      	bhi.n	8004510 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004534:	4602      	mov	r2, r0
 8004536:	4629      	mov	r1, r5
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	f000 fd86 	bl	800504c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_InitTick+0x48>)
 8004542:	4620      	mov	r0, r4
 8004544:	601d      	str	r5, [r3, #0]
}
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20000004 	.word	0x20000004
 800454c:	20000000 	.word	0x20000000
 8004550:	20000008 	.word	0x20000008

08004554 <HAL_Init>:
{
 8004554:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004556:	2003      	movs	r0, #3
 8004558:	f000 fd64 	bl	8005024 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800455c:	2000      	movs	r0, #0
 800455e:	f7ff ffd3 	bl	8004508 <HAL_InitTick>
 8004562:	b110      	cbz	r0, 800456a <HAL_Init+0x16>
    status = HAL_ERROR;
 8004564:	2401      	movs	r4, #1
}
 8004566:	4620      	mov	r0, r4
 8004568:	bd10      	pop	{r4, pc}
 800456a:	4604      	mov	r4, r0
    HAL_MspInit();
 800456c:	f7ff fcd0 	bl	8003f10 <HAL_MspInit>
}
 8004570:	4620      	mov	r0, r4
 8004572:	bd10      	pop	{r4, pc}

08004574 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004574:	4a03      	ldr	r2, [pc, #12]	; (8004584 <HAL_IncTick+0x10>)
 8004576:	4904      	ldr	r1, [pc, #16]	; (8004588 <HAL_IncTick+0x14>)
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	6809      	ldr	r1, [r1, #0]
 800457c:	440b      	add	r3, r1
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	2000958c 	.word	0x2000958c
 8004588:	20000004 	.word	0x20000004

0800458c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <HAL_GetTick+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	2000958c 	.word	0x2000958c

08004598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff fff6 	bl	800458c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045a0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80045a2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80045a4:	d002      	beq.n	80045ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_Delay+0x20>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ac:	f7ff ffee 	bl	800458c <HAL_GetTick>
 80045b0:	1b43      	subs	r3, r0, r5
 80045b2:	42a3      	cmp	r3, r4
 80045b4:	d3fa      	bcc.n	80045ac <HAL_Delay+0x14>
  {
  }
}
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	20000004 	.word	0x20000004

080045bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f000 80d6 	beq.w	8004776 <HAL_ADC_Init+0x1ba>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045ca:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80045cc:	4604      	mov	r4, r0
 80045ce:	2d00      	cmp	r5, #0
 80045d0:	f000 809f 	beq.w	8004712 <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045d4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045d6:	6893      	ldr	r3, [r2, #8]
 80045d8:	0099      	lsls	r1, r3, #2
 80045da:	d505      	bpl.n	80045e8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045dc:	6893      	ldr	r3, [r2, #8]
 80045de:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80045e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045e6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045e8:	6893      	ldr	r3, [r2, #8]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	d419      	bmi.n	8004622 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ee:	4b7f      	ldr	r3, [pc, #508]	; (80047ec <HAL_ADC_Init+0x230>)
 80045f0:	487f      	ldr	r0, [pc, #508]	; (80047f0 <HAL_ADC_Init+0x234>)
 80045f2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80045f4:	6891      	ldr	r1, [r2, #8]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	fba0 0303 	umull	r0, r3, r0, r3
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004602:	3301      	adds	r3, #1
 8004604:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800460e:	6091      	str	r1, [r2, #8]
 8004610:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004612:	9b01      	ldr	r3, [sp, #4]
 8004614:	b12b      	cbz	r3, 8004622 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	3b01      	subs	r3, #1
 800461a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800461c:	9b01      	ldr	r3, [sp, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f9      	bne.n	8004616 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004622:	6893      	ldr	r3, [r2, #8]
 8004624:	00de      	lsls	r6, r3, #3
 8004626:	d466      	bmi.n	80046f6 <HAL_ADC_Init+0x13a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004628:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800462a:	f043 0310 	orr.w	r3, r3, #16
 800462e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004630:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004638:	6893      	ldr	r3, [r2, #8]
 800463a:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 800463e:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004642:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004644:	d15e      	bne.n	8004704 <HAL_ADC_Init+0x148>
 8004646:	06dd      	lsls	r5, r3, #27
 8004648:	d45c      	bmi.n	8004704 <HAL_ADC_Init+0x148>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800464a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800464c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004650:	f043 0302 	orr.w	r3, r3, #2
 8004654:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004656:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004658:	07d9      	lsls	r1, r3, #31
 800465a:	d419      	bmi.n	8004690 <HAL_ADC_Init+0xd4>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800465c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004660:	f000 80a1 	beq.w	80047a6 <HAL_ADC_Init+0x1ea>
 8004664:	4b63      	ldr	r3, [pc, #396]	; (80047f4 <HAL_ADC_Init+0x238>)
 8004666:	429a      	cmp	r2, r3
 8004668:	f000 80a6 	beq.w	80047b8 <HAL_ADC_Init+0x1fc>
 800466c:	4d62      	ldr	r5, [pc, #392]	; (80047f8 <HAL_ADC_Init+0x23c>)
 800466e:	4963      	ldr	r1, [pc, #396]	; (80047fc <HAL_ADC_Init+0x240>)
 8004670:	68ad      	ldr	r5, [r5, #8]
 8004672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	6889      	ldr	r1, [r1, #8]
 800467a:	432b      	orrs	r3, r5
 800467c:	430b      	orrs	r3, r1
 800467e:	07db      	lsls	r3, r3, #31
 8004680:	d406      	bmi.n	8004690 <HAL_ADC_Init+0xd4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004682:	495f      	ldr	r1, [pc, #380]	; (8004800 <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004684:	688b      	ldr	r3, [r1, #8]
 8004686:	6865      	ldr	r5, [r4, #4]
 8004688:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800468c:	432b      	orrs	r3, r5
 800468e:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004690:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8004694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004696:	432b      	orrs	r3, r5
 8004698:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800469a:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800469c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80046a0:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046a4:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046aa:	d05f      	beq.n	800476c <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046ae:	b121      	cbz	r1, 80046ba <HAL_ADC_Init+0xfe>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80046b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046b2:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80046b6:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046b8:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046ba:	68d6      	ldr	r6, [r2, #12]
 80046bc:	4951      	ldr	r1, [pc, #324]	; (8004804 <HAL_ADC_Init+0x248>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80046be:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046c0:	4031      	ands	r1, r6
 80046c2:	430b      	orrs	r3, r1
 80046c4:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80046c6:	6913      	ldr	r3, [r2, #16]
 80046c8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80046cc:	432b      	orrs	r3, r5
 80046ce:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046d0:	6893      	ldr	r3, [r2, #8]
 80046d2:	075e      	lsls	r6, r3, #29
 80046d4:	d523      	bpl.n	800471e <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046d6:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046d8:	6963      	ldr	r3, [r4, #20]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d04e      	beq.n	800477c <HAL_ADC_Init+0x1c0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80046e0:	f023 030f 	bic.w	r3, r3, #15
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80046f2:	b002      	add	sp, #8
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046f6:	6893      	ldr	r3, [r2, #8]
 80046f8:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fc:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004700:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004702:	d0a0      	beq.n	8004646 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004704:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004706:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004708:	f043 0310 	orr.w	r3, r3, #16
 800470c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800470e:	b002      	add	sp, #8
 8004710:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004712:	f7fc fd81 	bl	8001218 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004716:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004718:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800471c:	e75a      	b.n	80045d4 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800471e:	6893      	ldr	r3, [r2, #8]
 8004720:	071d      	lsls	r5, r3, #28
 8004722:	d4d9      	bmi.n	80046d8 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004724:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004726:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800472a:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 800472c:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800472e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004732:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004734:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004738:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800473c:	430b      	orrs	r3, r1
 800473e:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004740:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004742:	bb1d      	cbnz	r5, 800478c <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004748:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800474a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800474e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004752:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004756:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800475a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800475e:	2b01      	cmp	r3, #1
 8004760:	d033      	beq.n	80047ca <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004762:	6913      	ldr	r3, [r2, #16]
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6113      	str	r3, [r2, #16]
 800476a:	e7b5      	b.n	80046d8 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800476c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800476e:	3901      	subs	r1, #1
 8004770:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004774:	e79a      	b.n	80046ac <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
}
 8004778:	b002      	add	sp, #8
 800477a:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800477c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800477e:	6a23      	ldr	r3, [r4, #32]
 8004780:	f021 010f 	bic.w	r1, r1, #15
 8004784:	3b01      	subs	r3, #1
 8004786:	430b      	orrs	r3, r1
 8004788:	6313      	str	r3, [r2, #48]	; 0x30
 800478a:	e7ac      	b.n	80046e6 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800478c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004790:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004792:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004796:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800479a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800479e:	432b      	orrs	r3, r5
 80047a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80047a4:	e7d9      	b.n	800475a <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047a6:	4913      	ldr	r1, [pc, #76]	; (80047f4 <HAL_ADC_Init+0x238>)
 80047a8:	6893      	ldr	r3, [r2, #8]
 80047aa:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	07d9      	lsls	r1, r3, #31
 80047b0:	f53f af6e 	bmi.w	8004690 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047b4:	4914      	ldr	r1, [pc, #80]	; (8004808 <HAL_ADC_Init+0x24c>)
 80047b6:	e765      	b.n	8004684 <HAL_ADC_Init+0xc8>
 80047b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	f53f af64 	bmi.w	8004690 <HAL_ADC_Init+0xd4>
 80047c8:	e7f4      	b.n	80047b4 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 80047ca:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 80047ce:	6911      	ldr	r1, [r2, #16]
 80047d0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80047d2:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80047d6:	f021 0104 	bic.w	r1, r1, #4
 80047da:	4333      	orrs	r3, r6
 80047dc:	430b      	orrs	r3, r1
 80047de:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80047e0:	432b      	orrs	r3, r5
 80047e2:	430b      	orrs	r3, r1
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6113      	str	r3, [r2, #16]
 80047ea:	e775      	b.n	80046d8 <HAL_ADC_Init+0x11c>
 80047ec:	20000000 	.word	0x20000000
 80047f0:	053e2d63 	.word	0x053e2d63
 80047f4:	50000100 	.word	0x50000100
 80047f8:	50000400 	.word	0x50000400
 80047fc:	50000600 	.word	0x50000600
 8004800:	50000700 	.word	0x50000700
 8004804:	fff04007 	.word	0xfff04007
 8004808:	50000300 	.word	0x50000300

0800480c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800480c:	6803      	ldr	r3, [r0, #0]
 800480e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004816:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800481a:	b083      	sub	sp, #12
 800481c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800481e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004820:	f04f 0000 	mov.w	r0, #0
 8004824:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004826:	f000 8150 	beq.w	8004aca <HAL_ADC_ConfigChannel+0x2b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800482a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800482c:	2001      	movs	r0, #1
 800482e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004832:	6894      	ldr	r4, [r2, #8]
 8004834:	0766      	lsls	r6, r4, #29
 8004836:	d450      	bmi.n	80048da <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(*preg,
 8004838:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800483c:	09a6      	lsrs	r6, r4, #6
 800483e:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004842:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8004846:	f004 041f 	and.w	r4, r4, #31
 800484a:	5977      	ldr	r7, [r6, r5]
 800484c:	f04f 0c1f 	mov.w	ip, #31
 8004850:	fa0c fc04 	lsl.w	ip, ip, r4
 8004854:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004858:	ea27 070c 	bic.w	r7, r7, ip
 800485c:	40a0      	lsls	r0, r4
 800485e:	4338      	orrs	r0, r7
 8004860:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004862:	6890      	ldr	r0, [r2, #8]
 8004864:	0745      	lsls	r5, r0, #29
 8004866:	f140 80a5 	bpl.w	80049b4 <HAL_ADC_ConfigChannel+0x1a0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800486a:	6890      	ldr	r0, [r2, #8]
 800486c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800486e:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004870:	07e4      	lsls	r4, r4, #31
 8004872:	d53b      	bpl.n	80048ec <HAL_ADC_ConfigChannel+0xd8>
 8004874:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004876:	49c2      	ldr	r1, [pc, #776]	; (8004b80 <HAL_ADC_ConfigChannel+0x36c>)
 8004878:	420c      	tst	r4, r1
 800487a:	d02c      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800487c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004880:	f000 8121 	beq.w	8004ac6 <HAL_ADC_ConfigChannel+0x2b2>
 8004884:	4dbf      	ldr	r5, [pc, #764]	; (8004b84 <HAL_ADC_ConfigChannel+0x370>)
 8004886:	49c0      	ldr	r1, [pc, #768]	; (8004b88 <HAL_ADC_ConfigChannel+0x374>)
 8004888:	48c0      	ldr	r0, [pc, #768]	; (8004b8c <HAL_ADC_ConfigChannel+0x378>)
 800488a:	42aa      	cmp	r2, r5
 800488c:	bf18      	it	ne
 800488e:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004890:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004892:	49bf      	ldr	r1, [pc, #764]	; (8004b90 <HAL_ADC_ConfigChannel+0x37c>)
 8004894:	428c      	cmp	r4, r1
 8004896:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 800489a:	f000 8119 	beq.w	8004ad0 <HAL_ADC_ConfigChannel+0x2bc>
 800489e:	49bd      	ldr	r1, [pc, #756]	; (8004b94 <HAL_ADC_ConfigChannel+0x380>)
 80048a0:	428c      	cmp	r4, r1
 80048a2:	f000 8115 	beq.w	8004ad0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048a6:	49bc      	ldr	r1, [pc, #752]	; (8004b98 <HAL_ADC_ConfigChannel+0x384>)
 80048a8:	428c      	cmp	r4, r1
 80048aa:	f040 814d 	bne.w	8004b48 <HAL_ADC_ConfigChannel+0x334>
 80048ae:	01c0      	lsls	r0, r0, #7
 80048b0:	d411      	bmi.n	80048d6 <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048b2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80048b6:	f000 822c 	beq.w	8004d12 <HAL_ADC_ConfigChannel+0x4fe>
 80048ba:	4cb2      	ldr	r4, [pc, #712]	; (8004b84 <HAL_ADC_ConfigChannel+0x370>)
 80048bc:	49b2      	ldr	r1, [pc, #712]	; (8004b88 <HAL_ADC_ConfigChannel+0x374>)
 80048be:	48b3      	ldr	r0, [pc, #716]	; (8004b8c <HAL_ADC_ConfigChannel+0x378>)
 80048c0:	42a2      	cmp	r2, r4
 80048c2:	bf0c      	ite	eq
 80048c4:	460a      	moveq	r2, r1
 80048c6:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80048c8:	6891      	ldr	r1, [r2, #8]
 80048ca:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80048ce:	430d      	orrs	r5, r1
 80048d0:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 80048d4:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d6:	2000      	movs	r0, #0
}
 80048d8:	e003      	b.n	80048e2 <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048dc:	f042 0220 	orr.w	r2, r2, #32
 80048e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80048e8:	b003      	add	sp, #12
 80048ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048ec:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80048ee:	4cab      	ldr	r4, [pc, #684]	; (8004b9c <HAL_ADC_ConfigChannel+0x388>)
 80048f0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048f4:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8004bb0 <HAL_ADC_ConfigChannel+0x39c>
 80048f8:	f006 0718 	and.w	r7, r6, #24
 80048fc:	40fc      	lsrs	r4, r7
 80048fe:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8004902:	4004      	ands	r4, r0
 8004904:	ea25 0507 	bic.w	r5, r5, r7
 8004908:	432c      	orrs	r4, r5
 800490a:	4566      	cmp	r6, ip
 800490c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004910:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004912:	d1b0      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004914:	2f00      	cmp	r7, #0
 8004916:	f000 8104 	beq.w	8004b22 <HAL_ADC_ConfigChannel+0x30e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800491e:	2c00      	cmp	r4, #0
 8004920:	f000 819c 	beq.w	8004c5c <HAL_ADC_ConfigChannel+0x448>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004924:	fab4 f484 	clz	r4, r4
 8004928:	3401      	adds	r4, #1
 800492a:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800492e:	2c09      	cmp	r4, #9
 8004930:	f240 8194 	bls.w	8004c5c <HAL_ADC_ConfigChannel+0x448>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004934:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004938:	2d00      	cmp	r5, #0
 800493a:	f000 81f0 	beq.w	8004d1e <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 800493e:	fab5 f585 	clz	r5, r5
 8004942:	3501      	adds	r5, #1
 8004944:	06ad      	lsls	r5, r5, #26
 8004946:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800494e:	2c00      	cmp	r4, #0
 8004950:	f000 81e3 	beq.w	8004d1a <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8004954:	fab4 f484 	clz	r4, r4
 8004958:	3401      	adds	r4, #1
 800495a:	f004 041f 	and.w	r4, r4, #31
 800495e:	2601      	movs	r6, #1
 8004960:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004964:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800496a:	2800      	cmp	r0, #0
 800496c:	f000 81d3 	beq.w	8004d16 <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 8004970:	fab0 f480 	clz	r4, r0
 8004974:	3401      	adds	r4, #1
 8004976:	f004 041f 	and.w	r4, r4, #31
 800497a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800497e:	f1a4 001e 	sub.w	r0, r4, #30
 8004982:	0500      	lsls	r0, r0, #20
 8004984:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004988:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800498a:	0dc7      	lsrs	r7, r0, #23
 800498c:	f007 0704 	and.w	r7, r7, #4
 8004990:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004994:	688e      	ldr	r6, [r1, #8]
 8004996:	597c      	ldr	r4, [r7, r5]
 8004998:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800499c:	f04f 0c07 	mov.w	ip, #7
 80049a0:	fa0c fc00 	lsl.w	ip, ip, r0
 80049a4:	ea24 040c 	bic.w	r4, r4, ip
 80049a8:	fa06 f000 	lsl.w	r0, r6, r0
 80049ac:	4320      	orrs	r0, r4
 80049ae:	5178      	str	r0, [r7, r5]
 80049b0:	680c      	ldr	r4, [r1, #0]
}
 80049b2:	e760      	b.n	8004876 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049b4:	6890      	ldr	r0, [r2, #8]
 80049b6:	f010 0008 	ands.w	r0, r0, #8
 80049ba:	f040 8082 	bne.w	8004ac2 <HAL_ADC_ConfigChannel+0x2ae>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80049be:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80049c0:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80049c2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80049c6:	f000 80f7 	beq.w	8004bb8 <HAL_ADC_ConfigChannel+0x3a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049ca:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 80049ce:	f00c 0c04 	and.w	ip, ip, #4
 80049d2:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80049d6:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80049da:	f85c 5007 	ldr.w	r5, [ip, r7]
 80049de:	f04f 0e07 	mov.w	lr, #7
 80049e2:	fa0e fe06 	lsl.w	lr, lr, r6
 80049e6:	40b4      	lsls	r4, r6
 80049e8:	ea25 050e 	bic.w	r5, r5, lr
 80049ec:	432c      	orrs	r4, r5
 80049ee:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049f2:	6954      	ldr	r4, [r2, #20]
 80049f4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80049f8:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049fa:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049fe:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a00:	f1bc 0f04 	cmp.w	ip, #4
 8004a04:	d02e      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0x250>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a06:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8004a0a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004bb4 <HAL_ADC_ConfigChannel+0x3a0>
 8004a0e:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8004a12:	680f      	ldr	r7, [r1, #0]
 8004a14:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a18:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004a1c:	694d      	ldr	r5, [r1, #20]
 8004a1e:	0076      	lsls	r6, r6, #1
 8004a20:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8004a24:	40b5      	lsls	r5, r6
 8004a26:	ea47 070e 	orr.w	r7, r7, lr
 8004a2a:	433d      	orrs	r5, r7
 8004a2c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8004a30:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a34:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004a36:	698e      	ldr	r6, [r1, #24]
 8004a38:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8004a3c:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8004a40:	4335      	orrs	r5, r6
 8004a42:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004a46:	690e      	ldr	r6, [r1, #16]
 8004a48:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8004a4a:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8004a4e:	2f01      	cmp	r7, #1
 8004a50:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004a54:	bf08      	it	eq
 8004a56:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8004a5a:	4328      	orrs	r0, r5
 8004a5c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8004a60:	6808      	ldr	r0, [r1, #0]
}
 8004a62:	e704      	b.n	800486e <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a64:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a66:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004a68:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004a6a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a6e:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a72:	2d00      	cmp	r5, #0
 8004a74:	f040 80b4 	bne.w	8004be0 <HAL_ADC_ConfigChannel+0x3cc>
 8004a78:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a7c:	42ac      	cmp	r4, r5
 8004a7e:	f000 8111 	beq.w	8004ca4 <HAL_ADC_ConfigChannel+0x490>
 8004a82:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004a84:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a86:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a8a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004a8e:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8004a92:	42ae      	cmp	r6, r5
 8004a94:	f000 812b 	beq.w	8004cee <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a98:	68a6      	ldr	r6, [r4, #8]
 8004a9a:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a9c:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aa0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004aa4:	42ae      	cmp	r6, r5
 8004aa6:	f000 8111 	beq.w	8004ccc <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004aaa:	68e6      	ldr	r6, [r4, #12]
 8004aac:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aae:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ab0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004ab4:	42b5      	cmp	r5, r6
 8004ab6:	f47f aeda 	bne.w	800486e <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ac0:	6020      	str	r0, [r4, #0]
 8004ac2:	6808      	ldr	r0, [r1, #0]
}
 8004ac4:	e6d3      	b.n	800486e <HAL_ADC_ConfigChannel+0x5a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ac6:	4930      	ldr	r1, [pc, #192]	; (8004b88 <HAL_ADC_ConfigChannel+0x374>)
 8004ac8:	e6e2      	b.n	8004890 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8004aca:	2002      	movs	r0, #2
}
 8004acc:	b003      	add	sp, #12
 8004ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ad0:	0201      	lsls	r1, r0, #8
 8004ad2:	f53f af00 	bmi.w	80048d6 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ad6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004ada:	d033      	beq.n	8004b44 <HAL_ADC_ConfigChannel+0x330>
 8004adc:	4930      	ldr	r1, [pc, #192]	; (8004ba0 <HAL_ADC_ConfigChannel+0x38c>)
 8004ade:	428a      	cmp	r2, r1
 8004ae0:	f47f aef9 	bne.w	80048d6 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae4:	4829      	ldr	r0, [pc, #164]	; (8004b8c <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ae6:	4a2f      	ldr	r2, [pc, #188]	; (8004ba4 <HAL_ADC_ConfigChannel+0x390>)
 8004ae8:	4c2f      	ldr	r4, [pc, #188]	; (8004ba8 <HAL_ADC_ConfigChannel+0x394>)
 8004aea:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004aec:	6881      	ldr	r1, [r0, #8]
 8004aee:	0992      	lsrs	r2, r2, #6
 8004af0:	fba4 4202 	umull	r4, r2, r4, r2
 8004af4:	0992      	lsrs	r2, r2, #6
 8004af6:	3201      	adds	r2, #1
 8004af8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004afc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004b00:	430d      	orrs	r5, r1
 8004b02:	0092      	lsls	r2, r2, #2
 8004b04:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 8004b08:	6085      	str	r5, [r0, #8]
 8004b0a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004b0c:	9a01      	ldr	r2, [sp, #4]
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	f43f aee1 	beq.w	80048d6 <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 8004b14:	9a01      	ldr	r2, [sp, #4]
 8004b16:	3a01      	subs	r2, #1
 8004b18:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004b1a:	9a01      	ldr	r2, [sp, #4]
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	d1f9      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x300>
 8004b20:	e6d9      	b.n	80048d6 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b22:	0e80      	lsrs	r0, r0, #26
 8004b24:	1c44      	adds	r4, r0, #1
 8004b26:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b2a:	2e09      	cmp	r6, #9
 8004b2c:	f200 8088 	bhi.w	8004c40 <HAL_ADC_ConfigChannel+0x42c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b30:	06a5      	lsls	r5, r4, #26
 8004b32:	2401      	movs	r4, #1
 8004b34:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004b38:	40b4      	lsls	r4, r6
 8004b3a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004b3e:	4325      	orrs	r5, r4
 8004b40:	0500      	lsls	r0, r0, #20
 8004b42:	e721      	b.n	8004988 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b44:	4810      	ldr	r0, [pc, #64]	; (8004b88 <HAL_ADC_ConfigChannel+0x374>)
 8004b46:	e7ce      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b48:	4918      	ldr	r1, [pc, #96]	; (8004bac <HAL_ADC_ConfigChannel+0x398>)
 8004b4a:	428c      	cmp	r4, r1
 8004b4c:	f47f aec3 	bne.w	80048d6 <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b50:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004b54:	f47f aebf 	bne.w	80048d6 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b58:	490a      	ldr	r1, [pc, #40]	; (8004b84 <HAL_ADC_ConfigChannel+0x370>)
 8004b5a:	428a      	cmp	r2, r1
 8004b5c:	f43f aebb 	beq.w	80048d6 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b60:	4c0a      	ldr	r4, [pc, #40]	; (8004b8c <HAL_ADC_ConfigChannel+0x378>)
 8004b62:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8004b66:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004b6a:	bf18      	it	ne
 8004b6c:	4621      	movne	r1, r4
 8004b6e:	688a      	ldr	r2, [r1, #8]
 8004b70:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004b74:	432a      	orrs	r2, r5
 8004b76:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004b7a:	608a      	str	r2, [r1, #8]
}
 8004b7c:	e6b1      	b.n	80048e2 <HAL_ADC_ConfigChannel+0xce>
 8004b7e:	bf00      	nop
 8004b80:	80080000 	.word	0x80080000
 8004b84:	50000100 	.word	0x50000100
 8004b88:	50000300 	.word	0x50000300
 8004b8c:	50000700 	.word	0x50000700
 8004b90:	c3210000 	.word	0xc3210000
 8004b94:	90c00010 	.word	0x90c00010
 8004b98:	c7520000 	.word	0xc7520000
 8004b9c:	0007ffff 	.word	0x0007ffff
 8004ba0:	50000600 	.word	0x50000600
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	053e2d63 	.word	0x053e2d63
 8004bac:	cb840000 	.word	0xcb840000
 8004bb0:	407f0000 	.word	0x407f0000
 8004bb4:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bb8:	0df5      	lsrs	r5, r6, #23
 8004bba:	f102 0414 	add.w	r4, r2, #20
 8004bbe:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8004bc2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004bc6:	592f      	ldr	r7, [r5, r4]
 8004bc8:	f04f 0c07 	mov.w	ip, #7
 8004bcc:	fa0c f606 	lsl.w	r6, ip, r6
 8004bd0:	ea27 0606 	bic.w	r6, r7, r6
 8004bd4:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004bd6:	6954      	ldr	r4, [r2, #20]
 8004bd8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004bdc:	6154      	str	r4, [r2, #20]
}
 8004bde:	e70c      	b.n	80049fa <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004be4:	b11d      	cbz	r5, 8004bee <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8004be6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bea:	42ac      	cmp	r4, r5
 8004bec:	d05a      	beq.n	8004ca4 <HAL_ADC_ConfigChannel+0x490>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004bee:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004bf0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bf2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bf6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004bfa:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004c02:	b11d      	cbz	r5, 8004c0c <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8004c04:	fab5 f585 	clz	r5, r5
 8004c08:	42ae      	cmp	r6, r5
 8004c0a:	d070      	beq.n	8004cee <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c0c:	68a5      	ldr	r5, [r4, #8]
 8004c0e:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c10:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c14:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c18:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004c1c:	b11d      	cbz	r5, 8004c26 <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 8004c1e:	fab5 f585 	clz	r5, r5
 8004c22:	42ae      	cmp	r6, r5
 8004c24:	d052      	beq.n	8004ccc <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c26:	68e5      	ldr	r5, [r4, #12]
 8004c28:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c2a:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c2c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c30:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	f43f ae1a 	beq.w	800486e <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8004c3a:	fab5 f585 	clz	r5, r5
 8004c3e:	e739      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x2a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c40:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004c44:	06a5      	lsls	r5, r4, #26
 8004c46:	381e      	subs	r0, #30
 8004c48:	2401      	movs	r4, #1
 8004c4a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004c4e:	fa04 f606 	lsl.w	r6, r4, r6
 8004c52:	0500      	lsls	r0, r0, #20
 8004c54:	4335      	orrs	r5, r6
 8004c56:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004c5a:	e695      	b.n	8004988 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	d064      	beq.n	8004d2e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004c64:	fab5 f585 	clz	r5, r5
 8004c68:	3501      	adds	r5, #1
 8004c6a:	06ad      	lsls	r5, r5, #26
 8004c6c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004c74:	2c00      	cmp	r4, #0
 8004c76:	d058      	beq.n	8004d2a <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8004c78:	fab4 f484 	clz	r4, r4
 8004c7c:	3401      	adds	r4, #1
 8004c7e:	f004 041f 	and.w	r4, r4, #31
 8004c82:	2601      	movs	r6, #1
 8004c84:	fa06 f404 	lsl.w	r4, r6, r4
 8004c88:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d048      	beq.n	8004d24 <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 8004c92:	fab0 f480 	clz	r4, r0
 8004c96:	3401      	adds	r4, #1
 8004c98:	f004 041f 	and.w	r4, r4, #31
 8004c9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004ca0:	0520      	lsls	r0, r4, #20
 8004ca2:	e671      	b.n	8004988 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 8004ca4:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004ca6:	4614      	mov	r4, r2
 8004ca8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004cac:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cb0:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cb2:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8004cb4:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8004cb6:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cba:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cbe:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	d19b      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x3ea>
 8004cc6:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004cca:	e6e2      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004cd2:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cd4:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cd6:	68e5      	ldr	r5, [r4, #12]
 8004cd8:	68e6      	ldr	r6, [r4, #12]
 8004cda:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cde:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ce2:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ce4:	2d00      	cmp	r5, #0
 8004ce6:	d1a3      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x41c>
 8004ce8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004cec:	e6e2      	b.n	8004ab4 <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(*preg,
 8004cee:	6838      	ldr	r0, [r7, #0]
 8004cf0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004cf4:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cf6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cf8:	68a5      	ldr	r5, [r4, #8]
 8004cfa:	68a6      	ldr	r6, [r4, #8]
 8004cfc:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d00:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d04:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	d185      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x404>
 8004d0c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004d10:	e6c8      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x290>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_ADC_ConfigChannel+0x520>)
 8004d14:	e5d8      	b.n	80048c8 <HAL_ADC_ConfigChannel+0xb4>
 8004d16:	4808      	ldr	r0, [pc, #32]	; (8004d38 <HAL_ADC_ConfigChannel+0x524>)
 8004d18:	e636      	b.n	8004988 <HAL_ADC_ConfigChannel+0x174>
 8004d1a:	2402      	movs	r4, #2
 8004d1c:	e622      	b.n	8004964 <HAL_ADC_ConfigChannel+0x150>
 8004d1e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004d22:	e612      	b.n	800494a <HAL_ADC_ConfigChannel+0x136>
 8004d24:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004d28:	e62e      	b.n	8004988 <HAL_ADC_ConfigChannel+0x174>
 8004d2a:	2402      	movs	r4, #2
 8004d2c:	e7ac      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x474>
 8004d2e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004d32:	e79d      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x45c>
 8004d34:	50000300 	.word	0x50000300
 8004d38:	fe500000 	.word	0xfe500000

08004d3c <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d3c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	07d1      	lsls	r1, r2, #31
 8004d42:	d501      	bpl.n	8004d48 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d44:	2000      	movs	r0, #0
}
 8004d46:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d48:	6899      	ldr	r1, [r3, #8]
 8004d4a:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <ADC_Enable+0x74>)
 8004d4c:	4211      	tst	r1, r2
{
 8004d4e:	b570      	push	{r4, r5, r6, lr}
 8004d50:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d52:	d122      	bne.n	8004d9a <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	4d17      	ldr	r5, [pc, #92]	; (8004db4 <ADC_Enable+0x78>)
 8004d58:	402a      	ands	r2, r5
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004d60:	f7ff fc14 	bl	800458c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d64:	6833      	ldr	r3, [r6, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 8004d6a:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d6c:	d413      	bmi.n	8004d96 <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d6e:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d70:	07d0      	lsls	r0, r2, #31
 8004d72:	d404      	bmi.n	8004d7e <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	402a      	ands	r2, r5
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d7e:	f7ff fc05 	bl	800458c <HAL_GetTick>
 8004d82:	1b03      	subs	r3, r0, r4
 8004d84:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d86:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d88:	d902      	bls.n	8004d90 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	07d1      	lsls	r1, r2, #31
 8004d8e:	d504      	bpl.n	8004d9a <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	07d2      	lsls	r2, r2, #31
 8004d94:	d5eb      	bpl.n	8004d6e <ADC_Enable+0x32>
  return HAL_OK;
 8004d96:	2000      	movs	r0, #0
}
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004d9c:	f043 0310 	orr.w	r3, r3, #16
 8004da0:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da2:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8004daa:	2001      	movs	r0, #1
}
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	bf00      	nop
 8004db0:	8000003f 	.word	0x8000003f
 8004db4:	7fffffc0 	.word	0x7fffffc0

08004db8 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004db8:	6803      	ldr	r3, [r0, #0]
 8004dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8004dbe:	b570      	push	{r4, r5, r6, lr}
 8004dc0:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dc2:	d04d      	beq.n	8004e60 <HAL_ADC_Start+0xa8>
 8004dc4:	483a      	ldr	r0, [pc, #232]	; (8004eb0 <HAL_ADC_Start+0xf8>)
 8004dc6:	4a3b      	ldr	r2, [pc, #236]	; (8004eb4 <HAL_ADC_Start+0xfc>)
 8004dc8:	493b      	ldr	r1, [pc, #236]	; (8004eb8 <HAL_ADC_Start+0x100>)
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	bf18      	it	ne
 8004dce:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004dd0:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dd2:	689d      	ldr	r5, [r3, #8]
 8004dd4:	f015 0504 	ands.w	r5, r5, #4
 8004dd8:	d140      	bne.n	8004e5c <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8004dda:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d03c      	beq.n	8004e5c <HAL_ADC_Start+0xa4>
 8004de2:	2301      	movs	r3, #1
 8004de4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8004de8:	4620      	mov	r0, r4
 8004dea:	f7ff ffa7 	bl	8004d3c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d138      	bne.n	8004e64 <HAL_ADC_Start+0xac>
      ADC_STATE_CLR_SET(hadc->State,
 8004df2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	492e      	ldr	r1, [pc, #184]	; (8004eb0 <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 8004df8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e04:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004e06:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 8004e0a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e0c:	d045      	beq.n	8004e9a <HAL_ADC_Start+0xe2>
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_ADC_Start+0x104>)
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d047      	beq.n	8004ea4 <HAL_ADC_Start+0xec>
 8004e14:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e1c:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e20:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e24:	bf1c      	itt	ne
 8004e26:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8004e28:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8004e2c:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e2e:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 8004e30:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e32:	428a      	cmp	r2, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e34:	6015      	str	r5, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004e36:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e3a:	d01c      	beq.n	8004e76 <HAL_ADC_Start+0xbe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e3c:	2e09      	cmp	r6, #9
 8004e3e:	d914      	bls.n	8004e6a <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e46:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e48:	68cb      	ldr	r3, [r1, #12]
 8004e4a:	019b      	lsls	r3, r3, #6
 8004e4c:	d505      	bpl.n	8004e5a <HAL_ADC_Start+0xa2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e58:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8004e5c:	2002      	movs	r0, #2
}
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <HAL_ADC_Start+0xfc>)
 8004e62:	e7b5      	b.n	8004dd0 <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 8004e64:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e6a:	f240 2321 	movw	r3, #545	; 0x221
 8004e6e:	fa23 f606 	lsr.w	r6, r3, r6
 8004e72:	07f5      	lsls	r5, r6, #31
 8004e74:	d5e4      	bpl.n	8004e40 <HAL_ADC_Start+0x88>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e76:	68d3      	ldr	r3, [r2, #12]
 8004e78:	0199      	lsls	r1, r3, #6
 8004e7a:	d505      	bpl.n	8004e88 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e86:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8004e88:	6893      	ldr	r3, [r2, #8]
 8004e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	6093      	str	r3, [r2, #8]
}
 8004e98:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e9a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d1bd      	bne.n	8004e1e <HAL_ADC_Start+0x66>
 8004ea2:	e7b8      	b.n	8004e16 <HAL_ADC_Start+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ea4:	f501 7140 	add.w	r1, r1, #768	; 0x300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ea8:	2e00      	cmp	r6, #0
 8004eaa:	d1b8      	bne.n	8004e1e <HAL_ADC_Start+0x66>
 8004eac:	e7b3      	b.n	8004e16 <HAL_ADC_Start+0x5e>
 8004eae:	bf00      	nop
 8004eb0:	50000100 	.word	0x50000100
 8004eb4:	50000300 	.word	0x50000300
 8004eb8:	50000700 	.word	0x50000700
 8004ebc:	50000500 	.word	0x50000500

08004ec0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ec0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ec6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8004ec8:	2b01      	cmp	r3, #1
{
 8004eca:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004ecc:	d04d      	beq.n	8004f6a <HAL_ADCEx_MultiModeConfigChannel+0xaa>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ece:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004ed0:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8004ed2:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ed4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004ed8:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004eda:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004ede:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ee0:	d00c      	beq.n	8004efc <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8004ee2:	4d4a      	ldr	r5, [pc, #296]	; (800500c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004ee4:	42aa      	cmp	r2, r5
 8004ee6:	d03e      	beq.n	8004f66 <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004eea:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eee:	f042 0220 	orr.w	r2, r2, #32
 8004ef2:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	b01c      	add	sp, #112	; 0x70
 8004ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8004efa:	4770      	bx	lr
 8004efc:	4b44      	ldr	r3, [pc, #272]	; (8005010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	075b      	lsls	r3, r3, #29
 8004f02:	d50c      	bpl.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8004f04:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f06:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004f08:	f043 0320 	orr.w	r3, r3, #32
 8004f0c:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8004f10:	2200      	movs	r2, #0
 8004f12:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	b01c      	add	sp, #112	; 0x70
 8004f1a:	bcf0      	pop	{r4, r5, r6, r7}
 8004f1c:	4770      	bx	lr
 8004f1e:	6893      	ldr	r3, [r2, #8]
 8004f20:	075c      	lsls	r4, r3, #29
 8004f22:	d4f0      	bmi.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f24:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004f28:	d024      	beq.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8004f2a:	4b39      	ldr	r3, [pc, #228]	; (8005010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d021      	beq.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f30:	2e00      	cmp	r6, #0
 8004f32:	d153      	bne.n	8004fdc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f34:	4a37      	ldr	r2, [pc, #220]	; (8005014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f36:	4c35      	ldr	r4, [pc, #212]	; (800500c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004f38:	6893      	ldr	r3, [r2, #8]
 8004f3a:	4d37      	ldr	r5, [pc, #220]	; (8005018 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004f3c:	4937      	ldr	r1, [pc, #220]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004f42:	6093      	str	r3, [r2, #8]
 8004f44:	68a4      	ldr	r4, [r4, #8]
 8004f46:	68ab      	ldr	r3, [r5, #8]
 8004f48:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f4a:	4323      	orrs	r3, r4
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	b37b      	cbz	r3, 8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f56:	6893      	ldr	r3, [r2, #8]
 8004f58:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f5c:	f023 030f 	bic.w	r3, r3, #15
 8004f60:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e7d4      	b.n	8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8004f66:	4b2c      	ldr	r3, [pc, #176]	; (8005018 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004f68:	e7c9      	b.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8004f6a:	2302      	movs	r3, #2
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	b01c      	add	sp, #112	; 0x70
 8004f70:	bcf0      	pop	{r4, r5, r6, r7}
 8004f72:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f74:	b30e      	cbz	r6, 8004fba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f76:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8004f78:	684d      	ldr	r5, [r1, #4]
 8004f7a:	6893      	ldr	r3, [r2, #8]
 8004f7c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8004f80:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004f84:	432b      	orrs	r3, r5
 8004f86:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8004f8a:	6093      	str	r3, [r2, #8]
 8004f8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004f90:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f92:	6894      	ldr	r4, [r2, #8]
 8004f94:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f96:	4323      	orrs	r3, r4
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	b143      	cbz	r3, 8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        MODIFY_REG(tmpADC_Common->CCR,
 8004fa4:	6894      	ldr	r4, [r2, #8]
 8004fa6:	688b      	ldr	r3, [r1, #8]
 8004fa8:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8004fac:	431e      	orrs	r6, r3
 8004fae:	f021 010f 	bic.w	r1, r1, #15
 8004fb2:	430e      	orrs	r6, r1
 8004fb4:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e7aa      	b.n	8004f10 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fba:	4a19      	ldr	r2, [pc, #100]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8004fbc:	6893      	ldr	r3, [r2, #8]
 8004fbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004fc2:	6093      	str	r3, [r2, #8]
 8004fc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004fca:	6891      	ldr	r1, [r2, #8]
 8004fcc:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	e7bb      	b.n	8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004fde:	684d      	ldr	r5, [r1, #4]
 8004fe0:	6893      	ldr	r3, [r2, #8]
 8004fe2:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8004fe6:	4f0c      	ldr	r7, [pc, #48]	; (8005018 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004fe8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004fec:	432b      	orrs	r3, r5
 8004fee:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8004ff2:	4d06      	ldr	r5, [pc, #24]	; (800500c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004ff4:	6093      	str	r3, [r2, #8]
 8004ff6:	4c09      	ldr	r4, [pc, #36]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004ff8:	68ad      	ldr	r5, [r5, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	68a4      	ldr	r4, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ffe:	432b      	orrs	r3, r5
 8005000:	4323      	orrs	r3, r4
 8005002:	43db      	mvns	r3, r3
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	e7cb      	b.n	8004fa2 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 800500a:	bf00      	nop
 800500c:	50000400 	.word	0x50000400
 8005010:	50000100 	.word	0x50000100
 8005014:	50000700 	.word	0x50000700
 8005018:	50000500 	.word	0x50000500
 800501c:	50000600 	.word	0x50000600
 8005020:	50000300 	.word	0x50000300

08005024 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005024:	4908      	ldr	r1, [pc, #32]	; (8005048 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8005026:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005028:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800502a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800502c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005030:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005032:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800503c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005040:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8005044:	60cb      	str	r3, [r1, #12]
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <HAL_NVIC_SetPriority+0x68>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005054:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005056:	f1c3 0507 	rsb	r5, r3, #7
 800505a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005060:	bf28      	it	cs
 8005062:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005064:	2c06      	cmp	r4, #6
 8005066:	d919      	bls.n	800509c <HAL_NVIC_SetPriority+0x50>
 8005068:	3b03      	subs	r3, #3
 800506a:	f04f 34ff 	mov.w	r4, #4294967295
 800506e:	409c      	lsls	r4, r3
 8005070:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005074:	f04f 34ff 	mov.w	r4, #4294967295
 8005078:	40ac      	lsls	r4, r5
 800507a:	ea21 0104 	bic.w	r1, r1, r4
 800507e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005080:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005082:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005086:	db0c      	blt.n	80050a2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005088:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800508c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005090:	0109      	lsls	r1, r1, #4
 8005092:	b2c9      	uxtb	r1, r1
 8005094:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005098:	bc30      	pop	{r4, r5}
 800509a:	4770      	bx	lr
 800509c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800509e:	4613      	mov	r3, r2
 80050a0:	e7e8      	b.n	8005074 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_NVIC_SetPriority+0x6c>)
 80050a4:	f000 000f 	and.w	r0, r0, #15
 80050a8:	0109      	lsls	r1, r1, #4
 80050aa:	4403      	add	r3, r0
 80050ac:	b2c9      	uxtb	r1, r1
 80050ae:	7619      	strb	r1, [r3, #24]
 80050b0:	bc30      	pop	{r4, r5}
 80050b2:	4770      	bx	lr
 80050b4:	e000ed00 	.word	0xe000ed00
 80050b8:	e000ecfc 	.word	0xe000ecfc

080050bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80050bc:	2800      	cmp	r0, #0
 80050be:	db07      	blt.n	80050d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050c0:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_NVIC_EnableIRQ+0x18>)
 80050c2:	f000 011f 	and.w	r1, r0, #31
 80050c6:	2301      	movs	r3, #1
 80050c8:	0940      	lsrs	r0, r0, #5
 80050ca:	408b      	lsls	r3, r1
 80050cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	e000e100 	.word	0xe000e100

080050d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d8:	3801      	subs	r0, #1
 80050da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80050de:	d20e      	bcs.n	80050fe <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e4:	4c08      	ldr	r4, [pc, #32]	; (8005108 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e8:	20f0      	movs	r0, #240	; 0xf0
 80050ea:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050f0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f4:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80050f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050fa:	6019      	str	r1, [r3, #0]
 80050fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80050fe:	2001      	movs	r0, #1
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	e000e010 	.word	0xe000e010
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800510c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005110:	2a02      	cmp	r2, #2
{
 8005112:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005114:	d009      	beq.n	800512a <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005116:	2204      	movs	r2, #4
 8005118:	63c2      	str	r2, [r0, #60]	; 0x3c
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800511a:	2101      	movs	r1, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800511c:	2200      	movs	r2, #0
    status = HAL_ERROR;
 800511e:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005120:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8005128:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800512a:	6802      	ldr	r2, [r0, #0]
{
 800512c:	b470      	push	{r4, r5, r6}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800512e:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005130:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005132:	6cde      	ldr	r6, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005134:	f020 000e 	bic.w	r0, r0, #14
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005138:	e9d3 5110 	ldrd	r5, r1, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800513c:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005144:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8005146:	6814      	ldr	r4, [r2, #0]
     if (hdma->DMAmuxRequestGen != 0U)
 8005148:	6d58      	ldr	r0, [r3, #84]	; 0x54
     __HAL_DMA_DISABLE(hdma);
 800514a:	f024 0401 	bic.w	r4, r4, #1
 800514e:	6014      	str	r4, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005150:	f001 011f 	and.w	r1, r1, #31
 8005154:	2201      	movs	r2, #1
 8005156:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005158:	6d19      	ldr	r1, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800515a:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800515c:	6071      	str	r1, [r6, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800515e:	b138      	cbz	r0, 8005170 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005160:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005162:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800516a:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516c:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800516e:	604c      	str	r4, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8005170:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005172:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005174:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800517c:	bc70      	pop	{r4, r5, r6}
 800517e:	4770      	bx	lr

08005180 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005180:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005184:	2a02      	cmp	r2, #2
{
 8005186:	4603      	mov	r3, r0
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005188:	d009      	beq.n	800519e <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800518a:	2201      	movs	r2, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800518c:	2004      	movs	r0, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518e:	2100      	movs	r1, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005190:	63d8      	str	r0, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005192:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005196:	4610      	mov	r0, r2
    hdma->State = HAL_DMA_STATE_READY;
 8005198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800519c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800519e:	6802      	ldr	r2, [r0, #0]
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051a2:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051a4:	6810      	ldr	r0, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051a8:	f020 000e 	bic.w	r0, r0, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ac:	e9d3 4110 	ldrd	r4, r1, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b0:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80051b2:	6810      	ldr	r0, [r2, #0]
 80051b4:	f020 0001 	bic.w	r0, r0, #1
 80051b8:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051ba:	682a      	ldr	r2, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80051bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051c4:	f001 011f 	and.w	r1, r1, #31
 80051c8:	2201      	movs	r2, #1
 80051ca:	408a      	lsls	r2, r1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ce:	6062      	str	r2, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051d0:	6071      	str	r1, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80051d2:	b130      	cbz	r0, 80051e2 <HAL_DMA_Abort_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051d4:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d6:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051de:	6002      	str	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e0:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 80051e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80051e4:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80051e6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80051e8:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80051ec:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80051f0:	b11a      	cbz	r2, 80051fa <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80051f2:	4618      	mov	r0, r3
 80051f4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	4620      	mov	r0, r4
}
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	4610      	mov	r0, r2
}
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
 80051fe:	bf00      	nop

08005200 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005200:	2800      	cmp	r0, #0
 8005202:	f000 8143 	beq.w	800548c <HAL_FDCAN_Init+0x28c>
{
 8005206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800520a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800520e:	4604      	mov	r4, r0
 8005210:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005214:	2b00      	cmp	r3, #0
 8005216:	d073      	beq.n	8005300 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	6993      	ldr	r3, [r2, #24]
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005222:	f7ff f9b3 	bl	800458c <HAL_GetTick>
 8005226:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005228:	e004      	b.n	8005234 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800522a:	f7ff f9af 	bl	800458c <HAL_GetTick>
 800522e:	1b43      	subs	r3, r0, r5
 8005230:	2b0a      	cmp	r3, #10
 8005232:	d85b      	bhi.n	80052ec <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	0712      	lsls	r2, r2, #28
 800523a:	d4f6      	bmi.n	800522a <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005244:	f7ff f9a2 	bl	800458c <HAL_GetTick>
 8005248:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800524a:	e004      	b.n	8005256 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800524c:	f7ff f99e 	bl	800458c <HAL_GetTick>
 8005250:	1b40      	subs	r0, r0, r5
 8005252:	280a      	cmp	r0, #10
 8005254:	d84a      	bhi.n	80052ec <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	6993      	ldr	r3, [r2, #24]
 800525a:	07db      	lsls	r3, r3, #31
 800525c:	d5f6      	bpl.n	800524c <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800525e:	6993      	ldr	r3, [r2, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005260:	4993      	ldr	r1, [pc, #588]	; (80054b0 <HAL_FDCAN_Init+0x2b0>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005262:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8005266:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005268:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 800526a:	f000 810b 	beq.w	8005484 <HAL_FDCAN_Init+0x284>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800526e:	7c23      	ldrb	r3, [r4, #16]
 8005270:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005272:	6993      	ldr	r3, [r2, #24]
 8005274:	bf0c      	ite	eq
 8005276:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800527a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800527e:	6193      	str	r3, [r2, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005280:	7c63      	ldrb	r3, [r4, #17]
 8005282:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005284:	6993      	ldr	r3, [r2, #24]
 8005286:	bf0c      	ite	eq
 8005288:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800528c:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8005290:	6193      	str	r3, [r2, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005292:	7ca3      	ldrb	r3, [r4, #18]
 8005294:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005296:	6993      	ldr	r3, [r2, #24]
 8005298:	bf0c      	ite	eq
 800529a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800529e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052a2:	6193      	str	r3, [r2, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80052a4:	6993      	ldr	r3, [r2, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80052a6:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	432b      	orrs	r3, r5
 80052b0:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80052b2:	6993      	ldr	r3, [r2, #24]
 80052b4:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 80052b8:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052ba:	6913      	ldr	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80052bc:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052be:	f023 0310 	bic.w	r3, r3, #16
 80052c2:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80052c4:	d021      	beq.n	800530a <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80052c6:	b321      	cbz	r1, 8005312 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80052c8:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80052ca:	6993      	ldr	r3, [r2, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80052cc:	f000 80ec 	beq.w	80054a8 <HAL_FDCAN_Init+0x2a8>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	6193      	str	r3, [r2, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052d6:	6913      	ldr	r3, [r2, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80052d8:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052da:	f043 0310 	orr.w	r3, r3, #16
 80052de:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80052e0:	d117      	bne.n	8005312 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80052e2:	6993      	ldr	r3, [r2, #24]
 80052e4:	f043 0320 	orr.w	r3, r3, #32
 80052e8:	6193      	str	r3, [r2, #24]
 80052ea:	e012      	b.n	8005312 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052ee:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052f6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80052fa:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005300:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005304:	f7fc fc70 	bl	8001be8 <HAL_FDCAN_MspInit>
 8005308:	e786      	b.n	8005218 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800530a:	6993      	ldr	r3, [r2, #24]
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005312:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005316:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005318:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800531a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800531c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800531e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005322:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005324:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005326:	4303      	orrs	r3, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005328:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800532a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800532e:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005332:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005334:	d10e      	bne.n	8005354 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005336:	e9d4 530b 	ldrd	r5, r3, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800533a:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800533e:	3b01      	subs	r3, #1
 8005340:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005342:	3d01      	subs	r5, #1
 8005344:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005348:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800534a:	4303      	orrs	r3, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800534c:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800534e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005352:	60d3      	str	r3, [r2, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005354:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005358:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800535a:	4956      	ldr	r1, [pc, #344]	; (80054b4 <HAL_FDCAN_Init+0x2b4>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800535c:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 800535e:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005360:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8005364:	f000 8094 	beq.w	8005490 <HAL_FDCAN_Init+0x290>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005368:	4d53      	ldr	r5, [pc, #332]	; (80054b8 <HAL_FDCAN_Init+0x2b8>)
 800536a:	4854      	ldr	r0, [pc, #336]	; (80054bc <HAL_FDCAN_Init+0x2bc>)
 800536c:	4b54      	ldr	r3, [pc, #336]	; (80054c0 <HAL_FDCAN_Init+0x2c0>)
 800536e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80054dc <HAL_FDCAN_Init+0x2dc>
 8005372:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80054e0 <HAL_FDCAN_Init+0x2e0>
 8005376:	4f53      	ldr	r7, [pc, #332]	; (80054c4 <HAL_FDCAN_Init+0x2c4>)
 8005378:	f8df c168 	ldr.w	ip, [pc, #360]	; 80054e4 <HAL_FDCAN_Init+0x2e4>
 800537c:	f8df e168 	ldr.w	lr, [pc, #360]	; 80054e8 <HAL_FDCAN_Init+0x2e8>
 8005380:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80054ec <HAL_FDCAN_Init+0x2ec>
 8005384:	4e50      	ldr	r6, [pc, #320]	; (80054c8 <HAL_FDCAN_Init+0x2c8>)
 8005386:	42aa      	cmp	r2, r5
 8005388:	f501 4186 	add.w	r1, r1, #17152	; 0x4300
 800538c:	f505 5561 	add.w	r5, r5, #14400	; 0x3840
 8005390:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8005394:	bf18      	it	ne
 8005396:	4607      	movne	r7, r0
 8005398:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800539c:	f100 00d8 	add.w	r0, r0, #216	; 0xd8
 80053a0:	bf18      	it	ne
 80053a2:	4698      	movne	r8, r3
 80053a4:	f1a3 03b0 	sub.w	r3, r3, #176	; 0xb0
 80053a8:	bf03      	ittte	eq
 80053aa:	46c6      	moveq	lr, r8
 80053ac:	46d4      	moveq	ip, sl
 80053ae:	4688      	moveq	r8, r1
 80053b0:	46a9      	movne	r9, r5
 80053b2:	f1a1 01b0 	sub.w	r1, r1, #176	; 0xb0
 80053b6:	bf1c      	itt	ne
 80053b8:	4606      	movne	r6, r0
 80053ba:	4619      	movne	r1, r3

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80053bc:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 80053c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80053c2:	6421      	str	r1, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80053c4:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 80053c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80053cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80053d0:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 80053d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80053d6:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80053da:	1e70      	subs	r0, r6, #1
 80053dc:	1a40      	subs	r0, r0, r1
 80053de:	f025 6970 	bic.w	r9, r5, #251658240	; 0xf000000
 80053e2:	0885      	lsrs	r5, r0, #2
 80053e4:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
 80053e8:	3501      	adds	r5, #1
 80053ea:	f101 0901 	add.w	r9, r1, #1
 80053ee:	454e      	cmp	r6, r9
 80053f0:	bf38      	it	cc
 80053f2:	2501      	movcc	r5, #1
 80053f4:	2817      	cmp	r0, #23
 80053f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80053fa:	e9c4 8e12 	strd	r8, lr, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80053fe:	e9c4 c714 	strd	ip, r7, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005402:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8005406:	d91a      	bls.n	800543e <HAL_FDCAN_Init+0x23e>
 8005408:	454e      	cmp	r6, r9
 800540a:	bf2c      	ite	cs
 800540c:	2200      	movcs	r2, #0
 800540e:	2201      	movcc	r2, #1
 8005410:	b9aa      	cbnz	r2, 800543e <HAL_FDCAN_Init+0x23e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005412:	460f      	mov	r7, r1
 8005414:	b10b      	cbz	r3, 800541a <HAL_FDCAN_Init+0x21a>
 8005416:	f847 2b04 	str.w	r2, [r7], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800541a:	1aed      	subs	r5, r5, r3
 800541c:	086a      	lsrs	r2, r5, #1
 800541e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005422:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005426:	2000      	movs	r0, #0
 8005428:	2100      	movs	r1, #0
 800542a:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800542e:	4293      	cmp	r3, r2
 8005430:	d1fb      	bne.n	800542a <HAL_FDCAN_Init+0x22a>
 8005432:	f025 0301 	bic.w	r3, r5, #1
 8005436:	429d      	cmp	r5, r3
 8005438:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800543c:	d01a      	beq.n	8005474 <HAL_FDCAN_Init+0x274>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800543e:	460a      	mov	r2, r1
 8005440:	2300      	movs	r3, #0
 8005442:	f842 3b04 	str.w	r3, [r2], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005446:	4296      	cmp	r6, r2
 8005448:	d914      	bls.n	8005474 <HAL_FDCAN_Init+0x274>
 800544a:	f101 0208 	add.w	r2, r1, #8
 800544e:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005450:	604b      	str	r3, [r1, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005452:	d90f      	bls.n	8005474 <HAL_FDCAN_Init+0x274>
 8005454:	f101 020c 	add.w	r2, r1, #12
 8005458:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800545a:	608b      	str	r3, [r1, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800545c:	d90a      	bls.n	8005474 <HAL_FDCAN_Init+0x274>
 800545e:	f101 0210 	add.w	r2, r1, #16
 8005462:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005464:	60cb      	str	r3, [r1, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005466:	d905      	bls.n	8005474 <HAL_FDCAN_Init+0x274>
 8005468:	f101 0214 	add.w	r2, r1, #20
 800546c:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800546e:	610b      	str	r3, [r1, #16]
 8005470:	bf88      	it	hi
 8005472:	614b      	strhi	r3, [r1, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8005474:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005476:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005478:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800547a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 800547e:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <HAL_FDCAN_Init+0x2cc>)
 8005486:	6861      	ldr	r1, [r4, #4]
 8005488:	6019      	str	r1, [r3, #0]
 800548a:	e6f0      	b.n	800526e <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 800548c:	2001      	movs	r0, #1
}
 800548e:	4770      	bx	lr
 8005490:	4f0f      	ldr	r7, [pc, #60]	; (80054d0 <HAL_FDCAN_Init+0x2d0>)
 8005492:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80054f0 <HAL_FDCAN_Init+0x2f0>
 8005496:	f8df e05c 	ldr.w	lr, [pc, #92]	; 80054f4 <HAL_FDCAN_Init+0x2f4>
 800549a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80054f8 <HAL_FDCAN_Init+0x2f8>
 800549e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80054fc <HAL_FDCAN_Init+0x2fc>
 80054a2:	4e0c      	ldr	r6, [pc, #48]	; (80054d4 <HAL_FDCAN_Init+0x2d4>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 80054a4:	490c      	ldr	r1, [pc, #48]	; (80054d8 <HAL_FDCAN_Init+0x2d8>)
 80054a6:	e789      	b.n	80053bc <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	6193      	str	r3, [r2, #24]
 80054ae:	e730      	b.n	8005312 <HAL_FDCAN_Init+0x112>
 80054b0:	40006400 	.word	0x40006400
 80054b4:	40006800 	.word	0x40006800
 80054b8:	40006c00 	.word	0x40006c00
 80054bc:	4000a678 	.word	0x4000a678
 80054c0:	4000a4b0 	.word	0x4000a4b0
 80054c4:	4000ad18 	.word	0x4000ad18
 80054c8:	4000adf0 	.word	0x4000adf0
 80054cc:	40006500 	.word	0x40006500
 80054d0:	4000a9c8 	.word	0x4000a9c8
 80054d4:	4000aaa0 	.word	0x4000aaa0
 80054d8:	4000a750 	.word	0x4000a750
 80054dc:	4000ac28 	.word	0x4000ac28
 80054e0:	4000ad00 	.word	0x4000ad00
 80054e4:	4000a660 	.word	0x4000a660
 80054e8:	4000a588 	.word	0x4000a588
 80054ec:	4000ab10 	.word	0x4000ab10
 80054f0:	4000a9b0 	.word	0x4000a9b0
 80054f4:	4000a8d8 	.word	0x4000a8d8
 80054f8:	4000a800 	.word	0x4000a800
 80054fc:	4000a7c0 	.word	0x4000a7c0

08005500 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005500:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005504:	3b01      	subs	r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d905      	bls.n	8005516 <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800550a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005512:	2001      	movs	r0, #1
}
 8005514:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005516:	680b      	ldr	r3, [r1, #0]
{
 8005518:	b470      	push	{r4, r5, r6}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800551a:	b983      	cbnz	r3, 800553e <HAL_FDCAN_ConfigFilter+0x3e>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800551c:	e9d1 6202 	ldrd	r6, r2, [r1, #8]
 8005520:	694d      	ldr	r5, [r1, #20]
      *FilterAddress = FilterElementW1;
 8005522:	6c04      	ldr	r4, [r0, #64]	; 0x40
                         (sFilterConfig->FilterID1 << 16U)    |
 8005524:	6908      	ldr	r0, [r1, #16]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005526:	6849      	ldr	r1, [r1, #4]
                         (sFilterConfig->FilterConfig << 27U) |
 8005528:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800552a:	ea42 7286 	orr.w	r2, r2, r6, lsl #30
 800552e:	432a      	orrs	r2, r5
 8005530:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      *FilterAddress = FilterElementW1;
 8005534:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    return HAL_OK;
 8005538:	4618      	mov	r0, r3
}
 800553a:	bc70      	pop	{r4, r5, r6}
 800553c:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800553e:	e9d1 6203 	ldrd	r6, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005542:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005544:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005546:	688d      	ldr	r5, [r1, #8]
 8005548:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800554a:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800554e:	ea42 7246 	orr.w	r2, r2, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005552:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
      *FilterAddress = FilterElementW1;
 8005556:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 800555a:	2000      	movs	r0, #0
}
 800555c:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 800555e:	604b      	str	r3, [r1, #4]
}
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop

08005564 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8005564:	b470      	push	{r4, r5, r6}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005566:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
 800556a:	2e01      	cmp	r6, #1
 800556c:	d006      	beq.n	800557c <HAL_FDCAN_ConfigGlobalFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800556e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005570:	f043 0304 	orr.w	r3, r3, #4
 8005574:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005576:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 8005578:	2001      	movs	r0, #1
}
 800557a:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800557c:	6806      	ldr	r6, [r0, #0]
 800557e:	4615      	mov	r5, r2
 8005580:	9a03      	ldr	r2, [sp, #12]
 8005582:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 8005586:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 800558a:	ea43 0285 	orr.w	r2, r3, r5, lsl #2
 800558e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8005592:	f020 033f 	bic.w	r3, r0, #63	; 0x3f
 8005596:	4319      	orrs	r1, r3
 8005598:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
    return HAL_OK;
 800559c:	2000      	movs	r0, #0
}
 800559e:	bc70      	pop	{r4, r5, r6}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop

080055a4 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80055a4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80055a8:	2a01      	cmp	r2, #1
{
 80055aa:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80055ac:	d005      	beq.n	80055ba <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80055ae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80055b0:	f042 0204 	orr.w	r2, r2, #4
 80055b4:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 80055b6:	2001      	movs	r0, #1
}
 80055b8:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055ba:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055c2:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055c4:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 80055cc:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055ce:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop

080055d4 <HAL_FDCAN_GetRxMessage>:
{
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80055d6:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 80055da:	2c02      	cmp	r4, #2
 80055dc:	d10c      	bne.n	80055f8 <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80055de:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80055e0:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80055e2:	d00f      	beq.n	8005604 <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80055e4:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 80055e8:	0724      	lsls	r4, r4, #28
 80055ea:	d15c      	bne.n	80056a6 <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80055ec:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80055ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f2:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 80055f4:	2001      	movs	r0, #1
}
 80055f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80055f8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80055fa:	f043 0308 	orr.w	r3, r3, #8
 80055fe:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005600:	2001      	movs	r0, #1
}
 8005602:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005604:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 8005608:	0725      	lsls	r5, r4, #28
 800560a:	d0ef      	beq.n	80055ec <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800560c:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005610:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005612:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005616:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800561a:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800561e:	683c      	ldr	r4, [r7, #0]
 8005620:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8005624:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005626:	2c00      	cmp	r4, #0
 8005628:	d14c      	bne.n	80056c4 <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800562a:	683c      	ldr	r4, [r7, #0]
 800562c:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8005630:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005632:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005634:	f8df c094 	ldr.w	ip, [pc, #148]	; 80056cc <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005638:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 800563c:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800563e:	683c      	ldr	r4, [r7, #0]
 8005640:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8005644:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005646:	88bc      	ldrh	r4, [r7, #4]
 8005648:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800564a:	687c      	ldr	r4, [r7, #4]
 800564c:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8005650:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005652:	687d      	ldr	r5, [r7, #4]
 8005654:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8005658:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800565a:	687d      	ldr	r5, [r7, #4]
 800565c:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8005660:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005662:	79fd      	ldrb	r5, [r7, #7]
 8005664:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005668:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800566a:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800566c:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800566e:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005672:	0fed      	lsrs	r5, r5, #31
 8005674:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005676:	b174      	cbz	r4, 8005696 <HAL_FDCAN_GetRxMessage+0xc2>
 8005678:	1e5d      	subs	r5, r3, #1
 800567a:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 800567c:	4623      	mov	r3, r4
 800567e:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8005682:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005686:	89d6      	ldrh	r6, [r2, #14]
 8005688:	3b06      	subs	r3, #6
 800568a:	f81c 6006 	ldrb.w	r6, [ip, r6]
 800568e:	1bdb      	subs	r3, r3, r7
 8005690:	429e      	cmp	r6, r3
 8005692:	d8f3      	bhi.n	800567c <HAL_FDCAN_GetRxMessage+0xa8>
 8005694:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005696:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8005698:	bf0c      	ite	eq
 800569a:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 800569e:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 80056a2:	2000      	movs	r0, #0
}
 80056a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80056a6:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80056aa:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80056ac:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80056b0:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80056b4:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80056b8:	683c      	ldr	r4, [r7, #0]
 80056ba:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80056be:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80056c0:	2c00      	cmp	r4, #0
 80056c2:	d0b2      	beq.n	800562a <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80056c4:	683c      	ldr	r4, [r7, #0]
 80056c6:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 80056ca:	e7b1      	b.n	8005630 <HAL_FDCAN_GetRxMessage+0x5c>
 80056cc:	0800e9f8 	.word	0x0800e9f8

080056d0 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80056d0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80056d4:	3b01      	subs	r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d905      	bls.n	80056e6 <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80056da:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80056dc:	f043 0302 	orr.w	r3, r3, #2
 80056e0:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 80056e2:	2001      	movs	r0, #1
}
 80056e4:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 80056e6:	6803      	ldr	r3, [r0, #0]
{
 80056e8:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80056ea:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 80056ee:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80056f0:	d03d      	beq.n	800576e <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80056f2:	07c4      	lsls	r4, r0, #31
 80056f4:	d43b      	bmi.n	800576e <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80056f6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80056f8:	f044 0401 	orr.w	r4, r4, #1
 80056fc:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80056fe:	b1cd      	cbz	r5, 8005734 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005700:	07c5      	lsls	r5, r0, #31
 8005702:	d517      	bpl.n	8005734 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005704:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005706:	f040 0002 	orr.w	r0, r0, #2
 800570a:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800570c:	060c      	lsls	r4, r1, #24
 800570e:	d504      	bpl.n	800571a <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005710:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8005714:	4310      	orrs	r0, r2
 8005716:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800571a:	05c8      	lsls	r0, r1, #23
 800571c:	d504      	bpl.n	8005728 <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800571e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005722:	4302      	orrs	r2, r0
 8005724:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800572a:	4311      	orrs	r1, r2
    return HAL_OK;
 800572c:	2000      	movs	r0, #0
}
 800572e:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005730:	6559      	str	r1, [r3, #84]	; 0x54
}
 8005732:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005734:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005738:	d001      	beq.n	800573e <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800573a:	0784      	lsls	r4, r0, #30
 800573c:	d4e2      	bmi.n	8005704 <HAL_FDCAN_ActivateNotification+0x34>
 800573e:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005742:	d131      	bne.n	80057a8 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005744:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005748:	d001      	beq.n	800574e <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800574a:	0704      	lsls	r4, r0, #28
 800574c:	d4da      	bmi.n	8005704 <HAL_FDCAN_ActivateNotification+0x34>
 800574e:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005752:	d001      	beq.n	8005758 <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005754:	06c5      	lsls	r5, r0, #27
 8005756:	d4d5      	bmi.n	8005704 <HAL_FDCAN_ActivateNotification+0x34>
 8005758:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 800575c:	d001      	beq.n	8005762 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800575e:	0684      	lsls	r4, r0, #26
 8005760:	d4d0      	bmi.n	8005704 <HAL_FDCAN_ActivateNotification+0x34>
 8005762:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005766:	d0d1      	beq.n	800570c <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005768:	0645      	lsls	r5, r0, #25
 800576a:	d5cf      	bpl.n	800570c <HAL_FDCAN_ActivateNotification+0x3c>
 800576c:	e7ca      	b.n	8005704 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800576e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005772:	d001      	beq.n	8005778 <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005774:	0784      	lsls	r4, r0, #30
 8005776:	d5be      	bpl.n	80056f6 <HAL_FDCAN_ActivateNotification+0x26>
 8005778:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 800577c:	d117      	bne.n	80057ae <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800577e:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005782:	d001      	beq.n	8005788 <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005784:	0704      	lsls	r4, r0, #28
 8005786:	d5b6      	bpl.n	80056f6 <HAL_FDCAN_ActivateNotification+0x26>
 8005788:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 800578c:	d001      	beq.n	8005792 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800578e:	06c4      	lsls	r4, r0, #27
 8005790:	d5b1      	bpl.n	80056f6 <HAL_FDCAN_ActivateNotification+0x26>
 8005792:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005796:	d001      	beq.n	800579c <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005798:	0684      	lsls	r4, r0, #26
 800579a:	d5ac      	bpl.n	80056f6 <HAL_FDCAN_ActivateNotification+0x26>
 800579c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80057a0:	d0ad      	beq.n	80056fe <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80057a2:	0644      	lsls	r4, r0, #25
 80057a4:	d4ab      	bmi.n	80056fe <HAL_FDCAN_ActivateNotification+0x2e>
 80057a6:	e7a6      	b.n	80056f6 <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80057a8:	0745      	lsls	r5, r0, #29
 80057aa:	d4ab      	bmi.n	8005704 <HAL_FDCAN_ActivateNotification+0x34>
 80057ac:	e7ca      	b.n	8005744 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80057ae:	0744      	lsls	r4, r0, #29
 80057b0:	d5a1      	bpl.n	80056f6 <HAL_FDCAN_ActivateNotification+0x26>
 80057b2:	e7e4      	b.n	800577e <HAL_FDCAN_ActivateNotification+0xae>

080057b4 <HAL_FDCAN_TxEventFifoCallback>:
}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <HAL_FDCAN_RxFifo0Callback>:
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <HAL_FDCAN_RxFifo1Callback>:
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <HAL_FDCAN_TxFifoEmptyCallback>:
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop

080057c4 <HAL_FDCAN_TxBufferCompleteCallback>:
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop

080057c8 <HAL_FDCAN_TxBufferAbortCallback>:
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop

080057cc <HAL_FDCAN_TimestampWraparoundCallback>:
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <HAL_FDCAN_TimeoutOccurredCallback>:
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop

080057d4 <HAL_FDCAN_HighPriorityMessageCallback>:
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <HAL_FDCAN_ErrorCallback>:
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop

080057dc <HAL_FDCAN_ErrorStatusCallback>:
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop

080057e0 <HAL_FDCAN_IRQHandler>:
{
 80057e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80057e4:	6803      	ldr	r3, [r0, #0]
 80057e6:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80057ea:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80057ee:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80057f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80057f4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80057f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80057f8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 80057fa:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80057fe:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005800:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005804:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005806:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800580a:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 800580e:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005812:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005814:	0652      	lsls	r2, r2, #25
{
 8005816:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005818:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 800581c:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005820:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8005824:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005828:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800582c:	d502      	bpl.n	8005834 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800582e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005830:	0651      	lsls	r1, r2, #25
 8005832:	d473      	bmi.n	800591c <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005836:	05d2      	lsls	r2, r2, #23
 8005838:	d502      	bpl.n	8005840 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800583a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800583c:	05d0      	lsls	r0, r2, #23
 800583e:	d45d      	bmi.n	80058fc <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 8005840:	f1b9 0f00 	cmp.w	r9, #0
 8005844:	d14a      	bne.n	80058dc <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 8005846:	f1b8 0f00 	cmp.w	r8, #0
 800584a:	d137      	bne.n	80058bc <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 800584c:	2f00      	cmp	r7, #0
 800584e:	d13e      	bne.n	80058ce <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005852:	0591      	lsls	r1, r2, #22
 8005854:	d502      	bpl.n	800585c <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005856:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005858:	0592      	lsls	r2, r2, #22
 800585a:	d475      	bmi.n	8005948 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800585c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800585e:	0617      	lsls	r7, r2, #24
 8005860:	d502      	bpl.n	8005868 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005862:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005864:	0610      	lsls	r0, r2, #24
 8005866:	d477      	bmi.n	8005958 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800586a:	0491      	lsls	r1, r2, #18
 800586c:	d502      	bpl.n	8005874 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800586e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005870:	0492      	lsls	r2, r2, #18
 8005872:	d459      	bmi.n	8005928 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005876:	0417      	lsls	r7, r2, #16
 8005878:	d502      	bpl.n	8005880 <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800587a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800587c:	0410      	lsls	r0, r2, #16
 800587e:	d45b      	bmi.n	8005938 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005882:	0451      	lsls	r1, r2, #17
 8005884:	d509      	bpl.n	800589a <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005886:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005888:	0452      	lsls	r2, r2, #17
 800588a:	d506      	bpl.n	800589a <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800588c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005890:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005892:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005898:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 800589a:	b94e      	cbnz	r6, 80058b0 <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 800589c:	b125      	cbz	r5, 80058a8 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80058a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80058a4:	431d      	orrs	r5, r3
 80058a6:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80058a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80058aa:	bb13      	cbnz	r3, 80058f2 <HAL_FDCAN_IRQHandler+0x112>
}
 80058ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80058b0:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80058b2:	4631      	mov	r1, r6
 80058b4:	4620      	mov	r0, r4
 80058b6:	f7ff ff91 	bl	80057dc <HAL_FDCAN_ErrorStatusCallback>
 80058ba:	e7ef      	b.n	800589c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80058bc:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80058c0:	4641      	mov	r1, r8
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff ff78 	bl	80057b8 <HAL_FDCAN_RxFifo0Callback>
 80058c8:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	d0c0      	beq.n	8005850 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80058ce:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80058d0:	4639      	mov	r1, r7
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff ff72 	bl	80057bc <HAL_FDCAN_RxFifo1Callback>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	e7b9      	b.n	8005850 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80058dc:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80058e0:	4649      	mov	r1, r9
 80058e2:	4620      	mov	r0, r4
 80058e4:	f7ff ff66 	bl	80057b4 <HAL_FDCAN_TxEventFifoCallback>
 80058e8:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 80058ea:	f1b8 0f00 	cmp.w	r8, #0
 80058ee:	d0ad      	beq.n	800584c <HAL_FDCAN_IRQHandler+0x6c>
 80058f0:	e7e4      	b.n	80058bc <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7ff ff70 	bl	80057d8 <HAL_FDCAN_ErrorCallback>
}
 80058f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80058fc:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005900:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005904:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005908:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800590a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800590c:	4620      	mov	r0, r4
 800590e:	f7ff ff5b 	bl	80057c8 <HAL_FDCAN_TxBufferAbortCallback>
 8005912:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8005914:	f1b9 0f00 	cmp.w	r9, #0
 8005918:	d095      	beq.n	8005846 <HAL_FDCAN_IRQHandler+0x66>
 800591a:	e7df      	b.n	80058dc <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800591c:	2240      	movs	r2, #64	; 0x40
 800591e:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005920:	f7ff ff58 	bl	80057d4 <HAL_FDCAN_HighPriorityMessageCallback>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	e785      	b.n	8005834 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005928:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800592c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff ff4c 	bl	80057cc <HAL_FDCAN_TimestampWraparoundCallback>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	e79d      	b.n	8005874 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005938:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800593c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800593e:	4620      	mov	r0, r4
 8005940:	f7ff ff46 	bl	80057d0 <HAL_FDCAN_TimeoutOccurredCallback>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	e79b      	b.n	8005880 <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff ff36 	bl	80057c0 <HAL_FDCAN_TxFifoEmptyCallback>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	e781      	b.n	800585c <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005958:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800595c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005960:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005962:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005964:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005966:	4620      	mov	r0, r4
 8005968:	f7ff ff2c 	bl	80057c4 <HAL_FDCAN_TxBufferCompleteCallback>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	e77b      	b.n	8005868 <HAL_FDCAN_IRQHandler+0x88>

08005970 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005974:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8005ac8 <HAL_FLASH_Program+0x158>
 8005978:	f899 4000 	ldrb.w	r4, [r9]
 800597c:	2c01      	cmp	r4, #1
 800597e:	d04f      	beq.n	8005a20 <HAL_FLASH_Program+0xb0>
 8005980:	469b      	mov	fp, r3
 8005982:	2301      	movs	r3, #1
 8005984:	4682      	mov	sl, r0
 8005986:	460f      	mov	r7, r1
 8005988:	4690      	mov	r8, r2
 800598a:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800598e:	f7fe fdfd 	bl	800458c <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005992:	4e4c      	ldr	r6, [pc, #304]	; (8005ac4 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8005994:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005996:	e005      	b.n	80059a4 <HAL_FLASH_Program+0x34>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005998:	f7fe fdf8 	bl	800458c <HAL_GetTick>
 800599c:	1b44      	subs	r4, r0, r5
 800599e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80059a2:	d837      	bhi.n	8005a14 <HAL_FLASH_Program+0xa4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059a4:	6933      	ldr	r3, [r6, #16]
 80059a6:	03d8      	lsls	r0, r3, #15
 80059a8:	d4f6      	bmi.n	8005998 <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80059aa:	6934      	ldr	r4, [r6, #16]
 80059ac:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 80059b0:	401c      	ands	r4, r3
 80059b2:	d147      	bne.n	8005a44 <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80059b4:	6933      	ldr	r3, [r6, #16]
 80059b6:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80059b8:	bf44      	itt	mi
 80059ba:	2301      	movmi	r3, #1
 80059bc:	6133      	strmi	r3, [r6, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059be:	2300      	movs	r3, #0
 80059c0:	f8c9 3004 	str.w	r3, [r9, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80059c4:	f1ba 0f00 	cmp.w	sl, #0
 80059c8:	d02d      	beq.n	8005a26 <HAL_FLASH_Program+0xb6>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80059ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d940      	bls.n	8005a54 <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 80059d2:	f7fe fddb 	bl	800458c <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059d6:	4e3b      	ldr	r6, [pc, #236]	; (8005ac4 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 80059d8:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059da:	e005      	b.n	80059e8 <HAL_FLASH_Program+0x78>
    if ((HAL_GetTick() - tickstart) > Timeout)
 80059dc:	f7fe fdd6 	bl	800458c <HAL_GetTick>
 80059e0:	1b40      	subs	r0, r0, r5
 80059e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80059e6:	d82b      	bhi.n	8005a40 <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059e8:	6933      	ldr	r3, [r6, #16]
 80059ea:	03db      	lsls	r3, r3, #15
 80059ec:	d4f6      	bmi.n	80059dc <HAL_FLASH_Program+0x6c>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80059ee:	6933      	ldr	r3, [r6, #16]
 80059f0:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 80059f4:	4013      	ands	r3, r2
 80059f6:	d152      	bne.n	8005a9e <HAL_FLASH_Program+0x12e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80059f8:	6930      	ldr	r0, [r6, #16]
 80059fa:	f010 0001 	ands.w	r0, r0, #1
 80059fe:	d002      	beq.n	8005a06 <HAL_FLASH_Program+0x96>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a00:	2201      	movs	r2, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	6132      	str	r2, [r6, #16]
    if (prog_bit != 0U)
 8005a06:	b134      	cbz	r4, 8005a16 <HAL_FLASH_Program+0xa6>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005a08:	4a2e      	ldr	r2, [pc, #184]	; (8005ac4 <HAL_FLASH_Program+0x154>)
 8005a0a:	6953      	ldr	r3, [r2, #20]
 8005a0c:	ea23 0404 	bic.w	r4, r3, r4
 8005a10:	6154      	str	r4, [r2, #20]
 8005a12:	e000      	b.n	8005a16 <HAL_FLASH_Program+0xa6>
 8005a14:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8005a16:	2300      	movs	r3, #0
 8005a18:	f889 3000 	strb.w	r3, [r9]
}
 8005a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8005a20:	2002      	movs	r0, #2
}
 8005a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a26:	4a27      	ldr	r2, [pc, #156]	; (8005ac4 <HAL_FLASH_Program+0x154>)
 8005a28:	6953      	ldr	r3, [r2, #20]
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005a30:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8005a34:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8005a38:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005a3a:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 8005a3e:	e7c8      	b.n	80059d2 <HAL_FLASH_Program+0x62>
      return HAL_TIMEOUT;
 8005a40:	2003      	movs	r0, #3
 8005a42:	e7e0      	b.n	8005a06 <HAL_FLASH_Program+0x96>
    pFlash.ErrorCode |= error;
 8005a44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005a48:	4323      	orrs	r3, r4
 8005a4a:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 8005a4e:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8005a50:	6134      	str	r4, [r6, #16]
  if (status == HAL_OK)
 8005a52:	e7e0      	b.n	8005a16 <HAL_FLASH_Program+0xa6>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_FLASH_Program+0x154>)
 8005a56:	6953      	ldr	r3, [r2, #20]
 8005a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a5c:	6153      	str	r3, [r2, #20]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005a5e:	4643      	mov	r3, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a60:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005a64:	b672      	cpsid	i
 8005a66:	1dfa      	adds	r2, r7, #7
 8005a68:	eba2 0208 	sub.w	r2, r2, r8
 8005a6c:	2a0e      	cmp	r2, #14
 8005a6e:	d91e      	bls.n	8005aae <HAL_FLASH_Program+0x13e>
 8005a70:	ea47 0208 	orr.w	r2, r7, r8
 8005a74:	0752      	lsls	r2, r2, #29
 8005a76:	d11a      	bne.n	8005aae <HAL_FLASH_Program+0x13e>
 8005a78:	1aff      	subs	r7, r7, r3
 8005a7a:	f508 7880 	add.w	r8, r8, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a82:	18fa      	adds	r2, r7, r3
 8005a84:	3308      	adds	r3, #8
 8005a86:	4543      	cmp	r3, r8
 8005a88:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 8005a8c:	d1f7      	bne.n	8005a7e <HAL_FLASH_Program+0x10e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8e:	f385 8810 	msr	PRIMASK, r5
        prog_bit = FLASH_CR_FSTPG;
 8005a92:	f1ba 0f02 	cmp.w	sl, #2
 8005a96:	bf08      	it	eq
 8005a98:	f44f 2480 	moveq.w	r4, #262144	; 0x40000
 8005a9c:	e799      	b.n	80059d2 <HAL_FLASH_Program+0x62>
    pFlash.ErrorCode |= error;
 8005a9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 8005aa8:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8005aaa:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 8005aac:	e7ab      	b.n	8005a06 <HAL_FLASH_Program+0x96>
 8005aae:	eba7 0708 	sub.w	r7, r7, r8
 8005ab2:	f508 7880 	add.w	r8, r8, #256	; 0x100
    *dest_addr = *src_addr;
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	51da      	str	r2, [r3, r7]
    src_addr++;
 8005aba:	3304      	adds	r3, #4
  while (row_index != 0U);
 8005abc:	4598      	cmp	r8, r3
 8005abe:	d1fa      	bne.n	8005ab6 <HAL_FLASH_Program+0x146>
 8005ac0:	e7e5      	b.n	8005a8e <HAL_FLASH_Program+0x11e>
 8005ac2:	bf00      	nop
 8005ac4:	40022000 	.word	0x40022000
 8005ac8:	2000000c 	.word	0x2000000c

08005acc <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <HAL_FLASH_Unlock+0x1c>)
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	db01      	blt.n	8005ad8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8005ad4:	2000      	movs	r0, #0
}
 8005ad6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ad8:	4904      	ldr	r1, [pc, #16]	; (8005aec <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ada:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005adc:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ade:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005ae0:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	0fc0      	lsrs	r0, r0, #31
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40022000 	.word	0x40022000
 8005aec:	45670123 	.word	0x45670123
 8005af0:	cdef89ab 	.word	0xcdef89ab

08005af4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <HAL_FLASH_Lock+0x14>)
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005afc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005afe:	6958      	ldr	r0, [r3, #20]
}
 8005b00:	43c0      	mvns	r0, r0
 8005b02:	0fc0      	lsrs	r0, r0, #31
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40022000 	.word	0x40022000

08005b0c <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_FLASH_OB_Unlock+0x1c>)
 8005b0e:	6958      	ldr	r0, [r3, #20]
 8005b10:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8005b14:	d006      	beq.n	8005b24 <HAL_FLASH_OB_Unlock+0x18>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005b16:	4905      	ldr	r1, [pc, #20]	; (8005b2c <HAL_FLASH_OB_Unlock+0x20>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005b18:	4a05      	ldr	r2, [pc, #20]	; (8005b30 <HAL_FLASH_OB_Unlock+0x24>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005b1a:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005b1c:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005b1e:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	f3c0 7080 	ubfx	r0, r0, #30, #1
}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40022000 	.word	0x40022000
 8005b2c:	08192a3b 	.word	0x08192a3b
 8005b30:	4c5d6e7f 	.word	0x4c5d6e7f

08005b34 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_FLASH_OB_Lock+0x18>)
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b3c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005b3e:	6958      	ldr	r0, [r3, #20]
 8005b40:	f080 4080 	eor.w	r0, r0, #1073741824	; 0x40000000
}
 8005b44:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40022000 	.word	0x40022000

08005b50 <FLASH_WaitForLastOperation>:
{
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8005b54:	f7fe fd1a 	bl	800458c <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005b58:	4e10      	ldr	r6, [pc, #64]	; (8005b9c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8005b5a:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005b5c:	e004      	b.n	8005b68 <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005b5e:	f7fe fd15 	bl	800458c <HAL_GetTick>
 8005b62:	1b03      	subs	r3, r0, r4
 8005b64:	42ab      	cmp	r3, r5
 8005b66:	d80f      	bhi.n	8005b88 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005b68:	6933      	ldr	r3, [r6, #16]
 8005b6a:	03db      	lsls	r3, r3, #15
 8005b6c:	d4f7      	bmi.n	8005b5e <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005b6e:	6933      	ldr	r3, [r6, #16]
 8005b70:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8005b74:	4013      	ands	r3, r2
 8005b76:	d109      	bne.n	8005b8c <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005b78:	6930      	ldr	r0, [r6, #16]
 8005b7a:	f010 0001 	ands.w	r0, r0, #1
 8005b7e:	d002      	beq.n	8005b86 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b80:	2201      	movs	r2, #1
 8005b82:	4618      	mov	r0, r3
 8005b84:	6132      	str	r2, [r6, #16]
}
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8005b88:	2003      	movs	r0, #3
}
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8005b8c:	4904      	ldr	r1, [pc, #16]	; (8005ba0 <FLASH_WaitForLastOperation+0x50>)
 8005b8e:	684a      	ldr	r2, [r1, #4]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8005b94:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8005b96:	6133      	str	r3, [r6, #16]
}
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40022000 	.word	0x40022000
 8005ba0:	2000000c 	.word	0x2000000c

08005ba4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ba8:	4f67      	ldr	r7, [pc, #412]	; (8005d48 <HAL_FLASHEx_Erase+0x1a4>)
 8005baa:	783b      	ldrb	r3, [r7, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d062      	beq.n	8005c76 <HAL_FLASHEx_Erase+0xd2>
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bb8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8005bba:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bbc:	f7ff ffc8 	bl	8005b50 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	b120      	cbz	r0, 8005bce <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	703b      	strb	r3, [r7, #0]

  return status;
}
 8005bc8:	4630      	mov	r0, r6
 8005bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005bce:	4b5f      	ldr	r3, [pc, #380]	; (8005d4c <HAL_FLASHEx_Erase+0x1a8>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bd0:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005bd8:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005bda:	d150      	bne.n	8005c7e <HAL_FLASHEx_Erase+0xda>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005bdc:	0554      	lsls	r4, r2, #21
 8005bde:	f140 80a1 	bpl.w	8005d24 <HAL_FLASHEx_Erase+0x180>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005be2:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005be4:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bea:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005bec:	7739      	strb	r1, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005bee:	f8da 3000 	ldr.w	r3, [sl]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d050      	beq.n	8005c98 <HAL_FLASHEx_Erase+0xf4>
      *PageError = 0xFFFFFFFFU;
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfa:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005bfe:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 8005c02:	442b      	add	r3, r5
 8005c04:	429d      	cmp	r5, r3
 8005c06:	d261      	bcs.n	8005ccc <HAL_FLASHEx_Erase+0x128>
{
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8005c08:	4c50      	ldr	r4, [pc, #320]	; (8005d4c <HAL_FLASHEx_Erase+0x1a8>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005c0a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8005d50 <HAL_FLASHEx_Erase+0x1ac>
 8005c0e:	e023      	b.n	8005c58 <HAL_FLASHEx_Erase+0xb4>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005c10:	6963      	ldr	r3, [r4, #20]
 8005c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c16:	6163      	str	r3, [r4, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005c18:	6962      	ldr	r2, [r4, #20]
 8005c1a:	00eb      	lsls	r3, r5, #3
 8005c1c:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 8005c20:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c24:	4313      	orrs	r3, r2
 8005c26:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005c28:	6963      	ldr	r3, [r4, #20]
 8005c2a:	f043 0302 	orr.w	r3, r3, #2
 8005c2e:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c30:	6963      	ldr	r3, [r4, #20]
 8005c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c36:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c3c:	f7ff ff88 	bl	8005b50 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005c40:	6963      	ldr	r3, [r4, #20]
 8005c42:	ea03 0309 	and.w	r3, r3, r9
 8005c46:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d165      	bne.n	8005d18 <HAL_FLASHEx_Erase+0x174>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005c4c:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8005c50:	3501      	adds	r5, #1
 8005c52:	4413      	add	r3, r2
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	d939      	bls.n	8005ccc <HAL_FLASHEx_Erase+0x128>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8005c58:	6a23      	ldr	r3, [r4, #32]
 8005c5a:	025b      	lsls	r3, r3, #9
 8005c5c:	d5d8      	bpl.n	8005c10 <HAL_FLASHEx_Erase+0x6c>
    if ((Banks & FLASH_BANK_1) != 0U)
 8005c5e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005c62:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005c66:	6963      	ldr	r3, [r4, #20]
 8005c68:	bf14      	ite	ne
 8005c6a:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005c6e:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8005c72:	6163      	str	r3, [r4, #20]
 8005c74:	e7d0      	b.n	8005c18 <HAL_FLASHEx_Erase+0x74>
  __HAL_LOCK(&pFlash);
 8005c76:	2602      	movs	r6, #2
}
 8005c78:	4630      	mov	r0, r6
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005c7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c82:	601a      	str	r2, [r3, #0]
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	0555      	lsls	r5, r2, #21
 8005c88:	d54a      	bpl.n	8005d20 <HAL_FLASHEx_Erase+0x17c>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005c8a:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005c8c:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005c94:	7739      	strb	r1, [r7, #28]
 8005c96:	e7aa      	b.n	8005bee <HAL_FLASHEx_Erase+0x4a>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8005c98:	4b2c      	ldr	r3, [pc, #176]	; (8005d4c <HAL_FLASHEx_Erase+0x1a8>)
 8005c9a:	6a1a      	ldr	r2, [r3, #32]
 8005c9c:	0250      	lsls	r0, r2, #9
 8005c9e:	d443      	bmi.n	8005d28 <HAL_FLASHEx_Erase+0x184>
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca6:	f042 0204 	orr.w	r2, r2, #4
 8005caa:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005cac:	4c27      	ldr	r4, [pc, #156]	; (8005d4c <HAL_FLASHEx_Erase+0x1a8>)
 8005cae:	6963      	ldr	r3, [r4, #20]
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb4:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cba:	f7ff ff49 	bl	8005b50 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005cbe:	6963      	ldr	r3, [r4, #20]
 8005cc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cc8:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005cca:	6163      	str	r3, [r4, #20]
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005ccc:	7f3b      	ldrb	r3, [r7, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005cce:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005cd2:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005cd4:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005cd6:	d10c      	bne.n	8005cf2 <HAL_FLASHEx_Erase+0x14e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005cd8:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_FLASHEx_Erase+0x1a8>)
 8005cda:	6811      	ldr	r1, [r2, #0]
 8005cdc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005ce0:	6011      	str	r1, [r2, #0]
 8005ce2:	6811      	ldr	r1, [r2, #0]
 8005ce4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005ce8:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cea:	6811      	ldr	r1, [r2, #0]
 8005cec:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005cf0:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005cf2:	3b02      	subs	r3, #2
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d80c      	bhi.n	8005d12 <HAL_FLASHEx_Erase+0x16e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <HAL_FLASHEx_Erase+0x1a8>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d08:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d10:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d12:	2300      	movs	r3, #0
 8005d14:	773b      	strb	r3, [r7, #28]
}
 8005d16:	e755      	b.n	8005bc4 <HAL_FLASHEx_Erase+0x20>
          *PageError = page_index;
 8005d18:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d1c:	4606      	mov	r6, r0
          break;
 8005d1e:	e7d5      	b.n	8005ccc <HAL_FLASHEx_Erase+0x128>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005d20:	773c      	strb	r4, [r7, #28]
 8005d22:	e764      	b.n	8005bee <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d24:	7738      	strb	r0, [r7, #28]
 8005d26:	e762      	b.n	8005bee <HAL_FLASHEx_Erase+0x4a>
      FLASH_MassErase(pEraseInit->Banks);
 8005d28:	f8da 2004 	ldr.w	r2, [sl, #4]
    if ((Banks & FLASH_BANK_1) != 0U)
 8005d2c:	07d1      	lsls	r1, r2, #31
 8005d2e:	d503      	bpl.n	8005d38 <HAL_FLASHEx_Erase+0x194>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005d30:	6959      	ldr	r1, [r3, #20]
 8005d32:	f041 0104 	orr.w	r1, r1, #4
 8005d36:	6159      	str	r1, [r3, #20]
    if ((Banks & FLASH_BANK_2) != 0U)
 8005d38:	0792      	lsls	r2, r2, #30
 8005d3a:	d5b7      	bpl.n	8005cac <HAL_FLASHEx_Erase+0x108>
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8005d3c:	4a03      	ldr	r2, [pc, #12]	; (8005d4c <HAL_FLASHEx_Erase+0x1a8>)
 8005d3e:	6953      	ldr	r3, [r2, #20]
 8005d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d44:	6153      	str	r3, [r2, #20]
 8005d46:	e7b1      	b.n	8005cac <HAL_FLASHEx_Erase+0x108>
 8005d48:	2000000c 	.word	0x2000000c
 8005d4c:	40022000 	.word	0x40022000
 8005d50:	fffffc05 	.word	0xfffffc05

08005d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d58:	680e      	ldr	r6, [r1, #0]
{
 8005d5a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d5c:	2e00      	cmp	r6, #0
 8005d5e:	f000 808b 	beq.w	8005e78 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005d62:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8005f38 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 8005d66:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d68:	2201      	movs	r2, #1
 8005d6a:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8005d6e:	ea14 0c06 	ands.w	ip, r4, r6
 8005d72:	d07c      	beq.n	8005e6e <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d74:	684d      	ldr	r5, [r1, #4]
 8005d76:	f025 0a10 	bic.w	sl, r5, #16
 8005d7a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005d7e:	2a01      	cmp	r2, #1
 8005d80:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d84:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d88:	d979      	bls.n	8005e7e <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8005d8a:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d8c:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d8e:	fa02 f208 	lsl.w	r2, r2, r8
 8005d92:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d96:	fa04 f408 	lsl.w	r4, r4, r8
 8005d9a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8005d9c:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d9e:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8005da0:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005da2:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005da6:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005da8:	fa02 f208 	lsl.w	r2, r2, r8
 8005dac:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005dae:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8005db0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005db2:	d55c      	bpl.n	8005e6e <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db4:	4c5a      	ldr	r4, [pc, #360]	; (8005f20 <HAL_GPIO_Init+0x1cc>)
 8005db6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005db8:	f042 0201 	orr.w	r2, r2, #1
 8005dbc:	6622      	str	r2, [r4, #96]	; 0x60
 8005dbe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005dc0:	f023 0403 	bic.w	r4, r3, #3
 8005dc4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005dc8:	f002 0201 	and.w	r2, r2, #1
 8005dcc:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8005dd0:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dd2:	f003 0203 	and.w	r2, r3, #3
 8005dd6:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dda:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005ddc:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dde:	220f      	movs	r2, #15
 8005de0:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005de4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005de8:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dec:	d018      	beq.n	8005e20 <HAL_GPIO_Init+0xcc>
 8005dee:	4a4d      	ldr	r2, [pc, #308]	; (8005f24 <HAL_GPIO_Init+0x1d0>)
 8005df0:	4290      	cmp	r0, r2
 8005df2:	f000 8084 	beq.w	8005efe <HAL_GPIO_Init+0x1aa>
 8005df6:	4a4c      	ldr	r2, [pc, #304]	; (8005f28 <HAL_GPIO_Init+0x1d4>)
 8005df8:	4290      	cmp	r0, r2
 8005dfa:	f000 8085 	beq.w	8005f08 <HAL_GPIO_Init+0x1b4>
 8005dfe:	4a4b      	ldr	r2, [pc, #300]	; (8005f2c <HAL_GPIO_Init+0x1d8>)
 8005e00:	4290      	cmp	r0, r2
 8005e02:	d076      	beq.n	8005ef2 <HAL_GPIO_Init+0x19e>
 8005e04:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <HAL_GPIO_Init+0x1dc>)
 8005e06:	4290      	cmp	r0, r2
 8005e08:	f000 8084 	beq.w	8005f14 <HAL_GPIO_Init+0x1c0>
 8005e0c:	4a49      	ldr	r2, [pc, #292]	; (8005f34 <HAL_GPIO_Init+0x1e0>)
 8005e0e:	4290      	cmp	r0, r2
 8005e10:	bf0c      	ite	eq
 8005e12:	f04f 0805 	moveq.w	r8, #5
 8005e16:	f04f 0806 	movne.w	r8, #6
 8005e1a:	fa08 f209 	lsl.w	r2, r8, r9
 8005e1e:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e20:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 8005e22:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8005e26:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e2a:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8005e2c:	bf54      	ite	pl
 8005e2e:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8005e30:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8005e34:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8005e38:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e3c:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8005e3e:	bf54      	ite	pl
 8005e40:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8005e42:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 8005e46:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e4a:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e4e:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8005e50:	bf54      	ite	pl
 8005e52:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8005e54:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8005e58:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8005e5c:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e60:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8005e62:	bf54      	ite	pl
 8005e64:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8005e66:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 8005e6a:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8005e6e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e70:	fa36 f203 	lsrs.w	r2, r6, r3
 8005e74:	f47f af78 	bne.w	8005d68 <HAL_GPIO_Init+0x14>
  }
}
 8005e78:	b003      	add	sp, #12
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005e7e:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e80:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e84:	fa02 f208 	lsl.w	r2, r2, r8
 8005e88:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e8c:	68cf      	ldr	r7, [r1, #12]
 8005e8e:	fa07 f708 	lsl.w	r7, r7, r8
 8005e92:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8005e96:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005e98:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e9a:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e9e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ea2:	465c      	mov	r4, fp
 8005ea4:	409c      	lsls	r4, r3
 8005ea6:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8005ea8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8005eaa:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eac:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eb4:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005eb8:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ebc:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8005ec0:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ec2:	f47f af6d 	bne.w	8005da0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8005ec6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8005eca:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ece:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005ed2:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ed6:	0092      	lsls	r2, r2, #2
 8005ed8:	f04f 0a0f 	mov.w	sl, #15
 8005edc:	fa0a fb02 	lsl.w	fp, sl, r2
 8005ee0:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ee4:	690c      	ldr	r4, [r1, #16]
 8005ee6:	4094      	lsls	r4, r2
 8005ee8:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005eec:	f8c9 4020 	str.w	r4, [r9, #32]
 8005ef0:	e756      	b.n	8005da0 <HAL_GPIO_Init+0x4c>
 8005ef2:	f04f 0803 	mov.w	r8, #3
 8005ef6:	fa08 f209 	lsl.w	r2, r8, r9
 8005efa:	4317      	orrs	r7, r2
 8005efc:	e790      	b.n	8005e20 <HAL_GPIO_Init+0xcc>
 8005efe:	2201      	movs	r2, #1
 8005f00:	fa02 f209 	lsl.w	r2, r2, r9
 8005f04:	4317      	orrs	r7, r2
 8005f06:	e78b      	b.n	8005e20 <HAL_GPIO_Init+0xcc>
 8005f08:	f04f 0802 	mov.w	r8, #2
 8005f0c:	fa08 f209 	lsl.w	r2, r8, r9
 8005f10:	4317      	orrs	r7, r2
 8005f12:	e785      	b.n	8005e20 <HAL_GPIO_Init+0xcc>
 8005f14:	f04f 0804 	mov.w	r8, #4
 8005f18:	fa08 f209 	lsl.w	r2, r8, r9
 8005f1c:	4317      	orrs	r7, r2
 8005f1e:	e77f      	b.n	8005e20 <HAL_GPIO_Init+0xcc>
 8005f20:	40021000 	.word	0x40021000
 8005f24:	48000400 	.word	0x48000400
 8005f28:	48000800 	.word	0x48000800
 8005f2c:	48000c00 	.word	0x48000c00
 8005f30:	48001000 	.word	0x48001000
 8005f34:	48001400 	.word	0x48001400
 8005f38:	40010400 	.word	0x40010400

08005f3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f3c:	b10a      	cbz	r2, 8005f42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f3e:	6181      	str	r1, [r0, #24]
 8005f40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f42:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop

08005f48 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f48:	4a3b      	ldr	r2, [pc, #236]	; (8006038 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8005f4a:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f4c:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f4e:	b968      	cbnz	r0, 8005f6c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f58:	d014      	beq.n	8005f84 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f5a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8005f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f6a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f6c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005f70:	d02f      	beq.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f7a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005f7c:	2000      	movs	r0, #0
}
 8005f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f82:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f84:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f88:	4b2c      	ldr	r3, [pc, #176]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005f8a:	482d      	ldr	r0, [pc, #180]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f8c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005f90:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005f9a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005f9e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fa0:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fa4:	2332      	movs	r3, #50	; 0x32
 8005fa6:	fb03 f304 	mul.w	r3, r3, r4
 8005faa:	fba0 0303 	umull	r0, r3, r0, r3
 8005fae:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb0:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fb2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb6:	d506      	bpl.n	8005fc6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005fb8:	e000      	b.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x74>
 8005fba:	b123      	cbz	r3, 8005fc6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005fbc:	6951      	ldr	r1, [r2, #20]
 8005fbe:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005fc0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fc4:	d4f9      	bmi.n	8005fba <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fc6:	4b1c      	ldr	r3, [pc, #112]	; (8006038 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	055c      	lsls	r4, r3, #21
 8005fcc:	d5d6      	bpl.n	8005f7c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8005fce:	2003      	movs	r0, #3
 8005fd0:	e7c9      	b.n	8005f66 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fda:	d009      	beq.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fdc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8005fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005fe8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005fee:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ff0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ff4:	4b11      	ldr	r3, [pc, #68]	; (800603c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005ff6:	4812      	ldr	r0, [pc, #72]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ff8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005ffc:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006000:	6811      	ldr	r1, [r2, #0]
 8006002:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8006006:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800600a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800600c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800600e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006010:	2332      	movs	r3, #50	; 0x32
 8006012:	fb03 f304 	mul.w	r3, r3, r4
 8006016:	fba0 0303 	umull	r0, r3, r0, r3
 800601a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800601c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800601e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006022:	d5d0      	bpl.n	8005fc6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006024:	e001      	b.n	800602a <HAL_PWREx_ControlVoltageScaling+0xe2>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0cd      	beq.n	8005fc6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800602a:	6951      	ldr	r1, [r2, #20]
 800602c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800602e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006032:	d5c8      	bpl.n	8005fc6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006034:	e7f7      	b.n	8006026 <HAL_PWREx_ControlVoltageScaling+0xde>
 8006036:	bf00      	nop
 8006038:	40007000 	.word	0x40007000
 800603c:	20000000 	.word	0x20000000
 8006040:	431bde83 	.word	0x431bde83

08006044 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006044:	4a02      	ldr	r2, [pc, #8]	; (8006050 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8006046:	6893      	ldr	r3, [r2, #8]
 8006048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800604c:	6093      	str	r3, [r2, #8]
}
 800604e:	4770      	bx	lr
 8006050:	40007000 	.word	0x40007000

08006054 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006054:	2800      	cmp	r0, #0
 8006056:	f000 81c3 	beq.w	80063e0 <HAL_RCC_OscConfig+0x38c>
{
 800605a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800605e:	6803      	ldr	r3, [r0, #0]
 8006060:	07d9      	lsls	r1, r3, #31
{
 8006062:	b082      	sub	sp, #8
 8006064:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006066:	d52d      	bpl.n	80060c4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006068:	49b5      	ldr	r1, [pc, #724]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 800606a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800606c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800606e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006072:	2a0c      	cmp	r2, #12
 8006074:	f000 810a 	beq.w	800628c <HAL_RCC_OscConfig+0x238>
 8006078:	2a08      	cmp	r2, #8
 800607a:	f000 810c 	beq.w	8006296 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800607e:	6863      	ldr	r3, [r4, #4]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	f000 8133 	beq.w	80062ee <HAL_RCC_OscConfig+0x29a>
 8006088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800608c:	f000 819b 	beq.w	80063c6 <HAL_RCC_OscConfig+0x372>
 8006090:	4dab      	ldr	r5, [pc, #684]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 8006092:	682a      	ldr	r2, [r5, #0]
 8006094:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006098:	602a      	str	r2, [r5, #0]
 800609a:	682a      	ldr	r2, [r5, #0]
 800609c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060a0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8128 	bne.w	80062f8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fe fa70 	bl	800458c <HAL_GetTick>
 80060ac:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ae:	e005      	b.n	80060bc <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fe fa6c 	bl	800458c <HAL_GetTick>
 80060b4:	1b80      	subs	r0, r0, r6
 80060b6:	2864      	cmp	r0, #100	; 0x64
 80060b8:	f200 813b 	bhi.w	8006332 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	039f      	lsls	r7, r3, #14
 80060c0:	d4f6      	bmi.n	80060b0 <HAL_RCC_OscConfig+0x5c>
 80060c2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060c4:	079e      	lsls	r6, r3, #30
 80060c6:	d528      	bpl.n	800611a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060c8:	4a9d      	ldr	r2, [pc, #628]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 80060ca:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060cc:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ce:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060d2:	2b0c      	cmp	r3, #12
 80060d4:	f000 80ec 	beq.w	80062b0 <HAL_RCC_OscConfig+0x25c>
 80060d8:	2b04      	cmp	r3, #4
 80060da:	f000 80ee 	beq.w	80062ba <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060de:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4d97      	ldr	r5, [pc, #604]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8116 	beq.w	8006314 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ee:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fe fa4c 	bl	800458c <HAL_GetTick>
 80060f4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060f6:	e005      	b.n	8006104 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f8:	f7fe fa48 	bl	800458c <HAL_GetTick>
 80060fc:	1b80      	subs	r0, r0, r6
 80060fe:	2802      	cmp	r0, #2
 8006100:	f200 8117 	bhi.w	8006332 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	0558      	lsls	r0, r3, #21
 8006108:	d5f6      	bpl.n	80060f8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610a:	686b      	ldr	r3, [r5, #4]
 800610c:	6922      	ldr	r2, [r4, #16]
 800610e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006112:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006116:	606b      	str	r3, [r5, #4]
 8006118:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800611a:	071a      	lsls	r2, r3, #28
 800611c:	d519      	bpl.n	8006152 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800611e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006120:	4d87      	ldr	r5, [pc, #540]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 809e 	beq.w	8006264 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8006128:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006134:	f7fe fa2a 	bl	800458c <HAL_GetTick>
 8006138:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800613a:	e005      	b.n	8006148 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800613c:	f7fe fa26 	bl	800458c <HAL_GetTick>
 8006140:	1b80      	subs	r0, r0, r6
 8006142:	2802      	cmp	r0, #2
 8006144:	f200 80f5 	bhi.w	8006332 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006148:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800614c:	079f      	lsls	r7, r3, #30
 800614e:	d5f5      	bpl.n	800613c <HAL_RCC_OscConfig+0xe8>
 8006150:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006152:	0759      	lsls	r1, r3, #29
 8006154:	d541      	bpl.n	80061da <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006156:	4b7a      	ldr	r3, [pc, #488]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 8006158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800615a:	00d2      	lsls	r2, r2, #3
 800615c:	f100 80ed 	bmi.w	800633a <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006162:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006166:	659a      	str	r2, [r3, #88]	; 0x58
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006172:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006174:	4e73      	ldr	r6, [pc, #460]	; (8006344 <HAL_RCC_OscConfig+0x2f0>)
 8006176:	6833      	ldr	r3, [r6, #0]
 8006178:	05df      	lsls	r7, r3, #23
 800617a:	f140 8113 	bpl.w	80063a4 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800617e:	68a3      	ldr	r3, [r4, #8]
 8006180:	2b01      	cmp	r3, #1
 8006182:	f000 80e3 	beq.w	800634c <HAL_RCC_OscConfig+0x2f8>
 8006186:	2b05      	cmp	r3, #5
 8006188:	f000 8169 	beq.w	800645e <HAL_RCC_OscConfig+0x40a>
 800618c:	4e6c      	ldr	r6, [pc, #432]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 800618e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800619a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800619e:	f022 0204 	bic.w	r2, r2, #4
 80061a2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 80d7 	bne.w	800635a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fe f9ee 	bl	800458c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80061b4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061b6:	e005      	b.n	80061c4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b8:	f7fe f9e8 	bl	800458c <HAL_GetTick>
 80061bc:	1bc0      	subs	r0, r0, r7
 80061be:	4540      	cmp	r0, r8
 80061c0:	f200 80b7 	bhi.w	8006332 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061c4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80061c8:	079a      	lsls	r2, r3, #30
 80061ca:	d4f5      	bmi.n	80061b8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061cc:	b125      	cbz	r5, 80061d8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ce:	4a5c      	ldr	r2, [pc, #368]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 80061d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80061d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d6:	6593      	str	r3, [r2, #88]	; 0x58
 80061d8:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061da:	069b      	lsls	r3, r3, #26
 80061dc:	d518      	bpl.n	8006210 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061de:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061e0:	4d57      	ldr	r5, [pc, #348]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80ca 	beq.w	800637c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80061e8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f4:	f7fe f9ca 	bl	800458c <HAL_GetTick>
 80061f8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061fa:	e005      	b.n	8006208 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061fc:	f7fe f9c6 	bl	800458c <HAL_GetTick>
 8006200:	1b80      	subs	r0, r0, r6
 8006202:	2802      	cmp	r0, #2
 8006204:	f200 8095 	bhi.w	8006332 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006208:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800620c:	079f      	lsls	r7, r3, #30
 800620e:	d5f5      	bpl.n	80061fc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006210:	69e0      	ldr	r0, [r4, #28]
 8006212:	b318      	cbz	r0, 800625c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006214:	4d4a      	ldr	r5, [pc, #296]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 8006216:	68ab      	ldr	r3, [r5, #8]
 8006218:	f003 030c 	and.w	r3, r3, #12
 800621c:	2b0c      	cmp	r3, #12
 800621e:	f000 812c 	beq.w	800647a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006222:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006224:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800622a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800622c:	f000 80da 	beq.w	80063e4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006230:	68eb      	ldr	r3, [r5, #12]
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006238:	68eb      	ldr	r3, [r5, #12]
 800623a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800623e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006242:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fe f9a2 	bl	800458c <HAL_GetTick>
 8006248:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800624a:	e004      	b.n	8006256 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624c:	f7fe f99e 	bl	800458c <HAL_GetTick>
 8006250:	1b00      	subs	r0, r0, r4
 8006252:	2802      	cmp	r0, #2
 8006254:	d86d      	bhi.n	8006332 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006256:	682b      	ldr	r3, [r5, #0]
 8006258:	019b      	lsls	r3, r3, #6
 800625a:	d4f7      	bmi.n	800624c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800625c:	2000      	movs	r0, #0
}
 800625e:	b002      	add	sp, #8
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006264:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006270:	f7fe f98c 	bl	800458c <HAL_GetTick>
 8006274:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006276:	e004      	b.n	8006282 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006278:	f7fe f988 	bl	800458c <HAL_GetTick>
 800627c:	1b80      	subs	r0, r0, r6
 800627e:	2802      	cmp	r0, #2
 8006280:	d857      	bhi.n	8006332 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006282:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006286:	0798      	lsls	r0, r3, #30
 8006288:	d4f6      	bmi.n	8006278 <HAL_RCC_OscConfig+0x224>
 800628a:	e761      	b.n	8006150 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800628c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006290:	2903      	cmp	r1, #3
 8006292:	f47f aef4 	bne.w	800607e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006296:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	0392      	lsls	r2, r2, #14
 800629c:	f57f af12 	bpl.w	80060c4 <HAL_RCC_OscConfig+0x70>
 80062a0:	6862      	ldr	r2, [r4, #4]
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	f47f af0e 	bne.w	80060c4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80062a8:	2001      	movs	r0, #1
}
 80062aa:	b002      	add	sp, #8
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80062b4:	2a02      	cmp	r2, #2
 80062b6:	f47f af12 	bne.w	80060de <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ba:	4b21      	ldr	r3, [pc, #132]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	055d      	lsls	r5, r3, #21
 80062c0:	d502      	bpl.n	80062c8 <HAL_RCC_OscConfig+0x274>
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0ef      	beq.n	80062a8 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c8:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 80062ca:	6920      	ldr	r0, [r4, #16]
 80062cc:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062ce:	491e      	ldr	r1, [pc, #120]	; (8006348 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80062d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80062d8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062da:	6808      	ldr	r0, [r1, #0]
 80062dc:	f7fe f914 	bl	8004508 <HAL_InitTick>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d1e1      	bne.n	80062a8 <HAL_RCC_OscConfig+0x254>
 80062e4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062e6:	071a      	lsls	r2, r3, #28
 80062e8:	f57f af33 	bpl.w	8006152 <HAL_RCC_OscConfig+0xfe>
 80062ec:	e717      	b.n	800611e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ee:	4a14      	ldr	r2, [pc, #80]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
 80062f0:	6813      	ldr	r3, [r2, #0]
 80062f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80062f8:	f7fe f948 	bl	800458c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062fc:	4e10      	ldr	r6, [pc, #64]	; (8006340 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 80062fe:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006300:	e004      	b.n	800630c <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006302:	f7fe f943 	bl	800458c <HAL_GetTick>
 8006306:	1b40      	subs	r0, r0, r5
 8006308:	2864      	cmp	r0, #100	; 0x64
 800630a:	d812      	bhi.n	8006332 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	039b      	lsls	r3, r3, #14
 8006310:	d5f7      	bpl.n	8006302 <HAL_RCC_OscConfig+0x2ae>
 8006312:	e6d6      	b.n	80060c2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800631a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800631c:	f7fe f936 	bl	800458c <HAL_GetTick>
 8006320:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006322:	682b      	ldr	r3, [r5, #0]
 8006324:	0559      	lsls	r1, r3, #21
 8006326:	d5dd      	bpl.n	80062e4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006328:	f7fe f930 	bl	800458c <HAL_GetTick>
 800632c:	1b80      	subs	r0, r0, r6
 800632e:	2802      	cmp	r0, #2
 8006330:	d9f7      	bls.n	8006322 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8006332:	2003      	movs	r0, #3
}
 8006334:	b002      	add	sp, #8
 8006336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800633a:	2500      	movs	r5, #0
 800633c:	e71a      	b.n	8006174 <HAL_RCC_OscConfig+0x120>
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000
 8006344:	40007000 	.word	0x40007000
 8006348:	20000008 	.word	0x20000008
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634c:	4a65      	ldr	r2, [pc, #404]	; (80064e4 <HAL_RCC_OscConfig+0x490>)
 800634e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800635a:	f7fe f917 	bl	800458c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800635e:	4f61      	ldr	r7, [pc, #388]	; (80064e4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006360:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006362:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006366:	e004      	b.n	8006372 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006368:	f7fe f910 	bl	800458c <HAL_GetTick>
 800636c:	1b80      	subs	r0, r0, r6
 800636e:	4540      	cmp	r0, r8
 8006370:	d8df      	bhi.n	8006332 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006376:	0799      	lsls	r1, r3, #30
 8006378:	d5f6      	bpl.n	8006368 <HAL_RCC_OscConfig+0x314>
 800637a:	e727      	b.n	80061cc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800637c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006388:	f7fe f900 	bl	800458c <HAL_GetTick>
 800638c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800638e:	e004      	b.n	800639a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006390:	f7fe f8fc 	bl	800458c <HAL_GetTick>
 8006394:	1b80      	subs	r0, r0, r6
 8006396:	2802      	cmp	r0, #2
 8006398:	d8cb      	bhi.n	8006332 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800639a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800639e:	0798      	lsls	r0, r3, #30
 80063a0:	d4f6      	bmi.n	8006390 <HAL_RCC_OscConfig+0x33c>
 80063a2:	e735      	b.n	8006210 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063a4:	6833      	ldr	r3, [r6, #0]
 80063a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80063ac:	f7fe f8ee 	bl	800458c <HAL_GetTick>
 80063b0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063b2:	6833      	ldr	r3, [r6, #0]
 80063b4:	05d8      	lsls	r0, r3, #23
 80063b6:	f53f aee2 	bmi.w	800617e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ba:	f7fe f8e7 	bl	800458c <HAL_GetTick>
 80063be:	1bc0      	subs	r0, r0, r7
 80063c0:	2802      	cmp	r0, #2
 80063c2:	d9f6      	bls.n	80063b2 <HAL_RCC_OscConfig+0x35e>
 80063c4:	e7b5      	b.n	8006332 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063ca:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80063dc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063de:	e78b      	b.n	80062f8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80063e0:	2001      	movs	r0, #1
}
 80063e2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80063e4:	f7fe f8d2 	bl	800458c <HAL_GetTick>
 80063e8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ea:	e004      	b.n	80063f6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fe f8ce 	bl	800458c <HAL_GetTick>
 80063f0:	1b80      	subs	r0, r0, r6
 80063f2:	2802      	cmp	r0, #2
 80063f4:	d89d      	bhi.n	8006332 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	0199      	lsls	r1, r3, #6
 80063fa:	d4f7      	bmi.n	80063ec <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063fc:	68e9      	ldr	r1, [r5, #12]
 80063fe:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <HAL_RCC_OscConfig+0x494>)
 8006400:	6a22      	ldr	r2, [r4, #32]
 8006402:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006406:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006408:	400b      	ands	r3, r1
 800640a:	4313      	orrs	r3, r2
 800640c:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8006410:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006414:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8006418:	3801      	subs	r0, #1
 800641a:	0849      	lsrs	r1, r1, #1
 800641c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006420:	3901      	subs	r1, #1
 8006422:	0852      	lsrs	r2, r2, #1
 8006424:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006428:	3a01      	subs	r2, #1
 800642a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800642e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006430:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006432:	4e2c      	ldr	r6, [pc, #176]	; (80064e4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8006434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006438:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800643a:	68eb      	ldr	r3, [r5, #12]
 800643c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006440:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006442:	f7fe f8a3 	bl	800458c <HAL_GetTick>
 8006446:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006448:	e005      	b.n	8006456 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644a:	f7fe f89f 	bl	800458c <HAL_GetTick>
 800644e:	1b00      	subs	r0, r0, r4
 8006450:	2802      	cmp	r0, #2
 8006452:	f63f af6e 	bhi.w	8006332 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006456:	6833      	ldr	r3, [r6, #0]
 8006458:	019a      	lsls	r2, r3, #6
 800645a:	d5f6      	bpl.n	800644a <HAL_RCC_OscConfig+0x3f6>
 800645c:	e6fe      	b.n	800625c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645e:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <HAL_RCC_OscConfig+0x490>)
 8006460:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006464:	f042 0204 	orr.w	r2, r2, #4
 8006468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800646c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006478:	e76f      	b.n	800635a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800647a:	2801      	cmp	r0, #1
 800647c:	f43f aeef 	beq.w	800625e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006480:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006482:	6a22      	ldr	r2, [r4, #32]
 8006484:	f003 0103 	and.w	r1, r3, #3
 8006488:	4291      	cmp	r1, r2
 800648a:	f47f af0d 	bne.w	80062a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800648e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006494:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006496:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800649a:	f47f af05 	bne.w	80062a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800649e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80064a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80064a8:	f47f aefe 	bne.w	80062a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80064ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064b2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80064b6:	f47f aef7 	bne.w	80062a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064bc:	0852      	lsrs	r2, r2, #1
 80064be:	3a01      	subs	r2, #1
 80064c0:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064c4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80064c8:	f47f aeee 	bne.w	80062a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80064ce:	0852      	lsrs	r2, r2, #1
 80064d0:	3a01      	subs	r2, #1
 80064d2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064d6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80064da:	bf14      	ite	ne
 80064dc:	2001      	movne	r0, #1
 80064de:	2000      	moveq	r0, #0
 80064e0:	e6bd      	b.n	800625e <HAL_RCC_OscConfig+0x20a>
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000
 80064e8:	019f800c 	.word	0x019f800c

080064ec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <HAL_RCC_GetSysClockFreq+0x64>)
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	f002 020c 	and.w	r2, r2, #12
 80064f4:	2a04      	cmp	r2, #4
 80064f6:	d027      	beq.n	8006548 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	f002 020c 	and.w	r2, r2, #12
 80064fe:	2a08      	cmp	r2, #8
 8006500:	d024      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	f002 020c 	and.w	r2, r2, #12
 8006508:	2a0c      	cmp	r2, #12
 800650a:	d001      	beq.n	8006510 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800650c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800650e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006510:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006512:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006514:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006516:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800651a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 800651e:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006520:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006524:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006528:	bf0c      	ite	eq
 800652a:	480a      	ldreq	r0, [pc, #40]	; (8006554 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800652c:	480a      	ldrne	r0, [pc, #40]	; (8006558 <HAL_RCC_GetSysClockFreq+0x6c>)
 800652e:	fbb0 f0f2 	udiv	r0, r0, r2
 8006532:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <HAL_RCC_GetSysClockFreq+0x64>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800653e:	3301      	adds	r3, #1
 8006540:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006542:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006546:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006548:	4803      	ldr	r0, [pc, #12]	; (8006558 <HAL_RCC_GetSysClockFreq+0x6c>)
 800654a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <HAL_RCC_GetSysClockFreq+0x68>)
 800654e:	4770      	bx	lr
 8006550:	40021000 	.word	0x40021000
 8006554:	007a1200 	.word	0x007a1200
 8006558:	00f42400 	.word	0x00f42400

0800655c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800655c:	2800      	cmp	r0, #0
 800655e:	f000 80ef 	beq.w	8006740 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006562:	4a7f      	ldr	r2, [pc, #508]	; (8006760 <HAL_RCC_ClockConfig+0x204>)
{
 8006564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006568:	6813      	ldr	r3, [r2, #0]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	428b      	cmp	r3, r1
 8006570:	460d      	mov	r5, r1
 8006572:	4604      	mov	r4, r0
 8006574:	d20c      	bcs.n	8006590 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006576:	6813      	ldr	r3, [r2, #0]
 8006578:	f023 030f 	bic.w	r3, r3, #15
 800657c:	430b      	orrs	r3, r1
 800657e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006580:	6813      	ldr	r3, [r2, #0]
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	428b      	cmp	r3, r1
 8006588:	d002      	beq.n	8006590 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800658a:	2001      	movs	r0, #1
}
 800658c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07de      	lsls	r6, r3, #31
 8006594:	d563      	bpl.n	800665e <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	2a03      	cmp	r2, #3
 800659a:	f000 809a 	beq.w	80066d2 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659e:	4b71      	ldr	r3, [pc, #452]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a0:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065a2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a4:	f000 8091 	beq.w	80066ca <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065a8:	055b      	lsls	r3, r3, #21
 80065aa:	d5ee      	bpl.n	800658a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065ac:	f7ff ff9e 	bl	80064ec <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80065b0:	4b6d      	ldr	r3, [pc, #436]	; (8006768 <HAL_RCC_ClockConfig+0x20c>)
 80065b2:	4298      	cmp	r0, r3
 80065b4:	f200 80c6 	bhi.w	8006744 <HAL_RCC_ClockConfig+0x1e8>
 80065b8:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065ba:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065be:	4e69      	ldr	r6, [pc, #420]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 80065c0:	68b3      	ldr	r3, [r6, #8]
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	431a      	orrs	r2, r3
 80065c8:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80065ca:	f7fd ffdf 	bl	800458c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80065d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d4:	e004      	b.n	80065e0 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d6:	f7fd ffd9 	bl	800458c <HAL_GetTick>
 80065da:	1bc0      	subs	r0, r0, r7
 80065dc:	4540      	cmp	r0, r8
 80065de:	d871      	bhi.n	80066c4 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e0:	68b3      	ldr	r3, [r6, #8]
 80065e2:	6862      	ldr	r2, [r4, #4]
 80065e4:	f003 030c 	and.w	r3, r3, #12
 80065e8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80065ec:	d1f3      	bne.n	80065d6 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	079f      	lsls	r7, r3, #30
 80065f2:	d436      	bmi.n	8006662 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80065f4:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80065f8:	d103      	bne.n	8006602 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065fa:	68b3      	ldr	r3, [r6, #8]
 80065fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006600:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006602:	4e57      	ldr	r6, [pc, #348]	; (8006760 <HAL_RCC_ClockConfig+0x204>)
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	42ab      	cmp	r3, r5
 800660c:	d846      	bhi.n	800669c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	075a      	lsls	r2, r3, #29
 8006612:	d506      	bpl.n	8006622 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006614:	4953      	ldr	r1, [pc, #332]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 8006616:	68e0      	ldr	r0, [r4, #12]
 8006618:	688a      	ldr	r2, [r1, #8]
 800661a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800661e:	4302      	orrs	r2, r0
 8006620:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006622:	071b      	lsls	r3, r3, #28
 8006624:	d507      	bpl.n	8006636 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006626:	4a4f      	ldr	r2, [pc, #316]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 8006628:	6921      	ldr	r1, [r4, #16]
 800662a:	6893      	ldr	r3, [r2, #8]
 800662c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006630:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006634:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006636:	f7ff ff59 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 800663a:	4a4a      	ldr	r2, [pc, #296]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 800663c:	4c4b      	ldr	r4, [pc, #300]	; (800676c <HAL_RCC_ClockConfig+0x210>)
 800663e:	6892      	ldr	r2, [r2, #8]
 8006640:	494b      	ldr	r1, [pc, #300]	; (8006770 <HAL_RCC_ClockConfig+0x214>)
 8006642:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006646:	4603      	mov	r3, r0
 8006648:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800664a:	484a      	ldr	r0, [pc, #296]	; (8006774 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800664c:	f002 021f 	and.w	r2, r2, #31
 8006650:	40d3      	lsrs	r3, r2
 8006652:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006654:	6800      	ldr	r0, [r0, #0]
}
 8006656:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800665a:	f7fd bf55 	b.w	8004508 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800665e:	0798      	lsls	r0, r3, #30
 8006660:	d5cf      	bpl.n	8006602 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006662:	0758      	lsls	r0, r3, #29
 8006664:	d504      	bpl.n	8006670 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006666:	493f      	ldr	r1, [pc, #252]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 8006668:	688a      	ldr	r2, [r1, #8]
 800666a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800666e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006670:	0719      	lsls	r1, r3, #28
 8006672:	d506      	bpl.n	8006682 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006674:	4a3b      	ldr	r2, [pc, #236]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 8006676:	6893      	ldr	r3, [r2, #8]
 8006678:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800667c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006680:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006682:	4a38      	ldr	r2, [pc, #224]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 8006684:	68a1      	ldr	r1, [r4, #8]
 8006686:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006688:	4e35      	ldr	r6, [pc, #212]	; (8006760 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800668a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800668e:	430b      	orrs	r3, r1
 8006690:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006692:	6833      	ldr	r3, [r6, #0]
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	42ab      	cmp	r3, r5
 800669a:	d9b8      	bls.n	800660e <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	f023 030f 	bic.w	r3, r3, #15
 80066a2:	432b      	orrs	r3, r5
 80066a4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80066a6:	f7fd ff71 	bl	800458c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80066ae:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	42ab      	cmp	r3, r5
 80066b8:	d0a9      	beq.n	800660e <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ba:	f7fd ff67 	bl	800458c <HAL_GetTick>
 80066be:	1bc0      	subs	r0, r0, r7
 80066c0:	4540      	cmp	r0, r8
 80066c2:	d9f5      	bls.n	80066b0 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80066c4:	2003      	movs	r0, #3
}
 80066c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066ca:	039a      	lsls	r2, r3, #14
 80066cc:	f53f af6e 	bmi.w	80065ac <HAL_RCC_ClockConfig+0x50>
 80066d0:	e75b      	b.n	800658a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066d2:	4824      	ldr	r0, [pc, #144]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 80066d4:	6801      	ldr	r1, [r0, #0]
 80066d6:	0189      	lsls	r1, r1, #6
 80066d8:	f57f af57 	bpl.w	800658a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066dc:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066de:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066e0:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066e2:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e6:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80066ea:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066ec:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066f0:	bf0c      	ite	eq
 80066f2:	4921      	ldreq	r1, [pc, #132]	; (8006778 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066f4:	4921      	ldrne	r1, [pc, #132]	; (800677c <HAL_RCC_ClockConfig+0x220>)
 80066f6:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066fa:	4e1a      	ldr	r6, [pc, #104]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80066fc:	4f1a      	ldr	r7, [pc, #104]	; (8006768 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066fe:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8006702:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006706:	68f0      	ldr	r0, [r6, #12]
 8006708:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800670c:	3001      	adds	r0, #1
 800670e:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8006710:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8006714:	42b9      	cmp	r1, r7
 8006716:	d920      	bls.n	800675a <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006718:	68b1      	ldr	r1, [r6, #8]
 800671a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x1d0>
 8006720:	f013 0902 	ands.w	r9, r3, #2
 8006724:	f43f af4b 	beq.w	80065be <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006728:	68a3      	ldr	r3, [r4, #8]
 800672a:	b9b3      	cbnz	r3, 800675a <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800672c:	490d      	ldr	r1, [pc, #52]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 800672e:	688b      	ldr	r3, [r1, #8]
 8006730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006738:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 800673a:	f04f 0980 	mov.w	r9, #128	; 0x80
 800673e:	e73e      	b.n	80065be <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8006740:	2001      	movs	r0, #1
}
 8006742:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006744:	4a07      	ldr	r2, [pc, #28]	; (8006764 <HAL_RCC_ClockConfig+0x208>)
 8006746:	6893      	ldr	r3, [r2, #8]
 8006748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006750:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006752:	6862      	ldr	r2, [r4, #4]
 8006754:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006758:	e731      	b.n	80065be <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800675a:	f04f 0900 	mov.w	r9, #0
 800675e:	e72e      	b.n	80065be <HAL_RCC_ClockConfig+0x62>
 8006760:	40022000 	.word	0x40022000
 8006764:	40021000 	.word	0x40021000
 8006768:	04c4b400 	.word	0x04c4b400
 800676c:	0800e9e0 	.word	0x0800e9e0
 8006770:	20000000 	.word	0x20000000
 8006774:	20000008 	.word	0x20000008
 8006778:	007a1200 	.word	0x007a1200
 800677c:	00f42400 	.word	0x00f42400

08006780 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006782:	4a06      	ldr	r2, [pc, #24]	; (800679c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006784:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006786:	4906      	ldr	r1, [pc, #24]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006788:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800678c:	6808      	ldr	r0, [r1, #0]
 800678e:	5cd3      	ldrb	r3, [r2, r3]
 8006790:	f003 031f 	and.w	r3, r3, #31
}
 8006794:	40d8      	lsrs	r0, r3
 8006796:	4770      	bx	lr
 8006798:	40021000 	.word	0x40021000
 800679c:	0800e9f0 	.word	0x0800e9f0
 80067a0:	20000000 	.word	0x20000000

080067a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80067a6:	4a06      	ldr	r2, [pc, #24]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80067a8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80067aa:	4906      	ldr	r1, [pc, #24]	; (80067c4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067ac:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80067b0:	6808      	ldr	r0, [r1, #0]
 80067b2:	5cd3      	ldrb	r3, [r2, r3]
 80067b4:	f003 031f 	and.w	r3, r3, #31
}
 80067b8:	40d8      	lsrs	r0, r3
 80067ba:	4770      	bx	lr
 80067bc:	40021000 	.word	0x40021000
 80067c0:	0800e9f0 	.word	0x0800e9f0
 80067c4:	20000000 	.word	0x20000000

080067c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067cc:	6803      	ldr	r3, [r0, #0]
{
 80067ce:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067d0:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80067d4:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067d6:	d056      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067d8:	4bb6      	ldr	r3, [pc, #728]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80067da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067dc:	00d5      	lsls	r5, r2, #3
 80067de:	f140 813e 	bpl.w	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 80067e2:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067e4:	4db4      	ldr	r5, [pc, #720]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067e6:	682b      	ldr	r3, [r5, #0]
 80067e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ec:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067ee:	f7fd fecd 	bl	800458c <HAL_GetTick>
 80067f2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f4:	e005      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f6:	f7fd fec9 	bl	800458c <HAL_GetTick>
 80067fa:	1b83      	subs	r3, r0, r6
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	f200 8139 	bhi.w	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	05d8      	lsls	r0, r3, #23
 8006806:	d5f6      	bpl.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006808:	4daa      	ldr	r5, [pc, #680]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800680a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800680e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006812:	d027      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006814:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006816:	429a      	cmp	r2, r3
 8006818:	d025      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800681a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800681e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006826:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800682a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800682e:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006836:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006838:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800683c:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006840:	f140 8148 	bpl.w	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fd fea2 	bl	800458c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006848:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800684c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684e:	e005      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006850:	f7fd fe9c 	bl	800458c <HAL_GetTick>
 8006854:	1b80      	subs	r0, r0, r6
 8006856:	4540      	cmp	r0, r8
 8006858:	f200 810c 	bhi.w	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800685c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006860:	079b      	lsls	r3, r3, #30
 8006862:	d5f5      	bpl.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006864:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006866:	4993      	ldr	r1, [pc, #588]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006868:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800686c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006876:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006878:	b127      	cbz	r7, 8006884 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800687a:	4a8e      	ldr	r2, [pc, #568]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800687c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800687e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006882:	6593      	str	r3, [r2, #88]	; 0x58
 8006884:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006886:	07dd      	lsls	r5, r3, #31
 8006888:	d508      	bpl.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800688a:	498a      	ldr	r1, [pc, #552]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800688c:	6865      	ldr	r5, [r4, #4]
 800688e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006892:	f022 0203 	bic.w	r2, r2, #3
 8006896:	432a      	orrs	r2, r5
 8006898:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800689c:	0799      	lsls	r1, r3, #30
 800689e:	d508      	bpl.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068a0:	4984      	ldr	r1, [pc, #528]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80068a2:	68a5      	ldr	r5, [r4, #8]
 80068a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068a8:	f022 020c 	bic.w	r2, r2, #12
 80068ac:	432a      	orrs	r2, r5
 80068ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068b2:	075a      	lsls	r2, r3, #29
 80068b4:	d508      	bpl.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068b6:	497f      	ldr	r1, [pc, #508]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80068b8:	68e5      	ldr	r5, [r4, #12]
 80068ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068be:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80068c2:	432a      	orrs	r2, r5
 80068c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068c8:	071f      	lsls	r7, r3, #28
 80068ca:	d508      	bpl.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068cc:	4979      	ldr	r1, [pc, #484]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80068ce:	6925      	ldr	r5, [r4, #16]
 80068d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80068d8:	432a      	orrs	r2, r5
 80068da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068de:	06de      	lsls	r6, r3, #27
 80068e0:	d508      	bpl.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068e2:	4974      	ldr	r1, [pc, #464]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80068e4:	6965      	ldr	r5, [r4, #20]
 80068e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80068ee:	432a      	orrs	r2, r5
 80068f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068f4:	069d      	lsls	r5, r3, #26
 80068f6:	d508      	bpl.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068f8:	496e      	ldr	r1, [pc, #440]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80068fa:	69a5      	ldr	r5, [r4, #24]
 80068fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006900:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006904:	432a      	orrs	r2, r5
 8006906:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800690a:	0659      	lsls	r1, r3, #25
 800690c:	d508      	bpl.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800690e:	4969      	ldr	r1, [pc, #420]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006910:	69e5      	ldr	r5, [r4, #28]
 8006912:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006916:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800691a:	432a      	orrs	r2, r5
 800691c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006920:	061a      	lsls	r2, r3, #24
 8006922:	d508      	bpl.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006924:	4963      	ldr	r1, [pc, #396]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006926:	6a25      	ldr	r5, [r4, #32]
 8006928:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800692c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006930:	432a      	orrs	r2, r5
 8006932:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006936:	05df      	lsls	r7, r3, #23
 8006938:	d508      	bpl.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800693a:	495e      	ldr	r1, [pc, #376]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800693c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800693e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006942:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006946:	432a      	orrs	r2, r5
 8006948:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800694c:	039e      	lsls	r6, r3, #14
 800694e:	d508      	bpl.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006950:	4958      	ldr	r1, [pc, #352]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006952:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006954:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8006958:	f022 0203 	bic.w	r2, r2, #3
 800695c:	432a      	orrs	r2, r5
 800695e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006962:	059d      	lsls	r5, r3, #22
 8006964:	d508      	bpl.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006966:	4953      	ldr	r1, [pc, #332]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006968:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800696a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800696e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006972:	432a      	orrs	r2, r5
 8006974:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006978:	0559      	lsls	r1, r3, #21
 800697a:	d50b      	bpl.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800697c:	494d      	ldr	r1, [pc, #308]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800697e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006980:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006984:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006988:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800698a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800698e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006992:	d071      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006994:	051a      	lsls	r2, r3, #20
 8006996:	d50b      	bpl.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006998:	4946      	ldr	r1, [pc, #280]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800699a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800699c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069a0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80069a4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069a6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069ae:	d068      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069b0:	04df      	lsls	r7, r3, #19
 80069b2:	d50b      	bpl.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069b4:	493f      	ldr	r1, [pc, #252]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80069b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80069b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80069c0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069c2:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069ca:	d05f      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069cc:	049e      	lsls	r6, r3, #18
 80069ce:	d50b      	bpl.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069d0:	4938      	ldr	r1, [pc, #224]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80069d2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80069d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069d8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80069dc:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069de:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069e6:	d056      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069e8:	045d      	lsls	r5, r3, #17
 80069ea:	d50b      	bpl.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069ec:	4931      	ldr	r1, [pc, #196]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80069ee:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80069f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069f4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80069f8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069fa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a02:	d04d      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a04:	0419      	lsls	r1, r3, #16
 8006a06:	d50b      	bpl.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a08:	492a      	ldr	r1, [pc, #168]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006a0a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8006a0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a14:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a16:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a1e:	d044      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006a20:	03da      	lsls	r2, r3, #15
 8006a22:	d50b      	bpl.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a24:	4923      	ldr	r1, [pc, #140]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006a26:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8006a28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006a2c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006a30:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a32:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006a36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006a3a:	d03f      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a3c:	035b      	lsls	r3, r3, #13
 8006a3e:	d50b      	bpl.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a40:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006a42:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006a44:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006a48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a4c:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006a4e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006a56:	d036      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8006a58:	b002      	add	sp, #8
 8006a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a64:	659a      	str	r2, [r3, #88]	; 0x58
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006a70:	2701      	movs	r7, #1
 8006a72:	e6b7      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8006a74:	2003      	movs	r0, #3
 8006a76:	e6ff      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a78:	68ca      	ldr	r2, [r1, #12]
 8006a7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a7e:	60ca      	str	r2, [r1, #12]
 8006a80:	e788      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a82:	68ca      	ldr	r2, [r1, #12]
 8006a84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a88:	60ca      	str	r2, [r1, #12]
 8006a8a:	e791      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a8c:	68ca      	ldr	r2, [r1, #12]
 8006a8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a92:	60ca      	str	r2, [r1, #12]
 8006a94:	e79a      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a96:	68ca      	ldr	r2, [r1, #12]
 8006a98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006a9c:	60ca      	str	r2, [r1, #12]
 8006a9e:	e7a3      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aa0:	68ca      	ldr	r2, [r1, #12]
 8006aa2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006aa6:	60ca      	str	r2, [r1, #12]
 8006aa8:	e7ac      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006aaa:	68ca      	ldr	r2, [r1, #12]
 8006aac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ab0:	60ca      	str	r2, [r1, #12]
 8006ab2:	e7b5      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006abc:	68ca      	ldr	r2, [r1, #12]
 8006abe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ac2:	60ca      	str	r2, [r1, #12]
 8006ac4:	e7ba      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac6:	68d3      	ldr	r3, [r2, #12]
 8006ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006acc:	60d3      	str	r3, [r2, #12]
}
 8006ace:	b002      	add	sp, #8
 8006ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	e6c6      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9e>

08006ad8 <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b083      	sub	sp, #12
 8006adc:	460c      	mov	r4, r1
 8006ade:	4617      	mov	r7, r2
 8006ae0:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ae2:	f7fd fd53 	bl	800458c <HAL_GetTick>
 8006ae6:	4427      	add	r7, r4
 8006ae8:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 8006aea:	f7fd fd4f 	bl	800458c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006aee:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006af6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006afa:	0d1b      	lsrs	r3, r3, #20
 8006afc:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8006b00:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b02:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b04:	682a      	ldr	r2, [r5, #0]
 8006b06:	1c61      	adds	r1, r4, #1
 8006b08:	6893      	ldr	r3, [r2, #8]
 8006b0a:	d10d      	bne.n	8006b28 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8006b0c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006b10:	d007      	beq.n	8006b22 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006b12:	7b13      	ldrb	r3, [r2, #12]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006b18:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b1a:	6893      	ldr	r3, [r2, #8]
 8006b1c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006b20:	d1f7      	bne.n	8006b12 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8006b22:	2000      	movs	r0, #0
}
 8006b24:	b003      	add	sp, #12
 8006b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8006b28:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006b2c:	d0f9      	beq.n	8006b22 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006b2e:	7b13      	ldrb	r3, [r2, #12]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8006b34:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b36:	f7fd fd29 	bl	800458c <HAL_GetTick>
 8006b3a:	1bc0      	subs	r0, r0, r7
 8006b3c:	42b0      	cmp	r0, r6
 8006b3e:	d208      	bcs.n	8006b52 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8006b40:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006b42:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006b44:	2a00      	cmp	r2, #0
      count--;
 8006b46:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006b4a:	bf08      	it	eq
 8006b4c:	2600      	moveq	r6, #0
      count--;
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	e7d8      	b.n	8006b04 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b52:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b56:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b58:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b60:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b62:	d014      	beq.n	8006b8e <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b64:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006b66:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006b6a:	d007      	beq.n	8006b7c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 8006b6c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006b6e:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8006b70:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006b74:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8006b78:	2003      	movs	r0, #3
 8006b7a:	e7d3      	b.n	8006b24 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	e7ee      	b.n	8006b6c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b8e:	68aa      	ldr	r2, [r5, #8]
 8006b90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006b94:	d002      	beq.n	8006b9c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b96:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006b9a:	d1e3      	bne.n	8006b64 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e7de      	b.n	8006b64 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 8006ba6:	bf00      	nop
 8006ba8:	20000000 	.word	0x20000000

08006bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	eb01 0802 	add.w	r8, r1, r2
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	4616      	mov	r6, r2
 8006bba:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bbc:	f7fd fce6 	bl	800458c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006bc0:	4f46      	ldr	r7, [pc, #280]	; (8006cdc <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bc2:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 8006bc6:	f7fd fce1 	bl	800458c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006bd0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006bd4:	0d1b      	lsrs	r3, r3, #20
 8006bd6:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8006bda:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006bdc:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006bde:	1c68      	adds	r0, r5, #1
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	d11f      	bne.n	8006c24 <SPI_EndRxTxTransaction+0x78>
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8006bea:	d1fb      	bne.n	8006be4 <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bec:	f7fd fcce 	bl	800458c <HAL_GetTick>
 8006bf0:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 8006bf4:	f7fd fcca 	bl	800458c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006bfe:	fb08 f303 	mul.w	r3, r8, r3
 8006c02:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 8006c04:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c06:	1c69      	adds	r1, r5, #1
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	d11f      	bne.n	8006c4c <SPI_EndRxTxTransaction+0xa0>
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	0612      	lsls	r2, r2, #24
 8006c10:	d4fc      	bmi.n	8006c0c <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c12:	4632      	mov	r2, r6
 8006c14:	4629      	mov	r1, r5
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff ff5e 	bl	8006ad8 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8006c1c:	bb40      	cbnz	r0, 8006c70 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006c1e:	b002      	add	sp, #8
 8006c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8006c2a:	d0df      	beq.n	8006bec <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c2c:	f7fd fcae 	bl	800458c <HAL_GetTick>
 8006c30:	eba0 000a 	sub.w	r0, r0, sl
 8006c34:	4548      	cmp	r0, r9
 8006c36:	d221      	bcs.n	8006c7c <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8006c38:	9a00      	ldr	r2, [sp, #0]
      count--;
 8006c3a:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 8006c3c:	2a00      	cmp	r2, #0
      count--;
 8006c3e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006c42:	bf08      	it	eq
 8006c44:	f04f 0900 	moveq.w	r9, #0
      count--;
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	e7c8      	b.n	8006bde <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	061b      	lsls	r3, r3, #24
 8006c50:	d5df      	bpl.n	8006c12 <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c52:	f7fd fc9b 	bl	800458c <HAL_GetTick>
 8006c56:	1bc3      	subs	r3, r0, r7
 8006c58:	4543      	cmp	r3, r8
 8006c5a:	d20f      	bcs.n	8006c7c <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8006c5c:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006c5e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006c60:	2a00      	cmp	r2, #0
      count--;
 8006c62:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006c66:	bf08      	it	eq
 8006c68:	f04f 0800 	moveq.w	r8, #0
      count--;
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	e7ca      	b.n	8006c06 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006c72:	f043 0320 	orr.w	r3, r3, #32
 8006c76:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c78:	2003      	movs	r0, #3
 8006c7a:	e7d0      	b.n	8006c1e <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7c:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c80:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c82:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c8a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8c:	d019      	beq.n	8006cc2 <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006c90:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006c94:	d107      	bne.n	8006ca6 <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ca4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cac:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8006cae:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cb0:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8006cb4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cb6:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8006cb8:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8006cbc:	b002      	add	sp, #8
 8006cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc2:	68a2      	ldr	r2, [r4, #8]
 8006cc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006cc8:	d002      	beq.n	8006cd0 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006cce:	d1de      	bne.n	8006c8e <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	e7d9      	b.n	8006c8e <SPI_EndRxTxTransaction+0xe2>
 8006cda:	bf00      	nop
 8006cdc:	20000000 	.word	0x20000000

08006ce0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d07f      	beq.n	8006de4 <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ce4:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cee:	f1bc 0f00 	cmp.w	ip, #0
 8006cf2:	d05c      	beq.n	8006dae <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cf4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cfa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cfe:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d00:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d04:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d05e      	beq.n	8006dc8 <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 8006d0a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d0c:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006d14:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d16:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8006d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d1e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d20:	d94c      	bls.n	8006dbc <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d22:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8006d26:	d15f      	bne.n	8006de8 <HAL_SPI_Init+0x108>
 8006d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d2a:	2700      	movs	r7, #0
 8006d2c:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d30:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8006d34:	6925      	ldr	r5, [r4, #16]
 8006d36:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8006d3a:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8006d3e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006d42:	4333      	orrs	r3, r6
 8006d44:	f005 0502 	and.w	r5, r5, #2
 8006d48:	432b      	orrs	r3, r5
 8006d4a:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d4c:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d50:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d54:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d56:	432b      	orrs	r3, r5
 8006d58:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d5c:	f002 0208 	and.w	r2, r2, #8
 8006d60:	ea42 0208 	orr.w	r2, r2, r8
 8006d64:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d68:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d6c:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d70:	ea43 030e 	orr.w	r3, r3, lr
 8006d74:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d78:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d7c:	4333      	orrs	r3, r6
 8006d7e:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d82:	f00c 0c10 	and.w	ip, ip, #16
 8006d86:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d8a:	432b      	orrs	r3, r5
 8006d8c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d8e:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d92:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d94:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d96:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d98:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006d9e:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006da0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006da2:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006da4:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 8006da8:	4610      	mov	r0, r2
}
 8006daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dae:	6843      	ldr	r3, [r0, #4]
 8006db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db4:	d0a1      	beq.n	8006cfa <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006db6:	f8c0 c01c 	str.w	ip, [r0, #28]
 8006dba:	e79e      	b.n	8006cfa <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006dbc:	d00c      	beq.n	8006dd8 <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006dbe:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	62a0      	str	r0, [r4, #40]	; 0x28
 8006dc6:	e7b3      	b.n	8006d30 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 8006dc8:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7fd f83b 	bl	8003e48 <HAL_SPI_MspInit>
 8006dd2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8006dd6:	e798      	b.n	8006d0a <HAL_SPI_Init+0x2a>
 8006dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006dda:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8006dde:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8006de2:	e7a5      	b.n	8006d30 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8006de4:	2001      	movs	r0, #1
}
 8006de6:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006de8:	2700      	movs	r7, #0
 8006dea:	e7ea      	b.n	8006dc2 <HAL_SPI_Init+0xe2>

08006dec <HAL_SPI_TransmitReceive>:
{
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006df2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8006df6:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8006df8:	2801      	cmp	r0, #1
 8006dfa:	f000 809d 	beq.w	8006f38 <HAL_SPI_TransmitReceive+0x14c>
 8006dfe:	4698      	mov	r8, r3
 8006e00:	2301      	movs	r3, #1
 8006e02:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8006e06:	468a      	mov	sl, r1
 8006e08:	4691      	mov	r9, r2
 8006e0a:	f7fd fbbf 	bl	800458c <HAL_GetTick>
  tmp_state           = hspi->State;
 8006e0e:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006e12:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e14:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 8006e16:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8006e18:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e1a:	d010      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x52>
 8006e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e20:	d008      	beq.n	8006e34 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8006e22:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006e24:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8006e26:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006e28:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e2c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e34:	68a2      	ldr	r2, [r4, #8]
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	d1f3      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x36>
 8006e3a:	2904      	cmp	r1, #4
 8006e3c:	d1f1      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e3e:	f1ba 0f00 	cmp.w	sl, #0
 8006e42:	d07c      	beq.n	8006f3e <HAL_SPI_TransmitReceive+0x152>
 8006e44:	f1b9 0f00 	cmp.w	r9, #0
 8006e48:	d079      	beq.n	8006f3e <HAL_SPI_TransmitReceive+0x152>
 8006e4a:	f1b8 0f00 	cmp.w	r8, #0
 8006e4e:	d076      	beq.n	8006f3e <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e50:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e54:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e58:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e5a:	bf1c      	itt	ne
 8006e5c:	2205      	movne	r2, #5
 8006e5e:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e62:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 8006e64:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e68:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e6a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e6e:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e70:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8006e72:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8006e76:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e7a:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e7e:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e82:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 8006e84:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e88:	d85b      	bhi.n	8006f42 <HAL_SPI_TransmitReceive+0x156>
 8006e8a:	f1b8 0f01 	cmp.w	r8, #1
 8006e8e:	f240 80ea 	bls.w	8007066 <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e92:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8006e96:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e98:	6811      	ldr	r1, [r2, #0]
 8006e9a:	0649      	lsls	r1, r1, #25
 8006e9c:	f140 80ea 	bpl.w	8007074 <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ea0:	b96b      	cbnz	r3, 8006ebe <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 8006ea2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	f240 8120 	bls.w	80070ec <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eac:	4651      	mov	r1, sl
 8006eae:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006eb2:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8006eb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eb6:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006eb8:	3b02      	subs	r3, #2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006ebe:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	b92b      	cbnz	r3, 8006ed2 <HAL_SPI_TransmitReceive+0xe6>
 8006ec6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8084 	beq.w	8006fda <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	6893      	ldr	r3, [r2, #8]
 8006ed6:	0799      	lsls	r1, r3, #30
 8006ed8:	d505      	bpl.n	8006ee6 <HAL_SPI_TransmitReceive+0xfa>
 8006eda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	b113      	cbz	r3, 8006ee6 <HAL_SPI_TransmitReceive+0xfa>
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	f040 80e1 	bne.w	80070a8 <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ee6:	6893      	ldr	r3, [r2, #8]
 8006ee8:	f013 0301 	ands.w	r3, r3, #1
 8006eec:	d01b      	beq.n	8006f26 <HAL_SPI_TransmitReceive+0x13a>
 8006eee:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006ef2:	b289      	uxth	r1, r1
 8006ef4:	b1b9      	cbz	r1, 8006f26 <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 8006ef6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006efa:	b289      	uxth	r1, r1
 8006efc:	2901      	cmp	r1, #1
 8006efe:	f240 80c5 	bls.w	800708c <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f02:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006f04:	68d1      	ldr	r1, [r2, #12]
 8006f06:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 8006f0a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f0e:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006f10:	3902      	subs	r1, #2
 8006f12:	b289      	uxth	r1, r1
 8006f14:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006f18:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006f1c:	b289      	uxth	r1, r1
 8006f1e:	2901      	cmp	r1, #1
 8006f20:	f240 80d1 	bls.w	80070c6 <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 8006f24:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f26:	f7fd fb31 	bl	800458c <HAL_GetTick>
 8006f2a:	1b40      	subs	r0, r0, r5
 8006f2c:	42b0      	cmp	r0, r6
 8006f2e:	d3c7      	bcc.n	8006ec0 <HAL_SPI_TransmitReceive+0xd4>
 8006f30:	1c73      	adds	r3, r6, #1
 8006f32:	d0c5      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 8006f34:	2003      	movs	r0, #3
 8006f36:	e775      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8006f38:	2002      	movs	r0, #2
}
 8006f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e770      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f42:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8006f46:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f48:	6811      	ldr	r1, [r2, #0]
 8006f4a:	0648      	lsls	r0, r1, #25
 8006f4c:	d403      	bmi.n	8006f56 <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8006f4e:	6811      	ldr	r1, [r2, #0]
 8006f50:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006f54:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 8081 	bne.w	800705e <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006f62:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8006f64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f66:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006f6e:	1c72      	adds	r2, r6, #1
{
 8006f70:	f04f 0701 	mov.w	r7, #1
 8006f74:	d028      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x1dc>
 8006f76:	e06d      	b.n	8007054 <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	6893      	ldr	r3, [r2, #8]
 8006f7c:	079b      	lsls	r3, r3, #30
 8006f7e:	d50d      	bpl.n	8006f9c <HAL_SPI_TransmitReceive+0x1b0>
 8006f80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	b153      	cbz	r3, 8006f9c <HAL_SPI_TransmitReceive+0x1b0>
 8006f86:	b14f      	cbz	r7, 8006f9c <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f8a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006f8e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8006f90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f92:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8006f9a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f9c:	6893      	ldr	r3, [r2, #8]
 8006f9e:	f013 0301 	ands.w	r3, r3, #1
 8006fa2:	d00f      	beq.n	8006fc4 <HAL_SPI_TransmitReceive+0x1d8>
 8006fa4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8006fa8:	b289      	uxth	r1, r1
 8006faa:	b159      	cbz	r1, 8006fc4 <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006fae:	68d2      	ldr	r2, [r2, #12]
 8006fb0:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8006fb4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fb8:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	b292      	uxth	r2, r2
        txallowed = 1U;
 8006fbe:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8006fc0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fc4:	f7fd fae2 	bl	800458c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1d3      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x18c>
 8006fd0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1ce      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fda:	462a      	mov	r2, r5
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f7ff fde4 	bl	8006bac <SPI_EndRxTxTransaction>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f43f af1d 	beq.w	8006e24 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fea:	2320      	movs	r3, #32
 8006fec:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006fee:	2001      	movs	r0, #1
 8006ff0:	e718      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0ee      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	6893      	ldr	r3, [r2, #8]
 8007000:	0798      	lsls	r0, r3, #30
 8007002:	d50d      	bpl.n	8007020 <HAL_SPI_TransmitReceive+0x234>
 8007004:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	b153      	cbz	r3, 8007020 <HAL_SPI_TransmitReceive+0x234>
 800700a:	b14f      	cbz	r7, 8007020 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800700c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800700e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007012:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8007014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007016:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007018:	3b01      	subs	r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800701e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007020:	6893      	ldr	r3, [r2, #8]
 8007022:	f013 0301 	ands.w	r3, r3, #1
 8007026:	d00f      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x25c>
 8007028:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800702c:	b289      	uxth	r1, r1
 800702e:	b159      	cbz	r1, 8007048 <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007030:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007032:	68d2      	ldr	r2, [r2, #12]
 8007034:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8007038:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800703c:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800703e:	3a01      	subs	r2, #1
 8007040:	b292      	uxth	r2, r2
        txallowed = 1U;
 8007042:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8007044:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007048:	f7fd faa0 	bl	800458c <HAL_GetTick>
 800704c:	1b40      	subs	r0, r0, r5
 800704e:	42b0      	cmp	r0, r6
 8007050:	f4bf af70 	bcs.w	8006f34 <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007054:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1cf      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x210>
 800705c:	e7c9      	b.n	8006ff2 <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800705e:	f1b8 0f01 	cmp.w	r8, #1
 8007062:	d184      	bne.n	8006f6e <HAL_SPI_TransmitReceive+0x182>
 8007064:	e77a      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007066:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800706a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800706c:	6811      	ldr	r1, [r2, #0]
 800706e:	0649      	lsls	r1, r1, #25
 8007070:	f53f af17 	bmi.w	8006ea2 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8007074:	6811      	ldr	r1, [r2, #0]
 8007076:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800707a:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800707c:	2b00      	cmp	r3, #0
 800707e:	f43f af10 	beq.w	8006ea2 <HAL_SPI_TransmitReceive+0xb6>
 8007082:	f1b8 0f01 	cmp.w	r8, #1
 8007086:	f47f af1a 	bne.w	8006ebe <HAL_SPI_TransmitReceive+0xd2>
 800708a:	e70a      	b.n	8006ea2 <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800708c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800708e:	7b12      	ldrb	r2, [r2, #12]
 8007090:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8007092:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8007096:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007098:	3a01      	subs	r2, #1
 800709a:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 800709c:	3101      	adds	r1, #1
        txallowed = 1U;
 800709e:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 80070a0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 80070a4:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80070a6:	e73e      	b.n	8006f26 <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 80070a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d910      	bls.n	80070d2 <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80070b2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80070b6:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 80070b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ba:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070bc:	3b02      	subs	r3, #2
 80070be:	b29b      	uxth	r3, r3
 80070c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80070c2:	2700      	movs	r7, #0
 80070c4:	e70f      	b.n	8006ee6 <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c6:	6851      	ldr	r1, [r2, #4]
 80070c8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 80070cc:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ce:	6051      	str	r1, [r2, #4]
 80070d0:	e729      	b.n	8006f26 <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80070d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80070da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80070dc:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80070e2:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 80070e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80070e6:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 80070e8:	2700      	movs	r7, #0
 80070ea:	e6fc      	b.n	8006ee6 <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ec:	f89a 3000 	ldrb.w	r3, [sl]
 80070f0:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80070f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80070f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80070fa:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80070fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80070fe:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007100:	e6dd      	b.n	8006ebe <HAL_SPI_TransmitReceive+0xd2>
 8007102:	bf00      	nop

08007104 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007104:	6a03      	ldr	r3, [r0, #32]
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	6203      	str	r3, [r0, #32]
{
 800710c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007112:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007114:	4f1a      	ldr	r7, [pc, #104]	; (8007180 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 8007116:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8007118:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800711a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800711e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007122:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007126:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8007128:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 800712c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007130:	d012      	beq.n	8007158 <TIM_OC1_SetConfig+0x54>
 8007132:	4c14      	ldr	r4, [pc, #80]	; (8007184 <TIM_OC1_SetConfig+0x80>)
 8007134:	42a0      	cmp	r0, r4
 8007136:	d00f      	beq.n	8007158 <TIM_OC1_SetConfig+0x54>
 8007138:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800713c:	42a0      	cmp	r0, r4
 800713e:	d00b      	beq.n	8007158 <TIM_OC1_SetConfig+0x54>
 8007140:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007144:	42a0      	cmp	r0, r4
 8007146:	d007      	beq.n	8007158 <TIM_OC1_SetConfig+0x54>
 8007148:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800714c:	42a0      	cmp	r0, r4
 800714e:	d003      	beq.n	8007158 <TIM_OC1_SetConfig+0x54>
 8007150:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007154:	42a0      	cmp	r0, r4
 8007156:	d10b      	bne.n	8007170 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007158:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800715a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800715e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007160:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007164:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007168:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800716a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800716e:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007170:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007172:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007174:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007176:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8007178:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800717a:	6203      	str	r3, [r0, #32]
}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40012c00 	.word	0x40012c00
 8007184:	40013400 	.word	0x40013400

08007188 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007188:	6a03      	ldr	r3, [r0, #32]
 800718a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800718e:	6203      	str	r3, [r0, #32]
{
 8007190:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007194:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007196:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007198:	4f21      	ldr	r7, [pc, #132]	; (8007220 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800719a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800719c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800719e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80071a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071a6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071aa:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80071b0:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071b4:	d016      	beq.n	80071e4 <TIM_OC3_SetConfig+0x5c>
 80071b6:	4c1b      	ldr	r4, [pc, #108]	; (8007224 <TIM_OC3_SetConfig+0x9c>)
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	d013      	beq.n	80071e4 <TIM_OC3_SetConfig+0x5c>
 80071bc:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d024      	beq.n	800720e <TIM_OC3_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c4:	4c18      	ldr	r4, [pc, #96]	; (8007228 <TIM_OC3_SetConfig+0xa0>)
 80071c6:	42a0      	cmp	r0, r4
 80071c8:	d013      	beq.n	80071f2 <TIM_OC3_SetConfig+0x6a>
 80071ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80071ce:	42a0      	cmp	r0, r4
 80071d0:	d00f      	beq.n	80071f2 <TIM_OC3_SetConfig+0x6a>
 80071d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80071d6:	42a0      	cmp	r0, r4
 80071d8:	d00b      	beq.n	80071f2 <TIM_OC3_SetConfig+0x6a>
 80071da:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80071de:	42a0      	cmp	r0, r4
 80071e0:	d10e      	bne.n	8007200 <TIM_OC3_SetConfig+0x78>
 80071e2:	e006      	b.n	80071f2 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071e4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80071e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071f2:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071f6:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071fa:	432c      	orrs	r4, r5
 80071fc:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007200:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007202:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007204:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007206:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8007208:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800720a:	6203      	str	r3, [r0, #32]
}
 800720c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800720e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007214:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800721c:	e7d2      	b.n	80071c4 <TIM_OC3_SetConfig+0x3c>
 800721e:	bf00      	nop
 8007220:	40012c00 	.word	0x40012c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40014000 	.word	0x40014000

0800722c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800722c:	6a03      	ldr	r3, [r0, #32]
 800722e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007232:	6203      	str	r3, [r0, #32]
{
 8007234:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800723a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800723c:	4f21      	ldr	r7, [pc, #132]	; (80072c4 <TIM_OC4_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800723e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007240:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007242:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8007246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800724a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800724e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007250:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007254:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007258:	d016      	beq.n	8007288 <TIM_OC4_SetConfig+0x5c>
 800725a:	4c1b      	ldr	r4, [pc, #108]	; (80072c8 <TIM_OC4_SetConfig+0x9c>)
 800725c:	42a0      	cmp	r0, r4
 800725e:	d013      	beq.n	8007288 <TIM_OC4_SetConfig+0x5c>
 8007260:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007264:	42a0      	cmp	r0, r4
 8007266:	d024      	beq.n	80072b2 <TIM_OC4_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007268:	4c18      	ldr	r4, [pc, #96]	; (80072cc <TIM_OC4_SetConfig+0xa0>)
 800726a:	42a0      	cmp	r0, r4
 800726c:	d013      	beq.n	8007296 <TIM_OC4_SetConfig+0x6a>
 800726e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007272:	42a0      	cmp	r0, r4
 8007274:	d00f      	beq.n	8007296 <TIM_OC4_SetConfig+0x6a>
 8007276:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800727a:	42a0      	cmp	r0, r4
 800727c:	d00b      	beq.n	8007296 <TIM_OC4_SetConfig+0x6a>
 800727e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007282:	42a0      	cmp	r0, r4
 8007284:	d10e      	bne.n	80072a4 <TIM_OC4_SetConfig+0x78>
 8007286:	e006      	b.n	8007296 <TIM_OC4_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007288:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800728a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800728e:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007296:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800729a:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800729e:	432c      	orrs	r4, r5
 80072a0:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80072a6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80072a8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80072aa:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80072ac:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80072ae:	6203      	str	r3, [r0, #32]
}
 80072b0:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80072b2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80072b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80072b8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80072bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c0:	e7d2      	b.n	8007268 <TIM_OC4_SetConfig+0x3c>
 80072c2:	bf00      	nop
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40013400 	.word	0x40013400
 80072cc:	40014000 	.word	0x40014000

080072d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80072d0:	2800      	cmp	r0, #0
 80072d2:	f000 8089 	beq.w	80073e8 <HAL_TIM_Base_Init+0x118>
{
 80072d6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80072d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072dc:	4604      	mov	r4, r0
 80072de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d078      	beq.n	80073d8 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e6:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e8:	4a43      	ldr	r2, [pc, #268]	; (80073f8 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 80072ea:	2302      	movs	r3, #2
 80072ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f0:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80072f2:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f4:	d05c      	beq.n	80073b0 <HAL_TIM_Base_Init+0xe0>
 80072f6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80072fa:	d02c      	beq.n	8007356 <HAL_TIM_Base_Init+0x86>
 80072fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007300:	4291      	cmp	r1, r2
 8007302:	d028      	beq.n	8007356 <HAL_TIM_Base_Init+0x86>
 8007304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007308:	4291      	cmp	r1, r2
 800730a:	d024      	beq.n	8007356 <HAL_TIM_Base_Init+0x86>
 800730c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007310:	4291      	cmp	r1, r2
 8007312:	d020      	beq.n	8007356 <HAL_TIM_Base_Init+0x86>
 8007314:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007318:	4291      	cmp	r1, r2
 800731a:	d049      	beq.n	80073b0 <HAL_TIM_Base_Init+0xe0>
 800731c:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8007320:	4291      	cmp	r1, r2
 8007322:	d063      	beq.n	80073ec <HAL_TIM_Base_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007324:	4a35      	ldr	r2, [pc, #212]	; (80073fc <HAL_TIM_Base_Init+0x12c>)
 8007326:	4291      	cmp	r1, r2
 8007328:	d05b      	beq.n	80073e2 <HAL_TIM_Base_Init+0x112>
 800732a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800732e:	4291      	cmp	r1, r2
 8007330:	d057      	beq.n	80073e2 <HAL_TIM_Base_Init+0x112>
 8007332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007336:	4291      	cmp	r1, r2
 8007338:	d053      	beq.n	80073e2 <HAL_TIM_Base_Init+0x112>
 800733a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800733e:	4291      	cmp	r1, r2
 8007340:	d04f      	beq.n	80073e2 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007342:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007344:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8007346:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800734e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007350:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007352:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007354:	e010      	b.n	8007378 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007356:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007358:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800735a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800735c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007360:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007366:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007368:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800736a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736e:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007370:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007372:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007374:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007376:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007378:	2301      	movs	r3, #1
 800737a:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800737c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007380:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007384:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007388:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800738c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007398:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800739c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073a0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80073a4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80073a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80073ac:	2000      	movs	r0, #0
}
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80073b0:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073b4:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80073ba:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80073bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80073c8:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80073d2:	6963      	ldr	r3, [r4, #20]
 80073d4:	630b      	str	r3, [r1, #48]	; 0x30
 80073d6:	e7cf      	b.n	8007378 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80073d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80073dc:	f7fc ffae 	bl	800433c <HAL_TIM_Base_MspInit>
 80073e0:	e781      	b.n	80072e6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073e4:	69a2      	ldr	r2, [r4, #24]
 80073e6:	e7e9      	b.n	80073bc <HAL_TIM_Base_Init+0xec>
    return HAL_ERROR;
 80073e8:	2001      	movs	r0, #1
}
 80073ea:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80073ec:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80073f2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073f4:	e796      	b.n	8007324 <HAL_TIM_Base_Init+0x54>
 80073f6:	bf00      	nop
 80073f8:	40012c00 	.word	0x40012c00
 80073fc:	40014000 	.word	0x40014000

08007400 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007400:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007404:	2b01      	cmp	r3, #1
 8007406:	d132      	bne.n	800746e <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007408:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800740a:	491b      	ldr	r1, [pc, #108]	; (8007478 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	2202      	movs	r2, #2
 800740e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007412:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007414:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741c:	d019      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0x52>
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007422:	d016      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0x52>
 8007424:	4a15      	ldr	r2, [pc, #84]	; (800747c <HAL_TIM_Base_Start_IT+0x7c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0x52>
 800742a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0x52>
 8007432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0x52>
 800743a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0x52>
 8007442:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <HAL_TIM_Base_Start_IT+0x52>
 800744a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800744e:	4293      	cmp	r3, r2
 8007450:	d107      	bne.n	8007462 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007452:	6899      	ldr	r1, [r3, #8]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <HAL_TIM_Base_Start_IT+0x80>)
 8007456:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007458:	2a06      	cmp	r2, #6
 800745a:	d00a      	beq.n	8007472 <HAL_TIM_Base_Start_IT+0x72>
 800745c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007460:	d007      	beq.n	8007472 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800746a:	2000      	movs	r0, #0
 800746c:	4770      	bx	lr
    return HAL_ERROR;
 800746e:	2001      	movs	r0, #1
 8007470:	4770      	bx	lr
  return HAL_OK;
 8007472:	2000      	movs	r0, #0
}
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40000400 	.word	0x40000400
 8007480:	00010007 	.word	0x00010007

08007484 <HAL_TIM_PWM_MspInit>:
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop

08007488 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007488:	2800      	cmp	r0, #0
 800748a:	f000 8089 	beq.w	80075a0 <HAL_TIM_PWM_Init+0x118>
{
 800748e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007490:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007494:	4604      	mov	r4, r0
 8007496:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800749a:	2b00      	cmp	r3, #0
 800749c:	d078      	beq.n	8007590 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800749e:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a0:	4a43      	ldr	r2, [pc, #268]	; (80075b0 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 80074a2:	2302      	movs	r3, #2
 80074a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074a8:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80074aa:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074ac:	d05c      	beq.n	8007568 <HAL_TIM_PWM_Init+0xe0>
 80074ae:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80074b2:	d02c      	beq.n	800750e <HAL_TIM_PWM_Init+0x86>
 80074b4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80074b8:	4291      	cmp	r1, r2
 80074ba:	d028      	beq.n	800750e <HAL_TIM_PWM_Init+0x86>
 80074bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074c0:	4291      	cmp	r1, r2
 80074c2:	d024      	beq.n	800750e <HAL_TIM_PWM_Init+0x86>
 80074c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074c8:	4291      	cmp	r1, r2
 80074ca:	d020      	beq.n	800750e <HAL_TIM_PWM_Init+0x86>
 80074cc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80074d0:	4291      	cmp	r1, r2
 80074d2:	d049      	beq.n	8007568 <HAL_TIM_PWM_Init+0xe0>
 80074d4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80074d8:	4291      	cmp	r1, r2
 80074da:	d063      	beq.n	80075a4 <HAL_TIM_PWM_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074dc:	4a35      	ldr	r2, [pc, #212]	; (80075b4 <HAL_TIM_PWM_Init+0x12c>)
 80074de:	4291      	cmp	r1, r2
 80074e0:	d05b      	beq.n	800759a <HAL_TIM_PWM_Init+0x112>
 80074e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074e6:	4291      	cmp	r1, r2
 80074e8:	d057      	beq.n	800759a <HAL_TIM_PWM_Init+0x112>
 80074ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074ee:	4291      	cmp	r1, r2
 80074f0:	d053      	beq.n	800759a <HAL_TIM_PWM_Init+0x112>
 80074f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074f6:	4291      	cmp	r1, r2
 80074f8:	d04f      	beq.n	800759a <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074fa:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074fc:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80074fe:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007504:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007506:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007508:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800750a:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800750c:	e010      	b.n	8007530 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800750e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007510:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007512:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007518:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800751a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800751e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007520:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007526:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007528:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800752a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800752c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800752e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007530:	2301      	movs	r3, #1
 8007532:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007534:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007538:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800753c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007540:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007544:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007550:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007554:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007558:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800755c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007560:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007564:	2000      	movs	r0, #0
}
 8007566:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007568:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800756a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800756c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007572:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007578:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800757a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800757e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007580:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007586:	6863      	ldr	r3, [r4, #4]
 8007588:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800758a:	6963      	ldr	r3, [r4, #20]
 800758c:	630b      	str	r3, [r1, #48]	; 0x30
 800758e:	e7cf      	b.n	8007530 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007590:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007594:	f7ff ff76 	bl	8007484 <HAL_TIM_PWM_MspInit>
 8007598:	e781      	b.n	800749e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800759a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800759c:	69a2      	ldr	r2, [r4, #24]
 800759e:	e7e9      	b.n	8007574 <HAL_TIM_PWM_Init+0xec>
    return HAL_ERROR;
 80075a0:	2001      	movs	r0, #1
}
 80075a2:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80075a4:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80075aa:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ac:	e796      	b.n	80074dc <HAL_TIM_PWM_Init+0x54>
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40014000 	.word	0x40014000

080075b8 <HAL_TIM_PWM_Start>:
 80075b8:	2900      	cmp	r1, #0
 80075ba:	d158      	bne.n	800766e <HAL_TIM_PWM_Start+0xb6>
 80075bc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d15e      	bne.n	8007682 <HAL_TIM_PWM_Start+0xca>
 80075c4:	2302      	movs	r3, #2
 80075c6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80075ca:	6803      	ldr	r3, [r0, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	6a18      	ldr	r0, [r3, #32]
 80075d0:	f001 011f 	and.w	r1, r1, #31
 80075d4:	fa02 f101 	lsl.w	r1, r2, r1
 80075d8:	ea20 0001 	bic.w	r0, r0, r1
 80075dc:	b410      	push	{r4}
 80075de:	6218      	str	r0, [r3, #32]
 80075e0:	6a1a      	ldr	r2, [r3, #32]
 80075e2:	4c40      	ldr	r4, [pc, #256]	; (80076e4 <HAL_TIM_PWM_Start+0x12c>)
 80075e4:	4311      	orrs	r1, r2
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	6219      	str	r1, [r3, #32]
 80075ea:	d05a      	beq.n	80076a2 <HAL_TIM_PWM_Start+0xea>
 80075ec:	4a3e      	ldr	r2, [pc, #248]	; (80076e8 <HAL_TIM_PWM_Start+0x130>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00f      	beq.n	8007612 <HAL_TIM_PWM_Start+0x5a>
 80075f2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00b      	beq.n	8007612 <HAL_TIM_PWM_Start+0x5a>
 80075fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <HAL_TIM_PWM_Start+0x5a>
 8007602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <HAL_TIM_PWM_Start+0x5a>
 800760a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800760e:	4293      	cmp	r3, r2
 8007610:	d103      	bne.n	800761a <HAL_TIM_PWM_Start+0x62>
 8007612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007618:	645a      	str	r2, [r3, #68]	; 0x44
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d016      	beq.n	800764e <HAL_TIM_PWM_Start+0x96>
 8007620:	4a32      	ldr	r2, [pc, #200]	; (80076ec <HAL_TIM_PWM_Start+0x134>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_TIM_PWM_Start+0x96>
 8007626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800762a:	4293      	cmp	r3, r2
 800762c:	d00f      	beq.n	800764e <HAL_TIM_PWM_Start+0x96>
 800762e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007632:	4293      	cmp	r3, r2
 8007634:	d00b      	beq.n	800764e <HAL_TIM_PWM_Start+0x96>
 8007636:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800763a:	4293      	cmp	r3, r2
 800763c:	d007      	beq.n	800764e <HAL_TIM_PWM_Start+0x96>
 800763e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007642:	4293      	cmp	r3, r2
 8007644:	d003      	beq.n	800764e <HAL_TIM_PWM_Start+0x96>
 8007646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800764a:	4293      	cmp	r3, r2
 800764c:	d107      	bne.n	800765e <HAL_TIM_PWM_Start+0xa6>
 800764e:	6899      	ldr	r1, [r3, #8]
 8007650:	4a27      	ldr	r2, [pc, #156]	; (80076f0 <HAL_TIM_PWM_Start+0x138>)
 8007652:	400a      	ands	r2, r1
 8007654:	2a06      	cmp	r2, #6
 8007656:	d016      	beq.n	8007686 <HAL_TIM_PWM_Start+0xce>
 8007658:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800765c:	d013      	beq.n	8007686 <HAL_TIM_PWM_Start+0xce>
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007664:	f042 0201 	orr.w	r2, r2, #1
 8007668:	2000      	movs	r0, #0
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	4770      	bx	lr
 800766e:	2904      	cmp	r1, #4
 8007670:	d01c      	beq.n	80076ac <HAL_TIM_PWM_Start+0xf4>
 8007672:	2908      	cmp	r1, #8
 8007674:	d022      	beq.n	80076bc <HAL_TIM_PWM_Start+0x104>
 8007676:	290c      	cmp	r1, #12
 8007678:	d109      	bne.n	800768e <HAL_TIM_PWM_Start+0xd6>
 800767a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800767e:	2b01      	cmp	r3, #1
 8007680:	d024      	beq.n	80076cc <HAL_TIM_PWM_Start+0x114>
 8007682:	2001      	movs	r0, #1
 8007684:	4770      	bx	lr
 8007686:	2000      	movs	r0, #0
 8007688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	2910      	cmp	r1, #16
 8007690:	d020      	beq.n	80076d4 <HAL_TIM_PWM_Start+0x11c>
 8007692:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007696:	2b01      	cmp	r3, #1
 8007698:	d1f3      	bne.n	8007682 <HAL_TIM_PWM_Start+0xca>
 800769a:	2302      	movs	r3, #2
 800769c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80076a0:	e793      	b.n	80075ca <HAL_TIM_PWM_Start+0x12>
 80076a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076a8:	645a      	str	r2, [r3, #68]	; 0x44
 80076aa:	e7d0      	b.n	800764e <HAL_TIM_PWM_Start+0x96>
 80076ac:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d1e6      	bne.n	8007682 <HAL_TIM_PWM_Start+0xca>
 80076b4:	2302      	movs	r3, #2
 80076b6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80076ba:	e786      	b.n	80075ca <HAL_TIM_PWM_Start+0x12>
 80076bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d1de      	bne.n	8007682 <HAL_TIM_PWM_Start+0xca>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80076ca:	e77e      	b.n	80075ca <HAL_TIM_PWM_Start+0x12>
 80076cc:	2302      	movs	r3, #2
 80076ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80076d2:	e77a      	b.n	80075ca <HAL_TIM_PWM_Start+0x12>
 80076d4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d1d2      	bne.n	8007682 <HAL_TIM_PWM_Start+0xca>
 80076dc:	2302      	movs	r3, #2
 80076de:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80076e2:	e772      	b.n	80075ca <HAL_TIM_PWM_Start+0x12>
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40013400 	.word	0x40013400
 80076ec:	40000400 	.word	0x40000400
 80076f0:	00010007 	.word	0x00010007

080076f4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80076f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f000 808c 	beq.w	8007816 <HAL_TIM_ConfigClockSource+0x122>
{
 80076fe:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8007700:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 8007702:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007704:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8007706:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800770a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800770e:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007710:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007712:	4c5c      	ldr	r4, [pc, #368]	; (8007884 <HAL_TIM_ConfigClockSource+0x190>)
  switch (sClockSourceConfig->ClockSource)
 8007714:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007716:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 800771a:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800771c:	d07d      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x126>
 800771e:	d921      	bls.n	8007764 <HAL_TIM_ConfigClockSource+0x70>
 8007720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007724:	d067      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0x102>
 8007726:	d94a      	bls.n	80077be <HAL_TIM_ConfigClockSource+0xca>
 8007728:	4957      	ldr	r1, [pc, #348]	; (8007888 <HAL_TIM_ConfigClockSource+0x194>)
 800772a:	428b      	cmp	r3, r1
 800772c:	d008      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
 800772e:	d93e      	bls.n	80077ae <HAL_TIM_ConfigClockSource+0xba>
 8007730:	4956      	ldr	r1, [pc, #344]	; (800788c <HAL_TIM_ConfigClockSource+0x198>)
 8007732:	428b      	cmp	r3, r1
 8007734:	d004      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
 8007736:	3910      	subs	r1, #16
 8007738:	f023 0420 	bic.w	r4, r3, #32
 800773c:	428c      	cmp	r4, r1
 800773e:	d108      	bne.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007740:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007742:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007746:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800774a:	430b      	orrs	r3, r1
 800774c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007750:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8007752:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007754:	2201      	movs	r2, #1
 8007756:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800775a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800775e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007760:	4618      	mov	r0, r3
}
 8007762:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	d073      	beq.n	8007850 <HAL_TIM_ConfigClockSource+0x15c>
 8007768:	d91b      	bls.n	80077a2 <HAL_TIM_ConfigClockSource+0xae>
 800776a:	2b50      	cmp	r3, #80	; 0x50
 800776c:	d1f1      	bne.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 800776e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007770:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007772:	684c      	ldr	r4, [r1, #4]
 8007774:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007776:	f026 0601 	bic.w	r6, r6, #1
 800777a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800777c:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800777e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007786:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800778a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800778c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800778e:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007790:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007792:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800779a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800779e:	6093      	str	r3, [r2, #8]
}
 80077a0:	e7d7      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d0cc      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
 80077a6:	d91c      	bls.n	80077e2 <HAL_TIM_ConfigClockSource+0xee>
 80077a8:	2b30      	cmp	r3, #48	; 0x30
 80077aa:	d1d2      	bne.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
 80077ac:	e7c8      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
 80077ae:	3920      	subs	r1, #32
 80077b0:	428b      	cmp	r3, r1
 80077b2:	d0c5      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
 80077b4:	d919      	bls.n	80077ea <HAL_TIM_ConfigClockSource+0xf6>
 80077b6:	4936      	ldr	r1, [pc, #216]	; (8007890 <HAL_TIM_ConfigClockSource+0x19c>)
 80077b8:	428b      	cmp	r3, r1
 80077ba:	d0c1      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
 80077bc:	e7c9      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
 80077be:	2b70      	cmp	r3, #112	; 0x70
 80077c0:	d1c7      	bne.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077c2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80077c6:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80077c8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077ca:	432b      	orrs	r3, r5
 80077cc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d4:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077d6:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80077d8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80077de:	6093      	str	r3, [r2, #8]
      break;
 80077e0:	e7b7      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 80077e2:	f033 0110 	bics.w	r1, r3, #16
 80077e6:	d1b4      	bne.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
 80077e8:	e7aa      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
 80077ea:	f023 0110 	bic.w	r1, r3, #16
 80077ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80077f2:	d1ae      	bne.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
 80077f4:	e7a4      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x4c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077f6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80077fa:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80077fc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077fe:	432b      	orrs	r3, r5
 8007800:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007804:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007808:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800780a:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800780c:	6893      	ldr	r3, [r2, #8]
 800780e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007812:	6093      	str	r3, [r2, #8]
      break;
 8007814:	e79d      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 8007816:	2002      	movs	r0, #2
}
 8007818:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800781a:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800781c:	684d      	ldr	r5, [r1, #4]
 800781e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007820:	f024 0410 	bic.w	r4, r4, #16
 8007824:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007826:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8007828:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800782a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800782e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007832:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007836:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800783a:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800783c:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800783e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007840:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007848:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800784c:	6093      	str	r3, [r2, #8]
}
 800784e:	e780      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8007850:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007852:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007854:	684c      	ldr	r4, [r1, #4]
 8007856:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007858:	f026 0601 	bic.w	r6, r6, #1
 800785c:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800785e:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007860:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007868:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800786c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800786e:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007870:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007872:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007874:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800787c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007880:	6093      	str	r3, [r2, #8]
}
 8007882:	e766      	b.n	8007752 <HAL_TIM_ConfigClockSource+0x5e>
 8007884:	ffce0088 	.word	0xffce0088
 8007888:	00100040 	.word	0x00100040
 800788c:	00100060 	.word	0x00100060
 8007890:	00100030 	.word	0x00100030

08007894 <HAL_TIM_PeriodElapsedCallback>:
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop

08007898 <HAL_TIM_OC_DelayElapsedCallback>:
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop

0800789c <HAL_TIM_IC_CaptureCallback>:
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop

080078a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop

080078a4 <HAL_TIM_TriggerCallback>:
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop

080078a8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078a8:	6803      	ldr	r3, [r0, #0]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	0791      	lsls	r1, r2, #30
{
 80078ae:	b510      	push	{r4, lr}
 80078b0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078b2:	d503      	bpl.n	80078bc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	0792      	lsls	r2, r2, #30
 80078b8:	f100 808a 	bmi.w	80079d0 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	0752      	lsls	r2, r2, #29
 80078c0:	d502      	bpl.n	80078c8 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	0750      	lsls	r0, r2, #29
 80078c6:	d470      	bmi.n	80079aa <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	0711      	lsls	r1, r2, #28
 80078cc:	d502      	bpl.n	80078d4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	0712      	lsls	r2, r2, #28
 80078d2:	d458      	bmi.n	8007986 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	06d1      	lsls	r1, r2, #27
 80078d8:	d502      	bpl.n	80078e0 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078da:	68da      	ldr	r2, [r3, #12]
 80078dc:	06d2      	lsls	r2, r2, #27
 80078de:	d43e      	bmi.n	800795e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	07d0      	lsls	r0, r2, #31
 80078e4:	d503      	bpl.n	80078ee <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	07d1      	lsls	r1, r2, #31
 80078ea:	f100 808a 	bmi.w	8007a02 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	0612      	lsls	r2, r2, #24
 80078f2:	d503      	bpl.n	80078fc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	0610      	lsls	r0, r2, #24
 80078f8:	f100 808b 	bmi.w	8007a12 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	05d1      	lsls	r1, r2, #23
 8007900:	d503      	bpl.n	800790a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	0612      	lsls	r2, r2, #24
 8007906:	f100 808c 	bmi.w	8007a22 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	0650      	lsls	r0, r2, #25
 800790e:	d503      	bpl.n	8007918 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	0651      	lsls	r1, r2, #25
 8007914:	f100 808d 	bmi.w	8007a32 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	0692      	lsls	r2, r2, #26
 800791c:	d503      	bpl.n	8007926 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	0690      	lsls	r0, r2, #26
 8007922:	f100 808e 	bmi.w	8007a42 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	02d1      	lsls	r1, r2, #11
 800792a:	d503      	bpl.n	8007934 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	02d2      	lsls	r2, r2, #11
 8007930:	f100 808f 	bmi.w	8007a52 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	0290      	lsls	r0, r2, #10
 8007938:	d503      	bpl.n	8007942 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	0291      	lsls	r1, r2, #10
 800793e:	f100 8090 	bmi.w	8007a62 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007942:	691a      	ldr	r2, [r3, #16]
 8007944:	0252      	lsls	r2, r2, #9
 8007946:	d503      	bpl.n	8007950 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	0250      	lsls	r0, r2, #9
 800794c:	f100 8091 	bmi.w	8007a72 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	0211      	lsls	r1, r2, #8
 8007954:	d502      	bpl.n	800795c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	0212      	lsls	r2, r2, #8
 800795a:	d44a      	bmi.n	80079f2 <HAL_TIM_IRQHandler+0x14a>
}
 800795c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800795e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007962:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007964:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007966:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800796e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007970:	f040 8090 	bne.w	8007a94 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007974:	f7ff ff90 	bl	8007898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff ff91 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797e:	2200      	movs	r2, #0
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	7722      	strb	r2, [r4, #28]
 8007984:	e7ac      	b.n	80078e0 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007986:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800798a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800798c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800798e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007994:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007996:	d17a      	bne.n	8007a8e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007998:	f7ff ff7e 	bl	8007898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799c:	4620      	mov	r0, r4
 800799e:	f7ff ff7f 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a2:	2200      	movs	r2, #0
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	7722      	strb	r2, [r4, #28]
 80079a8:	e794      	b.n	80078d4 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079aa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ae:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80079ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079bc:	d164      	bne.n	8007a88 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079be:	f7ff ff6b 	bl	8007898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff ff6c 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c8:	2200      	movs	r2, #0
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	7722      	strb	r2, [r4, #28]
 80079ce:	e77b      	b.n	80078c8 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079d0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079d4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079d6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079d8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	0799      	lsls	r1, r3, #30
 80079de:	d150      	bne.n	8007a82 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e0:	f7ff ff5a 	bl	8007898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7ff ff5b 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ea:	2200      	movs	r2, #0
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	7722      	strb	r2, [r4, #28]
 80079f0:	e764      	b.n	80078bc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80079f2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80079f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80079f8:	611a      	str	r2, [r3, #16]
}
 80079fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80079fe:	f000 ba61 	b.w	8007ec4 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a02:	f06f 0201 	mvn.w	r2, #1
 8007a06:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f7ff ff43 	bl	8007894 <HAL_TIM_PeriodElapsedCallback>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	e76d      	b.n	80078ee <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 fa49 	bl	8007eb0 <HAL_TIMEx_BreakCallback>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	e76c      	b.n	80078fc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fa43 	bl	8007eb4 <HAL_TIMEx_Break2Callback>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	e76b      	b.n	800790a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a36:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f7ff ff33 	bl	80078a4 <HAL_TIM_TriggerCallback>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	e76a      	b.n	8007918 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a42:	f06f 0220 	mvn.w	r2, #32
 8007a46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fa2f 	bl	8007eac <HAL_TIMEx_CommutCallback>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	e769      	b.n	8007926 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007a52:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007a56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 fa2d 	bl	8007eb8 <HAL_TIMEx_EncoderIndexCallback>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	e768      	b.n	8007934 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007a62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007a66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 fa27 	bl	8007ebc <HAL_TIMEx_DirectionChangeCallback>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	e767      	b.n	8007942 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007a72:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007a76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 fa21 	bl	8007ec0 <HAL_TIMEx_IndexErrorCallback>
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	e766      	b.n	8007950 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	f7ff ff0b 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 8007a86:	e7b0      	b.n	80079ea <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a88:	f7ff ff08 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e79c      	b.n	80079c8 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	f7ff ff05 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 8007a92:	e786      	b.n	80079a2 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8007a94:	f7ff ff02 	bl	800789c <HAL_TIM_IC_CaptureCallback>
 8007a98:	e771      	b.n	800797e <HAL_TIM_IRQHandler+0xd6>
 8007a9a:	bf00      	nop

08007a9c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9c:	6a03      	ldr	r3, [r0, #32]
 8007a9e:	f023 0310 	bic.w	r3, r3, #16
 8007aa2:	6203      	str	r3, [r0, #32]
{
 8007aa4:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8007aa6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007aa8:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007aaa:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aac:	4f21      	ldr	r7, [pc, #132]	; (8007b34 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aae:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab0:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8007ab6:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007abe:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ac0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ac8:	d016      	beq.n	8007af8 <TIM_OC2_SetConfig+0x5c>
 8007aca:	4c1b      	ldr	r4, [pc, #108]	; (8007b38 <TIM_OC2_SetConfig+0x9c>)
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d013      	beq.n	8007af8 <TIM_OC2_SetConfig+0x5c>
 8007ad0:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007ad4:	42a0      	cmp	r0, r4
 8007ad6:	d024      	beq.n	8007b22 <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad8:	4c18      	ldr	r4, [pc, #96]	; (8007b3c <TIM_OC2_SetConfig+0xa0>)
 8007ada:	42a0      	cmp	r0, r4
 8007adc:	d013      	beq.n	8007b06 <TIM_OC2_SetConfig+0x6a>
 8007ade:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ae2:	42a0      	cmp	r0, r4
 8007ae4:	d00f      	beq.n	8007b06 <TIM_OC2_SetConfig+0x6a>
 8007ae6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007aea:	42a0      	cmp	r0, r4
 8007aec:	d00b      	beq.n	8007b06 <TIM_OC2_SetConfig+0x6a>
 8007aee:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007af2:	42a0      	cmp	r0, r4
 8007af4:	d10e      	bne.n	8007b14 <TIM_OC2_SetConfig+0x78>
 8007af6:	e006      	b.n	8007b06 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af8:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007afe:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b06:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b0a:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b0e:	432c      	orrs	r4, r5
 8007b10:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007b14:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007b16:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007b18:	6182      	str	r2, [r0, #24]
}
 8007b1a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8007b1c:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007b1e:	6203      	str	r3, [r0, #32]
}
 8007b20:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b22:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b28:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b30:	e7d2      	b.n	8007ad8 <TIM_OC2_SetConfig+0x3c>
 8007b32:	bf00      	nop
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	40014000 	.word	0x40014000

08007b40 <HAL_TIM_PWM_ConfigChannel>:
{
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007b42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	f000 80e8 	beq.w	8007d1c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	4604      	mov	r4, r0
 8007b50:	460d      	mov	r5, r1
 8007b52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007b56:	2a14      	cmp	r2, #20
 8007b58:	d844      	bhi.n	8007be4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8007b5a:	e8df f002 	tbb	[pc, r2]
 8007b5e:	4347      	.short	0x4347
 8007b60:	435b4343 	.word	0x435b4343
 8007b64:	43704343 	.word	0x43704343
 8007b68:	43844343 	.word	0x43844343
 8007b6c:	43994343 	.word	0x43994343
 8007b70:	4343      	.short	0x4343
 8007b72:	0b          	.byte	0x0b
 8007b73:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b74:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b76:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b7a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b7c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b7e:	4e70      	ldr	r6, [pc, #448]	; (8007d40 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b80:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8007b84:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8007b86:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007b88:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007b8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b8c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b90:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b98:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b9a:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b9e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba2:	d008      	beq.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007ba4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007ba8:	42b3      	cmp	r3, r6
 8007baa:	d004      	beq.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007bac:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007bb0:	42b3      	cmp	r3, r6
 8007bb2:	f040 80b5 	bne.w	8007d20 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bb6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bb8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bbc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8007bc0:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007bc2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007bc4:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007bc6:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8007bc8:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bca:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bcc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bce:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007bd2:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007bd6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007bda:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bde:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007be2:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007be4:	2000      	movs	r0, #0
 8007be6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f7ff fa89 	bl	8007104 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bf2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bf4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bf6:	6999      	ldr	r1, [r3, #24]
 8007bf8:	f041 0108 	orr.w	r1, r1, #8
 8007bfc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bfe:	6999      	ldr	r1, [r3, #24]
 8007c00:	f021 0104 	bic.w	r1, r1, #4
 8007c04:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c06:	699a      	ldr	r2, [r3, #24]
 8007c08:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007c0a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c0c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007c0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007c12:	e7ea      	b.n	8007bea <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c14:	6800      	ldr	r0, [r0, #0]
 8007c16:	f7ff ff41 	bl	8007a9c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c1a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c1c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c1e:	6999      	ldr	r1, [r3, #24]
 8007c20:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007c24:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c26:	6999      	ldr	r1, [r3, #24]
 8007c28:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007c2c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8007c34:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c36:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007c38:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007c3c:	e7d5      	b.n	8007bea <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c3e:	6800      	ldr	r0, [r0, #0]
 8007c40:	f7ff faa2 	bl	8007188 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c44:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c46:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c48:	69d9      	ldr	r1, [r3, #28]
 8007c4a:	f041 0108 	orr.w	r1, r1, #8
 8007c4e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c50:	69d9      	ldr	r1, [r3, #28]
 8007c52:	f021 0104 	bic.w	r1, r1, #4
 8007c56:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007c5c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c5e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007c60:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007c64:	e7c1      	b.n	8007bea <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c66:	6800      	ldr	r0, [r0, #0]
 8007c68:	f7ff fae0 	bl	800722c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c6c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c6e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c70:	69d9      	ldr	r1, [r3, #28]
 8007c72:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007c76:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c78:	69d9      	ldr	r1, [r3, #28]
 8007c7a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007c7e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c80:	69da      	ldr	r2, [r3, #28]
 8007c82:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8007c86:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c88:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007c8a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007c8e:	e7ac      	b.n	8007bea <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c90:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c92:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c96:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8007c98:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9a:	4e29      	ldr	r6, [pc, #164]	; (8007d40 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c9c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007ca0:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8007ca2:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007ca4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ca8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8007cac:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb4:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cb6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8007cba:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbe:	d013      	beq.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007cc0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007cc4:	42b3      	cmp	r3, r6
 8007cc6:	d00f      	beq.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007cc8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007ccc:	42b3      	cmp	r3, r6
 8007cce:	d00b      	beq.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007cd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007cd4:	42b3      	cmp	r3, r6
 8007cd6:	d007      	beq.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007cd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007cdc:	42b3      	cmp	r3, r6
 8007cde:	d003      	beq.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007ce0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007ce4:	42b3      	cmp	r3, r6
 8007ce6:	d104      	bne.n	8007cf2 <HAL_TIM_PWM_ConfigChannel+0x1b2>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ce8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cea:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cee:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8007cf2:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007cf4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007cf6:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8007cf8:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8007cfa:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cfc:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cfe:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d00:	f041 0108 	orr.w	r1, r1, #8
 8007d04:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d06:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d08:	f021 0104 	bic.w	r1, r1, #4
 8007d0c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d10:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007d12:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d14:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007d16:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007d1a:	e766      	b.n	8007bea <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8007d1c:	2002      	movs	r0, #2
}
 8007d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007d24:	42b3      	cmp	r3, r6
 8007d26:	f43f af46 	beq.w	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007d2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007d2e:	42b3      	cmp	r3, r6
 8007d30:	f43f af41 	beq.w	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007d34:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007d38:	42b3      	cmp	r3, r6
 8007d3a:	f47f af41 	bne.w	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x80>
 8007d3e:	e73a      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007d40:	40012c00 	.word	0x40012c00

08007d44 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d058      	beq.n	8007dfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
{
 8007d4c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d4e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d50:	4c2c      	ldr	r4, [pc, #176]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007d52:	2302      	movs	r3, #2
 8007d54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d58:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8007d5a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007d5c:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d5e:	d042      	beq.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d60:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007d64:	42a2      	cmp	r2, r4
 8007d66:	d032      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8007d68:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007d6c:	42a2      	cmp	r2, r4
 8007d6e:	d02e      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d70:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d72:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d7a:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d7c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007d82:	d016      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007d84:	4b20      	ldr	r3, [pc, #128]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d013      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d00f      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d00b      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007d9a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d007      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007da2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d003      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d104      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db2:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007db4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db8:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dba:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007dbc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007dc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8007dc8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8007dca:	4618      	mov	r0, r3
}
 8007dcc:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dce:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dd6:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dd8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de0:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8007de2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de4:	e7cb      	b.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de6:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dee:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007df8:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8007dfa:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfc:	e7d9      	b.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8007dfe:	2002      	movs	r0, #2
}
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40012c00 	.word	0x40012c00
 8007e08:	40000400 	.word	0x40000400

08007e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d047      	beq.n	8007ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
{
 8007e14:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e16:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e20:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e24:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e2a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e30:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e34:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e3a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e40:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e42:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e44:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e4a:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e4c:	4c16      	ldr	r4, [pc, #88]	; (8007ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8007e4e:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e50:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e54:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e56:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e5a:	d007      	beq.n	8007e6c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8007e5c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d003      	beq.n	8007e6c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8007e64:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	d114      	bne.n	8007e96 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e6c:	69cd      	ldr	r5, [r1, #28]
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e6e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e74:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e7a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e7e:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e86:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e88:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e8c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e8e:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e94:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007e96:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007e98:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007e9a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8007e9e:	4608      	mov	r0, r1
}
 8007ea0:	bc30      	pop	{r4, r5}
 8007ea2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007ea4:	2002      	movs	r0, #2
}
 8007ea6:	4770      	bx	lr
 8007ea8:	40012c00 	.word	0x40012c00

08007eac <HAL_TIMEx_CommutCallback>:
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <HAL_TIMEx_BreakCallback>:
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop

08007eb4 <HAL_TIMEx_Break2Callback>:
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop

08007eb8 <HAL_TIMEx_EncoderIndexCallback>:
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop

08007ebc <HAL_TIMEx_DirectionChangeCallback>:
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop

08007ec0 <HAL_TIMEx_IndexErrorCallback>:
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop

08007ec4 <HAL_TIMEx_TransitionErrorCallback>:
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop

08007ec8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ec8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d149      	bne.n	8007f64 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	d045      	beq.n	8007f60 <HAL_UART_Receive_IT+0x98>
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	d043      	beq.n	8007f60 <HAL_UART_Receive_IT+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8007ed8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d041      	beq.n	8007f64 <HAL_UART_Receive_IT+0x9c>
{
 8007ee0:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ee2:	4b49      	ldr	r3, [pc, #292]	; (8008008 <HAL_UART_Receive_IT+0x140>)
 8007ee4:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8007ee6:	2501      	movs	r5, #1
 8007ee8:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eec:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eee:	f04f 0500 	mov.w	r5, #0
 8007ef2:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ef4:	d006      	beq.n	8007f04 <HAL_UART_Receive_IT+0x3c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ef6:	6863      	ldr	r3, [r4, #4]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	d503      	bpl.n	8007f04 <HAL_UART_Receive_IT+0x3c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f02:	6023      	str	r3, [r4, #0]
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f04:	6883      	ldr	r3, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8007f06:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 8007f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8007f0c:	f04f 0100 	mov.w	r1, #0
  huart->RxXferSize  = Size;
 8007f10:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007f14:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007f18:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8007f1a:	d025      	beq.n	8007f68 <HAL_UART_Receive_IT+0xa0>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d138      	bne.n	8007f92 <HAL_UART_Receive_IT+0xca>
 8007f20:	6903      	ldr	r3, [r0, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d05e      	beq.n	8007fe4 <HAL_UART_Receive_IT+0x11c>
 8007f26:	237f      	movs	r3, #127	; 0x7f
 8007f28:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2c:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f2e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f30:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f34:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f38:	68a3      	ldr	r3, [r4, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f3a:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f40:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f44:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f46:	d03a      	beq.n	8007fbe <HAL_UART_Receive_IT+0xf6>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f48:	4b30      	ldr	r3, [pc, #192]	; (800800c <HAL_UART_Receive_IT+0x144>)
 8007f4a:	6703      	str	r3, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f58:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f5a:	6022      	str	r2, [r4, #0]
}
 8007f5c:	bc30      	pop	{r4, r5}
 8007f5e:	4770      	bx	lr
      return HAL_ERROR;
 8007f60:	2001      	movs	r0, #1
 8007f62:	4770      	bx	lr
    return HAL_BUSY;
 8007f64:	2002      	movs	r0, #2
}
 8007f66:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007f68:	6903      	ldr	r3, [r0, #16]
 8007f6a:	b9c3      	cbnz	r3, 8007f9e <HAL_UART_Receive_IT+0xd6>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f6c:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f72:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f76:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f78:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	f240 15ff 	movw	r5, #511	; 0x1ff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f82:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007f86:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8a:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f8c:	d035      	beq.n	8007ffa <HAL_UART_Receive_IT+0x132>
      huart->RxISR = UART_RxISR_16BIT;
 8007f8e:	4b20      	ldr	r3, [pc, #128]	; (8008010 <HAL_UART_Receive_IT+0x148>)
 8007f90:	e7db      	b.n	8007f4a <HAL_UART_Receive_IT+0x82>
  UART_MASK_COMPUTATION(huart);
 8007f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f96:	d029      	beq.n	8007fec <HAL_UART_Receive_IT+0x124>
 8007f98:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 8007f9c:	e7c6      	b.n	8007f2c <HAL_UART_Receive_IT+0x64>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f9e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa0:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fa4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007faa:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fac:	f043 0301 	orr.w	r3, r3, #1
 8007fb0:	25ff      	movs	r5, #255	; 0xff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007fb2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007fb6:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007fbc:	d1c4      	bne.n	8007f48 <HAL_UART_Receive_IT+0x80>
 8007fbe:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d8c0      	bhi.n	8007f48 <HAL_UART_Receive_IT+0x80>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007fc6:	4b13      	ldr	r3, [pc, #76]	; (8008014 <HAL_UART_Receive_IT+0x14c>)
 8007fc8:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fd6:	6022      	str	r2, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fd8:	68a2      	ldr	r2, [r4, #8]
 8007fda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fde:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fe0:	60a2      	str	r2, [r4, #8]
 8007fe2:	e7bb      	b.n	8007f5c <HAL_UART_Receive_IT+0x94>
  UART_MASK_COMPUTATION(huart);
 8007fe4:	23ff      	movs	r3, #255	; 0xff
 8007fe6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007fea:	e79f      	b.n	8007f2c <HAL_UART_Receive_IT+0x64>
 8007fec:	6903      	ldr	r3, [r0, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d099      	beq.n	8007f26 <HAL_UART_Receive_IT+0x5e>
 8007ff2:	233f      	movs	r3, #63	; 0x3f
 8007ff4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007ff8:	e798      	b.n	8007f2c <HAL_UART_Receive_IT+0x64>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ffa:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d8c5      	bhi.n	8007f8e <HAL_UART_Receive_IT+0xc6>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <HAL_UART_Receive_IT+0x150>)
 8008004:	e7e0      	b.n	8007fc8 <HAL_UART_Receive_IT+0x100>
 8008006:	bf00      	nop
 8008008:	40008000 	.word	0x40008000
 800800c:	08008309 	.word	0x08008309
 8008010:	08008389 	.word	0x08008389
 8008014:	08008401 	.word	0x08008401
 8008018:	08008575 	.word	0x08008575

0800801c <HAL_UART_TxCpltCallback>:
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <HAL_UART_ErrorCallback>:
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop

08008024 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008024:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008026:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800802e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008032:	f7ff fff5 	bl	8008020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008036:	bd08      	pop	{r3, pc}

08008038 <HAL_UARTEx_RxEventCallback>:
}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop

0800803c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800803c:	6802      	ldr	r2, [r0, #0]
 800803e:	69d3      	ldr	r3, [r2, #28]
{
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008044:	f640 060f 	movw	r6, #2063	; 0x80f
  if (errorflags == 0U)
 8008048:	4233      	tst	r3, r6
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800804a:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800804c:	6891      	ldr	r1, [r2, #8]
{
 800804e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008050:	d027      	beq.n	80080a2 <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008052:	48aa      	ldr	r0, [pc, #680]	; (80082fc <HAL_UART_IRQHandler+0x2c0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008054:	4eaa      	ldr	r6, [pc, #680]	; (8008300 <HAL_UART_IRQHandler+0x2c4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008056:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008058:	402e      	ands	r6, r5
 800805a:	4306      	orrs	r6, r0
 800805c:	d153      	bne.n	8008106 <HAL_UART_IRQHandler+0xca>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008060:	2801      	cmp	r0, #1
 8008062:	d02c      	beq.n	80080be <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008064:	02de      	lsls	r6, r3, #11
 8008066:	d502      	bpl.n	800806e <HAL_UART_IRQHandler+0x32>
 8008068:	0248      	lsls	r0, r1, #9
 800806a:	f100 80d7 	bmi.w	800821c <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800806e:	061f      	lsls	r7, r3, #24
 8008070:	d506      	bpl.n	8008080 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008072:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008076:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800807a:	4301      	orrs	r1, r0
 800807c:	f040 80c6 	bne.w	800820c <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008080:	065e      	lsls	r6, r3, #25
 8008082:	d502      	bpl.n	800808a <HAL_UART_IRQHandler+0x4e>
 8008084:	0668      	lsls	r0, r5, #25
 8008086:	f100 80d5 	bmi.w	8008234 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800808a:	0219      	lsls	r1, r3, #8
 800808c:	d502      	bpl.n	8008094 <HAL_UART_IRQHandler+0x58>
 800808e:	006a      	lsls	r2, r5, #1
 8008090:	f100 80dd 	bmi.w	800824e <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008094:	01db      	lsls	r3, r3, #7
 8008096:	d502      	bpl.n	800809e <HAL_UART_IRQHandler+0x62>
 8008098:	2d00      	cmp	r5, #0
 800809a:	f2c0 810b 	blt.w	80082b4 <HAL_UART_IRQHandler+0x278>
}
 800809e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080a2:	069e      	lsls	r6, r3, #26
 80080a4:	d5db      	bpl.n	800805e <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080a6:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080aa:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 80080ae:	433e      	orrs	r6, r7
 80080b0:	d0d5      	beq.n	800805e <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 80080b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0f2      	beq.n	800809e <HAL_UART_IRQHandler+0x62>
}
 80080b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080bc:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080be:	06d8      	lsls	r0, r3, #27
 80080c0:	d5d0      	bpl.n	8008064 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080c2:	06ef      	lsls	r7, r5, #27
 80080c4:	d5ce      	bpl.n	8008064 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080c6:	2310      	movs	r3, #16
 80080c8:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ca:	6893      	ldr	r3, [r2, #8]
 80080cc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80080d0:	f000 80c9 	beq.w	8008266 <HAL_UART_IRQHandler+0x22a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80080d6:	6801      	ldr	r1, [r0, #0]
 80080d8:	684b      	ldr	r3, [r1, #4]
 80080da:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0de      	beq.n	800809e <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080e0:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80080e4:	429d      	cmp	r5, r3
 80080e6:	d9da      	bls.n	800809e <HAL_UART_IRQHandler+0x62>
        huart->RxXferCount = nb_remaining_rx_data;
 80080e8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080ec:	680b      	ldr	r3, [r1, #0]
 80080ee:	f013 0320 	ands.w	r3, r3, #32
 80080f2:	f000 80ea 	beq.w	80082ca <HAL_UART_IRQHandler+0x28e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080f6:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 80080fa:	1a69      	subs	r1, r5, r1
 80080fc:	b289      	uxth	r1, r1
 80080fe:	4620      	mov	r0, r4
 8008100:	f7ff ff9a 	bl	8008038 <HAL_UARTEx_RxEventCallback>
 8008104:	e7cb      	b.n	800809e <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008106:	07df      	lsls	r7, r3, #31
 8008108:	d509      	bpl.n	800811e <HAL_UART_IRQHandler+0xe2>
 800810a:	05ee      	lsls	r6, r5, #23
 800810c:	d507      	bpl.n	800811e <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800810e:	2601      	movs	r6, #1
 8008110:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008112:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8008116:	f046 0601 	orr.w	r6, r6, #1
 800811a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800811e:	079f      	lsls	r7, r3, #30
 8008120:	d567      	bpl.n	80081f2 <HAL_UART_IRQHandler+0x1b6>
 8008122:	07ce      	lsls	r6, r1, #31
 8008124:	d509      	bpl.n	800813a <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008126:	2602      	movs	r6, #2
 8008128:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800812a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800812e:	075f      	lsls	r7, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008130:	f046 0604 	orr.w	r6, r6, #4
 8008134:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008138:	d45f      	bmi.n	80081fa <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800813a:	071e      	lsls	r6, r3, #28
 800813c:	d50b      	bpl.n	8008156 <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800813e:	f005 0620 	and.w	r6, r5, #32
 8008142:	4330      	orrs	r0, r6
 8008144:	d007      	beq.n	8008156 <HAL_UART_IRQHandler+0x11a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008146:	2008      	movs	r0, #8
 8008148:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800814a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800814e:	f040 0008 	orr.w	r0, r0, #8
 8008152:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008156:	0518      	lsls	r0, r3, #20
 8008158:	d50a      	bpl.n	8008170 <HAL_UART_IRQHandler+0x134>
 800815a:	016f      	lsls	r7, r5, #5
 800815c:	d508      	bpl.n	8008170 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800815e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008162:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008164:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008168:	f040 0020 	orr.w	r0, r0, #32
 800816c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008170:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008174:	2800      	cmp	r0, #0
 8008176:	d092      	beq.n	800809e <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008178:	069e      	lsls	r6, r3, #26
 800817a:	d506      	bpl.n	800818a <HAL_UART_IRQHandler+0x14e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800817c:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008180:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8008184:	ea55 0301 	orrs.w	r3, r5, r1
 8008188:	d166      	bne.n	8008258 <HAL_UART_IRQHandler+0x21c>
      errorcode = huart->ErrorCode;
 800818a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800818e:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008190:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008198:	431d      	orrs	r5, r3
 800819a:	f000 8090 	beq.w	80082be <HAL_UART_IRQHandler+0x282>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081a4:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081a6:	6893      	ldr	r3, [r2, #8]
 80081a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d103      	bne.n	80081c0 <HAL_UART_IRQHandler+0x184>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b8:	6813      	ldr	r3, [r2, #0]
 80081ba:	f023 0310 	bic.w	r3, r3, #16
 80081be:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80081c0:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80081c4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c8:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ca:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 80081cc:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ce:	064d      	lsls	r5, r1, #25
 80081d0:	d52c      	bpl.n	800822c <HAL_UART_IRQHandler+0x1f0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d2:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80081d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081da:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80081dc:	b330      	cbz	r0, 800822c <HAL_UART_IRQHandler+0x1f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081de:	4b49      	ldr	r3, [pc, #292]	; (8008304 <HAL_UART_IRQHandler+0x2c8>)
 80081e0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081e2:	f7fc ffcd 	bl	8005180 <HAL_DMA_Abort_IT>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f43f af59 	beq.w	800809e <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081ec:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80081ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80081f0:	e762      	b.n	80080b8 <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f2:	075e      	lsls	r6, r3, #29
 80081f4:	d5a1      	bpl.n	800813a <HAL_UART_IRQHandler+0xfe>
 80081f6:	07cf      	lsls	r7, r1, #31
 80081f8:	d59f      	bpl.n	800813a <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081fa:	2604      	movs	r6, #4
 80081fc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081fe:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8008202:	f046 0602 	orr.w	r6, r6, #2
 8008206:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800820a:	e796      	b.n	800813a <HAL_UART_IRQHandler+0xfe>
    if (huart->TxISR != NULL)
 800820c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800820e:	2b00      	cmp	r3, #0
 8008210:	f43f af45 	beq.w	800809e <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8008214:	4620      	mov	r0, r4
}
 8008216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800821a:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800821c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008220:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008222:	6213      	str	r3, [r2, #32]
}
 8008224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008228:	f000 bdee 	b.w	8008e08 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800822c:	4620      	mov	r0, r4
 800822e:	f7ff fef7 	bl	8008020 <HAL_UART_ErrorCallback>
 8008232:	e734      	b.n	800809e <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008234:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008236:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008238:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800823c:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800823e:	6013      	str	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008240:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008242:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8008246:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8008248:	f7ff fee8 	bl	800801c <HAL_UART_TxCpltCallback>
    return;
 800824c:	e727      	b.n	800809e <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800824e:	4620      	mov	r0, r4
}
 8008250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008254:	f000 bddc 	b.w	8008e10 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8008258:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800825a:	2b00      	cmp	r3, #0
 800825c:	d095      	beq.n	800818a <HAL_UART_IRQHandler+0x14e>
          huart->RxISR(huart);
 800825e:	4620      	mov	r0, r4
 8008260:	4798      	blx	r3
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	e791      	b.n	800818a <HAL_UART_IRQHandler+0x14e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008266:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800826a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 800826e:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008270:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8008272:	2900      	cmp	r1, #0
 8008274:	f43f af13 	beq.w	800809e <HAL_UART_IRQHandler+0x62>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008278:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800827c:	1a08      	subs	r0, r1, r0
 800827e:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8008280:	2900      	cmp	r1, #0
 8008282:	f43f af0c 	beq.w	800809e <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008286:	6810      	ldr	r0, [r2, #0]
 8008288:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800828c:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800828e:	6890      	ldr	r0, [r2, #8]
 8008290:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8008294:	f020 0001 	bic.w	r0, r0, #1
        huart->RxState = HAL_UART_STATE_READY;
 8008298:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800829a:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800829c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a0:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a2:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 80082a4:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a6:	f020 0310 	bic.w	r3, r0, #16
 80082aa:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082ac:	4620      	mov	r0, r4
 80082ae:	f7ff fec3 	bl	8008038 <HAL_UARTEx_RxEventCallback>
 80082b2:	e6f4      	b.n	800809e <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082b4:	4620      	mov	r0, r4
}
 80082b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082ba:	f000 bda7 	b.w	8008e0c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 80082be:	4620      	mov	r0, r4
 80082c0:	f7ff feae 	bl	8008020 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80082c8:	e6e9      	b.n	800809e <HAL_UART_IRQHandler+0x62>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ca:	6811      	ldr	r1, [r2, #0]
 80082cc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80082d0:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d2:	6891      	ldr	r1, [r2, #8]
 80082d4:	f021 0101 	bic.w	r1, r1, #1
 80082d8:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082da:	6891      	ldr	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80082dc:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082de:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80082e2:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80082e4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	f023 0310 	bic.w	r3, r3, #16
 80082f0:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082f2:	f7fc ff0b 	bl	800510c <HAL_DMA_Abort>
 80082f6:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80082fa:	e6fc      	b.n	80080f6 <HAL_UART_IRQHandler+0xba>
 80082fc:	10000001 	.word	0x10000001
 8008300:	04000120 	.word	0x04000120
 8008304:	08008025 	.word	0x08008025

08008308 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008308:	b538      	push	{r3, r4, r5, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800830a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800830e:	2b22      	cmp	r3, #34	; 0x22
{
 8008310:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008312:	d005      	beq.n	8008320 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008314:	6802      	ldr	r2, [r0, #0]
 8008316:	6993      	ldr	r3, [r2, #24]
 8008318:	f043 0308 	orr.w	r3, r3, #8
 800831c:	6193      	str	r3, [r2, #24]
  }
}
 800831e:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008320:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008322:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008328:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800832a:	400b      	ands	r3, r1
 800832c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800832e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008332:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008334:	3b01      	subs	r3, #1
 8008336:	b29b      	uxth	r3, r3
 8008338:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800833c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008340:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 8008342:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8008344:	6582      	str	r2, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e9      	bne.n	800831e <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800834a:	6802      	ldr	r2, [r0, #0]
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008352:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008354:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008356:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008358:	f021 0101 	bic.w	r1, r1, #1
 800835c:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800835e:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008362:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008364:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008366:	2901      	cmp	r1, #1
 8008368:	d004      	beq.n	8008374 <UART_RxISR_8BIT+0x6c>
        HAL_UART_RxCpltCallback(huart);
 800836a:	f7fc f899 	bl	80044a0 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836e:	2300      	movs	r3, #0
 8008370:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008372:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008374:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008376:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837a:	f023 0310 	bic.w	r3, r3, #16
 800837e:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008380:	f7ff fe5a 	bl	8008038 <HAL_UARTEx_RxEventCallback>
 8008384:	e7f3      	b.n	800836e <UART_RxISR_8BIT+0x66>
 8008386:	bf00      	nop

08008388 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008388:	b538      	push	{r3, r4, r5, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800838a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800838e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008390:	2b22      	cmp	r3, #34	; 0x22
{
 8008392:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008394:	d004      	beq.n	80083a0 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008396:	6993      	ldr	r3, [r2, #24]
 8008398:	f043 0308 	orr.w	r3, r3, #8
 800839c:	6193      	str	r3, [r2, #24]
  }
}
 800839e:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80083a2:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 80083a6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80083a8:	402b      	ands	r3, r5
 80083aa:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 80083ae:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 80083b2:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80083bc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1eb      	bne.n	800839e <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083c6:	6811      	ldr	r1, [r2, #0]
 80083c8:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80083cc:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ce:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80083d0:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d2:	f021 0101 	bic.w	r1, r1, #1
 80083d6:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80083d8:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083dc:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 80083de:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e0:	2901      	cmp	r1, #1
 80083e2:	d004      	beq.n	80083ee <UART_RxISR_16BIT+0x66>
        HAL_UART_RxCpltCallback(huart);
 80083e4:	f7fc f85c 	bl	80044a0 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e8:	2300      	movs	r3, #0
 80083ea:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ee:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f4:	f023 0310 	bic.w	r3, r3, #16
 80083f8:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083fa:	f7ff fe1d 	bl	8008038 <HAL_UARTEx_RxEventCallback>
 80083fe:	e7f3      	b.n	80083e8 <UART_RxISR_16BIT+0x60>

08008400 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008404:	6803      	ldr	r3, [r0, #0]
 8008406:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008408:	681f      	ldr	r7, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800840a:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800840c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008410:	2a22      	cmp	r2, #34	; 0x22
 8008412:	d005      	beq.n	8008420 <UART_RxISR_8BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	f042 0208 	orr.w	r2, r2, #8
 800841a:	619a      	str	r2, [r3, #24]
  }
}
 800841c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008420:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8008424:	4604      	mov	r4, r0
 8008426:	2a00      	cmp	r2, #0
 8008428:	f000 809c 	beq.w	8008564 <UART_RxISR_8BIT_FIFOEN+0x164>
 800842c:	068a      	lsls	r2, r1, #26
 800842e:	f140 8082 	bpl.w	8008536 <UART_RxISR_8BIT_FIFOEN+0x136>
 8008432:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008436:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8008570 <UART_RxISR_8BIT_FIFOEN+0x170>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800843a:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800843e:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008442:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008446:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800844c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800844e:	402b      	ands	r3, r5
 8008450:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8008452:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008456:	6821      	ldr	r1, [r4, #0]
      huart->pRxBuffPtr++;
 8008458:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800845a:	3b01      	subs	r3, #1
 800845c:	b29b      	uxth	r3, r3
 800845e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008462:	f8d1 b01c 	ldr.w	fp, [r1, #28]
      huart->pRxBuffPtr++;
 8008466:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008468:	f01b 0f07 	tst.w	fp, #7
      huart->pRxBuffPtr++;
 800846c:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800846e:	d026      	beq.n	80084be <UART_RxISR_8BIT_FIFOEN+0xbe>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008470:	f01b 0f01 	tst.w	fp, #1
 8008474:	d008      	beq.n	8008488 <UART_RxISR_8BIT_FIFOEN+0x88>
 8008476:	b13f      	cbz	r7, 8008488 <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008478:	2301      	movs	r3, #1
 800847a:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800847c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008488:	f01b 0f02 	tst.w	fp, #2
 800848c:	d035      	beq.n	80084fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800848e:	b196      	cbz	r6, 80084b6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008490:	2302      	movs	r3, #2
 8008492:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008494:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008498:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800849c:	f043 0304 	orr.w	r3, r3, #4
 80084a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084a4:	d007      	beq.n	80084b6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084a6:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80084ae:	f043 0302 	orr.w	r3, r3, #2
 80084b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d135      	bne.n	800852a <UART_RxISR_8BIT_FIFOEN+0x12a>
      if (huart->RxXferCount == 0U)
 80084be:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	b9a3      	cbnz	r3, 80084f0 <UART_RxISR_8BIT_FIFOEN+0xf0>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	6811      	ldr	r1, [r2, #0]
 80084ca:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80084ce:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084d0:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80084d2:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084d4:	ea01 0109 	and.w	r1, r1, r9
 80084d8:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80084da:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084de:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80084e0:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e2:	2901      	cmp	r1, #1
 80084e4:	d017      	beq.n	8008516 <UART_RxISR_8BIT_FIFOEN+0x116>
          HAL_UART_RxCpltCallback(huart);
 80084e6:	4620      	mov	r0, r4
 80084e8:	f7fb ffda 	bl	80044a0 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ec:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084f0:	f01b 0f20 	tst.w	fp, #32
 80084f4:	d01f      	beq.n	8008536 <UART_RxISR_8BIT_FIFOEN+0x136>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	e7a7      	b.n	800844a <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084fa:	f01b 0f04 	tst.w	fp, #4
 80084fe:	d0da      	beq.n	80084b6 <UART_RxISR_8BIT_FIFOEN+0xb6>
 8008500:	2e00      	cmp	r6, #0
 8008502:	d0d8      	beq.n	80084b6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008504:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008508:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800850c:	f043 0302 	orr.w	r3, r3, #2
 8008510:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008514:	e7cf      	b.n	80084b6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008516:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008518:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851c:	f023 0310 	bic.w	r3, r3, #16
 8008520:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008522:	4620      	mov	r0, r4
 8008524:	f7ff fd88 	bl	8008038 <HAL_UARTEx_RxEventCallback>
 8008528:	e7e0      	b.n	80084ec <UART_RxISR_8BIT_FIFOEN+0xec>
          HAL_UART_ErrorCallback(huart);
 800852a:	4620      	mov	r0, r4
 800852c:	f7ff fd78 	bl	8008020 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008530:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8008534:	e7c3      	b.n	80084be <UART_RxISR_8BIT_FIFOEN+0xbe>
    rxdatacount = huart->RxXferCount;
 8008536:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800853a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800853c:	2b00      	cmp	r3, #0
 800853e:	f43f af6d 	beq.w	800841c <UART_RxISR_8BIT_FIFOEN+0x1c>
 8008542:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008546:	429a      	cmp	r2, r3
 8008548:	f67f af68 	bls.w	800841c <UART_RxISR_8BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800854c:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800854e:	4907      	ldr	r1, [pc, #28]	; (800856c <UART_RxISR_8BIT_FIFOEN+0x16c>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008556:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008558:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800855a:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800855c:	f042 0220 	orr.w	r2, r2, #32
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e75b      	b.n	800841c <UART_RxISR_8BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8008564:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008568:	e758      	b.n	800841c <UART_RxISR_8BIT_FIFOEN+0x1c>
 800856a:	bf00      	nop
 800856c:	08008309 	.word	0x08008309
 8008570:	effffffe 	.word	0xeffffffe

08008574 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008574:	6802      	ldr	r2, [r0, #0]
{
 8008576:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800857a:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800857c:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800857e:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008580:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008584:	2b22      	cmp	r3, #34	; 0x22
 8008586:	d005      	beq.n	8008594 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008588:	6993      	ldr	r3, [r2, #24]
 800858a:	f043 0308 	orr.w	r3, r3, #8
 800858e:	6193      	str	r3, [r2, #24]
  }
}
 8008590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008594:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008598:	4604      	mov	r4, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 8099 	beq.w	80086d2 <UART_RxISR_16BIT_FIFOEN+0x15e>
 80085a0:	068b      	lsls	r3, r1, #26
 80085a2:	d57f      	bpl.n	80086a4 <UART_RxISR_16BIT_FIFOEN+0x130>
  uint16_t  uhMask = huart->Mask;
 80085a4:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085a8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80086dc <UART_RxISR_16BIT_FIFOEN+0x168>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085ac:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b0:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b4:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085b8:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80085be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80085c0:	402b      	ands	r3, r5
 80085c2:	f821 3b02 	strh.w	r3, [r1], #2
      huart->RxXferCount--;
 80085c6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 80085ca:	65a1      	str	r1, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80085cc:	3b01      	subs	r3, #1
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085d4:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085d8:	f01b 0f07 	tst.w	fp, #7
 80085dc:	d026      	beq.n	800862c <UART_RxISR_16BIT_FIFOEN+0xb8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085de:	f01b 0f01 	tst.w	fp, #1
 80085e2:	d008      	beq.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x82>
 80085e4:	b13f      	cbz	r7, 80085f6 <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085e6:	2301      	movs	r3, #1
 80085e8:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f6:	f01b 0f02 	tst.w	fp, #2
 80085fa:	d035      	beq.n	8008668 <UART_RxISR_16BIT_FIFOEN+0xf4>
 80085fc:	b196      	cbz	r6, 8008624 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085fe:	2302      	movs	r3, #2
 8008600:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008602:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008606:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800860a:	f043 0304 	orr.w	r3, r3, #4
 800860e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008612:	d007      	beq.n	8008624 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008614:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008618:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008624:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d135      	bne.n	8008698 <UART_RxISR_16BIT_FIFOEN+0x124>
      if (huart->RxXferCount == 0U)
 800862c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008630:	b29b      	uxth	r3, r3
 8008632:	b9a3      	cbnz	r3, 800865e <UART_RxISR_16BIT_FIFOEN+0xea>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	6811      	ldr	r1, [r2, #0]
 8008638:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800863c:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800863e:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008640:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008642:	ea01 0109 	and.w	r1, r1, r9
 8008646:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008648:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800864c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800864e:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008650:	2901      	cmp	r1, #1
 8008652:	d017      	beq.n	8008684 <UART_RxISR_16BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8008654:	4620      	mov	r0, r4
 8008656:	f7fb ff23 	bl	80044a0 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800865e:	f01b 0f20 	tst.w	fp, #32
 8008662:	d01f      	beq.n	80086a4 <UART_RxISR_16BIT_FIFOEN+0x130>
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	e7a9      	b.n	80085bc <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008668:	f01b 0f04 	tst.w	fp, #4
 800866c:	d0da      	beq.n	8008624 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800866e:	2e00      	cmp	r6, #0
 8008670:	d0d8      	beq.n	8008624 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008672:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008676:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800867a:	f043 0302 	orr.w	r3, r3, #2
 800867e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008682:	e7cf      	b.n	8008624 <UART_RxISR_16BIT_FIFOEN+0xb0>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008684:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008686:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800868a:	f023 0310 	bic.w	r3, r3, #16
 800868e:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008690:	4620      	mov	r0, r4
 8008692:	f7ff fcd1 	bl	8008038 <HAL_UARTEx_RxEventCallback>
 8008696:	e7e0      	b.n	800865a <UART_RxISR_16BIT_FIFOEN+0xe6>
          HAL_UART_ErrorCallback(huart);
 8008698:	4620      	mov	r0, r4
 800869a:	f7ff fcc1 	bl	8008020 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869e:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 80086a2:	e7c3      	b.n	800862c <UART_RxISR_16BIT_FIFOEN+0xb8>
    rxdatacount = huart->RxXferCount;
 80086a4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80086a8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f43f af70 	beq.w	8008590 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80086b0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80086b4:	429a      	cmp	r2, r3
 80086b6:	f67f af6b 	bls.w	8008590 <UART_RxISR_16BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086ba:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80086bc:	4906      	ldr	r1, [pc, #24]	; (80086d8 <UART_RxISR_16BIT_FIFOEN+0x164>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80086c4:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086c6:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80086c8:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086ca:	f042 0220 	orr.w	r2, r2, #32
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	e75e      	b.n	8008590 <UART_RxISR_16BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 80086d2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086d6:	e75b      	b.n	8008590 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80086d8:	08008389 	.word	0x08008389
 80086dc:	effffffe 	.word	0xeffffffe

080086e0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086e2:	07da      	lsls	r2, r3, #31
{
 80086e4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086e6:	d506      	bpl.n	80086f6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086e8:	6801      	ldr	r1, [r0, #0]
 80086ea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80086ec:	684a      	ldr	r2, [r1, #4]
 80086ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80086f2:	4322      	orrs	r2, r4
 80086f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086f6:	079c      	lsls	r4, r3, #30
 80086f8:	d506      	bpl.n	8008708 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086fa:	6801      	ldr	r1, [r0, #0]
 80086fc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80086fe:	684a      	ldr	r2, [r1, #4]
 8008700:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008704:	4322      	orrs	r2, r4
 8008706:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008708:	0759      	lsls	r1, r3, #29
 800870a:	d506      	bpl.n	800871a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800870c:	6801      	ldr	r1, [r0, #0]
 800870e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008710:	684a      	ldr	r2, [r1, #4]
 8008712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008716:	4322      	orrs	r2, r4
 8008718:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800871a:	071a      	lsls	r2, r3, #28
 800871c:	d506      	bpl.n	800872c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871e:	6801      	ldr	r1, [r0, #0]
 8008720:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008722:	684a      	ldr	r2, [r1, #4]
 8008724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008728:	4322      	orrs	r2, r4
 800872a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800872c:	06dc      	lsls	r4, r3, #27
 800872e:	d506      	bpl.n	800873e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008730:	6801      	ldr	r1, [r0, #0]
 8008732:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008734:	688a      	ldr	r2, [r1, #8]
 8008736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800873a:	4322      	orrs	r2, r4
 800873c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800873e:	0699      	lsls	r1, r3, #26
 8008740:	d506      	bpl.n	8008750 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008742:	6801      	ldr	r1, [r0, #0]
 8008744:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008746:	688a      	ldr	r2, [r1, #8]
 8008748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800874c:	4322      	orrs	r2, r4
 800874e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008750:	065a      	lsls	r2, r3, #25
 8008752:	d509      	bpl.n	8008768 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008754:	6801      	ldr	r1, [r0, #0]
 8008756:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008758:	684a      	ldr	r2, [r1, #4]
 800875a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800875e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008760:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008764:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008766:	d00b      	beq.n	8008780 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008768:	061b      	lsls	r3, r3, #24
 800876a:	d506      	bpl.n	800877a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800876c:	6802      	ldr	r2, [r0, #0]
 800876e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008770:	6853      	ldr	r3, [r2, #4]
 8008772:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008776:	430b      	orrs	r3, r1
 8008778:	6053      	str	r3, [r2, #4]
}
 800877a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008780:	684a      	ldr	r2, [r1, #4]
 8008782:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008784:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008788:	4322      	orrs	r2, r4
 800878a:	604a      	str	r2, [r1, #4]
 800878c:	e7ec      	b.n	8008768 <UART_AdvFeatureConfig+0x88>
 800878e:	bf00      	nop

08008790 <UART_CheckIdleState>:
{
 8008790:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008792:	2300      	movs	r3, #0
{
 8008794:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008796:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800879a:	f7fb fef7 	bl	800458c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80087a4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087a6:	d40d      	bmi.n	80087c4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	0752      	lsls	r2, r2, #29
 80087ac:	d431      	bmi.n	8008812 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80087b0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80087b2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80087b6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 80087ba:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80087bc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c4:	69da      	ldr	r2, [r3, #28]
 80087c6:	0292      	lsls	r2, r2, #10
 80087c8:	d4ee      	bmi.n	80087a8 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ca:	f7fb fedf 	bl	800458c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087ce:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d0:	1b40      	subs	r0, r0, r5
 80087d2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087d6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d8:	d22c      	bcs.n	8008834 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087da:	0750      	lsls	r0, r2, #29
 80087dc:	d5f2      	bpl.n	80087c4 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087de:	69da      	ldr	r2, [r3, #28]
 80087e0:	0511      	lsls	r1, r2, #20
 80087e2:	d5ef      	bpl.n	80087c4 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087e8:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 80087f4:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f6:	f021 0101 	bic.w	r1, r1, #1
 80087fa:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80087fc:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80087fe:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8008802:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8008806:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8008808:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800880c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8008810:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	0258      	lsls	r0, r3, #9
 8008816:	d4ca      	bmi.n	80087ae <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008818:	f7fb feb8 	bl	800458c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800881c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800881e:	1b40      	subs	r0, r0, r5
 8008820:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008824:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008826:	d205      	bcs.n	8008834 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008828:	0751      	lsls	r1, r2, #29
 800882a:	d5f2      	bpl.n	8008812 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800882c:	69da      	ldr	r2, [r3, #28]
 800882e:	0512      	lsls	r2, r2, #20
 8008830:	d5ef      	bpl.n	8008812 <UART_CheckIdleState+0x82>
 8008832:	e7d7      	b.n	80087e4 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008834:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008838:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883a:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 800883c:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883e:	f022 0201 	bic.w	r2, r2, #1
 8008842:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008844:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8008846:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800884a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800884e:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8008850:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8008854:	bd38      	pop	{r3, r4, r5, pc}
 8008856:	bf00      	nop

08008858 <HAL_UART_Init>:
  if (huart == NULL)
 8008858:	2800      	cmp	r0, #0
 800885a:	f000 81b5 	beq.w	8008bc8 <HAL_UART_Init+0x370>
  if (huart->gState == HAL_UART_STATE_RESET)
 800885e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8008862:	b570      	push	{r4, r5, r6, lr}
 8008864:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008866:	2b00      	cmp	r3, #0
 8008868:	d06c      	beq.n	8008944 <HAL_UART_Init+0xec>
  __HAL_UART_DISABLE(huart);
 800886a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800886c:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800886e:	49c0      	ldr	r1, [pc, #768]	; (8008b70 <HAL_UART_Init+0x318>)
  huart->gState = HAL_UART_STATE_BUSY;
 8008870:	2224      	movs	r2, #36	; 0x24
 8008872:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008876:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008878:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800887a:	f020 0001 	bic.w	r0, r0, #1
 800887e:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008880:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008882:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008884:	4332      	orrs	r2, r6
 8008886:	4302      	orrs	r2, r0
 8008888:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800888a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800888c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800888e:	430a      	orrs	r2, r1
 8008890:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008896:	49b7      	ldr	r1, [pc, #732]	; (8008b74 <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008898:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800889c:	432a      	orrs	r2, r5
 800889e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088a0:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088a2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088a4:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088a6:	d052      	beq.n	800894e <HAL_UART_Init+0xf6>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088a8:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088ac:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80088b0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80088b4:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088b6:	430a      	orrs	r2, r1
 80088b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088bc:	49ae      	ldr	r1, [pc, #696]	; (8008b78 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088be:	f022 020f 	bic.w	r2, r2, #15
 80088c2:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088c4:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088c6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088c8:	d028      	beq.n	800891c <HAL_UART_Init+0xc4>
 80088ca:	4aac      	ldr	r2, [pc, #688]	; (8008b7c <HAL_UART_Init+0x324>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	f000 8091 	beq.w	80089f4 <HAL_UART_Init+0x19c>
 80088d2:	4aab      	ldr	r2, [pc, #684]	; (8008b80 <HAL_UART_Init+0x328>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	f000 8165 	beq.w	8008ba4 <HAL_UART_Init+0x34c>
 80088da:	4aaa      	ldr	r2, [pc, #680]	; (8008b84 <HAL_UART_Init+0x32c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	f000 80e4 	beq.w	8008aaa <HAL_UART_Init+0x252>
 80088e2:	4aa9      	ldr	r2, [pc, #676]	; (8008b88 <HAL_UART_Init+0x330>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d111      	bne.n	800890c <HAL_UART_Init+0xb4>
 80088e8:	4ba8      	ldr	r3, [pc, #672]	; (8008b8c <HAL_UART_Init+0x334>)
 80088ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f6:	f000 817d 	beq.w	8008bf4 <HAL_UART_Init+0x39c>
 80088fa:	f200 8101 	bhi.w	8008b00 <HAL_UART_Init+0x2a8>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80e7 	beq.w	8008ad2 <HAL_UART_Init+0x27a>
 8008904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008908:	f000 80dd 	beq.w	8008ac6 <HAL_UART_Init+0x26e>
  huart->NbRxDataToProcess = 1;
 800890c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8008910:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008912:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008916:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8008918:	2001      	movs	r0, #1
 800891a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800891c:	4b9b      	ldr	r3, [pc, #620]	; (8008b8c <HAL_UART_Init+0x334>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	3b01      	subs	r3, #1
 8008928:	2b02      	cmp	r3, #2
 800892a:	f240 80d9 	bls.w	8008ae0 <HAL_UART_Init+0x288>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800892e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008932:	f000 8151 	beq.w	8008bd8 <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008936:	f7fd ff35 	bl	80067a4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800893a:	2800      	cmp	r0, #0
 800893c:	f000 80d3 	beq.w	8008ae6 <HAL_UART_Init+0x28e>
 8008940:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008942:	e081      	b.n	8008a48 <HAL_UART_Init+0x1f0>
    huart->Lock = HAL_UNLOCKED;
 8008944:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8008948:	f7fb fd5c 	bl	8004404 <HAL_UART_MspInit>
 800894c:	e78d      	b.n	800886a <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800894e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008952:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800895a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800895e:	488b      	ldr	r0, [pc, #556]	; (8008b8c <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008960:	f022 020f 	bic.w	r2, r2, #15
 8008964:	430a      	orrs	r2, r1
 8008966:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008968:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800896c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008974:	f000 813c 	beq.w	8008bf0 <HAL_UART_Init+0x398>
 8008978:	d80c      	bhi.n	8008994 <HAL_UART_Init+0x13c>
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 8132 	beq.w	8008be4 <HAL_UART_Init+0x38c>
 8008980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008984:	d1c2      	bne.n	800890c <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8008986:	f7fd fdb1 	bl	80064ec <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800898a:	2800      	cmp	r0, #0
 800898c:	f000 80ab 	beq.w	8008ae6 <HAL_UART_Init+0x28e>
 8008990:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008992:	e004      	b.n	800899e <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008998:	d1b8      	bne.n	800890c <HAL_UART_Init+0xb4>
        pclk = (uint32_t) LSE_VALUE;
 800899a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800899e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089a0:	4b7b      	ldr	r3, [pc, #492]	; (8008b90 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089a2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089a6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80089aa:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ae:	42b3      	cmp	r3, r6
 80089b0:	d3ac      	bcc.n	800890c <HAL_UART_Init+0xb4>
 80089b2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80089b6:	d8a9      	bhi.n	800890c <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b8:	2600      	movs	r6, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	4631      	mov	r1, r6
 80089be:	f7f8 f98b 	bl	8000cd8 <__aeabi_uldivmod>
 80089c2:	020b      	lsls	r3, r1, #8
 80089c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089c8:	0202      	lsls	r2, r0, #8
 80089ca:	0868      	lsrs	r0, r5, #1
 80089cc:	1810      	adds	r0, r2, r0
 80089ce:	f143 0100 	adc.w	r1, r3, #0
 80089d2:	462a      	mov	r2, r5
 80089d4:	4633      	mov	r3, r6
 80089d6:	f7f8 f97f 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089da:	4b6e      	ldr	r3, [pc, #440]	; (8008b94 <HAL_UART_Init+0x33c>)
 80089dc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d893      	bhi.n	800890c <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 80089e4:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80089e6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80089ea:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80089ec:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80089f0:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 80089f2:	e043      	b.n	8008a7c <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089f4:	4b65      	ldr	r3, [pc, #404]	; (8008b8c <HAL_UART_Init+0x334>)
 80089f6:	4a68      	ldr	r2, [pc, #416]	; (8008b98 <HAL_UART_Init+0x340>)
 80089f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fc:	f003 030c 	and.w	r3, r3, #12
 8008a00:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008a06:	d07f      	beq.n	8008b08 <HAL_UART_Init+0x2b0>
    switch (clocksource)
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	f63f af7f 	bhi.w	800890c <HAL_UART_Init+0xb4>
 8008a0e:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <HAL_UART_Init+0x1bc>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008adb 	.word	0x08008adb
 8008a18:	08008937 	.word	0x08008937
 8008a1c:	08008aa7 	.word	0x08008aa7
 8008a20:	0800890d 	.word	0x0800890d
 8008a24:	08008acd 	.word	0x08008acd
 8008a28:	0800890d 	.word	0x0800890d
 8008a2c:	0800890d 	.word	0x0800890d
 8008a30:	0800890d 	.word	0x0800890d
 8008a34:	08008a45 	.word	0x08008a45
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a38:	2b30      	cmp	r3, #48	; 0x30
 8008a3a:	f47f af67 	bne.w	800890c <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008a42:	d07a      	beq.n	8008b3a <HAL_UART_Init+0x2e2>
 8008a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a48:	6862      	ldr	r2, [r4, #4]
 8008a4a:	4b51      	ldr	r3, [pc, #324]	; (8008b90 <HAL_UART_Init+0x338>)
 8008a4c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8008a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a54:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a5c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a5e:	f1a3 0110 	sub.w	r1, r3, #16
 8008a62:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008a66:	4291      	cmp	r1, r2
 8008a68:	f63f af50 	bhi.w	800890c <HAL_UART_Init+0xb4>
        huart->Instance->BRR = usartdiv;
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8008a70:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8008a72:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a7a:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d13a      	bne.n	8008af8 <HAL_UART_Init+0x2a0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a92:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8008a9a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8008a9c:	601a      	str	r2, [r3, #0]
}
 8008a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 8008aa2:	f7ff be75 	b.w	8008790 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8008aa6:	483d      	ldr	r0, [pc, #244]	; (8008b9c <HAL_UART_Init+0x344>)
 8008aa8:	e7ce      	b.n	8008a48 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aaa:	4b38      	ldr	r3, [pc, #224]	; (8008b8c <HAL_UART_Init+0x334>)
 8008aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ab4:	2b80      	cmp	r3, #128	; 0x80
 8008ab6:	f000 809d 	beq.w	8008bf4 <HAL_UART_Init+0x39c>
 8008aba:	f200 8081 	bhi.w	8008bc0 <HAL_UART_Init+0x368>
 8008abe:	b143      	cbz	r3, 8008ad2 <HAL_UART_Init+0x27a>
 8008ac0:	2b40      	cmp	r3, #64	; 0x40
 8008ac2:	f47f af23 	bne.w	800890c <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ac6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008aca:	d07f      	beq.n	8008bcc <HAL_UART_Init+0x374>
        pclk = HAL_RCC_GetSysClockFreq();
 8008acc:	f7fd fd0e 	bl	80064ec <HAL_RCC_GetSysClockFreq>
        break;
 8008ad0:	e733      	b.n	800893a <HAL_UART_Init+0xe2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ad2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008ad6:	f000 8082 	beq.w	8008bde <HAL_UART_Init+0x386>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ada:	f7fd fe51 	bl	8006780 <HAL_RCC_GetPCLK1Freq>
        break;
 8008ade:	e72c      	b.n	800893a <HAL_UART_Init+0xe2>
 8008ae0:	4a2f      	ldr	r2, [pc, #188]	; (8008ba0 <HAL_UART_Init+0x348>)
 8008ae2:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ae4:	e78d      	b.n	8008a02 <HAL_UART_Init+0x1aa>
  huart->RxISR = NULL;
 8008ae6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008ae8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008aec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8008aee:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008af2:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0c4      	beq.n	8008a82 <HAL_UART_Init+0x22a>
    UART_AdvFeatureConfig(huart);
 8008af8:	4620      	mov	r0, r4
 8008afa:	f7ff fdf1 	bl	80086e0 <UART_AdvFeatureConfig>
 8008afe:	e7c0      	b.n	8008a82 <HAL_UART_Init+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b04:	d09b      	beq.n	8008a3e <HAL_UART_Init+0x1e6>
 8008b06:	e701      	b.n	800890c <HAL_UART_Init+0xb4>
    switch (clocksource)
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	f63f aeff 	bhi.w	800890c <HAL_UART_Init+0xb4>
 8008b0e:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <HAL_UART_Init+0x2bc>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008bdf 	.word	0x08008bdf
 8008b18:	08008bd9 	.word	0x08008bd9
 8008b1c:	08008b39 	.word	0x08008b39
 8008b20:	0800890d 	.word	0x0800890d
 8008b24:	08008bcd 	.word	0x08008bcd
 8008b28:	0800890d 	.word	0x0800890d
 8008b2c:	0800890d 	.word	0x0800890d
 8008b30:	0800890d 	.word	0x0800890d
 8008b34:	08008b3b 	.word	0x08008b3b
        pclk = (uint32_t) HSI_VALUE;
 8008b38:	4818      	ldr	r0, [pc, #96]	; (8008b9c <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b3a:	6862      	ldr	r2, [r4, #4]
 8008b3c:	4914      	ldr	r1, [pc, #80]	; (8008b90 <HAL_UART_Init+0x338>)
 8008b3e:	0853      	lsrs	r3, r2, #1
 8008b40:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8008b44:	fbb0 f0f1 	udiv	r0, r0, r1
 8008b48:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008b4c:	fbb0 f0f2 	udiv	r0, r0, r2
 8008b50:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b52:	f1a2 0110 	sub.w	r1, r2, #16
 8008b56:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	f63f aed6 	bhi.w	800890c <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b60:	f020 030f 	bic.w	r3, r0, #15
 8008b64:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b66:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8008b6a:	6820      	ldr	r0, [r4, #0]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	e77e      	b.n	8008a6e <HAL_UART_Init+0x216>
 8008b70:	cfff69f3 	.word	0xcfff69f3
 8008b74:	40008000 	.word	0x40008000
 8008b78:	40013800 	.word	0x40013800
 8008b7c:	40004400 	.word	0x40004400
 8008b80:	40004800 	.word	0x40004800
 8008b84:	40004c00 	.word	0x40004c00
 8008b88:	40005000 	.word	0x40005000
 8008b8c:	40021000 	.word	0x40021000
 8008b90:	0800ea1c 	.word	0x0800ea1c
 8008b94:	000ffcff 	.word	0x000ffcff
 8008b98:	0800ea0c 	.word	0x0800ea0c
 8008b9c:	00f42400 	.word	0x00f42400
 8008ba0:	0800ea08 	.word	0x0800ea08
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ba4:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <HAL_UART_Init+0x3a8>)
 8008ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008baa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d020      	beq.n	8008bf4 <HAL_UART_Init+0x39c>
 8008bb2:	f63f af41 	bhi.w	8008a38 <HAL_UART_Init+0x1e0>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d08b      	beq.n	8008ad2 <HAL_UART_Init+0x27a>
 8008bba:	2b10      	cmp	r3, #16
 8008bbc:	d083      	beq.n	8008ac6 <HAL_UART_Init+0x26e>
 8008bbe:	e6a5      	b.n	800890c <HAL_UART_Init+0xb4>
 8008bc0:	2bc0      	cmp	r3, #192	; 0xc0
 8008bc2:	f43f af3c 	beq.w	8008a3e <HAL_UART_Init+0x1e6>
 8008bc6:	e6a1      	b.n	800890c <HAL_UART_Init+0xb4>
}
 8008bc8:	2001      	movs	r0, #1
 8008bca:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8008bcc:	f7fd fc8e 	bl	80064ec <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d088      	beq.n	8008ae6 <HAL_UART_Init+0x28e>
 8008bd4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008bd6:	e7b0      	b.n	8008b3a <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd8:	f7fd fde4 	bl	80067a4 <HAL_RCC_GetPCLK2Freq>
        break;
 8008bdc:	e7f8      	b.n	8008bd0 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bde:	f7fd fdcf 	bl	8006780 <HAL_RCC_GetPCLK1Freq>
        break;
 8008be2:	e7f5      	b.n	8008bd0 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be4:	f7fd fdcc 	bl	8006780 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008be8:	2800      	cmp	r0, #0
 8008bea:	f43f af7c 	beq.w	8008ae6 <HAL_UART_Init+0x28e>
 8008bee:	e6cf      	b.n	8008990 <HAL_UART_Init+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bf0:	4804      	ldr	r0, [pc, #16]	; (8008c04 <HAL_UART_Init+0x3ac>)
 8008bf2:	e6d4      	b.n	800899e <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bf4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008bf8:	4802      	ldr	r0, [pc, #8]	; (8008c04 <HAL_UART_Init+0x3ac>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bfa:	f47f af25 	bne.w	8008a48 <HAL_UART_Init+0x1f0>
 8008bfe:	e79c      	b.n	8008b3a <HAL_UART_Init+0x2e2>
 8008c00:	40021000 	.word	0x40021000
 8008c04:	00f42400 	.word	0x00f42400

08008c08 <UART_WaitOnFlagUntilTimeout>:
{
 8008c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c10:	6804      	ldr	r4, [r0, #0]
 8008c12:	4607      	mov	r7, r0
 8008c14:	460e      	mov	r6, r1
 8008c16:	4615      	mov	r5, r2
 8008c18:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008c1e:	d10a      	bne.n	8008c36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008c20:	69e3      	ldr	r3, [r4, #28]
 8008c22:	ea36 0303 	bics.w	r3, r6, r3
 8008c26:	bf0c      	ite	eq
 8008c28:	2301      	moveq	r3, #1
 8008c2a:	2300      	movne	r3, #0
 8008c2c:	429d      	cmp	r5, r3
 8008c2e:	d0f7      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8008c30:	2000      	movs	r0, #0
}
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c36:	69e3      	ldr	r3, [r4, #28]
 8008c38:	ea36 0303 	bics.w	r3, r6, r3
 8008c3c:	bf0c      	ite	eq
 8008c3e:	2301      	moveq	r3, #1
 8008c40:	2300      	movne	r3, #0
 8008c42:	429d      	cmp	r5, r3
 8008c44:	d1f4      	bne.n	8008c30 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c46:	f7fb fca1 	bl	800458c <HAL_GetTick>
 8008c4a:	eba0 0009 	sub.w	r0, r0, r9
 8008c4e:	4540      	cmp	r0, r8
 8008c50:	d820      	bhi.n	8008c94 <UART_WaitOnFlagUntilTimeout+0x8c>
 8008c52:	f1b8 0f00 	cmp.w	r8, #0
 8008c56:	d01d      	beq.n	8008c94 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c58:	683c      	ldr	r4, [r7, #0]
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	075a      	lsls	r2, r3, #29
 8008c5e:	d5dc      	bpl.n	8008c1a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c60:	69e3      	ldr	r3, [r4, #28]
 8008c62:	051b      	lsls	r3, r3, #20
 8008c64:	d5d9      	bpl.n	8008c1a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c6a:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c72:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c74:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008c76:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c78:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 8008c7c:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7e:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 8008c80:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8008c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8008c86:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8008c92:	e7ce      	b.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9e:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008ca0:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca2:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8008ca6:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca8:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8008caa:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8008cac:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8008cb0:	f887 4080 	strb.w	r4, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8008cb8:	e7bb      	b.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x2a>
 8008cba:	bf00      	nop

08008cbc <HAL_UART_Transmit>:
{
 8008cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cc0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8008cc2:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8008cc6:	2820      	cmp	r0, #32
{
 8008cc8:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8008cca:	d17b      	bne.n	8008dc4 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8008ccc:	4688      	mov	r8, r1
 8008cce:	2900      	cmp	r1, #0
 8008cd0:	d048      	beq.n	8008d64 <HAL_UART_Transmit+0xa8>
 8008cd2:	4617      	mov	r7, r2
 8008cd4:	2a00      	cmp	r2, #0
 8008cd6:	d045      	beq.n	8008d64 <HAL_UART_Transmit+0xa8>
 8008cd8:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8008cda:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d070      	beq.n	8008dc4 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ce2:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8008ce4:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce6:	f04f 0900 	mov.w	r9, #0
 8008cea:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 8008cee:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cf2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 8008cf6:	f7fb fc49 	bl	800458c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cfa:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008cfc:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8008d04:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8008d06:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0a:	d05f      	beq.n	8008dcc <HAL_UART_Transmit+0x110>
      pdata16bits = NULL;
 8008d0c:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8008d0e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8008d12:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8008d14:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8008d16:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8008d1a:	b1b3      	cbz	r3, 8008d4a <HAL_UART_Transmit+0x8e>
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	1c69      	adds	r1, r5, #1
 8008d20:	d124      	bne.n	8008d6c <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d22:	69d3      	ldr	r3, [r2, #28]
 8008d24:	061b      	lsls	r3, r3, #24
 8008d26:	d5fc      	bpl.n	8008d22 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8008d28:	f1b8 0f00 	cmp.w	r8, #0
 8008d2c:	d045      	beq.n	8008dba <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d2e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d32:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8008d34:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d40:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e9      	bne.n	8008d1e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d4a:	9500      	str	r5, [sp, #0]
 8008d4c:	4633      	mov	r3, r6
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7ff ff58 	bl	8008c08 <UART_WaitOnFlagUntilTimeout>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d152      	bne.n	8008e02 <HAL_UART_Transmit+0x146>
    huart->gState = HAL_UART_STATE_READY;
 8008d5c:	2320      	movs	r3, #32
 8008d5e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8008d62:	e000      	b.n	8008d66 <HAL_UART_Transmit+0xaa>
      return  HAL_ERROR;
 8008d64:	2001      	movs	r0, #1
}
 8008d66:	b003      	add	sp, #12
 8008d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6c:	69d3      	ldr	r3, [r2, #28]
 8008d6e:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8008d72:	d1d9      	bne.n	8008d28 <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d74:	f7fb fc0a 	bl	800458c <HAL_GetTick>
 8008d78:	1b80      	subs	r0, r0, r6
 8008d7a:	4285      	cmp	r5, r0
 8008d7c:	d32c      	bcc.n	8008dd8 <HAL_UART_Transmit+0x11c>
 8008d7e:	b35d      	cbz	r5, 8008dd8 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	6813      	ldr	r3, [r2, #0]
 8008d84:	075b      	lsls	r3, r3, #29
 8008d86:	d5ca      	bpl.n	8008d1e <HAL_UART_Transmit+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d88:	69d3      	ldr	r3, [r2, #28]
 8008d8a:	0518      	lsls	r0, r3, #20
 8008d8c:	d5c7      	bpl.n	8008d1e <HAL_UART_Transmit+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d92:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d94:	6813      	ldr	r3, [r2, #0]
 8008d96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d9a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9c:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008d9e:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da0:	f021 0101 	bic.w	r1, r1, #1
 8008da4:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 8008da6:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8008da8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8008dac:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008db0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008db4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 8008db8:	e7d5      	b.n	8008d66 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dba:	f837 3b02 	ldrh.w	r3, [r7], #2
 8008dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc2:	e7b6      	b.n	8008d32 <HAL_UART_Transmit+0x76>
    return HAL_BUSY;
 8008dc4:	2002      	movs	r0, #2
}
 8008dc6:	b003      	add	sp, #12
 8008dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d19c      	bne.n	8008d0c <HAL_UART_Transmit+0x50>
 8008dd2:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8008dd4:	4698      	mov	r8, r3
 8008dd6:	e79a      	b.n	8008d0e <HAL_UART_Transmit+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008de0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de2:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008de4:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de6:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8008dea:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8008dec:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dee:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008df0:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8008df4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008df8:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8008dfc:	b003      	add	sp, #12
 8008dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8008e02:	2003      	movs	r0, #3
 8008e04:	e7af      	b.n	8008d66 <HAL_UART_Transmit+0xaa>
 8008e06:	bf00      	nop

08008e08 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop

08008e0c <HAL_UARTEx_RxFifoFullCallback>:
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop

08008e10 <HAL_UARTEx_TxFifoEmptyCallback>:
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop

08008e14 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e14:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8008e18:	2a01      	cmp	r2, #1
 8008e1a:	d017      	beq.n	8008e4c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e1c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008e1e:	2124      	movs	r1, #36	; 0x24
{
 8008e20:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8008e22:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8008e26:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e28:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e2a:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e2c:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e2e:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8008e32:	f024 0401 	bic.w	r4, r4, #1
 8008e36:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8008e38:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e3a:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e3c:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8008e42:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008e44:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8008e48:	bc30      	pop	{r4, r5}
 8008e4a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008e4c:	2002      	movs	r0, #2
}
 8008e4e:	4770      	bx	lr

08008e50 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e50:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8008e54:	2a01      	cmp	r2, #1
 8008e56:	d033      	beq.n	8008ec0 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e5c:	681a      	ldr	r2, [r3, #0]
{
 8008e5e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008e60:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e64:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e66:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e68:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8008e6a:	f020 0001 	bic.w	r0, r0, #1
 8008e6e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e70:	6890      	ldr	r0, [r2, #8]
 8008e72:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8008e76:	4301      	orrs	r1, r0
 8008e78:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e7a:	b1f5      	cbz	r5, 8008eba <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e7c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e7e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e80:	4810      	ldr	r0, [pc, #64]	; (8008ec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e82:	4f11      	ldr	r7, [pc, #68]	; (8008ec8 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e84:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e88:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e8a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e8c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e8e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e90:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e92:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e94:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e96:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e9a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e9e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008ea2:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8008ea4:	2520      	movs	r5, #32
 8008ea6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eaa:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8008eac:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8008eb0:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008eb2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8008eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8008eb8:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8008eba:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	e7ee      	b.n	8008e9e <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8008ec0:	2002      	movs	r0, #2
}
 8008ec2:	4770      	bx	lr
 8008ec4:	0800ea3c 	.word	0x0800ea3c
 8008ec8:	0800ea34 	.word	0x0800ea34

08008ecc <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008ecc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8008ed0:	2a01      	cmp	r2, #1
 8008ed2:	d033      	beq.n	8008f3c <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed8:	681a      	ldr	r2, [r3, #0]
{
 8008eda:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008edc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ee0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008ee2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ee4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8008ee6:	f020 0001 	bic.w	r0, r0, #1
 8008eea:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008eec:	6890      	ldr	r0, [r2, #8]
 8008eee:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8008ef2:	4301      	orrs	r1, r0
 8008ef4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ef6:	b1f5      	cbz	r5, 8008f36 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ef8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008efa:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008efc:	4810      	ldr	r0, [pc, #64]	; (8008f40 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8008efe:	4f11      	ldr	r7, [pc, #68]	; (8008f44 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f00:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f04:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f06:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f08:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f0a:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f0c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f0e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f10:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f12:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f16:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f1a:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008f1e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8008f20:	2520      	movs	r5, #32
 8008f22:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f26:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8008f28:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8008f2c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008f2e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8008f32:	bcf0      	pop	{r4, r5, r6, r7}
 8008f34:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8008f36:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008f38:	4608      	mov	r0, r1
 8008f3a:	e7ee      	b.n	8008f1a <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8008f3c:	2002      	movs	r0, #2
}
 8008f3e:	4770      	bx	lr
 8008f40:	0800ea3c 	.word	0x0800ea3c
 8008f44:	0800ea34 	.word	0x0800ea34

08008f48 <atof>:
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f001 bb7f 	b.w	800a64c <strtod>

08008f4e <atoi>:
 8008f4e:	220a      	movs	r2, #10
 8008f50:	2100      	movs	r1, #0
 8008f52:	f001 bc0b 	b.w	800a76c <strtol>
	...

08008f58 <__errno>:
 8008f58:	4b01      	ldr	r3, [pc, #4]	; (8008f60 <__errno+0x8>)
 8008f5a:	6818      	ldr	r0, [r3, #0]
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	2000002c 	.word	0x2000002c

08008f64 <__libc_init_array>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	4d0d      	ldr	r5, [pc, #52]	; (8008f9c <__libc_init_array+0x38>)
 8008f68:	4c0d      	ldr	r4, [pc, #52]	; (8008fa0 <__libc_init_array+0x3c>)
 8008f6a:	1b64      	subs	r4, r4, r5
 8008f6c:	10a4      	asrs	r4, r4, #2
 8008f6e:	2600      	movs	r6, #0
 8008f70:	42a6      	cmp	r6, r4
 8008f72:	d109      	bne.n	8008f88 <__libc_init_array+0x24>
 8008f74:	4d0b      	ldr	r5, [pc, #44]	; (8008fa4 <__libc_init_array+0x40>)
 8008f76:	4c0c      	ldr	r4, [pc, #48]	; (8008fa8 <__libc_init_array+0x44>)
 8008f78:	f004 fbea 	bl	800d750 <_init>
 8008f7c:	1b64      	subs	r4, r4, r5
 8008f7e:	10a4      	asrs	r4, r4, #2
 8008f80:	2600      	movs	r6, #0
 8008f82:	42a6      	cmp	r6, r4
 8008f84:	d105      	bne.n	8008f92 <__libc_init_array+0x2e>
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8c:	4798      	blx	r3
 8008f8e:	3601      	adds	r6, #1
 8008f90:	e7ee      	b.n	8008f70 <__libc_init_array+0xc>
 8008f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f96:	4798      	blx	r3
 8008f98:	3601      	adds	r6, #1
 8008f9a:	e7f2      	b.n	8008f82 <__libc_init_array+0x1e>
 8008f9c:	0800ef38 	.word	0x0800ef38
 8008fa0:	0800ef38 	.word	0x0800ef38
 8008fa4:	0800ef38 	.word	0x0800ef38
 8008fa8:	0800ef3c 	.word	0x0800ef3c

08008fac <memcpy>:
 8008fac:	440a      	add	r2, r1
 8008fae:	4291      	cmp	r1, r2
 8008fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fb4:	d100      	bne.n	8008fb8 <memcpy+0xc>
 8008fb6:	4770      	bx	lr
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fc2:	4291      	cmp	r1, r2
 8008fc4:	d1f9      	bne.n	8008fba <memcpy+0xe>
 8008fc6:	bd10      	pop	{r4, pc}

08008fc8 <memmove>:
 8008fc8:	4288      	cmp	r0, r1
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	eb01 0402 	add.w	r4, r1, r2
 8008fd0:	d902      	bls.n	8008fd8 <memmove+0x10>
 8008fd2:	4284      	cmp	r4, r0
 8008fd4:	4623      	mov	r3, r4
 8008fd6:	d807      	bhi.n	8008fe8 <memmove+0x20>
 8008fd8:	1e43      	subs	r3, r0, #1
 8008fda:	42a1      	cmp	r1, r4
 8008fdc:	d008      	beq.n	8008ff0 <memmove+0x28>
 8008fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fe6:	e7f8      	b.n	8008fda <memmove+0x12>
 8008fe8:	4402      	add	r2, r0
 8008fea:	4601      	mov	r1, r0
 8008fec:	428a      	cmp	r2, r1
 8008fee:	d100      	bne.n	8008ff2 <memmove+0x2a>
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ffa:	e7f7      	b.n	8008fec <memmove+0x24>

08008ffc <memset>:
 8008ffc:	4402      	add	r2, r0
 8008ffe:	4603      	mov	r3, r0
 8009000:	4293      	cmp	r3, r2
 8009002:	d100      	bne.n	8009006 <memset+0xa>
 8009004:	4770      	bx	lr
 8009006:	f803 1b01 	strb.w	r1, [r3], #1
 800900a:	e7f9      	b.n	8009000 <memset+0x4>

0800900c <__cvt>:
 800900c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009010:	ec55 4b10 	vmov	r4, r5, d0
 8009014:	2d00      	cmp	r5, #0
 8009016:	460e      	mov	r6, r1
 8009018:	4619      	mov	r1, r3
 800901a:	462b      	mov	r3, r5
 800901c:	bfbb      	ittet	lt
 800901e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009022:	461d      	movlt	r5, r3
 8009024:	2300      	movge	r3, #0
 8009026:	232d      	movlt	r3, #45	; 0x2d
 8009028:	700b      	strb	r3, [r1, #0]
 800902a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800902c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009030:	4691      	mov	r9, r2
 8009032:	f023 0820 	bic.w	r8, r3, #32
 8009036:	bfbc      	itt	lt
 8009038:	4622      	movlt	r2, r4
 800903a:	4614      	movlt	r4, r2
 800903c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009040:	d005      	beq.n	800904e <__cvt+0x42>
 8009042:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009046:	d100      	bne.n	800904a <__cvt+0x3e>
 8009048:	3601      	adds	r6, #1
 800904a:	2102      	movs	r1, #2
 800904c:	e000      	b.n	8009050 <__cvt+0x44>
 800904e:	2103      	movs	r1, #3
 8009050:	ab03      	add	r3, sp, #12
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	ab02      	add	r3, sp, #8
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	ec45 4b10 	vmov	d0, r4, r5
 800905c:	4653      	mov	r3, sl
 800905e:	4632      	mov	r2, r6
 8009060:	f001 fcda 	bl	800aa18 <_dtoa_r>
 8009064:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009068:	4607      	mov	r7, r0
 800906a:	d102      	bne.n	8009072 <__cvt+0x66>
 800906c:	f019 0f01 	tst.w	r9, #1
 8009070:	d022      	beq.n	80090b8 <__cvt+0xac>
 8009072:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009076:	eb07 0906 	add.w	r9, r7, r6
 800907a:	d110      	bne.n	800909e <__cvt+0x92>
 800907c:	783b      	ldrb	r3, [r7, #0]
 800907e:	2b30      	cmp	r3, #48	; 0x30
 8009080:	d10a      	bne.n	8009098 <__cvt+0x8c>
 8009082:	2200      	movs	r2, #0
 8009084:	2300      	movs	r3, #0
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 fd45 	bl	8000b18 <__aeabi_dcmpeq>
 800908e:	b918      	cbnz	r0, 8009098 <__cvt+0x8c>
 8009090:	f1c6 0601 	rsb	r6, r6, #1
 8009094:	f8ca 6000 	str.w	r6, [sl]
 8009098:	f8da 3000 	ldr.w	r3, [sl]
 800909c:	4499      	add	r9, r3
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fd37 	bl	8000b18 <__aeabi_dcmpeq>
 80090aa:	b108      	cbz	r0, 80090b0 <__cvt+0xa4>
 80090ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80090b0:	2230      	movs	r2, #48	; 0x30
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	454b      	cmp	r3, r9
 80090b6:	d307      	bcc.n	80090c8 <__cvt+0xbc>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090bc:	1bdb      	subs	r3, r3, r7
 80090be:	4638      	mov	r0, r7
 80090c0:	6013      	str	r3, [r2, #0]
 80090c2:	b004      	add	sp, #16
 80090c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c8:	1c59      	adds	r1, r3, #1
 80090ca:	9103      	str	r1, [sp, #12]
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e7f0      	b.n	80090b2 <__cvt+0xa6>

080090d0 <__exponent>:
 80090d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d2:	4603      	mov	r3, r0
 80090d4:	2900      	cmp	r1, #0
 80090d6:	bfb8      	it	lt
 80090d8:	4249      	neglt	r1, r1
 80090da:	f803 2b02 	strb.w	r2, [r3], #2
 80090de:	bfb4      	ite	lt
 80090e0:	222d      	movlt	r2, #45	; 0x2d
 80090e2:	222b      	movge	r2, #43	; 0x2b
 80090e4:	2909      	cmp	r1, #9
 80090e6:	7042      	strb	r2, [r0, #1]
 80090e8:	dd2a      	ble.n	8009140 <__exponent+0x70>
 80090ea:	f10d 0407 	add.w	r4, sp, #7
 80090ee:	46a4      	mov	ip, r4
 80090f0:	270a      	movs	r7, #10
 80090f2:	46a6      	mov	lr, r4
 80090f4:	460a      	mov	r2, r1
 80090f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80090fa:	fb07 1516 	mls	r5, r7, r6, r1
 80090fe:	3530      	adds	r5, #48	; 0x30
 8009100:	2a63      	cmp	r2, #99	; 0x63
 8009102:	f104 34ff 	add.w	r4, r4, #4294967295
 8009106:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800910a:	4631      	mov	r1, r6
 800910c:	dcf1      	bgt.n	80090f2 <__exponent+0x22>
 800910e:	3130      	adds	r1, #48	; 0x30
 8009110:	f1ae 0502 	sub.w	r5, lr, #2
 8009114:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009118:	1c44      	adds	r4, r0, #1
 800911a:	4629      	mov	r1, r5
 800911c:	4561      	cmp	r1, ip
 800911e:	d30a      	bcc.n	8009136 <__exponent+0x66>
 8009120:	f10d 0209 	add.w	r2, sp, #9
 8009124:	eba2 020e 	sub.w	r2, r2, lr
 8009128:	4565      	cmp	r5, ip
 800912a:	bf88      	it	hi
 800912c:	2200      	movhi	r2, #0
 800912e:	4413      	add	r3, r2
 8009130:	1a18      	subs	r0, r3, r0
 8009132:	b003      	add	sp, #12
 8009134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800913a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800913e:	e7ed      	b.n	800911c <__exponent+0x4c>
 8009140:	2330      	movs	r3, #48	; 0x30
 8009142:	3130      	adds	r1, #48	; 0x30
 8009144:	7083      	strb	r3, [r0, #2]
 8009146:	70c1      	strb	r1, [r0, #3]
 8009148:	1d03      	adds	r3, r0, #4
 800914a:	e7f1      	b.n	8009130 <__exponent+0x60>

0800914c <_printf_float>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	ed2d 8b02 	vpush	{d8}
 8009154:	b08d      	sub	sp, #52	; 0x34
 8009156:	460c      	mov	r4, r1
 8009158:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800915c:	4616      	mov	r6, r2
 800915e:	461f      	mov	r7, r3
 8009160:	4605      	mov	r5, r0
 8009162:	f002 ff6b 	bl	800c03c <_localeconv_r>
 8009166:	f8d0 a000 	ldr.w	sl, [r0]
 800916a:	4650      	mov	r0, sl
 800916c:	f7f7 f858 	bl	8000220 <strlen>
 8009170:	2300      	movs	r3, #0
 8009172:	930a      	str	r3, [sp, #40]	; 0x28
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	9305      	str	r3, [sp, #20]
 8009178:	f8d8 3000 	ldr.w	r3, [r8]
 800917c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009180:	3307      	adds	r3, #7
 8009182:	f023 0307 	bic.w	r3, r3, #7
 8009186:	f103 0208 	add.w	r2, r3, #8
 800918a:	f8c8 2000 	str.w	r2, [r8]
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009196:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800919a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800919e:	9307      	str	r3, [sp, #28]
 80091a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80091a4:	ee08 0a10 	vmov	s16, r0
 80091a8:	4b9f      	ldr	r3, [pc, #636]	; (8009428 <_printf_float+0x2dc>)
 80091aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	f7f7 fce3 	bl	8000b7c <__aeabi_dcmpun>
 80091b6:	bb88      	cbnz	r0, 800921c <_printf_float+0xd0>
 80091b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091bc:	4b9a      	ldr	r3, [pc, #616]	; (8009428 <_printf_float+0x2dc>)
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	f7f7 fcbd 	bl	8000b40 <__aeabi_dcmple>
 80091c6:	bb48      	cbnz	r0, 800921c <_printf_float+0xd0>
 80091c8:	2200      	movs	r2, #0
 80091ca:	2300      	movs	r3, #0
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 fcac 	bl	8000b2c <__aeabi_dcmplt>
 80091d4:	b110      	cbz	r0, 80091dc <_printf_float+0x90>
 80091d6:	232d      	movs	r3, #45	; 0x2d
 80091d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091dc:	4b93      	ldr	r3, [pc, #588]	; (800942c <_printf_float+0x2e0>)
 80091de:	4894      	ldr	r0, [pc, #592]	; (8009430 <_printf_float+0x2e4>)
 80091e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091e4:	bf94      	ite	ls
 80091e6:	4698      	movls	r8, r3
 80091e8:	4680      	movhi	r8, r0
 80091ea:	2303      	movs	r3, #3
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	9b05      	ldr	r3, [sp, #20]
 80091f0:	f023 0204 	bic.w	r2, r3, #4
 80091f4:	6022      	str	r2, [r4, #0]
 80091f6:	f04f 0900 	mov.w	r9, #0
 80091fa:	9700      	str	r7, [sp, #0]
 80091fc:	4633      	mov	r3, r6
 80091fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	f000 f9d8 	bl	80095b8 <_printf_common>
 8009208:	3001      	adds	r0, #1
 800920a:	f040 8090 	bne.w	800932e <_printf_float+0x1e2>
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	b00d      	add	sp, #52	; 0x34
 8009214:	ecbd 8b02 	vpop	{d8}
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	4642      	mov	r2, r8
 800921e:	464b      	mov	r3, r9
 8009220:	4640      	mov	r0, r8
 8009222:	4649      	mov	r1, r9
 8009224:	f7f7 fcaa 	bl	8000b7c <__aeabi_dcmpun>
 8009228:	b140      	cbz	r0, 800923c <_printf_float+0xf0>
 800922a:	464b      	mov	r3, r9
 800922c:	2b00      	cmp	r3, #0
 800922e:	bfbc      	itt	lt
 8009230:	232d      	movlt	r3, #45	; 0x2d
 8009232:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009236:	487f      	ldr	r0, [pc, #508]	; (8009434 <_printf_float+0x2e8>)
 8009238:	4b7f      	ldr	r3, [pc, #508]	; (8009438 <_printf_float+0x2ec>)
 800923a:	e7d1      	b.n	80091e0 <_printf_float+0x94>
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009242:	9206      	str	r2, [sp, #24]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	d13f      	bne.n	80092c8 <_printf_float+0x17c>
 8009248:	2306      	movs	r3, #6
 800924a:	6063      	str	r3, [r4, #4]
 800924c:	9b05      	ldr	r3, [sp, #20]
 800924e:	6861      	ldr	r1, [r4, #4]
 8009250:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009254:	2300      	movs	r3, #0
 8009256:	9303      	str	r3, [sp, #12]
 8009258:	ab0a      	add	r3, sp, #40	; 0x28
 800925a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800925e:	ab09      	add	r3, sp, #36	; 0x24
 8009260:	ec49 8b10 	vmov	d0, r8, r9
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	6022      	str	r2, [r4, #0]
 8009268:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800926c:	4628      	mov	r0, r5
 800926e:	f7ff fecd 	bl	800900c <__cvt>
 8009272:	9b06      	ldr	r3, [sp, #24]
 8009274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009276:	2b47      	cmp	r3, #71	; 0x47
 8009278:	4680      	mov	r8, r0
 800927a:	d108      	bne.n	800928e <_printf_float+0x142>
 800927c:	1cc8      	adds	r0, r1, #3
 800927e:	db02      	blt.n	8009286 <_printf_float+0x13a>
 8009280:	6863      	ldr	r3, [r4, #4]
 8009282:	4299      	cmp	r1, r3
 8009284:	dd41      	ble.n	800930a <_printf_float+0x1be>
 8009286:	f1ab 0b02 	sub.w	fp, fp, #2
 800928a:	fa5f fb8b 	uxtb.w	fp, fp
 800928e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009292:	d820      	bhi.n	80092d6 <_printf_float+0x18a>
 8009294:	3901      	subs	r1, #1
 8009296:	465a      	mov	r2, fp
 8009298:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800929c:	9109      	str	r1, [sp, #36]	; 0x24
 800929e:	f7ff ff17 	bl	80090d0 <__exponent>
 80092a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092a4:	1813      	adds	r3, r2, r0
 80092a6:	2a01      	cmp	r2, #1
 80092a8:	4681      	mov	r9, r0
 80092aa:	6123      	str	r3, [r4, #16]
 80092ac:	dc02      	bgt.n	80092b4 <_printf_float+0x168>
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	07d2      	lsls	r2, r2, #31
 80092b2:	d501      	bpl.n	80092b8 <_printf_float+0x16c>
 80092b4:	3301      	adds	r3, #1
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d09c      	beq.n	80091fa <_printf_float+0xae>
 80092c0:	232d      	movs	r3, #45	; 0x2d
 80092c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c6:	e798      	b.n	80091fa <_printf_float+0xae>
 80092c8:	9a06      	ldr	r2, [sp, #24]
 80092ca:	2a47      	cmp	r2, #71	; 0x47
 80092cc:	d1be      	bne.n	800924c <_printf_float+0x100>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1bc      	bne.n	800924c <_printf_float+0x100>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e7b9      	b.n	800924a <_printf_float+0xfe>
 80092d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092da:	d118      	bne.n	800930e <_printf_float+0x1c2>
 80092dc:	2900      	cmp	r1, #0
 80092de:	6863      	ldr	r3, [r4, #4]
 80092e0:	dd0b      	ble.n	80092fa <_printf_float+0x1ae>
 80092e2:	6121      	str	r1, [r4, #16]
 80092e4:	b913      	cbnz	r3, 80092ec <_printf_float+0x1a0>
 80092e6:	6822      	ldr	r2, [r4, #0]
 80092e8:	07d0      	lsls	r0, r2, #31
 80092ea:	d502      	bpl.n	80092f2 <_printf_float+0x1a6>
 80092ec:	3301      	adds	r3, #1
 80092ee:	440b      	add	r3, r1
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80092f4:	f04f 0900 	mov.w	r9, #0
 80092f8:	e7de      	b.n	80092b8 <_printf_float+0x16c>
 80092fa:	b913      	cbnz	r3, 8009302 <_printf_float+0x1b6>
 80092fc:	6822      	ldr	r2, [r4, #0]
 80092fe:	07d2      	lsls	r2, r2, #31
 8009300:	d501      	bpl.n	8009306 <_printf_float+0x1ba>
 8009302:	3302      	adds	r3, #2
 8009304:	e7f4      	b.n	80092f0 <_printf_float+0x1a4>
 8009306:	2301      	movs	r3, #1
 8009308:	e7f2      	b.n	80092f0 <_printf_float+0x1a4>
 800930a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800930e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009310:	4299      	cmp	r1, r3
 8009312:	db05      	blt.n	8009320 <_printf_float+0x1d4>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	6121      	str	r1, [r4, #16]
 8009318:	07d8      	lsls	r0, r3, #31
 800931a:	d5ea      	bpl.n	80092f2 <_printf_float+0x1a6>
 800931c:	1c4b      	adds	r3, r1, #1
 800931e:	e7e7      	b.n	80092f0 <_printf_float+0x1a4>
 8009320:	2900      	cmp	r1, #0
 8009322:	bfd4      	ite	le
 8009324:	f1c1 0202 	rsble	r2, r1, #2
 8009328:	2201      	movgt	r2, #1
 800932a:	4413      	add	r3, r2
 800932c:	e7e0      	b.n	80092f0 <_printf_float+0x1a4>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	055a      	lsls	r2, r3, #21
 8009332:	d407      	bmi.n	8009344 <_printf_float+0x1f8>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	4642      	mov	r2, r8
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	d12c      	bne.n	800939c <_printf_float+0x250>
 8009342:	e764      	b.n	800920e <_printf_float+0xc2>
 8009344:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009348:	f240 80e0 	bls.w	800950c <_printf_float+0x3c0>
 800934c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	f7f7 fbe0 	bl	8000b18 <__aeabi_dcmpeq>
 8009358:	2800      	cmp	r0, #0
 800935a:	d034      	beq.n	80093c6 <_printf_float+0x27a>
 800935c:	4a37      	ldr	r2, [pc, #220]	; (800943c <_printf_float+0x2f0>)
 800935e:	2301      	movs	r3, #1
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f af51 	beq.w	800920e <_printf_float+0xc2>
 800936c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009370:	429a      	cmp	r2, r3
 8009372:	db02      	blt.n	800937a <_printf_float+0x22e>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	07d8      	lsls	r0, r3, #31
 8009378:	d510      	bpl.n	800939c <_printf_float+0x250>
 800937a:	ee18 3a10 	vmov	r3, s16
 800937e:	4652      	mov	r2, sl
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af41 	beq.w	800920e <_printf_float+0xc2>
 800938c:	f04f 0800 	mov.w	r8, #0
 8009390:	f104 091a 	add.w	r9, r4, #26
 8009394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009396:	3b01      	subs	r3, #1
 8009398:	4543      	cmp	r3, r8
 800939a:	dc09      	bgt.n	80093b0 <_printf_float+0x264>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	079b      	lsls	r3, r3, #30
 80093a0:	f100 8105 	bmi.w	80095ae <_printf_float+0x462>
 80093a4:	68e0      	ldr	r0, [r4, #12]
 80093a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a8:	4298      	cmp	r0, r3
 80093aa:	bfb8      	it	lt
 80093ac:	4618      	movlt	r0, r3
 80093ae:	e730      	b.n	8009212 <_printf_float+0xc6>
 80093b0:	2301      	movs	r3, #1
 80093b2:	464a      	mov	r2, r9
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	f43f af27 	beq.w	800920e <_printf_float+0xc2>
 80093c0:	f108 0801 	add.w	r8, r8, #1
 80093c4:	e7e6      	b.n	8009394 <_printf_float+0x248>
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc39      	bgt.n	8009440 <_printf_float+0x2f4>
 80093cc:	4a1b      	ldr	r2, [pc, #108]	; (800943c <_printf_float+0x2f0>)
 80093ce:	2301      	movs	r3, #1
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f af19 	beq.w	800920e <_printf_float+0xc2>
 80093dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e0:	4313      	orrs	r3, r2
 80093e2:	d102      	bne.n	80093ea <_printf_float+0x29e>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	07d9      	lsls	r1, r3, #31
 80093e8:	d5d8      	bpl.n	800939c <_printf_float+0x250>
 80093ea:	ee18 3a10 	vmov	r3, s16
 80093ee:	4652      	mov	r2, sl
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f af09 	beq.w	800920e <_printf_float+0xc2>
 80093fc:	f04f 0900 	mov.w	r9, #0
 8009400:	f104 0a1a 	add.w	sl, r4, #26
 8009404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009406:	425b      	negs	r3, r3
 8009408:	454b      	cmp	r3, r9
 800940a:	dc01      	bgt.n	8009410 <_printf_float+0x2c4>
 800940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940e:	e792      	b.n	8009336 <_printf_float+0x1ea>
 8009410:	2301      	movs	r3, #1
 8009412:	4652      	mov	r2, sl
 8009414:	4631      	mov	r1, r6
 8009416:	4628      	mov	r0, r5
 8009418:	47b8      	blx	r7
 800941a:	3001      	adds	r0, #1
 800941c:	f43f aef7 	beq.w	800920e <_printf_float+0xc2>
 8009420:	f109 0901 	add.w	r9, r9, #1
 8009424:	e7ee      	b.n	8009404 <_printf_float+0x2b8>
 8009426:	bf00      	nop
 8009428:	7fefffff 	.word	0x7fefffff
 800942c:	0800ea48 	.word	0x0800ea48
 8009430:	0800ea4c 	.word	0x0800ea4c
 8009434:	0800ea54 	.word	0x0800ea54
 8009438:	0800ea50 	.word	0x0800ea50
 800943c:	0800ea58 	.word	0x0800ea58
 8009440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009442:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009444:	429a      	cmp	r2, r3
 8009446:	bfa8      	it	ge
 8009448:	461a      	movge	r2, r3
 800944a:	2a00      	cmp	r2, #0
 800944c:	4691      	mov	r9, r2
 800944e:	dc37      	bgt.n	80094c0 <_printf_float+0x374>
 8009450:	f04f 0b00 	mov.w	fp, #0
 8009454:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009458:	f104 021a 	add.w	r2, r4, #26
 800945c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800945e:	9305      	str	r3, [sp, #20]
 8009460:	eba3 0309 	sub.w	r3, r3, r9
 8009464:	455b      	cmp	r3, fp
 8009466:	dc33      	bgt.n	80094d0 <_printf_float+0x384>
 8009468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800946c:	429a      	cmp	r2, r3
 800946e:	db3b      	blt.n	80094e8 <_printf_float+0x39c>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	07da      	lsls	r2, r3, #31
 8009474:	d438      	bmi.n	80094e8 <_printf_float+0x39c>
 8009476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009478:	9b05      	ldr	r3, [sp, #20]
 800947a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	eba2 0901 	sub.w	r9, r2, r1
 8009482:	4599      	cmp	r9, r3
 8009484:	bfa8      	it	ge
 8009486:	4699      	movge	r9, r3
 8009488:	f1b9 0f00 	cmp.w	r9, #0
 800948c:	dc35      	bgt.n	80094fa <_printf_float+0x3ae>
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009496:	f104 0a1a 	add.w	sl, r4, #26
 800949a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	eba3 0309 	sub.w	r3, r3, r9
 80094a4:	4543      	cmp	r3, r8
 80094a6:	f77f af79 	ble.w	800939c <_printf_float+0x250>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f aeaa 	beq.w	800920e <_printf_float+0xc2>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	e7ec      	b.n	800949a <_printf_float+0x34e>
 80094c0:	4613      	mov	r3, r2
 80094c2:	4631      	mov	r1, r6
 80094c4:	4642      	mov	r2, r8
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b8      	blx	r7
 80094ca:	3001      	adds	r0, #1
 80094cc:	d1c0      	bne.n	8009450 <_printf_float+0x304>
 80094ce:	e69e      	b.n	800920e <_printf_float+0xc2>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4631      	mov	r1, r6
 80094d4:	4628      	mov	r0, r5
 80094d6:	9205      	str	r2, [sp, #20]
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f ae97 	beq.w	800920e <_printf_float+0xc2>
 80094e0:	9a05      	ldr	r2, [sp, #20]
 80094e2:	f10b 0b01 	add.w	fp, fp, #1
 80094e6:	e7b9      	b.n	800945c <_printf_float+0x310>
 80094e8:	ee18 3a10 	vmov	r3, s16
 80094ec:	4652      	mov	r2, sl
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	d1be      	bne.n	8009476 <_printf_float+0x32a>
 80094f8:	e689      	b.n	800920e <_printf_float+0xc2>
 80094fa:	9a05      	ldr	r2, [sp, #20]
 80094fc:	464b      	mov	r3, r9
 80094fe:	4442      	add	r2, r8
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	d1c1      	bne.n	800948e <_printf_float+0x342>
 800950a:	e680      	b.n	800920e <_printf_float+0xc2>
 800950c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800950e:	2a01      	cmp	r2, #1
 8009510:	dc01      	bgt.n	8009516 <_printf_float+0x3ca>
 8009512:	07db      	lsls	r3, r3, #31
 8009514:	d538      	bpl.n	8009588 <_printf_float+0x43c>
 8009516:	2301      	movs	r3, #1
 8009518:	4642      	mov	r2, r8
 800951a:	4631      	mov	r1, r6
 800951c:	4628      	mov	r0, r5
 800951e:	47b8      	blx	r7
 8009520:	3001      	adds	r0, #1
 8009522:	f43f ae74 	beq.w	800920e <_printf_float+0xc2>
 8009526:	ee18 3a10 	vmov	r3, s16
 800952a:	4652      	mov	r2, sl
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f ae6b 	beq.w	800920e <_printf_float+0xc2>
 8009538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	f7f7 faea 	bl	8000b18 <__aeabi_dcmpeq>
 8009544:	b9d8      	cbnz	r0, 800957e <_printf_float+0x432>
 8009546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009548:	f108 0201 	add.w	r2, r8, #1
 800954c:	3b01      	subs	r3, #1
 800954e:	4631      	mov	r1, r6
 8009550:	4628      	mov	r0, r5
 8009552:	47b8      	blx	r7
 8009554:	3001      	adds	r0, #1
 8009556:	d10e      	bne.n	8009576 <_printf_float+0x42a>
 8009558:	e659      	b.n	800920e <_printf_float+0xc2>
 800955a:	2301      	movs	r3, #1
 800955c:	4652      	mov	r2, sl
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	47b8      	blx	r7
 8009564:	3001      	adds	r0, #1
 8009566:	f43f ae52 	beq.w	800920e <_printf_float+0xc2>
 800956a:	f108 0801 	add.w	r8, r8, #1
 800956e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009570:	3b01      	subs	r3, #1
 8009572:	4543      	cmp	r3, r8
 8009574:	dcf1      	bgt.n	800955a <_printf_float+0x40e>
 8009576:	464b      	mov	r3, r9
 8009578:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800957c:	e6dc      	b.n	8009338 <_printf_float+0x1ec>
 800957e:	f04f 0800 	mov.w	r8, #0
 8009582:	f104 0a1a 	add.w	sl, r4, #26
 8009586:	e7f2      	b.n	800956e <_printf_float+0x422>
 8009588:	2301      	movs	r3, #1
 800958a:	4642      	mov	r2, r8
 800958c:	e7df      	b.n	800954e <_printf_float+0x402>
 800958e:	2301      	movs	r3, #1
 8009590:	464a      	mov	r2, r9
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	47b8      	blx	r7
 8009598:	3001      	adds	r0, #1
 800959a:	f43f ae38 	beq.w	800920e <_printf_float+0xc2>
 800959e:	f108 0801 	add.w	r8, r8, #1
 80095a2:	68e3      	ldr	r3, [r4, #12]
 80095a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095a6:	1a5b      	subs	r3, r3, r1
 80095a8:	4543      	cmp	r3, r8
 80095aa:	dcf0      	bgt.n	800958e <_printf_float+0x442>
 80095ac:	e6fa      	b.n	80093a4 <_printf_float+0x258>
 80095ae:	f04f 0800 	mov.w	r8, #0
 80095b2:	f104 0919 	add.w	r9, r4, #25
 80095b6:	e7f4      	b.n	80095a2 <_printf_float+0x456>

080095b8 <_printf_common>:
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	4616      	mov	r6, r2
 80095be:	4699      	mov	r9, r3
 80095c0:	688a      	ldr	r2, [r1, #8]
 80095c2:	690b      	ldr	r3, [r1, #16]
 80095c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	bfb8      	it	lt
 80095cc:	4613      	movlt	r3, r2
 80095ce:	6033      	str	r3, [r6, #0]
 80095d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095d4:	4607      	mov	r7, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	b10a      	cbz	r2, 80095de <_printf_common+0x26>
 80095da:	3301      	adds	r3, #1
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	0699      	lsls	r1, r3, #26
 80095e2:	bf42      	ittt	mi
 80095e4:	6833      	ldrmi	r3, [r6, #0]
 80095e6:	3302      	addmi	r3, #2
 80095e8:	6033      	strmi	r3, [r6, #0]
 80095ea:	6825      	ldr	r5, [r4, #0]
 80095ec:	f015 0506 	ands.w	r5, r5, #6
 80095f0:	d106      	bne.n	8009600 <_printf_common+0x48>
 80095f2:	f104 0a19 	add.w	sl, r4, #25
 80095f6:	68e3      	ldr	r3, [r4, #12]
 80095f8:	6832      	ldr	r2, [r6, #0]
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	42ab      	cmp	r3, r5
 80095fe:	dc26      	bgt.n	800964e <_printf_common+0x96>
 8009600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009604:	1e13      	subs	r3, r2, #0
 8009606:	6822      	ldr	r2, [r4, #0]
 8009608:	bf18      	it	ne
 800960a:	2301      	movne	r3, #1
 800960c:	0692      	lsls	r2, r2, #26
 800960e:	d42b      	bmi.n	8009668 <_printf_common+0xb0>
 8009610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009614:	4649      	mov	r1, r9
 8009616:	4638      	mov	r0, r7
 8009618:	47c0      	blx	r8
 800961a:	3001      	adds	r0, #1
 800961c:	d01e      	beq.n	800965c <_printf_common+0xa4>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	68e5      	ldr	r5, [r4, #12]
 8009622:	6832      	ldr	r2, [r6, #0]
 8009624:	f003 0306 	and.w	r3, r3, #6
 8009628:	2b04      	cmp	r3, #4
 800962a:	bf08      	it	eq
 800962c:	1aad      	subeq	r5, r5, r2
 800962e:	68a3      	ldr	r3, [r4, #8]
 8009630:	6922      	ldr	r2, [r4, #16]
 8009632:	bf0c      	ite	eq
 8009634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009638:	2500      	movne	r5, #0
 800963a:	4293      	cmp	r3, r2
 800963c:	bfc4      	itt	gt
 800963e:	1a9b      	subgt	r3, r3, r2
 8009640:	18ed      	addgt	r5, r5, r3
 8009642:	2600      	movs	r6, #0
 8009644:	341a      	adds	r4, #26
 8009646:	42b5      	cmp	r5, r6
 8009648:	d11a      	bne.n	8009680 <_printf_common+0xc8>
 800964a:	2000      	movs	r0, #0
 800964c:	e008      	b.n	8009660 <_printf_common+0xa8>
 800964e:	2301      	movs	r3, #1
 8009650:	4652      	mov	r2, sl
 8009652:	4649      	mov	r1, r9
 8009654:	4638      	mov	r0, r7
 8009656:	47c0      	blx	r8
 8009658:	3001      	adds	r0, #1
 800965a:	d103      	bne.n	8009664 <_printf_common+0xac>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295
 8009660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009664:	3501      	adds	r5, #1
 8009666:	e7c6      	b.n	80095f6 <_printf_common+0x3e>
 8009668:	18e1      	adds	r1, r4, r3
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	2030      	movs	r0, #48	; 0x30
 800966e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009672:	4422      	add	r2, r4
 8009674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800967c:	3302      	adds	r3, #2
 800967e:	e7c7      	b.n	8009610 <_printf_common+0x58>
 8009680:	2301      	movs	r3, #1
 8009682:	4622      	mov	r2, r4
 8009684:	4649      	mov	r1, r9
 8009686:	4638      	mov	r0, r7
 8009688:	47c0      	blx	r8
 800968a:	3001      	adds	r0, #1
 800968c:	d0e6      	beq.n	800965c <_printf_common+0xa4>
 800968e:	3601      	adds	r6, #1
 8009690:	e7d9      	b.n	8009646 <_printf_common+0x8e>
	...

08009694 <_printf_i>:
 8009694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	460c      	mov	r4, r1
 800969a:	4691      	mov	r9, r2
 800969c:	7e27      	ldrb	r7, [r4, #24]
 800969e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096a0:	2f78      	cmp	r7, #120	; 0x78
 80096a2:	4680      	mov	r8, r0
 80096a4:	469a      	mov	sl, r3
 80096a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096aa:	d807      	bhi.n	80096bc <_printf_i+0x28>
 80096ac:	2f62      	cmp	r7, #98	; 0x62
 80096ae:	d80a      	bhi.n	80096c6 <_printf_i+0x32>
 80096b0:	2f00      	cmp	r7, #0
 80096b2:	f000 80d8 	beq.w	8009866 <_printf_i+0x1d2>
 80096b6:	2f58      	cmp	r7, #88	; 0x58
 80096b8:	f000 80a3 	beq.w	8009802 <_printf_i+0x16e>
 80096bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096c4:	e03a      	b.n	800973c <_printf_i+0xa8>
 80096c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ca:	2b15      	cmp	r3, #21
 80096cc:	d8f6      	bhi.n	80096bc <_printf_i+0x28>
 80096ce:	a001      	add	r0, pc, #4	; (adr r0, 80096d4 <_printf_i+0x40>)
 80096d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096d4:	0800972d 	.word	0x0800972d
 80096d8:	08009741 	.word	0x08009741
 80096dc:	080096bd 	.word	0x080096bd
 80096e0:	080096bd 	.word	0x080096bd
 80096e4:	080096bd 	.word	0x080096bd
 80096e8:	080096bd 	.word	0x080096bd
 80096ec:	08009741 	.word	0x08009741
 80096f0:	080096bd 	.word	0x080096bd
 80096f4:	080096bd 	.word	0x080096bd
 80096f8:	080096bd 	.word	0x080096bd
 80096fc:	080096bd 	.word	0x080096bd
 8009700:	0800984d 	.word	0x0800984d
 8009704:	08009771 	.word	0x08009771
 8009708:	0800982f 	.word	0x0800982f
 800970c:	080096bd 	.word	0x080096bd
 8009710:	080096bd 	.word	0x080096bd
 8009714:	0800986f 	.word	0x0800986f
 8009718:	080096bd 	.word	0x080096bd
 800971c:	08009771 	.word	0x08009771
 8009720:	080096bd 	.word	0x080096bd
 8009724:	080096bd 	.word	0x080096bd
 8009728:	08009837 	.word	0x08009837
 800972c:	680b      	ldr	r3, [r1, #0]
 800972e:	1d1a      	adds	r2, r3, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	600a      	str	r2, [r1, #0]
 8009734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800973c:	2301      	movs	r3, #1
 800973e:	e0a3      	b.n	8009888 <_printf_i+0x1f4>
 8009740:	6825      	ldr	r5, [r4, #0]
 8009742:	6808      	ldr	r0, [r1, #0]
 8009744:	062e      	lsls	r6, r5, #24
 8009746:	f100 0304 	add.w	r3, r0, #4
 800974a:	d50a      	bpl.n	8009762 <_printf_i+0xce>
 800974c:	6805      	ldr	r5, [r0, #0]
 800974e:	600b      	str	r3, [r1, #0]
 8009750:	2d00      	cmp	r5, #0
 8009752:	da03      	bge.n	800975c <_printf_i+0xc8>
 8009754:	232d      	movs	r3, #45	; 0x2d
 8009756:	426d      	negs	r5, r5
 8009758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975c:	485e      	ldr	r0, [pc, #376]	; (80098d8 <_printf_i+0x244>)
 800975e:	230a      	movs	r3, #10
 8009760:	e019      	b.n	8009796 <_printf_i+0x102>
 8009762:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009766:	6805      	ldr	r5, [r0, #0]
 8009768:	600b      	str	r3, [r1, #0]
 800976a:	bf18      	it	ne
 800976c:	b22d      	sxthne	r5, r5
 800976e:	e7ef      	b.n	8009750 <_printf_i+0xbc>
 8009770:	680b      	ldr	r3, [r1, #0]
 8009772:	6825      	ldr	r5, [r4, #0]
 8009774:	1d18      	adds	r0, r3, #4
 8009776:	6008      	str	r0, [r1, #0]
 8009778:	0628      	lsls	r0, r5, #24
 800977a:	d501      	bpl.n	8009780 <_printf_i+0xec>
 800977c:	681d      	ldr	r5, [r3, #0]
 800977e:	e002      	b.n	8009786 <_printf_i+0xf2>
 8009780:	0669      	lsls	r1, r5, #25
 8009782:	d5fb      	bpl.n	800977c <_printf_i+0xe8>
 8009784:	881d      	ldrh	r5, [r3, #0]
 8009786:	4854      	ldr	r0, [pc, #336]	; (80098d8 <_printf_i+0x244>)
 8009788:	2f6f      	cmp	r7, #111	; 0x6f
 800978a:	bf0c      	ite	eq
 800978c:	2308      	moveq	r3, #8
 800978e:	230a      	movne	r3, #10
 8009790:	2100      	movs	r1, #0
 8009792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009796:	6866      	ldr	r6, [r4, #4]
 8009798:	60a6      	str	r6, [r4, #8]
 800979a:	2e00      	cmp	r6, #0
 800979c:	bfa2      	ittt	ge
 800979e:	6821      	ldrge	r1, [r4, #0]
 80097a0:	f021 0104 	bicge.w	r1, r1, #4
 80097a4:	6021      	strge	r1, [r4, #0]
 80097a6:	b90d      	cbnz	r5, 80097ac <_printf_i+0x118>
 80097a8:	2e00      	cmp	r6, #0
 80097aa:	d04d      	beq.n	8009848 <_printf_i+0x1b4>
 80097ac:	4616      	mov	r6, r2
 80097ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80097b2:	fb03 5711 	mls	r7, r3, r1, r5
 80097b6:	5dc7      	ldrb	r7, [r0, r7]
 80097b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097bc:	462f      	mov	r7, r5
 80097be:	42bb      	cmp	r3, r7
 80097c0:	460d      	mov	r5, r1
 80097c2:	d9f4      	bls.n	80097ae <_printf_i+0x11a>
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d10b      	bne.n	80097e0 <_printf_i+0x14c>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	07df      	lsls	r7, r3, #31
 80097cc:	d508      	bpl.n	80097e0 <_printf_i+0x14c>
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	6861      	ldr	r1, [r4, #4]
 80097d2:	4299      	cmp	r1, r3
 80097d4:	bfde      	ittt	le
 80097d6:	2330      	movle	r3, #48	; 0x30
 80097d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097e0:	1b92      	subs	r2, r2, r6
 80097e2:	6122      	str	r2, [r4, #16]
 80097e4:	f8cd a000 	str.w	sl, [sp]
 80097e8:	464b      	mov	r3, r9
 80097ea:	aa03      	add	r2, sp, #12
 80097ec:	4621      	mov	r1, r4
 80097ee:	4640      	mov	r0, r8
 80097f0:	f7ff fee2 	bl	80095b8 <_printf_common>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d14c      	bne.n	8009892 <_printf_i+0x1fe>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	b004      	add	sp, #16
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	4835      	ldr	r0, [pc, #212]	; (80098d8 <_printf_i+0x244>)
 8009804:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	680e      	ldr	r6, [r1, #0]
 800980c:	061f      	lsls	r7, r3, #24
 800980e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009812:	600e      	str	r6, [r1, #0]
 8009814:	d514      	bpl.n	8009840 <_printf_i+0x1ac>
 8009816:	07d9      	lsls	r1, r3, #31
 8009818:	bf44      	itt	mi
 800981a:	f043 0320 	orrmi.w	r3, r3, #32
 800981e:	6023      	strmi	r3, [r4, #0]
 8009820:	b91d      	cbnz	r5, 800982a <_printf_i+0x196>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	f023 0320 	bic.w	r3, r3, #32
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	2310      	movs	r3, #16
 800982c:	e7b0      	b.n	8009790 <_printf_i+0xfc>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	f043 0320 	orr.w	r3, r3, #32
 8009834:	6023      	str	r3, [r4, #0]
 8009836:	2378      	movs	r3, #120	; 0x78
 8009838:	4828      	ldr	r0, [pc, #160]	; (80098dc <_printf_i+0x248>)
 800983a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800983e:	e7e3      	b.n	8009808 <_printf_i+0x174>
 8009840:	065e      	lsls	r6, r3, #25
 8009842:	bf48      	it	mi
 8009844:	b2ad      	uxthmi	r5, r5
 8009846:	e7e6      	b.n	8009816 <_printf_i+0x182>
 8009848:	4616      	mov	r6, r2
 800984a:	e7bb      	b.n	80097c4 <_printf_i+0x130>
 800984c:	680b      	ldr	r3, [r1, #0]
 800984e:	6826      	ldr	r6, [r4, #0]
 8009850:	6960      	ldr	r0, [r4, #20]
 8009852:	1d1d      	adds	r5, r3, #4
 8009854:	600d      	str	r5, [r1, #0]
 8009856:	0635      	lsls	r5, r6, #24
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	d501      	bpl.n	8009860 <_printf_i+0x1cc>
 800985c:	6018      	str	r0, [r3, #0]
 800985e:	e002      	b.n	8009866 <_printf_i+0x1d2>
 8009860:	0671      	lsls	r1, r6, #25
 8009862:	d5fb      	bpl.n	800985c <_printf_i+0x1c8>
 8009864:	8018      	strh	r0, [r3, #0]
 8009866:	2300      	movs	r3, #0
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	4616      	mov	r6, r2
 800986c:	e7ba      	b.n	80097e4 <_printf_i+0x150>
 800986e:	680b      	ldr	r3, [r1, #0]
 8009870:	1d1a      	adds	r2, r3, #4
 8009872:	600a      	str	r2, [r1, #0]
 8009874:	681e      	ldr	r6, [r3, #0]
 8009876:	6862      	ldr	r2, [r4, #4]
 8009878:	2100      	movs	r1, #0
 800987a:	4630      	mov	r0, r6
 800987c:	f7f6 fcd8 	bl	8000230 <memchr>
 8009880:	b108      	cbz	r0, 8009886 <_printf_i+0x1f2>
 8009882:	1b80      	subs	r0, r0, r6
 8009884:	6060      	str	r0, [r4, #4]
 8009886:	6863      	ldr	r3, [r4, #4]
 8009888:	6123      	str	r3, [r4, #16]
 800988a:	2300      	movs	r3, #0
 800988c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009890:	e7a8      	b.n	80097e4 <_printf_i+0x150>
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	4632      	mov	r2, r6
 8009896:	4649      	mov	r1, r9
 8009898:	4640      	mov	r0, r8
 800989a:	47d0      	blx	sl
 800989c:	3001      	adds	r0, #1
 800989e:	d0ab      	beq.n	80097f8 <_printf_i+0x164>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	079b      	lsls	r3, r3, #30
 80098a4:	d413      	bmi.n	80098ce <_printf_i+0x23a>
 80098a6:	68e0      	ldr	r0, [r4, #12]
 80098a8:	9b03      	ldr	r3, [sp, #12]
 80098aa:	4298      	cmp	r0, r3
 80098ac:	bfb8      	it	lt
 80098ae:	4618      	movlt	r0, r3
 80098b0:	e7a4      	b.n	80097fc <_printf_i+0x168>
 80098b2:	2301      	movs	r3, #1
 80098b4:	4632      	mov	r2, r6
 80098b6:	4649      	mov	r1, r9
 80098b8:	4640      	mov	r0, r8
 80098ba:	47d0      	blx	sl
 80098bc:	3001      	adds	r0, #1
 80098be:	d09b      	beq.n	80097f8 <_printf_i+0x164>
 80098c0:	3501      	adds	r5, #1
 80098c2:	68e3      	ldr	r3, [r4, #12]
 80098c4:	9903      	ldr	r1, [sp, #12]
 80098c6:	1a5b      	subs	r3, r3, r1
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	dcf2      	bgt.n	80098b2 <_printf_i+0x21e>
 80098cc:	e7eb      	b.n	80098a6 <_printf_i+0x212>
 80098ce:	2500      	movs	r5, #0
 80098d0:	f104 0619 	add.w	r6, r4, #25
 80098d4:	e7f5      	b.n	80098c2 <_printf_i+0x22e>
 80098d6:	bf00      	nop
 80098d8:	0800ea5a 	.word	0x0800ea5a
 80098dc:	0800ea6b 	.word	0x0800ea6b

080098e0 <iprintf>:
 80098e0:	b40f      	push	{r0, r1, r2, r3}
 80098e2:	4b0a      	ldr	r3, [pc, #40]	; (800990c <iprintf+0x2c>)
 80098e4:	b513      	push	{r0, r1, r4, lr}
 80098e6:	681c      	ldr	r4, [r3, #0]
 80098e8:	b124      	cbz	r4, 80098f4 <iprintf+0x14>
 80098ea:	69a3      	ldr	r3, [r4, #24]
 80098ec:	b913      	cbnz	r3, 80098f4 <iprintf+0x14>
 80098ee:	4620      	mov	r0, r4
 80098f0:	f001 ff98 	bl	800b824 <__sinit>
 80098f4:	ab05      	add	r3, sp, #20
 80098f6:	9a04      	ldr	r2, [sp, #16]
 80098f8:	68a1      	ldr	r1, [r4, #8]
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	4620      	mov	r0, r4
 80098fe:	f003 f9c1 	bl	800cc84 <_vfiprintf_r>
 8009902:	b002      	add	sp, #8
 8009904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009908:	b004      	add	sp, #16
 800990a:	4770      	bx	lr
 800990c:	2000002c 	.word	0x2000002c

08009910 <_puts_r>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	460e      	mov	r6, r1
 8009914:	4605      	mov	r5, r0
 8009916:	b118      	cbz	r0, 8009920 <_puts_r+0x10>
 8009918:	6983      	ldr	r3, [r0, #24]
 800991a:	b90b      	cbnz	r3, 8009920 <_puts_r+0x10>
 800991c:	f001 ff82 	bl	800b824 <__sinit>
 8009920:	69ab      	ldr	r3, [r5, #24]
 8009922:	68ac      	ldr	r4, [r5, #8]
 8009924:	b913      	cbnz	r3, 800992c <_puts_r+0x1c>
 8009926:	4628      	mov	r0, r5
 8009928:	f001 ff7c 	bl	800b824 <__sinit>
 800992c:	4b2c      	ldr	r3, [pc, #176]	; (80099e0 <_puts_r+0xd0>)
 800992e:	429c      	cmp	r4, r3
 8009930:	d120      	bne.n	8009974 <_puts_r+0x64>
 8009932:	686c      	ldr	r4, [r5, #4]
 8009934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009936:	07db      	lsls	r3, r3, #31
 8009938:	d405      	bmi.n	8009946 <_puts_r+0x36>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	0598      	lsls	r0, r3, #22
 800993e:	d402      	bmi.n	8009946 <_puts_r+0x36>
 8009940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009942:	f002 fb80 	bl	800c046 <__retarget_lock_acquire_recursive>
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	0719      	lsls	r1, r3, #28
 800994a:	d51d      	bpl.n	8009988 <_puts_r+0x78>
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	b1db      	cbz	r3, 8009988 <_puts_r+0x78>
 8009950:	3e01      	subs	r6, #1
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009958:	3b01      	subs	r3, #1
 800995a:	60a3      	str	r3, [r4, #8]
 800995c:	bb39      	cbnz	r1, 80099ae <_puts_r+0x9e>
 800995e:	2b00      	cmp	r3, #0
 8009960:	da38      	bge.n	80099d4 <_puts_r+0xc4>
 8009962:	4622      	mov	r2, r4
 8009964:	210a      	movs	r1, #10
 8009966:	4628      	mov	r0, r5
 8009968:	f000 ff0a 	bl	800a780 <__swbuf_r>
 800996c:	3001      	adds	r0, #1
 800996e:	d011      	beq.n	8009994 <_puts_r+0x84>
 8009970:	250a      	movs	r5, #10
 8009972:	e011      	b.n	8009998 <_puts_r+0x88>
 8009974:	4b1b      	ldr	r3, [pc, #108]	; (80099e4 <_puts_r+0xd4>)
 8009976:	429c      	cmp	r4, r3
 8009978:	d101      	bne.n	800997e <_puts_r+0x6e>
 800997a:	68ac      	ldr	r4, [r5, #8]
 800997c:	e7da      	b.n	8009934 <_puts_r+0x24>
 800997e:	4b1a      	ldr	r3, [pc, #104]	; (80099e8 <_puts_r+0xd8>)
 8009980:	429c      	cmp	r4, r3
 8009982:	bf08      	it	eq
 8009984:	68ec      	ldreq	r4, [r5, #12]
 8009986:	e7d5      	b.n	8009934 <_puts_r+0x24>
 8009988:	4621      	mov	r1, r4
 800998a:	4628      	mov	r0, r5
 800998c:	f000 ff4a 	bl	800a824 <__swsetup_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	d0dd      	beq.n	8009950 <_puts_r+0x40>
 8009994:	f04f 35ff 	mov.w	r5, #4294967295
 8009998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800999a:	07da      	lsls	r2, r3, #31
 800999c:	d405      	bmi.n	80099aa <_puts_r+0x9a>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	059b      	lsls	r3, r3, #22
 80099a2:	d402      	bmi.n	80099aa <_puts_r+0x9a>
 80099a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099a6:	f002 fb4f 	bl	800c048 <__retarget_lock_release_recursive>
 80099aa:	4628      	mov	r0, r5
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	da04      	bge.n	80099bc <_puts_r+0xac>
 80099b2:	69a2      	ldr	r2, [r4, #24]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	dc06      	bgt.n	80099c6 <_puts_r+0xb6>
 80099b8:	290a      	cmp	r1, #10
 80099ba:	d004      	beq.n	80099c6 <_puts_r+0xb6>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	7019      	strb	r1, [r3, #0]
 80099c4:	e7c5      	b.n	8009952 <_puts_r+0x42>
 80099c6:	4622      	mov	r2, r4
 80099c8:	4628      	mov	r0, r5
 80099ca:	f000 fed9 	bl	800a780 <__swbuf_r>
 80099ce:	3001      	adds	r0, #1
 80099d0:	d1bf      	bne.n	8009952 <_puts_r+0x42>
 80099d2:	e7df      	b.n	8009994 <_puts_r+0x84>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	250a      	movs	r5, #10
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	6022      	str	r2, [r4, #0]
 80099dc:	701d      	strb	r5, [r3, #0]
 80099de:	e7db      	b.n	8009998 <_puts_r+0x88>
 80099e0:	0800ec88 	.word	0x0800ec88
 80099e4:	0800eca8 	.word	0x0800eca8
 80099e8:	0800ec68 	.word	0x0800ec68

080099ec <puts>:
 80099ec:	4b02      	ldr	r3, [pc, #8]	; (80099f8 <puts+0xc>)
 80099ee:	4601      	mov	r1, r0
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f7ff bf8d 	b.w	8009910 <_puts_r>
 80099f6:	bf00      	nop
 80099f8:	2000002c 	.word	0x2000002c

080099fc <sulp>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	4604      	mov	r4, r0
 8009a00:	460d      	mov	r5, r1
 8009a02:	ec45 4b10 	vmov	d0, r4, r5
 8009a06:	4616      	mov	r6, r2
 8009a08:	f002 ff0a 	bl	800c820 <__ulp>
 8009a0c:	ec51 0b10 	vmov	r0, r1, d0
 8009a10:	b17e      	cbz	r6, 8009a32 <sulp+0x36>
 8009a12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	dd09      	ble.n	8009a32 <sulp+0x36>
 8009a1e:	051b      	lsls	r3, r3, #20
 8009a20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a24:	2400      	movs	r4, #0
 8009a26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	f7f6 fe0b 	bl	8000648 <__aeabi_dmul>
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	0000      	movs	r0, r0
	...

08009a38 <_strtod_l>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	b0a3      	sub	sp, #140	; 0x8c
 8009a3e:	461f      	mov	r7, r3
 8009a40:	2300      	movs	r3, #0
 8009a42:	931e      	str	r3, [sp, #120]	; 0x78
 8009a44:	4ba4      	ldr	r3, [pc, #656]	; (8009cd8 <_strtod_l+0x2a0>)
 8009a46:	9219      	str	r2, [sp, #100]	; 0x64
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	9307      	str	r3, [sp, #28]
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	4688      	mov	r8, r1
 8009a52:	f7f6 fbe5 	bl	8000220 <strlen>
 8009a56:	f04f 0a00 	mov.w	sl, #0
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	f04f 0b00 	mov.w	fp, #0
 8009a60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009a64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	2a2b      	cmp	r2, #43	; 0x2b
 8009a6a:	d04c      	beq.n	8009b06 <_strtod_l+0xce>
 8009a6c:	d839      	bhi.n	8009ae2 <_strtod_l+0xaa>
 8009a6e:	2a0d      	cmp	r2, #13
 8009a70:	d832      	bhi.n	8009ad8 <_strtod_l+0xa0>
 8009a72:	2a08      	cmp	r2, #8
 8009a74:	d832      	bhi.n	8009adc <_strtod_l+0xa4>
 8009a76:	2a00      	cmp	r2, #0
 8009a78:	d03c      	beq.n	8009af4 <_strtod_l+0xbc>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009a80:	7833      	ldrb	r3, [r6, #0]
 8009a82:	2b30      	cmp	r3, #48	; 0x30
 8009a84:	f040 80b4 	bne.w	8009bf0 <_strtod_l+0x1b8>
 8009a88:	7873      	ldrb	r3, [r6, #1]
 8009a8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a8e:	2b58      	cmp	r3, #88	; 0x58
 8009a90:	d16c      	bne.n	8009b6c <_strtod_l+0x134>
 8009a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a94:	9301      	str	r3, [sp, #4]
 8009a96:	ab1e      	add	r3, sp, #120	; 0x78
 8009a98:	9702      	str	r7, [sp, #8]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4a8f      	ldr	r2, [pc, #572]	; (8009cdc <_strtod_l+0x2a4>)
 8009a9e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009aa0:	a91d      	add	r1, sp, #116	; 0x74
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f001 ffc2 	bl	800ba2c <__gethex>
 8009aa8:	f010 0707 	ands.w	r7, r0, #7
 8009aac:	4605      	mov	r5, r0
 8009aae:	d005      	beq.n	8009abc <_strtod_l+0x84>
 8009ab0:	2f06      	cmp	r7, #6
 8009ab2:	d12a      	bne.n	8009b0a <_strtod_l+0xd2>
 8009ab4:	3601      	adds	r6, #1
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	961d      	str	r6, [sp, #116]	; 0x74
 8009aba:	930e      	str	r3, [sp, #56]	; 0x38
 8009abc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f040 8596 	bne.w	800a5f0 <_strtod_l+0xbb8>
 8009ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac6:	b1db      	cbz	r3, 8009b00 <_strtod_l+0xc8>
 8009ac8:	4652      	mov	r2, sl
 8009aca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ace:	ec43 2b10 	vmov	d0, r2, r3
 8009ad2:	b023      	add	sp, #140	; 0x8c
 8009ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad8:	2a20      	cmp	r2, #32
 8009ada:	d1ce      	bne.n	8009a7a <_strtod_l+0x42>
 8009adc:	3301      	adds	r3, #1
 8009ade:	931d      	str	r3, [sp, #116]	; 0x74
 8009ae0:	e7c0      	b.n	8009a64 <_strtod_l+0x2c>
 8009ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8009ae4:	d1c9      	bne.n	8009a7a <_strtod_l+0x42>
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	920e      	str	r2, [sp, #56]	; 0x38
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	921d      	str	r2, [sp, #116]	; 0x74
 8009aee:	785b      	ldrb	r3, [r3, #1]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1c4      	bne.n	8009a7e <_strtod_l+0x46>
 8009af4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009af6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f040 8576 	bne.w	800a5ec <_strtod_l+0xbb4>
 8009b00:	4652      	mov	r2, sl
 8009b02:	465b      	mov	r3, fp
 8009b04:	e7e3      	b.n	8009ace <_strtod_l+0x96>
 8009b06:	2200      	movs	r2, #0
 8009b08:	e7ee      	b.n	8009ae8 <_strtod_l+0xb0>
 8009b0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009b0c:	b13a      	cbz	r2, 8009b1e <_strtod_l+0xe6>
 8009b0e:	2135      	movs	r1, #53	; 0x35
 8009b10:	a820      	add	r0, sp, #128	; 0x80
 8009b12:	f002 ff90 	bl	800ca36 <__copybits>
 8009b16:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f002 fb55 	bl	800c1c8 <_Bfree>
 8009b1e:	3f01      	subs	r7, #1
 8009b20:	2f05      	cmp	r7, #5
 8009b22:	d807      	bhi.n	8009b34 <_strtod_l+0xfc>
 8009b24:	e8df f007 	tbb	[pc, r7]
 8009b28:	1d180b0e 	.word	0x1d180b0e
 8009b2c:	030e      	.short	0x030e
 8009b2e:	f04f 0b00 	mov.w	fp, #0
 8009b32:	46da      	mov	sl, fp
 8009b34:	0728      	lsls	r0, r5, #28
 8009b36:	d5c1      	bpl.n	8009abc <_strtod_l+0x84>
 8009b38:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009b3c:	e7be      	b.n	8009abc <_strtod_l+0x84>
 8009b3e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009b42:	e7f7      	b.n	8009b34 <_strtod_l+0xfc>
 8009b44:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009b48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009b4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009b52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b56:	e7ed      	b.n	8009b34 <_strtod_l+0xfc>
 8009b58:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009ce0 <_strtod_l+0x2a8>
 8009b5c:	f04f 0a00 	mov.w	sl, #0
 8009b60:	e7e8      	b.n	8009b34 <_strtod_l+0xfc>
 8009b62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009b66:	f04f 3aff 	mov.w	sl, #4294967295
 8009b6a:	e7e3      	b.n	8009b34 <_strtod_l+0xfc>
 8009b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	921d      	str	r2, [sp, #116]	; 0x74
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b30      	cmp	r3, #48	; 0x30
 8009b76:	d0f9      	beq.n	8009b6c <_strtod_l+0x134>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d09f      	beq.n	8009abc <_strtod_l+0x84>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f04f 0900 	mov.w	r9, #0
 8009b82:	9304      	str	r3, [sp, #16]
 8009b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b86:	930a      	str	r3, [sp, #40]	; 0x28
 8009b88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b8c:	464f      	mov	r7, r9
 8009b8e:	220a      	movs	r2, #10
 8009b90:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009b92:	7806      	ldrb	r6, [r0, #0]
 8009b94:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009b98:	b2d9      	uxtb	r1, r3
 8009b9a:	2909      	cmp	r1, #9
 8009b9c:	d92a      	bls.n	8009bf4 <_strtod_l+0x1bc>
 8009b9e:	9907      	ldr	r1, [sp, #28]
 8009ba0:	462a      	mov	r2, r5
 8009ba2:	f003 f9fc 	bl	800cf9e <strncmp>
 8009ba6:	b398      	cbz	r0, 8009c10 <_strtod_l+0x1d8>
 8009ba8:	2000      	movs	r0, #0
 8009baa:	4633      	mov	r3, r6
 8009bac:	463d      	mov	r5, r7
 8009bae:	9007      	str	r0, [sp, #28]
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	2b65      	cmp	r3, #101	; 0x65
 8009bb4:	d001      	beq.n	8009bba <_strtod_l+0x182>
 8009bb6:	2b45      	cmp	r3, #69	; 0x45
 8009bb8:	d118      	bne.n	8009bec <_strtod_l+0x1b4>
 8009bba:	b91d      	cbnz	r5, 8009bc4 <_strtod_l+0x18c>
 8009bbc:	9b04      	ldr	r3, [sp, #16]
 8009bbe:	4303      	orrs	r3, r0
 8009bc0:	d098      	beq.n	8009af4 <_strtod_l+0xbc>
 8009bc2:	2500      	movs	r5, #0
 8009bc4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009bc8:	f108 0301 	add.w	r3, r8, #1
 8009bcc:	931d      	str	r3, [sp, #116]	; 0x74
 8009bce:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009bd2:	2b2b      	cmp	r3, #43	; 0x2b
 8009bd4:	d075      	beq.n	8009cc2 <_strtod_l+0x28a>
 8009bd6:	2b2d      	cmp	r3, #45	; 0x2d
 8009bd8:	d07b      	beq.n	8009cd2 <_strtod_l+0x29a>
 8009bda:	f04f 0c00 	mov.w	ip, #0
 8009bde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009be2:	2909      	cmp	r1, #9
 8009be4:	f240 8082 	bls.w	8009cec <_strtod_l+0x2b4>
 8009be8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009bec:	2600      	movs	r6, #0
 8009bee:	e09d      	b.n	8009d2c <_strtod_l+0x2f4>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	e7c4      	b.n	8009b7e <_strtod_l+0x146>
 8009bf4:	2f08      	cmp	r7, #8
 8009bf6:	bfd8      	it	le
 8009bf8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009bfa:	f100 0001 	add.w	r0, r0, #1
 8009bfe:	bfda      	itte	le
 8009c00:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c04:	9309      	strle	r3, [sp, #36]	; 0x24
 8009c06:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009c0a:	3701      	adds	r7, #1
 8009c0c:	901d      	str	r0, [sp, #116]	; 0x74
 8009c0e:	e7bf      	b.n	8009b90 <_strtod_l+0x158>
 8009c10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c12:	195a      	adds	r2, r3, r5
 8009c14:	921d      	str	r2, [sp, #116]	; 0x74
 8009c16:	5d5b      	ldrb	r3, [r3, r5]
 8009c18:	2f00      	cmp	r7, #0
 8009c1a:	d037      	beq.n	8009c8c <_strtod_l+0x254>
 8009c1c:	9007      	str	r0, [sp, #28]
 8009c1e:	463d      	mov	r5, r7
 8009c20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009c24:	2a09      	cmp	r2, #9
 8009c26:	d912      	bls.n	8009c4e <_strtod_l+0x216>
 8009c28:	2201      	movs	r2, #1
 8009c2a:	e7c2      	b.n	8009bb2 <_strtod_l+0x17a>
 8009c2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	921d      	str	r2, [sp, #116]	; 0x74
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	3001      	adds	r0, #1
 8009c36:	2b30      	cmp	r3, #48	; 0x30
 8009c38:	d0f8      	beq.n	8009c2c <_strtod_l+0x1f4>
 8009c3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009c3e:	2a08      	cmp	r2, #8
 8009c40:	f200 84db 	bhi.w	800a5fa <_strtod_l+0xbc2>
 8009c44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009c46:	9007      	str	r0, [sp, #28]
 8009c48:	2000      	movs	r0, #0
 8009c4a:	920a      	str	r2, [sp, #40]	; 0x28
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	3b30      	subs	r3, #48	; 0x30
 8009c50:	f100 0201 	add.w	r2, r0, #1
 8009c54:	d014      	beq.n	8009c80 <_strtod_l+0x248>
 8009c56:	9907      	ldr	r1, [sp, #28]
 8009c58:	4411      	add	r1, r2
 8009c5a:	9107      	str	r1, [sp, #28]
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	eb00 0e05 	add.w	lr, r0, r5
 8009c62:	210a      	movs	r1, #10
 8009c64:	4572      	cmp	r2, lr
 8009c66:	d113      	bne.n	8009c90 <_strtod_l+0x258>
 8009c68:	182a      	adds	r2, r5, r0
 8009c6a:	2a08      	cmp	r2, #8
 8009c6c:	f105 0501 	add.w	r5, r5, #1
 8009c70:	4405      	add	r5, r0
 8009c72:	dc1c      	bgt.n	8009cae <_strtod_l+0x276>
 8009c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c76:	220a      	movs	r2, #10
 8009c78:	fb02 3301 	mla	r3, r2, r1, r3
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	2200      	movs	r2, #0
 8009c80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c82:	1c59      	adds	r1, r3, #1
 8009c84:	911d      	str	r1, [sp, #116]	; 0x74
 8009c86:	785b      	ldrb	r3, [r3, #1]
 8009c88:	4610      	mov	r0, r2
 8009c8a:	e7c9      	b.n	8009c20 <_strtod_l+0x1e8>
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	e7d2      	b.n	8009c36 <_strtod_l+0x1fe>
 8009c90:	2a08      	cmp	r2, #8
 8009c92:	dc04      	bgt.n	8009c9e <_strtod_l+0x266>
 8009c94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c96:	434e      	muls	r6, r1
 8009c98:	9609      	str	r6, [sp, #36]	; 0x24
 8009c9a:	3201      	adds	r2, #1
 8009c9c:	e7e2      	b.n	8009c64 <_strtod_l+0x22c>
 8009c9e:	f102 0c01 	add.w	ip, r2, #1
 8009ca2:	f1bc 0f10 	cmp.w	ip, #16
 8009ca6:	bfd8      	it	le
 8009ca8:	fb01 f909 	mulle.w	r9, r1, r9
 8009cac:	e7f5      	b.n	8009c9a <_strtod_l+0x262>
 8009cae:	2d10      	cmp	r5, #16
 8009cb0:	bfdc      	itt	le
 8009cb2:	220a      	movle	r2, #10
 8009cb4:	fb02 3909 	mlale	r9, r2, r9, r3
 8009cb8:	e7e1      	b.n	8009c7e <_strtod_l+0x246>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9307      	str	r3, [sp, #28]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	e77c      	b.n	8009bbc <_strtod_l+0x184>
 8009cc2:	f04f 0c00 	mov.w	ip, #0
 8009cc6:	f108 0302 	add.w	r3, r8, #2
 8009cca:	931d      	str	r3, [sp, #116]	; 0x74
 8009ccc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009cd0:	e785      	b.n	8009bde <_strtod_l+0x1a6>
 8009cd2:	f04f 0c01 	mov.w	ip, #1
 8009cd6:	e7f6      	b.n	8009cc6 <_strtod_l+0x28e>
 8009cd8:	0800ed34 	.word	0x0800ed34
 8009cdc:	0800ea7c 	.word	0x0800ea7c
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ce6:	1c59      	adds	r1, r3, #1
 8009ce8:	911d      	str	r1, [sp, #116]	; 0x74
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	2b30      	cmp	r3, #48	; 0x30
 8009cee:	d0f9      	beq.n	8009ce4 <_strtod_l+0x2ac>
 8009cf0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009cf4:	2908      	cmp	r1, #8
 8009cf6:	f63f af79 	bhi.w	8009bec <_strtod_l+0x1b4>
 8009cfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009cfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d00:	9308      	str	r3, [sp, #32]
 8009d02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d04:	1c59      	adds	r1, r3, #1
 8009d06:	911d      	str	r1, [sp, #116]	; 0x74
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009d0e:	2e09      	cmp	r6, #9
 8009d10:	d937      	bls.n	8009d82 <_strtod_l+0x34a>
 8009d12:	9e08      	ldr	r6, [sp, #32]
 8009d14:	1b89      	subs	r1, r1, r6
 8009d16:	2908      	cmp	r1, #8
 8009d18:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009d1c:	dc02      	bgt.n	8009d24 <_strtod_l+0x2ec>
 8009d1e:	4576      	cmp	r6, lr
 8009d20:	bfa8      	it	ge
 8009d22:	4676      	movge	r6, lr
 8009d24:	f1bc 0f00 	cmp.w	ip, #0
 8009d28:	d000      	beq.n	8009d2c <_strtod_l+0x2f4>
 8009d2a:	4276      	negs	r6, r6
 8009d2c:	2d00      	cmp	r5, #0
 8009d2e:	d14f      	bne.n	8009dd0 <_strtod_l+0x398>
 8009d30:	9904      	ldr	r1, [sp, #16]
 8009d32:	4301      	orrs	r1, r0
 8009d34:	f47f aec2 	bne.w	8009abc <_strtod_l+0x84>
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	f47f aedb 	bne.w	8009af4 <_strtod_l+0xbc>
 8009d3e:	2b69      	cmp	r3, #105	; 0x69
 8009d40:	d027      	beq.n	8009d92 <_strtod_l+0x35a>
 8009d42:	dc24      	bgt.n	8009d8e <_strtod_l+0x356>
 8009d44:	2b49      	cmp	r3, #73	; 0x49
 8009d46:	d024      	beq.n	8009d92 <_strtod_l+0x35a>
 8009d48:	2b4e      	cmp	r3, #78	; 0x4e
 8009d4a:	f47f aed3 	bne.w	8009af4 <_strtod_l+0xbc>
 8009d4e:	499e      	ldr	r1, [pc, #632]	; (8009fc8 <_strtod_l+0x590>)
 8009d50:	a81d      	add	r0, sp, #116	; 0x74
 8009d52:	f002 f8c3 	bl	800bedc <__match>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f43f aecc 	beq.w	8009af4 <_strtod_l+0xbc>
 8009d5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b28      	cmp	r3, #40	; 0x28
 8009d62:	d12d      	bne.n	8009dc0 <_strtod_l+0x388>
 8009d64:	4999      	ldr	r1, [pc, #612]	; (8009fcc <_strtod_l+0x594>)
 8009d66:	aa20      	add	r2, sp, #128	; 0x80
 8009d68:	a81d      	add	r0, sp, #116	; 0x74
 8009d6a:	f002 f8cb 	bl	800bf04 <__hexnan>
 8009d6e:	2805      	cmp	r0, #5
 8009d70:	d126      	bne.n	8009dc0 <_strtod_l+0x388>
 8009d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d74:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009d78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009d7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009d80:	e69c      	b.n	8009abc <_strtod_l+0x84>
 8009d82:	210a      	movs	r1, #10
 8009d84:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009d88:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009d8c:	e7b9      	b.n	8009d02 <_strtod_l+0x2ca>
 8009d8e:	2b6e      	cmp	r3, #110	; 0x6e
 8009d90:	e7db      	b.n	8009d4a <_strtod_l+0x312>
 8009d92:	498f      	ldr	r1, [pc, #572]	; (8009fd0 <_strtod_l+0x598>)
 8009d94:	a81d      	add	r0, sp, #116	; 0x74
 8009d96:	f002 f8a1 	bl	800bedc <__match>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f43f aeaa 	beq.w	8009af4 <_strtod_l+0xbc>
 8009da0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009da2:	498c      	ldr	r1, [pc, #560]	; (8009fd4 <_strtod_l+0x59c>)
 8009da4:	3b01      	subs	r3, #1
 8009da6:	a81d      	add	r0, sp, #116	; 0x74
 8009da8:	931d      	str	r3, [sp, #116]	; 0x74
 8009daa:	f002 f897 	bl	800bedc <__match>
 8009dae:	b910      	cbnz	r0, 8009db6 <_strtod_l+0x37e>
 8009db0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009db2:	3301      	adds	r3, #1
 8009db4:	931d      	str	r3, [sp, #116]	; 0x74
 8009db6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009fe4 <_strtod_l+0x5ac>
 8009dba:	f04f 0a00 	mov.w	sl, #0
 8009dbe:	e67d      	b.n	8009abc <_strtod_l+0x84>
 8009dc0:	4885      	ldr	r0, [pc, #532]	; (8009fd8 <_strtod_l+0x5a0>)
 8009dc2:	f003 f891 	bl	800cee8 <nan>
 8009dc6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009dca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009dce:	e675      	b.n	8009abc <_strtod_l+0x84>
 8009dd0:	9b07      	ldr	r3, [sp, #28]
 8009dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd4:	1af3      	subs	r3, r6, r3
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	bf08      	it	eq
 8009dda:	462f      	moveq	r7, r5
 8009ddc:	2d10      	cmp	r5, #16
 8009dde:	9308      	str	r3, [sp, #32]
 8009de0:	46a8      	mov	r8, r5
 8009de2:	bfa8      	it	ge
 8009de4:	f04f 0810 	movge.w	r8, #16
 8009de8:	f7f6 fbb4 	bl	8000554 <__aeabi_ui2d>
 8009dec:	2d09      	cmp	r5, #9
 8009dee:	4682      	mov	sl, r0
 8009df0:	468b      	mov	fp, r1
 8009df2:	dd13      	ble.n	8009e1c <_strtod_l+0x3e4>
 8009df4:	4b79      	ldr	r3, [pc, #484]	; (8009fdc <_strtod_l+0x5a4>)
 8009df6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009dfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009dfe:	f7f6 fc23 	bl	8000648 <__aeabi_dmul>
 8009e02:	4682      	mov	sl, r0
 8009e04:	4648      	mov	r0, r9
 8009e06:	468b      	mov	fp, r1
 8009e08:	f7f6 fba4 	bl	8000554 <__aeabi_ui2d>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	f7f6 fa62 	bl	80002dc <__adddf3>
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	2d0f      	cmp	r5, #15
 8009e1e:	dc38      	bgt.n	8009e92 <_strtod_l+0x45a>
 8009e20:	9b08      	ldr	r3, [sp, #32]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f43f ae4a 	beq.w	8009abc <_strtod_l+0x84>
 8009e28:	dd24      	ble.n	8009e74 <_strtod_l+0x43c>
 8009e2a:	2b16      	cmp	r3, #22
 8009e2c:	dc0b      	bgt.n	8009e46 <_strtod_l+0x40e>
 8009e2e:	4d6b      	ldr	r5, [pc, #428]	; (8009fdc <_strtod_l+0x5a4>)
 8009e30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009e34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009e38:	4652      	mov	r2, sl
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	f7f6 fc04 	bl	8000648 <__aeabi_dmul>
 8009e40:	4682      	mov	sl, r0
 8009e42:	468b      	mov	fp, r1
 8009e44:	e63a      	b.n	8009abc <_strtod_l+0x84>
 8009e46:	9a08      	ldr	r2, [sp, #32]
 8009e48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	db20      	blt.n	8009e92 <_strtod_l+0x45a>
 8009e50:	4c62      	ldr	r4, [pc, #392]	; (8009fdc <_strtod_l+0x5a4>)
 8009e52:	f1c5 050f 	rsb	r5, r5, #15
 8009e56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e62:	f7f6 fbf1 	bl	8000648 <__aeabi_dmul>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	1b5d      	subs	r5, r3, r5
 8009e6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e72:	e7e3      	b.n	8009e3c <_strtod_l+0x404>
 8009e74:	9b08      	ldr	r3, [sp, #32]
 8009e76:	3316      	adds	r3, #22
 8009e78:	db0b      	blt.n	8009e92 <_strtod_l+0x45a>
 8009e7a:	9b07      	ldr	r3, [sp, #28]
 8009e7c:	4a57      	ldr	r2, [pc, #348]	; (8009fdc <_strtod_l+0x5a4>)
 8009e7e:	1b9e      	subs	r6, r3, r6
 8009e80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009e84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e88:	4650      	mov	r0, sl
 8009e8a:	4659      	mov	r1, fp
 8009e8c:	f7f6 fd06 	bl	800089c <__aeabi_ddiv>
 8009e90:	e7d6      	b.n	8009e40 <_strtod_l+0x408>
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	eba5 0808 	sub.w	r8, r5, r8
 8009e98:	4498      	add	r8, r3
 8009e9a:	f1b8 0f00 	cmp.w	r8, #0
 8009e9e:	dd71      	ble.n	8009f84 <_strtod_l+0x54c>
 8009ea0:	f018 030f 	ands.w	r3, r8, #15
 8009ea4:	d00a      	beq.n	8009ebc <_strtod_l+0x484>
 8009ea6:	494d      	ldr	r1, [pc, #308]	; (8009fdc <_strtod_l+0x5a4>)
 8009ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eac:	4652      	mov	r2, sl
 8009eae:	465b      	mov	r3, fp
 8009eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb4:	f7f6 fbc8 	bl	8000648 <__aeabi_dmul>
 8009eb8:	4682      	mov	sl, r0
 8009eba:	468b      	mov	fp, r1
 8009ebc:	f038 080f 	bics.w	r8, r8, #15
 8009ec0:	d04d      	beq.n	8009f5e <_strtod_l+0x526>
 8009ec2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009ec6:	dd22      	ble.n	8009f0e <_strtod_l+0x4d6>
 8009ec8:	2500      	movs	r5, #0
 8009eca:	462e      	mov	r6, r5
 8009ecc:	9509      	str	r5, [sp, #36]	; 0x24
 8009ece:	9507      	str	r5, [sp, #28]
 8009ed0:	2322      	movs	r3, #34	; 0x22
 8009ed2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009fe4 <_strtod_l+0x5ac>
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	f04f 0a00 	mov.w	sl, #0
 8009edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f43f adec 	beq.w	8009abc <_strtod_l+0x84>
 8009ee4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f002 f96e 	bl	800c1c8 <_Bfree>
 8009eec:	9907      	ldr	r1, [sp, #28]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f002 f96a 	bl	800c1c8 <_Bfree>
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f002 f966 	bl	800c1c8 <_Bfree>
 8009efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009efe:	4620      	mov	r0, r4
 8009f00:	f002 f962 	bl	800c1c8 <_Bfree>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4620      	mov	r0, r4
 8009f08:	f002 f95e 	bl	800c1c8 <_Bfree>
 8009f0c:	e5d6      	b.n	8009abc <_strtod_l+0x84>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009f14:	4650      	mov	r0, sl
 8009f16:	4659      	mov	r1, fp
 8009f18:	4699      	mov	r9, r3
 8009f1a:	f1b8 0f01 	cmp.w	r8, #1
 8009f1e:	dc21      	bgt.n	8009f64 <_strtod_l+0x52c>
 8009f20:	b10b      	cbz	r3, 8009f26 <_strtod_l+0x4ee>
 8009f22:	4682      	mov	sl, r0
 8009f24:	468b      	mov	fp, r1
 8009f26:	4b2e      	ldr	r3, [pc, #184]	; (8009fe0 <_strtod_l+0x5a8>)
 8009f28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009f2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009f30:	4652      	mov	r2, sl
 8009f32:	465b      	mov	r3, fp
 8009f34:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009f38:	f7f6 fb86 	bl	8000648 <__aeabi_dmul>
 8009f3c:	4b29      	ldr	r3, [pc, #164]	; (8009fe4 <_strtod_l+0x5ac>)
 8009f3e:	460a      	mov	r2, r1
 8009f40:	400b      	ands	r3, r1
 8009f42:	4929      	ldr	r1, [pc, #164]	; (8009fe8 <_strtod_l+0x5b0>)
 8009f44:	428b      	cmp	r3, r1
 8009f46:	4682      	mov	sl, r0
 8009f48:	d8be      	bhi.n	8009ec8 <_strtod_l+0x490>
 8009f4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009f4e:	428b      	cmp	r3, r1
 8009f50:	bf86      	itte	hi
 8009f52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009fec <_strtod_l+0x5b4>
 8009f56:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	e081      	b.n	800a068 <_strtod_l+0x630>
 8009f64:	f018 0f01 	tst.w	r8, #1
 8009f68:	d007      	beq.n	8009f7a <_strtod_l+0x542>
 8009f6a:	4b1d      	ldr	r3, [pc, #116]	; (8009fe0 <_strtod_l+0x5a8>)
 8009f6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f7f6 fb68 	bl	8000648 <__aeabi_dmul>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f109 0901 	add.w	r9, r9, #1
 8009f7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f82:	e7ca      	b.n	8009f1a <_strtod_l+0x4e2>
 8009f84:	d0eb      	beq.n	8009f5e <_strtod_l+0x526>
 8009f86:	f1c8 0800 	rsb	r8, r8, #0
 8009f8a:	f018 020f 	ands.w	r2, r8, #15
 8009f8e:	d00a      	beq.n	8009fa6 <_strtod_l+0x56e>
 8009f90:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <_strtod_l+0x5a4>)
 8009f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f96:	4650      	mov	r0, sl
 8009f98:	4659      	mov	r1, fp
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 fc7d 	bl	800089c <__aeabi_ddiv>
 8009fa2:	4682      	mov	sl, r0
 8009fa4:	468b      	mov	fp, r1
 8009fa6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009faa:	d0d8      	beq.n	8009f5e <_strtod_l+0x526>
 8009fac:	f1b8 0f1f 	cmp.w	r8, #31
 8009fb0:	dd1e      	ble.n	8009ff0 <_strtod_l+0x5b8>
 8009fb2:	2500      	movs	r5, #0
 8009fb4:	462e      	mov	r6, r5
 8009fb6:	9509      	str	r5, [sp, #36]	; 0x24
 8009fb8:	9507      	str	r5, [sp, #28]
 8009fba:	2322      	movs	r3, #34	; 0x22
 8009fbc:	f04f 0a00 	mov.w	sl, #0
 8009fc0:	f04f 0b00 	mov.w	fp, #0
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	e789      	b.n	8009edc <_strtod_l+0x4a4>
 8009fc8:	0800ea55 	.word	0x0800ea55
 8009fcc:	0800ea90 	.word	0x0800ea90
 8009fd0:	0800ea4d 	.word	0x0800ea4d
 8009fd4:	0800ebd4 	.word	0x0800ebd4
 8009fd8:	0800eef0 	.word	0x0800eef0
 8009fdc:	0800edd0 	.word	0x0800edd0
 8009fe0:	0800eda8 	.word	0x0800eda8
 8009fe4:	7ff00000 	.word	0x7ff00000
 8009fe8:	7ca00000 	.word	0x7ca00000
 8009fec:	7fefffff 	.word	0x7fefffff
 8009ff0:	f018 0310 	ands.w	r3, r8, #16
 8009ff4:	bf18      	it	ne
 8009ff6:	236a      	movne	r3, #106	; 0x6a
 8009ff8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a3b0 <_strtod_l+0x978>
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	4650      	mov	r0, sl
 800a000:	4659      	mov	r1, fp
 800a002:	2300      	movs	r3, #0
 800a004:	f018 0f01 	tst.w	r8, #1
 800a008:	d004      	beq.n	800a014 <_strtod_l+0x5dc>
 800a00a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a00e:	f7f6 fb1b 	bl	8000648 <__aeabi_dmul>
 800a012:	2301      	movs	r3, #1
 800a014:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a018:	f109 0908 	add.w	r9, r9, #8
 800a01c:	d1f2      	bne.n	800a004 <_strtod_l+0x5cc>
 800a01e:	b10b      	cbz	r3, 800a024 <_strtod_l+0x5ec>
 800a020:	4682      	mov	sl, r0
 800a022:	468b      	mov	fp, r1
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	b1bb      	cbz	r3, 800a058 <_strtod_l+0x620>
 800a028:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a02c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a030:	2b00      	cmp	r3, #0
 800a032:	4659      	mov	r1, fp
 800a034:	dd10      	ble.n	800a058 <_strtod_l+0x620>
 800a036:	2b1f      	cmp	r3, #31
 800a038:	f340 8128 	ble.w	800a28c <_strtod_l+0x854>
 800a03c:	2b34      	cmp	r3, #52	; 0x34
 800a03e:	bfde      	ittt	le
 800a040:	3b20      	suble	r3, #32
 800a042:	f04f 32ff 	movle.w	r2, #4294967295
 800a046:	fa02 f303 	lslle.w	r3, r2, r3
 800a04a:	f04f 0a00 	mov.w	sl, #0
 800a04e:	bfcc      	ite	gt
 800a050:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a054:	ea03 0b01 	andle.w	fp, r3, r1
 800a058:	2200      	movs	r2, #0
 800a05a:	2300      	movs	r3, #0
 800a05c:	4650      	mov	r0, sl
 800a05e:	4659      	mov	r1, fp
 800a060:	f7f6 fd5a 	bl	8000b18 <__aeabi_dcmpeq>
 800a064:	2800      	cmp	r0, #0
 800a066:	d1a4      	bne.n	8009fb2 <_strtod_l+0x57a>
 800a068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a06e:	462b      	mov	r3, r5
 800a070:	463a      	mov	r2, r7
 800a072:	4620      	mov	r0, r4
 800a074:	f002 f914 	bl	800c2a0 <__s2b>
 800a078:	9009      	str	r0, [sp, #36]	; 0x24
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f43f af24 	beq.w	8009ec8 <_strtod_l+0x490>
 800a080:	9b07      	ldr	r3, [sp, #28]
 800a082:	1b9e      	subs	r6, r3, r6
 800a084:	9b08      	ldr	r3, [sp, #32]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfb4      	ite	lt
 800a08a:	4633      	movlt	r3, r6
 800a08c:	2300      	movge	r3, #0
 800a08e:	9310      	str	r3, [sp, #64]	; 0x40
 800a090:	9b08      	ldr	r3, [sp, #32]
 800a092:	2500      	movs	r5, #0
 800a094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a098:	9318      	str	r3, [sp, #96]	; 0x60
 800a09a:	462e      	mov	r6, r5
 800a09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09e:	4620      	mov	r0, r4
 800a0a0:	6859      	ldr	r1, [r3, #4]
 800a0a2:	f002 f851 	bl	800c148 <_Balloc>
 800a0a6:	9007      	str	r0, [sp, #28]
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f43f af11 	beq.w	8009ed0 <_strtod_l+0x498>
 800a0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b0:	691a      	ldr	r2, [r3, #16]
 800a0b2:	3202      	adds	r2, #2
 800a0b4:	f103 010c 	add.w	r1, r3, #12
 800a0b8:	0092      	lsls	r2, r2, #2
 800a0ba:	300c      	adds	r0, #12
 800a0bc:	f7fe ff76 	bl	8008fac <memcpy>
 800a0c0:	ec4b ab10 	vmov	d0, sl, fp
 800a0c4:	aa20      	add	r2, sp, #128	; 0x80
 800a0c6:	a91f      	add	r1, sp, #124	; 0x7c
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a0ce:	f002 fc23 	bl	800c918 <__d2b>
 800a0d2:	901e      	str	r0, [sp, #120]	; 0x78
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	f43f aefb 	beq.w	8009ed0 <_strtod_l+0x498>
 800a0da:	2101      	movs	r1, #1
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f002 f979 	bl	800c3d4 <__i2b>
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f43f aef3 	beq.w	8009ed0 <_strtod_l+0x498>
 800a0ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a0ec:	9904      	ldr	r1, [sp, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bfab      	itete	ge
 800a0f2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a0f4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a0f6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a0f8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a0fc:	bfac      	ite	ge
 800a0fe:	eb03 0902 	addge.w	r9, r3, r2
 800a102:	1ad7      	sublt	r7, r2, r3
 800a104:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a106:	eba3 0801 	sub.w	r8, r3, r1
 800a10a:	4490      	add	r8, r2
 800a10c:	4ba3      	ldr	r3, [pc, #652]	; (800a39c <_strtod_l+0x964>)
 800a10e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a112:	4598      	cmp	r8, r3
 800a114:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a118:	f280 80cc 	bge.w	800a2b4 <_strtod_l+0x87c>
 800a11c:	eba3 0308 	sub.w	r3, r3, r8
 800a120:	2b1f      	cmp	r3, #31
 800a122:	eba2 0203 	sub.w	r2, r2, r3
 800a126:	f04f 0101 	mov.w	r1, #1
 800a12a:	f300 80b6 	bgt.w	800a29a <_strtod_l+0x862>
 800a12e:	fa01 f303 	lsl.w	r3, r1, r3
 800a132:	9311      	str	r3, [sp, #68]	; 0x44
 800a134:	2300      	movs	r3, #0
 800a136:	930c      	str	r3, [sp, #48]	; 0x30
 800a138:	eb09 0802 	add.w	r8, r9, r2
 800a13c:	9b04      	ldr	r3, [sp, #16]
 800a13e:	45c1      	cmp	r9, r8
 800a140:	4417      	add	r7, r2
 800a142:	441f      	add	r7, r3
 800a144:	464b      	mov	r3, r9
 800a146:	bfa8      	it	ge
 800a148:	4643      	movge	r3, r8
 800a14a:	42bb      	cmp	r3, r7
 800a14c:	bfa8      	it	ge
 800a14e:	463b      	movge	r3, r7
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfc2      	ittt	gt
 800a154:	eba8 0803 	subgt.w	r8, r8, r3
 800a158:	1aff      	subgt	r7, r7, r3
 800a15a:	eba9 0903 	subgt.w	r9, r9, r3
 800a15e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	dd17      	ble.n	800a194 <_strtod_l+0x75c>
 800a164:	4631      	mov	r1, r6
 800a166:	461a      	mov	r2, r3
 800a168:	4620      	mov	r0, r4
 800a16a:	f002 f9ef 	bl	800c54c <__pow5mult>
 800a16e:	4606      	mov	r6, r0
 800a170:	2800      	cmp	r0, #0
 800a172:	f43f aead 	beq.w	8009ed0 <_strtod_l+0x498>
 800a176:	4601      	mov	r1, r0
 800a178:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a17a:	4620      	mov	r0, r4
 800a17c:	f002 f940 	bl	800c400 <__multiply>
 800a180:	900f      	str	r0, [sp, #60]	; 0x3c
 800a182:	2800      	cmp	r0, #0
 800a184:	f43f aea4 	beq.w	8009ed0 <_strtod_l+0x498>
 800a188:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a18a:	4620      	mov	r0, r4
 800a18c:	f002 f81c 	bl	800c1c8 <_Bfree>
 800a190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a192:	931e      	str	r3, [sp, #120]	; 0x78
 800a194:	f1b8 0f00 	cmp.w	r8, #0
 800a198:	f300 8091 	bgt.w	800a2be <_strtod_l+0x886>
 800a19c:	9b08      	ldr	r3, [sp, #32]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	dd08      	ble.n	800a1b4 <_strtod_l+0x77c>
 800a1a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1a4:	9907      	ldr	r1, [sp, #28]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f002 f9d0 	bl	800c54c <__pow5mult>
 800a1ac:	9007      	str	r0, [sp, #28]
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f43f ae8e 	beq.w	8009ed0 <_strtod_l+0x498>
 800a1b4:	2f00      	cmp	r7, #0
 800a1b6:	dd08      	ble.n	800a1ca <_strtod_l+0x792>
 800a1b8:	9907      	ldr	r1, [sp, #28]
 800a1ba:	463a      	mov	r2, r7
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f002 fa1f 	bl	800c600 <__lshift>
 800a1c2:	9007      	str	r0, [sp, #28]
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f43f ae83 	beq.w	8009ed0 <_strtod_l+0x498>
 800a1ca:	f1b9 0f00 	cmp.w	r9, #0
 800a1ce:	dd08      	ble.n	800a1e2 <_strtod_l+0x7aa>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	464a      	mov	r2, r9
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f002 fa13 	bl	800c600 <__lshift>
 800a1da:	4606      	mov	r6, r0
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	f43f ae77 	beq.w	8009ed0 <_strtod_l+0x498>
 800a1e2:	9a07      	ldr	r2, [sp, #28]
 800a1e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f002 fa92 	bl	800c710 <__mdiff>
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f43f ae6e 	beq.w	8009ed0 <_strtod_l+0x498>
 800a1f4:	68c3      	ldr	r3, [r0, #12]
 800a1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60c3      	str	r3, [r0, #12]
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	f002 fa6b 	bl	800c6d8 <__mcmp>
 800a202:	2800      	cmp	r0, #0
 800a204:	da65      	bge.n	800a2d2 <_strtod_l+0x89a>
 800a206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a208:	ea53 030a 	orrs.w	r3, r3, sl
 800a20c:	f040 8087 	bne.w	800a31e <_strtod_l+0x8e6>
 800a210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 8082 	bne.w	800a31e <_strtod_l+0x8e6>
 800a21a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a21e:	0d1b      	lsrs	r3, r3, #20
 800a220:	051b      	lsls	r3, r3, #20
 800a222:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a226:	d97a      	bls.n	800a31e <_strtod_l+0x8e6>
 800a228:	696b      	ldr	r3, [r5, #20]
 800a22a:	b913      	cbnz	r3, 800a232 <_strtod_l+0x7fa>
 800a22c:	692b      	ldr	r3, [r5, #16]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	dd75      	ble.n	800a31e <_strtod_l+0x8e6>
 800a232:	4629      	mov	r1, r5
 800a234:	2201      	movs	r2, #1
 800a236:	4620      	mov	r0, r4
 800a238:	f002 f9e2 	bl	800c600 <__lshift>
 800a23c:	4631      	mov	r1, r6
 800a23e:	4605      	mov	r5, r0
 800a240:	f002 fa4a 	bl	800c6d8 <__mcmp>
 800a244:	2800      	cmp	r0, #0
 800a246:	dd6a      	ble.n	800a31e <_strtod_l+0x8e6>
 800a248:	9904      	ldr	r1, [sp, #16]
 800a24a:	4a55      	ldr	r2, [pc, #340]	; (800a3a0 <_strtod_l+0x968>)
 800a24c:	465b      	mov	r3, fp
 800a24e:	2900      	cmp	r1, #0
 800a250:	f000 8085 	beq.w	800a35e <_strtod_l+0x926>
 800a254:	ea02 010b 	and.w	r1, r2, fp
 800a258:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a25c:	dc7f      	bgt.n	800a35e <_strtod_l+0x926>
 800a25e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a262:	f77f aeaa 	ble.w	8009fba <_strtod_l+0x582>
 800a266:	4a4f      	ldr	r2, [pc, #316]	; (800a3a4 <_strtod_l+0x96c>)
 800a268:	2300      	movs	r3, #0
 800a26a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a26e:	4650      	mov	r0, sl
 800a270:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a274:	4659      	mov	r1, fp
 800a276:	f7f6 f9e7 	bl	8000648 <__aeabi_dmul>
 800a27a:	460b      	mov	r3, r1
 800a27c:	4303      	orrs	r3, r0
 800a27e:	bf08      	it	eq
 800a280:	2322      	moveq	r3, #34	; 0x22
 800a282:	4682      	mov	sl, r0
 800a284:	468b      	mov	fp, r1
 800a286:	bf08      	it	eq
 800a288:	6023      	streq	r3, [r4, #0]
 800a28a:	e62b      	b.n	8009ee4 <_strtod_l+0x4ac>
 800a28c:	f04f 32ff 	mov.w	r2, #4294967295
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	ea03 0a0a 	and.w	sl, r3, sl
 800a298:	e6de      	b.n	800a058 <_strtod_l+0x620>
 800a29a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a29e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a2a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a2a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a2aa:	fa01 f308 	lsl.w	r3, r1, r8
 800a2ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a2b0:	9111      	str	r1, [sp, #68]	; 0x44
 800a2b2:	e741      	b.n	800a138 <_strtod_l+0x700>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	9311      	str	r3, [sp, #68]	; 0x44
 800a2bc:	e73c      	b.n	800a138 <_strtod_l+0x700>
 800a2be:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f002 f99c 	bl	800c600 <__lshift>
 800a2c8:	901e      	str	r0, [sp, #120]	; 0x78
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f47f af66 	bne.w	800a19c <_strtod_l+0x764>
 800a2d0:	e5fe      	b.n	8009ed0 <_strtod_l+0x498>
 800a2d2:	465f      	mov	r7, fp
 800a2d4:	d16e      	bne.n	800a3b4 <_strtod_l+0x97c>
 800a2d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2dc:	b342      	cbz	r2, 800a330 <_strtod_l+0x8f8>
 800a2de:	4a32      	ldr	r2, [pc, #200]	; (800a3a8 <_strtod_l+0x970>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d128      	bne.n	800a336 <_strtod_l+0x8fe>
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	b1eb      	cbz	r3, 800a326 <_strtod_l+0x8ee>
 800a2ea:	4a2d      	ldr	r2, [pc, #180]	; (800a3a0 <_strtod_l+0x968>)
 800a2ec:	403a      	ands	r2, r7
 800a2ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a2f2:	f04f 31ff 	mov.w	r1, #4294967295
 800a2f6:	d819      	bhi.n	800a32c <_strtod_l+0x8f4>
 800a2f8:	0d12      	lsrs	r2, r2, #20
 800a2fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a302:	4298      	cmp	r0, r3
 800a304:	d117      	bne.n	800a336 <_strtod_l+0x8fe>
 800a306:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <_strtod_l+0x974>)
 800a308:	429f      	cmp	r7, r3
 800a30a:	d102      	bne.n	800a312 <_strtod_l+0x8da>
 800a30c:	3001      	adds	r0, #1
 800a30e:	f43f addf 	beq.w	8009ed0 <_strtod_l+0x498>
 800a312:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <_strtod_l+0x968>)
 800a314:	403b      	ands	r3, r7
 800a316:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a31a:	f04f 0a00 	mov.w	sl, #0
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1a0      	bne.n	800a266 <_strtod_l+0x82e>
 800a324:	e5de      	b.n	8009ee4 <_strtod_l+0x4ac>
 800a326:	f04f 33ff 	mov.w	r3, #4294967295
 800a32a:	e7ea      	b.n	800a302 <_strtod_l+0x8ca>
 800a32c:	460b      	mov	r3, r1
 800a32e:	e7e8      	b.n	800a302 <_strtod_l+0x8ca>
 800a330:	ea53 030a 	orrs.w	r3, r3, sl
 800a334:	d088      	beq.n	800a248 <_strtod_l+0x810>
 800a336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a338:	b1db      	cbz	r3, 800a372 <_strtod_l+0x93a>
 800a33a:	423b      	tst	r3, r7
 800a33c:	d0ef      	beq.n	800a31e <_strtod_l+0x8e6>
 800a33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a340:	9a04      	ldr	r2, [sp, #16]
 800a342:	4650      	mov	r0, sl
 800a344:	4659      	mov	r1, fp
 800a346:	b1c3      	cbz	r3, 800a37a <_strtod_l+0x942>
 800a348:	f7ff fb58 	bl	80099fc <sulp>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a354:	f7f5 ffc2 	bl	80002dc <__adddf3>
 800a358:	4682      	mov	sl, r0
 800a35a:	468b      	mov	fp, r1
 800a35c:	e7df      	b.n	800a31e <_strtod_l+0x8e6>
 800a35e:	4013      	ands	r3, r2
 800a360:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a364:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a368:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a36c:	f04f 3aff 	mov.w	sl, #4294967295
 800a370:	e7d5      	b.n	800a31e <_strtod_l+0x8e6>
 800a372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a374:	ea13 0f0a 	tst.w	r3, sl
 800a378:	e7e0      	b.n	800a33c <_strtod_l+0x904>
 800a37a:	f7ff fb3f 	bl	80099fc <sulp>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a386:	f7f5 ffa7 	bl	80002d8 <__aeabi_dsub>
 800a38a:	2200      	movs	r2, #0
 800a38c:	2300      	movs	r3, #0
 800a38e:	4682      	mov	sl, r0
 800a390:	468b      	mov	fp, r1
 800a392:	f7f6 fbc1 	bl	8000b18 <__aeabi_dcmpeq>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0c1      	beq.n	800a31e <_strtod_l+0x8e6>
 800a39a:	e60e      	b.n	8009fba <_strtod_l+0x582>
 800a39c:	fffffc02 	.word	0xfffffc02
 800a3a0:	7ff00000 	.word	0x7ff00000
 800a3a4:	39500000 	.word	0x39500000
 800a3a8:	000fffff 	.word	0x000fffff
 800a3ac:	7fefffff 	.word	0x7fefffff
 800a3b0:	0800eaa8 	.word	0x0800eaa8
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f002 fb0a 	bl	800c9d0 <__ratio>
 800a3bc:	ec59 8b10 	vmov	r8, r9, d0
 800a3c0:	ee10 0a10 	vmov	r0, s0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f6 fbb8 	bl	8000b40 <__aeabi_dcmple>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d07c      	beq.n	800a4ce <_strtod_l+0xa96>
 800a3d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d04c      	beq.n	800a474 <_strtod_l+0xa3c>
 800a3da:	4b95      	ldr	r3, [pc, #596]	; (800a630 <_strtod_l+0xbf8>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a3e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a630 <_strtod_l+0xbf8>
 800a3e6:	f04f 0800 	mov.w	r8, #0
 800a3ea:	4b92      	ldr	r3, [pc, #584]	; (800a634 <_strtod_l+0xbfc>)
 800a3ec:	403b      	ands	r3, r7
 800a3ee:	9311      	str	r3, [sp, #68]	; 0x44
 800a3f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3f2:	4b91      	ldr	r3, [pc, #580]	; (800a638 <_strtod_l+0xc00>)
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	f040 80b2 	bne.w	800a55e <_strtod_l+0xb26>
 800a3fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a402:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a406:	ec4b ab10 	vmov	d0, sl, fp
 800a40a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a40e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a412:	f002 fa05 	bl	800c820 <__ulp>
 800a416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a41a:	ec53 2b10 	vmov	r2, r3, d0
 800a41e:	f7f6 f913 	bl	8000648 <__aeabi_dmul>
 800a422:	4652      	mov	r2, sl
 800a424:	465b      	mov	r3, fp
 800a426:	f7f5 ff59 	bl	80002dc <__adddf3>
 800a42a:	460b      	mov	r3, r1
 800a42c:	4981      	ldr	r1, [pc, #516]	; (800a634 <_strtod_l+0xbfc>)
 800a42e:	4a83      	ldr	r2, [pc, #524]	; (800a63c <_strtod_l+0xc04>)
 800a430:	4019      	ands	r1, r3
 800a432:	4291      	cmp	r1, r2
 800a434:	4682      	mov	sl, r0
 800a436:	d95e      	bls.n	800a4f6 <_strtod_l+0xabe>
 800a438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a43a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a43e:	4293      	cmp	r3, r2
 800a440:	d103      	bne.n	800a44a <_strtod_l+0xa12>
 800a442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a444:	3301      	adds	r3, #1
 800a446:	f43f ad43 	beq.w	8009ed0 <_strtod_l+0x498>
 800a44a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a648 <_strtod_l+0xc10>
 800a44e:	f04f 3aff 	mov.w	sl, #4294967295
 800a452:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a454:	4620      	mov	r0, r4
 800a456:	f001 feb7 	bl	800c1c8 <_Bfree>
 800a45a:	9907      	ldr	r1, [sp, #28]
 800a45c:	4620      	mov	r0, r4
 800a45e:	f001 feb3 	bl	800c1c8 <_Bfree>
 800a462:	4631      	mov	r1, r6
 800a464:	4620      	mov	r0, r4
 800a466:	f001 feaf 	bl	800c1c8 <_Bfree>
 800a46a:	4629      	mov	r1, r5
 800a46c:	4620      	mov	r0, r4
 800a46e:	f001 feab 	bl	800c1c8 <_Bfree>
 800a472:	e613      	b.n	800a09c <_strtod_l+0x664>
 800a474:	f1ba 0f00 	cmp.w	sl, #0
 800a478:	d11b      	bne.n	800a4b2 <_strtod_l+0xa7a>
 800a47a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a47e:	b9f3      	cbnz	r3, 800a4be <_strtod_l+0xa86>
 800a480:	4b6b      	ldr	r3, [pc, #428]	; (800a630 <_strtod_l+0xbf8>)
 800a482:	2200      	movs	r2, #0
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f6 fb50 	bl	8000b2c <__aeabi_dcmplt>
 800a48c:	b9d0      	cbnz	r0, 800a4c4 <_strtod_l+0xa8c>
 800a48e:	4640      	mov	r0, r8
 800a490:	4649      	mov	r1, r9
 800a492:	4b6b      	ldr	r3, [pc, #428]	; (800a640 <_strtod_l+0xc08>)
 800a494:	2200      	movs	r2, #0
 800a496:	f7f6 f8d7 	bl	8000648 <__aeabi_dmul>
 800a49a:	4680      	mov	r8, r0
 800a49c:	4689      	mov	r9, r1
 800a49e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a4a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a4a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a4ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a4b0:	e79b      	b.n	800a3ea <_strtod_l+0x9b2>
 800a4b2:	f1ba 0f01 	cmp.w	sl, #1
 800a4b6:	d102      	bne.n	800a4be <_strtod_l+0xa86>
 800a4b8:	2f00      	cmp	r7, #0
 800a4ba:	f43f ad7e 	beq.w	8009fba <_strtod_l+0x582>
 800a4be:	4b61      	ldr	r3, [pc, #388]	; (800a644 <_strtod_l+0xc0c>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	e78c      	b.n	800a3de <_strtod_l+0x9a6>
 800a4c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a640 <_strtod_l+0xc08>
 800a4c8:	f04f 0800 	mov.w	r8, #0
 800a4cc:	e7e7      	b.n	800a49e <_strtod_l+0xa66>
 800a4ce:	4b5c      	ldr	r3, [pc, #368]	; (800a640 <_strtod_l+0xc08>)
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f7f6 f8b7 	bl	8000648 <__aeabi_dmul>
 800a4da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4dc:	4680      	mov	r8, r0
 800a4de:	4689      	mov	r9, r1
 800a4e0:	b933      	cbnz	r3, 800a4f0 <_strtod_l+0xab8>
 800a4e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4e6:	9012      	str	r0, [sp, #72]	; 0x48
 800a4e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a4ee:	e7dd      	b.n	800a4ac <_strtod_l+0xa74>
 800a4f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a4f4:	e7f9      	b.n	800a4ea <_strtod_l+0xab2>
 800a4f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a4fa:	9b04      	ldr	r3, [sp, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1a8      	bne.n	800a452 <_strtod_l+0xa1a>
 800a500:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a504:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a506:	0d1b      	lsrs	r3, r3, #20
 800a508:	051b      	lsls	r3, r3, #20
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d1a1      	bne.n	800a452 <_strtod_l+0xa1a>
 800a50e:	4640      	mov	r0, r8
 800a510:	4649      	mov	r1, r9
 800a512:	f7f6 fbf9 	bl	8000d08 <__aeabi_d2lz>
 800a516:	f7f6 f869 	bl	80005ec <__aeabi_l2d>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	4640      	mov	r0, r8
 800a520:	4649      	mov	r1, r9
 800a522:	f7f5 fed9 	bl	80002d8 <__aeabi_dsub>
 800a526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a52c:	ea43 030a 	orr.w	r3, r3, sl
 800a530:	4313      	orrs	r3, r2
 800a532:	4680      	mov	r8, r0
 800a534:	4689      	mov	r9, r1
 800a536:	d053      	beq.n	800a5e0 <_strtod_l+0xba8>
 800a538:	a335      	add	r3, pc, #212	; (adr r3, 800a610 <_strtod_l+0xbd8>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f6 faf5 	bl	8000b2c <__aeabi_dcmplt>
 800a542:	2800      	cmp	r0, #0
 800a544:	f47f acce 	bne.w	8009ee4 <_strtod_l+0x4ac>
 800a548:	a333      	add	r3, pc, #204	; (adr r3, 800a618 <_strtod_l+0xbe0>)
 800a54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	f7f6 fb09 	bl	8000b68 <__aeabi_dcmpgt>
 800a556:	2800      	cmp	r0, #0
 800a558:	f43f af7b 	beq.w	800a452 <_strtod_l+0xa1a>
 800a55c:	e4c2      	b.n	8009ee4 <_strtod_l+0x4ac>
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	b333      	cbz	r3, 800a5b0 <_strtod_l+0xb78>
 800a562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a564:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a568:	d822      	bhi.n	800a5b0 <_strtod_l+0xb78>
 800a56a:	a32d      	add	r3, pc, #180	; (adr r3, 800a620 <_strtod_l+0xbe8>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f6 fae4 	bl	8000b40 <__aeabi_dcmple>
 800a578:	b1a0      	cbz	r0, 800a5a4 <_strtod_l+0xb6c>
 800a57a:	4649      	mov	r1, r9
 800a57c:	4640      	mov	r0, r8
 800a57e:	f7f6 fb3b 	bl	8000bf8 <__aeabi_d2uiz>
 800a582:	2801      	cmp	r0, #1
 800a584:	bf38      	it	cc
 800a586:	2001      	movcc	r0, #1
 800a588:	f7f5 ffe4 	bl	8000554 <__aeabi_ui2d>
 800a58c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a58e:	4680      	mov	r8, r0
 800a590:	4689      	mov	r9, r1
 800a592:	bb13      	cbnz	r3, 800a5da <_strtod_l+0xba2>
 800a594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a598:	9014      	str	r0, [sp, #80]	; 0x50
 800a59a:	9315      	str	r3, [sp, #84]	; 0x54
 800a59c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a5a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a5ac:	1a9b      	subs	r3, r3, r2
 800a5ae:	930d      	str	r3, [sp, #52]	; 0x34
 800a5b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a5b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5bc:	f002 f930 	bl	800c820 <__ulp>
 800a5c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5c4:	ec53 2b10 	vmov	r2, r3, d0
 800a5c8:	f7f6 f83e 	bl	8000648 <__aeabi_dmul>
 800a5cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a5d0:	f7f5 fe84 	bl	80002dc <__adddf3>
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	468b      	mov	fp, r1
 800a5d8:	e78f      	b.n	800a4fa <_strtod_l+0xac2>
 800a5da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a5de:	e7dd      	b.n	800a59c <_strtod_l+0xb64>
 800a5e0:	a311      	add	r3, pc, #68	; (adr r3, 800a628 <_strtod_l+0xbf0>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f6 faa1 	bl	8000b2c <__aeabi_dcmplt>
 800a5ea:	e7b4      	b.n	800a556 <_strtod_l+0xb1e>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	930e      	str	r3, [sp, #56]	; 0x38
 800a5f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	f7ff ba65 	b.w	8009ac4 <_strtod_l+0x8c>
 800a5fa:	2b65      	cmp	r3, #101	; 0x65
 800a5fc:	f43f ab5d 	beq.w	8009cba <_strtod_l+0x282>
 800a600:	2b45      	cmp	r3, #69	; 0x45
 800a602:	f43f ab5a 	beq.w	8009cba <_strtod_l+0x282>
 800a606:	2201      	movs	r2, #1
 800a608:	f7ff bb92 	b.w	8009d30 <_strtod_l+0x2f8>
 800a60c:	f3af 8000 	nop.w
 800a610:	94a03595 	.word	0x94a03595
 800a614:	3fdfffff 	.word	0x3fdfffff
 800a618:	35afe535 	.word	0x35afe535
 800a61c:	3fe00000 	.word	0x3fe00000
 800a620:	ffc00000 	.word	0xffc00000
 800a624:	41dfffff 	.word	0x41dfffff
 800a628:	94a03595 	.word	0x94a03595
 800a62c:	3fcfffff 	.word	0x3fcfffff
 800a630:	3ff00000 	.word	0x3ff00000
 800a634:	7ff00000 	.word	0x7ff00000
 800a638:	7fe00000 	.word	0x7fe00000
 800a63c:	7c9fffff 	.word	0x7c9fffff
 800a640:	3fe00000 	.word	0x3fe00000
 800a644:	bff00000 	.word	0xbff00000
 800a648:	7fefffff 	.word	0x7fefffff

0800a64c <strtod>:
 800a64c:	460a      	mov	r2, r1
 800a64e:	4601      	mov	r1, r0
 800a650:	4802      	ldr	r0, [pc, #8]	; (800a65c <strtod+0x10>)
 800a652:	4b03      	ldr	r3, [pc, #12]	; (800a660 <strtod+0x14>)
 800a654:	6800      	ldr	r0, [r0, #0]
 800a656:	f7ff b9ef 	b.w	8009a38 <_strtod_l>
 800a65a:	bf00      	nop
 800a65c:	2000002c 	.word	0x2000002c
 800a660:	20000094 	.word	0x20000094

0800a664 <_strtol_l.isra.0>:
 800a664:	2b01      	cmp	r3, #1
 800a666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66a:	d001      	beq.n	800a670 <_strtol_l.isra.0+0xc>
 800a66c:	2b24      	cmp	r3, #36	; 0x24
 800a66e:	d906      	bls.n	800a67e <_strtol_l.isra.0+0x1a>
 800a670:	f7fe fc72 	bl	8008f58 <__errno>
 800a674:	2316      	movs	r3, #22
 800a676:	6003      	str	r3, [r0, #0]
 800a678:	2000      	movs	r0, #0
 800a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67e:	4f3a      	ldr	r7, [pc, #232]	; (800a768 <_strtol_l.isra.0+0x104>)
 800a680:	468e      	mov	lr, r1
 800a682:	4676      	mov	r6, lr
 800a684:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a688:	5de5      	ldrb	r5, [r4, r7]
 800a68a:	f015 0508 	ands.w	r5, r5, #8
 800a68e:	d1f8      	bne.n	800a682 <_strtol_l.isra.0+0x1e>
 800a690:	2c2d      	cmp	r4, #45	; 0x2d
 800a692:	d134      	bne.n	800a6fe <_strtol_l.isra.0+0x9a>
 800a694:	f89e 4000 	ldrb.w	r4, [lr]
 800a698:	f04f 0801 	mov.w	r8, #1
 800a69c:	f106 0e02 	add.w	lr, r6, #2
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d05c      	beq.n	800a75e <_strtol_l.isra.0+0xfa>
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d10c      	bne.n	800a6c2 <_strtol_l.isra.0+0x5e>
 800a6a8:	2c30      	cmp	r4, #48	; 0x30
 800a6aa:	d10a      	bne.n	800a6c2 <_strtol_l.isra.0+0x5e>
 800a6ac:	f89e 4000 	ldrb.w	r4, [lr]
 800a6b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6b4:	2c58      	cmp	r4, #88	; 0x58
 800a6b6:	d14d      	bne.n	800a754 <_strtol_l.isra.0+0xf0>
 800a6b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a6bc:	2310      	movs	r3, #16
 800a6be:	f10e 0e02 	add.w	lr, lr, #2
 800a6c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a6c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	fbbc f9f3 	udiv	r9, ip, r3
 800a6d0:	4635      	mov	r5, r6
 800a6d2:	fb03 ca19 	mls	sl, r3, r9, ip
 800a6d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a6da:	2f09      	cmp	r7, #9
 800a6dc:	d818      	bhi.n	800a710 <_strtol_l.isra.0+0xac>
 800a6de:	463c      	mov	r4, r7
 800a6e0:	42a3      	cmp	r3, r4
 800a6e2:	dd24      	ble.n	800a72e <_strtol_l.isra.0+0xca>
 800a6e4:	2e00      	cmp	r6, #0
 800a6e6:	db1f      	blt.n	800a728 <_strtol_l.isra.0+0xc4>
 800a6e8:	45a9      	cmp	r9, r5
 800a6ea:	d31d      	bcc.n	800a728 <_strtol_l.isra.0+0xc4>
 800a6ec:	d101      	bne.n	800a6f2 <_strtol_l.isra.0+0x8e>
 800a6ee:	45a2      	cmp	sl, r4
 800a6f0:	db1a      	blt.n	800a728 <_strtol_l.isra.0+0xc4>
 800a6f2:	fb05 4503 	mla	r5, r5, r3, r4
 800a6f6:	2601      	movs	r6, #1
 800a6f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a6fc:	e7eb      	b.n	800a6d6 <_strtol_l.isra.0+0x72>
 800a6fe:	2c2b      	cmp	r4, #43	; 0x2b
 800a700:	bf08      	it	eq
 800a702:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a706:	46a8      	mov	r8, r5
 800a708:	bf08      	it	eq
 800a70a:	f106 0e02 	addeq.w	lr, r6, #2
 800a70e:	e7c7      	b.n	800a6a0 <_strtol_l.isra.0+0x3c>
 800a710:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a714:	2f19      	cmp	r7, #25
 800a716:	d801      	bhi.n	800a71c <_strtol_l.isra.0+0xb8>
 800a718:	3c37      	subs	r4, #55	; 0x37
 800a71a:	e7e1      	b.n	800a6e0 <_strtol_l.isra.0+0x7c>
 800a71c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a720:	2f19      	cmp	r7, #25
 800a722:	d804      	bhi.n	800a72e <_strtol_l.isra.0+0xca>
 800a724:	3c57      	subs	r4, #87	; 0x57
 800a726:	e7db      	b.n	800a6e0 <_strtol_l.isra.0+0x7c>
 800a728:	f04f 36ff 	mov.w	r6, #4294967295
 800a72c:	e7e4      	b.n	800a6f8 <_strtol_l.isra.0+0x94>
 800a72e:	2e00      	cmp	r6, #0
 800a730:	da05      	bge.n	800a73e <_strtol_l.isra.0+0xda>
 800a732:	2322      	movs	r3, #34	; 0x22
 800a734:	6003      	str	r3, [r0, #0]
 800a736:	4665      	mov	r5, ip
 800a738:	b942      	cbnz	r2, 800a74c <_strtol_l.isra.0+0xe8>
 800a73a:	4628      	mov	r0, r5
 800a73c:	e79d      	b.n	800a67a <_strtol_l.isra.0+0x16>
 800a73e:	f1b8 0f00 	cmp.w	r8, #0
 800a742:	d000      	beq.n	800a746 <_strtol_l.isra.0+0xe2>
 800a744:	426d      	negs	r5, r5
 800a746:	2a00      	cmp	r2, #0
 800a748:	d0f7      	beq.n	800a73a <_strtol_l.isra.0+0xd6>
 800a74a:	b10e      	cbz	r6, 800a750 <_strtol_l.isra.0+0xec>
 800a74c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a750:	6011      	str	r1, [r2, #0]
 800a752:	e7f2      	b.n	800a73a <_strtol_l.isra.0+0xd6>
 800a754:	2430      	movs	r4, #48	; 0x30
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1b3      	bne.n	800a6c2 <_strtol_l.isra.0+0x5e>
 800a75a:	2308      	movs	r3, #8
 800a75c:	e7b1      	b.n	800a6c2 <_strtol_l.isra.0+0x5e>
 800a75e:	2c30      	cmp	r4, #48	; 0x30
 800a760:	d0a4      	beq.n	800a6ac <_strtol_l.isra.0+0x48>
 800a762:	230a      	movs	r3, #10
 800a764:	e7ad      	b.n	800a6c2 <_strtol_l.isra.0+0x5e>
 800a766:	bf00      	nop
 800a768:	0800ead1 	.word	0x0800ead1

0800a76c <strtol>:
 800a76c:	4613      	mov	r3, r2
 800a76e:	460a      	mov	r2, r1
 800a770:	4601      	mov	r1, r0
 800a772:	4802      	ldr	r0, [pc, #8]	; (800a77c <strtol+0x10>)
 800a774:	6800      	ldr	r0, [r0, #0]
 800a776:	f7ff bf75 	b.w	800a664 <_strtol_l.isra.0>
 800a77a:	bf00      	nop
 800a77c:	2000002c 	.word	0x2000002c

0800a780 <__swbuf_r>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	460e      	mov	r6, r1
 800a784:	4614      	mov	r4, r2
 800a786:	4605      	mov	r5, r0
 800a788:	b118      	cbz	r0, 800a792 <__swbuf_r+0x12>
 800a78a:	6983      	ldr	r3, [r0, #24]
 800a78c:	b90b      	cbnz	r3, 800a792 <__swbuf_r+0x12>
 800a78e:	f001 f849 	bl	800b824 <__sinit>
 800a792:	4b21      	ldr	r3, [pc, #132]	; (800a818 <__swbuf_r+0x98>)
 800a794:	429c      	cmp	r4, r3
 800a796:	d12b      	bne.n	800a7f0 <__swbuf_r+0x70>
 800a798:	686c      	ldr	r4, [r5, #4]
 800a79a:	69a3      	ldr	r3, [r4, #24]
 800a79c:	60a3      	str	r3, [r4, #8]
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	071a      	lsls	r2, r3, #28
 800a7a2:	d52f      	bpl.n	800a804 <__swbuf_r+0x84>
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	b36b      	cbz	r3, 800a804 <__swbuf_r+0x84>
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	6820      	ldr	r0, [r4, #0]
 800a7ac:	1ac0      	subs	r0, r0, r3
 800a7ae:	6963      	ldr	r3, [r4, #20]
 800a7b0:	b2f6      	uxtb	r6, r6
 800a7b2:	4283      	cmp	r3, r0
 800a7b4:	4637      	mov	r7, r6
 800a7b6:	dc04      	bgt.n	800a7c2 <__swbuf_r+0x42>
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 ff9e 	bl	800b6fc <_fflush_r>
 800a7c0:	bb30      	cbnz	r0, 800a810 <__swbuf_r+0x90>
 800a7c2:	68a3      	ldr	r3, [r4, #8]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	6022      	str	r2, [r4, #0]
 800a7ce:	701e      	strb	r6, [r3, #0]
 800a7d0:	6963      	ldr	r3, [r4, #20]
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	4283      	cmp	r3, r0
 800a7d6:	d004      	beq.n	800a7e2 <__swbuf_r+0x62>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	07db      	lsls	r3, r3, #31
 800a7dc:	d506      	bpl.n	800a7ec <__swbuf_r+0x6c>
 800a7de:	2e0a      	cmp	r6, #10
 800a7e0:	d104      	bne.n	800a7ec <__swbuf_r+0x6c>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f000 ff89 	bl	800b6fc <_fflush_r>
 800a7ea:	b988      	cbnz	r0, 800a810 <__swbuf_r+0x90>
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <__swbuf_r+0x9c>)
 800a7f2:	429c      	cmp	r4, r3
 800a7f4:	d101      	bne.n	800a7fa <__swbuf_r+0x7a>
 800a7f6:	68ac      	ldr	r4, [r5, #8]
 800a7f8:	e7cf      	b.n	800a79a <__swbuf_r+0x1a>
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <__swbuf_r+0xa0>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	bf08      	it	eq
 800a800:	68ec      	ldreq	r4, [r5, #12]
 800a802:	e7ca      	b.n	800a79a <__swbuf_r+0x1a>
 800a804:	4621      	mov	r1, r4
 800a806:	4628      	mov	r0, r5
 800a808:	f000 f80c 	bl	800a824 <__swsetup_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d0cb      	beq.n	800a7a8 <__swbuf_r+0x28>
 800a810:	f04f 37ff 	mov.w	r7, #4294967295
 800a814:	e7ea      	b.n	800a7ec <__swbuf_r+0x6c>
 800a816:	bf00      	nop
 800a818:	0800ec88 	.word	0x0800ec88
 800a81c:	0800eca8 	.word	0x0800eca8
 800a820:	0800ec68 	.word	0x0800ec68

0800a824 <__swsetup_r>:
 800a824:	4b32      	ldr	r3, [pc, #200]	; (800a8f0 <__swsetup_r+0xcc>)
 800a826:	b570      	push	{r4, r5, r6, lr}
 800a828:	681d      	ldr	r5, [r3, #0]
 800a82a:	4606      	mov	r6, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	b125      	cbz	r5, 800a83a <__swsetup_r+0x16>
 800a830:	69ab      	ldr	r3, [r5, #24]
 800a832:	b913      	cbnz	r3, 800a83a <__swsetup_r+0x16>
 800a834:	4628      	mov	r0, r5
 800a836:	f000 fff5 	bl	800b824 <__sinit>
 800a83a:	4b2e      	ldr	r3, [pc, #184]	; (800a8f4 <__swsetup_r+0xd0>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d10f      	bne.n	800a860 <__swsetup_r+0x3c>
 800a840:	686c      	ldr	r4, [r5, #4]
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a848:	0719      	lsls	r1, r3, #28
 800a84a:	d42c      	bmi.n	800a8a6 <__swsetup_r+0x82>
 800a84c:	06dd      	lsls	r5, r3, #27
 800a84e:	d411      	bmi.n	800a874 <__swsetup_r+0x50>
 800a850:	2309      	movs	r3, #9
 800a852:	6033      	str	r3, [r6, #0]
 800a854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295
 800a85e:	e03e      	b.n	800a8de <__swsetup_r+0xba>
 800a860:	4b25      	ldr	r3, [pc, #148]	; (800a8f8 <__swsetup_r+0xd4>)
 800a862:	429c      	cmp	r4, r3
 800a864:	d101      	bne.n	800a86a <__swsetup_r+0x46>
 800a866:	68ac      	ldr	r4, [r5, #8]
 800a868:	e7eb      	b.n	800a842 <__swsetup_r+0x1e>
 800a86a:	4b24      	ldr	r3, [pc, #144]	; (800a8fc <__swsetup_r+0xd8>)
 800a86c:	429c      	cmp	r4, r3
 800a86e:	bf08      	it	eq
 800a870:	68ec      	ldreq	r4, [r5, #12]
 800a872:	e7e6      	b.n	800a842 <__swsetup_r+0x1e>
 800a874:	0758      	lsls	r0, r3, #29
 800a876:	d512      	bpl.n	800a89e <__swsetup_r+0x7a>
 800a878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a87a:	b141      	cbz	r1, 800a88e <__swsetup_r+0x6a>
 800a87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a880:	4299      	cmp	r1, r3
 800a882:	d002      	beq.n	800a88a <__swsetup_r+0x66>
 800a884:	4630      	mov	r0, r6
 800a886:	f002 f929 	bl	800cadc <_free_r>
 800a88a:	2300      	movs	r3, #0
 800a88c:	6363      	str	r3, [r4, #52]	; 0x34
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	2300      	movs	r3, #0
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f043 0308 	orr.w	r3, r3, #8
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	b94b      	cbnz	r3, 800a8be <__swsetup_r+0x9a>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8b4:	d003      	beq.n	800a8be <__swsetup_r+0x9a>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f001 fbeb 	bl	800c094 <__smakebuf_r>
 800a8be:	89a0      	ldrh	r0, [r4, #12]
 800a8c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8c4:	f010 0301 	ands.w	r3, r0, #1
 800a8c8:	d00a      	beq.n	800a8e0 <__swsetup_r+0xbc>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60a3      	str	r3, [r4, #8]
 800a8ce:	6963      	ldr	r3, [r4, #20]
 800a8d0:	425b      	negs	r3, r3
 800a8d2:	61a3      	str	r3, [r4, #24]
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	b943      	cbnz	r3, 800a8ea <__swsetup_r+0xc6>
 800a8d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8dc:	d1ba      	bne.n	800a854 <__swsetup_r+0x30>
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	0781      	lsls	r1, r0, #30
 800a8e2:	bf58      	it	pl
 800a8e4:	6963      	ldrpl	r3, [r4, #20]
 800a8e6:	60a3      	str	r3, [r4, #8]
 800a8e8:	e7f4      	b.n	800a8d4 <__swsetup_r+0xb0>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e7f7      	b.n	800a8de <__swsetup_r+0xba>
 800a8ee:	bf00      	nop
 800a8f0:	2000002c 	.word	0x2000002c
 800a8f4:	0800ec88 	.word	0x0800ec88
 800a8f8:	0800eca8 	.word	0x0800eca8
 800a8fc:	0800ec68 	.word	0x0800ec68

0800a900 <quorem>:
 800a900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	6903      	ldr	r3, [r0, #16]
 800a906:	690c      	ldr	r4, [r1, #16]
 800a908:	42a3      	cmp	r3, r4
 800a90a:	4607      	mov	r7, r0
 800a90c:	f2c0 8081 	blt.w	800aa12 <quorem+0x112>
 800a910:	3c01      	subs	r4, #1
 800a912:	f101 0814 	add.w	r8, r1, #20
 800a916:	f100 0514 	add.w	r5, r0, #20
 800a91a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a928:	3301      	adds	r3, #1
 800a92a:	429a      	cmp	r2, r3
 800a92c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a930:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a934:	fbb2 f6f3 	udiv	r6, r2, r3
 800a938:	d331      	bcc.n	800a99e <quorem+0x9e>
 800a93a:	f04f 0e00 	mov.w	lr, #0
 800a93e:	4640      	mov	r0, r8
 800a940:	46ac      	mov	ip, r5
 800a942:	46f2      	mov	sl, lr
 800a944:	f850 2b04 	ldr.w	r2, [r0], #4
 800a948:	b293      	uxth	r3, r2
 800a94a:	fb06 e303 	mla	r3, r6, r3, lr
 800a94e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a952:	b29b      	uxth	r3, r3
 800a954:	ebaa 0303 	sub.w	r3, sl, r3
 800a958:	0c12      	lsrs	r2, r2, #16
 800a95a:	f8dc a000 	ldr.w	sl, [ip]
 800a95e:	fb06 e202 	mla	r2, r6, r2, lr
 800a962:	fa13 f38a 	uxtah	r3, r3, sl
 800a966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a96a:	fa1f fa82 	uxth.w	sl, r2
 800a96e:	f8dc 2000 	ldr.w	r2, [ip]
 800a972:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a976:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a980:	4581      	cmp	r9, r0
 800a982:	f84c 3b04 	str.w	r3, [ip], #4
 800a986:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a98a:	d2db      	bcs.n	800a944 <quorem+0x44>
 800a98c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a990:	b92b      	cbnz	r3, 800a99e <quorem+0x9e>
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	3b04      	subs	r3, #4
 800a996:	429d      	cmp	r5, r3
 800a998:	461a      	mov	r2, r3
 800a99a:	d32e      	bcc.n	800a9fa <quorem+0xfa>
 800a99c:	613c      	str	r4, [r7, #16]
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f001 fe9a 	bl	800c6d8 <__mcmp>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	db24      	blt.n	800a9f2 <quorem+0xf2>
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f04f 0c00 	mov.w	ip, #0
 800a9b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9b4:	f8d0 e000 	ldr.w	lr, [r0]
 800a9b8:	b293      	uxth	r3, r2
 800a9ba:	ebac 0303 	sub.w	r3, ip, r3
 800a9be:	0c12      	lsrs	r2, r2, #16
 800a9c0:	fa13 f38e 	uxtah	r3, r3, lr
 800a9c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9d2:	45c1      	cmp	r9, r8
 800a9d4:	f840 3b04 	str.w	r3, [r0], #4
 800a9d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9dc:	d2e8      	bcs.n	800a9b0 <quorem+0xb0>
 800a9de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9e6:	b922      	cbnz	r2, 800a9f2 <quorem+0xf2>
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	429d      	cmp	r5, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	d30a      	bcc.n	800aa06 <quorem+0x106>
 800a9f0:	613c      	str	r4, [r7, #16]
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	b003      	add	sp, #12
 800a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fa:	6812      	ldr	r2, [r2, #0]
 800a9fc:	3b04      	subs	r3, #4
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	d1cc      	bne.n	800a99c <quorem+0x9c>
 800aa02:	3c01      	subs	r4, #1
 800aa04:	e7c7      	b.n	800a996 <quorem+0x96>
 800aa06:	6812      	ldr	r2, [r2, #0]
 800aa08:	3b04      	subs	r3, #4
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	d1f0      	bne.n	800a9f0 <quorem+0xf0>
 800aa0e:	3c01      	subs	r4, #1
 800aa10:	e7eb      	b.n	800a9ea <quorem+0xea>
 800aa12:	2000      	movs	r0, #0
 800aa14:	e7ee      	b.n	800a9f4 <quorem+0xf4>
	...

0800aa18 <_dtoa_r>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	ed2d 8b02 	vpush	{d8}
 800aa20:	ec57 6b10 	vmov	r6, r7, d0
 800aa24:	b095      	sub	sp, #84	; 0x54
 800aa26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa2c:	9105      	str	r1, [sp, #20]
 800aa2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800aa32:	4604      	mov	r4, r0
 800aa34:	9209      	str	r2, [sp, #36]	; 0x24
 800aa36:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa38:	b975      	cbnz	r5, 800aa58 <_dtoa_r+0x40>
 800aa3a:	2010      	movs	r0, #16
 800aa3c:	f001 fb6a 	bl	800c114 <malloc>
 800aa40:	4602      	mov	r2, r0
 800aa42:	6260      	str	r0, [r4, #36]	; 0x24
 800aa44:	b920      	cbnz	r0, 800aa50 <_dtoa_r+0x38>
 800aa46:	4bb2      	ldr	r3, [pc, #712]	; (800ad10 <_dtoa_r+0x2f8>)
 800aa48:	21ea      	movs	r1, #234	; 0xea
 800aa4a:	48b2      	ldr	r0, [pc, #712]	; (800ad14 <_dtoa_r+0x2fc>)
 800aa4c:	f002 fad8 	bl	800d000 <__assert_func>
 800aa50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa54:	6005      	str	r5, [r0, #0]
 800aa56:	60c5      	str	r5, [r0, #12]
 800aa58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa5a:	6819      	ldr	r1, [r3, #0]
 800aa5c:	b151      	cbz	r1, 800aa74 <_dtoa_r+0x5c>
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	604a      	str	r2, [r1, #4]
 800aa62:	2301      	movs	r3, #1
 800aa64:	4093      	lsls	r3, r2
 800aa66:	608b      	str	r3, [r1, #8]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f001 fbad 	bl	800c1c8 <_Bfree>
 800aa6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	1e3b      	subs	r3, r7, #0
 800aa76:	bfb9      	ittee	lt
 800aa78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa7c:	9303      	strlt	r3, [sp, #12]
 800aa7e:	2300      	movge	r3, #0
 800aa80:	f8c8 3000 	strge.w	r3, [r8]
 800aa84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aa88:	4ba3      	ldr	r3, [pc, #652]	; (800ad18 <_dtoa_r+0x300>)
 800aa8a:	bfbc      	itt	lt
 800aa8c:	2201      	movlt	r2, #1
 800aa8e:	f8c8 2000 	strlt.w	r2, [r8]
 800aa92:	ea33 0309 	bics.w	r3, r3, r9
 800aa96:	d11b      	bne.n	800aad0 <_dtoa_r+0xb8>
 800aa98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa9a:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaa4:	4333      	orrs	r3, r6
 800aaa6:	f000 857a 	beq.w	800b59e <_dtoa_r+0xb86>
 800aaaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaac:	b963      	cbnz	r3, 800aac8 <_dtoa_r+0xb0>
 800aaae:	4b9b      	ldr	r3, [pc, #620]	; (800ad1c <_dtoa_r+0x304>)
 800aab0:	e024      	b.n	800aafc <_dtoa_r+0xe4>
 800aab2:	4b9b      	ldr	r3, [pc, #620]	; (800ad20 <_dtoa_r+0x308>)
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	3308      	adds	r3, #8
 800aab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	9800      	ldr	r0, [sp, #0]
 800aabe:	b015      	add	sp, #84	; 0x54
 800aac0:	ecbd 8b02 	vpop	{d8}
 800aac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac8:	4b94      	ldr	r3, [pc, #592]	; (800ad1c <_dtoa_r+0x304>)
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	3303      	adds	r3, #3
 800aace:	e7f3      	b.n	800aab8 <_dtoa_r+0xa0>
 800aad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aad4:	2200      	movs	r2, #0
 800aad6:	ec51 0b17 	vmov	r0, r1, d7
 800aada:	2300      	movs	r3, #0
 800aadc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aae0:	f7f6 f81a 	bl	8000b18 <__aeabi_dcmpeq>
 800aae4:	4680      	mov	r8, r0
 800aae6:	b158      	cbz	r0, 800ab00 <_dtoa_r+0xe8>
 800aae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aaea:	2301      	movs	r3, #1
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8551 	beq.w	800b598 <_dtoa_r+0xb80>
 800aaf6:	488b      	ldr	r0, [pc, #556]	; (800ad24 <_dtoa_r+0x30c>)
 800aaf8:	6018      	str	r0, [r3, #0]
 800aafa:	1e43      	subs	r3, r0, #1
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	e7dd      	b.n	800aabc <_dtoa_r+0xa4>
 800ab00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ab04:	aa12      	add	r2, sp, #72	; 0x48
 800ab06:	a913      	add	r1, sp, #76	; 0x4c
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f001 ff05 	bl	800c918 <__d2b>
 800ab0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab12:	4683      	mov	fp, r0
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	d07c      	beq.n	800ac12 <_dtoa_r+0x1fa>
 800ab18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ab1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ab26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ab2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ab2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab32:	4b7d      	ldr	r3, [pc, #500]	; (800ad28 <_dtoa_r+0x310>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	4630      	mov	r0, r6
 800ab38:	4639      	mov	r1, r7
 800ab3a:	f7f5 fbcd 	bl	80002d8 <__aeabi_dsub>
 800ab3e:	a36e      	add	r3, pc, #440	; (adr r3, 800acf8 <_dtoa_r+0x2e0>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fd80 	bl	8000648 <__aeabi_dmul>
 800ab48:	a36d      	add	r3, pc, #436	; (adr r3, 800ad00 <_dtoa_r+0x2e8>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fbc5 	bl	80002dc <__adddf3>
 800ab52:	4606      	mov	r6, r0
 800ab54:	4628      	mov	r0, r5
 800ab56:	460f      	mov	r7, r1
 800ab58:	f7f5 fd0c 	bl	8000574 <__aeabi_i2d>
 800ab5c:	a36a      	add	r3, pc, #424	; (adr r3, 800ad08 <_dtoa_r+0x2f0>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f7f5 fd71 	bl	8000648 <__aeabi_dmul>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	f7f5 fbb5 	bl	80002dc <__adddf3>
 800ab72:	4606      	mov	r6, r0
 800ab74:	460f      	mov	r7, r1
 800ab76:	f7f6 f817 	bl	8000ba8 <__aeabi_d2iz>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	2300      	movs	r3, #0
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 ffd2 	bl	8000b2c <__aeabi_dcmplt>
 800ab88:	b148      	cbz	r0, 800ab9e <_dtoa_r+0x186>
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	f7f5 fcf2 	bl	8000574 <__aeabi_i2d>
 800ab90:	4632      	mov	r2, r6
 800ab92:	463b      	mov	r3, r7
 800ab94:	f7f5 ffc0 	bl	8000b18 <__aeabi_dcmpeq>
 800ab98:	b908      	cbnz	r0, 800ab9e <_dtoa_r+0x186>
 800ab9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab9e:	f1ba 0f16 	cmp.w	sl, #22
 800aba2:	d854      	bhi.n	800ac4e <_dtoa_r+0x236>
 800aba4:	4b61      	ldr	r3, [pc, #388]	; (800ad2c <_dtoa_r+0x314>)
 800aba6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800abb2:	f7f5 ffbb 	bl	8000b2c <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d04b      	beq.n	800ac52 <_dtoa_r+0x23a>
 800abba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abbe:	2300      	movs	r3, #0
 800abc0:	930e      	str	r3, [sp, #56]	; 0x38
 800abc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abc4:	1b5d      	subs	r5, r3, r5
 800abc6:	1e6b      	subs	r3, r5, #1
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	bf43      	ittte	mi
 800abcc:	2300      	movmi	r3, #0
 800abce:	f1c5 0801 	rsbmi	r8, r5, #1
 800abd2:	9304      	strmi	r3, [sp, #16]
 800abd4:	f04f 0800 	movpl.w	r8, #0
 800abd8:	f1ba 0f00 	cmp.w	sl, #0
 800abdc:	db3b      	blt.n	800ac56 <_dtoa_r+0x23e>
 800abde:	9b04      	ldr	r3, [sp, #16]
 800abe0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800abe4:	4453      	add	r3, sl
 800abe6:	9304      	str	r3, [sp, #16]
 800abe8:	2300      	movs	r3, #0
 800abea:	9306      	str	r3, [sp, #24]
 800abec:	9b05      	ldr	r3, [sp, #20]
 800abee:	2b09      	cmp	r3, #9
 800abf0:	d869      	bhi.n	800acc6 <_dtoa_r+0x2ae>
 800abf2:	2b05      	cmp	r3, #5
 800abf4:	bfc4      	itt	gt
 800abf6:	3b04      	subgt	r3, #4
 800abf8:	9305      	strgt	r3, [sp, #20]
 800abfa:	9b05      	ldr	r3, [sp, #20]
 800abfc:	f1a3 0302 	sub.w	r3, r3, #2
 800ac00:	bfcc      	ite	gt
 800ac02:	2500      	movgt	r5, #0
 800ac04:	2501      	movle	r5, #1
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d869      	bhi.n	800acde <_dtoa_r+0x2c6>
 800ac0a:	e8df f003 	tbb	[pc, r3]
 800ac0e:	4e2c      	.short	0x4e2c
 800ac10:	5a4c      	.short	0x5a4c
 800ac12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ac16:	441d      	add	r5, r3
 800ac18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	bfc1      	itttt	gt
 800ac20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ac28:	fa09 f303 	lslgt.w	r3, r9, r3
 800ac2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac30:	bfda      	itte	le
 800ac32:	f1c3 0320 	rsble	r3, r3, #32
 800ac36:	fa06 f003 	lslle.w	r0, r6, r3
 800ac3a:	4318      	orrgt	r0, r3
 800ac3c:	f7f5 fc8a 	bl	8000554 <__aeabi_ui2d>
 800ac40:	2301      	movs	r3, #1
 800ac42:	4606      	mov	r6, r0
 800ac44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ac48:	3d01      	subs	r5, #1
 800ac4a:	9310      	str	r3, [sp, #64]	; 0x40
 800ac4c:	e771      	b.n	800ab32 <_dtoa_r+0x11a>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e7b6      	b.n	800abc0 <_dtoa_r+0x1a8>
 800ac52:	900e      	str	r0, [sp, #56]	; 0x38
 800ac54:	e7b5      	b.n	800abc2 <_dtoa_r+0x1aa>
 800ac56:	f1ca 0300 	rsb	r3, sl, #0
 800ac5a:	9306      	str	r3, [sp, #24]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	eba8 080a 	sub.w	r8, r8, sl
 800ac62:	930d      	str	r3, [sp, #52]	; 0x34
 800ac64:	e7c2      	b.n	800abec <_dtoa_r+0x1d4>
 800ac66:	2300      	movs	r3, #0
 800ac68:	9308      	str	r3, [sp, #32]
 800ac6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dc39      	bgt.n	800ace4 <_dtoa_r+0x2cc>
 800ac70:	f04f 0901 	mov.w	r9, #1
 800ac74:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac78:	464b      	mov	r3, r9
 800ac7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac80:	2200      	movs	r2, #0
 800ac82:	6042      	str	r2, [r0, #4]
 800ac84:	2204      	movs	r2, #4
 800ac86:	f102 0614 	add.w	r6, r2, #20
 800ac8a:	429e      	cmp	r6, r3
 800ac8c:	6841      	ldr	r1, [r0, #4]
 800ac8e:	d92f      	bls.n	800acf0 <_dtoa_r+0x2d8>
 800ac90:	4620      	mov	r0, r4
 800ac92:	f001 fa59 	bl	800c148 <_Balloc>
 800ac96:	9000      	str	r0, [sp, #0]
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d14b      	bne.n	800ad34 <_dtoa_r+0x31c>
 800ac9c:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <_dtoa_r+0x318>)
 800ac9e:	4602      	mov	r2, r0
 800aca0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aca4:	e6d1      	b.n	800aa4a <_dtoa_r+0x32>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e7de      	b.n	800ac68 <_dtoa_r+0x250>
 800acaa:	2300      	movs	r3, #0
 800acac:	9308      	str	r3, [sp, #32]
 800acae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb0:	eb0a 0903 	add.w	r9, sl, r3
 800acb4:	f109 0301 	add.w	r3, r9, #1
 800acb8:	2b01      	cmp	r3, #1
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	bfb8      	it	lt
 800acbe:	2301      	movlt	r3, #1
 800acc0:	e7dd      	b.n	800ac7e <_dtoa_r+0x266>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e7f2      	b.n	800acac <_dtoa_r+0x294>
 800acc6:	2501      	movs	r5, #1
 800acc8:	2300      	movs	r3, #0
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	9508      	str	r5, [sp, #32]
 800acce:	f04f 39ff 	mov.w	r9, #4294967295
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8cd 9004 	str.w	r9, [sp, #4]
 800acd8:	2312      	movs	r3, #18
 800acda:	9209      	str	r2, [sp, #36]	; 0x24
 800acdc:	e7cf      	b.n	800ac7e <_dtoa_r+0x266>
 800acde:	2301      	movs	r3, #1
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	e7f4      	b.n	800acce <_dtoa_r+0x2b6>
 800ace4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ace8:	f8cd 9004 	str.w	r9, [sp, #4]
 800acec:	464b      	mov	r3, r9
 800acee:	e7c6      	b.n	800ac7e <_dtoa_r+0x266>
 800acf0:	3101      	adds	r1, #1
 800acf2:	6041      	str	r1, [r0, #4]
 800acf4:	0052      	lsls	r2, r2, #1
 800acf6:	e7c6      	b.n	800ac86 <_dtoa_r+0x26e>
 800acf8:	636f4361 	.word	0x636f4361
 800acfc:	3fd287a7 	.word	0x3fd287a7
 800ad00:	8b60c8b3 	.word	0x8b60c8b3
 800ad04:	3fc68a28 	.word	0x3fc68a28
 800ad08:	509f79fb 	.word	0x509f79fb
 800ad0c:	3fd34413 	.word	0x3fd34413
 800ad10:	0800ebde 	.word	0x0800ebde
 800ad14:	0800ebf5 	.word	0x0800ebf5
 800ad18:	7ff00000 	.word	0x7ff00000
 800ad1c:	0800ebda 	.word	0x0800ebda
 800ad20:	0800ebd1 	.word	0x0800ebd1
 800ad24:	0800ea59 	.word	0x0800ea59
 800ad28:	3ff80000 	.word	0x3ff80000
 800ad2c:	0800edd0 	.word	0x0800edd0
 800ad30:	0800ec54 	.word	0x0800ec54
 800ad34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad36:	9a00      	ldr	r2, [sp, #0]
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	9b01      	ldr	r3, [sp, #4]
 800ad3c:	2b0e      	cmp	r3, #14
 800ad3e:	f200 80ad 	bhi.w	800ae9c <_dtoa_r+0x484>
 800ad42:	2d00      	cmp	r5, #0
 800ad44:	f000 80aa 	beq.w	800ae9c <_dtoa_r+0x484>
 800ad48:	f1ba 0f00 	cmp.w	sl, #0
 800ad4c:	dd36      	ble.n	800adbc <_dtoa_r+0x3a4>
 800ad4e:	4ac3      	ldr	r2, [pc, #780]	; (800b05c <_dtoa_r+0x644>)
 800ad50:	f00a 030f 	and.w	r3, sl, #15
 800ad54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad58:	ed93 7b00 	vldr	d7, [r3]
 800ad5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ad60:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ad64:	eeb0 8a47 	vmov.f32	s16, s14
 800ad68:	eef0 8a67 	vmov.f32	s17, s15
 800ad6c:	d016      	beq.n	800ad9c <_dtoa_r+0x384>
 800ad6e:	4bbc      	ldr	r3, [pc, #752]	; (800b060 <_dtoa_r+0x648>)
 800ad70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad78:	f7f5 fd90 	bl	800089c <__aeabi_ddiv>
 800ad7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad80:	f007 070f 	and.w	r7, r7, #15
 800ad84:	2503      	movs	r5, #3
 800ad86:	4eb6      	ldr	r6, [pc, #728]	; (800b060 <_dtoa_r+0x648>)
 800ad88:	b957      	cbnz	r7, 800ada0 <_dtoa_r+0x388>
 800ad8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad8e:	ec53 2b18 	vmov	r2, r3, d8
 800ad92:	f7f5 fd83 	bl	800089c <__aeabi_ddiv>
 800ad96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad9a:	e029      	b.n	800adf0 <_dtoa_r+0x3d8>
 800ad9c:	2502      	movs	r5, #2
 800ad9e:	e7f2      	b.n	800ad86 <_dtoa_r+0x36e>
 800ada0:	07f9      	lsls	r1, r7, #31
 800ada2:	d508      	bpl.n	800adb6 <_dtoa_r+0x39e>
 800ada4:	ec51 0b18 	vmov	r0, r1, d8
 800ada8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800adac:	f7f5 fc4c 	bl	8000648 <__aeabi_dmul>
 800adb0:	ec41 0b18 	vmov	d8, r0, r1
 800adb4:	3501      	adds	r5, #1
 800adb6:	107f      	asrs	r7, r7, #1
 800adb8:	3608      	adds	r6, #8
 800adba:	e7e5      	b.n	800ad88 <_dtoa_r+0x370>
 800adbc:	f000 80a6 	beq.w	800af0c <_dtoa_r+0x4f4>
 800adc0:	f1ca 0600 	rsb	r6, sl, #0
 800adc4:	4ba5      	ldr	r3, [pc, #660]	; (800b05c <_dtoa_r+0x644>)
 800adc6:	4fa6      	ldr	r7, [pc, #664]	; (800b060 <_dtoa_r+0x648>)
 800adc8:	f006 020f 	and.w	r2, r6, #15
 800adcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800add8:	f7f5 fc36 	bl	8000648 <__aeabi_dmul>
 800addc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ade0:	1136      	asrs	r6, r6, #4
 800ade2:	2300      	movs	r3, #0
 800ade4:	2502      	movs	r5, #2
 800ade6:	2e00      	cmp	r6, #0
 800ade8:	f040 8085 	bne.w	800aef6 <_dtoa_r+0x4de>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1d2      	bne.n	800ad96 <_dtoa_r+0x37e>
 800adf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 808c 	beq.w	800af10 <_dtoa_r+0x4f8>
 800adf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adfc:	4b99      	ldr	r3, [pc, #612]	; (800b064 <_dtoa_r+0x64c>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	4630      	mov	r0, r6
 800ae02:	4639      	mov	r1, r7
 800ae04:	f7f5 fe92 	bl	8000b2c <__aeabi_dcmplt>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f000 8081 	beq.w	800af10 <_dtoa_r+0x4f8>
 800ae0e:	9b01      	ldr	r3, [sp, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d07d      	beq.n	800af10 <_dtoa_r+0x4f8>
 800ae14:	f1b9 0f00 	cmp.w	r9, #0
 800ae18:	dd3c      	ble.n	800ae94 <_dtoa_r+0x47c>
 800ae1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae1e:	9307      	str	r3, [sp, #28]
 800ae20:	2200      	movs	r2, #0
 800ae22:	4b91      	ldr	r3, [pc, #580]	; (800b068 <_dtoa_r+0x650>)
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	f7f5 fc0e 	bl	8000648 <__aeabi_dmul>
 800ae2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae30:	3501      	adds	r5, #1
 800ae32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ae36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f7f5 fb9a 	bl	8000574 <__aeabi_i2d>
 800ae40:	4632      	mov	r2, r6
 800ae42:	463b      	mov	r3, r7
 800ae44:	f7f5 fc00 	bl	8000648 <__aeabi_dmul>
 800ae48:	4b88      	ldr	r3, [pc, #544]	; (800b06c <_dtoa_r+0x654>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f7f5 fa46 	bl	80002dc <__adddf3>
 800ae50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ae54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae58:	9303      	str	r3, [sp, #12]
 800ae5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d15c      	bne.n	800af1a <_dtoa_r+0x502>
 800ae60:	4b83      	ldr	r3, [pc, #524]	; (800b070 <_dtoa_r+0x658>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fa36 	bl	80002d8 <__aeabi_dsub>
 800ae6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae70:	4606      	mov	r6, r0
 800ae72:	460f      	mov	r7, r1
 800ae74:	f7f5 fe78 	bl	8000b68 <__aeabi_dcmpgt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	f040 8296 	bne.w	800b3aa <_dtoa_r+0x992>
 800ae7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae82:	4630      	mov	r0, r6
 800ae84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fe4f 	bl	8000b2c <__aeabi_dcmplt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	f040 8288 	bne.w	800b3a4 <_dtoa_r+0x98c>
 800ae94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f2c0 8158 	blt.w	800b154 <_dtoa_r+0x73c>
 800aea4:	f1ba 0f0e 	cmp.w	sl, #14
 800aea8:	f300 8154 	bgt.w	800b154 <_dtoa_r+0x73c>
 800aeac:	4b6b      	ldr	r3, [pc, #428]	; (800b05c <_dtoa_r+0x644>)
 800aeae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aeb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f280 80e3 	bge.w	800b084 <_dtoa_r+0x66c>
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f300 80df 	bgt.w	800b084 <_dtoa_r+0x66c>
 800aec6:	f040 826d 	bne.w	800b3a4 <_dtoa_r+0x98c>
 800aeca:	4b69      	ldr	r3, [pc, #420]	; (800b070 <_dtoa_r+0x658>)
 800aecc:	2200      	movs	r2, #0
 800aece:	4640      	mov	r0, r8
 800aed0:	4649      	mov	r1, r9
 800aed2:	f7f5 fbb9 	bl	8000648 <__aeabi_dmul>
 800aed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeda:	f7f5 fe3b 	bl	8000b54 <__aeabi_dcmpge>
 800aede:	9e01      	ldr	r6, [sp, #4]
 800aee0:	4637      	mov	r7, r6
 800aee2:	2800      	cmp	r0, #0
 800aee4:	f040 8243 	bne.w	800b36e <_dtoa_r+0x956>
 800aee8:	9d00      	ldr	r5, [sp, #0]
 800aeea:	2331      	movs	r3, #49	; 0x31
 800aeec:	f805 3b01 	strb.w	r3, [r5], #1
 800aef0:	f10a 0a01 	add.w	sl, sl, #1
 800aef4:	e23f      	b.n	800b376 <_dtoa_r+0x95e>
 800aef6:	07f2      	lsls	r2, r6, #31
 800aef8:	d505      	bpl.n	800af06 <_dtoa_r+0x4ee>
 800aefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aefe:	f7f5 fba3 	bl	8000648 <__aeabi_dmul>
 800af02:	3501      	adds	r5, #1
 800af04:	2301      	movs	r3, #1
 800af06:	1076      	asrs	r6, r6, #1
 800af08:	3708      	adds	r7, #8
 800af0a:	e76c      	b.n	800ade6 <_dtoa_r+0x3ce>
 800af0c:	2502      	movs	r5, #2
 800af0e:	e76f      	b.n	800adf0 <_dtoa_r+0x3d8>
 800af10:	9b01      	ldr	r3, [sp, #4]
 800af12:	f8cd a01c 	str.w	sl, [sp, #28]
 800af16:	930c      	str	r3, [sp, #48]	; 0x30
 800af18:	e78d      	b.n	800ae36 <_dtoa_r+0x41e>
 800af1a:	9900      	ldr	r1, [sp, #0]
 800af1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800af1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af20:	4b4e      	ldr	r3, [pc, #312]	; (800b05c <_dtoa_r+0x644>)
 800af22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af26:	4401      	add	r1, r0
 800af28:	9102      	str	r1, [sp, #8]
 800af2a:	9908      	ldr	r1, [sp, #32]
 800af2c:	eeb0 8a47 	vmov.f32	s16, s14
 800af30:	eef0 8a67 	vmov.f32	s17, s15
 800af34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af3c:	2900      	cmp	r1, #0
 800af3e:	d045      	beq.n	800afcc <_dtoa_r+0x5b4>
 800af40:	494c      	ldr	r1, [pc, #304]	; (800b074 <_dtoa_r+0x65c>)
 800af42:	2000      	movs	r0, #0
 800af44:	f7f5 fcaa 	bl	800089c <__aeabi_ddiv>
 800af48:	ec53 2b18 	vmov	r2, r3, d8
 800af4c:	f7f5 f9c4 	bl	80002d8 <__aeabi_dsub>
 800af50:	9d00      	ldr	r5, [sp, #0]
 800af52:	ec41 0b18 	vmov	d8, r0, r1
 800af56:	4639      	mov	r1, r7
 800af58:	4630      	mov	r0, r6
 800af5a:	f7f5 fe25 	bl	8000ba8 <__aeabi_d2iz>
 800af5e:	900c      	str	r0, [sp, #48]	; 0x30
 800af60:	f7f5 fb08 	bl	8000574 <__aeabi_i2d>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4630      	mov	r0, r6
 800af6a:	4639      	mov	r1, r7
 800af6c:	f7f5 f9b4 	bl	80002d8 <__aeabi_dsub>
 800af70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af72:	3330      	adds	r3, #48	; 0x30
 800af74:	f805 3b01 	strb.w	r3, [r5], #1
 800af78:	ec53 2b18 	vmov	r2, r3, d8
 800af7c:	4606      	mov	r6, r0
 800af7e:	460f      	mov	r7, r1
 800af80:	f7f5 fdd4 	bl	8000b2c <__aeabi_dcmplt>
 800af84:	2800      	cmp	r0, #0
 800af86:	d165      	bne.n	800b054 <_dtoa_r+0x63c>
 800af88:	4632      	mov	r2, r6
 800af8a:	463b      	mov	r3, r7
 800af8c:	4935      	ldr	r1, [pc, #212]	; (800b064 <_dtoa_r+0x64c>)
 800af8e:	2000      	movs	r0, #0
 800af90:	f7f5 f9a2 	bl	80002d8 <__aeabi_dsub>
 800af94:	ec53 2b18 	vmov	r2, r3, d8
 800af98:	f7f5 fdc8 	bl	8000b2c <__aeabi_dcmplt>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f040 80b9 	bne.w	800b114 <_dtoa_r+0x6fc>
 800afa2:	9b02      	ldr	r3, [sp, #8]
 800afa4:	429d      	cmp	r5, r3
 800afa6:	f43f af75 	beq.w	800ae94 <_dtoa_r+0x47c>
 800afaa:	4b2f      	ldr	r3, [pc, #188]	; (800b068 <_dtoa_r+0x650>)
 800afac:	ec51 0b18 	vmov	r0, r1, d8
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 fb49 	bl	8000648 <__aeabi_dmul>
 800afb6:	4b2c      	ldr	r3, [pc, #176]	; (800b068 <_dtoa_r+0x650>)
 800afb8:	ec41 0b18 	vmov	d8, r0, r1
 800afbc:	2200      	movs	r2, #0
 800afbe:	4630      	mov	r0, r6
 800afc0:	4639      	mov	r1, r7
 800afc2:	f7f5 fb41 	bl	8000648 <__aeabi_dmul>
 800afc6:	4606      	mov	r6, r0
 800afc8:	460f      	mov	r7, r1
 800afca:	e7c4      	b.n	800af56 <_dtoa_r+0x53e>
 800afcc:	ec51 0b17 	vmov	r0, r1, d7
 800afd0:	f7f5 fb3a 	bl	8000648 <__aeabi_dmul>
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	9d00      	ldr	r5, [sp, #0]
 800afd8:	930c      	str	r3, [sp, #48]	; 0x30
 800afda:	ec41 0b18 	vmov	d8, r0, r1
 800afde:	4639      	mov	r1, r7
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7f5 fde1 	bl	8000ba8 <__aeabi_d2iz>
 800afe6:	9011      	str	r0, [sp, #68]	; 0x44
 800afe8:	f7f5 fac4 	bl	8000574 <__aeabi_i2d>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 f970 	bl	80002d8 <__aeabi_dsub>
 800aff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800affa:	3330      	adds	r3, #48	; 0x30
 800affc:	f805 3b01 	strb.w	r3, [r5], #1
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	429d      	cmp	r5, r3
 800b004:	4606      	mov	r6, r0
 800b006:	460f      	mov	r7, r1
 800b008:	f04f 0200 	mov.w	r2, #0
 800b00c:	d134      	bne.n	800b078 <_dtoa_r+0x660>
 800b00e:	4b19      	ldr	r3, [pc, #100]	; (800b074 <_dtoa_r+0x65c>)
 800b010:	ec51 0b18 	vmov	r0, r1, d8
 800b014:	f7f5 f962 	bl	80002dc <__adddf3>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 fda2 	bl	8000b68 <__aeabi_dcmpgt>
 800b024:	2800      	cmp	r0, #0
 800b026:	d175      	bne.n	800b114 <_dtoa_r+0x6fc>
 800b028:	ec53 2b18 	vmov	r2, r3, d8
 800b02c:	4911      	ldr	r1, [pc, #68]	; (800b074 <_dtoa_r+0x65c>)
 800b02e:	2000      	movs	r0, #0
 800b030:	f7f5 f952 	bl	80002d8 <__aeabi_dsub>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4630      	mov	r0, r6
 800b03a:	4639      	mov	r1, r7
 800b03c:	f7f5 fd76 	bl	8000b2c <__aeabi_dcmplt>
 800b040:	2800      	cmp	r0, #0
 800b042:	f43f af27 	beq.w	800ae94 <_dtoa_r+0x47c>
 800b046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b048:	1e6b      	subs	r3, r5, #1
 800b04a:	930c      	str	r3, [sp, #48]	; 0x30
 800b04c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b050:	2b30      	cmp	r3, #48	; 0x30
 800b052:	d0f8      	beq.n	800b046 <_dtoa_r+0x62e>
 800b054:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b058:	e04a      	b.n	800b0f0 <_dtoa_r+0x6d8>
 800b05a:	bf00      	nop
 800b05c:	0800edd0 	.word	0x0800edd0
 800b060:	0800eda8 	.word	0x0800eda8
 800b064:	3ff00000 	.word	0x3ff00000
 800b068:	40240000 	.word	0x40240000
 800b06c:	401c0000 	.word	0x401c0000
 800b070:	40140000 	.word	0x40140000
 800b074:	3fe00000 	.word	0x3fe00000
 800b078:	4baf      	ldr	r3, [pc, #700]	; (800b338 <_dtoa_r+0x920>)
 800b07a:	f7f5 fae5 	bl	8000648 <__aeabi_dmul>
 800b07e:	4606      	mov	r6, r0
 800b080:	460f      	mov	r7, r1
 800b082:	e7ac      	b.n	800afde <_dtoa_r+0x5c6>
 800b084:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b088:	9d00      	ldr	r5, [sp, #0]
 800b08a:	4642      	mov	r2, r8
 800b08c:	464b      	mov	r3, r9
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 fc03 	bl	800089c <__aeabi_ddiv>
 800b096:	f7f5 fd87 	bl	8000ba8 <__aeabi_d2iz>
 800b09a:	9002      	str	r0, [sp, #8]
 800b09c:	f7f5 fa6a 	bl	8000574 <__aeabi_i2d>
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	464b      	mov	r3, r9
 800b0a4:	f7f5 fad0 	bl	8000648 <__aeabi_dmul>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4639      	mov	r1, r7
 800b0b0:	f7f5 f912 	bl	80002d8 <__aeabi_dsub>
 800b0b4:	9e02      	ldr	r6, [sp, #8]
 800b0b6:	9f01      	ldr	r7, [sp, #4]
 800b0b8:	3630      	adds	r6, #48	; 0x30
 800b0ba:	f805 6b01 	strb.w	r6, [r5], #1
 800b0be:	9e00      	ldr	r6, [sp, #0]
 800b0c0:	1bae      	subs	r6, r5, r6
 800b0c2:	42b7      	cmp	r7, r6
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	d137      	bne.n	800b13a <_dtoa_r+0x722>
 800b0ca:	f7f5 f907 	bl	80002dc <__adddf3>
 800b0ce:	4642      	mov	r2, r8
 800b0d0:	464b      	mov	r3, r9
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	460f      	mov	r7, r1
 800b0d6:	f7f5 fd47 	bl	8000b68 <__aeabi_dcmpgt>
 800b0da:	b9c8      	cbnz	r0, 800b110 <_dtoa_r+0x6f8>
 800b0dc:	4642      	mov	r2, r8
 800b0de:	464b      	mov	r3, r9
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 fd18 	bl	8000b18 <__aeabi_dcmpeq>
 800b0e8:	b110      	cbz	r0, 800b0f0 <_dtoa_r+0x6d8>
 800b0ea:	9b02      	ldr	r3, [sp, #8]
 800b0ec:	07d9      	lsls	r1, r3, #31
 800b0ee:	d40f      	bmi.n	800b110 <_dtoa_r+0x6f8>
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	f001 f868 	bl	800c1c8 <_Bfree>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	702b      	strb	r3, [r5, #0]
 800b0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0fe:	f10a 0001 	add.w	r0, sl, #1
 800b102:	6018      	str	r0, [r3, #0]
 800b104:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b106:	2b00      	cmp	r3, #0
 800b108:	f43f acd8 	beq.w	800aabc <_dtoa_r+0xa4>
 800b10c:	601d      	str	r5, [r3, #0]
 800b10e:	e4d5      	b.n	800aabc <_dtoa_r+0xa4>
 800b110:	f8cd a01c 	str.w	sl, [sp, #28]
 800b114:	462b      	mov	r3, r5
 800b116:	461d      	mov	r5, r3
 800b118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b11c:	2a39      	cmp	r2, #57	; 0x39
 800b11e:	d108      	bne.n	800b132 <_dtoa_r+0x71a>
 800b120:	9a00      	ldr	r2, [sp, #0]
 800b122:	429a      	cmp	r2, r3
 800b124:	d1f7      	bne.n	800b116 <_dtoa_r+0x6fe>
 800b126:	9a07      	ldr	r2, [sp, #28]
 800b128:	9900      	ldr	r1, [sp, #0]
 800b12a:	3201      	adds	r2, #1
 800b12c:	9207      	str	r2, [sp, #28]
 800b12e:	2230      	movs	r2, #48	; 0x30
 800b130:	700a      	strb	r2, [r1, #0]
 800b132:	781a      	ldrb	r2, [r3, #0]
 800b134:	3201      	adds	r2, #1
 800b136:	701a      	strb	r2, [r3, #0]
 800b138:	e78c      	b.n	800b054 <_dtoa_r+0x63c>
 800b13a:	4b7f      	ldr	r3, [pc, #508]	; (800b338 <_dtoa_r+0x920>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	f7f5 fa83 	bl	8000648 <__aeabi_dmul>
 800b142:	2200      	movs	r2, #0
 800b144:	2300      	movs	r3, #0
 800b146:	4606      	mov	r6, r0
 800b148:	460f      	mov	r7, r1
 800b14a:	f7f5 fce5 	bl	8000b18 <__aeabi_dcmpeq>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d09b      	beq.n	800b08a <_dtoa_r+0x672>
 800b152:	e7cd      	b.n	800b0f0 <_dtoa_r+0x6d8>
 800b154:	9a08      	ldr	r2, [sp, #32]
 800b156:	2a00      	cmp	r2, #0
 800b158:	f000 80c4 	beq.w	800b2e4 <_dtoa_r+0x8cc>
 800b15c:	9a05      	ldr	r2, [sp, #20]
 800b15e:	2a01      	cmp	r2, #1
 800b160:	f300 80a8 	bgt.w	800b2b4 <_dtoa_r+0x89c>
 800b164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b166:	2a00      	cmp	r2, #0
 800b168:	f000 80a0 	beq.w	800b2ac <_dtoa_r+0x894>
 800b16c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b170:	9e06      	ldr	r6, [sp, #24]
 800b172:	4645      	mov	r5, r8
 800b174:	9a04      	ldr	r2, [sp, #16]
 800b176:	2101      	movs	r1, #1
 800b178:	441a      	add	r2, r3
 800b17a:	4620      	mov	r0, r4
 800b17c:	4498      	add	r8, r3
 800b17e:	9204      	str	r2, [sp, #16]
 800b180:	f001 f928 	bl	800c3d4 <__i2b>
 800b184:	4607      	mov	r7, r0
 800b186:	2d00      	cmp	r5, #0
 800b188:	dd0b      	ble.n	800b1a2 <_dtoa_r+0x78a>
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	dd08      	ble.n	800b1a2 <_dtoa_r+0x78a>
 800b190:	42ab      	cmp	r3, r5
 800b192:	9a04      	ldr	r2, [sp, #16]
 800b194:	bfa8      	it	ge
 800b196:	462b      	movge	r3, r5
 800b198:	eba8 0803 	sub.w	r8, r8, r3
 800b19c:	1aed      	subs	r5, r5, r3
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	9b06      	ldr	r3, [sp, #24]
 800b1a4:	b1fb      	cbz	r3, 800b1e6 <_dtoa_r+0x7ce>
 800b1a6:	9b08      	ldr	r3, [sp, #32]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 809f 	beq.w	800b2ec <_dtoa_r+0x8d4>
 800b1ae:	2e00      	cmp	r6, #0
 800b1b0:	dd11      	ble.n	800b1d6 <_dtoa_r+0x7be>
 800b1b2:	4639      	mov	r1, r7
 800b1b4:	4632      	mov	r2, r6
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f001 f9c8 	bl	800c54c <__pow5mult>
 800b1bc:	465a      	mov	r2, fp
 800b1be:	4601      	mov	r1, r0
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f001 f91c 	bl	800c400 <__multiply>
 800b1c8:	4659      	mov	r1, fp
 800b1ca:	9007      	str	r0, [sp, #28]
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 fffb 	bl	800c1c8 <_Bfree>
 800b1d2:	9b07      	ldr	r3, [sp, #28]
 800b1d4:	469b      	mov	fp, r3
 800b1d6:	9b06      	ldr	r3, [sp, #24]
 800b1d8:	1b9a      	subs	r2, r3, r6
 800b1da:	d004      	beq.n	800b1e6 <_dtoa_r+0x7ce>
 800b1dc:	4659      	mov	r1, fp
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f001 f9b4 	bl	800c54c <__pow5mult>
 800b1e4:	4683      	mov	fp, r0
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f001 f8f3 	bl	800c3d4 <__i2b>
 800b1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	dd7c      	ble.n	800b2f0 <_dtoa_r+0x8d8>
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	4601      	mov	r1, r0
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f001 f9a6 	bl	800c54c <__pow5mult>
 800b200:	9b05      	ldr	r3, [sp, #20]
 800b202:	2b01      	cmp	r3, #1
 800b204:	4606      	mov	r6, r0
 800b206:	dd76      	ble.n	800b2f6 <_dtoa_r+0x8de>
 800b208:	2300      	movs	r3, #0
 800b20a:	9306      	str	r3, [sp, #24]
 800b20c:	6933      	ldr	r3, [r6, #16]
 800b20e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b212:	6918      	ldr	r0, [r3, #16]
 800b214:	f001 f88e 	bl	800c334 <__hi0bits>
 800b218:	f1c0 0020 	rsb	r0, r0, #32
 800b21c:	9b04      	ldr	r3, [sp, #16]
 800b21e:	4418      	add	r0, r3
 800b220:	f010 001f 	ands.w	r0, r0, #31
 800b224:	f000 8086 	beq.w	800b334 <_dtoa_r+0x91c>
 800b228:	f1c0 0320 	rsb	r3, r0, #32
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	dd7f      	ble.n	800b330 <_dtoa_r+0x918>
 800b230:	f1c0 001c 	rsb	r0, r0, #28
 800b234:	9b04      	ldr	r3, [sp, #16]
 800b236:	4403      	add	r3, r0
 800b238:	4480      	add	r8, r0
 800b23a:	4405      	add	r5, r0
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	f1b8 0f00 	cmp.w	r8, #0
 800b242:	dd05      	ble.n	800b250 <_dtoa_r+0x838>
 800b244:	4659      	mov	r1, fp
 800b246:	4642      	mov	r2, r8
 800b248:	4620      	mov	r0, r4
 800b24a:	f001 f9d9 	bl	800c600 <__lshift>
 800b24e:	4683      	mov	fp, r0
 800b250:	9b04      	ldr	r3, [sp, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	dd05      	ble.n	800b262 <_dtoa_r+0x84a>
 800b256:	4631      	mov	r1, r6
 800b258:	461a      	mov	r2, r3
 800b25a:	4620      	mov	r0, r4
 800b25c:	f001 f9d0 	bl	800c600 <__lshift>
 800b260:	4606      	mov	r6, r0
 800b262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b264:	2b00      	cmp	r3, #0
 800b266:	d069      	beq.n	800b33c <_dtoa_r+0x924>
 800b268:	4631      	mov	r1, r6
 800b26a:	4658      	mov	r0, fp
 800b26c:	f001 fa34 	bl	800c6d8 <__mcmp>
 800b270:	2800      	cmp	r0, #0
 800b272:	da63      	bge.n	800b33c <_dtoa_r+0x924>
 800b274:	2300      	movs	r3, #0
 800b276:	4659      	mov	r1, fp
 800b278:	220a      	movs	r2, #10
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 ffc6 	bl	800c20c <__multadd>
 800b280:	9b08      	ldr	r3, [sp, #32]
 800b282:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b286:	4683      	mov	fp, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 818f 	beq.w	800b5ac <_dtoa_r+0xb94>
 800b28e:	4639      	mov	r1, r7
 800b290:	2300      	movs	r3, #0
 800b292:	220a      	movs	r2, #10
 800b294:	4620      	mov	r0, r4
 800b296:	f000 ffb9 	bl	800c20c <__multadd>
 800b29a:	f1b9 0f00 	cmp.w	r9, #0
 800b29e:	4607      	mov	r7, r0
 800b2a0:	f300 808e 	bgt.w	800b3c0 <_dtoa_r+0x9a8>
 800b2a4:	9b05      	ldr	r3, [sp, #20]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	dc50      	bgt.n	800b34c <_dtoa_r+0x934>
 800b2aa:	e089      	b.n	800b3c0 <_dtoa_r+0x9a8>
 800b2ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2b2:	e75d      	b.n	800b170 <_dtoa_r+0x758>
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	1e5e      	subs	r6, r3, #1
 800b2b8:	9b06      	ldr	r3, [sp, #24]
 800b2ba:	42b3      	cmp	r3, r6
 800b2bc:	bfbf      	itttt	lt
 800b2be:	9b06      	ldrlt	r3, [sp, #24]
 800b2c0:	9606      	strlt	r6, [sp, #24]
 800b2c2:	1af2      	sublt	r2, r6, r3
 800b2c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b2c6:	bfb6      	itet	lt
 800b2c8:	189b      	addlt	r3, r3, r2
 800b2ca:	1b9e      	subge	r6, r3, r6
 800b2cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	bfb8      	it	lt
 800b2d2:	2600      	movlt	r6, #0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfb5      	itete	lt
 800b2d8:	eba8 0503 	sublt.w	r5, r8, r3
 800b2dc:	9b01      	ldrge	r3, [sp, #4]
 800b2de:	2300      	movlt	r3, #0
 800b2e0:	4645      	movge	r5, r8
 800b2e2:	e747      	b.n	800b174 <_dtoa_r+0x75c>
 800b2e4:	9e06      	ldr	r6, [sp, #24]
 800b2e6:	9f08      	ldr	r7, [sp, #32]
 800b2e8:	4645      	mov	r5, r8
 800b2ea:	e74c      	b.n	800b186 <_dtoa_r+0x76e>
 800b2ec:	9a06      	ldr	r2, [sp, #24]
 800b2ee:	e775      	b.n	800b1dc <_dtoa_r+0x7c4>
 800b2f0:	9b05      	ldr	r3, [sp, #20]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	dc18      	bgt.n	800b328 <_dtoa_r+0x910>
 800b2f6:	9b02      	ldr	r3, [sp, #8]
 800b2f8:	b9b3      	cbnz	r3, 800b328 <_dtoa_r+0x910>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b300:	b9a3      	cbnz	r3, 800b32c <_dtoa_r+0x914>
 800b302:	9b03      	ldr	r3, [sp, #12]
 800b304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b308:	0d1b      	lsrs	r3, r3, #20
 800b30a:	051b      	lsls	r3, r3, #20
 800b30c:	b12b      	cbz	r3, 800b31a <_dtoa_r+0x902>
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	3301      	adds	r3, #1
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	f108 0801 	add.w	r8, r8, #1
 800b318:	2301      	movs	r3, #1
 800b31a:	9306      	str	r3, [sp, #24]
 800b31c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f47f af74 	bne.w	800b20c <_dtoa_r+0x7f4>
 800b324:	2001      	movs	r0, #1
 800b326:	e779      	b.n	800b21c <_dtoa_r+0x804>
 800b328:	2300      	movs	r3, #0
 800b32a:	e7f6      	b.n	800b31a <_dtoa_r+0x902>
 800b32c:	9b02      	ldr	r3, [sp, #8]
 800b32e:	e7f4      	b.n	800b31a <_dtoa_r+0x902>
 800b330:	d085      	beq.n	800b23e <_dtoa_r+0x826>
 800b332:	4618      	mov	r0, r3
 800b334:	301c      	adds	r0, #28
 800b336:	e77d      	b.n	800b234 <_dtoa_r+0x81c>
 800b338:	40240000 	.word	0x40240000
 800b33c:	9b01      	ldr	r3, [sp, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	dc38      	bgt.n	800b3b4 <_dtoa_r+0x99c>
 800b342:	9b05      	ldr	r3, [sp, #20]
 800b344:	2b02      	cmp	r3, #2
 800b346:	dd35      	ble.n	800b3b4 <_dtoa_r+0x99c>
 800b348:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b34c:	f1b9 0f00 	cmp.w	r9, #0
 800b350:	d10d      	bne.n	800b36e <_dtoa_r+0x956>
 800b352:	4631      	mov	r1, r6
 800b354:	464b      	mov	r3, r9
 800b356:	2205      	movs	r2, #5
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 ff57 	bl	800c20c <__multadd>
 800b35e:	4601      	mov	r1, r0
 800b360:	4606      	mov	r6, r0
 800b362:	4658      	mov	r0, fp
 800b364:	f001 f9b8 	bl	800c6d8 <__mcmp>
 800b368:	2800      	cmp	r0, #0
 800b36a:	f73f adbd 	bgt.w	800aee8 <_dtoa_r+0x4d0>
 800b36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b370:	9d00      	ldr	r5, [sp, #0]
 800b372:	ea6f 0a03 	mvn.w	sl, r3
 800b376:	f04f 0800 	mov.w	r8, #0
 800b37a:	4631      	mov	r1, r6
 800b37c:	4620      	mov	r0, r4
 800b37e:	f000 ff23 	bl	800c1c8 <_Bfree>
 800b382:	2f00      	cmp	r7, #0
 800b384:	f43f aeb4 	beq.w	800b0f0 <_dtoa_r+0x6d8>
 800b388:	f1b8 0f00 	cmp.w	r8, #0
 800b38c:	d005      	beq.n	800b39a <_dtoa_r+0x982>
 800b38e:	45b8      	cmp	r8, r7
 800b390:	d003      	beq.n	800b39a <_dtoa_r+0x982>
 800b392:	4641      	mov	r1, r8
 800b394:	4620      	mov	r0, r4
 800b396:	f000 ff17 	bl	800c1c8 <_Bfree>
 800b39a:	4639      	mov	r1, r7
 800b39c:	4620      	mov	r0, r4
 800b39e:	f000 ff13 	bl	800c1c8 <_Bfree>
 800b3a2:	e6a5      	b.n	800b0f0 <_dtoa_r+0x6d8>
 800b3a4:	2600      	movs	r6, #0
 800b3a6:	4637      	mov	r7, r6
 800b3a8:	e7e1      	b.n	800b36e <_dtoa_r+0x956>
 800b3aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b3ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b3b0:	4637      	mov	r7, r6
 800b3b2:	e599      	b.n	800aee8 <_dtoa_r+0x4d0>
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 80fd 	beq.w	800b5ba <_dtoa_r+0xba2>
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	dd05      	ble.n	800b3d0 <_dtoa_r+0x9b8>
 800b3c4:	4639      	mov	r1, r7
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f001 f919 	bl	800c600 <__lshift>
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	9b06      	ldr	r3, [sp, #24]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d05c      	beq.n	800b490 <_dtoa_r+0xa78>
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 feb5 	bl	800c148 <_Balloc>
 800b3de:	4605      	mov	r5, r0
 800b3e0:	b928      	cbnz	r0, 800b3ee <_dtoa_r+0x9d6>
 800b3e2:	4b80      	ldr	r3, [pc, #512]	; (800b5e4 <_dtoa_r+0xbcc>)
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3ea:	f7ff bb2e 	b.w	800aa4a <_dtoa_r+0x32>
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	3202      	adds	r2, #2
 800b3f2:	0092      	lsls	r2, r2, #2
 800b3f4:	f107 010c 	add.w	r1, r7, #12
 800b3f8:	300c      	adds	r0, #12
 800b3fa:	f7fd fdd7 	bl	8008fac <memcpy>
 800b3fe:	2201      	movs	r2, #1
 800b400:	4629      	mov	r1, r5
 800b402:	4620      	mov	r0, r4
 800b404:	f001 f8fc 	bl	800c600 <__lshift>
 800b408:	9b00      	ldr	r3, [sp, #0]
 800b40a:	3301      	adds	r3, #1
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	9b00      	ldr	r3, [sp, #0]
 800b410:	444b      	add	r3, r9
 800b412:	9307      	str	r3, [sp, #28]
 800b414:	9b02      	ldr	r3, [sp, #8]
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	46b8      	mov	r8, r7
 800b41c:	9306      	str	r3, [sp, #24]
 800b41e:	4607      	mov	r7, r0
 800b420:	9b01      	ldr	r3, [sp, #4]
 800b422:	4631      	mov	r1, r6
 800b424:	3b01      	subs	r3, #1
 800b426:	4658      	mov	r0, fp
 800b428:	9302      	str	r3, [sp, #8]
 800b42a:	f7ff fa69 	bl	800a900 <quorem>
 800b42e:	4603      	mov	r3, r0
 800b430:	3330      	adds	r3, #48	; 0x30
 800b432:	9004      	str	r0, [sp, #16]
 800b434:	4641      	mov	r1, r8
 800b436:	4658      	mov	r0, fp
 800b438:	9308      	str	r3, [sp, #32]
 800b43a:	f001 f94d 	bl	800c6d8 <__mcmp>
 800b43e:	463a      	mov	r2, r7
 800b440:	4681      	mov	r9, r0
 800b442:	4631      	mov	r1, r6
 800b444:	4620      	mov	r0, r4
 800b446:	f001 f963 	bl	800c710 <__mdiff>
 800b44a:	68c2      	ldr	r2, [r0, #12]
 800b44c:	9b08      	ldr	r3, [sp, #32]
 800b44e:	4605      	mov	r5, r0
 800b450:	bb02      	cbnz	r2, 800b494 <_dtoa_r+0xa7c>
 800b452:	4601      	mov	r1, r0
 800b454:	4658      	mov	r0, fp
 800b456:	f001 f93f 	bl	800c6d8 <__mcmp>
 800b45a:	9b08      	ldr	r3, [sp, #32]
 800b45c:	4602      	mov	r2, r0
 800b45e:	4629      	mov	r1, r5
 800b460:	4620      	mov	r0, r4
 800b462:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b466:	f000 feaf 	bl	800c1c8 <_Bfree>
 800b46a:	9b05      	ldr	r3, [sp, #20]
 800b46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b46e:	9d01      	ldr	r5, [sp, #4]
 800b470:	ea43 0102 	orr.w	r1, r3, r2
 800b474:	9b06      	ldr	r3, [sp, #24]
 800b476:	430b      	orrs	r3, r1
 800b478:	9b08      	ldr	r3, [sp, #32]
 800b47a:	d10d      	bne.n	800b498 <_dtoa_r+0xa80>
 800b47c:	2b39      	cmp	r3, #57	; 0x39
 800b47e:	d029      	beq.n	800b4d4 <_dtoa_r+0xabc>
 800b480:	f1b9 0f00 	cmp.w	r9, #0
 800b484:	dd01      	ble.n	800b48a <_dtoa_r+0xa72>
 800b486:	9b04      	ldr	r3, [sp, #16]
 800b488:	3331      	adds	r3, #49	; 0x31
 800b48a:	9a02      	ldr	r2, [sp, #8]
 800b48c:	7013      	strb	r3, [r2, #0]
 800b48e:	e774      	b.n	800b37a <_dtoa_r+0x962>
 800b490:	4638      	mov	r0, r7
 800b492:	e7b9      	b.n	800b408 <_dtoa_r+0x9f0>
 800b494:	2201      	movs	r2, #1
 800b496:	e7e2      	b.n	800b45e <_dtoa_r+0xa46>
 800b498:	f1b9 0f00 	cmp.w	r9, #0
 800b49c:	db06      	blt.n	800b4ac <_dtoa_r+0xa94>
 800b49e:	9905      	ldr	r1, [sp, #20]
 800b4a0:	ea41 0909 	orr.w	r9, r1, r9
 800b4a4:	9906      	ldr	r1, [sp, #24]
 800b4a6:	ea59 0101 	orrs.w	r1, r9, r1
 800b4aa:	d120      	bne.n	800b4ee <_dtoa_r+0xad6>
 800b4ac:	2a00      	cmp	r2, #0
 800b4ae:	ddec      	ble.n	800b48a <_dtoa_r+0xa72>
 800b4b0:	4659      	mov	r1, fp
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	f001 f8a2 	bl	800c600 <__lshift>
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4683      	mov	fp, r0
 800b4c0:	f001 f90a 	bl	800c6d8 <__mcmp>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	9b01      	ldr	r3, [sp, #4]
 800b4c8:	dc02      	bgt.n	800b4d0 <_dtoa_r+0xab8>
 800b4ca:	d1de      	bne.n	800b48a <_dtoa_r+0xa72>
 800b4cc:	07da      	lsls	r2, r3, #31
 800b4ce:	d5dc      	bpl.n	800b48a <_dtoa_r+0xa72>
 800b4d0:	2b39      	cmp	r3, #57	; 0x39
 800b4d2:	d1d8      	bne.n	800b486 <_dtoa_r+0xa6e>
 800b4d4:	9a02      	ldr	r2, [sp, #8]
 800b4d6:	2339      	movs	r3, #57	; 0x39
 800b4d8:	7013      	strb	r3, [r2, #0]
 800b4da:	462b      	mov	r3, r5
 800b4dc:	461d      	mov	r5, r3
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4e4:	2a39      	cmp	r2, #57	; 0x39
 800b4e6:	d050      	beq.n	800b58a <_dtoa_r+0xb72>
 800b4e8:	3201      	adds	r2, #1
 800b4ea:	701a      	strb	r2, [r3, #0]
 800b4ec:	e745      	b.n	800b37a <_dtoa_r+0x962>
 800b4ee:	2a00      	cmp	r2, #0
 800b4f0:	dd03      	ble.n	800b4fa <_dtoa_r+0xae2>
 800b4f2:	2b39      	cmp	r3, #57	; 0x39
 800b4f4:	d0ee      	beq.n	800b4d4 <_dtoa_r+0xabc>
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	e7c7      	b.n	800b48a <_dtoa_r+0xa72>
 800b4fa:	9a01      	ldr	r2, [sp, #4]
 800b4fc:	9907      	ldr	r1, [sp, #28]
 800b4fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b502:	428a      	cmp	r2, r1
 800b504:	d02a      	beq.n	800b55c <_dtoa_r+0xb44>
 800b506:	4659      	mov	r1, fp
 800b508:	2300      	movs	r3, #0
 800b50a:	220a      	movs	r2, #10
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 fe7d 	bl	800c20c <__multadd>
 800b512:	45b8      	cmp	r8, r7
 800b514:	4683      	mov	fp, r0
 800b516:	f04f 0300 	mov.w	r3, #0
 800b51a:	f04f 020a 	mov.w	r2, #10
 800b51e:	4641      	mov	r1, r8
 800b520:	4620      	mov	r0, r4
 800b522:	d107      	bne.n	800b534 <_dtoa_r+0xb1c>
 800b524:	f000 fe72 	bl	800c20c <__multadd>
 800b528:	4680      	mov	r8, r0
 800b52a:	4607      	mov	r7, r0
 800b52c:	9b01      	ldr	r3, [sp, #4]
 800b52e:	3301      	adds	r3, #1
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	e775      	b.n	800b420 <_dtoa_r+0xa08>
 800b534:	f000 fe6a 	bl	800c20c <__multadd>
 800b538:	4639      	mov	r1, r7
 800b53a:	4680      	mov	r8, r0
 800b53c:	2300      	movs	r3, #0
 800b53e:	220a      	movs	r2, #10
 800b540:	4620      	mov	r0, r4
 800b542:	f000 fe63 	bl	800c20c <__multadd>
 800b546:	4607      	mov	r7, r0
 800b548:	e7f0      	b.n	800b52c <_dtoa_r+0xb14>
 800b54a:	f1b9 0f00 	cmp.w	r9, #0
 800b54e:	9a00      	ldr	r2, [sp, #0]
 800b550:	bfcc      	ite	gt
 800b552:	464d      	movgt	r5, r9
 800b554:	2501      	movle	r5, #1
 800b556:	4415      	add	r5, r2
 800b558:	f04f 0800 	mov.w	r8, #0
 800b55c:	4659      	mov	r1, fp
 800b55e:	2201      	movs	r2, #1
 800b560:	4620      	mov	r0, r4
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	f001 f84c 	bl	800c600 <__lshift>
 800b568:	4631      	mov	r1, r6
 800b56a:	4683      	mov	fp, r0
 800b56c:	f001 f8b4 	bl	800c6d8 <__mcmp>
 800b570:	2800      	cmp	r0, #0
 800b572:	dcb2      	bgt.n	800b4da <_dtoa_r+0xac2>
 800b574:	d102      	bne.n	800b57c <_dtoa_r+0xb64>
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	07db      	lsls	r3, r3, #31
 800b57a:	d4ae      	bmi.n	800b4da <_dtoa_r+0xac2>
 800b57c:	462b      	mov	r3, r5
 800b57e:	461d      	mov	r5, r3
 800b580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b584:	2a30      	cmp	r2, #48	; 0x30
 800b586:	d0fa      	beq.n	800b57e <_dtoa_r+0xb66>
 800b588:	e6f7      	b.n	800b37a <_dtoa_r+0x962>
 800b58a:	9a00      	ldr	r2, [sp, #0]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d1a5      	bne.n	800b4dc <_dtoa_r+0xac4>
 800b590:	f10a 0a01 	add.w	sl, sl, #1
 800b594:	2331      	movs	r3, #49	; 0x31
 800b596:	e779      	b.n	800b48c <_dtoa_r+0xa74>
 800b598:	4b13      	ldr	r3, [pc, #76]	; (800b5e8 <_dtoa_r+0xbd0>)
 800b59a:	f7ff baaf 	b.w	800aafc <_dtoa_r+0xe4>
 800b59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f47f aa86 	bne.w	800aab2 <_dtoa_r+0x9a>
 800b5a6:	4b11      	ldr	r3, [pc, #68]	; (800b5ec <_dtoa_r+0xbd4>)
 800b5a8:	f7ff baa8 	b.w	800aafc <_dtoa_r+0xe4>
 800b5ac:	f1b9 0f00 	cmp.w	r9, #0
 800b5b0:	dc03      	bgt.n	800b5ba <_dtoa_r+0xba2>
 800b5b2:	9b05      	ldr	r3, [sp, #20]
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	f73f aec9 	bgt.w	800b34c <_dtoa_r+0x934>
 800b5ba:	9d00      	ldr	r5, [sp, #0]
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4658      	mov	r0, fp
 800b5c0:	f7ff f99e 	bl	800a900 <quorem>
 800b5c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b5c8:	f805 3b01 	strb.w	r3, [r5], #1
 800b5cc:	9a00      	ldr	r2, [sp, #0]
 800b5ce:	1aaa      	subs	r2, r5, r2
 800b5d0:	4591      	cmp	r9, r2
 800b5d2:	ddba      	ble.n	800b54a <_dtoa_r+0xb32>
 800b5d4:	4659      	mov	r1, fp
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	220a      	movs	r2, #10
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f000 fe16 	bl	800c20c <__multadd>
 800b5e0:	4683      	mov	fp, r0
 800b5e2:	e7eb      	b.n	800b5bc <_dtoa_r+0xba4>
 800b5e4:	0800ec54 	.word	0x0800ec54
 800b5e8:	0800ea58 	.word	0x0800ea58
 800b5ec:	0800ebd1 	.word	0x0800ebd1

0800b5f0 <__sflush_r>:
 800b5f0:	898a      	ldrh	r2, [r1, #12]
 800b5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	0710      	lsls	r0, r2, #28
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	d458      	bmi.n	800b6b0 <__sflush_r+0xc0>
 800b5fe:	684b      	ldr	r3, [r1, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	dc05      	bgt.n	800b610 <__sflush_r+0x20>
 800b604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b606:	2b00      	cmp	r3, #0
 800b608:	dc02      	bgt.n	800b610 <__sflush_r+0x20>
 800b60a:	2000      	movs	r0, #0
 800b60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b612:	2e00      	cmp	r6, #0
 800b614:	d0f9      	beq.n	800b60a <__sflush_r+0x1a>
 800b616:	2300      	movs	r3, #0
 800b618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b61c:	682f      	ldr	r7, [r5, #0]
 800b61e:	602b      	str	r3, [r5, #0]
 800b620:	d032      	beq.n	800b688 <__sflush_r+0x98>
 800b622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	075a      	lsls	r2, r3, #29
 800b628:	d505      	bpl.n	800b636 <__sflush_r+0x46>
 800b62a:	6863      	ldr	r3, [r4, #4]
 800b62c:	1ac0      	subs	r0, r0, r3
 800b62e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b630:	b10b      	cbz	r3, 800b636 <__sflush_r+0x46>
 800b632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b634:	1ac0      	subs	r0, r0, r3
 800b636:	2300      	movs	r3, #0
 800b638:	4602      	mov	r2, r0
 800b63a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b63c:	6a21      	ldr	r1, [r4, #32]
 800b63e:	4628      	mov	r0, r5
 800b640:	47b0      	blx	r6
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	d106      	bne.n	800b656 <__sflush_r+0x66>
 800b648:	6829      	ldr	r1, [r5, #0]
 800b64a:	291d      	cmp	r1, #29
 800b64c:	d82c      	bhi.n	800b6a8 <__sflush_r+0xb8>
 800b64e:	4a2a      	ldr	r2, [pc, #168]	; (800b6f8 <__sflush_r+0x108>)
 800b650:	40ca      	lsrs	r2, r1
 800b652:	07d6      	lsls	r6, r2, #31
 800b654:	d528      	bpl.n	800b6a8 <__sflush_r+0xb8>
 800b656:	2200      	movs	r2, #0
 800b658:	6062      	str	r2, [r4, #4]
 800b65a:	04d9      	lsls	r1, r3, #19
 800b65c:	6922      	ldr	r2, [r4, #16]
 800b65e:	6022      	str	r2, [r4, #0]
 800b660:	d504      	bpl.n	800b66c <__sflush_r+0x7c>
 800b662:	1c42      	adds	r2, r0, #1
 800b664:	d101      	bne.n	800b66a <__sflush_r+0x7a>
 800b666:	682b      	ldr	r3, [r5, #0]
 800b668:	b903      	cbnz	r3, 800b66c <__sflush_r+0x7c>
 800b66a:	6560      	str	r0, [r4, #84]	; 0x54
 800b66c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b66e:	602f      	str	r7, [r5, #0]
 800b670:	2900      	cmp	r1, #0
 800b672:	d0ca      	beq.n	800b60a <__sflush_r+0x1a>
 800b674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b678:	4299      	cmp	r1, r3
 800b67a:	d002      	beq.n	800b682 <__sflush_r+0x92>
 800b67c:	4628      	mov	r0, r5
 800b67e:	f001 fa2d 	bl	800cadc <_free_r>
 800b682:	2000      	movs	r0, #0
 800b684:	6360      	str	r0, [r4, #52]	; 0x34
 800b686:	e7c1      	b.n	800b60c <__sflush_r+0x1c>
 800b688:	6a21      	ldr	r1, [r4, #32]
 800b68a:	2301      	movs	r3, #1
 800b68c:	4628      	mov	r0, r5
 800b68e:	47b0      	blx	r6
 800b690:	1c41      	adds	r1, r0, #1
 800b692:	d1c7      	bne.n	800b624 <__sflush_r+0x34>
 800b694:	682b      	ldr	r3, [r5, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0c4      	beq.n	800b624 <__sflush_r+0x34>
 800b69a:	2b1d      	cmp	r3, #29
 800b69c:	d001      	beq.n	800b6a2 <__sflush_r+0xb2>
 800b69e:	2b16      	cmp	r3, #22
 800b6a0:	d101      	bne.n	800b6a6 <__sflush_r+0xb6>
 800b6a2:	602f      	str	r7, [r5, #0]
 800b6a4:	e7b1      	b.n	800b60a <__sflush_r+0x1a>
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ac:	81a3      	strh	r3, [r4, #12]
 800b6ae:	e7ad      	b.n	800b60c <__sflush_r+0x1c>
 800b6b0:	690f      	ldr	r7, [r1, #16]
 800b6b2:	2f00      	cmp	r7, #0
 800b6b4:	d0a9      	beq.n	800b60a <__sflush_r+0x1a>
 800b6b6:	0793      	lsls	r3, r2, #30
 800b6b8:	680e      	ldr	r6, [r1, #0]
 800b6ba:	bf08      	it	eq
 800b6bc:	694b      	ldreq	r3, [r1, #20]
 800b6be:	600f      	str	r7, [r1, #0]
 800b6c0:	bf18      	it	ne
 800b6c2:	2300      	movne	r3, #0
 800b6c4:	eba6 0807 	sub.w	r8, r6, r7
 800b6c8:	608b      	str	r3, [r1, #8]
 800b6ca:	f1b8 0f00 	cmp.w	r8, #0
 800b6ce:	dd9c      	ble.n	800b60a <__sflush_r+0x1a>
 800b6d0:	6a21      	ldr	r1, [r4, #32]
 800b6d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6d4:	4643      	mov	r3, r8
 800b6d6:	463a      	mov	r2, r7
 800b6d8:	4628      	mov	r0, r5
 800b6da:	47b0      	blx	r6
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	dc06      	bgt.n	800b6ee <__sflush_r+0xfe>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ec:	e78e      	b.n	800b60c <__sflush_r+0x1c>
 800b6ee:	4407      	add	r7, r0
 800b6f0:	eba8 0800 	sub.w	r8, r8, r0
 800b6f4:	e7e9      	b.n	800b6ca <__sflush_r+0xda>
 800b6f6:	bf00      	nop
 800b6f8:	20400001 	.word	0x20400001

0800b6fc <_fflush_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	690b      	ldr	r3, [r1, #16]
 800b700:	4605      	mov	r5, r0
 800b702:	460c      	mov	r4, r1
 800b704:	b913      	cbnz	r3, 800b70c <_fflush_r+0x10>
 800b706:	2500      	movs	r5, #0
 800b708:	4628      	mov	r0, r5
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	b118      	cbz	r0, 800b716 <_fflush_r+0x1a>
 800b70e:	6983      	ldr	r3, [r0, #24]
 800b710:	b90b      	cbnz	r3, 800b716 <_fflush_r+0x1a>
 800b712:	f000 f887 	bl	800b824 <__sinit>
 800b716:	4b14      	ldr	r3, [pc, #80]	; (800b768 <_fflush_r+0x6c>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	d11b      	bne.n	800b754 <_fflush_r+0x58>
 800b71c:	686c      	ldr	r4, [r5, #4]
 800b71e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0ef      	beq.n	800b706 <_fflush_r+0xa>
 800b726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b728:	07d0      	lsls	r0, r2, #31
 800b72a:	d404      	bmi.n	800b736 <_fflush_r+0x3a>
 800b72c:	0599      	lsls	r1, r3, #22
 800b72e:	d402      	bmi.n	800b736 <_fflush_r+0x3a>
 800b730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b732:	f000 fc88 	bl	800c046 <__retarget_lock_acquire_recursive>
 800b736:	4628      	mov	r0, r5
 800b738:	4621      	mov	r1, r4
 800b73a:	f7ff ff59 	bl	800b5f0 <__sflush_r>
 800b73e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b740:	07da      	lsls	r2, r3, #31
 800b742:	4605      	mov	r5, r0
 800b744:	d4e0      	bmi.n	800b708 <_fflush_r+0xc>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	059b      	lsls	r3, r3, #22
 800b74a:	d4dd      	bmi.n	800b708 <_fflush_r+0xc>
 800b74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74e:	f000 fc7b 	bl	800c048 <__retarget_lock_release_recursive>
 800b752:	e7d9      	b.n	800b708 <_fflush_r+0xc>
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <_fflush_r+0x70>)
 800b756:	429c      	cmp	r4, r3
 800b758:	d101      	bne.n	800b75e <_fflush_r+0x62>
 800b75a:	68ac      	ldr	r4, [r5, #8]
 800b75c:	e7df      	b.n	800b71e <_fflush_r+0x22>
 800b75e:	4b04      	ldr	r3, [pc, #16]	; (800b770 <_fflush_r+0x74>)
 800b760:	429c      	cmp	r4, r3
 800b762:	bf08      	it	eq
 800b764:	68ec      	ldreq	r4, [r5, #12]
 800b766:	e7da      	b.n	800b71e <_fflush_r+0x22>
 800b768:	0800ec88 	.word	0x0800ec88
 800b76c:	0800eca8 	.word	0x0800eca8
 800b770:	0800ec68 	.word	0x0800ec68

0800b774 <std>:
 800b774:	2300      	movs	r3, #0
 800b776:	b510      	push	{r4, lr}
 800b778:	4604      	mov	r4, r0
 800b77a:	e9c0 3300 	strd	r3, r3, [r0]
 800b77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b782:	6083      	str	r3, [r0, #8]
 800b784:	8181      	strh	r1, [r0, #12]
 800b786:	6643      	str	r3, [r0, #100]	; 0x64
 800b788:	81c2      	strh	r2, [r0, #14]
 800b78a:	6183      	str	r3, [r0, #24]
 800b78c:	4619      	mov	r1, r3
 800b78e:	2208      	movs	r2, #8
 800b790:	305c      	adds	r0, #92	; 0x5c
 800b792:	f7fd fc33 	bl	8008ffc <memset>
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <std+0x38>)
 800b798:	6263      	str	r3, [r4, #36]	; 0x24
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <std+0x3c>)
 800b79c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b79e:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <std+0x40>)
 800b7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7a2:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <std+0x44>)
 800b7a4:	6224      	str	r4, [r4, #32]
 800b7a6:	6323      	str	r3, [r4, #48]	; 0x30
 800b7a8:	bd10      	pop	{r4, pc}
 800b7aa:	bf00      	nop
 800b7ac:	0800cf19 	.word	0x0800cf19
 800b7b0:	0800cf3b 	.word	0x0800cf3b
 800b7b4:	0800cf73 	.word	0x0800cf73
 800b7b8:	0800cf97 	.word	0x0800cf97

0800b7bc <_cleanup_r>:
 800b7bc:	4901      	ldr	r1, [pc, #4]	; (800b7c4 <_cleanup_r+0x8>)
 800b7be:	f000 b8af 	b.w	800b920 <_fwalk_reent>
 800b7c2:	bf00      	nop
 800b7c4:	0800b6fd 	.word	0x0800b6fd

0800b7c8 <__sfmoreglue>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	1e4a      	subs	r2, r1, #1
 800b7cc:	2568      	movs	r5, #104	; 0x68
 800b7ce:	4355      	muls	r5, r2
 800b7d0:	460e      	mov	r6, r1
 800b7d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7d6:	f001 f9d1 	bl	800cb7c <_malloc_r>
 800b7da:	4604      	mov	r4, r0
 800b7dc:	b140      	cbz	r0, 800b7f0 <__sfmoreglue+0x28>
 800b7de:	2100      	movs	r1, #0
 800b7e0:	e9c0 1600 	strd	r1, r6, [r0]
 800b7e4:	300c      	adds	r0, #12
 800b7e6:	60a0      	str	r0, [r4, #8]
 800b7e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7ec:	f7fd fc06 	bl	8008ffc <memset>
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}

0800b7f4 <__sfp_lock_acquire>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__sfp_lock_acquire+0x8>)
 800b7f6:	f000 bc26 	b.w	800c046 <__retarget_lock_acquire_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20009598 	.word	0x20009598

0800b800 <__sfp_lock_release>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__sfp_lock_release+0x8>)
 800b802:	f000 bc21 	b.w	800c048 <__retarget_lock_release_recursive>
 800b806:	bf00      	nop
 800b808:	20009598 	.word	0x20009598

0800b80c <__sinit_lock_acquire>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__sinit_lock_acquire+0x8>)
 800b80e:	f000 bc1a 	b.w	800c046 <__retarget_lock_acquire_recursive>
 800b812:	bf00      	nop
 800b814:	20009593 	.word	0x20009593

0800b818 <__sinit_lock_release>:
 800b818:	4801      	ldr	r0, [pc, #4]	; (800b820 <__sinit_lock_release+0x8>)
 800b81a:	f000 bc15 	b.w	800c048 <__retarget_lock_release_recursive>
 800b81e:	bf00      	nop
 800b820:	20009593 	.word	0x20009593

0800b824 <__sinit>:
 800b824:	b510      	push	{r4, lr}
 800b826:	4604      	mov	r4, r0
 800b828:	f7ff fff0 	bl	800b80c <__sinit_lock_acquire>
 800b82c:	69a3      	ldr	r3, [r4, #24]
 800b82e:	b11b      	cbz	r3, 800b838 <__sinit+0x14>
 800b830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b834:	f7ff bff0 	b.w	800b818 <__sinit_lock_release>
 800b838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b83c:	6523      	str	r3, [r4, #80]	; 0x50
 800b83e:	4b13      	ldr	r3, [pc, #76]	; (800b88c <__sinit+0x68>)
 800b840:	4a13      	ldr	r2, [pc, #76]	; (800b890 <__sinit+0x6c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	62a2      	str	r2, [r4, #40]	; 0x28
 800b846:	42a3      	cmp	r3, r4
 800b848:	bf04      	itt	eq
 800b84a:	2301      	moveq	r3, #1
 800b84c:	61a3      	streq	r3, [r4, #24]
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 f820 	bl	800b894 <__sfp>
 800b854:	6060      	str	r0, [r4, #4]
 800b856:	4620      	mov	r0, r4
 800b858:	f000 f81c 	bl	800b894 <__sfp>
 800b85c:	60a0      	str	r0, [r4, #8]
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 f818 	bl	800b894 <__sfp>
 800b864:	2200      	movs	r2, #0
 800b866:	60e0      	str	r0, [r4, #12]
 800b868:	2104      	movs	r1, #4
 800b86a:	6860      	ldr	r0, [r4, #4]
 800b86c:	f7ff ff82 	bl	800b774 <std>
 800b870:	68a0      	ldr	r0, [r4, #8]
 800b872:	2201      	movs	r2, #1
 800b874:	2109      	movs	r1, #9
 800b876:	f7ff ff7d 	bl	800b774 <std>
 800b87a:	68e0      	ldr	r0, [r4, #12]
 800b87c:	2202      	movs	r2, #2
 800b87e:	2112      	movs	r1, #18
 800b880:	f7ff ff78 	bl	800b774 <std>
 800b884:	2301      	movs	r3, #1
 800b886:	61a3      	str	r3, [r4, #24]
 800b888:	e7d2      	b.n	800b830 <__sinit+0xc>
 800b88a:	bf00      	nop
 800b88c:	0800ea44 	.word	0x0800ea44
 800b890:	0800b7bd 	.word	0x0800b7bd

0800b894 <__sfp>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	4607      	mov	r7, r0
 800b898:	f7ff ffac 	bl	800b7f4 <__sfp_lock_acquire>
 800b89c:	4b1e      	ldr	r3, [pc, #120]	; (800b918 <__sfp+0x84>)
 800b89e:	681e      	ldr	r6, [r3, #0]
 800b8a0:	69b3      	ldr	r3, [r6, #24]
 800b8a2:	b913      	cbnz	r3, 800b8aa <__sfp+0x16>
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7ff ffbd 	bl	800b824 <__sinit>
 800b8aa:	3648      	adds	r6, #72	; 0x48
 800b8ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	d503      	bpl.n	800b8bc <__sfp+0x28>
 800b8b4:	6833      	ldr	r3, [r6, #0]
 800b8b6:	b30b      	cbz	r3, 800b8fc <__sfp+0x68>
 800b8b8:	6836      	ldr	r6, [r6, #0]
 800b8ba:	e7f7      	b.n	800b8ac <__sfp+0x18>
 800b8bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8c0:	b9d5      	cbnz	r5, 800b8f8 <__sfp+0x64>
 800b8c2:	4b16      	ldr	r3, [pc, #88]	; (800b91c <__sfp+0x88>)
 800b8c4:	60e3      	str	r3, [r4, #12]
 800b8c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8ca:	6665      	str	r5, [r4, #100]	; 0x64
 800b8cc:	f000 fbba 	bl	800c044 <__retarget_lock_init_recursive>
 800b8d0:	f7ff ff96 	bl	800b800 <__sfp_lock_release>
 800b8d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8dc:	6025      	str	r5, [r4, #0]
 800b8de:	61a5      	str	r5, [r4, #24]
 800b8e0:	2208      	movs	r2, #8
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8e8:	f7fd fb88 	bl	8008ffc <memset>
 800b8ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8f8:	3468      	adds	r4, #104	; 0x68
 800b8fa:	e7d9      	b.n	800b8b0 <__sfp+0x1c>
 800b8fc:	2104      	movs	r1, #4
 800b8fe:	4638      	mov	r0, r7
 800b900:	f7ff ff62 	bl	800b7c8 <__sfmoreglue>
 800b904:	4604      	mov	r4, r0
 800b906:	6030      	str	r0, [r6, #0]
 800b908:	2800      	cmp	r0, #0
 800b90a:	d1d5      	bne.n	800b8b8 <__sfp+0x24>
 800b90c:	f7ff ff78 	bl	800b800 <__sfp_lock_release>
 800b910:	230c      	movs	r3, #12
 800b912:	603b      	str	r3, [r7, #0]
 800b914:	e7ee      	b.n	800b8f4 <__sfp+0x60>
 800b916:	bf00      	nop
 800b918:	0800ea44 	.word	0x0800ea44
 800b91c:	ffff0001 	.word	0xffff0001

0800b920 <_fwalk_reent>:
 800b920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b924:	4606      	mov	r6, r0
 800b926:	4688      	mov	r8, r1
 800b928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b92c:	2700      	movs	r7, #0
 800b92e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b932:	f1b9 0901 	subs.w	r9, r9, #1
 800b936:	d505      	bpl.n	800b944 <_fwalk_reent+0x24>
 800b938:	6824      	ldr	r4, [r4, #0]
 800b93a:	2c00      	cmp	r4, #0
 800b93c:	d1f7      	bne.n	800b92e <_fwalk_reent+0xe>
 800b93e:	4638      	mov	r0, r7
 800b940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b944:	89ab      	ldrh	r3, [r5, #12]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d907      	bls.n	800b95a <_fwalk_reent+0x3a>
 800b94a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b94e:	3301      	adds	r3, #1
 800b950:	d003      	beq.n	800b95a <_fwalk_reent+0x3a>
 800b952:	4629      	mov	r1, r5
 800b954:	4630      	mov	r0, r6
 800b956:	47c0      	blx	r8
 800b958:	4307      	orrs	r7, r0
 800b95a:	3568      	adds	r5, #104	; 0x68
 800b95c:	e7e9      	b.n	800b932 <_fwalk_reent+0x12>

0800b95e <rshift>:
 800b95e:	6903      	ldr	r3, [r0, #16]
 800b960:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b968:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b96c:	f100 0414 	add.w	r4, r0, #20
 800b970:	dd45      	ble.n	800b9fe <rshift+0xa0>
 800b972:	f011 011f 	ands.w	r1, r1, #31
 800b976:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b97a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b97e:	d10c      	bne.n	800b99a <rshift+0x3c>
 800b980:	f100 0710 	add.w	r7, r0, #16
 800b984:	4629      	mov	r1, r5
 800b986:	42b1      	cmp	r1, r6
 800b988:	d334      	bcc.n	800b9f4 <rshift+0x96>
 800b98a:	1a9b      	subs	r3, r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	1eea      	subs	r2, r5, #3
 800b990:	4296      	cmp	r6, r2
 800b992:	bf38      	it	cc
 800b994:	2300      	movcc	r3, #0
 800b996:	4423      	add	r3, r4
 800b998:	e015      	b.n	800b9c6 <rshift+0x68>
 800b99a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b99e:	f1c1 0820 	rsb	r8, r1, #32
 800b9a2:	40cf      	lsrs	r7, r1
 800b9a4:	f105 0e04 	add.w	lr, r5, #4
 800b9a8:	46a1      	mov	r9, r4
 800b9aa:	4576      	cmp	r6, lr
 800b9ac:	46f4      	mov	ip, lr
 800b9ae:	d815      	bhi.n	800b9dc <rshift+0x7e>
 800b9b0:	1a9b      	subs	r3, r3, r2
 800b9b2:	009a      	lsls	r2, r3, #2
 800b9b4:	3a04      	subs	r2, #4
 800b9b6:	3501      	adds	r5, #1
 800b9b8:	42ae      	cmp	r6, r5
 800b9ba:	bf38      	it	cc
 800b9bc:	2200      	movcc	r2, #0
 800b9be:	18a3      	adds	r3, r4, r2
 800b9c0:	50a7      	str	r7, [r4, r2]
 800b9c2:	b107      	cbz	r7, 800b9c6 <rshift+0x68>
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	1b1a      	subs	r2, r3, r4
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b9ce:	bf08      	it	eq
 800b9d0:	2300      	moveq	r3, #0
 800b9d2:	6102      	str	r2, [r0, #16]
 800b9d4:	bf08      	it	eq
 800b9d6:	6143      	streq	r3, [r0, #20]
 800b9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9dc:	f8dc c000 	ldr.w	ip, [ip]
 800b9e0:	fa0c fc08 	lsl.w	ip, ip, r8
 800b9e4:	ea4c 0707 	orr.w	r7, ip, r7
 800b9e8:	f849 7b04 	str.w	r7, [r9], #4
 800b9ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9f0:	40cf      	lsrs	r7, r1
 800b9f2:	e7da      	b.n	800b9aa <rshift+0x4c>
 800b9f4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b9f8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b9fc:	e7c3      	b.n	800b986 <rshift+0x28>
 800b9fe:	4623      	mov	r3, r4
 800ba00:	e7e1      	b.n	800b9c6 <rshift+0x68>

0800ba02 <__hexdig_fun>:
 800ba02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba06:	2b09      	cmp	r3, #9
 800ba08:	d802      	bhi.n	800ba10 <__hexdig_fun+0xe>
 800ba0a:	3820      	subs	r0, #32
 800ba0c:	b2c0      	uxtb	r0, r0
 800ba0e:	4770      	bx	lr
 800ba10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba14:	2b05      	cmp	r3, #5
 800ba16:	d801      	bhi.n	800ba1c <__hexdig_fun+0x1a>
 800ba18:	3847      	subs	r0, #71	; 0x47
 800ba1a:	e7f7      	b.n	800ba0c <__hexdig_fun+0xa>
 800ba1c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba20:	2b05      	cmp	r3, #5
 800ba22:	d801      	bhi.n	800ba28 <__hexdig_fun+0x26>
 800ba24:	3827      	subs	r0, #39	; 0x27
 800ba26:	e7f1      	b.n	800ba0c <__hexdig_fun+0xa>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	4770      	bx	lr

0800ba2c <__gethex>:
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	ed2d 8b02 	vpush	{d8}
 800ba34:	b089      	sub	sp, #36	; 0x24
 800ba36:	ee08 0a10 	vmov	s16, r0
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	4bbc      	ldr	r3, [pc, #752]	; (800bd30 <__gethex+0x304>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	4618      	mov	r0, r3
 800ba44:	468b      	mov	fp, r1
 800ba46:	4690      	mov	r8, r2
 800ba48:	f7f4 fbea 	bl	8000220 <strlen>
 800ba4c:	9b01      	ldr	r3, [sp, #4]
 800ba4e:	f8db 2000 	ldr.w	r2, [fp]
 800ba52:	4403      	add	r3, r0
 800ba54:	4682      	mov	sl, r0
 800ba56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ba5a:	9305      	str	r3, [sp, #20]
 800ba5c:	1c93      	adds	r3, r2, #2
 800ba5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba66:	32fe      	adds	r2, #254	; 0xfe
 800ba68:	18d1      	adds	r1, r2, r3
 800ba6a:	461f      	mov	r7, r3
 800ba6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba70:	9100      	str	r1, [sp, #0]
 800ba72:	2830      	cmp	r0, #48	; 0x30
 800ba74:	d0f8      	beq.n	800ba68 <__gethex+0x3c>
 800ba76:	f7ff ffc4 	bl	800ba02 <__hexdig_fun>
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d13a      	bne.n	800baf6 <__gethex+0xca>
 800ba80:	9901      	ldr	r1, [sp, #4]
 800ba82:	4652      	mov	r2, sl
 800ba84:	4638      	mov	r0, r7
 800ba86:	f001 fa8a 	bl	800cf9e <strncmp>
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d168      	bne.n	800bb62 <__gethex+0x136>
 800ba90:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ba94:	eb07 060a 	add.w	r6, r7, sl
 800ba98:	f7ff ffb3 	bl	800ba02 <__hexdig_fun>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d062      	beq.n	800bb66 <__gethex+0x13a>
 800baa0:	4633      	mov	r3, r6
 800baa2:	7818      	ldrb	r0, [r3, #0]
 800baa4:	2830      	cmp	r0, #48	; 0x30
 800baa6:	461f      	mov	r7, r3
 800baa8:	f103 0301 	add.w	r3, r3, #1
 800baac:	d0f9      	beq.n	800baa2 <__gethex+0x76>
 800baae:	f7ff ffa8 	bl	800ba02 <__hexdig_fun>
 800bab2:	2301      	movs	r3, #1
 800bab4:	fab0 f480 	clz	r4, r0
 800bab8:	0964      	lsrs	r4, r4, #5
 800baba:	4635      	mov	r5, r6
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	463a      	mov	r2, r7
 800bac0:	4616      	mov	r6, r2
 800bac2:	3201      	adds	r2, #1
 800bac4:	7830      	ldrb	r0, [r6, #0]
 800bac6:	f7ff ff9c 	bl	800ba02 <__hexdig_fun>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d1f8      	bne.n	800bac0 <__gethex+0x94>
 800bace:	9901      	ldr	r1, [sp, #4]
 800bad0:	4652      	mov	r2, sl
 800bad2:	4630      	mov	r0, r6
 800bad4:	f001 fa63 	bl	800cf9e <strncmp>
 800bad8:	b980      	cbnz	r0, 800bafc <__gethex+0xd0>
 800bada:	b94d      	cbnz	r5, 800baf0 <__gethex+0xc4>
 800badc:	eb06 050a 	add.w	r5, r6, sl
 800bae0:	462a      	mov	r2, r5
 800bae2:	4616      	mov	r6, r2
 800bae4:	3201      	adds	r2, #1
 800bae6:	7830      	ldrb	r0, [r6, #0]
 800bae8:	f7ff ff8b 	bl	800ba02 <__hexdig_fun>
 800baec:	2800      	cmp	r0, #0
 800baee:	d1f8      	bne.n	800bae2 <__gethex+0xb6>
 800baf0:	1bad      	subs	r5, r5, r6
 800baf2:	00ad      	lsls	r5, r5, #2
 800baf4:	e004      	b.n	800bb00 <__gethex+0xd4>
 800baf6:	2400      	movs	r4, #0
 800baf8:	4625      	mov	r5, r4
 800bafa:	e7e0      	b.n	800babe <__gethex+0x92>
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	d1f7      	bne.n	800baf0 <__gethex+0xc4>
 800bb00:	7833      	ldrb	r3, [r6, #0]
 800bb02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb06:	2b50      	cmp	r3, #80	; 0x50
 800bb08:	d13b      	bne.n	800bb82 <__gethex+0x156>
 800bb0a:	7873      	ldrb	r3, [r6, #1]
 800bb0c:	2b2b      	cmp	r3, #43	; 0x2b
 800bb0e:	d02c      	beq.n	800bb6a <__gethex+0x13e>
 800bb10:	2b2d      	cmp	r3, #45	; 0x2d
 800bb12:	d02e      	beq.n	800bb72 <__gethex+0x146>
 800bb14:	1c71      	adds	r1, r6, #1
 800bb16:	f04f 0900 	mov.w	r9, #0
 800bb1a:	7808      	ldrb	r0, [r1, #0]
 800bb1c:	f7ff ff71 	bl	800ba02 <__hexdig_fun>
 800bb20:	1e43      	subs	r3, r0, #1
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b18      	cmp	r3, #24
 800bb26:	d82c      	bhi.n	800bb82 <__gethex+0x156>
 800bb28:	f1a0 0210 	sub.w	r2, r0, #16
 800bb2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb30:	f7ff ff67 	bl	800ba02 <__hexdig_fun>
 800bb34:	1e43      	subs	r3, r0, #1
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b18      	cmp	r3, #24
 800bb3a:	d91d      	bls.n	800bb78 <__gethex+0x14c>
 800bb3c:	f1b9 0f00 	cmp.w	r9, #0
 800bb40:	d000      	beq.n	800bb44 <__gethex+0x118>
 800bb42:	4252      	negs	r2, r2
 800bb44:	4415      	add	r5, r2
 800bb46:	f8cb 1000 	str.w	r1, [fp]
 800bb4a:	b1e4      	cbz	r4, 800bb86 <__gethex+0x15a>
 800bb4c:	9b00      	ldr	r3, [sp, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bf14      	ite	ne
 800bb52:	2700      	movne	r7, #0
 800bb54:	2706      	moveq	r7, #6
 800bb56:	4638      	mov	r0, r7
 800bb58:	b009      	add	sp, #36	; 0x24
 800bb5a:	ecbd 8b02 	vpop	{d8}
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	463e      	mov	r6, r7
 800bb64:	4625      	mov	r5, r4
 800bb66:	2401      	movs	r4, #1
 800bb68:	e7ca      	b.n	800bb00 <__gethex+0xd4>
 800bb6a:	f04f 0900 	mov.w	r9, #0
 800bb6e:	1cb1      	adds	r1, r6, #2
 800bb70:	e7d3      	b.n	800bb1a <__gethex+0xee>
 800bb72:	f04f 0901 	mov.w	r9, #1
 800bb76:	e7fa      	b.n	800bb6e <__gethex+0x142>
 800bb78:	230a      	movs	r3, #10
 800bb7a:	fb03 0202 	mla	r2, r3, r2, r0
 800bb7e:	3a10      	subs	r2, #16
 800bb80:	e7d4      	b.n	800bb2c <__gethex+0x100>
 800bb82:	4631      	mov	r1, r6
 800bb84:	e7df      	b.n	800bb46 <__gethex+0x11a>
 800bb86:	1bf3      	subs	r3, r6, r7
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	2b07      	cmp	r3, #7
 800bb8e:	dc0b      	bgt.n	800bba8 <__gethex+0x17c>
 800bb90:	ee18 0a10 	vmov	r0, s16
 800bb94:	f000 fad8 	bl	800c148 <_Balloc>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	b940      	cbnz	r0, 800bbae <__gethex+0x182>
 800bb9c:	4b65      	ldr	r3, [pc, #404]	; (800bd34 <__gethex+0x308>)
 800bb9e:	4602      	mov	r2, r0
 800bba0:	21de      	movs	r1, #222	; 0xde
 800bba2:	4865      	ldr	r0, [pc, #404]	; (800bd38 <__gethex+0x30c>)
 800bba4:	f001 fa2c 	bl	800d000 <__assert_func>
 800bba8:	3101      	adds	r1, #1
 800bbaa:	105b      	asrs	r3, r3, #1
 800bbac:	e7ee      	b.n	800bb8c <__gethex+0x160>
 800bbae:	f100 0914 	add.w	r9, r0, #20
 800bbb2:	f04f 0b00 	mov.w	fp, #0
 800bbb6:	f1ca 0301 	rsb	r3, sl, #1
 800bbba:	f8cd 9008 	str.w	r9, [sp, #8]
 800bbbe:	f8cd b000 	str.w	fp, [sp]
 800bbc2:	9306      	str	r3, [sp, #24]
 800bbc4:	42b7      	cmp	r7, r6
 800bbc6:	d340      	bcc.n	800bc4a <__gethex+0x21e>
 800bbc8:	9802      	ldr	r0, [sp, #8]
 800bbca:	9b00      	ldr	r3, [sp, #0]
 800bbcc:	f840 3b04 	str.w	r3, [r0], #4
 800bbd0:	eba0 0009 	sub.w	r0, r0, r9
 800bbd4:	1080      	asrs	r0, r0, #2
 800bbd6:	0146      	lsls	r6, r0, #5
 800bbd8:	6120      	str	r0, [r4, #16]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 fbaa 	bl	800c334 <__hi0bits>
 800bbe0:	1a30      	subs	r0, r6, r0
 800bbe2:	f8d8 6000 	ldr.w	r6, [r8]
 800bbe6:	42b0      	cmp	r0, r6
 800bbe8:	dd63      	ble.n	800bcb2 <__gethex+0x286>
 800bbea:	1b87      	subs	r7, r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f000 ff44 	bl	800ca7c <__any_on>
 800bbf4:	4682      	mov	sl, r0
 800bbf6:	b1a8      	cbz	r0, 800bc24 <__gethex+0x1f8>
 800bbf8:	1e7b      	subs	r3, r7, #1
 800bbfa:	1159      	asrs	r1, r3, #5
 800bbfc:	f003 021f 	and.w	r2, r3, #31
 800bc00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bc04:	f04f 0a01 	mov.w	sl, #1
 800bc08:	fa0a f202 	lsl.w	r2, sl, r2
 800bc0c:	420a      	tst	r2, r1
 800bc0e:	d009      	beq.n	800bc24 <__gethex+0x1f8>
 800bc10:	4553      	cmp	r3, sl
 800bc12:	dd05      	ble.n	800bc20 <__gethex+0x1f4>
 800bc14:	1eb9      	subs	r1, r7, #2
 800bc16:	4620      	mov	r0, r4
 800bc18:	f000 ff30 	bl	800ca7c <__any_on>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d145      	bne.n	800bcac <__gethex+0x280>
 800bc20:	f04f 0a02 	mov.w	sl, #2
 800bc24:	4639      	mov	r1, r7
 800bc26:	4620      	mov	r0, r4
 800bc28:	f7ff fe99 	bl	800b95e <rshift>
 800bc2c:	443d      	add	r5, r7
 800bc2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc32:	42ab      	cmp	r3, r5
 800bc34:	da4c      	bge.n	800bcd0 <__gethex+0x2a4>
 800bc36:	ee18 0a10 	vmov	r0, s16
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	f000 fac4 	bl	800c1c8 <_Bfree>
 800bc40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc42:	2300      	movs	r3, #0
 800bc44:	6013      	str	r3, [r2, #0]
 800bc46:	27a3      	movs	r7, #163	; 0xa3
 800bc48:	e785      	b.n	800bb56 <__gethex+0x12a>
 800bc4a:	1e73      	subs	r3, r6, #1
 800bc4c:	9a05      	ldr	r2, [sp, #20]
 800bc4e:	9303      	str	r3, [sp, #12]
 800bc50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d019      	beq.n	800bc8c <__gethex+0x260>
 800bc58:	f1bb 0f20 	cmp.w	fp, #32
 800bc5c:	d107      	bne.n	800bc6e <__gethex+0x242>
 800bc5e:	9b02      	ldr	r3, [sp, #8]
 800bc60:	9a00      	ldr	r2, [sp, #0]
 800bc62:	f843 2b04 	str.w	r2, [r3], #4
 800bc66:	9302      	str	r3, [sp, #8]
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	469b      	mov	fp, r3
 800bc6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bc72:	f7ff fec6 	bl	800ba02 <__hexdig_fun>
 800bc76:	9b00      	ldr	r3, [sp, #0]
 800bc78:	f000 000f 	and.w	r0, r0, #15
 800bc7c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc80:	4303      	orrs	r3, r0
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	f10b 0b04 	add.w	fp, fp, #4
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	e00d      	b.n	800bca8 <__gethex+0x27c>
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	9a06      	ldr	r2, [sp, #24]
 800bc90:	4413      	add	r3, r2
 800bc92:	42bb      	cmp	r3, r7
 800bc94:	d3e0      	bcc.n	800bc58 <__gethex+0x22c>
 800bc96:	4618      	mov	r0, r3
 800bc98:	9901      	ldr	r1, [sp, #4]
 800bc9a:	9307      	str	r3, [sp, #28]
 800bc9c:	4652      	mov	r2, sl
 800bc9e:	f001 f97e 	bl	800cf9e <strncmp>
 800bca2:	9b07      	ldr	r3, [sp, #28]
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d1d7      	bne.n	800bc58 <__gethex+0x22c>
 800bca8:	461e      	mov	r6, r3
 800bcaa:	e78b      	b.n	800bbc4 <__gethex+0x198>
 800bcac:	f04f 0a03 	mov.w	sl, #3
 800bcb0:	e7b8      	b.n	800bc24 <__gethex+0x1f8>
 800bcb2:	da0a      	bge.n	800bcca <__gethex+0x29e>
 800bcb4:	1a37      	subs	r7, r6, r0
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	ee18 0a10 	vmov	r0, s16
 800bcbc:	463a      	mov	r2, r7
 800bcbe:	f000 fc9f 	bl	800c600 <__lshift>
 800bcc2:	1bed      	subs	r5, r5, r7
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	f100 0914 	add.w	r9, r0, #20
 800bcca:	f04f 0a00 	mov.w	sl, #0
 800bcce:	e7ae      	b.n	800bc2e <__gethex+0x202>
 800bcd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bcd4:	42a8      	cmp	r0, r5
 800bcd6:	dd72      	ble.n	800bdbe <__gethex+0x392>
 800bcd8:	1b45      	subs	r5, r0, r5
 800bcda:	42ae      	cmp	r6, r5
 800bcdc:	dc36      	bgt.n	800bd4c <__gethex+0x320>
 800bcde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d02a      	beq.n	800bd3c <__gethex+0x310>
 800bce6:	2b03      	cmp	r3, #3
 800bce8:	d02c      	beq.n	800bd44 <__gethex+0x318>
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d115      	bne.n	800bd1a <__gethex+0x2ee>
 800bcee:	42ae      	cmp	r6, r5
 800bcf0:	d113      	bne.n	800bd1a <__gethex+0x2ee>
 800bcf2:	2e01      	cmp	r6, #1
 800bcf4:	d10b      	bne.n	800bd0e <__gethex+0x2e2>
 800bcf6:	9a04      	ldr	r2, [sp, #16]
 800bcf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	2301      	movs	r3, #1
 800bd00:	6123      	str	r3, [r4, #16]
 800bd02:	f8c9 3000 	str.w	r3, [r9]
 800bd06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd08:	2762      	movs	r7, #98	; 0x62
 800bd0a:	601c      	str	r4, [r3, #0]
 800bd0c:	e723      	b.n	800bb56 <__gethex+0x12a>
 800bd0e:	1e71      	subs	r1, r6, #1
 800bd10:	4620      	mov	r0, r4
 800bd12:	f000 feb3 	bl	800ca7c <__any_on>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	d1ed      	bne.n	800bcf6 <__gethex+0x2ca>
 800bd1a:	ee18 0a10 	vmov	r0, s16
 800bd1e:	4621      	mov	r1, r4
 800bd20:	f000 fa52 	bl	800c1c8 <_Bfree>
 800bd24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd26:	2300      	movs	r3, #0
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	2750      	movs	r7, #80	; 0x50
 800bd2c:	e713      	b.n	800bb56 <__gethex+0x12a>
 800bd2e:	bf00      	nop
 800bd30:	0800ed34 	.word	0x0800ed34
 800bd34:	0800ec54 	.word	0x0800ec54
 800bd38:	0800ecc8 	.word	0x0800ecc8
 800bd3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1eb      	bne.n	800bd1a <__gethex+0x2ee>
 800bd42:	e7d8      	b.n	800bcf6 <__gethex+0x2ca>
 800bd44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1d5      	bne.n	800bcf6 <__gethex+0x2ca>
 800bd4a:	e7e6      	b.n	800bd1a <__gethex+0x2ee>
 800bd4c:	1e6f      	subs	r7, r5, #1
 800bd4e:	f1ba 0f00 	cmp.w	sl, #0
 800bd52:	d131      	bne.n	800bdb8 <__gethex+0x38c>
 800bd54:	b127      	cbz	r7, 800bd60 <__gethex+0x334>
 800bd56:	4639      	mov	r1, r7
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fe8f 	bl	800ca7c <__any_on>
 800bd5e:	4682      	mov	sl, r0
 800bd60:	117b      	asrs	r3, r7, #5
 800bd62:	2101      	movs	r1, #1
 800bd64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bd68:	f007 071f 	and.w	r7, r7, #31
 800bd6c:	fa01 f707 	lsl.w	r7, r1, r7
 800bd70:	421f      	tst	r7, r3
 800bd72:	4629      	mov	r1, r5
 800bd74:	4620      	mov	r0, r4
 800bd76:	bf18      	it	ne
 800bd78:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd7c:	1b76      	subs	r6, r6, r5
 800bd7e:	f7ff fdee 	bl	800b95e <rshift>
 800bd82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd86:	2702      	movs	r7, #2
 800bd88:	f1ba 0f00 	cmp.w	sl, #0
 800bd8c:	d048      	beq.n	800be20 <__gethex+0x3f4>
 800bd8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d015      	beq.n	800bdc2 <__gethex+0x396>
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d017      	beq.n	800bdca <__gethex+0x39e>
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d109      	bne.n	800bdb2 <__gethex+0x386>
 800bd9e:	f01a 0f02 	tst.w	sl, #2
 800bda2:	d006      	beq.n	800bdb2 <__gethex+0x386>
 800bda4:	f8d9 0000 	ldr.w	r0, [r9]
 800bda8:	ea4a 0a00 	orr.w	sl, sl, r0
 800bdac:	f01a 0f01 	tst.w	sl, #1
 800bdb0:	d10e      	bne.n	800bdd0 <__gethex+0x3a4>
 800bdb2:	f047 0710 	orr.w	r7, r7, #16
 800bdb6:	e033      	b.n	800be20 <__gethex+0x3f4>
 800bdb8:	f04f 0a01 	mov.w	sl, #1
 800bdbc:	e7d0      	b.n	800bd60 <__gethex+0x334>
 800bdbe:	2701      	movs	r7, #1
 800bdc0:	e7e2      	b.n	800bd88 <__gethex+0x35c>
 800bdc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdc4:	f1c3 0301 	rsb	r3, r3, #1
 800bdc8:	9315      	str	r3, [sp, #84]	; 0x54
 800bdca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d0f0      	beq.n	800bdb2 <__gethex+0x386>
 800bdd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bdd4:	f104 0314 	add.w	r3, r4, #20
 800bdd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bddc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bde0:	f04f 0c00 	mov.w	ip, #0
 800bde4:	4618      	mov	r0, r3
 800bde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdee:	d01c      	beq.n	800be2a <__gethex+0x3fe>
 800bdf0:	3201      	adds	r2, #1
 800bdf2:	6002      	str	r2, [r0, #0]
 800bdf4:	2f02      	cmp	r7, #2
 800bdf6:	f104 0314 	add.w	r3, r4, #20
 800bdfa:	d13f      	bne.n	800be7c <__gethex+0x450>
 800bdfc:	f8d8 2000 	ldr.w	r2, [r8]
 800be00:	3a01      	subs	r2, #1
 800be02:	42b2      	cmp	r2, r6
 800be04:	d10a      	bne.n	800be1c <__gethex+0x3f0>
 800be06:	1171      	asrs	r1, r6, #5
 800be08:	2201      	movs	r2, #1
 800be0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be0e:	f006 061f 	and.w	r6, r6, #31
 800be12:	fa02 f606 	lsl.w	r6, r2, r6
 800be16:	421e      	tst	r6, r3
 800be18:	bf18      	it	ne
 800be1a:	4617      	movne	r7, r2
 800be1c:	f047 0720 	orr.w	r7, r7, #32
 800be20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be22:	601c      	str	r4, [r3, #0]
 800be24:	9b04      	ldr	r3, [sp, #16]
 800be26:	601d      	str	r5, [r3, #0]
 800be28:	e695      	b.n	800bb56 <__gethex+0x12a>
 800be2a:	4299      	cmp	r1, r3
 800be2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800be30:	d8d8      	bhi.n	800bde4 <__gethex+0x3b8>
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	459b      	cmp	fp, r3
 800be36:	db19      	blt.n	800be6c <__gethex+0x440>
 800be38:	6861      	ldr	r1, [r4, #4]
 800be3a:	ee18 0a10 	vmov	r0, s16
 800be3e:	3101      	adds	r1, #1
 800be40:	f000 f982 	bl	800c148 <_Balloc>
 800be44:	4681      	mov	r9, r0
 800be46:	b918      	cbnz	r0, 800be50 <__gethex+0x424>
 800be48:	4b1a      	ldr	r3, [pc, #104]	; (800beb4 <__gethex+0x488>)
 800be4a:	4602      	mov	r2, r0
 800be4c:	2184      	movs	r1, #132	; 0x84
 800be4e:	e6a8      	b.n	800bba2 <__gethex+0x176>
 800be50:	6922      	ldr	r2, [r4, #16]
 800be52:	3202      	adds	r2, #2
 800be54:	f104 010c 	add.w	r1, r4, #12
 800be58:	0092      	lsls	r2, r2, #2
 800be5a:	300c      	adds	r0, #12
 800be5c:	f7fd f8a6 	bl	8008fac <memcpy>
 800be60:	4621      	mov	r1, r4
 800be62:	ee18 0a10 	vmov	r0, s16
 800be66:	f000 f9af 	bl	800c1c8 <_Bfree>
 800be6a:	464c      	mov	r4, r9
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be74:	6122      	str	r2, [r4, #16]
 800be76:	2201      	movs	r2, #1
 800be78:	615a      	str	r2, [r3, #20]
 800be7a:	e7bb      	b.n	800bdf4 <__gethex+0x3c8>
 800be7c:	6922      	ldr	r2, [r4, #16]
 800be7e:	455a      	cmp	r2, fp
 800be80:	dd0b      	ble.n	800be9a <__gethex+0x46e>
 800be82:	2101      	movs	r1, #1
 800be84:	4620      	mov	r0, r4
 800be86:	f7ff fd6a 	bl	800b95e <rshift>
 800be8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be8e:	3501      	adds	r5, #1
 800be90:	42ab      	cmp	r3, r5
 800be92:	f6ff aed0 	blt.w	800bc36 <__gethex+0x20a>
 800be96:	2701      	movs	r7, #1
 800be98:	e7c0      	b.n	800be1c <__gethex+0x3f0>
 800be9a:	f016 061f 	ands.w	r6, r6, #31
 800be9e:	d0fa      	beq.n	800be96 <__gethex+0x46a>
 800bea0:	449a      	add	sl, r3
 800bea2:	f1c6 0620 	rsb	r6, r6, #32
 800bea6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800beaa:	f000 fa43 	bl	800c334 <__hi0bits>
 800beae:	42b0      	cmp	r0, r6
 800beb0:	dbe7      	blt.n	800be82 <__gethex+0x456>
 800beb2:	e7f0      	b.n	800be96 <__gethex+0x46a>
 800beb4:	0800ec54 	.word	0x0800ec54

0800beb8 <L_shift>:
 800beb8:	f1c2 0208 	rsb	r2, r2, #8
 800bebc:	0092      	lsls	r2, r2, #2
 800bebe:	b570      	push	{r4, r5, r6, lr}
 800bec0:	f1c2 0620 	rsb	r6, r2, #32
 800bec4:	6843      	ldr	r3, [r0, #4]
 800bec6:	6804      	ldr	r4, [r0, #0]
 800bec8:	fa03 f506 	lsl.w	r5, r3, r6
 800becc:	432c      	orrs	r4, r5
 800bece:	40d3      	lsrs	r3, r2
 800bed0:	6004      	str	r4, [r0, #0]
 800bed2:	f840 3f04 	str.w	r3, [r0, #4]!
 800bed6:	4288      	cmp	r0, r1
 800bed8:	d3f4      	bcc.n	800bec4 <L_shift+0xc>
 800beda:	bd70      	pop	{r4, r5, r6, pc}

0800bedc <__match>:
 800bedc:	b530      	push	{r4, r5, lr}
 800bede:	6803      	ldr	r3, [r0, #0]
 800bee0:	3301      	adds	r3, #1
 800bee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee6:	b914      	cbnz	r4, 800beee <__match+0x12>
 800bee8:	6003      	str	r3, [r0, #0]
 800beea:	2001      	movs	r0, #1
 800beec:	bd30      	pop	{r4, r5, pc}
 800beee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bef2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bef6:	2d19      	cmp	r5, #25
 800bef8:	bf98      	it	ls
 800befa:	3220      	addls	r2, #32
 800befc:	42a2      	cmp	r2, r4
 800befe:	d0f0      	beq.n	800bee2 <__match+0x6>
 800bf00:	2000      	movs	r0, #0
 800bf02:	e7f3      	b.n	800beec <__match+0x10>

0800bf04 <__hexnan>:
 800bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	680b      	ldr	r3, [r1, #0]
 800bf0a:	6801      	ldr	r1, [r0, #0]
 800bf0c:	115e      	asrs	r6, r3, #5
 800bf0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf12:	f013 031f 	ands.w	r3, r3, #31
 800bf16:	b087      	sub	sp, #28
 800bf18:	bf18      	it	ne
 800bf1a:	3604      	addne	r6, #4
 800bf1c:	2500      	movs	r5, #0
 800bf1e:	1f37      	subs	r7, r6, #4
 800bf20:	4682      	mov	sl, r0
 800bf22:	4690      	mov	r8, r2
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf2a:	46b9      	mov	r9, r7
 800bf2c:	463c      	mov	r4, r7
 800bf2e:	9502      	str	r5, [sp, #8]
 800bf30:	46ab      	mov	fp, r5
 800bf32:	784a      	ldrb	r2, [r1, #1]
 800bf34:	1c4b      	adds	r3, r1, #1
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	b342      	cbz	r2, 800bf8c <__hexnan+0x88>
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	9105      	str	r1, [sp, #20]
 800bf3e:	9204      	str	r2, [sp, #16]
 800bf40:	f7ff fd5f 	bl	800ba02 <__hexdig_fun>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d14f      	bne.n	800bfe8 <__hexnan+0xe4>
 800bf48:	9a04      	ldr	r2, [sp, #16]
 800bf4a:	9905      	ldr	r1, [sp, #20]
 800bf4c:	2a20      	cmp	r2, #32
 800bf4e:	d818      	bhi.n	800bf82 <__hexnan+0x7e>
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	459b      	cmp	fp, r3
 800bf54:	dd13      	ble.n	800bf7e <__hexnan+0x7a>
 800bf56:	454c      	cmp	r4, r9
 800bf58:	d206      	bcs.n	800bf68 <__hexnan+0x64>
 800bf5a:	2d07      	cmp	r5, #7
 800bf5c:	dc04      	bgt.n	800bf68 <__hexnan+0x64>
 800bf5e:	462a      	mov	r2, r5
 800bf60:	4649      	mov	r1, r9
 800bf62:	4620      	mov	r0, r4
 800bf64:	f7ff ffa8 	bl	800beb8 <L_shift>
 800bf68:	4544      	cmp	r4, r8
 800bf6a:	d950      	bls.n	800c00e <__hexnan+0x10a>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f1a4 0904 	sub.w	r9, r4, #4
 800bf72:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf76:	f8cd b008 	str.w	fp, [sp, #8]
 800bf7a:	464c      	mov	r4, r9
 800bf7c:	461d      	mov	r5, r3
 800bf7e:	9903      	ldr	r1, [sp, #12]
 800bf80:	e7d7      	b.n	800bf32 <__hexnan+0x2e>
 800bf82:	2a29      	cmp	r2, #41	; 0x29
 800bf84:	d156      	bne.n	800c034 <__hexnan+0x130>
 800bf86:	3102      	adds	r1, #2
 800bf88:	f8ca 1000 	str.w	r1, [sl]
 800bf8c:	f1bb 0f00 	cmp.w	fp, #0
 800bf90:	d050      	beq.n	800c034 <__hexnan+0x130>
 800bf92:	454c      	cmp	r4, r9
 800bf94:	d206      	bcs.n	800bfa4 <__hexnan+0xa0>
 800bf96:	2d07      	cmp	r5, #7
 800bf98:	dc04      	bgt.n	800bfa4 <__hexnan+0xa0>
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7ff ff8a 	bl	800beb8 <L_shift>
 800bfa4:	4544      	cmp	r4, r8
 800bfa6:	d934      	bls.n	800c012 <__hexnan+0x10e>
 800bfa8:	f1a8 0204 	sub.w	r2, r8, #4
 800bfac:	4623      	mov	r3, r4
 800bfae:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfb2:	f842 1f04 	str.w	r1, [r2, #4]!
 800bfb6:	429f      	cmp	r7, r3
 800bfb8:	d2f9      	bcs.n	800bfae <__hexnan+0xaa>
 800bfba:	1b3b      	subs	r3, r7, r4
 800bfbc:	f023 0303 	bic.w	r3, r3, #3
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	3401      	adds	r4, #1
 800bfc4:	3e03      	subs	r6, #3
 800bfc6:	42b4      	cmp	r4, r6
 800bfc8:	bf88      	it	hi
 800bfca:	2304      	movhi	r3, #4
 800bfcc:	4443      	add	r3, r8
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f843 2b04 	str.w	r2, [r3], #4
 800bfd4:	429f      	cmp	r7, r3
 800bfd6:	d2fb      	bcs.n	800bfd0 <__hexnan+0xcc>
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	b91b      	cbnz	r3, 800bfe4 <__hexnan+0xe0>
 800bfdc:	4547      	cmp	r7, r8
 800bfde:	d127      	bne.n	800c030 <__hexnan+0x12c>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	603b      	str	r3, [r7, #0]
 800bfe4:	2005      	movs	r0, #5
 800bfe6:	e026      	b.n	800c036 <__hexnan+0x132>
 800bfe8:	3501      	adds	r5, #1
 800bfea:	2d08      	cmp	r5, #8
 800bfec:	f10b 0b01 	add.w	fp, fp, #1
 800bff0:	dd06      	ble.n	800c000 <__hexnan+0xfc>
 800bff2:	4544      	cmp	r4, r8
 800bff4:	d9c3      	bls.n	800bf7e <__hexnan+0x7a>
 800bff6:	2300      	movs	r3, #0
 800bff8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bffc:	2501      	movs	r5, #1
 800bffe:	3c04      	subs	r4, #4
 800c000:	6822      	ldr	r2, [r4, #0]
 800c002:	f000 000f 	and.w	r0, r0, #15
 800c006:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c00a:	6022      	str	r2, [r4, #0]
 800c00c:	e7b7      	b.n	800bf7e <__hexnan+0x7a>
 800c00e:	2508      	movs	r5, #8
 800c010:	e7b5      	b.n	800bf7e <__hexnan+0x7a>
 800c012:	9b01      	ldr	r3, [sp, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d0df      	beq.n	800bfd8 <__hexnan+0xd4>
 800c018:	f04f 32ff 	mov.w	r2, #4294967295
 800c01c:	f1c3 0320 	rsb	r3, r3, #32
 800c020:	fa22 f303 	lsr.w	r3, r2, r3
 800c024:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c028:	401a      	ands	r2, r3
 800c02a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c02e:	e7d3      	b.n	800bfd8 <__hexnan+0xd4>
 800c030:	3f04      	subs	r7, #4
 800c032:	e7d1      	b.n	800bfd8 <__hexnan+0xd4>
 800c034:	2004      	movs	r0, #4
 800c036:	b007      	add	sp, #28
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c03c <_localeconv_r>:
 800c03c:	4800      	ldr	r0, [pc, #0]	; (800c040 <_localeconv_r+0x4>)
 800c03e:	4770      	bx	lr
 800c040:	20000184 	.word	0x20000184

0800c044 <__retarget_lock_init_recursive>:
 800c044:	4770      	bx	lr

0800c046 <__retarget_lock_acquire_recursive>:
 800c046:	4770      	bx	lr

0800c048 <__retarget_lock_release_recursive>:
 800c048:	4770      	bx	lr

0800c04a <__swhatbuf_r>:
 800c04a:	b570      	push	{r4, r5, r6, lr}
 800c04c:	460e      	mov	r6, r1
 800c04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c052:	2900      	cmp	r1, #0
 800c054:	b096      	sub	sp, #88	; 0x58
 800c056:	4614      	mov	r4, r2
 800c058:	461d      	mov	r5, r3
 800c05a:	da07      	bge.n	800c06c <__swhatbuf_r+0x22>
 800c05c:	2300      	movs	r3, #0
 800c05e:	602b      	str	r3, [r5, #0]
 800c060:	89b3      	ldrh	r3, [r6, #12]
 800c062:	061a      	lsls	r2, r3, #24
 800c064:	d410      	bmi.n	800c088 <__swhatbuf_r+0x3e>
 800c066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c06a:	e00e      	b.n	800c08a <__swhatbuf_r+0x40>
 800c06c:	466a      	mov	r2, sp
 800c06e:	f001 f807 	bl	800d080 <_fstat_r>
 800c072:	2800      	cmp	r0, #0
 800c074:	dbf2      	blt.n	800c05c <__swhatbuf_r+0x12>
 800c076:	9a01      	ldr	r2, [sp, #4]
 800c078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c080:	425a      	negs	r2, r3
 800c082:	415a      	adcs	r2, r3
 800c084:	602a      	str	r2, [r5, #0]
 800c086:	e7ee      	b.n	800c066 <__swhatbuf_r+0x1c>
 800c088:	2340      	movs	r3, #64	; 0x40
 800c08a:	2000      	movs	r0, #0
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	b016      	add	sp, #88	; 0x58
 800c090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c094 <__smakebuf_r>:
 800c094:	898b      	ldrh	r3, [r1, #12]
 800c096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c098:	079d      	lsls	r5, r3, #30
 800c09a:	4606      	mov	r6, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	d507      	bpl.n	800c0b0 <__smakebuf_r+0x1c>
 800c0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	6123      	str	r3, [r4, #16]
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	6163      	str	r3, [r4, #20]
 800c0ac:	b002      	add	sp, #8
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	ab01      	add	r3, sp, #4
 800c0b2:	466a      	mov	r2, sp
 800c0b4:	f7ff ffc9 	bl	800c04a <__swhatbuf_r>
 800c0b8:	9900      	ldr	r1, [sp, #0]
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f000 fd5d 	bl	800cb7c <_malloc_r>
 800c0c2:	b948      	cbnz	r0, 800c0d8 <__smakebuf_r+0x44>
 800c0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c8:	059a      	lsls	r2, r3, #22
 800c0ca:	d4ef      	bmi.n	800c0ac <__smakebuf_r+0x18>
 800c0cc:	f023 0303 	bic.w	r3, r3, #3
 800c0d0:	f043 0302 	orr.w	r3, r3, #2
 800c0d4:	81a3      	strh	r3, [r4, #12]
 800c0d6:	e7e3      	b.n	800c0a0 <__smakebuf_r+0xc>
 800c0d8:	4b0d      	ldr	r3, [pc, #52]	; (800c110 <__smakebuf_r+0x7c>)
 800c0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	6020      	str	r0, [r4, #0]
 800c0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e4:	81a3      	strh	r3, [r4, #12]
 800c0e6:	9b00      	ldr	r3, [sp, #0]
 800c0e8:	6163      	str	r3, [r4, #20]
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	6120      	str	r0, [r4, #16]
 800c0ee:	b15b      	cbz	r3, 800c108 <__smakebuf_r+0x74>
 800c0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f000 ffd5 	bl	800d0a4 <_isatty_r>
 800c0fa:	b128      	cbz	r0, 800c108 <__smakebuf_r+0x74>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	f043 0301 	orr.w	r3, r3, #1
 800c106:	81a3      	strh	r3, [r4, #12]
 800c108:	89a0      	ldrh	r0, [r4, #12]
 800c10a:	4305      	orrs	r5, r0
 800c10c:	81a5      	strh	r5, [r4, #12]
 800c10e:	e7cd      	b.n	800c0ac <__smakebuf_r+0x18>
 800c110:	0800b7bd 	.word	0x0800b7bd

0800c114 <malloc>:
 800c114:	4b02      	ldr	r3, [pc, #8]	; (800c120 <malloc+0xc>)
 800c116:	4601      	mov	r1, r0
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	f000 bd2f 	b.w	800cb7c <_malloc_r>
 800c11e:	bf00      	nop
 800c120:	2000002c 	.word	0x2000002c

0800c124 <__ascii_mbtowc>:
 800c124:	b082      	sub	sp, #8
 800c126:	b901      	cbnz	r1, 800c12a <__ascii_mbtowc+0x6>
 800c128:	a901      	add	r1, sp, #4
 800c12a:	b142      	cbz	r2, 800c13e <__ascii_mbtowc+0x1a>
 800c12c:	b14b      	cbz	r3, 800c142 <__ascii_mbtowc+0x1e>
 800c12e:	7813      	ldrb	r3, [r2, #0]
 800c130:	600b      	str	r3, [r1, #0]
 800c132:	7812      	ldrb	r2, [r2, #0]
 800c134:	1e10      	subs	r0, r2, #0
 800c136:	bf18      	it	ne
 800c138:	2001      	movne	r0, #1
 800c13a:	b002      	add	sp, #8
 800c13c:	4770      	bx	lr
 800c13e:	4610      	mov	r0, r2
 800c140:	e7fb      	b.n	800c13a <__ascii_mbtowc+0x16>
 800c142:	f06f 0001 	mvn.w	r0, #1
 800c146:	e7f8      	b.n	800c13a <__ascii_mbtowc+0x16>

0800c148 <_Balloc>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c14c:	4604      	mov	r4, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	b976      	cbnz	r6, 800c170 <_Balloc+0x28>
 800c152:	2010      	movs	r0, #16
 800c154:	f7ff ffde 	bl	800c114 <malloc>
 800c158:	4602      	mov	r2, r0
 800c15a:	6260      	str	r0, [r4, #36]	; 0x24
 800c15c:	b920      	cbnz	r0, 800c168 <_Balloc+0x20>
 800c15e:	4b18      	ldr	r3, [pc, #96]	; (800c1c0 <_Balloc+0x78>)
 800c160:	4818      	ldr	r0, [pc, #96]	; (800c1c4 <_Balloc+0x7c>)
 800c162:	2166      	movs	r1, #102	; 0x66
 800c164:	f000 ff4c 	bl	800d000 <__assert_func>
 800c168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c16c:	6006      	str	r6, [r0, #0]
 800c16e:	60c6      	str	r6, [r0, #12]
 800c170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c172:	68f3      	ldr	r3, [r6, #12]
 800c174:	b183      	cbz	r3, 800c198 <_Balloc+0x50>
 800c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c17e:	b9b8      	cbnz	r0, 800c1b0 <_Balloc+0x68>
 800c180:	2101      	movs	r1, #1
 800c182:	fa01 f605 	lsl.w	r6, r1, r5
 800c186:	1d72      	adds	r2, r6, #5
 800c188:	0092      	lsls	r2, r2, #2
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 fc97 	bl	800cabe <_calloc_r>
 800c190:	b160      	cbz	r0, 800c1ac <_Balloc+0x64>
 800c192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c196:	e00e      	b.n	800c1b6 <_Balloc+0x6e>
 800c198:	2221      	movs	r2, #33	; 0x21
 800c19a:	2104      	movs	r1, #4
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 fc8e 	bl	800cabe <_calloc_r>
 800c1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1a4:	60f0      	str	r0, [r6, #12]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1e4      	bne.n	800c176 <_Balloc+0x2e>
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	6802      	ldr	r2, [r0, #0]
 800c1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1bc:	e7f7      	b.n	800c1ae <_Balloc+0x66>
 800c1be:	bf00      	nop
 800c1c0:	0800ebde 	.word	0x0800ebde
 800c1c4:	0800ed48 	.word	0x0800ed48

0800c1c8 <_Bfree>:
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	b976      	cbnz	r6, 800c1f0 <_Bfree+0x28>
 800c1d2:	2010      	movs	r0, #16
 800c1d4:	f7ff ff9e 	bl	800c114 <malloc>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	6268      	str	r0, [r5, #36]	; 0x24
 800c1dc:	b920      	cbnz	r0, 800c1e8 <_Bfree+0x20>
 800c1de:	4b09      	ldr	r3, [pc, #36]	; (800c204 <_Bfree+0x3c>)
 800c1e0:	4809      	ldr	r0, [pc, #36]	; (800c208 <_Bfree+0x40>)
 800c1e2:	218a      	movs	r1, #138	; 0x8a
 800c1e4:	f000 ff0c 	bl	800d000 <__assert_func>
 800c1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1ec:	6006      	str	r6, [r0, #0]
 800c1ee:	60c6      	str	r6, [r0, #12]
 800c1f0:	b13c      	cbz	r4, 800c202 <_Bfree+0x3a>
 800c1f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1f4:	6862      	ldr	r2, [r4, #4]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1fc:	6021      	str	r1, [r4, #0]
 800c1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c202:	bd70      	pop	{r4, r5, r6, pc}
 800c204:	0800ebde 	.word	0x0800ebde
 800c208:	0800ed48 	.word	0x0800ed48

0800c20c <__multadd>:
 800c20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c210:	690e      	ldr	r6, [r1, #16]
 800c212:	4607      	mov	r7, r0
 800c214:	4698      	mov	r8, r3
 800c216:	460c      	mov	r4, r1
 800c218:	f101 0014 	add.w	r0, r1, #20
 800c21c:	2300      	movs	r3, #0
 800c21e:	6805      	ldr	r5, [r0, #0]
 800c220:	b2a9      	uxth	r1, r5
 800c222:	fb02 8101 	mla	r1, r2, r1, r8
 800c226:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c22a:	0c2d      	lsrs	r5, r5, #16
 800c22c:	fb02 c505 	mla	r5, r2, r5, ip
 800c230:	b289      	uxth	r1, r1
 800c232:	3301      	adds	r3, #1
 800c234:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c238:	429e      	cmp	r6, r3
 800c23a:	f840 1b04 	str.w	r1, [r0], #4
 800c23e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c242:	dcec      	bgt.n	800c21e <__multadd+0x12>
 800c244:	f1b8 0f00 	cmp.w	r8, #0
 800c248:	d022      	beq.n	800c290 <__multadd+0x84>
 800c24a:	68a3      	ldr	r3, [r4, #8]
 800c24c:	42b3      	cmp	r3, r6
 800c24e:	dc19      	bgt.n	800c284 <__multadd+0x78>
 800c250:	6861      	ldr	r1, [r4, #4]
 800c252:	4638      	mov	r0, r7
 800c254:	3101      	adds	r1, #1
 800c256:	f7ff ff77 	bl	800c148 <_Balloc>
 800c25a:	4605      	mov	r5, r0
 800c25c:	b928      	cbnz	r0, 800c26a <__multadd+0x5e>
 800c25e:	4602      	mov	r2, r0
 800c260:	4b0d      	ldr	r3, [pc, #52]	; (800c298 <__multadd+0x8c>)
 800c262:	480e      	ldr	r0, [pc, #56]	; (800c29c <__multadd+0x90>)
 800c264:	21b5      	movs	r1, #181	; 0xb5
 800c266:	f000 fecb 	bl	800d000 <__assert_func>
 800c26a:	6922      	ldr	r2, [r4, #16]
 800c26c:	3202      	adds	r2, #2
 800c26e:	f104 010c 	add.w	r1, r4, #12
 800c272:	0092      	lsls	r2, r2, #2
 800c274:	300c      	adds	r0, #12
 800c276:	f7fc fe99 	bl	8008fac <memcpy>
 800c27a:	4621      	mov	r1, r4
 800c27c:	4638      	mov	r0, r7
 800c27e:	f7ff ffa3 	bl	800c1c8 <_Bfree>
 800c282:	462c      	mov	r4, r5
 800c284:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c288:	3601      	adds	r6, #1
 800c28a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c28e:	6126      	str	r6, [r4, #16]
 800c290:	4620      	mov	r0, r4
 800c292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c296:	bf00      	nop
 800c298:	0800ec54 	.word	0x0800ec54
 800c29c:	0800ed48 	.word	0x0800ed48

0800c2a0 <__s2b>:
 800c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	4615      	mov	r5, r2
 800c2a8:	461f      	mov	r7, r3
 800c2aa:	2209      	movs	r2, #9
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	db09      	blt.n	800c2d0 <__s2b+0x30>
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7ff ff43 	bl	800c148 <_Balloc>
 800c2c2:	b940      	cbnz	r0, 800c2d6 <__s2b+0x36>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	4b19      	ldr	r3, [pc, #100]	; (800c32c <__s2b+0x8c>)
 800c2c8:	4819      	ldr	r0, [pc, #100]	; (800c330 <__s2b+0x90>)
 800c2ca:	21ce      	movs	r1, #206	; 0xce
 800c2cc:	f000 fe98 	bl	800d000 <__assert_func>
 800c2d0:	0052      	lsls	r2, r2, #1
 800c2d2:	3101      	adds	r1, #1
 800c2d4:	e7f0      	b.n	800c2b8 <__s2b+0x18>
 800c2d6:	9b08      	ldr	r3, [sp, #32]
 800c2d8:	6143      	str	r3, [r0, #20]
 800c2da:	2d09      	cmp	r5, #9
 800c2dc:	f04f 0301 	mov.w	r3, #1
 800c2e0:	6103      	str	r3, [r0, #16]
 800c2e2:	dd16      	ble.n	800c312 <__s2b+0x72>
 800c2e4:	f104 0909 	add.w	r9, r4, #9
 800c2e8:	46c8      	mov	r8, r9
 800c2ea:	442c      	add	r4, r5
 800c2ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2f0:	4601      	mov	r1, r0
 800c2f2:	3b30      	subs	r3, #48	; 0x30
 800c2f4:	220a      	movs	r2, #10
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ff88 	bl	800c20c <__multadd>
 800c2fc:	45a0      	cmp	r8, r4
 800c2fe:	d1f5      	bne.n	800c2ec <__s2b+0x4c>
 800c300:	f1a5 0408 	sub.w	r4, r5, #8
 800c304:	444c      	add	r4, r9
 800c306:	1b2d      	subs	r5, r5, r4
 800c308:	1963      	adds	r3, r4, r5
 800c30a:	42bb      	cmp	r3, r7
 800c30c:	db04      	blt.n	800c318 <__s2b+0x78>
 800c30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c312:	340a      	adds	r4, #10
 800c314:	2509      	movs	r5, #9
 800c316:	e7f6      	b.n	800c306 <__s2b+0x66>
 800c318:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c31c:	4601      	mov	r1, r0
 800c31e:	3b30      	subs	r3, #48	; 0x30
 800c320:	220a      	movs	r2, #10
 800c322:	4630      	mov	r0, r6
 800c324:	f7ff ff72 	bl	800c20c <__multadd>
 800c328:	e7ee      	b.n	800c308 <__s2b+0x68>
 800c32a:	bf00      	nop
 800c32c:	0800ec54 	.word	0x0800ec54
 800c330:	0800ed48 	.word	0x0800ed48

0800c334 <__hi0bits>:
 800c334:	0c03      	lsrs	r3, r0, #16
 800c336:	041b      	lsls	r3, r3, #16
 800c338:	b9d3      	cbnz	r3, 800c370 <__hi0bits+0x3c>
 800c33a:	0400      	lsls	r0, r0, #16
 800c33c:	2310      	movs	r3, #16
 800c33e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c342:	bf04      	itt	eq
 800c344:	0200      	lsleq	r0, r0, #8
 800c346:	3308      	addeq	r3, #8
 800c348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c34c:	bf04      	itt	eq
 800c34e:	0100      	lsleq	r0, r0, #4
 800c350:	3304      	addeq	r3, #4
 800c352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c356:	bf04      	itt	eq
 800c358:	0080      	lsleq	r0, r0, #2
 800c35a:	3302      	addeq	r3, #2
 800c35c:	2800      	cmp	r0, #0
 800c35e:	db05      	blt.n	800c36c <__hi0bits+0x38>
 800c360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c364:	f103 0301 	add.w	r3, r3, #1
 800c368:	bf08      	it	eq
 800c36a:	2320      	moveq	r3, #32
 800c36c:	4618      	mov	r0, r3
 800c36e:	4770      	bx	lr
 800c370:	2300      	movs	r3, #0
 800c372:	e7e4      	b.n	800c33e <__hi0bits+0xa>

0800c374 <__lo0bits>:
 800c374:	6803      	ldr	r3, [r0, #0]
 800c376:	f013 0207 	ands.w	r2, r3, #7
 800c37a:	4601      	mov	r1, r0
 800c37c:	d00b      	beq.n	800c396 <__lo0bits+0x22>
 800c37e:	07da      	lsls	r2, r3, #31
 800c380:	d424      	bmi.n	800c3cc <__lo0bits+0x58>
 800c382:	0798      	lsls	r0, r3, #30
 800c384:	bf49      	itett	mi
 800c386:	085b      	lsrmi	r3, r3, #1
 800c388:	089b      	lsrpl	r3, r3, #2
 800c38a:	2001      	movmi	r0, #1
 800c38c:	600b      	strmi	r3, [r1, #0]
 800c38e:	bf5c      	itt	pl
 800c390:	600b      	strpl	r3, [r1, #0]
 800c392:	2002      	movpl	r0, #2
 800c394:	4770      	bx	lr
 800c396:	b298      	uxth	r0, r3
 800c398:	b9b0      	cbnz	r0, 800c3c8 <__lo0bits+0x54>
 800c39a:	0c1b      	lsrs	r3, r3, #16
 800c39c:	2010      	movs	r0, #16
 800c39e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c3a2:	bf04      	itt	eq
 800c3a4:	0a1b      	lsreq	r3, r3, #8
 800c3a6:	3008      	addeq	r0, #8
 800c3a8:	071a      	lsls	r2, r3, #28
 800c3aa:	bf04      	itt	eq
 800c3ac:	091b      	lsreq	r3, r3, #4
 800c3ae:	3004      	addeq	r0, #4
 800c3b0:	079a      	lsls	r2, r3, #30
 800c3b2:	bf04      	itt	eq
 800c3b4:	089b      	lsreq	r3, r3, #2
 800c3b6:	3002      	addeq	r0, #2
 800c3b8:	07da      	lsls	r2, r3, #31
 800c3ba:	d403      	bmi.n	800c3c4 <__lo0bits+0x50>
 800c3bc:	085b      	lsrs	r3, r3, #1
 800c3be:	f100 0001 	add.w	r0, r0, #1
 800c3c2:	d005      	beq.n	800c3d0 <__lo0bits+0x5c>
 800c3c4:	600b      	str	r3, [r1, #0]
 800c3c6:	4770      	bx	lr
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	e7e8      	b.n	800c39e <__lo0bits+0x2a>
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	4770      	bx	lr
 800c3d0:	2020      	movs	r0, #32
 800c3d2:	4770      	bx	lr

0800c3d4 <__i2b>:
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	2101      	movs	r1, #1
 800c3da:	f7ff feb5 	bl	800c148 <_Balloc>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	b928      	cbnz	r0, 800c3ee <__i2b+0x1a>
 800c3e2:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <__i2b+0x24>)
 800c3e4:	4805      	ldr	r0, [pc, #20]	; (800c3fc <__i2b+0x28>)
 800c3e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c3ea:	f000 fe09 	bl	800d000 <__assert_func>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	6144      	str	r4, [r0, #20]
 800c3f2:	6103      	str	r3, [r0, #16]
 800c3f4:	bd10      	pop	{r4, pc}
 800c3f6:	bf00      	nop
 800c3f8:	0800ec54 	.word	0x0800ec54
 800c3fc:	0800ed48 	.word	0x0800ed48

0800c400 <__multiply>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	4614      	mov	r4, r2
 800c406:	690a      	ldr	r2, [r1, #16]
 800c408:	6923      	ldr	r3, [r4, #16]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	bfb8      	it	lt
 800c40e:	460b      	movlt	r3, r1
 800c410:	460d      	mov	r5, r1
 800c412:	bfbc      	itt	lt
 800c414:	4625      	movlt	r5, r4
 800c416:	461c      	movlt	r4, r3
 800c418:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c41c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c420:	68ab      	ldr	r3, [r5, #8]
 800c422:	6869      	ldr	r1, [r5, #4]
 800c424:	eb0a 0709 	add.w	r7, sl, r9
 800c428:	42bb      	cmp	r3, r7
 800c42a:	b085      	sub	sp, #20
 800c42c:	bfb8      	it	lt
 800c42e:	3101      	addlt	r1, #1
 800c430:	f7ff fe8a 	bl	800c148 <_Balloc>
 800c434:	b930      	cbnz	r0, 800c444 <__multiply+0x44>
 800c436:	4602      	mov	r2, r0
 800c438:	4b42      	ldr	r3, [pc, #264]	; (800c544 <__multiply+0x144>)
 800c43a:	4843      	ldr	r0, [pc, #268]	; (800c548 <__multiply+0x148>)
 800c43c:	f240 115d 	movw	r1, #349	; 0x15d
 800c440:	f000 fdde 	bl	800d000 <__assert_func>
 800c444:	f100 0614 	add.w	r6, r0, #20
 800c448:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c44c:	4633      	mov	r3, r6
 800c44e:	2200      	movs	r2, #0
 800c450:	4543      	cmp	r3, r8
 800c452:	d31e      	bcc.n	800c492 <__multiply+0x92>
 800c454:	f105 0c14 	add.w	ip, r5, #20
 800c458:	f104 0314 	add.w	r3, r4, #20
 800c45c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c460:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c464:	9202      	str	r2, [sp, #8]
 800c466:	ebac 0205 	sub.w	r2, ip, r5
 800c46a:	3a15      	subs	r2, #21
 800c46c:	f022 0203 	bic.w	r2, r2, #3
 800c470:	3204      	adds	r2, #4
 800c472:	f105 0115 	add.w	r1, r5, #21
 800c476:	458c      	cmp	ip, r1
 800c478:	bf38      	it	cc
 800c47a:	2204      	movcc	r2, #4
 800c47c:	9201      	str	r2, [sp, #4]
 800c47e:	9a02      	ldr	r2, [sp, #8]
 800c480:	9303      	str	r3, [sp, #12]
 800c482:	429a      	cmp	r2, r3
 800c484:	d808      	bhi.n	800c498 <__multiply+0x98>
 800c486:	2f00      	cmp	r7, #0
 800c488:	dc55      	bgt.n	800c536 <__multiply+0x136>
 800c48a:	6107      	str	r7, [r0, #16]
 800c48c:	b005      	add	sp, #20
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	f843 2b04 	str.w	r2, [r3], #4
 800c496:	e7db      	b.n	800c450 <__multiply+0x50>
 800c498:	f8b3 a000 	ldrh.w	sl, [r3]
 800c49c:	f1ba 0f00 	cmp.w	sl, #0
 800c4a0:	d020      	beq.n	800c4e4 <__multiply+0xe4>
 800c4a2:	f105 0e14 	add.w	lr, r5, #20
 800c4a6:	46b1      	mov	r9, r6
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c4ae:	f8d9 b000 	ldr.w	fp, [r9]
 800c4b2:	b2a1      	uxth	r1, r4
 800c4b4:	fa1f fb8b 	uxth.w	fp, fp
 800c4b8:	fb0a b101 	mla	r1, sl, r1, fp
 800c4bc:	4411      	add	r1, r2
 800c4be:	f8d9 2000 	ldr.w	r2, [r9]
 800c4c2:	0c24      	lsrs	r4, r4, #16
 800c4c4:	0c12      	lsrs	r2, r2, #16
 800c4c6:	fb0a 2404 	mla	r4, sl, r4, r2
 800c4ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c4ce:	b289      	uxth	r1, r1
 800c4d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c4d4:	45f4      	cmp	ip, lr
 800c4d6:	f849 1b04 	str.w	r1, [r9], #4
 800c4da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c4de:	d8e4      	bhi.n	800c4aa <__multiply+0xaa>
 800c4e0:	9901      	ldr	r1, [sp, #4]
 800c4e2:	5072      	str	r2, [r6, r1]
 800c4e4:	9a03      	ldr	r2, [sp, #12]
 800c4e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	f1b9 0f00 	cmp.w	r9, #0
 800c4f0:	d01f      	beq.n	800c532 <__multiply+0x132>
 800c4f2:	6834      	ldr	r4, [r6, #0]
 800c4f4:	f105 0114 	add.w	r1, r5, #20
 800c4f8:	46b6      	mov	lr, r6
 800c4fa:	f04f 0a00 	mov.w	sl, #0
 800c4fe:	880a      	ldrh	r2, [r1, #0]
 800c500:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c504:	fb09 b202 	mla	r2, r9, r2, fp
 800c508:	4492      	add	sl, r2
 800c50a:	b2a4      	uxth	r4, r4
 800c50c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c510:	f84e 4b04 	str.w	r4, [lr], #4
 800c514:	f851 4b04 	ldr.w	r4, [r1], #4
 800c518:	f8be 2000 	ldrh.w	r2, [lr]
 800c51c:	0c24      	lsrs	r4, r4, #16
 800c51e:	fb09 2404 	mla	r4, r9, r4, r2
 800c522:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c526:	458c      	cmp	ip, r1
 800c528:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c52c:	d8e7      	bhi.n	800c4fe <__multiply+0xfe>
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	50b4      	str	r4, [r6, r2]
 800c532:	3604      	adds	r6, #4
 800c534:	e7a3      	b.n	800c47e <__multiply+0x7e>
 800c536:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1a5      	bne.n	800c48a <__multiply+0x8a>
 800c53e:	3f01      	subs	r7, #1
 800c540:	e7a1      	b.n	800c486 <__multiply+0x86>
 800c542:	bf00      	nop
 800c544:	0800ec54 	.word	0x0800ec54
 800c548:	0800ed48 	.word	0x0800ed48

0800c54c <__pow5mult>:
 800c54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c550:	4615      	mov	r5, r2
 800c552:	f012 0203 	ands.w	r2, r2, #3
 800c556:	4606      	mov	r6, r0
 800c558:	460f      	mov	r7, r1
 800c55a:	d007      	beq.n	800c56c <__pow5mult+0x20>
 800c55c:	4c25      	ldr	r4, [pc, #148]	; (800c5f4 <__pow5mult+0xa8>)
 800c55e:	3a01      	subs	r2, #1
 800c560:	2300      	movs	r3, #0
 800c562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c566:	f7ff fe51 	bl	800c20c <__multadd>
 800c56a:	4607      	mov	r7, r0
 800c56c:	10ad      	asrs	r5, r5, #2
 800c56e:	d03d      	beq.n	800c5ec <__pow5mult+0xa0>
 800c570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c572:	b97c      	cbnz	r4, 800c594 <__pow5mult+0x48>
 800c574:	2010      	movs	r0, #16
 800c576:	f7ff fdcd 	bl	800c114 <malloc>
 800c57a:	4602      	mov	r2, r0
 800c57c:	6270      	str	r0, [r6, #36]	; 0x24
 800c57e:	b928      	cbnz	r0, 800c58c <__pow5mult+0x40>
 800c580:	4b1d      	ldr	r3, [pc, #116]	; (800c5f8 <__pow5mult+0xac>)
 800c582:	481e      	ldr	r0, [pc, #120]	; (800c5fc <__pow5mult+0xb0>)
 800c584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c588:	f000 fd3a 	bl	800d000 <__assert_func>
 800c58c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c590:	6004      	str	r4, [r0, #0]
 800c592:	60c4      	str	r4, [r0, #12]
 800c594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c59c:	b94c      	cbnz	r4, 800c5b2 <__pow5mult+0x66>
 800c59e:	f240 2171 	movw	r1, #625	; 0x271
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f7ff ff16 	bl	800c3d4 <__i2b>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	6003      	str	r3, [r0, #0]
 800c5b2:	f04f 0900 	mov.w	r9, #0
 800c5b6:	07eb      	lsls	r3, r5, #31
 800c5b8:	d50a      	bpl.n	800c5d0 <__pow5mult+0x84>
 800c5ba:	4639      	mov	r1, r7
 800c5bc:	4622      	mov	r2, r4
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f7ff ff1e 	bl	800c400 <__multiply>
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	4680      	mov	r8, r0
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f7ff fdfd 	bl	800c1c8 <_Bfree>
 800c5ce:	4647      	mov	r7, r8
 800c5d0:	106d      	asrs	r5, r5, #1
 800c5d2:	d00b      	beq.n	800c5ec <__pow5mult+0xa0>
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	b938      	cbnz	r0, 800c5e8 <__pow5mult+0x9c>
 800c5d8:	4622      	mov	r2, r4
 800c5da:	4621      	mov	r1, r4
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f7ff ff0f 	bl	800c400 <__multiply>
 800c5e2:	6020      	str	r0, [r4, #0]
 800c5e4:	f8c0 9000 	str.w	r9, [r0]
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	e7e4      	b.n	800c5b6 <__pow5mult+0x6a>
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f2:	bf00      	nop
 800c5f4:	0800ee98 	.word	0x0800ee98
 800c5f8:	0800ebde 	.word	0x0800ebde
 800c5fc:	0800ed48 	.word	0x0800ed48

0800c600 <__lshift>:
 800c600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c604:	460c      	mov	r4, r1
 800c606:	6849      	ldr	r1, [r1, #4]
 800c608:	6923      	ldr	r3, [r4, #16]
 800c60a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c60e:	68a3      	ldr	r3, [r4, #8]
 800c610:	4607      	mov	r7, r0
 800c612:	4691      	mov	r9, r2
 800c614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c618:	f108 0601 	add.w	r6, r8, #1
 800c61c:	42b3      	cmp	r3, r6
 800c61e:	db0b      	blt.n	800c638 <__lshift+0x38>
 800c620:	4638      	mov	r0, r7
 800c622:	f7ff fd91 	bl	800c148 <_Balloc>
 800c626:	4605      	mov	r5, r0
 800c628:	b948      	cbnz	r0, 800c63e <__lshift+0x3e>
 800c62a:	4602      	mov	r2, r0
 800c62c:	4b28      	ldr	r3, [pc, #160]	; (800c6d0 <__lshift+0xd0>)
 800c62e:	4829      	ldr	r0, [pc, #164]	; (800c6d4 <__lshift+0xd4>)
 800c630:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c634:	f000 fce4 	bl	800d000 <__assert_func>
 800c638:	3101      	adds	r1, #1
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	e7ee      	b.n	800c61c <__lshift+0x1c>
 800c63e:	2300      	movs	r3, #0
 800c640:	f100 0114 	add.w	r1, r0, #20
 800c644:	f100 0210 	add.w	r2, r0, #16
 800c648:	4618      	mov	r0, r3
 800c64a:	4553      	cmp	r3, sl
 800c64c:	db33      	blt.n	800c6b6 <__lshift+0xb6>
 800c64e:	6920      	ldr	r0, [r4, #16]
 800c650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c654:	f104 0314 	add.w	r3, r4, #20
 800c658:	f019 091f 	ands.w	r9, r9, #31
 800c65c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c664:	d02b      	beq.n	800c6be <__lshift+0xbe>
 800c666:	f1c9 0e20 	rsb	lr, r9, #32
 800c66a:	468a      	mov	sl, r1
 800c66c:	2200      	movs	r2, #0
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	fa00 f009 	lsl.w	r0, r0, r9
 800c674:	4302      	orrs	r2, r0
 800c676:	f84a 2b04 	str.w	r2, [sl], #4
 800c67a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67e:	459c      	cmp	ip, r3
 800c680:	fa22 f20e 	lsr.w	r2, r2, lr
 800c684:	d8f3      	bhi.n	800c66e <__lshift+0x6e>
 800c686:	ebac 0304 	sub.w	r3, ip, r4
 800c68a:	3b15      	subs	r3, #21
 800c68c:	f023 0303 	bic.w	r3, r3, #3
 800c690:	3304      	adds	r3, #4
 800c692:	f104 0015 	add.w	r0, r4, #21
 800c696:	4584      	cmp	ip, r0
 800c698:	bf38      	it	cc
 800c69a:	2304      	movcc	r3, #4
 800c69c:	50ca      	str	r2, [r1, r3]
 800c69e:	b10a      	cbz	r2, 800c6a4 <__lshift+0xa4>
 800c6a0:	f108 0602 	add.w	r6, r8, #2
 800c6a4:	3e01      	subs	r6, #1
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	612e      	str	r6, [r5, #16]
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	f7ff fd8c 	bl	800c1c8 <_Bfree>
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	e7c5      	b.n	800c64a <__lshift+0x4a>
 800c6be:	3904      	subs	r1, #4
 800c6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6c8:	459c      	cmp	ip, r3
 800c6ca:	d8f9      	bhi.n	800c6c0 <__lshift+0xc0>
 800c6cc:	e7ea      	b.n	800c6a4 <__lshift+0xa4>
 800c6ce:	bf00      	nop
 800c6d0:	0800ec54 	.word	0x0800ec54
 800c6d4:	0800ed48 	.word	0x0800ed48

0800c6d8 <__mcmp>:
 800c6d8:	b530      	push	{r4, r5, lr}
 800c6da:	6902      	ldr	r2, [r0, #16]
 800c6dc:	690c      	ldr	r4, [r1, #16]
 800c6de:	1b12      	subs	r2, r2, r4
 800c6e0:	d10e      	bne.n	800c700 <__mcmp+0x28>
 800c6e2:	f100 0314 	add.w	r3, r0, #20
 800c6e6:	3114      	adds	r1, #20
 800c6e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6f8:	42a5      	cmp	r5, r4
 800c6fa:	d003      	beq.n	800c704 <__mcmp+0x2c>
 800c6fc:	d305      	bcc.n	800c70a <__mcmp+0x32>
 800c6fe:	2201      	movs	r2, #1
 800c700:	4610      	mov	r0, r2
 800c702:	bd30      	pop	{r4, r5, pc}
 800c704:	4283      	cmp	r3, r0
 800c706:	d3f3      	bcc.n	800c6f0 <__mcmp+0x18>
 800c708:	e7fa      	b.n	800c700 <__mcmp+0x28>
 800c70a:	f04f 32ff 	mov.w	r2, #4294967295
 800c70e:	e7f7      	b.n	800c700 <__mcmp+0x28>

0800c710 <__mdiff>:
 800c710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	4606      	mov	r6, r0
 800c718:	4611      	mov	r1, r2
 800c71a:	4620      	mov	r0, r4
 800c71c:	4617      	mov	r7, r2
 800c71e:	f7ff ffdb 	bl	800c6d8 <__mcmp>
 800c722:	1e05      	subs	r5, r0, #0
 800c724:	d110      	bne.n	800c748 <__mdiff+0x38>
 800c726:	4629      	mov	r1, r5
 800c728:	4630      	mov	r0, r6
 800c72a:	f7ff fd0d 	bl	800c148 <_Balloc>
 800c72e:	b930      	cbnz	r0, 800c73e <__mdiff+0x2e>
 800c730:	4b39      	ldr	r3, [pc, #228]	; (800c818 <__mdiff+0x108>)
 800c732:	4602      	mov	r2, r0
 800c734:	f240 2132 	movw	r1, #562	; 0x232
 800c738:	4838      	ldr	r0, [pc, #224]	; (800c81c <__mdiff+0x10c>)
 800c73a:	f000 fc61 	bl	800d000 <__assert_func>
 800c73e:	2301      	movs	r3, #1
 800c740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	bfa4      	itt	ge
 800c74a:	463b      	movge	r3, r7
 800c74c:	4627      	movge	r7, r4
 800c74e:	4630      	mov	r0, r6
 800c750:	6879      	ldr	r1, [r7, #4]
 800c752:	bfa6      	itte	ge
 800c754:	461c      	movge	r4, r3
 800c756:	2500      	movge	r5, #0
 800c758:	2501      	movlt	r5, #1
 800c75a:	f7ff fcf5 	bl	800c148 <_Balloc>
 800c75e:	b920      	cbnz	r0, 800c76a <__mdiff+0x5a>
 800c760:	4b2d      	ldr	r3, [pc, #180]	; (800c818 <__mdiff+0x108>)
 800c762:	4602      	mov	r2, r0
 800c764:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c768:	e7e6      	b.n	800c738 <__mdiff+0x28>
 800c76a:	693e      	ldr	r6, [r7, #16]
 800c76c:	60c5      	str	r5, [r0, #12]
 800c76e:	6925      	ldr	r5, [r4, #16]
 800c770:	f107 0114 	add.w	r1, r7, #20
 800c774:	f104 0914 	add.w	r9, r4, #20
 800c778:	f100 0e14 	add.w	lr, r0, #20
 800c77c:	f107 0210 	add.w	r2, r7, #16
 800c780:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c784:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c788:	46f2      	mov	sl, lr
 800c78a:	2700      	movs	r7, #0
 800c78c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c794:	fa1f f883 	uxth.w	r8, r3
 800c798:	fa17 f78b 	uxtah	r7, r7, fp
 800c79c:	0c1b      	lsrs	r3, r3, #16
 800c79e:	eba7 0808 	sub.w	r8, r7, r8
 800c7a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c7a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c7aa:	fa1f f888 	uxth.w	r8, r8
 800c7ae:	141f      	asrs	r7, r3, #16
 800c7b0:	454d      	cmp	r5, r9
 800c7b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c7b6:	f84a 3b04 	str.w	r3, [sl], #4
 800c7ba:	d8e7      	bhi.n	800c78c <__mdiff+0x7c>
 800c7bc:	1b2b      	subs	r3, r5, r4
 800c7be:	3b15      	subs	r3, #21
 800c7c0:	f023 0303 	bic.w	r3, r3, #3
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	3415      	adds	r4, #21
 800c7c8:	42a5      	cmp	r5, r4
 800c7ca:	bf38      	it	cc
 800c7cc:	2304      	movcc	r3, #4
 800c7ce:	4419      	add	r1, r3
 800c7d0:	4473      	add	r3, lr
 800c7d2:	469e      	mov	lr, r3
 800c7d4:	460d      	mov	r5, r1
 800c7d6:	4565      	cmp	r5, ip
 800c7d8:	d30e      	bcc.n	800c7f8 <__mdiff+0xe8>
 800c7da:	f10c 0203 	add.w	r2, ip, #3
 800c7de:	1a52      	subs	r2, r2, r1
 800c7e0:	f022 0203 	bic.w	r2, r2, #3
 800c7e4:	3903      	subs	r1, #3
 800c7e6:	458c      	cmp	ip, r1
 800c7e8:	bf38      	it	cc
 800c7ea:	2200      	movcc	r2, #0
 800c7ec:	441a      	add	r2, r3
 800c7ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c7f2:	b17b      	cbz	r3, 800c814 <__mdiff+0x104>
 800c7f4:	6106      	str	r6, [r0, #16]
 800c7f6:	e7a5      	b.n	800c744 <__mdiff+0x34>
 800c7f8:	f855 8b04 	ldr.w	r8, [r5], #4
 800c7fc:	fa17 f488 	uxtah	r4, r7, r8
 800c800:	1422      	asrs	r2, r4, #16
 800c802:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c806:	b2a4      	uxth	r4, r4
 800c808:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c80c:	f84e 4b04 	str.w	r4, [lr], #4
 800c810:	1417      	asrs	r7, r2, #16
 800c812:	e7e0      	b.n	800c7d6 <__mdiff+0xc6>
 800c814:	3e01      	subs	r6, #1
 800c816:	e7ea      	b.n	800c7ee <__mdiff+0xde>
 800c818:	0800ec54 	.word	0x0800ec54
 800c81c:	0800ed48 	.word	0x0800ed48

0800c820 <__ulp>:
 800c820:	b082      	sub	sp, #8
 800c822:	ed8d 0b00 	vstr	d0, [sp]
 800c826:	9b01      	ldr	r3, [sp, #4]
 800c828:	4912      	ldr	r1, [pc, #72]	; (800c874 <__ulp+0x54>)
 800c82a:	4019      	ands	r1, r3
 800c82c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c830:	2900      	cmp	r1, #0
 800c832:	dd05      	ble.n	800c840 <__ulp+0x20>
 800c834:	2200      	movs	r2, #0
 800c836:	460b      	mov	r3, r1
 800c838:	ec43 2b10 	vmov	d0, r2, r3
 800c83c:	b002      	add	sp, #8
 800c83e:	4770      	bx	lr
 800c840:	4249      	negs	r1, r1
 800c842:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c846:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c84a:	f04f 0200 	mov.w	r2, #0
 800c84e:	f04f 0300 	mov.w	r3, #0
 800c852:	da04      	bge.n	800c85e <__ulp+0x3e>
 800c854:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c858:	fa41 f300 	asr.w	r3, r1, r0
 800c85c:	e7ec      	b.n	800c838 <__ulp+0x18>
 800c85e:	f1a0 0114 	sub.w	r1, r0, #20
 800c862:	291e      	cmp	r1, #30
 800c864:	bfda      	itte	le
 800c866:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c86a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c86e:	2101      	movgt	r1, #1
 800c870:	460a      	mov	r2, r1
 800c872:	e7e1      	b.n	800c838 <__ulp+0x18>
 800c874:	7ff00000 	.word	0x7ff00000

0800c878 <__b2d>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	6905      	ldr	r5, [r0, #16]
 800c87c:	f100 0714 	add.w	r7, r0, #20
 800c880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c884:	1f2e      	subs	r6, r5, #4
 800c886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c88a:	4620      	mov	r0, r4
 800c88c:	f7ff fd52 	bl	800c334 <__hi0bits>
 800c890:	f1c0 0320 	rsb	r3, r0, #32
 800c894:	280a      	cmp	r0, #10
 800c896:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c914 <__b2d+0x9c>
 800c89a:	600b      	str	r3, [r1, #0]
 800c89c:	dc14      	bgt.n	800c8c8 <__b2d+0x50>
 800c89e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c8a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800c8a6:	42b7      	cmp	r7, r6
 800c8a8:	ea41 030c 	orr.w	r3, r1, ip
 800c8ac:	bf34      	ite	cc
 800c8ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c8b2:	2100      	movcs	r1, #0
 800c8b4:	3015      	adds	r0, #21
 800c8b6:	fa04 f000 	lsl.w	r0, r4, r0
 800c8ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800c8be:	ea40 0201 	orr.w	r2, r0, r1
 800c8c2:	ec43 2b10 	vmov	d0, r2, r3
 800c8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8c8:	42b7      	cmp	r7, r6
 800c8ca:	bf3a      	itte	cc
 800c8cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c8d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c8d4:	2100      	movcs	r1, #0
 800c8d6:	380b      	subs	r0, #11
 800c8d8:	d017      	beq.n	800c90a <__b2d+0x92>
 800c8da:	f1c0 0c20 	rsb	ip, r0, #32
 800c8de:	fa04 f500 	lsl.w	r5, r4, r0
 800c8e2:	42be      	cmp	r6, r7
 800c8e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800c8e8:	ea45 0504 	orr.w	r5, r5, r4
 800c8ec:	bf8c      	ite	hi
 800c8ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c8f2:	2400      	movls	r4, #0
 800c8f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c8f8:	fa01 f000 	lsl.w	r0, r1, r0
 800c8fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800c900:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c904:	ea40 0204 	orr.w	r2, r0, r4
 800c908:	e7db      	b.n	800c8c2 <__b2d+0x4a>
 800c90a:	ea44 030c 	orr.w	r3, r4, ip
 800c90e:	460a      	mov	r2, r1
 800c910:	e7d7      	b.n	800c8c2 <__b2d+0x4a>
 800c912:	bf00      	nop
 800c914:	3ff00000 	.word	0x3ff00000

0800c918 <__d2b>:
 800c918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	4689      	mov	r9, r1
 800c91e:	2101      	movs	r1, #1
 800c920:	ec57 6b10 	vmov	r6, r7, d0
 800c924:	4690      	mov	r8, r2
 800c926:	f7ff fc0f 	bl	800c148 <_Balloc>
 800c92a:	4604      	mov	r4, r0
 800c92c:	b930      	cbnz	r0, 800c93c <__d2b+0x24>
 800c92e:	4602      	mov	r2, r0
 800c930:	4b25      	ldr	r3, [pc, #148]	; (800c9c8 <__d2b+0xb0>)
 800c932:	4826      	ldr	r0, [pc, #152]	; (800c9cc <__d2b+0xb4>)
 800c934:	f240 310a 	movw	r1, #778	; 0x30a
 800c938:	f000 fb62 	bl	800d000 <__assert_func>
 800c93c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c944:	bb35      	cbnz	r5, 800c994 <__d2b+0x7c>
 800c946:	2e00      	cmp	r6, #0
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	d028      	beq.n	800c99e <__d2b+0x86>
 800c94c:	4668      	mov	r0, sp
 800c94e:	9600      	str	r6, [sp, #0]
 800c950:	f7ff fd10 	bl	800c374 <__lo0bits>
 800c954:	9900      	ldr	r1, [sp, #0]
 800c956:	b300      	cbz	r0, 800c99a <__d2b+0x82>
 800c958:	9a01      	ldr	r2, [sp, #4]
 800c95a:	f1c0 0320 	rsb	r3, r0, #32
 800c95e:	fa02 f303 	lsl.w	r3, r2, r3
 800c962:	430b      	orrs	r3, r1
 800c964:	40c2      	lsrs	r2, r0
 800c966:	6163      	str	r3, [r4, #20]
 800c968:	9201      	str	r2, [sp, #4]
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	61a3      	str	r3, [r4, #24]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	bf14      	ite	ne
 800c972:	2202      	movne	r2, #2
 800c974:	2201      	moveq	r2, #1
 800c976:	6122      	str	r2, [r4, #16]
 800c978:	b1d5      	cbz	r5, 800c9b0 <__d2b+0x98>
 800c97a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c97e:	4405      	add	r5, r0
 800c980:	f8c9 5000 	str.w	r5, [r9]
 800c984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c988:	f8c8 0000 	str.w	r0, [r8]
 800c98c:	4620      	mov	r0, r4
 800c98e:	b003      	add	sp, #12
 800c990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c998:	e7d5      	b.n	800c946 <__d2b+0x2e>
 800c99a:	6161      	str	r1, [r4, #20]
 800c99c:	e7e5      	b.n	800c96a <__d2b+0x52>
 800c99e:	a801      	add	r0, sp, #4
 800c9a0:	f7ff fce8 	bl	800c374 <__lo0bits>
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	6163      	str	r3, [r4, #20]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	6122      	str	r2, [r4, #16]
 800c9ac:	3020      	adds	r0, #32
 800c9ae:	e7e3      	b.n	800c978 <__d2b+0x60>
 800c9b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9b8:	f8c9 0000 	str.w	r0, [r9]
 800c9bc:	6918      	ldr	r0, [r3, #16]
 800c9be:	f7ff fcb9 	bl	800c334 <__hi0bits>
 800c9c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9c6:	e7df      	b.n	800c988 <__d2b+0x70>
 800c9c8:	0800ec54 	.word	0x0800ec54
 800c9cc:	0800ed48 	.word	0x0800ed48

0800c9d0 <__ratio>:
 800c9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	4688      	mov	r8, r1
 800c9d6:	4669      	mov	r1, sp
 800c9d8:	4681      	mov	r9, r0
 800c9da:	f7ff ff4d 	bl	800c878 <__b2d>
 800c9de:	a901      	add	r1, sp, #4
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	ec55 4b10 	vmov	r4, r5, d0
 800c9e6:	f7ff ff47 	bl	800c878 <__b2d>
 800c9ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9f2:	eba3 0c02 	sub.w	ip, r3, r2
 800c9f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca00:	ec51 0b10 	vmov	r0, r1, d0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	bfd6      	itet	le
 800ca08:	460a      	movle	r2, r1
 800ca0a:	462a      	movgt	r2, r5
 800ca0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca10:	468b      	mov	fp, r1
 800ca12:	462f      	mov	r7, r5
 800ca14:	bfd4      	ite	le
 800ca16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca1e:	4620      	mov	r0, r4
 800ca20:	ee10 2a10 	vmov	r2, s0
 800ca24:	465b      	mov	r3, fp
 800ca26:	4639      	mov	r1, r7
 800ca28:	f7f3 ff38 	bl	800089c <__aeabi_ddiv>
 800ca2c:	ec41 0b10 	vmov	d0, r0, r1
 800ca30:	b003      	add	sp, #12
 800ca32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca36 <__copybits>:
 800ca36:	3901      	subs	r1, #1
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	1149      	asrs	r1, r1, #5
 800ca3c:	6914      	ldr	r4, [r2, #16]
 800ca3e:	3101      	adds	r1, #1
 800ca40:	f102 0314 	add.w	r3, r2, #20
 800ca44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca4c:	1f05      	subs	r5, r0, #4
 800ca4e:	42a3      	cmp	r3, r4
 800ca50:	d30c      	bcc.n	800ca6c <__copybits+0x36>
 800ca52:	1aa3      	subs	r3, r4, r2
 800ca54:	3b11      	subs	r3, #17
 800ca56:	f023 0303 	bic.w	r3, r3, #3
 800ca5a:	3211      	adds	r2, #17
 800ca5c:	42a2      	cmp	r2, r4
 800ca5e:	bf88      	it	hi
 800ca60:	2300      	movhi	r3, #0
 800ca62:	4418      	add	r0, r3
 800ca64:	2300      	movs	r3, #0
 800ca66:	4288      	cmp	r0, r1
 800ca68:	d305      	bcc.n	800ca76 <__copybits+0x40>
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}
 800ca6c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca70:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca74:	e7eb      	b.n	800ca4e <__copybits+0x18>
 800ca76:	f840 3b04 	str.w	r3, [r0], #4
 800ca7a:	e7f4      	b.n	800ca66 <__copybits+0x30>

0800ca7c <__any_on>:
 800ca7c:	f100 0214 	add.w	r2, r0, #20
 800ca80:	6900      	ldr	r0, [r0, #16]
 800ca82:	114b      	asrs	r3, r1, #5
 800ca84:	4298      	cmp	r0, r3
 800ca86:	b510      	push	{r4, lr}
 800ca88:	db11      	blt.n	800caae <__any_on+0x32>
 800ca8a:	dd0a      	ble.n	800caa2 <__any_on+0x26>
 800ca8c:	f011 011f 	ands.w	r1, r1, #31
 800ca90:	d007      	beq.n	800caa2 <__any_on+0x26>
 800ca92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca96:	fa24 f001 	lsr.w	r0, r4, r1
 800ca9a:	fa00 f101 	lsl.w	r1, r0, r1
 800ca9e:	428c      	cmp	r4, r1
 800caa0:	d10b      	bne.n	800caba <__any_on+0x3e>
 800caa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d803      	bhi.n	800cab2 <__any_on+0x36>
 800caaa:	2000      	movs	r0, #0
 800caac:	bd10      	pop	{r4, pc}
 800caae:	4603      	mov	r3, r0
 800cab0:	e7f7      	b.n	800caa2 <__any_on+0x26>
 800cab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cab6:	2900      	cmp	r1, #0
 800cab8:	d0f5      	beq.n	800caa6 <__any_on+0x2a>
 800caba:	2001      	movs	r0, #1
 800cabc:	e7f6      	b.n	800caac <__any_on+0x30>

0800cabe <_calloc_r>:
 800cabe:	b513      	push	{r0, r1, r4, lr}
 800cac0:	434a      	muls	r2, r1
 800cac2:	4611      	mov	r1, r2
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	f000 f859 	bl	800cb7c <_malloc_r>
 800caca:	4604      	mov	r4, r0
 800cacc:	b118      	cbz	r0, 800cad6 <_calloc_r+0x18>
 800cace:	9a01      	ldr	r2, [sp, #4]
 800cad0:	2100      	movs	r1, #0
 800cad2:	f7fc fa93 	bl	8008ffc <memset>
 800cad6:	4620      	mov	r0, r4
 800cad8:	b002      	add	sp, #8
 800cada:	bd10      	pop	{r4, pc}

0800cadc <_free_r>:
 800cadc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cade:	2900      	cmp	r1, #0
 800cae0:	d048      	beq.n	800cb74 <_free_r+0x98>
 800cae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cae6:	9001      	str	r0, [sp, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f1a1 0404 	sub.w	r4, r1, #4
 800caee:	bfb8      	it	lt
 800caf0:	18e4      	addlt	r4, r4, r3
 800caf2:	f000 faf9 	bl	800d0e8 <__malloc_lock>
 800caf6:	4a20      	ldr	r2, [pc, #128]	; (800cb78 <_free_r+0x9c>)
 800caf8:	9801      	ldr	r0, [sp, #4]
 800cafa:	6813      	ldr	r3, [r2, #0]
 800cafc:	4615      	mov	r5, r2
 800cafe:	b933      	cbnz	r3, 800cb0e <_free_r+0x32>
 800cb00:	6063      	str	r3, [r4, #4]
 800cb02:	6014      	str	r4, [r2, #0]
 800cb04:	b003      	add	sp, #12
 800cb06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb0a:	f000 baf3 	b.w	800d0f4 <__malloc_unlock>
 800cb0e:	42a3      	cmp	r3, r4
 800cb10:	d90b      	bls.n	800cb2a <_free_r+0x4e>
 800cb12:	6821      	ldr	r1, [r4, #0]
 800cb14:	1862      	adds	r2, r4, r1
 800cb16:	4293      	cmp	r3, r2
 800cb18:	bf04      	itt	eq
 800cb1a:	681a      	ldreq	r2, [r3, #0]
 800cb1c:	685b      	ldreq	r3, [r3, #4]
 800cb1e:	6063      	str	r3, [r4, #4]
 800cb20:	bf04      	itt	eq
 800cb22:	1852      	addeq	r2, r2, r1
 800cb24:	6022      	streq	r2, [r4, #0]
 800cb26:	602c      	str	r4, [r5, #0]
 800cb28:	e7ec      	b.n	800cb04 <_free_r+0x28>
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	b10b      	cbz	r3, 800cb34 <_free_r+0x58>
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	d9fa      	bls.n	800cb2a <_free_r+0x4e>
 800cb34:	6811      	ldr	r1, [r2, #0]
 800cb36:	1855      	adds	r5, r2, r1
 800cb38:	42a5      	cmp	r5, r4
 800cb3a:	d10b      	bne.n	800cb54 <_free_r+0x78>
 800cb3c:	6824      	ldr	r4, [r4, #0]
 800cb3e:	4421      	add	r1, r4
 800cb40:	1854      	adds	r4, r2, r1
 800cb42:	42a3      	cmp	r3, r4
 800cb44:	6011      	str	r1, [r2, #0]
 800cb46:	d1dd      	bne.n	800cb04 <_free_r+0x28>
 800cb48:	681c      	ldr	r4, [r3, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	6053      	str	r3, [r2, #4]
 800cb4e:	4421      	add	r1, r4
 800cb50:	6011      	str	r1, [r2, #0]
 800cb52:	e7d7      	b.n	800cb04 <_free_r+0x28>
 800cb54:	d902      	bls.n	800cb5c <_free_r+0x80>
 800cb56:	230c      	movs	r3, #12
 800cb58:	6003      	str	r3, [r0, #0]
 800cb5a:	e7d3      	b.n	800cb04 <_free_r+0x28>
 800cb5c:	6825      	ldr	r5, [r4, #0]
 800cb5e:	1961      	adds	r1, r4, r5
 800cb60:	428b      	cmp	r3, r1
 800cb62:	bf04      	itt	eq
 800cb64:	6819      	ldreq	r1, [r3, #0]
 800cb66:	685b      	ldreq	r3, [r3, #4]
 800cb68:	6063      	str	r3, [r4, #4]
 800cb6a:	bf04      	itt	eq
 800cb6c:	1949      	addeq	r1, r1, r5
 800cb6e:	6021      	streq	r1, [r4, #0]
 800cb70:	6054      	str	r4, [r2, #4]
 800cb72:	e7c7      	b.n	800cb04 <_free_r+0x28>
 800cb74:	b003      	add	sp, #12
 800cb76:	bd30      	pop	{r4, r5, pc}
 800cb78:	20000238 	.word	0x20000238

0800cb7c <_malloc_r>:
 800cb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7e:	1ccd      	adds	r5, r1, #3
 800cb80:	f025 0503 	bic.w	r5, r5, #3
 800cb84:	3508      	adds	r5, #8
 800cb86:	2d0c      	cmp	r5, #12
 800cb88:	bf38      	it	cc
 800cb8a:	250c      	movcc	r5, #12
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	4606      	mov	r6, r0
 800cb90:	db01      	blt.n	800cb96 <_malloc_r+0x1a>
 800cb92:	42a9      	cmp	r1, r5
 800cb94:	d903      	bls.n	800cb9e <_malloc_r+0x22>
 800cb96:	230c      	movs	r3, #12
 800cb98:	6033      	str	r3, [r6, #0]
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb9e:	f000 faa3 	bl	800d0e8 <__malloc_lock>
 800cba2:	4921      	ldr	r1, [pc, #132]	; (800cc28 <_malloc_r+0xac>)
 800cba4:	680a      	ldr	r2, [r1, #0]
 800cba6:	4614      	mov	r4, r2
 800cba8:	b99c      	cbnz	r4, 800cbd2 <_malloc_r+0x56>
 800cbaa:	4f20      	ldr	r7, [pc, #128]	; (800cc2c <_malloc_r+0xb0>)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	b923      	cbnz	r3, 800cbba <_malloc_r+0x3e>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	f000 f9a0 	bl	800cef8 <_sbrk_r>
 800cbb8:	6038      	str	r0, [r7, #0]
 800cbba:	4629      	mov	r1, r5
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	f000 f99b 	bl	800cef8 <_sbrk_r>
 800cbc2:	1c43      	adds	r3, r0, #1
 800cbc4:	d123      	bne.n	800cc0e <_malloc_r+0x92>
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	6033      	str	r3, [r6, #0]
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f000 fa92 	bl	800d0f4 <__malloc_unlock>
 800cbd0:	e7e3      	b.n	800cb9a <_malloc_r+0x1e>
 800cbd2:	6823      	ldr	r3, [r4, #0]
 800cbd4:	1b5b      	subs	r3, r3, r5
 800cbd6:	d417      	bmi.n	800cc08 <_malloc_r+0x8c>
 800cbd8:	2b0b      	cmp	r3, #11
 800cbda:	d903      	bls.n	800cbe4 <_malloc_r+0x68>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	441c      	add	r4, r3
 800cbe0:	6025      	str	r5, [r4, #0]
 800cbe2:	e004      	b.n	800cbee <_malloc_r+0x72>
 800cbe4:	6863      	ldr	r3, [r4, #4]
 800cbe6:	42a2      	cmp	r2, r4
 800cbe8:	bf0c      	ite	eq
 800cbea:	600b      	streq	r3, [r1, #0]
 800cbec:	6053      	strne	r3, [r2, #4]
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f000 fa80 	bl	800d0f4 <__malloc_unlock>
 800cbf4:	f104 000b 	add.w	r0, r4, #11
 800cbf8:	1d23      	adds	r3, r4, #4
 800cbfa:	f020 0007 	bic.w	r0, r0, #7
 800cbfe:	1ac2      	subs	r2, r0, r3
 800cc00:	d0cc      	beq.n	800cb9c <_malloc_r+0x20>
 800cc02:	1a1b      	subs	r3, r3, r0
 800cc04:	50a3      	str	r3, [r4, r2]
 800cc06:	e7c9      	b.n	800cb9c <_malloc_r+0x20>
 800cc08:	4622      	mov	r2, r4
 800cc0a:	6864      	ldr	r4, [r4, #4]
 800cc0c:	e7cc      	b.n	800cba8 <_malloc_r+0x2c>
 800cc0e:	1cc4      	adds	r4, r0, #3
 800cc10:	f024 0403 	bic.w	r4, r4, #3
 800cc14:	42a0      	cmp	r0, r4
 800cc16:	d0e3      	beq.n	800cbe0 <_malloc_r+0x64>
 800cc18:	1a21      	subs	r1, r4, r0
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f000 f96c 	bl	800cef8 <_sbrk_r>
 800cc20:	3001      	adds	r0, #1
 800cc22:	d1dd      	bne.n	800cbe0 <_malloc_r+0x64>
 800cc24:	e7cf      	b.n	800cbc6 <_malloc_r+0x4a>
 800cc26:	bf00      	nop
 800cc28:	20000238 	.word	0x20000238
 800cc2c:	2000023c 	.word	0x2000023c

0800cc30 <__sfputc_r>:
 800cc30:	6893      	ldr	r3, [r2, #8]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	b410      	push	{r4}
 800cc38:	6093      	str	r3, [r2, #8]
 800cc3a:	da08      	bge.n	800cc4e <__sfputc_r+0x1e>
 800cc3c:	6994      	ldr	r4, [r2, #24]
 800cc3e:	42a3      	cmp	r3, r4
 800cc40:	db01      	blt.n	800cc46 <__sfputc_r+0x16>
 800cc42:	290a      	cmp	r1, #10
 800cc44:	d103      	bne.n	800cc4e <__sfputc_r+0x1e>
 800cc46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc4a:	f7fd bd99 	b.w	800a780 <__swbuf_r>
 800cc4e:	6813      	ldr	r3, [r2, #0]
 800cc50:	1c58      	adds	r0, r3, #1
 800cc52:	6010      	str	r0, [r2, #0]
 800cc54:	7019      	strb	r1, [r3, #0]
 800cc56:	4608      	mov	r0, r1
 800cc58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <__sfputs_r>:
 800cc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc60:	4606      	mov	r6, r0
 800cc62:	460f      	mov	r7, r1
 800cc64:	4614      	mov	r4, r2
 800cc66:	18d5      	adds	r5, r2, r3
 800cc68:	42ac      	cmp	r4, r5
 800cc6a:	d101      	bne.n	800cc70 <__sfputs_r+0x12>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	e007      	b.n	800cc80 <__sfputs_r+0x22>
 800cc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc74:	463a      	mov	r2, r7
 800cc76:	4630      	mov	r0, r6
 800cc78:	f7ff ffda 	bl	800cc30 <__sfputc_r>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d1f3      	bne.n	800cc68 <__sfputs_r+0xa>
 800cc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc84 <_vfiprintf_r>:
 800cc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc88:	460d      	mov	r5, r1
 800cc8a:	b09d      	sub	sp, #116	; 0x74
 800cc8c:	4614      	mov	r4, r2
 800cc8e:	4698      	mov	r8, r3
 800cc90:	4606      	mov	r6, r0
 800cc92:	b118      	cbz	r0, 800cc9c <_vfiprintf_r+0x18>
 800cc94:	6983      	ldr	r3, [r0, #24]
 800cc96:	b90b      	cbnz	r3, 800cc9c <_vfiprintf_r+0x18>
 800cc98:	f7fe fdc4 	bl	800b824 <__sinit>
 800cc9c:	4b89      	ldr	r3, [pc, #548]	; (800cec4 <_vfiprintf_r+0x240>)
 800cc9e:	429d      	cmp	r5, r3
 800cca0:	d11b      	bne.n	800ccda <_vfiprintf_r+0x56>
 800cca2:	6875      	ldr	r5, [r6, #4]
 800cca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca6:	07d9      	lsls	r1, r3, #31
 800cca8:	d405      	bmi.n	800ccb6 <_vfiprintf_r+0x32>
 800ccaa:	89ab      	ldrh	r3, [r5, #12]
 800ccac:	059a      	lsls	r2, r3, #22
 800ccae:	d402      	bmi.n	800ccb6 <_vfiprintf_r+0x32>
 800ccb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccb2:	f7ff f9c8 	bl	800c046 <__retarget_lock_acquire_recursive>
 800ccb6:	89ab      	ldrh	r3, [r5, #12]
 800ccb8:	071b      	lsls	r3, r3, #28
 800ccba:	d501      	bpl.n	800ccc0 <_vfiprintf_r+0x3c>
 800ccbc:	692b      	ldr	r3, [r5, #16]
 800ccbe:	b9eb      	cbnz	r3, 800ccfc <_vfiprintf_r+0x78>
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7fd fdae 	bl	800a824 <__swsetup_r>
 800ccc8:	b1c0      	cbz	r0, 800ccfc <_vfiprintf_r+0x78>
 800ccca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cccc:	07dc      	lsls	r4, r3, #31
 800ccce:	d50e      	bpl.n	800ccee <_vfiprintf_r+0x6a>
 800ccd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd4:	b01d      	add	sp, #116	; 0x74
 800ccd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccda:	4b7b      	ldr	r3, [pc, #492]	; (800cec8 <_vfiprintf_r+0x244>)
 800ccdc:	429d      	cmp	r5, r3
 800ccde:	d101      	bne.n	800cce4 <_vfiprintf_r+0x60>
 800cce0:	68b5      	ldr	r5, [r6, #8]
 800cce2:	e7df      	b.n	800cca4 <_vfiprintf_r+0x20>
 800cce4:	4b79      	ldr	r3, [pc, #484]	; (800cecc <_vfiprintf_r+0x248>)
 800cce6:	429d      	cmp	r5, r3
 800cce8:	bf08      	it	eq
 800ccea:	68f5      	ldreq	r5, [r6, #12]
 800ccec:	e7da      	b.n	800cca4 <_vfiprintf_r+0x20>
 800ccee:	89ab      	ldrh	r3, [r5, #12]
 800ccf0:	0598      	lsls	r0, r3, #22
 800ccf2:	d4ed      	bmi.n	800ccd0 <_vfiprintf_r+0x4c>
 800ccf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccf6:	f7ff f9a7 	bl	800c048 <__retarget_lock_release_recursive>
 800ccfa:	e7e9      	b.n	800ccd0 <_vfiprintf_r+0x4c>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9309      	str	r3, [sp, #36]	; 0x24
 800cd00:	2320      	movs	r3, #32
 800cd02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd06:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd0a:	2330      	movs	r3, #48	; 0x30
 800cd0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ced0 <_vfiprintf_r+0x24c>
 800cd10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd14:	f04f 0901 	mov.w	r9, #1
 800cd18:	4623      	mov	r3, r4
 800cd1a:	469a      	mov	sl, r3
 800cd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd20:	b10a      	cbz	r2, 800cd26 <_vfiprintf_r+0xa2>
 800cd22:	2a25      	cmp	r2, #37	; 0x25
 800cd24:	d1f9      	bne.n	800cd1a <_vfiprintf_r+0x96>
 800cd26:	ebba 0b04 	subs.w	fp, sl, r4
 800cd2a:	d00b      	beq.n	800cd44 <_vfiprintf_r+0xc0>
 800cd2c:	465b      	mov	r3, fp
 800cd2e:	4622      	mov	r2, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	4630      	mov	r0, r6
 800cd34:	f7ff ff93 	bl	800cc5e <__sfputs_r>
 800cd38:	3001      	adds	r0, #1
 800cd3a:	f000 80aa 	beq.w	800ce92 <_vfiprintf_r+0x20e>
 800cd3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd40:	445a      	add	r2, fp
 800cd42:	9209      	str	r2, [sp, #36]	; 0x24
 800cd44:	f89a 3000 	ldrb.w	r3, [sl]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 80a2 	beq.w	800ce92 <_vfiprintf_r+0x20e>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	f04f 32ff 	mov.w	r2, #4294967295
 800cd54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd58:	f10a 0a01 	add.w	sl, sl, #1
 800cd5c:	9304      	str	r3, [sp, #16]
 800cd5e:	9307      	str	r3, [sp, #28]
 800cd60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd64:	931a      	str	r3, [sp, #104]	; 0x68
 800cd66:	4654      	mov	r4, sl
 800cd68:	2205      	movs	r2, #5
 800cd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6e:	4858      	ldr	r0, [pc, #352]	; (800ced0 <_vfiprintf_r+0x24c>)
 800cd70:	f7f3 fa5e 	bl	8000230 <memchr>
 800cd74:	9a04      	ldr	r2, [sp, #16]
 800cd76:	b9d8      	cbnz	r0, 800cdb0 <_vfiprintf_r+0x12c>
 800cd78:	06d1      	lsls	r1, r2, #27
 800cd7a:	bf44      	itt	mi
 800cd7c:	2320      	movmi	r3, #32
 800cd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd82:	0713      	lsls	r3, r2, #28
 800cd84:	bf44      	itt	mi
 800cd86:	232b      	movmi	r3, #43	; 0x2b
 800cd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd90:	2b2a      	cmp	r3, #42	; 0x2a
 800cd92:	d015      	beq.n	800cdc0 <_vfiprintf_r+0x13c>
 800cd94:	9a07      	ldr	r2, [sp, #28]
 800cd96:	4654      	mov	r4, sl
 800cd98:	2000      	movs	r0, #0
 800cd9a:	f04f 0c0a 	mov.w	ip, #10
 800cd9e:	4621      	mov	r1, r4
 800cda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cda4:	3b30      	subs	r3, #48	; 0x30
 800cda6:	2b09      	cmp	r3, #9
 800cda8:	d94e      	bls.n	800ce48 <_vfiprintf_r+0x1c4>
 800cdaa:	b1b0      	cbz	r0, 800cdda <_vfiprintf_r+0x156>
 800cdac:	9207      	str	r2, [sp, #28]
 800cdae:	e014      	b.n	800cdda <_vfiprintf_r+0x156>
 800cdb0:	eba0 0308 	sub.w	r3, r0, r8
 800cdb4:	fa09 f303 	lsl.w	r3, r9, r3
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	9304      	str	r3, [sp, #16]
 800cdbc:	46a2      	mov	sl, r4
 800cdbe:	e7d2      	b.n	800cd66 <_vfiprintf_r+0xe2>
 800cdc0:	9b03      	ldr	r3, [sp, #12]
 800cdc2:	1d19      	adds	r1, r3, #4
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	9103      	str	r1, [sp, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	bfbb      	ittet	lt
 800cdcc:	425b      	neglt	r3, r3
 800cdce:	f042 0202 	orrlt.w	r2, r2, #2
 800cdd2:	9307      	strge	r3, [sp, #28]
 800cdd4:	9307      	strlt	r3, [sp, #28]
 800cdd6:	bfb8      	it	lt
 800cdd8:	9204      	strlt	r2, [sp, #16]
 800cdda:	7823      	ldrb	r3, [r4, #0]
 800cddc:	2b2e      	cmp	r3, #46	; 0x2e
 800cdde:	d10c      	bne.n	800cdfa <_vfiprintf_r+0x176>
 800cde0:	7863      	ldrb	r3, [r4, #1]
 800cde2:	2b2a      	cmp	r3, #42	; 0x2a
 800cde4:	d135      	bne.n	800ce52 <_vfiprintf_r+0x1ce>
 800cde6:	9b03      	ldr	r3, [sp, #12]
 800cde8:	1d1a      	adds	r2, r3, #4
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	9203      	str	r2, [sp, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bfb8      	it	lt
 800cdf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdf6:	3402      	adds	r4, #2
 800cdf8:	9305      	str	r3, [sp, #20]
 800cdfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cee0 <_vfiprintf_r+0x25c>
 800cdfe:	7821      	ldrb	r1, [r4, #0]
 800ce00:	2203      	movs	r2, #3
 800ce02:	4650      	mov	r0, sl
 800ce04:	f7f3 fa14 	bl	8000230 <memchr>
 800ce08:	b140      	cbz	r0, 800ce1c <_vfiprintf_r+0x198>
 800ce0a:	2340      	movs	r3, #64	; 0x40
 800ce0c:	eba0 000a 	sub.w	r0, r0, sl
 800ce10:	fa03 f000 	lsl.w	r0, r3, r0
 800ce14:	9b04      	ldr	r3, [sp, #16]
 800ce16:	4303      	orrs	r3, r0
 800ce18:	3401      	adds	r4, #1
 800ce1a:	9304      	str	r3, [sp, #16]
 800ce1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce20:	482c      	ldr	r0, [pc, #176]	; (800ced4 <_vfiprintf_r+0x250>)
 800ce22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce26:	2206      	movs	r2, #6
 800ce28:	f7f3 fa02 	bl	8000230 <memchr>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d03f      	beq.n	800ceb0 <_vfiprintf_r+0x22c>
 800ce30:	4b29      	ldr	r3, [pc, #164]	; (800ced8 <_vfiprintf_r+0x254>)
 800ce32:	bb1b      	cbnz	r3, 800ce7c <_vfiprintf_r+0x1f8>
 800ce34:	9b03      	ldr	r3, [sp, #12]
 800ce36:	3307      	adds	r3, #7
 800ce38:	f023 0307 	bic.w	r3, r3, #7
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	9303      	str	r3, [sp, #12]
 800ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce42:	443b      	add	r3, r7
 800ce44:	9309      	str	r3, [sp, #36]	; 0x24
 800ce46:	e767      	b.n	800cd18 <_vfiprintf_r+0x94>
 800ce48:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	2001      	movs	r0, #1
 800ce50:	e7a5      	b.n	800cd9e <_vfiprintf_r+0x11a>
 800ce52:	2300      	movs	r3, #0
 800ce54:	3401      	adds	r4, #1
 800ce56:	9305      	str	r3, [sp, #20]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	f04f 0c0a 	mov.w	ip, #10
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce64:	3a30      	subs	r2, #48	; 0x30
 800ce66:	2a09      	cmp	r2, #9
 800ce68:	d903      	bls.n	800ce72 <_vfiprintf_r+0x1ee>
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d0c5      	beq.n	800cdfa <_vfiprintf_r+0x176>
 800ce6e:	9105      	str	r1, [sp, #20]
 800ce70:	e7c3      	b.n	800cdfa <_vfiprintf_r+0x176>
 800ce72:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce76:	4604      	mov	r4, r0
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e7f0      	b.n	800ce5e <_vfiprintf_r+0x1da>
 800ce7c:	ab03      	add	r3, sp, #12
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	462a      	mov	r2, r5
 800ce82:	4b16      	ldr	r3, [pc, #88]	; (800cedc <_vfiprintf_r+0x258>)
 800ce84:	a904      	add	r1, sp, #16
 800ce86:	4630      	mov	r0, r6
 800ce88:	f7fc f960 	bl	800914c <_printf_float>
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	1c78      	adds	r0, r7, #1
 800ce90:	d1d6      	bne.n	800ce40 <_vfiprintf_r+0x1bc>
 800ce92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce94:	07d9      	lsls	r1, r3, #31
 800ce96:	d405      	bmi.n	800cea4 <_vfiprintf_r+0x220>
 800ce98:	89ab      	ldrh	r3, [r5, #12]
 800ce9a:	059a      	lsls	r2, r3, #22
 800ce9c:	d402      	bmi.n	800cea4 <_vfiprintf_r+0x220>
 800ce9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cea0:	f7ff f8d2 	bl	800c048 <__retarget_lock_release_recursive>
 800cea4:	89ab      	ldrh	r3, [r5, #12]
 800cea6:	065b      	lsls	r3, r3, #25
 800cea8:	f53f af12 	bmi.w	800ccd0 <_vfiprintf_r+0x4c>
 800ceac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceae:	e711      	b.n	800ccd4 <_vfiprintf_r+0x50>
 800ceb0:	ab03      	add	r3, sp, #12
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	462a      	mov	r2, r5
 800ceb6:	4b09      	ldr	r3, [pc, #36]	; (800cedc <_vfiprintf_r+0x258>)
 800ceb8:	a904      	add	r1, sp, #16
 800ceba:	4630      	mov	r0, r6
 800cebc:	f7fc fbea 	bl	8009694 <_printf_i>
 800cec0:	e7e4      	b.n	800ce8c <_vfiprintf_r+0x208>
 800cec2:	bf00      	nop
 800cec4:	0800ec88 	.word	0x0800ec88
 800cec8:	0800eca8 	.word	0x0800eca8
 800cecc:	0800ec68 	.word	0x0800ec68
 800ced0:	0800eea4 	.word	0x0800eea4
 800ced4:	0800eeae 	.word	0x0800eeae
 800ced8:	0800914d 	.word	0x0800914d
 800cedc:	0800cc5f 	.word	0x0800cc5f
 800cee0:	0800eeaa 	.word	0x0800eeaa
 800cee4:	00000000 	.word	0x00000000

0800cee8 <nan>:
 800cee8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cef0 <nan+0x8>
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	00000000 	.word	0x00000000
 800cef4:	7ff80000 	.word	0x7ff80000

0800cef8 <_sbrk_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4d06      	ldr	r5, [pc, #24]	; (800cf14 <_sbrk_r+0x1c>)
 800cefc:	2300      	movs	r3, #0
 800cefe:	4604      	mov	r4, r0
 800cf00:	4608      	mov	r0, r1
 800cf02:	602b      	str	r3, [r5, #0]
 800cf04:	f7f7 f92c 	bl	8004160 <_sbrk>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_sbrk_r+0x1a>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_sbrk_r+0x1a>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	2000959c 	.word	0x2000959c

0800cf18 <__sread>:
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf20:	f000 f8ee 	bl	800d100 <_read_r>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	bfab      	itete	ge
 800cf28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf2a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf2c:	181b      	addge	r3, r3, r0
 800cf2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf32:	bfac      	ite	ge
 800cf34:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf36:	81a3      	strhlt	r3, [r4, #12]
 800cf38:	bd10      	pop	{r4, pc}

0800cf3a <__swrite>:
 800cf3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf3e:	461f      	mov	r7, r3
 800cf40:	898b      	ldrh	r3, [r1, #12]
 800cf42:	05db      	lsls	r3, r3, #23
 800cf44:	4605      	mov	r5, r0
 800cf46:	460c      	mov	r4, r1
 800cf48:	4616      	mov	r6, r2
 800cf4a:	d505      	bpl.n	800cf58 <__swrite+0x1e>
 800cf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf50:	2302      	movs	r3, #2
 800cf52:	2200      	movs	r2, #0
 800cf54:	f000 f8b6 	bl	800d0c4 <_lseek_r>
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf62:	81a3      	strh	r3, [r4, #12]
 800cf64:	4632      	mov	r2, r6
 800cf66:	463b      	mov	r3, r7
 800cf68:	4628      	mov	r0, r5
 800cf6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6e:	f000 b835 	b.w	800cfdc <_write_r>

0800cf72 <__sseek>:
 800cf72:	b510      	push	{r4, lr}
 800cf74:	460c      	mov	r4, r1
 800cf76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf7a:	f000 f8a3 	bl	800d0c4 <_lseek_r>
 800cf7e:	1c43      	adds	r3, r0, #1
 800cf80:	89a3      	ldrh	r3, [r4, #12]
 800cf82:	bf15      	itete	ne
 800cf84:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf8e:	81a3      	strheq	r3, [r4, #12]
 800cf90:	bf18      	it	ne
 800cf92:	81a3      	strhne	r3, [r4, #12]
 800cf94:	bd10      	pop	{r4, pc}

0800cf96 <__sclose>:
 800cf96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9a:	f000 b84f 	b.w	800d03c <_close_r>

0800cf9e <strncmp>:
 800cf9e:	b510      	push	{r4, lr}
 800cfa0:	b16a      	cbz	r2, 800cfbe <strncmp+0x20>
 800cfa2:	3901      	subs	r1, #1
 800cfa4:	1884      	adds	r4, r0, r2
 800cfa6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cfaa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d103      	bne.n	800cfba <strncmp+0x1c>
 800cfb2:	42a0      	cmp	r0, r4
 800cfb4:	d001      	beq.n	800cfba <strncmp+0x1c>
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f5      	bne.n	800cfa6 <strncmp+0x8>
 800cfba:	1a98      	subs	r0, r3, r2
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	e7fc      	b.n	800cfbc <strncmp+0x1e>

0800cfc2 <__ascii_wctomb>:
 800cfc2:	b149      	cbz	r1, 800cfd8 <__ascii_wctomb+0x16>
 800cfc4:	2aff      	cmp	r2, #255	; 0xff
 800cfc6:	bf85      	ittet	hi
 800cfc8:	238a      	movhi	r3, #138	; 0x8a
 800cfca:	6003      	strhi	r3, [r0, #0]
 800cfcc:	700a      	strbls	r2, [r1, #0]
 800cfce:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfd2:	bf98      	it	ls
 800cfd4:	2001      	movls	r0, #1
 800cfd6:	4770      	bx	lr
 800cfd8:	4608      	mov	r0, r1
 800cfda:	4770      	bx	lr

0800cfdc <_write_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4d07      	ldr	r5, [pc, #28]	; (800cffc <_write_r+0x20>)
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	4608      	mov	r0, r1
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	602a      	str	r2, [r5, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	f7f7 f89c 	bl	8004128 <_write>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_write_r+0x1e>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_write_r+0x1e>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	2000959c 	.word	0x2000959c

0800d000 <__assert_func>:
 800d000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d002:	4614      	mov	r4, r2
 800d004:	461a      	mov	r2, r3
 800d006:	4b09      	ldr	r3, [pc, #36]	; (800d02c <__assert_func+0x2c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4605      	mov	r5, r0
 800d00c:	68d8      	ldr	r0, [r3, #12]
 800d00e:	b14c      	cbz	r4, 800d024 <__assert_func+0x24>
 800d010:	4b07      	ldr	r3, [pc, #28]	; (800d030 <__assert_func+0x30>)
 800d012:	9100      	str	r1, [sp, #0]
 800d014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d018:	4906      	ldr	r1, [pc, #24]	; (800d034 <__assert_func+0x34>)
 800d01a:	462b      	mov	r3, r5
 800d01c:	f000 f81e 	bl	800d05c <fiprintf>
 800d020:	f000 f880 	bl	800d124 <abort>
 800d024:	4b04      	ldr	r3, [pc, #16]	; (800d038 <__assert_func+0x38>)
 800d026:	461c      	mov	r4, r3
 800d028:	e7f3      	b.n	800d012 <__assert_func+0x12>
 800d02a:	bf00      	nop
 800d02c:	2000002c 	.word	0x2000002c
 800d030:	0800eeb5 	.word	0x0800eeb5
 800d034:	0800eec2 	.word	0x0800eec2
 800d038:	0800eef0 	.word	0x0800eef0

0800d03c <_close_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d06      	ldr	r5, [pc, #24]	; (800d058 <_close_r+0x1c>)
 800d040:	2300      	movs	r3, #0
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	f7f7 f87c 	bl	8004144 <_close>
 800d04c:	1c43      	adds	r3, r0, #1
 800d04e:	d102      	bne.n	800d056 <_close_r+0x1a>
 800d050:	682b      	ldr	r3, [r5, #0]
 800d052:	b103      	cbz	r3, 800d056 <_close_r+0x1a>
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	2000959c 	.word	0x2000959c

0800d05c <fiprintf>:
 800d05c:	b40e      	push	{r1, r2, r3}
 800d05e:	b503      	push	{r0, r1, lr}
 800d060:	4601      	mov	r1, r0
 800d062:	ab03      	add	r3, sp, #12
 800d064:	4805      	ldr	r0, [pc, #20]	; (800d07c <fiprintf+0x20>)
 800d066:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06a:	6800      	ldr	r0, [r0, #0]
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	f7ff fe09 	bl	800cc84 <_vfiprintf_r>
 800d072:	b002      	add	sp, #8
 800d074:	f85d eb04 	ldr.w	lr, [sp], #4
 800d078:	b003      	add	sp, #12
 800d07a:	4770      	bx	lr
 800d07c:	2000002c 	.word	0x2000002c

0800d080 <_fstat_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	4d07      	ldr	r5, [pc, #28]	; (800d0a0 <_fstat_r+0x20>)
 800d084:	2300      	movs	r3, #0
 800d086:	4604      	mov	r4, r0
 800d088:	4608      	mov	r0, r1
 800d08a:	4611      	mov	r1, r2
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	f7f7 f85d 	bl	800414c <_fstat>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	d102      	bne.n	800d09c <_fstat_r+0x1c>
 800d096:	682b      	ldr	r3, [r5, #0]
 800d098:	b103      	cbz	r3, 800d09c <_fstat_r+0x1c>
 800d09a:	6023      	str	r3, [r4, #0]
 800d09c:	bd38      	pop	{r3, r4, r5, pc}
 800d09e:	bf00      	nop
 800d0a0:	2000959c 	.word	0x2000959c

0800d0a4 <_isatty_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4d06      	ldr	r5, [pc, #24]	; (800d0c0 <_isatty_r+0x1c>)
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4608      	mov	r0, r1
 800d0ae:	602b      	str	r3, [r5, #0]
 800d0b0:	f7f7 f852 	bl	8004158 <_isatty>
 800d0b4:	1c43      	adds	r3, r0, #1
 800d0b6:	d102      	bne.n	800d0be <_isatty_r+0x1a>
 800d0b8:	682b      	ldr	r3, [r5, #0]
 800d0ba:	b103      	cbz	r3, 800d0be <_isatty_r+0x1a>
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	bd38      	pop	{r3, r4, r5, pc}
 800d0c0:	2000959c 	.word	0x2000959c

0800d0c4 <_lseek_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	4d07      	ldr	r5, [pc, #28]	; (800d0e4 <_lseek_r+0x20>)
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	4608      	mov	r0, r1
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	602a      	str	r2, [r5, #0]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	f7f7 f842 	bl	800415c <_lseek>
 800d0d8:	1c43      	adds	r3, r0, #1
 800d0da:	d102      	bne.n	800d0e2 <_lseek_r+0x1e>
 800d0dc:	682b      	ldr	r3, [r5, #0]
 800d0de:	b103      	cbz	r3, 800d0e2 <_lseek_r+0x1e>
 800d0e0:	6023      	str	r3, [r4, #0]
 800d0e2:	bd38      	pop	{r3, r4, r5, pc}
 800d0e4:	2000959c 	.word	0x2000959c

0800d0e8 <__malloc_lock>:
 800d0e8:	4801      	ldr	r0, [pc, #4]	; (800d0f0 <__malloc_lock+0x8>)
 800d0ea:	f7fe bfac 	b.w	800c046 <__retarget_lock_acquire_recursive>
 800d0ee:	bf00      	nop
 800d0f0:	20009594 	.word	0x20009594

0800d0f4 <__malloc_unlock>:
 800d0f4:	4801      	ldr	r0, [pc, #4]	; (800d0fc <__malloc_unlock+0x8>)
 800d0f6:	f7fe bfa7 	b.w	800c048 <__retarget_lock_release_recursive>
 800d0fa:	bf00      	nop
 800d0fc:	20009594 	.word	0x20009594

0800d100 <_read_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d07      	ldr	r5, [pc, #28]	; (800d120 <_read_r+0x20>)
 800d104:	4604      	mov	r4, r0
 800d106:	4608      	mov	r0, r1
 800d108:	4611      	mov	r1, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	602a      	str	r2, [r5, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	f7f6 fffc 	bl	800410c <_read>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_read_r+0x1e>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_read_r+0x1e>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	2000959c 	.word	0x2000959c

0800d124 <abort>:
 800d124:	b508      	push	{r3, lr}
 800d126:	2006      	movs	r0, #6
 800d128:	f000 f82c 	bl	800d184 <raise>
 800d12c:	2001      	movs	r0, #1
 800d12e:	f7f6 ffe7 	bl	8004100 <_exit>

0800d132 <_raise_r>:
 800d132:	291f      	cmp	r1, #31
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4604      	mov	r4, r0
 800d138:	460d      	mov	r5, r1
 800d13a:	d904      	bls.n	800d146 <_raise_r+0x14>
 800d13c:	2316      	movs	r3, #22
 800d13e:	6003      	str	r3, [r0, #0]
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	bd38      	pop	{r3, r4, r5, pc}
 800d146:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d148:	b112      	cbz	r2, 800d150 <_raise_r+0x1e>
 800d14a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d14e:	b94b      	cbnz	r3, 800d164 <_raise_r+0x32>
 800d150:	4620      	mov	r0, r4
 800d152:	f000 f831 	bl	800d1b8 <_getpid_r>
 800d156:	462a      	mov	r2, r5
 800d158:	4601      	mov	r1, r0
 800d15a:	4620      	mov	r0, r4
 800d15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d160:	f000 b818 	b.w	800d194 <_kill_r>
 800d164:	2b01      	cmp	r3, #1
 800d166:	d00a      	beq.n	800d17e <_raise_r+0x4c>
 800d168:	1c59      	adds	r1, r3, #1
 800d16a:	d103      	bne.n	800d174 <_raise_r+0x42>
 800d16c:	2316      	movs	r3, #22
 800d16e:	6003      	str	r3, [r0, #0]
 800d170:	2001      	movs	r0, #1
 800d172:	e7e7      	b.n	800d144 <_raise_r+0x12>
 800d174:	2400      	movs	r4, #0
 800d176:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d17a:	4628      	mov	r0, r5
 800d17c:	4798      	blx	r3
 800d17e:	2000      	movs	r0, #0
 800d180:	e7e0      	b.n	800d144 <_raise_r+0x12>
	...

0800d184 <raise>:
 800d184:	4b02      	ldr	r3, [pc, #8]	; (800d190 <raise+0xc>)
 800d186:	4601      	mov	r1, r0
 800d188:	6818      	ldr	r0, [r3, #0]
 800d18a:	f7ff bfd2 	b.w	800d132 <_raise_r>
 800d18e:	bf00      	nop
 800d190:	2000002c 	.word	0x2000002c

0800d194 <_kill_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4d07      	ldr	r5, [pc, #28]	; (800d1b4 <_kill_r+0x20>)
 800d198:	2300      	movs	r3, #0
 800d19a:	4604      	mov	r4, r0
 800d19c:	4608      	mov	r0, r1
 800d19e:	4611      	mov	r1, r2
 800d1a0:	602b      	str	r3, [r5, #0]
 800d1a2:	f7f6 ffa5 	bl	80040f0 <_kill>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	d102      	bne.n	800d1b0 <_kill_r+0x1c>
 800d1aa:	682b      	ldr	r3, [r5, #0]
 800d1ac:	b103      	cbz	r3, 800d1b0 <_kill_r+0x1c>
 800d1ae:	6023      	str	r3, [r4, #0]
 800d1b0:	bd38      	pop	{r3, r4, r5, pc}
 800d1b2:	bf00      	nop
 800d1b4:	2000959c 	.word	0x2000959c

0800d1b8 <_getpid_r>:
 800d1b8:	f7f6 bf98 	b.w	80040ec <_getpid>

0800d1bc <round>:
 800d1bc:	ec51 0b10 	vmov	r0, r1, d0
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d1c6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d1ca:	2c13      	cmp	r4, #19
 800d1cc:	ee10 2a10 	vmov	r2, s0
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	dc19      	bgt.n	800d208 <round+0x4c>
 800d1d4:	2c00      	cmp	r4, #0
 800d1d6:	da09      	bge.n	800d1ec <round+0x30>
 800d1d8:	3401      	adds	r4, #1
 800d1da:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d1de:	d103      	bne.n	800d1e8 <round+0x2c>
 800d1e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d1e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	e028      	b.n	800d23e <round+0x82>
 800d1ec:	4d15      	ldr	r5, [pc, #84]	; (800d244 <round+0x88>)
 800d1ee:	4125      	asrs	r5, r4
 800d1f0:	ea01 0605 	and.w	r6, r1, r5
 800d1f4:	4332      	orrs	r2, r6
 800d1f6:	d00e      	beq.n	800d216 <round+0x5a>
 800d1f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d1fc:	fa42 f404 	asr.w	r4, r2, r4
 800d200:	4423      	add	r3, r4
 800d202:	ea23 0305 	bic.w	r3, r3, r5
 800d206:	e7ef      	b.n	800d1e8 <round+0x2c>
 800d208:	2c33      	cmp	r4, #51	; 0x33
 800d20a:	dd07      	ble.n	800d21c <round+0x60>
 800d20c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d210:	d101      	bne.n	800d216 <round+0x5a>
 800d212:	f7f3 f863 	bl	80002dc <__adddf3>
 800d216:	ec41 0b10 	vmov	d0, r0, r1
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d220:	f04f 35ff 	mov.w	r5, #4294967295
 800d224:	40f5      	lsrs	r5, r6
 800d226:	4228      	tst	r0, r5
 800d228:	d0f5      	beq.n	800d216 <round+0x5a>
 800d22a:	2101      	movs	r1, #1
 800d22c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d230:	fa01 f404 	lsl.w	r4, r1, r4
 800d234:	1912      	adds	r2, r2, r4
 800d236:	bf28      	it	cs
 800d238:	185b      	addcs	r3, r3, r1
 800d23a:	ea22 0105 	bic.w	r1, r2, r5
 800d23e:	4608      	mov	r0, r1
 800d240:	4619      	mov	r1, r3
 800d242:	e7e8      	b.n	800d216 <round+0x5a>
 800d244:	000fffff 	.word	0x000fffff

0800d248 <exp>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	ed2d 8b02 	vpush	{d8}
 800d24e:	ec55 4b10 	vmov	r4, r5, d0
 800d252:	f000 f875 	bl	800d340 <__ieee754_exp>
 800d256:	4b22      	ldr	r3, [pc, #136]	; (800d2e0 <exp+0x98>)
 800d258:	eeb0 8a40 	vmov.f32	s16, s0
 800d25c:	eef0 8a60 	vmov.f32	s17, s1
 800d260:	f993 3000 	ldrsb.w	r3, [r3]
 800d264:	3301      	adds	r3, #1
 800d266:	d012      	beq.n	800d28e <exp+0x46>
 800d268:	ec45 4b10 	vmov	d0, r4, r5
 800d26c:	f000 fa64 	bl	800d738 <finite>
 800d270:	b168      	cbz	r0, 800d28e <exp+0x46>
 800d272:	a313      	add	r3, pc, #76	; (adr r3, 800d2c0 <exp+0x78>)
 800d274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d278:	4620      	mov	r0, r4
 800d27a:	4629      	mov	r1, r5
 800d27c:	f7f3 fc74 	bl	8000b68 <__aeabi_dcmpgt>
 800d280:	b160      	cbz	r0, 800d29c <exp+0x54>
 800d282:	f7fb fe69 	bl	8008f58 <__errno>
 800d286:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800d2c8 <exp+0x80>
 800d28a:	2322      	movs	r3, #34	; 0x22
 800d28c:	6003      	str	r3, [r0, #0]
 800d28e:	eeb0 0a48 	vmov.f32	s0, s16
 800d292:	eef0 0a68 	vmov.f32	s1, s17
 800d296:	ecbd 8b02 	vpop	{d8}
 800d29a:	bd38      	pop	{r3, r4, r5, pc}
 800d29c:	a30c      	add	r3, pc, #48	; (adr r3, 800d2d0 <exp+0x88>)
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f7f3 fc41 	bl	8000b2c <__aeabi_dcmplt>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d0ef      	beq.n	800d28e <exp+0x46>
 800d2ae:	f7fb fe53 	bl	8008f58 <__errno>
 800d2b2:	2322      	movs	r3, #34	; 0x22
 800d2b4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800d2d8 <exp+0x90>
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	e7e8      	b.n	800d28e <exp+0x46>
 800d2bc:	f3af 8000 	nop.w
 800d2c0:	fefa39ef 	.word	0xfefa39ef
 800d2c4:	40862e42 	.word	0x40862e42
 800d2c8:	00000000 	.word	0x00000000
 800d2cc:	7ff00000 	.word	0x7ff00000
 800d2d0:	d52d3051 	.word	0xd52d3051
 800d2d4:	c0874910 	.word	0xc0874910
	...
 800d2e0:	20000200 	.word	0x20000200

0800d2e4 <fmodf>:
 800d2e4:	b508      	push	{r3, lr}
 800d2e6:	ed2d 8b02 	vpush	{d8}
 800d2ea:	eef0 8a40 	vmov.f32	s17, s0
 800d2ee:	eeb0 8a60 	vmov.f32	s16, s1
 800d2f2:	f000 f99f 	bl	800d634 <__ieee754_fmodf>
 800d2f6:	4b0f      	ldr	r3, [pc, #60]	; (800d334 <fmodf+0x50>)
 800d2f8:	f993 3000 	ldrsb.w	r3, [r3]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	d016      	beq.n	800d32e <fmodf+0x4a>
 800d300:	eeb4 8a48 	vcmp.f32	s16, s16
 800d304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d308:	d611      	bvs.n	800d32e <fmodf+0x4a>
 800d30a:	eef4 8a68 	vcmp.f32	s17, s17
 800d30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d312:	d60c      	bvs.n	800d32e <fmodf+0x4a>
 800d314:	eddf 8a08 	vldr	s17, [pc, #32]	; 800d338 <fmodf+0x54>
 800d318:	eeb4 8a68 	vcmp.f32	s16, s17
 800d31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d320:	d105      	bne.n	800d32e <fmodf+0x4a>
 800d322:	f7fb fe19 	bl	8008f58 <__errno>
 800d326:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d32a:	2321      	movs	r3, #33	; 0x21
 800d32c:	6003      	str	r3, [r0, #0]
 800d32e:	ecbd 8b02 	vpop	{d8}
 800d332:	bd08      	pop	{r3, pc}
 800d334:	20000200 	.word	0x20000200
	...

0800d340 <__ieee754_exp>:
 800d340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d344:	ec55 4b10 	vmov	r4, r5, d0
 800d348:	49b1      	ldr	r1, [pc, #708]	; (800d610 <__ieee754_exp+0x2d0>)
 800d34a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d34e:	428b      	cmp	r3, r1
 800d350:	ed2d 8b04 	vpush	{d8-d9}
 800d354:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d358:	d937      	bls.n	800d3ca <__ieee754_exp+0x8a>
 800d35a:	49ae      	ldr	r1, [pc, #696]	; (800d614 <__ieee754_exp+0x2d4>)
 800d35c:	428b      	cmp	r3, r1
 800d35e:	d916      	bls.n	800d38e <__ieee754_exp+0x4e>
 800d360:	ee10 3a10 	vmov	r3, s0
 800d364:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d368:	4313      	orrs	r3, r2
 800d36a:	d009      	beq.n	800d380 <__ieee754_exp+0x40>
 800d36c:	ee10 2a10 	vmov	r2, s0
 800d370:	462b      	mov	r3, r5
 800d372:	4620      	mov	r0, r4
 800d374:	4629      	mov	r1, r5
 800d376:	f7f2 ffb1 	bl	80002dc <__adddf3>
 800d37a:	4604      	mov	r4, r0
 800d37c:	460d      	mov	r5, r1
 800d37e:	e000      	b.n	800d382 <__ieee754_exp+0x42>
 800d380:	bb06      	cbnz	r6, 800d3c4 <__ieee754_exp+0x84>
 800d382:	ecbd 8b04 	vpop	{d8-d9}
 800d386:	ec45 4b10 	vmov	d0, r4, r5
 800d38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d38e:	a38a      	add	r3, pc, #552	; (adr r3, 800d5b8 <__ieee754_exp+0x278>)
 800d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d394:	ee10 0a10 	vmov	r0, s0
 800d398:	4629      	mov	r1, r5
 800d39a:	f7f3 fbe5 	bl	8000b68 <__aeabi_dcmpgt>
 800d39e:	b138      	cbz	r0, 800d3b0 <__ieee754_exp+0x70>
 800d3a0:	a387      	add	r3, pc, #540	; (adr r3, 800d5c0 <__ieee754_exp+0x280>)
 800d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f7f3 f94d 	bl	8000648 <__aeabi_dmul>
 800d3ae:	e7e4      	b.n	800d37a <__ieee754_exp+0x3a>
 800d3b0:	a385      	add	r3, pc, #532	; (adr r3, 800d5c8 <__ieee754_exp+0x288>)
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	f7f3 fbb7 	bl	8000b2c <__aeabi_dcmplt>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f000 8087 	beq.w	800d4d2 <__ieee754_exp+0x192>
 800d3c4:	2400      	movs	r4, #0
 800d3c6:	2500      	movs	r5, #0
 800d3c8:	e7db      	b.n	800d382 <__ieee754_exp+0x42>
 800d3ca:	4a93      	ldr	r2, [pc, #588]	; (800d618 <__ieee754_exp+0x2d8>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	f240 80ac 	bls.w	800d52a <__ieee754_exp+0x1ea>
 800d3d2:	4a92      	ldr	r2, [pc, #584]	; (800d61c <__ieee754_exp+0x2dc>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d87c      	bhi.n	800d4d2 <__ieee754_exp+0x192>
 800d3d8:	4b91      	ldr	r3, [pc, #580]	; (800d620 <__ieee754_exp+0x2e0>)
 800d3da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e2:	ee10 0a10 	vmov	r0, s0
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	f7f2 ff76 	bl	80002d8 <__aeabi_dsub>
 800d3ec:	4b8d      	ldr	r3, [pc, #564]	; (800d624 <__ieee754_exp+0x2e4>)
 800d3ee:	00f7      	lsls	r7, r6, #3
 800d3f0:	443b      	add	r3, r7
 800d3f2:	ed93 7b00 	vldr	d7, [r3]
 800d3f6:	f1c6 0a01 	rsb	sl, r6, #1
 800d3fa:	4680      	mov	r8, r0
 800d3fc:	4689      	mov	r9, r1
 800d3fe:	ebaa 0a06 	sub.w	sl, sl, r6
 800d402:	eeb0 8a47 	vmov.f32	s16, s14
 800d406:	eef0 8a67 	vmov.f32	s17, s15
 800d40a:	ec53 2b18 	vmov	r2, r3, d8
 800d40e:	4640      	mov	r0, r8
 800d410:	4649      	mov	r1, r9
 800d412:	f7f2 ff61 	bl	80002d8 <__aeabi_dsub>
 800d416:	4604      	mov	r4, r0
 800d418:	460d      	mov	r5, r1
 800d41a:	4622      	mov	r2, r4
 800d41c:	462b      	mov	r3, r5
 800d41e:	4620      	mov	r0, r4
 800d420:	4629      	mov	r1, r5
 800d422:	f7f3 f911 	bl	8000648 <__aeabi_dmul>
 800d426:	a36a      	add	r3, pc, #424	; (adr r3, 800d5d0 <__ieee754_exp+0x290>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	4606      	mov	r6, r0
 800d42e:	460f      	mov	r7, r1
 800d430:	f7f3 f90a 	bl	8000648 <__aeabi_dmul>
 800d434:	a368      	add	r3, pc, #416	; (adr r3, 800d5d8 <__ieee754_exp+0x298>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	f7f2 ff4d 	bl	80002d8 <__aeabi_dsub>
 800d43e:	4632      	mov	r2, r6
 800d440:	463b      	mov	r3, r7
 800d442:	f7f3 f901 	bl	8000648 <__aeabi_dmul>
 800d446:	a366      	add	r3, pc, #408	; (adr r3, 800d5e0 <__ieee754_exp+0x2a0>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	f7f2 ff46 	bl	80002dc <__adddf3>
 800d450:	4632      	mov	r2, r6
 800d452:	463b      	mov	r3, r7
 800d454:	f7f3 f8f8 	bl	8000648 <__aeabi_dmul>
 800d458:	a363      	add	r3, pc, #396	; (adr r3, 800d5e8 <__ieee754_exp+0x2a8>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	f7f2 ff3b 	bl	80002d8 <__aeabi_dsub>
 800d462:	4632      	mov	r2, r6
 800d464:	463b      	mov	r3, r7
 800d466:	f7f3 f8ef 	bl	8000648 <__aeabi_dmul>
 800d46a:	a361      	add	r3, pc, #388	; (adr r3, 800d5f0 <__ieee754_exp+0x2b0>)
 800d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d470:	f7f2 ff34 	bl	80002dc <__adddf3>
 800d474:	4632      	mov	r2, r6
 800d476:	463b      	mov	r3, r7
 800d478:	f7f3 f8e6 	bl	8000648 <__aeabi_dmul>
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	4620      	mov	r0, r4
 800d482:	4629      	mov	r1, r5
 800d484:	f7f2 ff28 	bl	80002d8 <__aeabi_dsub>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4606      	mov	r6, r0
 800d48e:	460f      	mov	r7, r1
 800d490:	4620      	mov	r0, r4
 800d492:	4629      	mov	r1, r5
 800d494:	f7f3 f8d8 	bl	8000648 <__aeabi_dmul>
 800d498:	ec41 0b19 	vmov	d9, r0, r1
 800d49c:	f1ba 0f00 	cmp.w	sl, #0
 800d4a0:	d15d      	bne.n	800d55e <__ieee754_exp+0x21e>
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	4639      	mov	r1, r7
 800d4ac:	f7f2 ff14 	bl	80002d8 <__aeabi_dsub>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	ec51 0b19 	vmov	r0, r1, d9
 800d4b8:	f7f3 f9f0 	bl	800089c <__aeabi_ddiv>
 800d4bc:	4622      	mov	r2, r4
 800d4be:	462b      	mov	r3, r5
 800d4c0:	f7f2 ff0a 	bl	80002d8 <__aeabi_dsub>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	4957      	ldr	r1, [pc, #348]	; (800d628 <__ieee754_exp+0x2e8>)
 800d4cc:	f7f2 ff04 	bl	80002d8 <__aeabi_dsub>
 800d4d0:	e753      	b.n	800d37a <__ieee754_exp+0x3a>
 800d4d2:	4856      	ldr	r0, [pc, #344]	; (800d62c <__ieee754_exp+0x2ec>)
 800d4d4:	a348      	add	r3, pc, #288	; (adr r3, 800d5f8 <__ieee754_exp+0x2b8>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f7f3 f8b1 	bl	8000648 <__aeabi_dmul>
 800d4e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4ea:	f7f2 fef7 	bl	80002dc <__adddf3>
 800d4ee:	f7f3 fb5b 	bl	8000ba8 <__aeabi_d2iz>
 800d4f2:	4682      	mov	sl, r0
 800d4f4:	f7f3 f83e 	bl	8000574 <__aeabi_i2d>
 800d4f8:	a341      	add	r3, pc, #260	; (adr r3, 800d600 <__ieee754_exp+0x2c0>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	f7f3 f8a1 	bl	8000648 <__aeabi_dmul>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	4620      	mov	r0, r4
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f2 fee3 	bl	80002d8 <__aeabi_dsub>
 800d512:	a33d      	add	r3, pc, #244	; (adr r3, 800d608 <__ieee754_exp+0x2c8>)
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	4680      	mov	r8, r0
 800d51a:	4689      	mov	r9, r1
 800d51c:	4630      	mov	r0, r6
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f3 f892 	bl	8000648 <__aeabi_dmul>
 800d524:	ec41 0b18 	vmov	d8, r0, r1
 800d528:	e76f      	b.n	800d40a <__ieee754_exp+0xca>
 800d52a:	4a41      	ldr	r2, [pc, #260]	; (800d630 <__ieee754_exp+0x2f0>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d811      	bhi.n	800d554 <__ieee754_exp+0x214>
 800d530:	a323      	add	r3, pc, #140	; (adr r3, 800d5c0 <__ieee754_exp+0x280>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	ee10 0a10 	vmov	r0, s0
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f2 fece 	bl	80002dc <__adddf3>
 800d540:	4b39      	ldr	r3, [pc, #228]	; (800d628 <__ieee754_exp+0x2e8>)
 800d542:	2200      	movs	r2, #0
 800d544:	f7f3 fb10 	bl	8000b68 <__aeabi_dcmpgt>
 800d548:	b138      	cbz	r0, 800d55a <__ieee754_exp+0x21a>
 800d54a:	4b37      	ldr	r3, [pc, #220]	; (800d628 <__ieee754_exp+0x2e8>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	4620      	mov	r0, r4
 800d550:	4629      	mov	r1, r5
 800d552:	e710      	b.n	800d376 <__ieee754_exp+0x36>
 800d554:	f04f 0a00 	mov.w	sl, #0
 800d558:	e75f      	b.n	800d41a <__ieee754_exp+0xda>
 800d55a:	4682      	mov	sl, r0
 800d55c:	e75d      	b.n	800d41a <__ieee754_exp+0xda>
 800d55e:	4632      	mov	r2, r6
 800d560:	463b      	mov	r3, r7
 800d562:	2000      	movs	r0, #0
 800d564:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d568:	f7f2 feb6 	bl	80002d8 <__aeabi_dsub>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	ec51 0b19 	vmov	r0, r1, d9
 800d574:	f7f3 f992 	bl	800089c <__aeabi_ddiv>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	ec51 0b18 	vmov	r0, r1, d8
 800d580:	f7f2 feaa 	bl	80002d8 <__aeabi_dsub>
 800d584:	4642      	mov	r2, r8
 800d586:	464b      	mov	r3, r9
 800d588:	f7f2 fea6 	bl	80002d8 <__aeabi_dsub>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	2000      	movs	r0, #0
 800d592:	4925      	ldr	r1, [pc, #148]	; (800d628 <__ieee754_exp+0x2e8>)
 800d594:	f7f2 fea0 	bl	80002d8 <__aeabi_dsub>
 800d598:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d59c:	4592      	cmp	sl, r2
 800d59e:	db02      	blt.n	800d5a6 <__ieee754_exp+0x266>
 800d5a0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d5a4:	e6e9      	b.n	800d37a <__ieee754_exp+0x3a>
 800d5a6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d5aa:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d5b4:	e6f9      	b.n	800d3aa <__ieee754_exp+0x6a>
 800d5b6:	bf00      	nop
 800d5b8:	fefa39ef 	.word	0xfefa39ef
 800d5bc:	40862e42 	.word	0x40862e42
 800d5c0:	8800759c 	.word	0x8800759c
 800d5c4:	7e37e43c 	.word	0x7e37e43c
 800d5c8:	d52d3051 	.word	0xd52d3051
 800d5cc:	c0874910 	.word	0xc0874910
 800d5d0:	72bea4d0 	.word	0x72bea4d0
 800d5d4:	3e663769 	.word	0x3e663769
 800d5d8:	c5d26bf1 	.word	0xc5d26bf1
 800d5dc:	3ebbbd41 	.word	0x3ebbbd41
 800d5e0:	af25de2c 	.word	0xaf25de2c
 800d5e4:	3f11566a 	.word	0x3f11566a
 800d5e8:	16bebd93 	.word	0x16bebd93
 800d5ec:	3f66c16c 	.word	0x3f66c16c
 800d5f0:	5555553e 	.word	0x5555553e
 800d5f4:	3fc55555 	.word	0x3fc55555
 800d5f8:	652b82fe 	.word	0x652b82fe
 800d5fc:	3ff71547 	.word	0x3ff71547
 800d600:	fee00000 	.word	0xfee00000
 800d604:	3fe62e42 	.word	0x3fe62e42
 800d608:	35793c76 	.word	0x35793c76
 800d60c:	3dea39ef 	.word	0x3dea39ef
 800d610:	40862e41 	.word	0x40862e41
 800d614:	7fefffff 	.word	0x7fefffff
 800d618:	3fd62e42 	.word	0x3fd62e42
 800d61c:	3ff0a2b1 	.word	0x3ff0a2b1
 800d620:	0800ef08 	.word	0x0800ef08
 800d624:	0800ef18 	.word	0x0800ef18
 800d628:	3ff00000 	.word	0x3ff00000
 800d62c:	0800eef8 	.word	0x0800eef8
 800d630:	3e2fffff 	.word	0x3e2fffff

0800d634 <__ieee754_fmodf>:
 800d634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d636:	ee10 6a90 	vmov	r6, s1
 800d63a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800d63e:	d009      	beq.n	800d654 <__ieee754_fmodf+0x20>
 800d640:	ee10 2a10 	vmov	r2, s0
 800d644:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d648:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d64c:	da02      	bge.n	800d654 <__ieee754_fmodf+0x20>
 800d64e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d652:	dd04      	ble.n	800d65e <__ieee754_fmodf+0x2a>
 800d654:	ee60 0a20 	vmul.f32	s1, s0, s1
 800d658:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d65e:	42ab      	cmp	r3, r5
 800d660:	dbfc      	blt.n	800d65c <__ieee754_fmodf+0x28>
 800d662:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800d666:	d106      	bne.n	800d676 <__ieee754_fmodf+0x42>
 800d668:	4a32      	ldr	r2, [pc, #200]	; (800d734 <__ieee754_fmodf+0x100>)
 800d66a:	0fe3      	lsrs	r3, r4, #31
 800d66c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d670:	ed93 0a00 	vldr	s0, [r3]
 800d674:	e7f2      	b.n	800d65c <__ieee754_fmodf+0x28>
 800d676:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800d67a:	d13f      	bne.n	800d6fc <__ieee754_fmodf+0xc8>
 800d67c:	0219      	lsls	r1, r3, #8
 800d67e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800d682:	2900      	cmp	r1, #0
 800d684:	dc37      	bgt.n	800d6f6 <__ieee754_fmodf+0xc2>
 800d686:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800d68a:	d13d      	bne.n	800d708 <__ieee754_fmodf+0xd4>
 800d68c:	022f      	lsls	r7, r5, #8
 800d68e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800d692:	2f00      	cmp	r7, #0
 800d694:	da35      	bge.n	800d702 <__ieee754_fmodf+0xce>
 800d696:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800d69a:	bfbb      	ittet	lt
 800d69c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800d6a0:	1a12      	sublt	r2, r2, r0
 800d6a2:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800d6a6:	4093      	lsllt	r3, r2
 800d6a8:	bfa8      	it	ge
 800d6aa:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800d6ae:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800d6b2:	bfb5      	itete	lt
 800d6b4:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800d6b8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800d6bc:	1a52      	sublt	r2, r2, r1
 800d6be:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800d6c2:	bfb8      	it	lt
 800d6c4:	4095      	lsllt	r5, r2
 800d6c6:	1a40      	subs	r0, r0, r1
 800d6c8:	1b5a      	subs	r2, r3, r5
 800d6ca:	bb00      	cbnz	r0, 800d70e <__ieee754_fmodf+0xda>
 800d6cc:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800d6d0:	bf38      	it	cc
 800d6d2:	4613      	movcc	r3, r2
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d0c7      	beq.n	800d668 <__ieee754_fmodf+0x34>
 800d6d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d6dc:	db1f      	blt.n	800d71e <__ieee754_fmodf+0xea>
 800d6de:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800d6e2:	db1f      	blt.n	800d724 <__ieee754_fmodf+0xf0>
 800d6e4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800d6e8:	317f      	adds	r1, #127	; 0x7f
 800d6ea:	4323      	orrs	r3, r4
 800d6ec:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800d6f0:	ee00 3a10 	vmov	s0, r3
 800d6f4:	e7b2      	b.n	800d65c <__ieee754_fmodf+0x28>
 800d6f6:	3801      	subs	r0, #1
 800d6f8:	0049      	lsls	r1, r1, #1
 800d6fa:	e7c2      	b.n	800d682 <__ieee754_fmodf+0x4e>
 800d6fc:	15d8      	asrs	r0, r3, #23
 800d6fe:	387f      	subs	r0, #127	; 0x7f
 800d700:	e7c1      	b.n	800d686 <__ieee754_fmodf+0x52>
 800d702:	3901      	subs	r1, #1
 800d704:	007f      	lsls	r7, r7, #1
 800d706:	e7c4      	b.n	800d692 <__ieee754_fmodf+0x5e>
 800d708:	15e9      	asrs	r1, r5, #23
 800d70a:	397f      	subs	r1, #127	; 0x7f
 800d70c:	e7c3      	b.n	800d696 <__ieee754_fmodf+0x62>
 800d70e:	2a00      	cmp	r2, #0
 800d710:	da02      	bge.n	800d718 <__ieee754_fmodf+0xe4>
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	3801      	subs	r0, #1
 800d716:	e7d7      	b.n	800d6c8 <__ieee754_fmodf+0x94>
 800d718:	d0a6      	beq.n	800d668 <__ieee754_fmodf+0x34>
 800d71a:	0053      	lsls	r3, r2, #1
 800d71c:	e7fa      	b.n	800d714 <__ieee754_fmodf+0xe0>
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	3901      	subs	r1, #1
 800d722:	e7d9      	b.n	800d6d8 <__ieee754_fmodf+0xa4>
 800d724:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800d728:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800d72c:	3182      	adds	r1, #130	; 0x82
 800d72e:	410b      	asrs	r3, r1
 800d730:	4323      	orrs	r3, r4
 800d732:	e7dd      	b.n	800d6f0 <__ieee754_fmodf+0xbc>
 800d734:	0800ef28 	.word	0x0800ef28

0800d738 <finite>:
 800d738:	b082      	sub	sp, #8
 800d73a:	ed8d 0b00 	vstr	d0, [sp]
 800d73e:	9801      	ldr	r0, [sp, #4]
 800d740:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d744:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d748:	0fc0      	lsrs	r0, r0, #31
 800d74a:	b002      	add	sp, #8
 800d74c:	4770      	bx	lr
	...

0800d750 <_init>:
 800d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d752:	bf00      	nop
 800d754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d756:	bc08      	pop	{r3}
 800d758:	469e      	mov	lr, r3
 800d75a:	4770      	bx	lr

0800d75c <_fini>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	bf00      	nop
 800d760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d762:	bc08      	pop	{r3}
 800d764:	469e      	mov	lr, r3
 800d766:	4770      	bx	lr
