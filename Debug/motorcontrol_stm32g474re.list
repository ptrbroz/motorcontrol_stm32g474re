
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d838  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001890  0800da18  0800da18  0001da18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2a8  0800f2a8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2a8  0800f2a8  0001f2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2b0  0800f2b0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2b0  0800f2b0  0001f2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2b4  0800f2b4  0001f2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800f2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009398  20000208  0800f4bc  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200095a0  0800f4bc  000295a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e12b  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bc8  00000000  00000000  0005e35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020308  00000000  00000000  00064f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  00085230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003e98  00000000  00000000  00086910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da69  00000000  00000000  0008a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031681  00000000  00000000  000b8211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011b313  00000000  00000000  000e9892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00204ba5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065a0  00000000  00000000  00204bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800da00 	.word	0x0800da00

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800da00 	.word	0x0800da00

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	2400      	movs	r4, #0
{
 8001040:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	4621      	mov	r1, r4
 8001044:	2220      	movs	r2, #32
 8001046:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001048:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800104c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	f008 f92d 	bl	80092ac <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4820      	ldr	r0, [pc, #128]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001054:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001058:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105c:	2204      	movs	r2, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800105e:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001060:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001066:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	e9c0 5100 	strd	r5, r1, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001072:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001076:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800107c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	6182      	str	r2, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001082:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	f003 fbf2 	bl	800486c <HAL_ADC_Init>
 8001088:	b9c8      	cbnz	r0, 80010be <MX_ADC1_Init+0x82>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108a:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108c:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC1_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001090:	a901      	add	r1, sp, #4
 8001092:	f004 f86d 	bl	8005170 <HAL_ADCEx_MultiModeConfigChannel>
 8001096:	b9c8      	cbnz	r0, 80010cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <MX_ADC1_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_6;
 800109c:	2306      	movs	r3, #6
 800109e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010a2:	2400      	movs	r4, #0
 80010a4:	257f      	movs	r5, #127	; 0x7f
 80010a6:	2204      	movs	r2, #4
 80010a8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_6;
 80010ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80010b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	f003 fd06 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 80010b8:	b920      	cbnz	r0, 80010c4 <MX_ADC1_Init+0x88>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ba:	b00d      	add	sp, #52	; 0x34
 80010bc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010be:	f002 fdcd 	bl	8003c5c <Error_Handler>
 80010c2:	e7e2      	b.n	800108a <MX_ADC1_Init+0x4e>
    Error_Handler();
 80010c4:	f002 fdca 	bl	8003c5c <Error_Handler>
}
 80010c8:	b00d      	add	sp, #52	; 0x34
 80010ca:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010cc:	f002 fdc6 	bl	8003c5c <Error_Handler>
 80010d0:	e7e2      	b.n	8001098 <MX_ADC1_Init+0x5c>
 80010d2:	bf00      	nop
 80010d4:	200002a8 	.word	0x200002a8
 80010d8:	19200040 	.word	0x19200040
 80010dc:	00000000 	.word	0x00000000

080010e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4668      	mov	r0, sp
 80010ea:	f008 f8df 	bl	80092ac <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_ADC2_Init+0x88>)
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC2_Init+0x8c>)
 80010f2:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010f8:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010fa:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	2104      	movs	r1, #4
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
 80010fe:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001100:	8383      	strh	r3, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	6181      	str	r1, [r0, #24]
  hadc2.Init.NbrOfConversion = 1;
 8001110:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001112:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001116:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001120:	f003 fba4 	bl	800486c <HAL_ADC_Init>
 8001124:	b998      	cbnz	r0, 800114e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001126:	a30e      	add	r3, pc, #56	; (adr r3, 8001160 <MX_ADC2_Init+0x80>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	2400      	movs	r4, #0
 800112e:	e9cd 2300 	strd	r2, r3, [sp]
 8001132:	257f      	movs	r5, #127	; 0x7f
 8001134:	2204      	movs	r2, #4
 8001136:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_ADC2_Init+0x88>)
 800113a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_7;
 800113c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001140:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001144:	f003 fcbe 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001148:	b920      	cbnz	r0, 8001154 <MX_ADC2_Init+0x74>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800114a:	b009      	add	sp, #36	; 0x24
 800114c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800114e:	f002 fd85 	bl	8003c5c <Error_Handler>
 8001152:	e7e8      	b.n	8001126 <MX_ADC2_Init+0x46>
    Error_Handler();
 8001154:	f002 fd82 	bl	8003c5c <Error_Handler>
}
 8001158:	b009      	add	sp, #36	; 0x24
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	1d500080 	.word	0x1d500080
 8001164:	00000006 	.word	0x00000006
 8001168:	2000023c 	.word	0x2000023c
 800116c:	50000100 	.word	0x50000100

08001170 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001170:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001172:	2400      	movs	r4, #0
{
 8001174:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	4621      	mov	r1, r4
 8001178:	2220      	movs	r2, #32
 800117a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800117c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001180:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	f008 f893 	bl	80092ac <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <MX_ADC3_Init+0xa0>)
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_ADC3_Init+0xa4>)
 800118a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118c:	f44f 3540 	mov.w	r5, #196608	; 0x30000
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8001190:	2110      	movs	r1, #16
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.GainCompensation = 0;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 1;
 8001194:	2301      	movs	r3, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001196:	8384      	strh	r4, [r0, #28]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 80011a0:	e9c0 5101 	strd	r5, r1, [r0, #4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a4:	60c4      	str	r4, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011aa:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ae:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011b0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b4:	6182      	str	r2, [r0, #24]
  hadc3.Init.NbrOfConversion = 1;
 80011b6:	6203      	str	r3, [r0, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011b8:	f003 fb58 	bl	800486c <HAL_ADC_Init>
 80011bc:	b9d0      	cbnz	r0, 80011f4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <MX_ADC3_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c2:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011c4:	a901      	add	r1, sp, #4
 80011c6:	f003 ffd3 	bl	8005170 <HAL_ADCEx_MultiModeConfigChannel>
 80011ca:	b9d0      	cbnz	r0, 8001202 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011cc:	a30e      	add	r3, pc, #56	; (adr r3, 8001208 <MX_ADC3_Init+0x98>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	2407      	movs	r4, #7
 80011d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011d8:	257f      	movs	r5, #127	; 0x7f
 80011da:	2204      	movs	r2, #4
 80011dc:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_ADC3_Init+0xa0>)
 80011e0:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_12;
 80011e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80011e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011ea:	f003 fc6b 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 80011ee:	b920      	cbnz	r0, 80011fa <MX_ADC3_Init+0x8a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011f0:	b00d      	add	sp, #52	; 0x34
 80011f2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011f4:	f002 fd32 	bl	8003c5c <Error_Handler>
 80011f8:	e7e1      	b.n	80011be <MX_ADC3_Init+0x4e>
    Error_Handler();
 80011fa:	f002 fd2f 	bl	8003c5c <Error_Handler>
}
 80011fe:	b00d      	add	sp, #52	; 0x34
 8001200:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001202:	f002 fd2b 	bl	8003c5c <Error_Handler>
 8001206:	e7e1      	b.n	80011cc <MX_ADC3_Init+0x5c>
 8001208:	32601000 	.word	0x32601000
 800120c:	00000006 	.word	0x00000006
 8001210:	20000314 	.word	0x20000314
 8001214:	50000400 	.word	0x50000400

08001218 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001218:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 800121a:	6802      	ldr	r2, [r0, #0]
{
 800121c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8001220:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001228:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800122c:	930a      	str	r3, [sp, #40]	; 0x28
  if(adcHandle->Instance==ADC1)
 800122e:	d023      	beq.n	8001278 <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001230:	4939      	ldr	r1, [pc, #228]	; (8001318 <HAL_ADC_MspInit+0x100>)
 8001232:	428a      	cmp	r2, r1
 8001234:	d004      	beq.n	8001240 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001236:	4939      	ldr	r1, [pc, #228]	; (800131c <HAL_ADC_MspInit+0x104>)
 8001238:	428a      	cmp	r2, r1
 800123a:	d04f      	beq.n	80012dc <HAL_ADC_MspInit+0xc4>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800123c:	b00d      	add	sp, #52	; 0x34
 800123e:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001240:	4a37      	ldr	r2, [pc, #220]	; (8001320 <HAL_ADC_MspInit+0x108>)
 8001242:	6813      	ldr	r3, [r2, #0]
 8001244:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001246:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001248:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124a:	d03c      	beq.n	80012c6 <HAL_ADC_MspInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_ADC_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	4836      	ldr	r0, [pc, #216]	; (8001328 <HAL_ADC_MspInit+0x110>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001252:	f042 0204 	orr.w	r2, r2, #4
 8001256:	64da      	str	r2, [r3, #76]	; 0x4c
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001260:	2202      	movs	r2, #2
 8001262:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001268:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f004 fec8 	bl	8006004 <HAL_GPIO_Init>
}
 8001274:	b00d      	add	sp, #52	; 0x34
 8001276:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_ADC_MspInit+0x108>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800127e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001280:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001282:	d015      	beq.n	80012b0 <HAL_ADC_MspInit+0x98>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_ADC_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <HAL_ADC_MspInit+0x110>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800128a:	f042 0204 	orr.w	r2, r2, #4
 800128e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001298:	2201      	movs	r2, #1
 800129a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f004 feac 	bl	8006004 <HAL_GPIO_Init>
}
 80012ac:	b00d      	add	sp, #52	; 0x34
 80012ae:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_ADC_MspInit+0x10c>)
 80012b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]
 80012c4:	e7de      	b.n	8001284 <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_ADC_MspInit+0x10c>)
 80012c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	9b02      	ldr	r3, [sp, #8]
 80012da:	e7b7      	b.n	800124c <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012dc:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_ADC_MspInit+0x10c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012e0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80012e2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80012e6:	64d1      	str	r1, [r2, #76]	; 0x4c
 80012e8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80012ea:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80012ee:	9104      	str	r1, [sp, #16]
 80012f0:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80012f4:	f041 0102 	orr.w	r1, r1, #2
 80012f8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80012fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	f002 0202 	and.w	r2, r2, #2
 8001302:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001304:	2303      	movs	r3, #3
 8001306:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f004 fe78 	bl	8006004 <HAL_GPIO_Init>
}
 8001314:	e792      	b.n	800123c <HAL_ADC_MspInit+0x24>
 8001316:	bf00      	nop
 8001318:	50000100 	.word	0x50000100
 800131c:	50000400 	.word	0x50000400
 8001320:	20000224 	.word	0x20000224
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800
 800132c:	48000400 	.word	0x48000400

08001330 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 8001334:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800152c <order_phases+0x1fc>
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001338:	ed2d 8b02 	vpush	{d8}
	PHASE_ORDER = 0;
 800133c:	f04f 0900 	mov.w	r9, #0
 8001340:	f8c8 9000 	str.w	r9, [r8]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001344:	4614      	mov	r4, r2

	static int pf1, pf2, pf3, pf4, pf5;



	if(!cal->started){
 8001346:	7c12      	ldrb	r2, [r2, #16]
void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001348:	b085      	sub	sp, #20
 800134a:	4607      	mov	r7, r0
 800134c:	460e      	mov	r6, r1
 800134e:	461d      	mov	r5, r3
	if(!cal->started){
 8001350:	2a00      	cmp	r2, #0
 8001352:	f000 808b 	beq.w	800146c <order_phases+0x13c>
		printf("Checking phase sign, pole pairs\r\n");
		cal->started = 1;
		cal->start_count = loop_count;
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001356:	68e3      	ldr	r3, [r4, #12]
 8001358:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80014f8 <order_phases+0x1c8>
		set_dtc(controller);
		return;
		//debug sine end
		}

    if(cal->time < T1){
 800135c:	eddf 6a67 	vldr	s13, [pc, #412]	; 80014fc <order_phases+0x1cc>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001360:	1aed      	subs	r5, r5, r3
 8001362:	ee07 5a90 	vmov	s15, r5
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 800136e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001376:	ed84 7a05 	vstr	s14, [r4, #20]
    if(cal->time < T1){
 800137a:	f100 80b6 	bmi.w	80014ea <order_phases+0x1ba>
        controller->i_q_des = 0.0f;
        commutate(controller, &cal->cal_position);
    	cal->theta_start = encoder->angle_multiturn[0];
    	return;
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800137e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001500 <order_phases+0x1d0>
 8001382:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	d51c      	bpl.n	80013c6 <order_phases+0x96>
    	if(pf2){
 800138c:	4d5d      	ldr	r5, [pc, #372]	; (8001504 <order_phases+0x1d4>)
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 80a2 	bne.w	80014da <order_phases+0x1aa>
    	    printf("p2\n\r");
    	    pf2 = 0;
    	}
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001396:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800139a:	ee37 7a67 	vsub.f32	s14, s14, s15
    	cal->cal_position.elec_angle = cal->theta_ref;
 800139e:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80013a2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80013a6:	ee27 7a27 	vmul.f32	s14, s14, s15
		commutate(controller, &cal->cal_position);
 80013aa:	4619      	mov	r1, r3
 80013ac:	4630      	mov	r0, r6
 80013ae:	312c      	adds	r1, #44	; 0x2c
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80013b0:	ed84 7a02 	vstr	s14, [r4, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80013b4:	ed83 7a22 	vstr	s14, [r3, #136]	; 0x88
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
    PHASE_ORDER = cal->phase_order;
    PPAIRS = (float)cal->ppairs;
    cal->started = 0;
    cal->done_ordering = 1;	// Finished checking phase order
}
 80013b8:	b005      	add	sp, #20
 80013ba:	ecbd 8b02 	vpop	{d8}
 80013be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		commutate(controller, &cal->cal_position);
 80013c2:	f001 b91f 	b.w	8002604 <commutate>
	reset_foc(controller);
 80013c6:	4608      	mov	r0, r1
 80013c8:	f001 f8a6 	bl	8002518 <reset_foc>
	float theta_end = encoder->angle_multiturn[0];
 80013cc:	ed97 8a03 	vldr	s16, [r7, #12]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80013d0:	edd4 8a06 	vldr	s17, [r4, #24]
 80013d4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001508 <order_phases+0x1d8>
 80013d8:	ee78 7a68 	vsub.f32	s15, s16, s17
 80013dc:	eef0 7ae7 	vabs.f32	s15, s15
 80013e0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80013e4:	ee17 0a90 	vmov	r0, s15
 80013e8:	f7ff f8d6 	bl	8000598 <__aeabi_f2d>
 80013ec:	ec41 0b10 	vmov	d0, r0, r1
 80013f0:	f00c f83c 	bl	800d46c <round>
 80013f4:	ec51 0b10 	vmov	r0, r1, d0
 80013f8:	f7ff fbfe 	bl	8000bf8 <__aeabi_d2uiz>
	if(cal->theta_start < theta_end){
 80013fc:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001404:	7020      	strb	r0, [r4, #0]
	if(cal->theta_start < theta_end){
 8001406:	d462      	bmi.n	80014ce <order_phases+0x19e>
		cal->phase_order = 1;
 8001408:	2301      	movs	r3, #1
		printf("Swapping phase sign\r\n");
 800140a:	4840      	ldr	r0, [pc, #256]	; (800150c <order_phases+0x1dc>)
		cal->phase_order = 1;
 800140c:	f884 3020 	strb.w	r3, [r4, #32]
		printf("Swapping phase sign\r\n");
 8001410:	f008 fc44 	bl	8009c9c <puts>
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001414:	7821      	ldrb	r1, [r4, #0]
 8001416:	483e      	ldr	r0, [pc, #248]	; (8001510 <order_phases+0x1e0>)
 8001418:	f008 fbba 	bl	8009b90 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 800141c:	69a0      	ldr	r0, [r4, #24]
 800141e:	f7ff f8bb 	bl	8000598 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ee18 0a10 	vmov	r0, s16
 800142a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800142e:	f7ff f8b3 	bl	8000598 <__aeabi_f2d>
 8001432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001436:	e9cd 0100 	strd	r0, r1, [sp]
 800143a:	4836      	ldr	r0, [pc, #216]	; (8001514 <order_phases+0x1e4>)
 800143c:	f008 fba8 	bl	8009b90 <iprintf>
    PHASE_ORDER = cal->phase_order;
 8001440:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001444:	f8c8 3000 	str.w	r3, [r8]
    PPAIRS = (float)cal->ppairs;
 8001448:	7823      	ldrb	r3, [r4, #0]
 800144a:	4933      	ldr	r1, [pc, #204]	; (8001518 <order_phases+0x1e8>)
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cal->started = 0;
 8001454:	2200      	movs	r2, #0
    cal->done_ordering = 1;	// Finished checking phase order
 8001456:	2301      	movs	r3, #1
    PPAIRS = (float)cal->ppairs;
 8001458:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
    cal->started = 0;
 800145c:	7422      	strb	r2, [r4, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 800145e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8001462:	b005      	add	sp, #20
 8001464:	ecbd 8b02 	vpop	{d8}
 8001468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Checking phase sign, pole pairs\r\n");
 800146c:	482b      	ldr	r0, [pc, #172]	; (800151c <order_phases+0x1ec>)
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 800146e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001530 <order_phases+0x200>
		printf("Checking phase sign, pole pairs\r\n");
 8001472:	f008 fc13 	bl	8009c9c <puts>
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 8001476:	4a23      	ldr	r2, [pc, #140]	; (8001504 <order_phases+0x1d4>)
		cal->start_count = loop_count;
 8001478:	60e5      	str	r5, [r4, #12]
		cal->started = 1;
 800147a:	2301      	movs	r3, #1
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 800147c:	6013      	str	r3, [r2, #0]
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800147e:	2200      	movs	r2, #0
		cal->started = 1;
 8001480:	7423      	strb	r3, [r4, #16]
		pf1 = pf2 = pf3 = pf4 = pf5 = 1;
 8001482:	f8c8 3000 	str.w	r3, [r8]
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001486:	6162      	str	r2, [r4, #20]
    		printf("p1\n\r");
 8001488:	4825      	ldr	r0, [pc, #148]	; (8001520 <order_phases+0x1f0>)
 800148a:	f008 fb81 	bl	8009b90 <iprintf>
    		pf1 = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c8 3000 	str.w	r3, [r8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001494:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001498:	2300      	movs	r3, #0
 800149a:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        cal->cal_position.elec_velocity = 0;
 80014a0:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        controller->i_d_des = I_CAL;
 80014a4:	491c      	ldr	r1, [pc, #112]	; (8001518 <order_phases+0x1e8>)
        cal->cal_position.elec_velocity = 0;
 80014a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        controller->i_d_des = I_CAL;
 80014aa:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80014ac:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
        commutate(controller, &cal->cal_position);
 80014b0:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 80014b4:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80014b8:	4630      	mov	r0, r6
 80014ba:	312c      	adds	r1, #44	; 0x2c
 80014bc:	f001 f8a2 	bl	8002604 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	61a3      	str	r3, [r4, #24]
}
 80014c4:	b005      	add	sp, #20
 80014c6:	ecbd 8b02 	vpop	{d8}
 80014ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cal->phase_order = 0;
 80014ce:	f884 9020 	strb.w	r9, [r4, #32]
		printf("Phase order correct\r\n");
 80014d2:	4814      	ldr	r0, [pc, #80]	; (8001524 <order_phases+0x1f4>)
 80014d4:	f008 fbe2 	bl	8009c9c <puts>
 80014d8:	e79c      	b.n	8001414 <order_phases+0xe4>
    	    printf("p2\n\r");
 80014da:	4813      	ldr	r0, [pc, #76]	; (8001528 <order_phases+0x1f8>)
 80014dc:	f008 fb58 	bl	8009b90 <iprintf>
    	    pf2 = 0;
 80014e0:	ed94 7a05 	vldr	s14, [r4, #20]
 80014e4:	f8c5 9000 	str.w	r9, [r5]
 80014e8:	e755      	b.n	8001396 <order_phases+0x66>
    	if(pf1){
 80014ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8001530 <order_phases+0x200>
 80014ee:	f8d8 3000 	ldr.w	r3, [r8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0ce      	beq.n	8001494 <order_phases+0x164>
 80014f6:	e7c7      	b.n	8001488 <order_phases+0x158>
 80014f8:	387ba882 	.word	0x387ba882
 80014fc:	46823556 	.word	0x46823556
 8001500:	46d40549 	.word	0x46d40549
 8001504:	2000022c 	.word	0x2000022c
 8001508:	40c90fdb 	.word	0x40c90fdb
 800150c:	0800da64 	.word	0x0800da64
 8001510:	0800da7c 	.word	0x0800da7c
 8001514:	0800da90 	.word	0x0800da90
 8001518:	2000068c 	.word	0x2000068c
 800151c:	0800da18 	.word	0x0800da18
 8001520:	0800da3c 	.word	0x0800da3c
 8001524:	0800da4c 	.word	0x0800da4c
 8001528:	0800da44 	.word	0x0800da44
 800152c:	20008f3c 	.word	0x20008f3c
 8001530:	20000228 	.word	0x20000228

08001534 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001538:	ed2d 8b02 	vpush	{d8}
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800153c:	7c17      	ldrb	r7, [r2, #16]
void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 800153e:	b082      	sub	sp, #8
 8001540:	4614      	mov	r4, r2
 8001542:	4680      	mov	r8, r0
 8001544:	460d      	mov	r5, r1
 8001546:	461e      	mov	r6, r3
	if(!cal->started){
 8001548:	2f00      	cmp	r7, #0
 800154a:	f000 80cf 	beq.w	80016ec <calibrate_encoder+0x1b8>
			cal->start_count = loop_count;
			cal->next_sample_time = T1;
			cal->sample_count = 0;
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800154e:	68d3      	ldr	r3, [r2, #12]
 8001550:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 80018b4 <calibrate_encoder+0x380>

    if(cal->time < T1){
 8001554:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80018b8 <calibrate_encoder+0x384>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001558:	1af6      	subs	r6, r6, r3
 800155a:	ee07 6a90 	vmov	s15, r6
 800155e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001562:	ee27 7a87 	vmul.f32	s14, s15, s14
    if(cal->time < T1){
 8001566:	eef4 7ae6 	vcmpe.f32	s15, s13
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800156e:	ed82 7a05 	vstr	s14, [r2, #20]
    if(cal->time < T1){
 8001572:	f100 80c7 	bmi.w	8001704 <calibrate_encoder+0x1d0>

    	cal->theta_start = encoder->angle_multiturn[0];
    	cal->next_sample_time = cal->time;
    	return;
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001576:	4ed1      	ldr	r6, [pc, #836]	; (80018bc <calibrate_encoder+0x388>)
 8001578:	ed9f 6ad1 	vldr	s12, [pc, #836]	; 80018c0 <calibrate_encoder+0x38c>
 800157c:	edd6 6a0a 	vldr	s13, [r6, #40]	; 0x28
 8001580:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001584:	eef0 5a67 	vmov.f32	s11, s15
 8001588:	eee6 5a86 	vfma.f32	s11, s13, s12
 800158c:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	f100 80d2 	bmi.w	800173c <calibrate_encoder+0x208>
			cal->sample_count++;

		}
		return;
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001598:	ed9f 6aca 	vldr	s12, [pc, #808]	; 80018c4 <calibrate_encoder+0x390>
 800159c:	eee6 7a86 	vfma.f32	s15, s13, s12
 80015a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	f100 8126 	bmi.w	80017f8 <calibrate_encoder+0x2c4>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
    }

    reset_foc(controller);
 80015ac:	4608      	mov	r0, r1
 80015ae:	f000 ffb3 	bl	8002518 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015b2:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80015b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80015ba:	ee17 3a10 	vmov	r3, s14
 80015be:	01da      	lsls	r2, r3, #7
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	f340 8173 	ble.w	80018ac <calibrate_encoder+0x378>
 80015c6:	eb04 2343 	add.w	r3, r4, r3, lsl #9
 80015ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80015ce:	f104 0128 	add.w	r1, r4, #40	; 0x28
    int ezero_mean = 0;
 80015d2:	2300      	movs	r3, #0
		ezero_mean += cal->error_arr[i];
 80015d4:	f851 0f04 	ldr.w	r0, [r1, #4]!
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015d8:	4291      	cmp	r1, r2
		ezero_mean += cal->error_arr[i];
 80015da:	4403      	add	r3, r0
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80015dc:	d1fa      	bne.n	80015d4 <calibrate_encoder+0xa0>
 80015de:	ee07 3a10 	vmov	s14, r3
 80015e2:	eeba 7aec 	vcvt.f32.s32	s14, s14, #7
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80015e6:	eec7 6a27 	vdiv.f32	s13, s14, s15

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80015ea:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
			}
			moving_avg = moving_avg/window;
			int lut_index = lut_offset + i;
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80015ec:	4fb6      	ldr	r7, [pc, #728]	; (80018c8 <calibrate_encoder+0x394>)
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80015ee:	f5d5 3580 	rsbs	r5, r5, #65536	; 0x10000
 80015f2:	bf48      	it	mi
 80015f4:	f205 15ff 	addwmi	r5, r5, #511	; 0x1ff
 80015f8:	126d      	asrs	r5, r5, #9
	for(int i = 0; i<N_LUT; i++){
 80015fa:	f04f 0800 	mov.w	r8, #0
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 80015fe:	eddf 8ab3 	vldr	s17, [pc, #716]	; 80018cc <calibrate_encoder+0x398>
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001602:	eebd 7ae6 	vcvt.s32.f32	s14, s13
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001606:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 800160a:	ee17 2a10 	vmov	r2, s14
 800160e:	ed84 7a07 	vstr	s14, [r4, #28]
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001612:	ee07 8a10 	vmov	s14, r8
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001616:	ee27 6aa8 	vmul.f32	s12, s15, s17
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 800161a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800161e:	ee36 5a48 	vsub.f32	s10, s12, s16
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001622:	ee65 5aa7 	vmul.f32	s11, s11, s15
			for(int j = (-window)/2; j<(window)/2; j++){
 8001626:	f06f 013f 	mvn.w	r1, #63	; 0x3f
			int moving_avg = 0;
 800162a:	2000      	movs	r0, #0
 800162c:	e011      	b.n	8001652 <calibrate_encoder+0x11e>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 800162e:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001632:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	bf48      	it	mi
 800163c:	eefd 7ae6 	vcvtmi.s32.f32	s15, s13
				moving_avg += cal->error_arr[index];
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			for(int j = (-window)/2; j<(window)/2; j++){
 8001648:	3101      	adds	r1, #1
				moving_avg += cal->error_arr[index];
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			for(int j = (-window)/2; j<(window)/2; j++){
 800164c:	2940      	cmp	r1, #64	; 0x40
				moving_avg += cal->error_arr[index];
 800164e:	4418      	add	r0, r3
			for(int j = (-window)/2; j<(window)/2; j++){
 8001650:	d012      	beq.n	8001678 <calibrate_encoder+0x144>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001652:	ee07 1a90 	vmov	s15, r1
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001662:	ee17 3a90 	vmov	r3, s15
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 800166a:	2b00      	cmp	r3, #0
 800166c:	ee36 7a86 	vadd.f32	s14, s13, s12
 8001670:	dadd      	bge.n	800162e <calibrate_encoder+0xfa>
 8001672:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001676:	e7e3      	b.n	8001640 <calibrate_encoder+0x10c>
			moving_avg = moving_avg/window;
 8001678:	2800      	cmp	r0, #0
 800167a:	bfb8      	it	lt
 800167c:	307f      	addlt	r0, #127	; 0x7f
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 800167e:	2d7f      	cmp	r5, #127	; 0x7f
			moving_avg = moving_avg/window;
 8001680:	ea4f 10e0 	mov.w	r0, r0, asr #7
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001684:	dd16      	ble.n	80016b4 <calibrate_encoder+0x180>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001686:	f505 53fc 	add.w	r3, r5, #8064	; 0x1f80
 800168a:	330a      	adds	r3, #10
 800168c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001690:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001692:	f1a5 0180 	sub.w	r1, r5, #128	; 0x80
	for(int i = 0; i<N_LUT; i++){
 8001696:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 800169a:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 800169c:	4638      	mov	r0, r7
 800169e:	f008 fa77 	bl	8009b90 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 80016a2:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80016a6:	f105 0501 	add.w	r5, r5, #1
 80016aa:	d015      	beq.n	80016d8 <calibrate_encoder+0x1a4>
 80016ac:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80016b0:	69e2      	ldr	r2, [r4, #28]
 80016b2:	e7ae      	b.n	8001612 <calibrate_encoder+0xde>
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016b4:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 80016b8:	330a      	adds	r3, #10
 80016ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80016be:	1a82      	subs	r2, r0, r2
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016c0:	4629      	mov	r1, r5
	for(int i = 0; i<N_LUT; i++){
 80016c2:	f108 0801 	add.w	r8, r8, #1
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 80016c6:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 80016c8:	4638      	mov	r0, r7
 80016ca:	f008 fa61 	bl	8009b90 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 80016ce:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 80016d2:	f105 0501 	add.w	r5, r5, #1
 80016d6:	d1e9      	bne.n	80016ac <calibrate_encoder+0x178>

		}

	cal->started = 0;
 80016d8:	2200      	movs	r2, #0
	cal->done_cal = 1;
 80016da:	2301      	movs	r3, #1
	cal->started = 0;
 80016dc:	7422      	strb	r2, [r4, #16]
	cal->done_cal = 1;
 80016de:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80016e2:	b002      	add	sp, #8
 80016e4:	ecbd 8b02 	vpop	{d8}
 80016e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Starting offset cal and linearization\r\n");
 80016ec:	4878      	ldr	r0, [pc, #480]	; (80018d0 <calibrate_encoder+0x39c>)
 80016ee:	f008 fad5 	bl	8009c9c <puts>
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80016f2:	2100      	movs	r1, #0
			cal->started = 1;
 80016f4:	2201      	movs	r2, #1
			cal->next_sample_time = T1;
 80016f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
			cal->start_count = loop_count;
 80016fa:	60e6      	str	r6, [r4, #12]
			cal->sample_count = 0;
 80016fc:	84a7      	strh	r7, [r4, #36]	; 0x24
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80016fe:	6161      	str	r1, [r4, #20]
			cal->started = 1;
 8001700:	7422      	strb	r2, [r4, #16]
			cal->next_sample_time = T1;
 8001702:	62a3      	str	r3, [r4, #40]	; 0x28
        cal->cal_position.elec_angle = cal->theta_ref;
 8001704:	f504 4202 	add.w	r2, r4, #33280	; 0x8200
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001708:	2300      	movs	r3, #0
        controller->i_d_des = I_CAL;
 800170a:	496c      	ldr	r1, [pc, #432]	; (80018bc <calibrate_encoder+0x388>)
        cal->theta_ref = 0;//W_CAL*cal->time;
 800170c:	60a3      	str	r3, [r4, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800170e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        controller->i_d_des = I_CAL;
 8001712:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8001714:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
        commutate(controller, &cal->cal_position);
 8001718:	f504 4102 	add.w	r1, r4, #33280	; 0x8200
        controller->i_q_des = 0.0f;
 800171c:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001720:	4628      	mov	r0, r5
 8001722:	312c      	adds	r1, #44	; 0x2c
 8001724:	f000 ff6e 	bl	8002604 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001728:	f8d8 200c 	ldr.w	r2, [r8, #12]
    	cal->next_sample_time = cal->time;
 800172c:	6963      	ldr	r3, [r4, #20]
    	cal->theta_start = encoder->angle_multiturn[0];
 800172e:	61a2      	str	r2, [r4, #24]
    	cal->next_sample_time = cal->time;
 8001730:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001732:	b002      	add	sp, #8
 8001734:	ecbd 8b02 	vpop	{d8}
 8001738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 800173c:	edd2 7a02 	vldr	s15, [r2, #8]
 8001740:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80018d4 <calibrate_encoder+0x3a0>
		cal->cal_position.elec_angle = cal->theta_ref;
 8001744:	f502 4302 	add.w	r3, r2, #33280	; 0x8200
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001748:	ee77 7a87 	vadd.f32	s15, s15, s14
		commutate(controller, &cal->cal_position);
 800174c:	4619      	mov	r1, r3
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 800174e:	edc2 7a02 	vstr	s15, [r2, #8]
		commutate(controller, &cal->cal_position);
 8001752:	4628      	mov	r0, r5
		cal->cal_position.elec_angle = cal->theta_ref;
 8001754:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 8001758:	312c      	adds	r1, #44	; 0x2c
 800175a:	f000 ff53 	bl	8002604 <commutate>
		if(cal->time > cal->next_sample_time){
 800175e:	ed94 7a05 	vldr	s14, [r4, #20]
 8001762:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8001766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	ddb8      	ble.n	80016e2 <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001770:	ed94 7a02 	vldr	s14, [r4, #8]
 8001774:	eddf 7a58 	vldr	s15, [pc, #352]	; 80018d8 <calibrate_encoder+0x3a4>
 8001778:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;//- encoder->raw;
 800177c:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001780:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001784:	ee67 7a27 	vmul.f32	s15, s14, s15
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001788:	eb04 0288 	add.w	r2, r4, r8, lsl #2
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800178c:	eec7 6a86 	vdiv.f32	s13, s15, s12
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001790:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001794:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001798:	ee17 7a90 	vmov	r7, s15
			int error = encoder->raw - count_ref;//- encoder->raw;
 800179c:	1bdb      	subs	r3, r3, r7
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800179e:	13dd      	asrs	r5, r3, #15
 80017a0:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 80017a4:	441d      	add	r5, r3
 80017a6:	62d5      	str	r5, [r2, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017a8:	f7fe fef6 	bl	8000598 <__aeabi_f2d>
 80017ac:	462b      	mov	r3, r5
 80017ae:	e9cd 0100 	strd	r0, r1, [sp]
 80017b2:	463a      	mov	r2, r7
 80017b4:	4849      	ldr	r0, [pc, #292]	; (80018dc <calibrate_encoder+0x3a8>)
 80017b6:	4641      	mov	r1, r8
 80017b8:	f008 f9ea 	bl	8009b90 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017bc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80017c0:	eddf 7a47 	vldr	s15, [pc, #284]	; 80018e0 <calibrate_encoder+0x3ac>
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017c4:	eddf 6a41 	vldr	s13, [pc, #260]	; 80018cc <calibrate_encoder+0x398>
 80017c8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017ca:	ee37 7a27 	vadd.f32	s14, s14, s15
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017ce:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017d2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017d6:	ed96 7a0a 	vldr	s14, [r6, #40]	; 0x28
 80017da:	eee7 7a26 	vfma.f32	s15, s14, s13
 80017de:	ee07 3a10 	vmov	s14, r3
 80017e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	f43f af78 	beq.w	80016e2 <calibrate_encoder+0x1ae>
			cal->sample_count++;
 80017f2:	3301      	adds	r3, #1
 80017f4:	84a3      	strh	r3, [r4, #36]	; 0x24
 80017f6:	e774      	b.n	80016e2 <calibrate_encoder+0x1ae>
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 80017f8:	edd2 7a02 	vldr	s15, [r2, #8]
 80017fc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80018d4 <calibrate_encoder+0x3a0>
 8001800:	ee77 7ac7 	vsub.f32	s15, s15, s14
		controller->i_q_des = 0.0f;
 8001804:	2300      	movs	r3, #0
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001806:	edc2 7a02 	vstr	s15, [r2, #8]
		controller->i_d_des = I_CAL;
 800180a:	6cb2      	ldr	r2, [r6, #72]	; 0x48
		controller->i_q_des = 0.0f;
 800180c:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001810:	f504 4302 	add.w	r3, r4, #33280	; 0x8200
		controller->i_d_des = I_CAL;
 8001814:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		commutate(controller, &cal->cal_position);
 8001818:	4619      	mov	r1, r3
		cal->cal_position.elec_angle = cal->theta_ref;
 800181a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		commutate(controller, &cal->cal_position);
 800181e:	4628      	mov	r0, r5
 8001820:	312c      	adds	r1, #44	; 0x2c
 8001822:	f000 feef 	bl	8002604 <commutate>
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001826:	ed94 7a05 	vldr	s14, [r4, #20]
 800182a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800182e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	f77f af54 	ble.w	80016e2 <calibrate_encoder+0x1ae>
 800183a:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
 800183c:	2f00      	cmp	r7, #0
 800183e:	f43f af50 	beq.w	80016e2 <calibrate_encoder+0x1ae>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001842:	ed94 7a02 	vldr	s14, [r4, #8]
 8001846:	eddf 7a24 	vldr	s15, [pc, #144]	; 80018d8 <calibrate_encoder+0x3a4>
 800184a:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			int error = encoder->raw - count_ref;// - encoder->raw;
 800184e:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 800185a:	eec7 6a86 	vdiv.f32	s13, s15, s12
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 800185e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001860:	ee17 0a10 	vmov	r0, s14
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001864:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001868:	ee17 6a90 	vmov	r6, s15
			int error = encoder->raw - count_ref;// - encoder->raw;
 800186c:	1b9b      	subs	r3, r3, r6
			error = error + ENC_CPR*(error<0);
 800186e:	13dd      	asrs	r5, r3, #15
 8001870:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 8001874:	441d      	add	r5, r3
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001876:	4415      	add	r5, r2
 8001878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800187c:	106d      	asrs	r5, r5, #1
 800187e:	62cd      	str	r5, [r1, #44]	; 0x2c
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001880:	f7fe fe8a 	bl	8000598 <__aeabi_f2d>
 8001884:	462b      	mov	r3, r5
 8001886:	e9cd 0100 	strd	r0, r1, [sp]
 800188a:	4632      	mov	r2, r6
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <calibrate_encoder+0x3a8>)
 800188e:	4639      	mov	r1, r7
 8001890:	f008 f97e 	bl	8009b90 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001894:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8001898:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80018e0 <calibrate_encoder+0x3ac>
			cal->sample_count--;
 800189c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800189e:	ee77 7a87 	vadd.f32	s15, s15, s14
			cal->sample_count--;
 80018a2:	3b01      	subs	r3, #1
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018a4:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
			cal->sample_count--;
 80018a8:	84a3      	strh	r3, [r4, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80018aa:	e71a      	b.n	80016e2 <calibrate_encoder+0x1ae>
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80018ac:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80018e4 <calibrate_encoder+0x3b0>
 80018b0:	e699      	b.n	80015e6 <calibrate_encoder+0xb2>
 80018b2:	bf00      	nop
 80018b4:	387ba882 	.word	0x387ba882
 80018b8:	46823556 	.word	0x46823556
 80018bc:	2000068c 	.word	0x2000068c
 80018c0:	3f20d97c 	.word	0x3f20d97c
 80018c4:	3fa0d97c 	.word	0x3fa0d97c
 80018c8:	0800dae4 	.word	0x0800dae4
 80018cc:	43000000 	.word	0x43000000
 80018d0:	0800daac 	.word	0x0800daac
 80018d4:	3a1d4951 	.word	0x3a1d4951
 80018d8:	4622f983 	.word	0x4622f983
 80018dc:	0800dad4 	.word	0x0800dad4
 80018e0:	3ba0d97c 	.word	0x3ba0d97c
 80018e4:	00000000 	.word	0x00000000

080018e8 <drv_write_DCR>:
}
void drv_write_register(DRVStruct drv, int reg, int val){
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, (reg<<11)|val);
}
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018e8:	b530      	push	{r4, r5, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018f0:	ea44 2242 	orr.w	r2, r4, r2, lsl #9
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018f6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 80018fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 80018fc:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001900:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001902:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001906:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001908:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800190c:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 800190e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 8001912:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001916:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 800191a:	ac02      	add	r4, sp, #8
 800191c:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001924:	2200      	movs	r2, #0
 8001926:	2110      	movs	r1, #16
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 800192c:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001930:	f004 fc5c 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <drv_write_DCR+0x78>)
 800193a:	2301      	movs	r3, #1
 800193c:	4621      	mov	r1, r4
 800193e:	f10d 020a 	add.w	r2, sp, #10
 8001942:	f005 fbab 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <drv_write_DCR+0x78>)
 8001948:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 800194c:	2a02      	cmp	r2, #2
 800194e:	d0fb      	beq.n	8001948 <drv_write_DCR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001950:	2201      	movs	r2, #1
 8001952:	2110      	movs	r1, #16
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f004 fc48 	bl	80061ec <HAL_GPIO_WritePin>
	uint16_t mask = 0x07FF;
	//printf("spi w %d, data being %d \n\r", val, (val&mask));
	uint16_t retval = drv_spi_write(&drv, val);
	//printf("loop retval = %d\n\r", (retval&mask));
}
 800195c:	b005      	add	sp, #20
 800195e:	bd30      	pop	{r4, r5, pc}
 8001960:	2000944c 	.word	0x2000944c

08001964 <drv_write_OCPCR>:
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001964:	b530      	push	{r4, r5, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 800196c:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001970:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001972:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001976:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
 800197a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 800197e:	ac02      	add	r4, sp, #8
 8001980:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001984:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001988:	2200      	movs	r2, #0
 800198a:	2110      	movs	r1, #16
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001990:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001994:	f004 fc2a 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4809      	ldr	r0, [pc, #36]	; (80019c4 <drv_write_OCPCR+0x60>)
 800199e:	2301      	movs	r3, #1
 80019a0:	4621      	mov	r1, r4
 80019a2:	f10d 020a 	add.w	r2, sp, #10
 80019a6:	f005 fb79 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <drv_write_OCPCR+0x60>)
 80019ac:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80019b0:	2a02      	cmp	r2, #2
 80019b2:	d0fb      	beq.n	80019ac <drv_write_OCPCR+0x48>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80019b4:	2201      	movs	r2, #1
 80019b6:	2110      	movs	r1, #16
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f004 fc16 	bl	80061ec <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 80019c0:	b005      	add	sp, #20
 80019c2:	bd30      	pop	{r4, r5, pc}
 80019c4:	2000944c 	.word	0x2000944c

080019c8 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019c8:	b530      	push	{r4, r5, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019d0:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019d6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019dc:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019e2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019e8:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019ec:	9c08      	ldr	r4, [sp, #32]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 80019ee:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80019f2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80019f6:	ea42 2343 	orr.w	r3, r2, r3, lsl #9
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 80019fa:	ac02      	add	r4, sp, #8
 80019fc:	e884 0003 	stmia.w	r4, {r0, r1}
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001a00:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a04:	2200      	movs	r2, #0
 8001a06:	2110      	movs	r1, #16
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a0c:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a10:	f004 fbec 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a14:	2364      	movs	r3, #100	; 0x64
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <drv_write_CSACR+0x78>)
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	f10d 020a 	add.w	r2, sp, #10
 8001a22:	f005 fb3b 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <drv_write_CSACR+0x78>)
 8001a28:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001a2c:	2a02      	cmp	r2, #2
 8001a2e:	d0fb      	beq.n	8001a28 <drv_write_CSACR+0x60>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001a30:	2201      	movs	r2, #1
 8001a32:	2110      	movs	r1, #16
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f004 fbd8 	bl	80061ec <HAL_GPIO_WritePin>
	//printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
 8001a3c:	b005      	add	sp, #20
 8001a3e:	bd30      	pop	{r4, r5, pc}
 8001a40:	2000944c 	.word	0x2000944c

08001a44 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8001a44:	b530      	push	{r4, r5, lr}
 8001a46:	b087      	sub	sp, #28
 8001a48:	ac02      	add	r4, sp, #8
 8001a4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001a52:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001a56:	9004      	str	r0, [sp, #16]
 8001a58:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2110      	movs	r1, #16
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001a64:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001a68:	f004 fbc0 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <drv_enable_gd+0xa0>)
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	a904      	add	r1, sp, #16
 8001a74:	f10d 0212 	add.w	r2, sp, #18
 8001a78:	2301      	movs	r3, #1
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	f005 fb0e 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001a80:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d0fb      	beq.n	8001a80 <drv_enable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f004 fbac 	bl	80061ec <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001a94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a98:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001a9c:	f8ad 1014 	strh.w	r1, [sp, #20]
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
	drv_spi_write(&drv, (reg<<11)|val);
 8001aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa8:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2110      	movs	r1, #16
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001ab2:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001ab6:	f004 fb99 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001aba:	2364      	movs	r3, #100	; 0x64
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <drv_enable_gd+0xa0>)
 8001ac0:	f10d 0212 	add.w	r2, sp, #18
 8001ac4:	a904      	add	r1, sp, #16
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f005 fae8 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001acc:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d0fb      	beq.n	8001acc <drv_enable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001adc:	f004 fb86 	bl	80061ec <HAL_GPIO_WritePin>
}
 8001ae0:	b007      	add	sp, #28
 8001ae2:	bd30      	pop	{r4, r5, pc}
 8001ae4:	2000944c 	.word	0x2000944c

08001ae8 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8001ae8:	b530      	push	{r4, r5, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	ac02      	add	r4, sp, #8
 8001aee:	e884 0003 	stmia.w	r4, {r0, r1}
 8001af2:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001af6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001afa:	9004      	str	r0, [sp, #16]
 8001afc:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b00:	2200      	movs	r2, #0
 8001b02:	2110      	movs	r1, #16
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b08:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b0c:	f004 fb6e 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	481d      	ldr	r0, [pc, #116]	; (8001b88 <drv_disable_gd+0xa0>)
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	a904      	add	r1, sp, #16
 8001b18:	f10d 0212 	add.w	r2, sp, #18
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4605      	mov	r5, r0
 8001b20:	f005 fabc 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b24:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d0fb      	beq.n	8001b24 <drv_disable_gd+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2110      	movs	r1, #16
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f004 fb5a 	bl	80061ec <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b3c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, DCR, val);
 8001b40:	f8ad 1014 	strh.w	r1, [sp, #20]
	drv_spi_write(&drv, (reg<<11)|val);
 8001b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2110      	movs	r1, #16
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001b56:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001b5a:	f004 fb47 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <drv_disable_gd+0xa0>)
 8001b64:	f10d 0212 	add.w	r2, sp, #18
 8001b68:	a904      	add	r1, sp, #16
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f005 fa96 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001b70:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d0fb      	beq.n	8001b70 <drv_disable_gd+0x88>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b80:	f004 fb34 	bl	80061ec <HAL_GPIO_WritePin>
}
 8001b84:	b007      	add	sp, #28
 8001b86:	bd30      	pop	{r4, r5, pc}
 8001b88:	2000944c 	.word	0x2000944c

08001b8c <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	//printf("spi w %d \n", val);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	ac02      	add	r4, sp, #8
 8001b92:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b96:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b9e:	9004      	str	r0, [sp, #16]
 8001ba0:	f8ad 1014 	strh.w	r1, [sp, #20]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001bac:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bb0:	f004 fb1c 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	486a      	ldr	r0, [pc, #424]	; (8001d60 <drv_print_faults+0x1d4>)
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	a904      	add	r1, sp, #16
 8001bbc:	f10d 0212 	add.w	r2, sp, #18
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4606      	mov	r6, r0
 8001bc4:	f005 fa6a 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001bc8:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d0fb      	beq.n	8001bc8 <drv_print_faults+0x3c>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f004 fb08 	bl	80061ec <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
	drv->spi_tx_word = val;
 8001be0:	f248 0301 	movw	r3, #32769	; 0x8001
	return drv->spi_rx_word;
 8001be4:	f8bd 5012 	ldrh.w	r5, [sp, #18]
    uint16_t val1 = drv_read_FSR1(drv);
    uint16_t val2 = drv_read_FSR2(drv);
 8001be8:	f8ad 1014 	strh.w	r1, [sp, #20]
	drv->spi_tx_word = val;
 8001bec:	9004      	str	r0, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	drv->spi_tx_word = val;
 8001bf6:	f8ad 3010 	strh.w	r3, [sp, #16]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bfa:	f004 faf7 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4857      	ldr	r0, [pc, #348]	; (8001d60 <drv_print_faults+0x1d4>)
 8001c04:	f10d 0212 	add.w	r2, sp, #18
 8001c08:	a904      	add	r1, sp, #16
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f005 fa46 	bl	800709c <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001c10:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d0fb      	beq.n	8001c10 <drv_print_faults+0x84>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f004 fae4 	bl	80061ec <HAL_GPIO_WritePin>

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001c24:	056e      	lsls	r6, r5, #21
	return drv->spi_rx_word;
 8001c26:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001c2a:	d42b      	bmi.n	8001c84 <drv_print_faults+0xf8>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001c2c:	05a8      	lsls	r0, r5, #22
 8001c2e:	d42e      	bmi.n	8001c8e <drv_print_faults+0x102>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001c30:	05e9      	lsls	r1, r5, #23
 8001c32:	d431      	bmi.n	8001c98 <drv_print_faults+0x10c>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001c34:	062a      	lsls	r2, r5, #24
 8001c36:	d434      	bmi.n	8001ca2 <drv_print_faults+0x116>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001c38:	066b      	lsls	r3, r5, #25
 8001c3a:	d437      	bmi.n	8001cac <drv_print_faults+0x120>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001c3c:	06ae      	lsls	r6, r5, #26
 8001c3e:	d43a      	bmi.n	8001cb6 <drv_print_faults+0x12a>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001c40:	06e8      	lsls	r0, r5, #27
 8001c42:	d43d      	bmi.n	8001cc0 <drv_print_faults+0x134>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001c44:	0729      	lsls	r1, r5, #28
 8001c46:	d440      	bmi.n	8001cca <drv_print_faults+0x13e>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001c48:	076a      	lsls	r2, r5, #29
 8001c4a:	d443      	bmi.n	8001cd4 <drv_print_faults+0x148>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001c4c:	07ab      	lsls	r3, r5, #30
 8001c4e:	d446      	bmi.n	8001cde <drv_print_faults+0x152>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001c50:	07ee      	lsls	r6, r5, #31
 8001c52:	d449      	bmi.n	8001ce8 <drv_print_faults+0x15c>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001c54:	0565      	lsls	r5, r4, #21
 8001c56:	d44c      	bmi.n	8001cf2 <drv_print_faults+0x166>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001c58:	05a0      	lsls	r0, r4, #22
 8001c5a:	d44f      	bmi.n	8001cfc <drv_print_faults+0x170>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001c5c:	05e1      	lsls	r1, r4, #23
 8001c5e:	d452      	bmi.n	8001d06 <drv_print_faults+0x17a>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001c60:	0622      	lsls	r2, r4, #24
 8001c62:	d455      	bmi.n	8001d10 <drv_print_faults+0x184>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001c64:	0663      	lsls	r3, r4, #25
 8001c66:	d458      	bmi.n	8001d1a <drv_print_faults+0x18e>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001c68:	06a6      	lsls	r6, r4, #26
 8001c6a:	d45b      	bmi.n	8001d24 <drv_print_faults+0x198>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001c6c:	06e5      	lsls	r5, r4, #27
 8001c6e:	d45e      	bmi.n	8001d2e <drv_print_faults+0x1a2>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001c70:	0720      	lsls	r0, r4, #28
 8001c72:	d461      	bmi.n	8001d38 <drv_print_faults+0x1ac>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8001c74:	0761      	lsls	r1, r4, #29
 8001c76:	d464      	bmi.n	8001d42 <drv_print_faults+0x1b6>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8001c78:	07a2      	lsls	r2, r4, #30
 8001c7a:	d467      	bmi.n	8001d4c <drv_print_faults+0x1c0>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8001c7c:	07e3      	lsls	r3, r4, #31
 8001c7e:	d46a      	bmi.n	8001d56 <drv_print_faults+0x1ca>

}
 8001c80:	b006      	add	sp, #24
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001c84:	4837      	ldr	r0, [pc, #220]	; (8001d64 <drv_print_faults+0x1d8>)
 8001c86:	f007 ff83 	bl	8009b90 <iprintf>
    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001c8a:	05a8      	lsls	r0, r5, #22
 8001c8c:	d5d0      	bpl.n	8001c30 <drv_print_faults+0xa4>
 8001c8e:	4836      	ldr	r0, [pc, #216]	; (8001d68 <drv_print_faults+0x1dc>)
 8001c90:	f007 ff7e 	bl	8009b90 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001c94:	05e9      	lsls	r1, r5, #23
 8001c96:	d5cd      	bpl.n	8001c34 <drv_print_faults+0xa8>
 8001c98:	4834      	ldr	r0, [pc, #208]	; (8001d6c <drv_print_faults+0x1e0>)
 8001c9a:	f007 ff79 	bl	8009b90 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001c9e:	062a      	lsls	r2, r5, #24
 8001ca0:	d5ca      	bpl.n	8001c38 <drv_print_faults+0xac>
 8001ca2:	4833      	ldr	r0, [pc, #204]	; (8001d70 <drv_print_faults+0x1e4>)
 8001ca4:	f007 ff74 	bl	8009b90 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001ca8:	066b      	lsls	r3, r5, #25
 8001caa:	d5c7      	bpl.n	8001c3c <drv_print_faults+0xb0>
 8001cac:	4831      	ldr	r0, [pc, #196]	; (8001d74 <drv_print_faults+0x1e8>)
 8001cae:	f007 ff6f 	bl	8009b90 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001cb2:	06ae      	lsls	r6, r5, #26
 8001cb4:	d5c4      	bpl.n	8001c40 <drv_print_faults+0xb4>
 8001cb6:	4830      	ldr	r0, [pc, #192]	; (8001d78 <drv_print_faults+0x1ec>)
 8001cb8:	f007 ff6a 	bl	8009b90 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001cbc:	06e8      	lsls	r0, r5, #27
 8001cbe:	d5c1      	bpl.n	8001c44 <drv_print_faults+0xb8>
 8001cc0:	482e      	ldr	r0, [pc, #184]	; (8001d7c <drv_print_faults+0x1f0>)
 8001cc2:	f007 ff65 	bl	8009b90 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001cc6:	0729      	lsls	r1, r5, #28
 8001cc8:	d5be      	bpl.n	8001c48 <drv_print_faults+0xbc>
 8001cca:	482d      	ldr	r0, [pc, #180]	; (8001d80 <drv_print_faults+0x1f4>)
 8001ccc:	f007 ff60 	bl	8009b90 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001cd0:	076a      	lsls	r2, r5, #29
 8001cd2:	d5bb      	bpl.n	8001c4c <drv_print_faults+0xc0>
 8001cd4:	482b      	ldr	r0, [pc, #172]	; (8001d84 <drv_print_faults+0x1f8>)
 8001cd6:	f007 ff5b 	bl	8009b90 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001cda:	07ab      	lsls	r3, r5, #30
 8001cdc:	d5b8      	bpl.n	8001c50 <drv_print_faults+0xc4>
 8001cde:	482a      	ldr	r0, [pc, #168]	; (8001d88 <drv_print_faults+0x1fc>)
 8001ce0:	f007 ff56 	bl	8009b90 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001ce4:	07ee      	lsls	r6, r5, #31
 8001ce6:	d5b5      	bpl.n	8001c54 <drv_print_faults+0xc8>
 8001ce8:	4828      	ldr	r0, [pc, #160]	; (8001d8c <drv_print_faults+0x200>)
 8001cea:	f007 ff51 	bl	8009b90 <iprintf>
    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001cee:	0565      	lsls	r5, r4, #21
 8001cf0:	d5b2      	bpl.n	8001c58 <drv_print_faults+0xcc>
 8001cf2:	4827      	ldr	r0, [pc, #156]	; (8001d90 <drv_print_faults+0x204>)
 8001cf4:	f007 ff4c 	bl	8009b90 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001cf8:	05a0      	lsls	r0, r4, #22
 8001cfa:	d5af      	bpl.n	8001c5c <drv_print_faults+0xd0>
 8001cfc:	4825      	ldr	r0, [pc, #148]	; (8001d94 <drv_print_faults+0x208>)
 8001cfe:	f007 ff47 	bl	8009b90 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001d02:	05e1      	lsls	r1, r4, #23
 8001d04:	d5ac      	bpl.n	8001c60 <drv_print_faults+0xd4>
 8001d06:	4824      	ldr	r0, [pc, #144]	; (8001d98 <drv_print_faults+0x20c>)
 8001d08:	f007 ff42 	bl	8009b90 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001d0c:	0622      	lsls	r2, r4, #24
 8001d0e:	d5a9      	bpl.n	8001c64 <drv_print_faults+0xd8>
 8001d10:	4822      	ldr	r0, [pc, #136]	; (8001d9c <drv_print_faults+0x210>)
 8001d12:	f007 ff3d 	bl	8009b90 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001d16:	0663      	lsls	r3, r4, #25
 8001d18:	d5a6      	bpl.n	8001c68 <drv_print_faults+0xdc>
 8001d1a:	4821      	ldr	r0, [pc, #132]	; (8001da0 <drv_print_faults+0x214>)
 8001d1c:	f007 ff38 	bl	8009b90 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8001d20:	06a6      	lsls	r6, r4, #26
 8001d22:	d5a3      	bpl.n	8001c6c <drv_print_faults+0xe0>
 8001d24:	481f      	ldr	r0, [pc, #124]	; (8001da4 <drv_print_faults+0x218>)
 8001d26:	f007 ff33 	bl	8009b90 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8001d2a:	06e5      	lsls	r5, r4, #27
 8001d2c:	d5a0      	bpl.n	8001c70 <drv_print_faults+0xe4>
 8001d2e:	481e      	ldr	r0, [pc, #120]	; (8001da8 <drv_print_faults+0x21c>)
 8001d30:	f007 ff2e 	bl	8009b90 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8001d34:	0720      	lsls	r0, r4, #28
 8001d36:	d59d      	bpl.n	8001c74 <drv_print_faults+0xe8>
 8001d38:	481c      	ldr	r0, [pc, #112]	; (8001dac <drv_print_faults+0x220>)
 8001d3a:	f007 ff29 	bl	8009b90 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8001d3e:	0761      	lsls	r1, r4, #29
 8001d40:	d59a      	bpl.n	8001c78 <drv_print_faults+0xec>
 8001d42:	481b      	ldr	r0, [pc, #108]	; (8001db0 <drv_print_faults+0x224>)
 8001d44:	f007 ff24 	bl	8009b90 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8001d48:	07a2      	lsls	r2, r4, #30
 8001d4a:	d597      	bpl.n	8001c7c <drv_print_faults+0xf0>
 8001d4c:	4819      	ldr	r0, [pc, #100]	; (8001db4 <drv_print_faults+0x228>)
 8001d4e:	f007 ff1f 	bl	8009b90 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8001d52:	07e3      	lsls	r3, r4, #31
 8001d54:	d594      	bpl.n	8001c80 <drv_print_faults+0xf4>
 8001d56:	4818      	ldr	r0, [pc, #96]	; (8001db8 <drv_print_faults+0x22c>)
 8001d58:	f007 ff1a 	bl	8009b90 <iprintf>
}
 8001d5c:	b006      	add	sp, #24
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
 8001d60:	2000944c 	.word	0x2000944c
 8001d64:	0800daf0 	.word	0x0800daf0
 8001d68:	0800dafc 	.word	0x0800dafc
 8001d6c:	0800db08 	.word	0x0800db08
 8001d70:	0800db10 	.word	0x0800db10
 8001d74:	0800db18 	.word	0x0800db18
 8001d78:	0800db20 	.word	0x0800db20
 8001d7c:	0800db2c 	.word	0x0800db2c
 8001d80:	0800db38 	.word	0x0800db38
 8001d84:	0800db44 	.word	0x0800db44
 8001d88:	0800db50 	.word	0x0800db50
 8001d8c:	0800db5c 	.word	0x0800db5c
 8001d90:	0800db68 	.word	0x0800db68
 8001d94:	0800db70 	.word	0x0800db70
 8001d98:	0800db78 	.word	0x0800db78
 8001d9c:	0800db80 	.word	0x0800db80
 8001da0:	0800db88 	.word	0x0800db88
 8001da4:	0800db90 	.word	0x0800db90
 8001da8:	0800db9c 	.word	0x0800db9c
 8001dac:	0800dba8 	.word	0x0800dba8
 8001db0:	0800dbb4 	.word	0x0800dbb4
 8001db4:	0800dbc0 	.word	0x0800dbc0
 8001db8:	0800dbcc 	.word	0x0800dbcc

08001dbc <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001dbc:	480f      	ldr	r0, [pc, #60]	; (8001dfc <MX_FDCAN2_Init+0x40>)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_FDCAN2_Init+0x44>)
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001dc0:	2200      	movs	r2, #0
{
 8001dc2:	b510      	push	{r4, lr}
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 1;
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 12;
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001dc4:	2103      	movs	r1, #3
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001dc6:	240c      	movs	r4, #12
  hfdcan2.Instance = FDCAN2;
 8001dc8:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001dca:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.NominalPrescaler = 1;
 8001dcc:	2301      	movs	r3, #1
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001dce:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001dd2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hfdcan2.Init.DataPrescaler = 1;
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001dd6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hfdcan2.Init.DataTimeSeg1 = 12;
  hfdcan2.Init.DataTimeSeg2 = 3;
  hfdcan2.Init.StdFiltersNbr = 1;
  hfdcan2.Init.ExtFiltersNbr = 1;
 8001dda:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.ProtocolException = DISABLE;
 8001dde:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001de0:	63c2      	str	r2, [r0, #60]	; 0x3c
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8001de2:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001de4:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8001de6:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001de8:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001dea:	f003 fb61 	bl	80054b0 <HAL_FDCAN_Init>
 8001dee:	b900      	cbnz	r0, 8001df2 <MX_FDCAN2_Init+0x36>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001df0:	bd10      	pop	{r4, pc}
 8001df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001df6:	f001 bf31 	b.w	8003c5c <Error_Handler>
 8001dfa:	bf00      	nop
 8001dfc:	20000380 	.word	0x20000380
 8001e00:	40006800 	.word	0x40006800

08001e04 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001e04:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(fdcanHandle->Instance==FDCAN2)
 8001e06:	6802      	ldr	r2, [r0, #0]
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_FDCAN_MspInit+0x74>)
{
 8001e0a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	2400      	movs	r4, #0
  if(fdcanHandle->Instance==FDCAN2)
 8001e0e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001e14:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001e18:	9406      	str	r4, [sp, #24]
  if(fdcanHandle->Instance==FDCAN2)
 8001e1a:	d001      	beq.n	8001e20 <HAL_FDCAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001e1c:	b008      	add	sp, #32
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e20:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	a902      	add	r1, sp, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	4814      	ldr	r0, [pc, #80]	; (8001e7c <HAL_FDCAN_MspInit+0x78>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e2a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e32:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001e36:	9200      	str	r2, [sp, #0]
 8001e38:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e3c:	f042 0202 	orr.w	r2, r2, #2
 8001e40:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e4a:	2260      	movs	r2, #96	; 0x60
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e52:	2509      	movs	r5, #9
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e54:	2300      	movs	r3, #0
 8001e56:	2200      	movs	r2, #0
 8001e58:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e5e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f004 f8d0 	bl	8006004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 1, 0);
 8001e64:	4622      	mov	r2, r4
 8001e66:	2101      	movs	r1, #1
 8001e68:	2056      	movs	r0, #86	; 0x56
 8001e6a:	f003 fa47 	bl	80052fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001e6e:	2056      	movs	r0, #86	; 0x56
 8001e70:	f003 fa7c 	bl	800536c <HAL_NVIC_EnableIRQ>
}
 8001e74:	b008      	add	sp, #32
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	40006800 	.word	0x40006800
 8001e7c:	48000400 	.word	0x48000400

08001e80 <can_rx_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8001e80:	b530      	push	{r4, r5, lr}
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <can_rx_init+0x3c>)
	msg->filter.IdType = FDCAN_STANDARD_ID;
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	//msg->filter.FilterConfig = FDCAN_FILTER_DISABLE;


	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001e84:	4d0e      	ldr	r5, [pc, #56]	; (8001ec0 <can_rx_init+0x40>)
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8001e86:	685c      	ldr	r4, [r3, #4]
 8001e88:	6444      	str	r4, [r0, #68]	; 0x44
void can_rx_init(CANRxMessage *msg){
 8001e8a:	b083      	sub	sp, #12
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001e8c:	2402      	movs	r4, #2
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001e8e:	2201      	movs	r2, #1
	msg->filter.FilterIndex = 0;
 8001e90:	2300      	movs	r3, #0
	msg->filter.FilterID2 = 0x7FF;
 8001e92:	f240 71ff 	movw	r1, #2047	; 0x7ff
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8001e96:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
	msg->filter.FilterID2 = 0x7FF;
 8001e9a:	6481      	str	r1, [r0, #72]	; 0x48
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001e9c:	6402      	str	r2, [r0, #64]	; 0x40
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 8001e9e:	63c4      	str	r4, [r0, #60]	; 0x3c
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 8001ea0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	f003 fc83 	bl	80057b0 <HAL_FDCAN_ConfigFilter>

	//HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT);
 8001eaa:	9400      	str	r4, [sp, #0]
 8001eac:	4628      	mov	r0, r5
 8001eae:	4623      	mov	r3, r4
 8001eb0:	4622      	mov	r2, r4
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	f003 fcae 	bl	8005814 <HAL_FDCAN_ConfigGlobalFilter>
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
	msg->filter.FilterActivation=ENABLE;
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
	*/
}
 8001eb8:	b003      	add	sp, #12
 8001eba:	bd30      	pop	{r4, r5, pc}
 8001ebc:	20008f3c 	.word	0x20008f3c
 8001ec0:	20000380 	.word	0x20000380

08001ec4 <can_tx_init>:
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001ec4:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <can_tx_init+0x24>)
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001ec6:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001eca:	6891      	ldr	r1, [r2, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8001ecc:	6143      	str	r3, [r0, #20]
	msg->tx_header.MessageMarker = 0; //???
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001ece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001ed2:	2300      	movs	r3, #0
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
 8001ed4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	msg->tx_header.Identifier = CAN_MASTER; // ?
 8001ed8:	6081      	str	r1, [r0, #8]
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 8001eda:	6242      	str	r2, [r0, #36]	; 0x24
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001edc:	6203      	str	r3, [r0, #32]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 8001ede:	60c3      	str	r3, [r0, #12]
	msg->tx_header.MessageMarker = 0; //???
 8001ee0:	6283      	str	r3, [r0, #40]	; 0x28
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8001ee2:	6103      	str	r3, [r0, #16]
	msg->tx_header.DLC = 6; 			// message size of 8 byte - DataLength
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard - TxFrameType
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request? - ???
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID - ??? Probably Identifier
	*/
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20008f3c 	.word	0x20008f3c

08001eec <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001eec:	b084      	sub	sp, #16
 8001eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ef2:	ed2d 8b02 	vpush	{d8}
 8001ef6:	ac0a      	add	r4, sp, #40	; 0x28
 8001ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001efc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8001f00:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f04:	f8bd 0029 	ldrh.w	r0, [sp, #41]	; 0x29
 8001f08:	4c2f      	ldr	r4, [pc, #188]	; (8001fc8 <unpack_cmd+0xdc>)
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f0a:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f0e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f12:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001f16:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f1a:	edd4 0a14 	vldr	s1, [r4, #80]	; 0x50
 8001f1e:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001f22:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8001fcc <unpack_cmd+0xe0>
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f26:	ea4f 2902 	mov.w	r9, r2, lsl #8
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f2a:	ea4f 2803 	mov.w	r8, r3, lsl #8
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f2e:	ba40      	rev16	r0, r0
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f30:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001f34:	091b      	lsrs	r3, r3, #4
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f36:	0912      	lsrs	r2, r2, #4
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001f38:	ea49 0901 	orr.w	r9, r9, r1
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f3c:	b280      	uxth	r0, r0
 8001f3e:	2110      	movs	r1, #16
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f40:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001f44:	ea42 1606 	orr.w	r6, r2, r6, lsl #4
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001f48:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001f4c:	ea48 0807 	orr.w	r8, r8, r7
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001f50:	9f1d      	ldr	r7, [sp, #116]	; 0x74
        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001f52:	f001 fee3 	bl	8003d1c <uint_to_float>
 8001f56:	ed87 0a00 	vstr	s0, [r7]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001f5a:	edd4 0a16 	vldr	s1, [r4, #88]	; 0x58
 8001f5e:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8001f62:	4630      	mov	r0, r6
 8001f64:	210c      	movs	r1, #12
 8001f66:	f001 fed9 	bl	8003d1c <uint_to_float>
 8001f6a:	ed87 0a01 	vstr	s0, [r7, #4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001f6e:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
 8001f72:	4648      	mov	r0, r9
 8001f74:	eeb0 0a48 	vmov.f32	s0, s16
 8001f78:	210c      	movs	r1, #12
 8001f7a:	f001 fecf 	bl	8003d1c <uint_to_float>
 8001f7e:	ed87 0a02 	vstr	s0, [r7, #8]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001f82:	edd4 0a18 	vldr	s1, [r4, #96]	; 0x60
 8001f86:	4628      	mov	r0, r5
 8001f88:	eeb0 0a48 	vmov.f32	s0, s16
 8001f8c:	210c      	movs	r1, #12
 8001f8e:	f001 fec5 	bl	8003d1c <uint_to_float>
 8001f92:	ed87 0a03 	vstr	s0, [r7, #12]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001f96:	edd4 0a03 	vldr	s1, [r4, #12]
 8001f9a:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8001f9e:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8001fa2:	ee60 0a87 	vmul.f32	s1, s1, s14
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001fac:	210c      	movs	r1, #12
 8001fae:	eeb1 0a60 	vneg.f32	s0, s1
 8001fb2:	f001 feb3 	bl	8003d1c <uint_to_float>

    }
 8001fb6:	ecbd 8b02 	vpop	{d8}
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001fba:	ed87 0a04 	vstr	s0, [r7, #16]
    }
 8001fbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fc2:	b004      	add	sp, #16
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	2000068c 	.word	0x2000068c
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 8001fd0:	b410      	push	{r4}
 8001fd2:	4c16      	ldr	r4, [pc, #88]	; (800202c <load_from_flash+0x5c>)
 8001fd4:	f1c4 6000 	rsb	r0, r4, #134217728	; 0x8000000
 8001fd8:	4623      	mov	r3, r4
 8001fda:	f500 20fb 	add.w	r0, r0, #514048	; 0x7d800
 8001fde:	f504 7480 	add.w	r4, r4, #256	; 0x100
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
    	uint32_t address = FLOATS_ADDR + i*4;
    	uint64_t doubleWord = *((uint64_t*)(address));
 8001fe2:	18c2      	adds	r2, r0, r3
 8001fe4:	58c1      	ldr	r1, [r0, r3]
 8001fe6:	6852      	ldr	r2, [r2, #4]

    	float float1 = *((float*)(&word1));
    	float float2 = *((float*)(&word2));

    	__float_reg[i] =   float1;
    	__float_reg[i+1] = float2;
 8001fe8:	605a      	str	r2, [r3, #4]
    	__float_reg[i] =   float1;
 8001fea:	6019      	str	r1, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 8001fec:	3308      	adds	r3, #8
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	d1f7      	bne.n	8001fe2 <load_from_flash+0x12>
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <load_from_flash+0x60>)
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <load_from_flash+0x64>)

    }
    for(int i = 0;i<INTSCOUNT;i=i+2){
 8001ff6:	4810      	ldr	r0, [pc, #64]	; (8002038 <load_from_flash+0x68>)
 8001ff8:	1d11      	adds	r1, r2, #4
    	uint64_t doubleWord = *((uint64_t*)(address));

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;

		float int1 = *((int*)(&word1));
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		float int2 = *((int*)(&word2));
 8002002:	edd3 7a01 	vldr	s15, [r3, #4]

		__int_reg[i] =   int1;
 8002006:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		float int2 = *((int*)(&word2));
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		__int_reg[i] =   int1;
 800200e:	ee17 4a10 	vmov	r4, s14
		__int_reg[i+1] = int2;
 8002012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		__int_reg[i] =   int1;
 8002016:	50d4      	str	r4, [r2, r3]
		__int_reg[i+1] = int2;
 8002018:	ee17 4a90 	vmov	r4, s15
 800201c:	50cc      	str	r4, [r1, r3]
    for(int i = 0;i<INTSCOUNT;i=i+2){
 800201e:	3308      	adds	r3, #8
 8002020:	4283      	cmp	r3, r0
 8002022:	d1ea      	bne.n	8001ffa <load_from_flash+0x2a>
    }
}
 8002024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	2000068c 	.word	0x2000068c
 8002030:	17f8b63c 	.word	0x17f8b63c
 8002034:	0807d900 	.word	0x0807d900
 8002038:	0807dd00 	.word	0x0807dd00

0800203c <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	b087      	sub	sp, #28

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8002040:	f003 fe9c 	bl	8005d7c <HAL_FLASH_Unlock>
	if(status!=HAL_OK) return 1;
 8002044:	b110      	cbz	r0, 800204c <save_to_flash+0x10>
 8002046:	2001      	movs	r0, #1
    }
    HAL_FLASH_Lock();
    HAL_FLASH_OB_Lock();
    printf("SaveToFlash All Ok\n");
    return 0;
}
 8002048:	b007      	add	sp, #28
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = HAL_FLASH_OB_Unlock();
 800204c:	f003 feb6 	bl	8005dbc <HAL_FLASH_OB_Unlock>
	if(status!=HAL_OK) return 2;
 8002050:	2800      	cmp	r0, #0
 8002052:	d134      	bne.n	80020be <save_to_flash+0x82>
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002054:	2305      	movs	r3, #5
 8002056:	227b      	movs	r2, #123	; 0x7b
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8002058:	a901      	add	r1, sp, #4
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800205a:	2400      	movs	r4, #0
 800205c:	2502      	movs	r5, #2
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 800205e:	a802      	add	r0, sp, #8
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002060:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002064:	e9cd 4502 	strd	r4, r5, [sp, #8]
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 8002068:	f003 fef4 	bl	8005e54 <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 800206c:	4827      	ldr	r0, [pc, #156]	; (800210c <save_to_flash+0xd0>)
 800206e:	f007 fd8f 	bl	8009b90 <iprintf>
    return error;
 8002072:	9b01      	ldr	r3, [sp, #4]
    if(eraseError!=0xFFFFFFFF) return 3;
 8002074:	3301      	adds	r3, #1
 8002076:	d002      	beq.n	800207e <save_to_flash+0x42>
 8002078:	2003      	movs	r0, #3
}
 800207a:	b007      	add	sp, #28
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <save_to_flash+0xd4>)
 8002080:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8002084:	611a      	str	r2, [r3, #16]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800208a:	f003 feb9 	bl	8005e00 <FLASH_WaitForLastOperation>
    if(status!=HAL_OK) return 5;
 800208e:	bb90      	cbnz	r0, 80020f6 <save_to_flash+0xba>
 8002090:	4c20      	ldr	r4, [pc, #128]	; (8002114 <save_to_flash+0xd8>)
 8002092:	4e21      	ldr	r6, [pc, #132]	; (8002118 <save_to_flash+0xdc>)
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 8002094:	4605      	mov	r5, r0
 8002096:	e002      	b.n	800209e <save_to_flash+0x62>
 8002098:	3502      	adds	r5, #2
 800209a:	2d40      	cmp	r5, #64	; 0x40
 800209c:	d012      	beq.n	80020c4 <save_to_flash+0x88>
        uint64_t doubleWord = *((uint64_t*) (__float_reg + i)); //read two floats from array as one uint64
 800209e:	1933      	adds	r3, r6, r4
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 80020a0:	4621      	mov	r1, r4
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	2000      	movs	r0, #0
 80020a8:	f003 fdba 	bl	8005c20 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing float #%d", i);return 6;}
 80020ac:	3408      	adds	r4, #8
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d0f2      	beq.n	8002098 <save_to_flash+0x5c>
 80020b2:	481a      	ldr	r0, [pc, #104]	; (800211c <save_to_flash+0xe0>)
 80020b4:	4629      	mov	r1, r5
 80020b6:	f007 fd6b 	bl	8009b90 <iprintf>
 80020ba:	2006      	movs	r0, #6
 80020bc:	e7c4      	b.n	8002048 <save_to_flash+0xc>
	if(status!=HAL_OK) return 2;
 80020be:	2002      	movs	r0, #2
}
 80020c0:	b007      	add	sp, #28
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c4:	4e16      	ldr	r6, [pc, #88]	; (8002120 <save_to_flash+0xe4>)
 80020c6:	4f17      	ldr	r7, [pc, #92]	; (8002124 <save_to_flash+0xe8>)
    for(int i=0;i<INTSCOUNT;i=i+2){
 80020c8:	4604      	mov	r4, r0
 80020ca:	e003      	b.n	80020d4 <save_to_flash+0x98>
 80020cc:	3402      	adds	r4, #2
 80020ce:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80020d2:	d012      	beq.n	80020fa <save_to_flash+0xbe>
        uint64_t doubleWord = *((uint64_t*) (__int_reg + i));
 80020d4:	19bb      	adds	r3, r7, r6
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, INTS_ADDR + i*sizeof(int), doubleWord);
 80020d6:	4631      	mov	r1, r6
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	2000      	movs	r0, #0
 80020de:	f003 fd9f 	bl	8005c20 <HAL_FLASH_Program>
        if(status!=HAL_OK) {printf("SaveToFlash fail writing int #%d", i);return 7;}
 80020e2:	3608      	adds	r6, #8
 80020e4:	4605      	mov	r5, r0
 80020e6:	2800      	cmp	r0, #0
 80020e8:	d0f0      	beq.n	80020cc <save_to_flash+0x90>
 80020ea:	480f      	ldr	r0, [pc, #60]	; (8002128 <save_to_flash+0xec>)
 80020ec:	4621      	mov	r1, r4
 80020ee:	f007 fd4f 	bl	8009b90 <iprintf>
 80020f2:	2007      	movs	r0, #7
 80020f4:	e7a8      	b.n	8002048 <save_to_flash+0xc>
    if(status!=HAL_OK) return 5;
 80020f6:	2005      	movs	r0, #5
 80020f8:	e7a6      	b.n	8002048 <save_to_flash+0xc>
    HAL_FLASH_Lock();
 80020fa:	f003 fe53 	bl	8005da4 <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 80020fe:	f003 fe71 	bl	8005de4 <HAL_FLASH_OB_Lock>
    printf("SaveToFlash All Ok\n");
 8002102:	480a      	ldr	r0, [pc, #40]	; (800212c <save_to_flash+0xf0>)
 8002104:	f007 fdca 	bl	8009c9c <puts>
    return 0;
 8002108:	4628      	mov	r0, r5
 800210a:	e79d      	b.n	8002048 <save_to_flash+0xc>
 800210c:	0800dbd8 	.word	0x0800dbd8
 8002110:	40022000 	.word	0x40022000
 8002114:	0807d800 	.word	0x0807d800
 8002118:	17f82e8c 	.word	0x17f82e8c
 800211c:	0800dbf0 	.word	0x0800dbf0
 8002120:	0807d900 	.word	0x0807d900
 8002124:	17f8b63c 	.word	0x17f8b63c
 8002128:	0800dc14 	.word	0x0800dc14
 800212c:	0800dc38 	.word	0x0800dc38

08002130 <set_dtc>:

	//printf("foc setDtcs: %f %f %f \n\r", dtc_u, dtc_v, dtc_w);


	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <set_dtc+0xa8>)
	float dtc_u = controller->dtc_u;
 8002132:	ed90 6a16 	vldr	s12, [r0, #88]	; 0x58
	float dtc_v = controller->dtc_v;
 8002136:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
	float dtc_w = controller->dtc_w;
 800213a:	edd0 5a18 	vldr	s11, [r0, #96]	; 0x60
	if(!PHASE_ORDER){
 800213e:	681b      	ldr	r3, [r3, #0]
		dtc_u = 1.0f - controller->dtc_u;
 8002140:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002144:	ee37 6ac6 	vsub.f32	s12, s15, s12
		dtc_v = 1.0f - controller->dtc_v;
 8002148:	ee77 6ac7 	vsub.f32	s13, s15, s14
		dtc_w = 1.0f - controller->dtc_w;
 800214c:	ee77 7ae5 	vsub.f32	s15, s15, s11
	if(!PHASE_ORDER){
 8002150:	bb03      	cbnz	r3, 8002194 <set_dtc+0x64>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <set_dtc+0xac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800215a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800215e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002162:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002166:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 800216a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800216e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002172:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002176:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800217a:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800217e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002182:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002192:	4770      	bx	lr
	}
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <set_dtc+0xac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800219c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021a0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80021a4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80021a8:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 80021ac:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80021b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80021b8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80021bc:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 80021c0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80021c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80021c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	}
}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20008f3c 	.word	0x20008f3c
 80021dc:	200094b0 	.word	0x200094b0

080021e0 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 80021e0:	b538      	push	{r3, r4, r5, lr}
	//don't do Vbus
	//HAL_ADC_Start(&ADC_CH_MAIN);
	//HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY); //vbus conversion is slower, probably replace with polling IB if vbus is ever removed

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <analog_sample+0x80>)
 80021e4:	681b      	ldr	r3, [r3, #0]
void analog_sample (ControllerStruct *controller){
 80021e6:	4604      	mov	r4, r0
	if(!PHASE_ORDER){
 80021e8:	bb7b      	cbnz	r3, 800224a <analog_sample+0x6a>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80021ea:	481e      	ldr	r0, [pc, #120]	; (8002264 <analog_sample+0x84>)
 80021ec:	f002 fc66 	bl	8004abc <HAL_ADC_GetValue>
 80021f0:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80021f2:	481d      	ldr	r0, [pc, #116]	; (8002268 <analog_sample+0x88>)
 80021f4:	f002 fc62 	bl	8004abc <HAL_ADC_GetValue>
 80021f8:	4603      	mov	r3, r0
 80021fa:	60a0      	str	r0, [r4, #8]
	//controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
	//controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
	controller->v_bus = 24.0;

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80021fc:	e9d4 5124 	ldrd	r5, r1, [r4, #144]	; 0x90
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002200:	6862      	ldr	r2, [r4, #4]
 8002202:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800226c <analog_sample+0x8c>
    controller->i_c = -controller->i_a - controller->i_b;

    HAL_ADC_Start(&ADC_CH_IA);
 8002206:	4817      	ldr	r0, [pc, #92]	; (8002264 <analog_sample+0x84>)
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002208:	1b52      	subs	r2, r2, r5
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800220a:	1a5b      	subs	r3, r3, r1
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800220c:	ee07 2a10 	vmov	s14, r2
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002210:	ee07 3a90 	vmov	s15, r3
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002214:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800221c:	ee27 7a26 	vmul.f32	s14, s14, s13
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002220:	ee67 7aa6 	vmul.f32	s15, s15, s13
	controller->v_bus = 24.0;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <analog_sample+0x90>)
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002226:	ed84 7a05 	vstr	s14, [r4, #20]
    controller->i_c = -controller->i_a - controller->i_b;
 800222a:	ee77 6a27 	vadd.f32	s13, s14, s15
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800222e:	edc4 7a06 	vstr	s15, [r4, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 8002232:	eeb1 7a66 	vneg.f32	s14, s13
 8002236:	ed84 7a07 	vstr	s14, [r4, #28]
	controller->v_bus = 24.0;
 800223a:	6223      	str	r3, [r4, #32]
    HAL_ADC_Start(&ADC_CH_IA);
 800223c:	f002 ff14 	bl	8005068 <HAL_ADC_Start>
    HAL_ADC_Start(&ADC_CH_IB);

}
 8002240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_ADC_Start(&ADC_CH_IB);
 8002244:	4808      	ldr	r0, [pc, #32]	; (8002268 <analog_sample+0x88>)
 8002246:	f002 bf0f 	b.w	8005068 <HAL_ADC_Start>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <analog_sample+0x88>)
 800224c:	f002 fc36 	bl	8004abc <HAL_ADC_GetValue>
 8002250:	6060      	str	r0, [r4, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002252:	4804      	ldr	r0, [pc, #16]	; (8002264 <analog_sample+0x84>)
 8002254:	f002 fc32 	bl	8004abc <HAL_ADC_GetValue>
 8002258:	4603      	mov	r3, r0
 800225a:	60a0      	str	r0, [r4, #8]
 800225c:	e7ce      	b.n	80021fc <analog_sample+0x1c>
 800225e:	bf00      	nop
 8002260:	20008f3c 	.word	0x20008f3c
 8002264:	200002a8 	.word	0x200002a8
 8002268:	2000023c 	.word	0x2000023c
 800226c:	3ca50000 	.word	0x3ca50000
 8002270:	41c00000 	.word	0x41c00000

08002274 <svm>:
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);

    }

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	ed2d 8b0a 	vpush	{d8-d12}
 800227a:	eef0 9a60 	vmov.f32	s19, s1
 800227e:	eeb0 9a41 	vmov.f32	s18, s2
 8002282:	eeb0 ca40 	vmov.f32	s24, s0
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002286:	eeb0 0a60 	vmov.f32	s0, s1
 800228a:	eef0 0a41 	vmov.f32	s1, s2
 800228e:	eeb0 1a61 	vmov.f32	s2, s3
void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002292:	eef0 8a61 	vmov.f32	s17, s3
 8002296:	4606      	mov	r6, r0
 8002298:	460d      	mov	r5, r1
 800229a:	4614      	mov	r4, r2
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 800229c:	f001 fd08 	bl	8003cb0 <fminf3>
 80022a0:	eeb0 1a68 	vmov.f32	s2, s17
 80022a4:	eef0 0a49 	vmov.f32	s1, s18
 80022a8:	eeb0 8a40 	vmov.f32	s16, s0
 80022ac:	eeb0 0a69 	vmov.f32	s0, s19
 80022b0:	f001 fce6 	bl	8003c80 <fmaxf3>
 80022b4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800233c <svm+0xc8>
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022b8:	ed9f ba21 	vldr	s22, [pc, #132]	; 8002340 <svm+0xcc>
 80022bc:	eddf aa21 	vldr	s21, [pc, #132]	; 8002344 <svm+0xd0>
 80022c0:	ed9f aa21 	vldr	s20, [pc, #132]	; 8002348 <svm+0xd4>
 80022c4:	eec7 ba8c 	vdiv.f32	s23, s15, s24
    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80022c8:	ee38 8a00 	vadd.f32	s16, s16, s0
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022cc:	eeb6 ca00 	vmov.f32	s24, #96	; 0x3f000000  0.5
 80022d0:	eee8 9a4c 	vfms.f32	s19, s16, s24
 80022d4:	eeb0 0a4b 	vmov.f32	s0, s22
 80022d8:	eef0 0a6a 	vmov.f32	s1, s21
 80022dc:	eea9 0aab 	vfma.f32	s0, s19, s23
 80022e0:	f001 fcbe 	bl	8003c60 <fast_fmaxf>
 80022e4:	eeb1 8a48 	vneg.f32	s16, s16
 80022e8:	eef0 0a4a 	vmov.f32	s1, s20
 80022ec:	f001 fcc0 	bl	8003c70 <fast_fminf>
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022f0:	eea8 9a0c 	vfma.f32	s18, s16, s24
    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022f4:	ed86 0a00 	vstr	s0, [r6]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80022f8:	eeb0 0a4b 	vmov.f32	s0, s22
 80022fc:	eef0 0a6a 	vmov.f32	s1, s21
 8002300:	eea9 0a2b 	vfma.f32	s0, s18, s23
 8002304:	f001 fcac 	bl	8003c60 <fast_fmaxf>
 8002308:	eef0 0a4a 	vmov.f32	s1, s20
 800230c:	f001 fcb0 	bl	8003c70 <fast_fminf>
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002310:	eee8 8a0c 	vfma.f32	s17, s16, s24
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002314:	ed85 0a00 	vstr	s0, [r5]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002318:	eeb0 0a4b 	vmov.f32	s0, s22
 800231c:	eef0 0a6a 	vmov.f32	s1, s21
 8002320:	eea8 0aab 	vfma.f32	s0, s17, s23
 8002324:	f001 fc9c 	bl	8003c60 <fast_fmaxf>
 8002328:	eef0 0a4a 	vmov.f32	s1, s20
 800232c:	f001 fca0 	bl	8003c70 <fast_fminf>

    }
 8002330:	ecbd 8b0a 	vpop	{d8-d12}
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002334:	ed84 0a00 	vstr	s0, [r4]
    }
 8002338:	bd70      	pop	{r4, r5, r6, pc}
 800233a:	bf00      	nop
 800233c:	3f133333 	.word	0x3f133333
 8002340:	3ef0a3d7 	.word	0x3ef0a3d7
 8002344:	00000000 	.word	0x00000000
 8002348:	3f70a3d7 	.word	0x3f70a3d7

0800234c <zero_current>:

void zero_current(ControllerStruct *controller){
 800234c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
    int adc_b_offset = 0;
    int n = 1000;
    controller->dtc_u = 0.f;
 8002350:	2300      	movs	r3, #0
void zero_current(ControllerStruct *controller){
 8002352:	ed2d 8b02 	vpush	{d8}
    int adc_b_offset = 0;
 8002356:	2600      	movs	r6, #0
    controller->dtc_u = 0.f;
 8002358:	6583      	str	r3, [r0, #88]	; 0x58
    controller->dtc_v = 0.f;
 800235a:	65c3      	str	r3, [r0, #92]	; 0x5c
    controller->dtc_w = 0.f;
 800235c:	6603      	str	r3, [r0, #96]	; 0x60
void zero_current(ControllerStruct *controller){
 800235e:	4682      	mov	sl, r0
 8002360:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002434 <zero_current+0xe8>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002364:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002438 <zero_current+0xec>
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002368:	4d2f      	ldr	r5, [pc, #188]	; (8002428 <zero_current+0xdc>)
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800236a:	ed9f 8a30 	vldr	s16, [pc, #192]	; 800242c <zero_current+0xe0>
    set_dtc(controller);
 800236e:	f7ff fedf 	bl	8002130 <set_dtc>
    int adc_a_offset = 0;
 8002372:	4637      	mov	r7, r6
    set_dtc(controller);
 8002374:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002378:	e034      	b.n	80023e4 <zero_current+0x98>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800237a:	f002 fb9f 	bl	8004abc <HAL_ADC_GetValue>
 800237e:	f8ca 0004 	str.w	r0, [sl, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 8002382:	4640      	mov	r0, r8
 8002384:	f002 fb9a 	bl	8004abc <HAL_ADC_GetValue>
 8002388:	f8ca 0008 	str.w	r0, [sl, #8]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800238c:	e9da 1224 	ldrd	r1, r2, [sl, #144]	; 0x90
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002390:	f8da 3004 	ldr.w	r3, [sl, #4]
	controller->v_bus = 24.0;
 8002394:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800243c <zero_current+0xf0>
 8002398:	f8ca c020 	str.w	ip, [sl, #32]
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800239c:	1a5b      	subs	r3, r3, r1
 800239e:	ee07 3a90 	vmov	s15, r3
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023a2:	1a83      	subs	r3, r0, r2
 80023a4:	ee07 3a10 	vmov	s14, r3
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023b0:	ee67 7a88 	vmul.f32	s15, s15, s16
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023b4:	ee27 7a08 	vmul.f32	s14, s14, s16
    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80023b8:	edca 7a05 	vstr	s15, [sl, #20]
    controller->i_c = -controller->i_a - controller->i_b;
 80023bc:	ee77 7a87 	vadd.f32	s15, s15, s14
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80023c0:	ed8a 7a06 	vstr	s14, [sl, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 80023c4:	eef1 7a67 	vneg.f32	s15, s15
 80023c8:	edca 7a07 	vstr	s15, [sl, #28]
    HAL_ADC_Start(&ADC_CH_IA);
 80023cc:	4628      	mov	r0, r5
 80023ce:	f002 fe4b 	bl	8005068 <HAL_ADC_Start>
    HAL_ADC_Start(&ADC_CH_IB);
 80023d2:	4640      	mov	r0, r8
 80023d4:	f002 fe48 	bl	8005068 <HAL_ADC_Start>

    for (int i = 0; i<n; i++){               // Average n samples
    	analog_sample(controller);
    	adc_a_offset +=  controller->adc_a_raw;
    	adc_b_offset += controller->adc_b_raw;
 80023d8:	e9da 2301 	ldrd	r2, r3, [sl, #4]
    for (int i = 0; i<n; i++){               // Average n samples
 80023dc:	3c01      	subs	r4, #1
    	adc_a_offset +=  controller->adc_a_raw;
 80023de:	4417      	add	r7, r2
    	adc_b_offset += controller->adc_b_raw;
 80023e0:	441e      	add	r6, r3
    for (int i = 0; i<n; i++){               // Average n samples
 80023e2:	d00f      	beq.n	8002404 <zero_current+0xb8>
	if(!PHASE_ORDER){
 80023e4:	f8d9 3000 	ldr.w	r3, [r9]
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80023e8:	4628      	mov	r0, r5
	if(!PHASE_ORDER){
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0c5      	beq.n	800237a <zero_current+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 80023ee:	4640      	mov	r0, r8
 80023f0:	f002 fb64 	bl	8004abc <HAL_ADC_GetValue>
 80023f4:	f8ca 0004 	str.w	r0, [sl, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 80023f8:	4628      	mov	r0, r5
 80023fa:	f002 fb5f 	bl	8004abc <HAL_ADC_GetValue>
 80023fe:	f8ca 0008 	str.w	r0, [sl, #8]
 8002402:	e7c3      	b.n	800238c <zero_current+0x40>
     }
    controller->adc_a_offset = adc_a_offset/n;
    controller->adc_b_offset = adc_b_offset/n;

    }
 8002404:	ecbd 8b02 	vpop	{d8}
    controller->adc_a_offset = adc_a_offset/n;
 8002408:	4909      	ldr	r1, [pc, #36]	; (8002430 <zero_current+0xe4>)
 800240a:	17fa      	asrs	r2, r7, #31
 800240c:	fb81 3007 	smull	r3, r0, r1, r7
    controller->adc_b_offset = adc_b_offset/n;
 8002410:	fb81 3106 	smull	r3, r1, r1, r6
 8002414:	17f3      	asrs	r3, r6, #31
    controller->adc_a_offset = adc_a_offset/n;
 8002416:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
    controller->adc_b_offset = adc_b_offset/n;
 800241a:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 800241e:	e9ca 2324 	strd	r2, r3, [sl, #144]	; 0x90
    }
 8002422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002426:	bf00      	nop
 8002428:	200002a8 	.word	0x200002a8
 800242c:	3ca50000 	.word	0x3ca50000
 8002430:	10624dd3 	.word	0x10624dd3
 8002434:	20008f3c 	.word	0x20008f3c
 8002438:	2000023c 	.word	0x2000023c
 800243c:	41c00000 	.word	0x41c00000

08002440 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    controller->ki_q = KI_Q;
    controller->k_d = K_SCALE*I_BW;
    controller->k_q = K_SCALE*I_BW;
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
    controller->ki_fw = .1f*controller->ki_d;
    controller->phase_order = PHASE_ORDER;
 8002444:	492a      	ldr	r1, [pc, #168]	; (80024f0 <init_controller_params+0xb0>)
	controller->ki_d = KI_D;
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <init_controller_params+0xb4>)
    controller->k_d = K_SCALE*I_BW;
 8002448:	4d2b      	ldr	r5, [pc, #172]	; (80024f8 <init_controller_params+0xb8>)
    controller->phase_order = PHASE_ORDER;
 800244a:	6809      	ldr	r1, [r1, #0]
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 800244c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80024fc <init_controller_params+0xbc>
    controller->k_d = K_SCALE*I_BW;
 8002450:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8002500 <init_controller_params+0xc0>
    controller->ki_fw = .1f*controller->ki_d;
 8002454:	4c2b      	ldr	r4, [pc, #172]	; (8002504 <init_controller_params+0xc4>)
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002456:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <init_controller_params+0xc8>)
 8002458:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8002514 <init_controller_params+0xd4>
 800245c:	4f2b      	ldr	r7, [pc, #172]	; (800250c <init_controller_params+0xcc>)
void init_controller_params(ControllerStruct *controller){
 800245e:	ed2d 8b02 	vpush	{d8}
	controller->ki_d = KI_D;
 8002462:	6783      	str	r3, [r0, #120]	; 0x78
    controller->ki_q = KI_Q;
 8002464:	67c3      	str	r3, [r0, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002466:	edd5 7a02 	vldr	s15, [r5, #8]
 800246a:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8002510 <init_controller_params+0xd0>
    controller->ki_fw = .1f*controller->ki_d;
 800246e:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002472:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8002476:	eee7 6a87 	vfma.f32	s13, s15, s14
    controller->phase_order = PHASE_ORDER;
 800247a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 800247e:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002482:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002486:	ee86 7a26 	vdiv.f32	s14, s12, s13
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 800248a:	2401      	movs	r4, #1
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 800248c:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8002490:	2600      	movs	r6, #0
 8002492:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
    controller->k_d = K_SCALE*I_BW;
 8002496:	ee67 7aa5 	vmul.f32	s15, s15, s11
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 800249a:	ee37 7a06 	vadd.f32	s14, s14, s12
    controller->k_d = K_SCALE*I_BW;
 800249e:	edc0 7a1c 	vstr	s15, [r0, #112]	; 0x70
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80024a2:	ed80 7a21 	vstr	s14, [r0, #132]	; 0x84
    controller->k_q = K_SCALE*I_BW;
 80024a6:	edc0 7a1d 	vstr	s15, [r0, #116]	; 0x74
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80024aa:	ee07 4a90 	vmov	s15, r4
 80024ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b2:	3401      	adds	r4, #1
 80024b4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80024b8:	ee17 0a90 	vmov	r0, s15
 80024bc:	f7fe f86c 	bl	8000598 <__aeabi_f2d>
 80024c0:	ec41 0b10 	vmov	d0, r0, r1
 80024c4:	f00b f818 	bl	800d4f8 <exp>
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80024c8:	4642      	mov	r2, r8
 80024ca:	ec51 0b10 	vmov	r0, r1, d0
 80024ce:	464b      	mov	r3, r9
 80024d0:	f7fe f8ba 	bl	8000648 <__aeabi_dmul>
 80024d4:	4632      	mov	r2, r6
 80024d6:	463b      	mov	r3, r7
 80024d8:	f7fd ff00 	bl	80002dc <__adddf3>
 80024dc:	f7fe fbac 	bl	8000c38 <__aeabi_d2f>
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80024e0:	2c80      	cmp	r4, #128	; 0x80
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80024e2:	f845 0b04 	str.w	r0, [r5], #4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80024e6:	d1e0      	bne.n	80024aa <init_controller_params+0x6a>
    }

    }
 80024e8:	ecbd 8b02 	vpop	{d8}
 80024ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024f0:	20008f3c 	.word	0x20008f3c
 80024f4:	3d3851ec 	.word	0x3d3851ec
 80024f8:	2000068c 	.word	0x2000068c
 80024fc:	39c5a6e4 	.word	0x39c5a6e4
 8002500:	38d1b717 	.word	0x38d1b717
 8002504:	3b9374bd 	.word	0x3b9374bd
 8002508:	400ccccd 	.word	0x400ccccd
 800250c:	3ff00000 	.word	0x3ff00000
 8002510:	be79ffff 	.word	0xbe79ffff
 8002514:	3ff33333 	.word	0x3ff33333

08002518 <reset_foc>:

void reset_foc(ControllerStruct *controller){

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <reset_foc+0x6c>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8002520:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002524:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002528:	ee27 7a26 	vmul.f32	s14, s14, s13
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
    controller->i_d_des = 0;
 800252c:	2300      	movs	r3, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800252e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    controller->q_int = 0;
    controller->d_int = 0;
    controller->v_q = 0;
    controller->v_d = 0;
    controller->fw_int = 0;
    controller->otw_flag = 0;
 8002532:	2100      	movs	r1, #0
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002534:	ed82 7a0f 	vstr	s14, [r2, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002538:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 800253c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002540:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002544:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002548:	ed82 7a0d 	vstr	s14, [r2, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 800254c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255c:	edc2 7a0e 	vstr	s15, [r2, #56]	; 0x38
    controller->otw_flag = 0;
 8002560:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
    controller->i_d_des = 0;
 8002564:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    controller->i_q_des = 0;
 8002568:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    controller->i_d = 0;
 800256c:	63c3      	str	r3, [r0, #60]	; 0x3c
    controller->i_q = 0;
 800256e:	6403      	str	r3, [r0, #64]	; 0x40
    controller->i_q_filt = 0;
 8002570:	6443      	str	r3, [r0, #68]	; 0x44
    controller->q_int = 0;
 8002572:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    controller->d_int = 0;
 8002576:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    controller->v_q = 0;
 800257a:	6543      	str	r3, [r0, #84]	; 0x54
    controller->v_d = 0;
 800257c:	6503      	str	r3, [r0, #80]	; 0x50
    controller->fw_int = 0;
 800257e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

    }
 8002582:	4770      	bx	lr
 8002584:	200094b0 	.word	0x200094b0

08002588 <field_weaken>:

void field_weaken(ControllerStruct *controller)
{
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002588:	edd0 7a37 	vldr	s15, [r0, #220]	; 0xdc
 800258c:	edd0 6a38 	vldr	s13, [r0, #224]	; 0xe0
 8002590:	ed90 0a39 	vldr	s0, [r0, #228]	; 0xe4
 8002594:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80025f8 <field_weaken+0x70>
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002598:	eddf 0a18 	vldr	s1, [pc, #96]	; 80025fc <field_weaken+0x74>
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 800259c:	ee77 7ae6 	vsub.f32	s15, s15, s13
{
 80025a0:	b510      	push	{r4, lr}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80025a2:	eea7 0a87 	vfma.f32	s0, s15, s14
{
 80025a6:	4604      	mov	r4, r0
 80025a8:	ed2d 8b02 	vpush	{d8}
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 80025ac:	ed80 0a39 	vstr	s0, [r0, #228]	; 0xe4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80025b0:	f001 fb5e 	bl	8003c70 <fast_fminf>
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <field_weaken+0x78>)
 80025b6:	edd3 0a06 	vldr	s1, [r3, #24]
 80025ba:	eef1 0a60 	vneg.f32	s1, s1
 80025be:	f001 fb4f 	bl	8003c60 <fast_fmaxf>
       controller->i_d_des = controller->fw_int;
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80025c2:	ed94 7a3b 	vldr	s14, [r4, #236]	; 0xec
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 80025c6:	ed84 0a39 	vstr	s0, [r4, #228]	; 0xe4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80025ca:	ee60 7a40 	vnmul.f32	s15, s0, s0
       controller->i_d_des = controller->fw_int;
 80025ce:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80025d2:	eee7 7a07 	vfma.f32	s15, s14, s14
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80025d6:	ed94 0a29 	vldr	s0, [r4, #164]	; 0xa4
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 80025da:	eeb1 8ae7 	vsqrt.f32	s16, s15
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80025de:	eef0 0a48 	vmov.f32	s1, s16
 80025e2:	f001 fb45 	bl	8003c70 <fast_fminf>
 80025e6:	eef1 0a48 	vneg.f32	s1, s16
 80025ea:	f001 fb39 	bl	8003c60 <fast_fmaxf>


}
 80025ee:	ecbd 8b02 	vpop	{d8}
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 80025f2:	ed84 0a29 	vstr	s0, [r4, #164]	; 0xa4
}
 80025f6:	bd10      	pop	{r4, pc}
 80025f8:	3ba3d70a 	.word	0x3ba3d70a
 80025fc:	00000000 	.word	0x00000000
 8002600:	2000068c 	.word	0x2000068c

08002604 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	ed2d 8b08 	vpush	{d8-d11}
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800260a:	ed91 aa17 	vldr	s20, [r1, #92]	; 0x5c
		controller->dtheta_elec = encoder->elec_velocity;
 800260e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
		controller->dtheta_mech = encoder->velocity*GR;
 8002610:	4da6      	ldr	r5, [pc, #664]	; (80028ac <commutate+0x2a8>)
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002612:	edd1 6a03 	vldr	s13, [r1, #12]
		controller->dtheta_mech = encoder->velocity*GR;
 8002616:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
		controller->dtheta_elec = encoder->elec_velocity;
 800261a:	6343      	str	r3, [r0, #52]	; 0x34
		controller->theta_elec = encoder->elec_angle;
 800261c:	ed80 aa0b 	vstr	s20, [r0, #44]	; 0x2c
		controller->dtheta_mech = encoder->velocity*GR;
 8002620:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002624:	edd0 aa05 	vldr	s21, [r0, #20]
 8002628:	edd0 ba06 	vldr	s23, [r0, #24]
 800262c:	ed90 ba07 	vldr	s22, [r0, #28]
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002630:	eddf 9a9f 	vldr	s19, [pc, #636]	; 80028b0 <commutate+0x2ac>
 8002634:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 80028b4 <commutate+0x2b0>
		controller->dtheta_mech = encoder->velocity*GR;
 8002638:	ee67 7a87 	vmul.f32	s15, s15, s14
    float cf = cos_lut(theta);
 800263c:	eeb0 0a4a 	vmov.f32	s0, s20
		controller->dtheta_mech = encoder->velocity*GR;
 8002640:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002644:	ed95 7a11 	vldr	s14, [r5, #68]	; 0x44
 8002648:	eec6 7a87 	vdiv.f32	s15, s13, s14
{
 800264c:	4604      	mov	r4, r0
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800264e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002652:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    float cf = cos_lut(theta);
 8002656:	f001 fb9d 	bl	8003d94 <cos_lut>
 800265a:	eeb0 9a40 	vmov.f32	s18, s0
    float sf = sin_lut(theta);
 800265e:	eeb0 0a4a 	vmov.f32	s0, s20
 8002662:	f001 fb71 	bl	8003d48 <sin_lut>
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002666:	ee69 6a29 	vmul.f32	s13, s18, s19
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800266a:	ee28 6ac9 	vnmul.f32	s12, s17, s18
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800266e:	eeb0 7a66 	vmov.f32	s14, s13
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002672:	eef0 7a46 	vmov.f32	s15, s12
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002676:	eea0 7a28 	vfma.f32	s14, s0, s17
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 800267a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 800267e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002682:	eee0 7a08 	vfma.f32	s15, s0, s16
 8002686:	eea0 6a29 	vfma.f32	s12, s0, s19
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800268a:	ee2b 7a87 	vmul.f32	s14, s23, s14
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800268e:	ee6b 7a27 	vmul.f32	s15, s22, s15
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002692:	eed0 6a28 	vfnms.f32	s13, s0, s17
 8002696:	eeaa 7ac0 	vfms.f32	s14, s21, s0
 800269a:	eeeb 7a86 	vfma.f32	s15, s23, s12
 800269e:	eeab 7a26 	vfma.f32	s14, s22, s13
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026a2:	eeea 7a89 	vfma.f32	s15, s21, s18
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80026a6:	ed9f 2a84 	vldr	s4, [pc, #528]	; 80028b8 <commutate+0x2b4>
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026aa:	ed9f 5a84 	vldr	s10, [pc, #528]	; 80028bc <commutate+0x2b8>
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80026ae:	edd4 6a08 	vldr	s13, [r4, #32]
 80026b2:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
 80026b6:	ed9f 3a82 	vldr	s6, [pc, #520]	; 80028c0 <commutate+0x2bc>
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80026ba:	ed9f 6a82 	vldr	s12, [pc, #520]	; 80028c4 <commutate+0x2c0>
 80026be:	edd4 3a11 	vldr	s7, [r4, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80026c2:	ed94 4a12 	vldr	s8, [r4, #72]	; 0x48
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80026c6:	eddf 4a80 	vldr	s9, [pc, #512]	; 80028c8 <commutate+0x2c4>
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80026ca:	eddf 5a80 	vldr	s11, [pc, #512]	; 80028cc <commutate+0x2c8>
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80026ce:	ee66 6a82 	vmul.f32	s13, s13, s4
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026d2:	ee67 7a85 	vmul.f32	s15, s15, s10
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80026d6:	ee27 7a05 	vmul.f32	s14, s14, s10
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80026da:	eee2 6a83 	vfma.f32	s13, s5, s6
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80026de:	ee27 5a06 	vmul.f32	s10, s14, s12
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80026e2:	ee27 6a86 	vmul.f32	s12, s15, s12
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80026e6:	eea3 5aa4 	vfma.f32	s10, s7, s9
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80026ea:	eea4 6a24 	vfma.f32	s12, s8, s9
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80026ee:	ee66 5aa5 	vmul.f32	s11, s13, s11
       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80026f2:	ed84 5a11 	vstr	s10, [r4, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80026f6:	ed84 6a12 	vstr	s12, [r4, #72]	; 0x48
       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80026fa:	edc4 5a37 	vstr	s11, [r4, #220]	; 0xdc
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 80026fe:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002702:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002706:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 800270a:	ed95 0a03 	vldr	s0, [r5, #12]
 800270e:	ed84 0a3b 	vstr	s0, [r4, #236]	; 0xec
       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002712:	f001 fae5 	bl	8003ce0 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002716:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 800271a:	ed94 aa28 	vldr	s20, [r4, #160]	; 0xa0

       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800271e:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 8002722:	ed94 0a22 	vldr	s0, [r4, #136]	; 0x88
       float i_q_error = controller->i_q_des - controller->i_q;
 8002726:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800272a:	ed94 9a29 	vldr	s18, [r4, #164]	; 0xa4

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 800272e:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
       float i_d_error = controller->i_d_des - controller->i_d;
 8002732:	ee3a aa66 	vsub.f32	s20, s20, s13
       float i_q_error = controller->i_q_des - controller->i_q;
 8002736:	ee39 9a47 	vsub.f32	s18, s18, s14
       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 800273a:	eea7 0a8a 	vfma.f32	s0, s15, s20
 800273e:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002742:	f001 fa95 	bl	8003c70 <fast_fminf>
 8002746:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
 800274a:	eef1 0a60 	vneg.f32	s1, s1
 800274e:	f001 fa87 	bl	8003c60 <fast_fmaxf>

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002752:	edd4 6a1e 	vldr	s13, [r4, #120]	; 0x78
 8002756:	ed94 7a1c 	vldr	s14, [r4, #112]	; 0x70
 800275a:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800275e:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002762:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002766:	ee27 7a26 	vmul.f32	s14, s14, s13
 800276a:	eee7 7a0a 	vfma.f32	s15, s14, s20
 800276e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
 8002772:	eeb0 0a67 	vmov.f32	s0, s15
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002776:	f001 fa7b 	bl	8003c70 <fast_fminf>
 800277a:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
 800277e:	eef1 0a60 	vneg.f32	s1, s1
 8002782:	f001 fa6d 	bl	8003c60 <fast_fmaxf>
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002786:	ed94 6a1d 	vldr	s12, [r4, #116]	; 0x74
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800278a:	edd4 6a1f 	vldr	s13, [r4, #124]	; 0x7c
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 800278e:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002792:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 8002796:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800279a:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800279e:	ee66 6a26 	vmul.f32	s13, s12, s13
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80027a2:	eef0 5a47 	vmov.f32	s11, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80027a6:	ee67 7ae7 	vnmul.f32	s15, s15, s15
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80027aa:	eee6 5a09 	vfma.f32	s11, s12, s18
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80027ae:	eea6 7a89 	vfma.f32	s14, s13, s18
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80027b2:	eee0 7aa0 	vfma.f32	s15, s1, s1
       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80027b6:	edc4 5a15 	vstr	s11, [r4, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80027ba:	ed84 7a23 	vstr	s14, [r4, #140]	; 0x8c
 80027be:	eeb0 0a47 	vmov.f32	s0, s14
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80027c2:	eeb1 9ae7 	vsqrt.f32	s18, s15
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80027c6:	f001 fa53 	bl	8003c70 <fast_fminf>
 80027ca:	edd4 0a37 	vldr	s1, [r4, #220]	; 0xdc
 80027ce:	eef1 0a60 	vneg.f32	s1, s1
 80027d2:	f001 fa45 	bl	8003c60 <fast_fmaxf>
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80027d6:	ed94 7a15 	vldr	s14, [r4, #84]	; 0x54
 80027da:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 80027de:	ed84 0a23 	vstr	s0, [r4, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80027e2:	ee67 7a07 	vmul.f32	s15, s14, s14
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80027e6:	eeb0 0a47 	vmov.f32	s0, s14
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80027ea:	eee6 7aa6 	vfma.f32	s15, s13, s13
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80027ee:	eef0 0a49 	vmov.f32	s1, s18
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 80027f2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80027f6:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 80027fa:	f001 fa39 	bl	8003c70 <fast_fminf>
 80027fe:	eef1 0a49 	vneg.f32	s1, s18
 8002802:	f001 fa2d 	bl	8003c60 <fast_fmaxf>

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002806:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800280a:	f104 0050 	add.w	r0, r4, #80	; 0x50
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 800280e:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002812:	ed94 0a37 	vldr	s0, [r4, #220]	; 0xdc
 8002816:	f001 fa63 	bl	8003ce0 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 800281a:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 800281e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80028d0 <commutate+0x2cc>
 8002822:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
 8002826:	edd4 aa14 	vldr	s21, [r4, #80]	; 0x50
 800282a:	ed94 ba15 	vldr	s22, [r4, #84]	; 0x54
 800282e:	eea7 aa27 	vfma.f32	s20, s14, s15
    float cf = cos_lut(theta);
 8002832:	eeb0 0a4a 	vmov.f32	s0, s20
 8002836:	f001 faad 	bl	8003d94 <cos_lut>
 800283a:	eeb0 9a40 	vmov.f32	s18, s0
    float sf = sin_lut(theta);
 800283e:	eeb0 0a4a 	vmov.f32	s0, s20
 8002842:	f001 fa81 	bl	8003d48 <sin_lut>
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002846:	ee69 1a29 	vmul.f32	s3, s18, s19
 800284a:	ee68 7ac9 	vnmul.f32	s15, s17, s18
 800284e:	eeb0 1a61 	vmov.f32	s2, s3
 8002852:	eea0 1a28 	vfma.f32	s2, s0, s17
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800285a:	f104 0260 	add.w	r2, r4, #96	; 0x60
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800285e:	eed0 1a28 	vfnms.f32	s3, s0, s17
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002862:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002866:	eeb0 7a67 	vmov.f32	s14, s15
 800286a:	eea0 7a29 	vfma.f32	s14, s0, s19
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800286e:	eee0 7a08 	vfma.f32	s15, s0, s16
    *a = cf*d - sf*q;
 8002872:	ee60 0a4b 	vnmul.f32	s1, s0, s22
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002876:	ee2b 1a01 	vmul.f32	s2, s22, s2
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800287a:	ee6b 1a21 	vmul.f32	s3, s22, s3
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800287e:	eeaa 1a87 	vfma.f32	s2, s21, s14
    *a = cf*d - sf*q;
 8002882:	eeea 0a89 	vfma.f32	s1, s21, s18
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002886:	eeea 1aa7 	vfma.f32	s3, s21, s15
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800288a:	ed94 0a37 	vldr	s0, [r4, #220]	; 0xdc
    *a = cf*d - sf*q;
 800288e:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 8002892:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002896:	edc4 1a1b 	vstr	s3, [r4, #108]	; 0x6c
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 800289a:	f7ff fceb 	bl	8002274 <svm>

       //DEBUG zeros svm(controller->v_max, 0*(controller->v_u), 0*(controller->v_v), 0*(controller->v_w), &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation

       set_dtc(controller);

    }
 800289e:	ecbd 8b08 	vpop	{d8-d11}
       set_dtc(controller);
 80028a2:	4620      	mov	r0, r4
    }
 80028a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       set_dtc(controller);
 80028a8:	f7ff bc42 	b.w	8002130 <set_dtc>
 80028ac:	2000068c 	.word	0x2000068c
 80028b0:	3f5db3d7 	.word	0x3f5db3d7
 80028b4:	bf5db3d7 	.word	0xbf5db3d7
 80028b8:	3dcccccd 	.word	0x3dcccccd
 80028bc:	3f2aaaab 	.word	0x3f2aaaab
 80028c0:	3f666666 	.word	0x3f666666
 80028c4:	3c23d70a 	.word	0x3c23d70a
 80028c8:	3f7d70a4 	.word	0x3f7d70a4
 80028cc:	3f1fc60a 	.word	0x3f1fc60a
 80028d0:	38bcbe62 	.word	0x38bcbe62

080028d4 <torque_control>:


void torque_control(ControllerStruct *controller){

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80028d4:	edd0 7a33 	vldr	s15, [r0, #204]	; 0xcc
 80028d8:	edd0 3a0c 	vldr	s7, [r0, #48]	; 0x30
 80028dc:	edd0 4a35 	vldr	s9, [r0, #212]	; 0xd4
 80028e0:	edd0 6a32 	vldr	s13, [r0, #200]	; 0xc8
 80028e4:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 80028e8:	edd0 5a34 	vldr	s11, [r0, #208]	; 0xd0
    controller->i_q_des = torque_des/(KT*GR);
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <torque_control+0x50>)
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80028ee:	ed90 6a36 	vldr	s12, [r0, #216]	; 0xd8
    controller->i_q_des = torque_des/(KT*GR);
 80028f2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80028f6:	ed93 5a11 	vldr	s10, [r3, #68]	; 0x44
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 80028fa:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80028fe:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8002902:	ee67 7aa4 	vmul.f32	s15, s15, s9
    controller->i_q_des = torque_des/(KT*GR);
 8002906:	ee27 7a05 	vmul.f32	s14, s14, s10
 800290a:	eee5 7aa6 	vfma.f32	s15, s11, s13
    controller->i_d_des = 0.0f;
 800290e:	2300      	movs	r3, #0
 8002910:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002914:	ee77 7a86 	vadd.f32	s15, s15, s12
    controller->i_q_des = torque_des/(KT*GR);
 8002918:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800291c:	edc0 6a29 	vstr	s13, [r0, #164]	; 0xa4

    }
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000068c 	.word	0x2000068c

08002928 <zero_commands>:



void zero_commands(ControllerStruct * controller){
	//printf("ZERO COMMANDS!!");
	controller->t_ff = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
	controller->kp = 0;
 800292e:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	controller->kd = 0;
 8002932:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	controller->p_des = 0;
 8002936:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	controller->v_des = 0;
 800293a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	controller->i_q_des = 0;
 800293e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
 8002942:	4770      	bx	lr

08002944 <fsm_exit_state>:
				break;

		}
 }

 void fsm_exit_state(FSMStruct * fsmstate){
 8002944:	b538      	push	{r3, r4, r5, lr}
 8002946:	7803      	ldrb	r3, [r0, #0]
 8002948:	4604      	mov	r4, r0
 800294a:	2b05      	cmp	r3, #5
 800294c:	d80b      	bhi.n	8002966 <fsm_exit_state+0x22>
 800294e:	e8df f003 	tbb	[pc, r3]
 8002952:	0308      	.short	0x0308
 8002954:	08080a0b 	.word	0x08080a0b
				}
				zero_commands(&controller);		// Set commands to zero
				break;
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <fsm_exit_state+0x78>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	8899      	ldrh	r1, [r3, #4]
 800295e:	f7ff f8c3 	bl	8001ae8 <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	70e3      	strb	r3, [r4, #3]
				break;
		}

 }
 8002966:	bd38      	pop	{r3, r4, r5, pc}
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 8002968:	4d15      	ldr	r5, [pc, #84]	; (80029c0 <fsm_exit_state+0x7c>)
 800296a:	edd5 7a11 	vldr	s15, [r5, #68]	; 0x44
 800296e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002972:	eef0 7ae7 	vabs.f32	s15, s15
 8002976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d404      	bmi.n	800298a <fsm_exit_state+0x46>
 }
 8002980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				zero_commands(&controller);		// Set commands to zero
 8002984:	480e      	ldr	r0, [pc, #56]	; (80029c0 <fsm_exit_state+0x7c>)
 8002986:	f7ff bfcf 	b.w	8002928 <zero_commands>
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 800298a:	edd5 7a12 	vldr	s15, [r5, #72]	; 0x48
 800298e:	eef0 7ae7 	vabs.f32	s15, s15
 8002992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299a:	d5f1      	bpl.n	8002980 <fsm_exit_state+0x3c>
					drv_disable_gd(drv);
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <fsm_exit_state+0x78>)
					fsmstate->ready = 1;
 800299e:	2201      	movs	r2, #1
 80029a0:	70c2      	strb	r2, [r0, #3]
					drv_disable_gd(drv);
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	8899      	ldrh	r1, [r3, #4]
 80029a6:	f7ff f89f 	bl	8001ae8 <drv_disable_gd>
					reset_foc(&controller);
 80029aa:	4628      	mov	r0, r5
 80029ac:	f7ff fdb4 	bl	8002518 <reset_foc>
					HAL_GPIO_WritePin(LED2, GPIO_PIN_RESET );
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <fsm_exit_state+0x80>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	2108      	movs	r1, #8
 80029b6:	f003 fc19 	bl	80061ec <HAL_GPIO_WritePin>
 80029ba:	e7e1      	b.n	8002980 <fsm_exit_state+0x3c>
 80029bc:	20009368 	.word	0x20009368
 80029c0:	2000078c 	.word	0x2000078c
 80029c4:	48000800 	.word	0x48000800

080029c8 <enter_setup_state>:
	    printf(" esc - Exit to Menu\n\r");

	    //gpio.led->write(0);
 }

 void enter_setup_state(void){
 80029c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("\r\n Configuration Options \n\r");
 80029cc:	486b      	ldr	r0, [pc, #428]	; (8002b7c <enter_setup_state+0x1b4>)
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
	    printf("\r\n Motor:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 80029ce:	4c6c      	ldr	r4, [pc, #432]	; (8002b80 <enter_setup_state+0x1b8>)
 80029d0:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8002c58 <enter_setup_state+0x290>
 80029d4:	4f6b      	ldr	r7, [pc, #428]	; (8002b84 <enter_setup_state+0x1bc>)
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
	    printf("\r\n Control:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 80029d6:	4d6c      	ldr	r5, [pc, #432]	; (8002b88 <enter_setup_state+0x1c0>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 80029d8:	4e6c      	ldr	r6, [pc, #432]	; (8002b8c <enter_setup_state+0x1c4>)
 80029da:	f8df b280 	ldr.w	fp, [pc, #640]	; 8002c5c <enter_setup_state+0x294>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
	    printf("\r\n CAN:\r\n");
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 80029de:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8002c60 <enter_setup_state+0x298>
 80029e2:	f8df a280 	ldr.w	sl, [pc, #640]	; 8002c64 <enter_setup_state+0x29c>
 void enter_setup_state(void){
 80029e6:	b085      	sub	sp, #20
	    printf("\r\n Configuration Options \n\r");
 80029e8:	f007 f8d2 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80029ec:	4a68      	ldr	r2, [pc, #416]	; (8002b90 <enter_setup_state+0x1c8>)
 80029ee:	4b69      	ldr	r3, [pc, #420]	; (8002b94 <enter_setup_state+0x1cc>)
 80029f0:	4969      	ldr	r1, [pc, #420]	; (8002b98 <enter_setup_state+0x1d0>)
 80029f2:	486a      	ldr	r0, [pc, #424]	; (8002b9c <enter_setup_state+0x1d4>)
 80029f4:	e9cd 3200 	strd	r3, r2, [sp]
 80029f8:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <enter_setup_state+0x1d8>)
 80029fa:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <enter_setup_state+0x1dc>)
 80029fc:	f007 f8c8 	bl	8009b90 <iprintf>
	    printf("\r\n Motor:\r\n");
 8002a00:	4869      	ldr	r0, [pc, #420]	; (8002ba8 <enter_setup_state+0x1e0>)
 8002a02:	f007 f94b 	bl	8009c9c <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8002a06:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a08:	f7fd fdc6 	bl	8000598 <__aeabi_f2d>
 8002a0c:	4643      	mov	r3, r8
 8002a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a12:	4a66      	ldr	r2, [pc, #408]	; (8002bac <enter_setup_state+0x1e4>)
 8002a14:	9700      	str	r7, [sp, #0]
 8002a16:	4966      	ldr	r1, [pc, #408]	; (8002bb0 <enter_setup_state+0x1e8>)
 8002a18:	4866      	ldr	r0, [pc, #408]	; (8002bb4 <enter_setup_state+0x1ec>)
 8002a1a:	f007 f8b9 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8002a1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a20:	f7fd fdba 	bl	8000598 <__aeabi_f2d>
 8002a24:	4643      	mov	r3, r8
 8002a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a2a:	4a63      	ldr	r2, [pc, #396]	; (8002bb8 <enter_setup_state+0x1f0>)
 8002a2c:	4963      	ldr	r1, [pc, #396]	; (8002bbc <enter_setup_state+0x1f4>)
 8002a2e:	9700      	str	r7, [sp, #0]
 8002a30:	4863      	ldr	r0, [pc, #396]	; (8002bc0 <enter_setup_state+0x1f8>)
 8002a32:	f007 f8ad 	bl	8009b90 <iprintf>
	    printf("\r\n Control:\r\n");
 8002a36:	4863      	ldr	r0, [pc, #396]	; (8002bc4 <enter_setup_state+0x1fc>)
 8002a38:	f007 f930 	bl	8009c9c <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8002a3c:	68a0      	ldr	r0, [r4, #8]
 8002a3e:	f7fd fdab 	bl	8000598 <__aeabi_f2d>
 8002a42:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <enter_setup_state+0x200>)
 8002a44:	4a61      	ldr	r2, [pc, #388]	; (8002bcc <enter_setup_state+0x204>)
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a4c:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <enter_setup_state+0x208>)
 8002a4e:	4961      	ldr	r1, [pc, #388]	; (8002bd4 <enter_setup_state+0x20c>)
 8002a50:	4628      	mov	r0, r5
 8002a52:	f007 f89d 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8002a56:	68e0      	ldr	r0, [r4, #12]
 8002a58:	f7fd fd9e 	bl	8000598 <__aeabi_f2d>
 8002a5c:	4633      	mov	r3, r6
 8002a5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a62:	4a5d      	ldr	r2, [pc, #372]	; (8002bd8 <enter_setup_state+0x210>)
 8002a64:	495d      	ldr	r1, [pc, #372]	; (8002bdc <enter_setup_state+0x214>)
 8002a66:	f8cd b000 	str.w	fp, [sp]
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f007 f890 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8002a70:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002a72:	f7fd fd91 	bl	8000598 <__aeabi_f2d>
 8002a76:	463b      	mov	r3, r7
 8002a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <enter_setup_state+0x218>)
 8002a7e:	9700      	str	r7, [sp, #0]
 8002a80:	4958      	ldr	r1, [pc, #352]	; (8002be4 <enter_setup_state+0x21c>)
 8002a82:	4628      	mov	r0, r5
 8002a84:	f007 f884 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8002a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a8a:	f7fd fd85 	bl	8000598 <__aeabi_f2d>
 8002a8e:	463b      	mov	r3, r7
 8002a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a94:	4a54      	ldr	r2, [pc, #336]	; (8002be8 <enter_setup_state+0x220>)
 8002a96:	9700      	str	r7, [sp, #0]
 8002a98:	4954      	ldr	r1, [pc, #336]	; (8002bec <enter_setup_state+0x224>)
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8002a9a:	4f55      	ldr	r7, [pc, #340]	; (8002bf0 <enter_setup_state+0x228>)
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f007 f877 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8002aa2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002aa4:	f7fd fd78 	bl	8000598 <__aeabi_f2d>
 8002aa8:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <enter_setup_state+0x22c>)
 8002aaa:	4a53      	ldr	r2, [pc, #332]	; (8002bf8 <enter_setup_state+0x230>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ab2:	4633      	mov	r3, r6
 8002ab4:	4951      	ldr	r1, [pc, #324]	; (8002bfc <enter_setup_state+0x234>)
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f007 f86a 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8002abc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002abe:	f7fd fd6b 	bl	8000598 <__aeabi_f2d>
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <enter_setup_state+0x238>)
 8002ac4:	4a4f      	ldr	r2, [pc, #316]	; (8002c04 <enter_setup_state+0x23c>)
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002acc:	4633      	mov	r3, r6
 8002ace:	494e      	ldr	r1, [pc, #312]	; (8002c08 <enter_setup_state+0x240>)
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f007 f85d 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8002ad6:	69a0      	ldr	r0, [r4, #24]
 8002ad8:	f7fd fd5e 	bl	8000598 <__aeabi_f2d>
 8002adc:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <enter_setup_state+0x244>)
 8002ade:	4a4c      	ldr	r2, [pc, #304]	; (8002c10 <enter_setup_state+0x248>)
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ae6:	4633      	mov	r3, r6
 8002ae8:	494a      	ldr	r1, [pc, #296]	; (8002c14 <enter_setup_state+0x24c>)
 8002aea:	4628      	mov	r0, r5
 8002aec:	f007 f850 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8002af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002af2:	f7fd fd51 	bl	8000598 <__aeabi_f2d>
 8002af6:	4633      	mov	r3, r6
 8002af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002afc:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <enter_setup_state+0x250>)
 8002afe:	4947      	ldr	r1, [pc, #284]	; (8002c1c <enter_setup_state+0x254>)
 8002b00:	f8cd b000 	str.w	fp, [sp]
 8002b04:	4628      	mov	r0, r5
 8002b06:	f007 f843 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8002b0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b0c:	f7fd fd44 	bl	8000598 <__aeabi_f2d>
 8002b10:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <enter_setup_state+0x258>)
 8002b12:	4a44      	ldr	r2, [pc, #272]	; (8002c24 <enter_setup_state+0x25c>)
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b1a:	4633      	mov	r3, r6
 8002b1c:	4942      	ldr	r1, [pc, #264]	; (8002c28 <enter_setup_state+0x260>)
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f007 f836 	bl	8009b90 <iprintf>
	    printf("\r\n CAN:\r\n");
 8002b24:	4841      	ldr	r0, [pc, #260]	; (8002c2c <enter_setup_state+0x264>)
 8002b26:	f007 f8b9 	bl	8009c9c <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8002b2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	4a3f      	ldr	r2, [pc, #252]	; (8002c30 <enter_setup_state+0x268>)
 8002b32:	4940      	ldr	r1, [pc, #256]	; (8002c34 <enter_setup_state+0x26c>)
 8002b34:	9700      	str	r7, [sp, #0]
 8002b36:	4643      	mov	r3, r8
 8002b38:	4650      	mov	r0, sl
 8002b3a:	f007 f829 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8002b3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	4a3c      	ldr	r2, [pc, #240]	; (8002c38 <enter_setup_state+0x270>)
 8002b46:	493d      	ldr	r1, [pc, #244]	; (8002c3c <enter_setup_state+0x274>)
 8002b48:	9700      	str	r7, [sp, #0]
 8002b4a:	4643      	mov	r3, r8
 8002b4c:	4650      	mov	r0, sl
 8002b4e:	f007 f81f 	bl	8009b90 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8002b52:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002b56:	4a3a      	ldr	r2, [pc, #232]	; (8002c40 <enter_setup_state+0x278>)
 8002b58:	493a      	ldr	r1, [pc, #232]	; (8002c44 <enter_setup_state+0x27c>)
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	9200      	str	r2, [sp, #0]
 8002b5e:	4643      	mov	r3, r8
 8002b60:	4a39      	ldr	r2, [pc, #228]	; (8002c48 <enter_setup_state+0x280>)
 8002b62:	483a      	ldr	r0, [pc, #232]	; (8002c4c <enter_setup_state+0x284>)
 8002b64:	f007 f814 	bl	8009b90 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8002b68:	4839      	ldr	r0, [pc, #228]	; (8002c50 <enter_setup_state+0x288>)
 8002b6a:	f007 f811 	bl	8009b90 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8002b6e:	4839      	ldr	r0, [pc, #228]	; (8002c54 <enter_setup_state+0x28c>)
 }
 8002b70:	b005      	add	sp, #20
 8002b72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8002b76:	f007 b80b 	b.w	8009b90 <iprintf>
 8002b7a:	bf00      	nop
 8002b7c:	0800dd28 	.word	0x0800dd28
 8002b80:	2000068c 	.word	0x2000068c
 8002b84:	0800ddd0 	.word	0x0800ddd0
 8002b88:	0800de40 	.word	0x0800de40
 8002b8c:	0800de68 	.word	0x0800de68
 8002b90:	0800dd7c 	.word	0x0800dd7c
 8002b94:	0800dd8c 	.word	0x0800dd8c
 8002b98:	0800dd54 	.word	0x0800dd54
 8002b9c:	0800dd5c 	.word	0x0800dd5c
 8002ba0:	0800dd44 	.word	0x0800dd44
 8002ba4:	0800dd48 	.word	0x0800dd48
 8002ba8:	0800dd90 	.word	0x0800dd90
 8002bac:	0800dda0 	.word	0x0800dda0
 8002bb0:	0800ddac 	.word	0x0800ddac
 8002bb4:	0800ddb0 	.word	0x0800ddb0
 8002bb8:	0800ddd4 	.word	0x0800ddd4
 8002bbc:	0800ddec 	.word	0x0800ddec
 8002bc0:	0800ddf0 	.word	0x0800ddf0
 8002bc4:	0800de10 	.word	0x0800de10
 8002bc8:	0800de60 	.word	0x0800de60
 8002bcc:	0800de24 	.word	0x0800de24
 8002bd0:	0800de20 	.word	0x0800de20
 8002bd4:	0800de3c 	.word	0x0800de3c
 8002bd8:	0800de6c 	.word	0x0800de6c
 8002bdc:	0800de80 	.word	0x0800de80
 8002be0:	0800de8c 	.word	0x0800de8c
 8002be4:	0800dea8 	.word	0x0800dea8
 8002be8:	0800deac 	.word	0x0800deac
 8002bec:	0800decc 	.word	0x0800decc
 8002bf0:	0800dfb8 	.word	0x0800dfb8
 8002bf4:	0800def0 	.word	0x0800def0
 8002bf8:	0800ded0 	.word	0x0800ded0
 8002bfc:	0800deec 	.word	0x0800deec
 8002c00:	0800df1c 	.word	0x0800df1c
 8002c04:	0800def8 	.word	0x0800def8
 8002c08:	0800df18 	.word	0x0800df18
 8002c0c:	0800df38 	.word	0x0800df38
 8002c10:	0800df20 	.word	0x0800df20
 8002c14:	0800ed34 	.word	0x0800ed34
 8002c18:	0800df40 	.word	0x0800df40
 8002c1c:	0800df58 	.word	0x0800df58
 8002c20:	0800df78 	.word	0x0800df78
 8002c24:	0800df5c 	.word	0x0800df5c
 8002c28:	0800df74 	.word	0x0800df74
 8002c2c:	0800df80 	.word	0x0800df80
 8002c30:	0800df8c 	.word	0x0800df8c
 8002c34:	0800df94 	.word	0x0800df94
 8002c38:	0800dfbc 	.word	0x0800dfbc
 8002c3c:	0800dfcc 	.word	0x0800dfcc
 8002c40:	0800e010 	.word	0x0800e010
 8002c44:	0800dff0 	.word	0x0800dff0
 8002c48:	0800dfd0 	.word	0x0800dfd0
 8002c4c:	0800dff4 	.word	0x0800dff4
 8002c50:	0800e018 	.word	0x0800e018
 8002c54:	0800e064 	.word	0x0800e064
 8002c58:	0800dd9c 	.word	0x0800dd9c
 8002c5c:	0800de84 	.word	0x0800de84
 8002c60:	20008f3c 	.word	0x20008f3c
 8002c64:	0800df98 	.word	0x0800df98

08002c68 <fsm_enter_state>:
 void fsm_enter_state(FSMStruct * fsmstate){
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	7803      	ldrb	r3, [r0, #0]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d804      	bhi.n	8002c7a <fsm_enter_state+0x12>
 8002c70:	e8df f003 	tbb	[pc, r3]
 8002c74:	033f2808 	.word	0x033f2808
 8002c78:	04          	.byte	0x04
 8002c79:	00          	.byte	0x00
 }
 8002c7a:	bd10      	pop	{r4, pc}
 8002c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				enter_setup_state();
 8002c80:	f7ff bea2 	b.w	80029c8 <enter_setup_state>
	    printf("\n\r\n\r");
 8002c84:	481f      	ldr	r0, [pc, #124]	; (8002d04 <fsm_enter_state+0x9c>)
 8002c86:	f006 ff83 	bl	8009b90 <iprintf>
	    printf(" Commands:\n\r");
 8002c8a:	481f      	ldr	r0, [pc, #124]	; (8002d08 <fsm_enter_state+0xa0>)
 8002c8c:	f006 ff80 	bl	8009b90 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8002c90:	481e      	ldr	r0, [pc, #120]	; (8002d0c <fsm_enter_state+0xa4>)
 8002c92:	f006 ff7d 	bl	8009b90 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8002c96:	481e      	ldr	r0, [pc, #120]	; (8002d10 <fsm_enter_state+0xa8>)
 8002c98:	f006 ff7a 	bl	8009b90 <iprintf>
	    printf(" s - Setup\n\r");
 8002c9c:	481d      	ldr	r0, [pc, #116]	; (8002d14 <fsm_enter_state+0xac>)
 8002c9e:	f006 ff77 	bl	8009b90 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8002ca2:	481d      	ldr	r0, [pc, #116]	; (8002d18 <fsm_enter_state+0xb0>)
 8002ca4:	f006 ff74 	bl	8009b90 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8002ca8:	481c      	ldr	r0, [pc, #112]	; (8002d1c <fsm_enter_state+0xb4>)
 8002caa:	f006 ff71 	bl	8009b90 <iprintf>
	    printf(" f - Factory reset flash vars\n\r");
 8002cae:	481c      	ldr	r0, [pc, #112]	; (8002d20 <fsm_enter_state+0xb8>)
 8002cb0:	f006 ff6e 	bl	8009b90 <iprintf>
	    printf(" d - Variable dump\n\r");
 8002cb4:	481b      	ldr	r0, [pc, #108]	; (8002d24 <fsm_enter_state+0xbc>)
 8002cb6:	f006 ff6b 	bl	8009b90 <iprintf>
 }
 8002cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    printf(" esc - Exit to Menu\n\r");
 8002cbe:	481a      	ldr	r0, [pc, #104]	; (8002d28 <fsm_enter_state+0xc0>)
 8002cc0:	f006 bf66 	b.w	8009b90 <iprintf>
				comm_encoder.e_zero = 0;
 8002cc4:	4c19      	ldr	r4, [pc, #100]	; (8002d2c <fsm_enter_state+0xc4>)
				comm_encoder_cal.done_cal = 0;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <fsm_enter_state+0xc8>)
 8002cc8:	2100      	movs	r1, #0
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002cca:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8002cce:	f44f 7200 	mov.w	r2, #512	; 0x200
				comm_encoder.e_zero = 0;
 8002cd2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
				comm_encoder_cal.done_cal = 0;
 8002cd6:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8002cda:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8002cde:	7419      	strb	r1, [r3, #16]
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8002ce0:	f006 fae4 	bl	80092ac <memset>
				drv_enable_gd(drv);
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <fsm_enter_state+0xcc>)
 }
 8002ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				drv_enable_gd(drv);
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	8899      	ldrh	r1, [r3, #4]
 8002cee:	f7fe bea9 	b.w	8001a44 <drv_enable_gd>
				HAL_GPIO_WritePin(LED2, GPIO_PIN_SET );
 8002cf2:	4811      	ldr	r0, [pc, #68]	; (8002d38 <fsm_enter_state+0xd0>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	2108      	movs	r1, #8
 8002cf8:	f003 fa78 	bl	80061ec <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8002cfc:	480f      	ldr	r0, [pc, #60]	; (8002d3c <fsm_enter_state+0xd4>)
 8002cfe:	f7ff fc0b 	bl	8002518 <reset_foc>
				drv_enable_gd(drv);
 8002d02:	e7ef      	b.n	8002ce4 <fsm_enter_state+0x7c>
 8002d04:	0800dc4c 	.word	0x0800dc4c
 8002d08:	0800dc54 	.word	0x0800dc54
 8002d0c:	0800dc64 	.word	0x0800dc64
 8002d10:	0800dc78 	.word	0x0800dc78
 8002d14:	0800dc94 	.word	0x0800dc94
 8002d18:	0800dca4 	.word	0x0800dca4
 8002d1c:	0800dcbc 	.word	0x0800dcbc
 8002d20:	0800dcd8 	.word	0x0800dcd8
 8002d24:	0800dcf8 	.word	0x0800dcf8
 8002d28:	0800dd10 	.word	0x0800dd10
 8002d2c:	200003e8 	.word	0x200003e8
 8002d30:	20000a80 	.word	0x20000a80
 8002d34:	20009368 	.word	0x20009368
 8002d38:	48000800 	.word	0x48000800
 8002d3c:	2000078c 	.word	0x2000078c

08002d40 <run_fsm>:
 void run_fsm(FSMStruct * fsmstate){
 8002d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 if(fsmstate->next_state != fsmstate->state){
 8002d44:	7803      	ldrb	r3, [r0, #0]
 8002d46:	7842      	ldrb	r2, [r0, #1]
 8002d48:	429a      	cmp	r2, r3
 void run_fsm(FSMStruct * fsmstate){
 8002d4a:	4604      	mov	r4, r0
	 if(fsmstate->next_state != fsmstate->state){
 8002d4c:	d107      	bne.n	8002d5e <run_fsm+0x1e>
	 switch(fsmstate->state){
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d00c      	beq.n	8002d6c <run_fsm+0x2c>
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d02b      	beq.n	8002dae <run_fsm+0x6e>
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d01a      	beq.n	8002d90 <run_fsm+0x50>
 }
 8002d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8002d5e:	f7ff fdf1 	bl	8002944 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8002d62:	78e3      	ldrb	r3, [r4, #3]
 8002d64:	bb8b      	cbnz	r3, 8002dca <run_fsm+0x8a>
 8002d66:	7823      	ldrb	r3, [r4, #0]
	 switch(fsmstate->state){
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d1f2      	bne.n	8002d52 <run_fsm+0x12>
				 torque_control(&controller);
 8002d6c:	4c36      	ldr	r4, [pc, #216]	; (8002e48 <run_fsm+0x108>)
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7ff fdb0 	bl	80028d4 <torque_control>
				 field_weaken(&controller);
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff fc07 	bl	8002588 <field_weaken>
				 commutate(&controller, &comm_encoder);
 8002d7a:	4934      	ldr	r1, [pc, #208]	; (8002e4c <run_fsm+0x10c>)
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff fc41 	bl	8002604 <commutate>
			 controller.timeout ++;
 8002d82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8002d86:	3301      	adds	r3, #1
 8002d88:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 }
 8002d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 if(!comm_encoder_cal.done_ordering){
 8002d90:	4a2f      	ldr	r2, [pc, #188]	; (8002e50 <run_fsm+0x110>)
 8002d92:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002d96:	b183      	cbz	r3, 8002dba <run_fsm+0x7a>
			 else if(!comm_encoder_cal.done_cal){
 8002d98:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8002d9c:	b9db      	cbnz	r3, 8002dd6 <run_fsm+0x96>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002d9e:	492a      	ldr	r1, [pc, #168]	; (8002e48 <run_fsm+0x108>)
 8002da0:	482a      	ldr	r0, [pc, #168]	; (8002e4c <run_fsm+0x10c>)
 8002da2:	f8d1 30b0 	ldr.w	r3, [r1, #176]	; 0xb0
 }
 8002da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002daa:	f7fe bbc3 	b.w	8001534 <calibrate_encoder>
 }
 8002dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			 ps_print(&comm_encoder, 100);
 8002db2:	4826      	ldr	r0, [pc, #152]	; (8002e4c <run_fsm+0x10c>)
 8002db4:	2164      	movs	r1, #100	; 0x64
 8002db6:	f001 b91b 	b.w	8003ff0 <ps_print>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002dba:	4923      	ldr	r1, [pc, #140]	; (8002e48 <run_fsm+0x108>)
 8002dbc:	4823      	ldr	r0, [pc, #140]	; (8002e4c <run_fsm+0x10c>)
 8002dbe:	f8d1 30b0 	ldr.w	r3, [r1, #176]	; 0xb0
 }
 8002dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002dc6:	f7fe bab3 	b.w	8001330 <order_phases>
			 fsmstate->state = fsmstate->next_state;
 8002dca:	7863      	ldrb	r3, [r4, #1]
 8002dcc:	7023      	strb	r3, [r4, #0]
			 fsm_enter_state(fsmstate);
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff ff4a 	bl	8002c68 <fsm_enter_state>
 8002dd4:	e7c7      	b.n	8002d66 <run_fsm+0x26>
				 E_ZERO = comm_encoder_cal.ezero;
 8002dd6:	69d5      	ldr	r5, [r2, #28]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002dd8:	4f1c      	ldr	r7, [pc, #112]	; (8002e4c <run_fsm+0x10c>)
 8002dda:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002e54 <run_fsm+0x114>
 8002dde:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
				 E_ZERO = comm_encoder_cal.ezero;
 8002de2:	4e1d      	ldr	r6, [pc, #116]	; (8002e58 <run_fsm+0x118>)
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002de4:	426b      	negs	r3, r5
 8002de6:	ee00 3a10 	vmov	s0, r3
 8002dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002df2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002df6:	ee20 0a27 	vmul.f32	s0, s0, s15
				 E_ZERO = comm_encoder_cal.ezero;
 8002dfa:	6175      	str	r5, [r6, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002dfc:	f00a fbca 	bl	800d594 <fmodf>
 8002e00:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002e5c <run_fsm+0x11c>
 8002e04:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002e08:	ee17 0a90 	vmov	r0, s15
 8002e0c:	f7fd fbc4 	bl	8000598 <__aeabi_f2d>
 8002e10:	460b      	mov	r3, r1
 8002e12:	4602      	mov	r2, r0
 8002e14:	4629      	mov	r1, r5
 8002e16:	4812      	ldr	r0, [pc, #72]	; (8002e60 <run_fsm+0x120>)
 8002e18:	f006 feba 	bl	8009b90 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8002e1c:	4911      	ldr	r1, [pc, #68]	; (8002e64 <run_fsm+0x124>)
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002e26:	f006 fa19 	bl	800925c <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8002e2a:	490e      	ldr	r1, [pc, #56]	; (8002e64 <run_fsm+0x124>)
 8002e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e30:	f106 0018 	add.w	r0, r6, #24
 8002e34:	f006 fa12 	bl	800925c <memcpy>
				 save_to_flash();
 8002e38:	f7ff f900 	bl	800203c <save_to_flash>
				 load_from_flash();
 8002e3c:	f7ff f8c8 	bl	8001fd0 <load_from_flash>
		fsmstate->next_state = MENU_MODE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	7063      	strb	r3, [r4, #1]
		fsmstate->ready = 0;
 8002e44:	70e3      	strb	r3, [r4, #3]
		return;
 8002e46:	e788      	b.n	8002d5a <run_fsm+0x1a>
 8002e48:	2000078c 	.word	0x2000078c
 8002e4c:	200003e8 	.word	0x200003e8
 8002e50:	20000a80 	.word	0x20000a80
 8002e54:	37800000 	.word	0x37800000
 8002e58:	20008f3c 	.word	0x20008f3c
 8002e5c:	40c90fdb 	.word	0x40c90fdb
 8002e60:	0800e090 	.word	0x0800e090
 8002e64:	20008aac 	.word	0x20008aac

08002e68 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8002e68:	b538      	push	{r3, r4, r5, lr}
 8002e6a:	7b43      	ldrb	r3, [r0, #13]
 8002e6c:	3b61      	subs	r3, #97	; 0x61
 8002e6e:	4604      	mov	r4, r0
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
			 V_MIN = -V_MAX;
			 printf("V_MAX set to %f\r\n", V_MAX);
			 break;
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8002e70:	1d05      	adds	r5, r0, #4
 8002e72:	2b17      	cmp	r3, #23
 8002e74:	d819      	bhi.n	8002eaa <process_user_input+0x42>
 8002e76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e7a:	0028      	.short	0x0028
 8002e7c:	00780050 	.word	0x00780050
 8002e80:	001800a0 	.word	0x001800a0
 8002e84:	00e700bf 	.word	0x00e700bf
 8002e88:	012e0106 	.word	0x012e0106
 8002e8c:	01380018 	.word	0x01380018
 8002e90:	017f0157 	.word	0x017f0157
 8002e94:	00180018 	.word	0x00180018
 8002e98:	00180189 	.word	0x00180189
 8002e9c:	00180018 	.word	0x00180018
 8002ea0:	001801ac 	.word	0x001801ac
 8002ea4:	001801b6 	.word	0x001801b6
 8002ea8:	020b      	.short	0x020b
 8002eaa:	48e0      	ldr	r0, [pc, #896]	; (800322c <process_user_input+0x3c4>)
 8002eac:	4629      	mov	r1, r5
 8002eae:	f006 fe6f 	bl	8009b90 <iprintf>
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 8002eb2:	f7ff f8c3 	bl	800203c <save_to_flash>
	 load_from_flash();
 8002eb6:	f7ff f88b 	bl	8001fd0 <load_from_flash>
	 enter_setup_state();
 8002eba:	f7ff fd85 	bl	80029c8 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	7323      	strb	r3, [r4, #12]
	 fsmstate->cmd_id = 0;
 8002ec2:	7363      	strb	r3, [r4, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	606b      	str	r3, [r5, #4]
 }
 8002ec8:	bd38      	pop	{r3, r4, r5, pc}
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f006 f994 	bl	80091f8 <atof>
 8002ed0:	ec51 0b10 	vmov	r0, r1, d0
 8002ed4:	f7fd feb0 	bl	8000c38 <__aeabi_d2f>
 8002ed8:	ee07 0a90 	vmov	s15, r0
 8002edc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	bf88      	it	hi
 8002eea:	eef0 7a47 	vmovhi.f32	s15, s14
 8002eee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef2:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800328c <process_user_input+0x424>
 8002ef6:	4bce      	ldr	r3, [pc, #824]	; (8003230 <process_user_input+0x3c8>)
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	bfb8      	it	lt
 8002efe:	eef0 7a47 	vmovlt.f32	s15, s14
 8002f02:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8002f06:	ee17 0a90 	vmov	r0, s15
 8002f0a:	f7fd fb45 	bl	8000598 <__aeabi_f2d>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	48c8      	ldr	r0, [pc, #800]	; (8003234 <process_user_input+0x3cc>)
 8002f14:	f006 fe3c 	bl	8009b90 <iprintf>
			 break;
 8002f18:	e7cb      	b.n	8002eb2 <process_user_input+0x4a>
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f006 f96c 	bl	80091f8 <atof>
 8002f20:	ec51 0b10 	vmov	r0, r1, d0
 8002f24:	f7fd fe88 	bl	8000c38 <__aeabi_d2f>
 8002f28:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8003238 <process_user_input+0x3d0>
 8002f2c:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 800323c <process_user_input+0x3d4>
 8002f30:	4bbf      	ldr	r3, [pc, #764]	; (8003230 <process_user_input+0x3c8>)
 8002f32:	ee07 0a90 	vmov	s15, r0
 8002f36:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3e:	bf88      	it	hi
 8002f40:	eef0 7a66 	vmovhi.f32	s15, s13
 8002f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	bfb8      	it	lt
 8002f4e:	eef0 7a47 	vmovlt.f32	s15, s14
 8002f52:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8002f56:	ee17 0a90 	vmov	r0, s15
 8002f5a:	f7fd fb1d 	bl	8000598 <__aeabi_f2d>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	48b7      	ldr	r0, [pc, #732]	; (8003240 <process_user_input+0x3d8>)
 8002f64:	f006 fe14 	bl	8009b90 <iprintf>
			 break;
 8002f68:	e7a3      	b.n	8002eb2 <process_user_input+0x4a>
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f006 f944 	bl	80091f8 <atof>
 8002f70:	ec51 0b10 	vmov	r0, r1, d0
 8002f74:	f7fd fe60 	bl	8000c38 <__aeabi_d2f>
 8002f78:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003244 <process_user_input+0x3dc>
 8002f7c:	eddf 6ac3 	vldr	s13, [pc, #780]	; 800328c <process_user_input+0x424>
 8002f80:	4bab      	ldr	r3, [pc, #684]	; (8003230 <process_user_input+0x3c8>)
 8002f82:	ee07 0a90 	vmov	s15, r0
 8002f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	bf88      	it	hi
 8002f90:	eef0 7a47 	vmovhi.f32	s15, s14
 8002f94:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	bfb8      	it	lt
 8002f9e:	eef0 7a66 	vmovlt.f32	s15, s13
 8002fa2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8002fa6:	ee17 0a90 	vmov	r0, s15
 8002faa:	f7fd faf5 	bl	8000598 <__aeabi_f2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	48a5      	ldr	r0, [pc, #660]	; (8003248 <process_user_input+0x3e0>)
 8002fb4:	f006 fdec 	bl	8009b90 <iprintf>
			 break;
 8002fb8:	e77b      	b.n	8002eb2 <process_user_input+0x4a>
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f006 f91c 	bl	80091f8 <atof>
 8002fc0:	ec51 0b10 	vmov	r0, r1, d0
 8002fc4:	f7fd fe38 	bl	8000c38 <__aeabi_d2f>
 8002fc8:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800328c <process_user_input+0x424>
 8002fcc:	4b98      	ldr	r3, [pc, #608]	; (8003230 <process_user_input+0x3c8>)
 8002fce:	ee07 0a90 	vmov	s15, r0
 8002fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	bfb8      	it	lt
 8002fdc:	eef0 7a47 	vmovlt.f32	s15, s14
 8002fe0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8002fe4:	ee17 0a90 	vmov	r0, s15
 8002fe8:	f7fd fad6 	bl	8000598 <__aeabi_f2d>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4896      	ldr	r0, [pc, #600]	; (800324c <process_user_input+0x3e4>)
 8002ff2:	f006 fdcd 	bl	8009b90 <iprintf>
			 break;
 8002ff6:	e75c      	b.n	8002eb2 <process_user_input+0x4a>
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f006 f8fd 	bl	80091f8 <atof>
 8002ffe:	ec51 0b10 	vmov	r0, r1, d0
 8003002:	f7fd fe19 	bl	8000c38 <__aeabi_d2f>
 8003006:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003250 <process_user_input+0x3e8>
 800300a:	eddf 6aa0 	vldr	s13, [pc, #640]	; 800328c <process_user_input+0x424>
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <process_user_input+0x3c8>)
 8003010:	ee07 0a90 	vmov	s15, r0
 8003014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	bf88      	it	hi
 800301e:	eef0 7a47 	vmovhi.f32	s15, s14
 8003022:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	bfb8      	it	lt
 800302c:	eef0 7a66 	vmovlt.f32	s15, s13
 8003030:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003034:	ee17 0a90 	vmov	r0, s15
 8003038:	f7fd faae 	bl	8000598 <__aeabi_f2d>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4884      	ldr	r0, [pc, #528]	; (8003254 <process_user_input+0x3ec>)
 8003042:	f006 fda5 	bl	8009b90 <iprintf>
			 break;
 8003046:	e734      	b.n	8002eb2 <process_user_input+0x4a>
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003048:	4628      	mov	r0, r5
 800304a:	f006 f8d5 	bl	80091f8 <atof>
 800304e:	ec51 0b10 	vmov	r0, r1, d0
 8003052:	f7fd fdf1 	bl	8000c38 <__aeabi_d2f>
 8003056:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003258 <process_user_input+0x3f0>
 800305a:	4b75      	ldr	r3, [pc, #468]	; (8003230 <process_user_input+0x3c8>)
 800305c:	ee07 0a90 	vmov	s15, r0
 8003060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003068:	bfb8      	it	lt
 800306a:	eef0 7a47 	vmovlt.f32	s15, s14
 800306e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8003072:	ee17 0a90 	vmov	r0, s15
 8003076:	f7fd fa8f 	bl	8000598 <__aeabi_f2d>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4877      	ldr	r0, [pc, #476]	; (800325c <process_user_input+0x3f4>)
 8003080:	f006 fd86 	bl	8009b90 <iprintf>
			 break;
 8003084:	e715      	b.n	8002eb2 <process_user_input+0x4a>
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003086:	4628      	mov	r0, r5
 8003088:	f006 f8b6 	bl	80091f8 <atof>
 800308c:	ec51 0b10 	vmov	r0, r1, d0
 8003090:	f7fd fdd2 	bl	8000c38 <__aeabi_d2f>
 8003094:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003260 <process_user_input+0x3f8>
 8003098:	eddf 6a7c 	vldr	s13, [pc, #496]	; 800328c <process_user_input+0x424>
 800309c:	4b64      	ldr	r3, [pc, #400]	; (8003230 <process_user_input+0x3c8>)
 800309e:	ee07 0a90 	vmov	s15, r0
 80030a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030aa:	bf88      	it	hi
 80030ac:	eef0 7a47 	vmovhi.f32	s15, s14
 80030b0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	bfb8      	it	lt
 80030ba:	eef0 7a66 	vmovlt.f32	s15, s13
 80030be:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 80030c2:	ee17 0a90 	vmov	r0, s15
 80030c6:	f7fd fa67 	bl	8000598 <__aeabi_f2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4865      	ldr	r0, [pc, #404]	; (8003264 <process_user_input+0x3fc>)
 80030d0:	f006 fd5e 	bl	8009b90 <iprintf>
			 break;
 80030d4:	e6ed      	b.n	8002eb2 <process_user_input+0x4a>
			 CAN_ID = atoi(fsmstate->cmd_buff);
 80030d6:	4628      	mov	r0, r5
 80030d8:	f006 f891 	bl	80091fe <atoi>
 80030dc:	4b62      	ldr	r3, [pc, #392]	; (8003268 <process_user_input+0x400>)
 80030de:	4601      	mov	r1, r0
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80030e0:	4862      	ldr	r0, [pc, #392]	; (800326c <process_user_input+0x404>)
			 CAN_ID = atoi(fsmstate->cmd_buff);
 80030e2:	6059      	str	r1, [r3, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80030e4:	f006 fd54 	bl	8009b90 <iprintf>
			 break;
 80030e8:	e6e3      	b.n	8002eb2 <process_user_input+0x4a>
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 80030ea:	4628      	mov	r0, r5
 80030ec:	f006 f884 	bl	80091f8 <atof>
 80030f0:	ec51 0b10 	vmov	r0, r1, d0
 80030f4:	f7fd fda0 	bl	8000c38 <__aeabi_d2f>
 80030f8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003270 <process_user_input+0x408>
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <process_user_input+0x3c8>)
 80030fe:	ee07 0a90 	vmov	s15, r0
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	bfb8      	it	lt
 800310c:	eef0 7a47 	vmovlt.f32	s15, s14
 8003110:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8003114:	ee17 0a90 	vmov	r0, s15
 8003118:	f7fd fa3e 	bl	8000598 <__aeabi_f2d>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4854      	ldr	r0, [pc, #336]	; (8003274 <process_user_input+0x40c>)
 8003122:	f006 fd35 	bl	8009b90 <iprintf>
			 break;
 8003126:	e6c4      	b.n	8002eb2 <process_user_input+0x4a>
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003128:	4628      	mov	r0, r5
 800312a:	f006 f865 	bl	80091f8 <atof>
 800312e:	ec51 0b10 	vmov	r0, r1, d0
 8003132:	f7fd fd81 	bl	8000c38 <__aeabi_d2f>
 8003136:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003244 <process_user_input+0x3dc>
 800313a:	eddf 6a54 	vldr	s13, [pc, #336]	; 800328c <process_user_input+0x424>
 800313e:	4b3c      	ldr	r3, [pc, #240]	; (8003230 <process_user_input+0x3c8>)
 8003140:	ee07 0a90 	vmov	s15, r0
 8003144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	bf88      	it	hi
 800314e:	eef0 7a47 	vmovhi.f32	s15, s14
 8003152:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	bfb8      	it	lt
 800315c:	eef0 7a66 	vmovlt.f32	s15, s13
 8003160:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003164:	ee17 0a90 	vmov	r0, s15
 8003168:	f7fd fa16 	bl	8000598 <__aeabi_f2d>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4841      	ldr	r0, [pc, #260]	; (8003278 <process_user_input+0x410>)
 8003172:	f006 fd0d 	bl	8009b90 <iprintf>
			 break;
 8003176:	e69c      	b.n	8002eb2 <process_user_input+0x4a>
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003178:	4628      	mov	r0, r5
 800317a:	f006 f840 	bl	80091fe <atoi>
 800317e:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <process_user_input+0x400>)
 8003180:	4601      	mov	r1, r0
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8003182:	483e      	ldr	r0, [pc, #248]	; (800327c <process_user_input+0x414>)
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003184:	6099      	str	r1, [r3, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8003186:	f006 fd03 	bl	8009b90 <iprintf>
			 break;
 800318a:	e692      	b.n	8002eb2 <process_user_input+0x4a>
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800318c:	4628      	mov	r0, r5
 800318e:	f006 f833 	bl	80091f8 <atof>
 8003192:	ec51 0b10 	vmov	r0, r1, d0
 8003196:	f7fd fd4f 	bl	8000c38 <__aeabi_d2f>
 800319a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800328c <process_user_input+0x424>
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <process_user_input+0x3c8>)
 80031a0:	ee07 0a90 	vmov	s15, r0
 80031a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	bfb8      	it	lt
 80031ae:	eef0 7a47 	vmovlt.f32	s15, s14
			 P_MIN = -P_MAX;
 80031b2:	eeb1 7a67 	vneg.f32	s14, s15
 80031b6:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80031ba:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 printf("P_MAX set to %f\r\n", P_MAX);
 80031be:	ee17 0a90 	vmov	r0, s15
 80031c2:	f7fd f9e9 	bl	8000598 <__aeabi_f2d>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	482d      	ldr	r0, [pc, #180]	; (8003280 <process_user_input+0x418>)
 80031cc:	f006 fce0 	bl	8009b90 <iprintf>
			 break;
 80031d0:	e66f      	b.n	8002eb2 <process_user_input+0x4a>
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80031d2:	4628      	mov	r0, r5
 80031d4:	f006 f813 	bl	80091fe <atoi>
 80031d8:	4b23      	ldr	r3, [pc, #140]	; (8003268 <process_user_input+0x400>)
 80031da:	4601      	mov	r1, r0
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80031dc:	4829      	ldr	r0, [pc, #164]	; (8003284 <process_user_input+0x41c>)
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 80031de:	60d9      	str	r1, [r3, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80031e0:	f006 fcd6 	bl	8009b90 <iprintf>
			 break;
 80031e4:	e665      	b.n	8002eb2 <process_user_input+0x4a>
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80031e6:	4628      	mov	r0, r5
 80031e8:	f006 f806 	bl	80091f8 <atof>
 80031ec:	ec51 0b10 	vmov	r0, r1, d0
 80031f0:	f7fd fd22 	bl	8000c38 <__aeabi_d2f>
 80031f4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800328c <process_user_input+0x424>
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <process_user_input+0x3c8>)
 80031fa:	ee07 0a90 	vmov	s15, r0
 80031fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	bfb8      	it	lt
 8003208:	eef0 7a47 	vmovlt.f32	s15, s14
			 V_MIN = -V_MAX;
 800320c:	eeb1 7a67 	vneg.f32	s14, s15
 8003210:	ed83 7a15 	vstr	s14, [r3, #84]	; 0x54
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003214:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003218:	ee17 0a90 	vmov	r0, s15
 800321c:	f7fd f9bc 	bl	8000598 <__aeabi_f2d>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4818      	ldr	r0, [pc, #96]	; (8003288 <process_user_input+0x420>)
 8003226:	f006 fcb3 	bl	8009b90 <iprintf>
			 break;
 800322a:	e642      	b.n	8002eb2 <process_user_input+0x4a>
 800322c:	0800e1dc 	.word	0x0800e1dc
 8003230:	2000068c 	.word	0x2000068c
 8003234:	0800e158 	.word	0x0800e158
 8003238:	44fa0000 	.word	0x44fa0000
 800323c:	42c80000 	.word	0x42c80000
 8003240:	0800e0a4 	.word	0x0800e0a4
 8003244:	42200000 	.word	0x42200000
 8003248:	0800e140 	.word	0x0800e140
 800324c:	0800e1a0 	.word	0x0800e1a0
 8003250:	42040000 	.word	0x42040000
 8003254:	0800e0f8 	.word	0x0800e0f8
 8003258:	3a83126f 	.word	0x3a83126f
 800325c:	0800e16c 	.word	0x0800e16c
 8003260:	43160000 	.word	0x43160000
 8003264:	0800e128 	.word	0x0800e128
 8003268:	20008f3c 	.word	0x20008f3c
 800326c:	0800e0b8 	.word	0x0800e0b8
 8003270:	38d1b717 	.word	0x38d1b717
 8003274:	0800e17c 	.word	0x0800e17c
 8003278:	0800e0e4 	.word	0x0800e0e4
 800327c:	0800e0cc 	.word	0x0800e0cc
 8003280:	0800e1b4 	.word	0x0800e1b4
 8003284:	0800e110 	.word	0x0800e110
 8003288:	0800e1c8 	.word	0x0800e1c8
 800328c:	00000000 	.word	0x00000000
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003290:	4628      	mov	r0, r5
 8003292:	f005 ffb1 	bl	80091f8 <atof>
 8003296:	ec51 0b10 	vmov	r0, r1, d0
 800329a:	f7fd fccd 	bl	8000c38 <__aeabi_d2f>
 800329e:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800328c <process_user_input+0x424>
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <process_user_input+0x468>)
 80032a4:	ee07 0a90 	vmov	s15, r0
 80032a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	bfb8      	it	lt
 80032b2:	eef0 7a47 	vmovlt.f32	s15, s14
 80032b6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80032ba:	ee17 0a90 	vmov	r0, s15
 80032be:	f7fd f96b 	bl	8000598 <__aeabi_f2d>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4803      	ldr	r0, [pc, #12]	; (80032d4 <process_user_input+0x46c>)
 80032c8:	f006 fc62 	bl	8009b90 <iprintf>
			 break;
 80032cc:	e5f1      	b.n	8002eb2 <process_user_input+0x4a>
 80032ce:	bf00      	nop
 80032d0:	2000068c 	.word	0x2000068c
 80032d4:	0800e18c 	.word	0x0800e18c

080032d8 <update_fsm>:
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80032d8:	291b      	cmp	r1, #27
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80032da:	4603      	mov	r3, r0
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80032dc:	d026      	beq.n	800332c <update_fsm+0x54>
	switch(fsmstate->state){
 80032de:	7802      	ldrb	r2, [r0, #0]
 80032e0:	b152      	cbz	r2, 80032f8 <update_fsm+0x20>
 80032e2:	2a04      	cmp	r2, #4
 80032e4:	d121      	bne.n	800332a <update_fsm+0x52>
			if(fsm_input == ENTER_CMD){
 80032e6:	290d      	cmp	r1, #13
 80032e8:	d028      	beq.n	800333c <update_fsm+0x64>
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 80032ea:	7b02      	ldrb	r2, [r0, #12]
 80032ec:	b312      	cbz	r2, 8003334 <update_fsm+0x5c>
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80032ee:	4410      	add	r0, r2
			fsmstate->bytecount++;
 80032f0:	3201      	adds	r2, #1
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80032f2:	70c1      	strb	r1, [r0, #3]
			fsmstate->bytecount++;
 80032f4:	731a      	strb	r2, [r3, #12]
			break;
 80032f6:	4770      	bx	lr
			switch (fsm_input){
 80032f8:	3963      	subs	r1, #99	; 0x63
 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80032fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032fe:	2917      	cmp	r1, #23
 8003300:	d811      	bhi.n	8003326 <update_fsm+0x4e>
 8003302:	e8df f001 	tbb	[pc, r1]
 8003306:	7e0c      	.short	0x7e0c
 8003308:	10104379 	.word	0x10104379
 800330c:	10101010 	.word	0x10101010
 8003310:	1010103e 	.word	0x1010103e
 8003314:	10391010 	.word	0x10391010
 8003318:	10101010 	.word	0x10101010
 800331c:	1d10      	.short	0x1d10
					fsmstate->next_state = CALIBRATION_MODE;
 800331e:	2101      	movs	r1, #1
					fsmstate->ready = 0;
 8003320:	2200      	movs	r2, #0
					fsmstate->next_state = CALIBRATION_MODE;
 8003322:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 8003324:	70c2      	strb	r2, [r0, #3]
 }
 8003326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800332a:	4770      	bx	lr
		fsmstate->next_state = MENU_MODE;
 800332c:	2200      	movs	r2, #0
 800332e:	7042      	strb	r2, [r0, #1]
		fsmstate->ready = 0;
 8003330:	70c2      	strb	r2, [r0, #3]
		return;
 8003332:	4770      	bx	lr
			fsmstate->bytecount++;
 8003334:	3201      	adds	r2, #1
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003336:	7341      	strb	r1, [r0, #13]
			fsmstate->bytecount++;
 8003338:	731a      	strb	r2, [r3, #12]
			break;
 800333a:	4770      	bx	lr
				process_user_input(fsmstate);
 800333c:	f7ff bd94 	b.w	8002e68 <process_user_input>
					comm_encoder.m_zero = 0;
 8003340:	4ca4      	ldr	r4, [pc, #656]	; (80035d4 <update_fsm+0x2fc>)
					printf("Zero pos command entry\n\r");
 8003342:	48a5      	ldr	r0, [pc, #660]	; (80035d8 <update_fsm+0x300>)
					M_ZERO = comm_encoder.count;
 8003344:	4da5      	ldr	r5, [pc, #660]	; (80035dc <update_fsm+0x304>)
					printf("Zero pos command entry\n\r");
 8003346:	f006 fc23 	bl	8009b90 <iprintf>
					ps_sample(&comm_encoder, DT);
 800334a:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 80035e0 <update_fsm+0x308>
					comm_encoder.m_zero = 0;
 800334e:	2300      	movs	r3, #0
					ps_sample(&comm_encoder, DT);
 8003350:	4620      	mov	r0, r4
					comm_encoder.m_zero = 0;
 8003352:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 8003356:	f000 fd77 	bl	8003e48 <ps_sample>
					HAL_Delay(20);
 800335a:	2014      	movs	r0, #20
 800335c:	f001 fa74 	bl	8004848 <HAL_Delay>
					M_ZERO = comm_encoder.count;
 8003360:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003362:	612b      	str	r3, [r5, #16]
					save_to_flash();
 8003364:	f7fe fe6a 	bl	800203c <save_to_flash>
					load_from_flash();
 8003368:	f7fe fe32 	bl	8001fd0 <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 800336c:	6929      	ldr	r1, [r5, #16]
 800336e:	489d      	ldr	r0, [pc, #628]	; (80035e4 <update_fsm+0x30c>)
 }
 8003370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("\n\r  Saved new zero position:  %.4d \n\r\n\r", M_ZERO);
 8003374:	f006 bc0c 	b.w	8009b90 <iprintf>
					fsmstate->next_state = SETUP_MODE;
 8003378:	2104      	movs	r1, #4
					fsmstate->ready = 0;
 800337a:	2200      	movs	r2, #0
					fsmstate->next_state = SETUP_MODE;
 800337c:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 800337e:	70c2      	strb	r2, [r0, #3]
					break;
 8003380:	e7d1      	b.n	8003326 <update_fsm+0x4e>
					fsmstate->next_state = MOTOR_MODE;
 8003382:	2102      	movs	r1, #2
					fsmstate->ready = 0;
 8003384:	2200      	movs	r2, #0
					fsmstate->next_state = MOTOR_MODE;
 8003386:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 8003388:	70c2      	strb	r2, [r0, #3]
					break;
 800338a:	e7cc      	b.n	8003326 <update_fsm+0x4e>
				    I_BW = 1000;
 800338c:	4b96      	ldr	r3, [pc, #600]	; (80035e8 <update_fsm+0x310>)
					E_ZERO = 0;
 800338e:	4a93      	ldr	r2, [pc, #588]	; (80035dc <update_fsm+0x304>)
				    I_BW = 1000;
 8003390:	4996      	ldr	r1, [pc, #600]	; (80035ec <update_fsm+0x314>)
 8003392:	6099      	str	r1, [r3, #8]
				    CAN_ID = 1;
 8003394:	2001      	movs	r0, #1
					E_ZERO = 0;
 8003396:	2100      	movs	r1, #0
				    CAN_ID = 1;
 8003398:	6050      	str	r0, [r2, #4]
				    CAN_TIMEOUT = 1000;
 800339a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
					E_ZERO = 0;
 800339e:	6151      	str	r1, [r2, #20]
				    M_ZERO = 0;
 80033a0:	6111      	str	r1, [r2, #16]
				    CAN_MASTER = 0;
 80033a2:	6091      	str	r1, [r2, #8]
				    CAN_TIMEOUT = 1000;
 80033a4:	60d0      	str	r0, [r2, #12]
 80033a6:	f102 0018 	add.w	r0, r2, #24
				    PPAIRS = 21.0f;
 80033aa:	4a91      	ldr	r2, [pc, #580]	; (80035f0 <update_fsm+0x318>)
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28
				    P_MAX = 12.5f;
 80033ae:	4a91      	ldr	r2, [pc, #580]	; (80035f4 <update_fsm+0x31c>)
 80033b0:	651a      	str	r2, [r3, #80]	; 0x50
				    I_MAX=40;
 80033b2:	4d91      	ldr	r5, [pc, #580]	; (80035f8 <update_fsm+0x320>)
				    TEMP_MAX = 125.0f;
 80033b4:	4c91      	ldr	r4, [pc, #580]	; (80035fc <update_fsm+0x324>)
				    P_MIN = -12.5f;
 80033b6:	4a92      	ldr	r2, [pc, #584]	; (8003600 <update_fsm+0x328>)
				    I_MAX=40;
 80033b8:	60dd      	str	r5, [r3, #12]
				    TEMP_MAX = 125.0f;
 80033ba:	621c      	str	r4, [r3, #32]
				    P_MIN = -12.5f;
 80033bc:	64da      	str	r2, [r3, #76]	; 0x4c
				    V_MAX = 65.0f;
 80033be:	4d91      	ldr	r5, [pc, #580]	; (8003604 <update_fsm+0x32c>)
				    V_MIN = -65.0f;
 80033c0:	4c91      	ldr	r4, [pc, #580]	; (8003608 <update_fsm+0x330>)
				    V_MAX = 65.0f;
 80033c2:	659d      	str	r5, [r3, #88]	; 0x58
				    I_FW_MAX=0;
 80033c4:	2200      	movs	r2, #0
				    V_MIN = -65.0f;
 80033c6:	655c      	str	r4, [r3, #84]	; 0x54
				    I_FW_MAX=0;
 80033c8:	619a      	str	r2, [r3, #24]
				    R_NOMINAL = 0.0f;
 80033ca:	61da      	str	r2, [r3, #28]
				    I_CAL = 5.0f;
 80033cc:	4d8f      	ldr	r5, [pc, #572]	; (800360c <update_fsm+0x334>)
				    KP_MAX = 500.0f;
 80033ce:	4e90      	ldr	r6, [pc, #576]	; (8003610 <update_fsm+0x338>)
 80033d0:	65de      	str	r6, [r3, #92]	; 0x5c
				    GR = 1.0f;
 80033d2:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80033d6:	f44f 7200 	mov.w	r2, #512	; 0x200
				    I_CAL = 5.0f;
 80033da:	649d      	str	r5, [r3, #72]	; 0x48
				    KD_MAX = 5.0f;
 80033dc:	661d      	str	r5, [r3, #96]	; 0x60
				    GR = 1.0f;
 80033de:	645c      	str	r4, [r3, #68]	; 0x44
				    KT = 1.0f;
 80033e0:	639c      	str	r4, [r3, #56]	; 0x38
				    for(int i = 0; i < 128; i++){
 80033e2:	f005 ff63 	bl	80092ac <memset>
				    save_to_flash();
 80033e6:	f7fe fe29 	bl	800203c <save_to_flash>
				    load_from_flash();
 80033ea:	f7fe fdf1 	bl	8001fd0 <load_from_flash>
 }
 80033ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				    printf("\n\r  FLASH variables reset. \n\r Please cycle power. \n\r\n\r");
 80033f2:	4888      	ldr	r0, [pc, #544]	; (8003614 <update_fsm+0x33c>)
 80033f4:	f006 bbcc 	b.w	8009b90 <iprintf>
					fsmstate->next_state = ENCODER_MODE;
 80033f8:	2105      	movs	r1, #5
					fsmstate->ready = 0;
 80033fa:	2200      	movs	r2, #0
					fsmstate->next_state = ENCODER_MODE;
 80033fc:	7041      	strb	r1, [r0, #1]
					fsmstate->ready = 0;
 80033fe:	70c2      	strb	r2, [r0, #3]
					break;
 8003400:	e791      	b.n	8003326 <update_fsm+0x4e>
						printf("%d ", encLut[i]);
 8003402:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80035dc <update_fsm+0x304>
					printf("Variable dump:\n\r");
 8003406:	4884      	ldr	r0, [pc, #528]	; (8003618 <update_fsm+0x340>)
						printf("%d ", encLut[i]);
 8003408:	4e84      	ldr	r6, [pc, #528]	; (800361c <update_fsm+0x344>)
							printf("\n\r");
 800340a:	4f85      	ldr	r7, [pc, #532]	; (8003620 <update_fsm+0x348>)
						printf("%d ", encLut[i]);
 800340c:	4645      	mov	r5, r8
					printf("Variable dump:\n\r");
 800340e:	f006 fbbf 	bl	8009b90 <iprintf>
					printf("---Enc. LUT:---\n\r");
 8003412:	4884      	ldr	r0, [pc, #528]	; (8003624 <update_fsm+0x34c>)
 8003414:	f006 fbbc 	bl	8009b90 <iprintf>
						printf("%d ", encLut[i]);
 8003418:	f855 1f18 	ldr.w	r1, [r5, #24]!
 800341c:	4630      	mov	r0, r6
 800341e:	f006 fbb7 	bl	8009b90 <iprintf>
						i++;
 8003422:	2401      	movs	r4, #1
						printf("%d ", encLut[i]);
 8003424:	f855 1f04 	ldr.w	r1, [r5, #4]!
						i++;
 8003428:	3401      	adds	r4, #1
						printf("%d ", encLut[i]);
 800342a:	4630      	mov	r0, r6
 800342c:	f006 fbb0 	bl	8009b90 <iprintf>
						if(i%8==0){
 8003430:	0763      	lsls	r3, r4, #29
 8003432:	d102      	bne.n	800343a <update_fsm+0x162>
							printf("\n\r");
 8003434:	4638      	mov	r0, r7
 8003436:	f006 fbab 	bl	8009b90 <iprintf>
					for(int i = 0; i < 128;){
 800343a:	2c80      	cmp	r4, #128	; 0x80
 800343c:	d1f2      	bne.n	8003424 <update_fsm+0x14c>
					printf("---Int regs:---\n\r");
 800343e:	487a      	ldr	r0, [pc, #488]	; (8003628 <update_fsm+0x350>)
					printf("I_BW %f \n\r", I_BW);
 8003440:	4c69      	ldr	r4, [pc, #420]	; (80035e8 <update_fsm+0x310>)
					printf("---Int regs:---\n\r");
 8003442:	f006 fba5 	bl	8009b90 <iprintf>
					printf("PHASE_ORDER %d \n\r", PHASE_ORDER);
 8003446:	f8d8 1000 	ldr.w	r1, [r8]
 800344a:	4878      	ldr	r0, [pc, #480]	; (800362c <update_fsm+0x354>)
 800344c:	f006 fba0 	bl	8009b90 <iprintf>
					printf("CAN_ID %d \n\r", CAN_ID);
 8003450:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003454:	4876      	ldr	r0, [pc, #472]	; (8003630 <update_fsm+0x358>)
 8003456:	f006 fb9b 	bl	8009b90 <iprintf>
					printf("CAN_MASTER %d \n\r", CAN_MASTER);
 800345a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800345e:	4875      	ldr	r0, [pc, #468]	; (8003634 <update_fsm+0x35c>)
 8003460:	f006 fb96 	bl	8009b90 <iprintf>
					printf("CAN_TIMEOUT %d \n\r", CAN_TIMEOUT);
 8003464:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8003468:	4873      	ldr	r0, [pc, #460]	; (8003638 <update_fsm+0x360>)
 800346a:	f006 fb91 	bl	8009b90 <iprintf>
					printf("M_ZERO %d \n\r", M_ZERO);
 800346e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003472:	4872      	ldr	r0, [pc, #456]	; (800363c <update_fsm+0x364>)
 8003474:	f006 fb8c 	bl	8009b90 <iprintf>
					printf("E_ZERO %d \n\r", E_ZERO);
 8003478:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800347c:	4870      	ldr	r0, [pc, #448]	; (8003640 <update_fsm+0x368>)
 800347e:	f006 fb87 	bl	8009b90 <iprintf>
					printf("--Float regs:--\n\r");
 8003482:	4870      	ldr	r0, [pc, #448]	; (8003644 <update_fsm+0x36c>)
 8003484:	f006 fb84 	bl	8009b90 <iprintf>
					printf("I_BW %f \n\r", I_BW);
 8003488:	68a0      	ldr	r0, [r4, #8]
 800348a:	f7fd f885 	bl	8000598 <__aeabi_f2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	486d      	ldr	r0, [pc, #436]	; (8003648 <update_fsm+0x370>)
 8003494:	f006 fb7c 	bl	8009b90 <iprintf>
					printf("I_MAX %f \n\r", I_MAX);
 8003498:	68e0      	ldr	r0, [r4, #12]
 800349a:	f7fd f87d 	bl	8000598 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	486a      	ldr	r0, [pc, #424]	; (800364c <update_fsm+0x374>)
 80034a4:	f006 fb74 	bl	8009b90 <iprintf>
					printf("THETA_MIN %f \n\r", THETA_MIN);
 80034a8:	6920      	ldr	r0, [r4, #16]
 80034aa:	f7fd f875 	bl	8000598 <__aeabi_f2d>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4867      	ldr	r0, [pc, #412]	; (8003650 <update_fsm+0x378>)
 80034b4:	f006 fb6c 	bl	8009b90 <iprintf>
					printf("THETA_MAX %f \n\r", THETA_MAX);
 80034b8:	6960      	ldr	r0, [r4, #20]
 80034ba:	f7fd f86d 	bl	8000598 <__aeabi_f2d>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4864      	ldr	r0, [pc, #400]	; (8003654 <update_fsm+0x37c>)
 80034c4:	f006 fb64 	bl	8009b90 <iprintf>
					printf("I_FW_MAX %f \n\r", I_FW_MAX);
 80034c8:	69a0      	ldr	r0, [r4, #24]
 80034ca:	f7fd f865 	bl	8000598 <__aeabi_f2d>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4861      	ldr	r0, [pc, #388]	; (8003658 <update_fsm+0x380>)
 80034d4:	f006 fb5c 	bl	8009b90 <iprintf>
					printf("R_NOMINAL %f \n\r", R_NOMINAL);
 80034d8:	69e0      	ldr	r0, [r4, #28]
 80034da:	f7fd f85d 	bl	8000598 <__aeabi_f2d>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	485e      	ldr	r0, [pc, #376]	; (800365c <update_fsm+0x384>)
 80034e4:	f006 fb54 	bl	8009b90 <iprintf>
					printf("TEMP_MAX %f \n\r", TEMP_MAX);
 80034e8:	6a20      	ldr	r0, [r4, #32]
 80034ea:	f7fd f855 	bl	8000598 <__aeabi_f2d>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	485b      	ldr	r0, [pc, #364]	; (8003660 <update_fsm+0x388>)
 80034f4:	f006 fb4c 	bl	8009b90 <iprintf>
					printf("I_MAX_CONT %f \n\r", I_MAX_CONT);
 80034f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80034fa:	f7fd f84d 	bl	8000598 <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4858      	ldr	r0, [pc, #352]	; (8003664 <update_fsm+0x38c>)
 8003504:	f006 fb44 	bl	8009b90 <iprintf>
					printf("PPAIRS %f \n\r", PPAIRS);
 8003508:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800350a:	f7fd f845 	bl	8000598 <__aeabi_f2d>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4855      	ldr	r0, [pc, #340]	; (8003668 <update_fsm+0x390>)
 8003514:	f006 fb3c 	bl	8009b90 <iprintf>
					printf("R_PHASE %f \n\r", R_PHASE);
 8003518:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800351a:	f7fd f83d 	bl	8000598 <__aeabi_f2d>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4852      	ldr	r0, [pc, #328]	; (800366c <update_fsm+0x394>)
 8003524:	f006 fb34 	bl	8009b90 <iprintf>
					printf("KT %f \n\r", KT);
 8003528:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800352a:	f7fd f835 	bl	8000598 <__aeabi_f2d>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	484f      	ldr	r0, [pc, #316]	; (8003670 <update_fsm+0x398>)
 8003534:	f006 fb2c 	bl	8009b90 <iprintf>
					printf("C_TH %f \n\r", C_TH);
 8003538:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800353a:	f7fd f82d 	bl	8000598 <__aeabi_f2d>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	484c      	ldr	r0, [pc, #304]	; (8003674 <update_fsm+0x39c>)
 8003544:	f006 fb24 	bl	8009b90 <iprintf>
					printf("GR %f \n\r", GR);
 8003548:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800354a:	f7fd f825 	bl	8000598 <__aeabi_f2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4849      	ldr	r0, [pc, #292]	; (8003678 <update_fsm+0x3a0>)
 8003554:	f006 fb1c 	bl	8009b90 <iprintf>
					printf("I_CAL %f \n\r", I_CAL);
 8003558:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800355a:	f7fd f81d 	bl	8000598 <__aeabi_f2d>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4846      	ldr	r0, [pc, #280]	; (800367c <update_fsm+0x3a4>)
 8003564:	f006 fb14 	bl	8009b90 <iprintf>
					printf("P_MIN %f \n\r", P_MIN);
 8003568:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800356a:	f7fd f815 	bl	8000598 <__aeabi_f2d>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4843      	ldr	r0, [pc, #268]	; (8003680 <update_fsm+0x3a8>)
 8003574:	f006 fb0c 	bl	8009b90 <iprintf>
					printf("P_MAX %f \n\r", P_MAX);
 8003578:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800357a:	f7fd f80d 	bl	8000598 <__aeabi_f2d>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4840      	ldr	r0, [pc, #256]	; (8003684 <update_fsm+0x3ac>)
 8003584:	f006 fb04 	bl	8009b90 <iprintf>
					printf("V_MIN %f \n\r", V_MIN);
 8003588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800358a:	f7fd f805 	bl	8000598 <__aeabi_f2d>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	483d      	ldr	r0, [pc, #244]	; (8003688 <update_fsm+0x3b0>)
 8003594:	f006 fafc 	bl	8009b90 <iprintf>
					printf("V_MAX %f \n\r", V_MAX);
 8003598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800359a:	f7fc fffd 	bl	8000598 <__aeabi_f2d>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	483a      	ldr	r0, [pc, #232]	; (800368c <update_fsm+0x3b4>)
 80035a4:	f006 faf4 	bl	8009b90 <iprintf>
					printf("KP_MAX %f \n\r", KP_MAX);
 80035a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80035aa:	f7fc fff5 	bl	8000598 <__aeabi_f2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4837      	ldr	r0, [pc, #220]	; (8003690 <update_fsm+0x3b8>)
 80035b4:	f006 faec 	bl	8009b90 <iprintf>
					printf("KD_MAX %f \n\r", KD_MAX);
 80035b8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80035ba:	f7fc ffed 	bl	8000598 <__aeabi_f2d>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4834      	ldr	r0, [pc, #208]	; (8003694 <update_fsm+0x3bc>)
 80035c4:	f006 fae4 	bl	8009b90 <iprintf>
 }
 80035c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					printf("----------------\n\r");
 80035cc:	4832      	ldr	r0, [pc, #200]	; (8003698 <update_fsm+0x3c0>)
 80035ce:	f006 badf 	b.w	8009b90 <iprintf>
 80035d2:	bf00      	nop
 80035d4:	200003e8 	.word	0x200003e8
 80035d8:	0800e204 	.word	0x0800e204
 80035dc:	20008f3c 	.word	0x20008f3c
 80035e0:	387ba882 	.word	0x387ba882
 80035e4:	0800e220 	.word	0x0800e220
 80035e8:	2000068c 	.word	0x2000068c
 80035ec:	447a0000 	.word	0x447a0000
 80035f0:	41a80000 	.word	0x41a80000
 80035f4:	41480000 	.word	0x41480000
 80035f8:	42200000 	.word	0x42200000
 80035fc:	42fa0000 	.word	0x42fa0000
 8003600:	c1480000 	.word	0xc1480000
 8003604:	42820000 	.word	0x42820000
 8003608:	c2820000 	.word	0xc2820000
 800360c:	40a00000 	.word	0x40a00000
 8003610:	43fa0000 	.word	0x43fa0000
 8003614:	0800e248 	.word	0x0800e248
 8003618:	0800e280 	.word	0x0800e280
 800361c:	0800e2a8 	.word	0x0800e2a8
 8003620:	0800e27c 	.word	0x0800e27c
 8003624:	0800e294 	.word	0x0800e294
 8003628:	0800e2ac 	.word	0x0800e2ac
 800362c:	0800e2c0 	.word	0x0800e2c0
 8003630:	0800e2d4 	.word	0x0800e2d4
 8003634:	0800e2e4 	.word	0x0800e2e4
 8003638:	0800e2f8 	.word	0x0800e2f8
 800363c:	0800e30c 	.word	0x0800e30c
 8003640:	0800e31c 	.word	0x0800e31c
 8003644:	0800e32c 	.word	0x0800e32c
 8003648:	0800e340 	.word	0x0800e340
 800364c:	0800e34c 	.word	0x0800e34c
 8003650:	0800e358 	.word	0x0800e358
 8003654:	0800e368 	.word	0x0800e368
 8003658:	0800e378 	.word	0x0800e378
 800365c:	0800e388 	.word	0x0800e388
 8003660:	0800e398 	.word	0x0800e398
 8003664:	0800e3a8 	.word	0x0800e3a8
 8003668:	0800e3bc 	.word	0x0800e3bc
 800366c:	0800e3cc 	.word	0x0800e3cc
 8003670:	0800e3dc 	.word	0x0800e3dc
 8003674:	0800e3e8 	.word	0x0800e3e8
 8003678:	0800e3f4 	.word	0x0800e3f4
 800367c:	0800e400 	.word	0x0800e400
 8003680:	0800e40c 	.word	0x0800e40c
 8003684:	0800e418 	.word	0x0800e418
 8003688:	0800e424 	.word	0x0800e424
 800368c:	0800e430 	.word	0x0800e430
 8003690:	0800e43c 	.word	0x0800e43c
 8003694:	0800e44c 	.word	0x0800e44c
 8003698:	0800e45c 	.word	0x0800e45c

0800369c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369e:	2400      	movs	r4, #0
{
 80036a0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80036a6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036aa:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <MX_GPIO_Init+0xcc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80036b0:	4f2e      	ldr	r7, [pc, #184]	; (800376c <MX_GPIO_Init+0xd0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80036b2:	4e2f      	ldr	r6, [pc, #188]	; (8003770 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036b4:	f042 0220 	orr.w	r2, r2, #32
 80036b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80036ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036bc:	f002 0220 	and.w	r2, r2, #32
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c6:	f042 0204 	orr.w	r2, r2, #4
 80036ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80036cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ce:	f002 0204 	and.w	r2, r2, #4
 80036d2:	9201      	str	r2, [sp, #4]
 80036d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80036de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036e0:	f002 0201 	and.w	r2, r2, #1
 80036e4:	9202      	str	r2, [sp, #8]
 80036e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ea:	f042 0202 	orr.w	r2, r2, #2
 80036ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80036f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80036f8:	4622      	mov	r2, r4
 80036fa:	4638      	mov	r0, r7
 80036fc:	210c      	movs	r1, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003700:	f002 fd74 	bl	80061ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8003704:	4622      	mov	r2, r4
 8003706:	f648 0110 	movw	r1, #34832	; 0x8810
 800370a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370e:	f002 fd6d 	bl	80061ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003712:	4622      	mov	r2, r4
 8003714:	4630      	mov	r0, r6
 8003716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800371a:	f002 fd67 	bl	80061ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800371e:	2400      	movs	r4, #0
 8003720:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003722:	4638      	mov	r0, r7
 8003724:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003726:	220c      	movs	r2, #12
 8003728:	2301      	movs	r3, #1
 800372a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800372e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003732:	f002 fc67 	bl	8006004 <HAL_GPIO_Init>
  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003738:	f648 0210 	movw	r2, #34832	; 0x8810
 800373c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003746:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374a:	f002 fc5b 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800374e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003752:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003754:	a904      	add	r1, sp, #16
 8003756:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003758:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800375c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003760:	f002 fc50 	bl	8006004 <HAL_GPIO_Init>

}
 8003764:	b00b      	add	sp, #44	; 0x2c
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	48000800 	.word	0x48000800
 8003770:	48000400 	.word	0x48000400

08003774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003774:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003776:	2100      	movs	r1, #0
{
 8003778:	b0ab      	sub	sp, #172	; 0xac
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800377a:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800377c:	a806      	add	r0, sp, #24
 800377e:	2238      	movs	r2, #56	; 0x38
 8003780:	f005 fd94 	bl	80092ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003784:	4621      	mov	r1, r4
 8003786:	2254      	movs	r2, #84	; 0x54
 8003788:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800378a:	e9cd 4400 	strd	r4, r4, [sp]
 800378e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003792:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003794:	f005 fd8a 	bl	80092ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003798:	4620      	mov	r0, r4
 800379a:	f002 fd2d 	bl	80061f8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800379e:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037a0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037a2:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 80037a4:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037a6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037a8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80037ac:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037b0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037b4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80037b6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037b8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037ba:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 85;
 80037bc:	9210      	str	r2, [sp, #64]	; 0x40
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037be:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c0:	f002 fda0 	bl	8006304 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037c4:	2703      	movs	r7, #3
 80037c6:	2200      	movs	r2, #0
 80037c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037cc:	4668      	mov	r0, sp
 80037ce:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80037d4:	e9cd 6700 	strd	r6, r7, [sp]
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80037d8:	4d09      	ldr	r5, [pc, #36]	; (8003800 <SystemClock_Config+0x8c>)
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037da:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037dc:	f003 f816 	bl	800680c <HAL_RCC_ClockConfig>
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80037e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80037e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80037e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ec:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80037ee:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037f2:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80037f4:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80037f6:	9123      	str	r1, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f8:	f003 f93e 	bl	8006a78 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80037fc:	b02b      	add	sp, #172	; 0xac
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003800:	00019002 	.word	0x00019002
 8003804:	00000000 	.word	0x00000000

08003808 <main>:
{
 8003808:	b580      	push	{r7, lr}
  if(E_ZERO==-1){E_ZERO = 0;}
 800380a:	f8df 83c8 	ldr.w	r8, [pc, #968]	; 8003bd4 <main+0x3cc>
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800380e:	4fd6      	ldr	r7, [pc, #856]	; (8003b68 <main+0x360>)
  init_controller_params(&controller);
 8003810:	4dd6      	ldr	r5, [pc, #856]	; (8003b6c <main+0x364>)
  comm_encoder.m_zero = M_ZERO;
 8003812:	f8df 93c4 	ldr.w	r9, [pc, #964]	; 8003bd8 <main+0x3d0>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003816:	4cd6      	ldr	r4, [pc, #856]	; (8003b70 <main+0x368>)
  state.state = MENU_MODE;
 8003818:	4ed6      	ldr	r6, [pc, #856]	; (8003b74 <main+0x36c>)
{
 800381a:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800381c:	f000 fff2 	bl	8004804 <HAL_Init>
  SystemClock_Config();
 8003820:	f7ff ffa8 	bl	8003774 <SystemClock_Config>
  MX_GPIO_Init();
 8003824:	f7ff ff3a 	bl	800369c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003828:	f7fd fc08 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 800382c:	f7fe fac6 	bl	8001dbc <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8003830:	f000 fc14 	bl	800405c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003834:	f000 fefa 	bl	800462c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8003838:	f000 fc38 	bl	80040ac <MX_SPI3_Init>
  MX_TIM1_Init();
 800383c:	f000 fe14 	bl	8004468 <MX_TIM1_Init>
  MX_ADC2_Init();
 8003840:	f7fd fc4e 	bl	80010e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003844:	f7fd fc94 	bl	8001170 <MX_ADC3_Init>
    load_from_flash();
 8003848:	f7fe fbc2 	bl	8001fd0 <load_from_flash>
  if(E_ZERO==-1){E_ZERO = 0;}
 800384c:	f8d8 3014 	ldr.w	r3, [r8, #20]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003850:	ed97 7a02 	vldr	s14, [r7, #8]
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8003854:	48c8      	ldr	r0, [pc, #800]	; (8003b78 <main+0x370>)
  if(E_ZERO==-1){E_ZERO = 0;}
 8003856:	3301      	adds	r3, #1
 8003858:	bf04      	itt	eq
 800385a:	2300      	moveq	r3, #0
 800385c:	f8c8 3014 	streq.w	r3, [r8, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003860:	f8d8 3010 	ldr.w	r3, [r8, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003864:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(M_ZERO==-1){M_ZERO = 0;}
 8003868:	3301      	adds	r3, #1
 800386a:	bf08      	it	eq
 800386c:	2300      	moveq	r3, #0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800386e:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003872:	ed97 7a03 	vldr	s14, [r7, #12]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003876:	bf08      	it	eq
 8003878:	f8c8 3010 	streq.w	r3, [r8, #16]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800387c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	bf04      	itt	eq
 8003886:	4bbd      	ldreq	r3, [pc, #756]	; (8003b7c <main+0x374>)
 8003888:	60bb      	streq	r3, [r7, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800388a:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 800388e:	ed97 7a06 	vldr	s14, [r7, #24]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003896:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 800389a:	bf04      	itt	eq
 800389c:	4bb8      	ldreq	r3, [pc, #736]	; (8003b80 <main+0x378>)
 800389e:	60fb      	streq	r3, [r7, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 80038a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80038a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a8:	bf04      	itt	eq
 80038aa:	2300      	moveq	r3, #0
 80038ac:	61bb      	streq	r3, [r7, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 80038ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80038b2:	ed97 7a07 	vldr	s14, [r7, #28]
  if(CAN_ID==-1){CAN_ID = 1;}
 80038b6:	3301      	adds	r3, #1
 80038b8:	bf04      	itt	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	f8c8 3004 	streq.w	r3, [r8, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80038c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80038c4:	3301      	adds	r3, #1
 80038c6:	bf04      	itt	eq
 80038c8:	2300      	moveq	r3, #0
 80038ca:	f8c8 3008 	streq.w	r3, [r8, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80038ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80038d2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80038d6:	3301      	adds	r3, #1
 80038d8:	bf08      	it	eq
 80038da:	f44f 737a 	moveq.w	r3, #1000	; 0x3e8
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80038de:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80038e2:	ed97 7a08 	vldr	s14, [r7, #32]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80038e6:	bf08      	it	eq
 80038e8:	f8c8 300c 	streq.w	r3, [r8, #12]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80038ec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80038f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f4:	bf08      	it	eq
 80038f6:	2300      	moveq	r3, #0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80038f8:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80038fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003900:	bf08      	it	eq
 8003902:	61fb      	streq	r3, [r7, #28]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003904:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	bf04      	itt	eq
 800390e:	4b9d      	ldreq	r3, [pc, #628]	; (8003b84 <main+0x37c>)
 8003910:	623b      	streq	r3, [r7, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003912:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003916:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 800391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800391e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003922:	bf04      	itt	eq
 8003924:	4b98      	ldreq	r3, [pc, #608]	; (8003b88 <main+0x380>)
 8003926:	627b      	streq	r3, [r7, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003928:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800392c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003934:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8003938:	bf04      	itt	eq
 800393a:	4b94      	ldreq	r3, [pc, #592]	; (8003b8c <main+0x384>)
 800393c:	64bb      	streq	r3, [r7, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800393e:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003942:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800394a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800394e:	bf04      	itt	eq
 8003950:	4b8f      	ldreq	r3, [pc, #572]	; (8003b90 <main+0x388>)
 8003952:	62bb      	streq	r3, [r7, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003954:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003958:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800395c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003960:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003964:	bf08      	it	eq
 8003966:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800396a:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800396e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003972:	bf08      	it	eq
 8003974:	647b      	streq	r3, [r7, #68]	; 0x44
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003976:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	bf08      	it	eq
 8003980:	f04f 537e 	moveq.w	r3, #1065353216	; 0x3f800000
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003984:	eeb4 7a67 	vcmp.f32	s14, s15
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003988:	bf08      	it	eq
 800398a:	63bb      	streq	r3, [r7, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003990:	bf04      	itt	eq
 8003992:	4b80      	ldreq	r3, [pc, #512]	; (8003b94 <main+0x38c>)
 8003994:	65fb      	streq	r3, [r7, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8003996:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800399a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800399e:	eeb4 7a67 	vcmp.f32	s14, s15
 80039a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a6:	bf04      	itt	eq
 80039a8:	4b78      	ldreq	r3, [pc, #480]	; (8003b8c <main+0x384>)
 80039aa:	663b      	streq	r3, [r7, #96]	; 0x60
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 80039ac:	a36c      	add	r3, pc, #432	; (adr r3, 8003b60 <main+0x358>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f006 f8ed 	bl	8009b90 <iprintf>
  init_controller_params(&controller);
 80039b6:	4628      	mov	r0, r5
 80039b8:	f7fe fd42 	bl	8002440 <init_controller_params>
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80039bc:	f44f 7224 	mov.w	r2, #656	; 0x290
 80039c0:	2100      	movs	r1, #0
 80039c2:	4875      	ldr	r0, [pc, #468]	; (8003b98 <main+0x390>)
 80039c4:	f005 fc72 	bl	80092ac <memset>
  comm_encoder.m_zero = M_ZERO;
 80039c8:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
  comm_encoder.ppairs = PPAIRS;
 80039cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ce:	f8c9 1068 	str.w	r1, [r9, #104]	; 0x68
  comm_encoder.m_zero = M_ZERO;
 80039d2:	e9c9 2321 	strd	r2, r3, [r9, #132]	; 0x84
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 80039d6:	4648      	mov	r0, r9
 80039d8:	2164      	movs	r1, #100	; 0x64
 80039da:	f000 fa07 	bl	8003dec <ps_warmup>
  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 80039de:	496f      	ldr	r1, [pc, #444]	; (8003b9c <main+0x394>)
 80039e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e4:	f109 008c 	add.w	r0, r9, #140	; 0x8c
 80039e8:	f005 fc38 	bl	800925c <memcpy>
  HAL_ADC_Start(&hadc1);
 80039ec:	486c      	ldr	r0, [pc, #432]	; (8003ba0 <main+0x398>)
 80039ee:	f001 fb3b 	bl	8005068 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 80039f2:	486c      	ldr	r0, [pc, #432]	; (8003ba4 <main+0x39c>)
 80039f4:	f001 fb38 	bl	8005068 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80039f8:	486b      	ldr	r0, [pc, #428]	; (8003ba8 <main+0x3a0>)
 80039fa:	f001 fb35 	bl	8005068 <HAL_ADC_Start>
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 80039fe:	2201      	movs	r2, #1
 8003a00:	2110      	movs	r1, #16
 8003a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a06:	f002 fbf1 	bl	80061ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003a14:	f04f 0901 	mov.w	r9, #1
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8003a18:	f002 fbe8 	bl	80061ec <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003a1c:	2001      	movs	r0, #1
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003a1e:	f04f 0800 	mov.w	r8, #0
  HAL_Delay(1);
 8003a22:	f000 ff11 	bl	8004848 <HAL_Delay>
  HAL_Delay(1);
 8003a26:	4648      	mov	r0, r9
 8003a28:	f000 ff0e 	bl	8004848 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003a2c:	88a1      	ldrh	r1, [r4, #4]
 8003a2e:	6820      	ldr	r0, [r4, #0]
 8003a30:	f8cd 9018 	str.w	r9, [sp, #24]
 8003a34:	4643      	mov	r3, r8
 8003a36:	4642      	mov	r2, r8
 8003a38:	e9cd 8804 	strd	r8, r8, [sp, #16]
 8003a3c:	e9cd 8802 	strd	r8, r8, [sp, #8]
 8003a40:	f8cd 9004 	str.w	r9, [sp, #4]
 8003a44:	f8cd 8000 	str.w	r8, [sp]
 8003a48:	f7fd ff4e 	bl	80018e8 <drv_write_DCR>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8003a4c:	2703      	movs	r7, #3
  HAL_Delay(1);
 8003a4e:	4648      	mov	r0, r9
 8003a50:	f000 fefa 	bl	8004848 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 8003a54:	88a1      	ldrh	r1, [r4, #4]
 8003a56:	6820      	ldr	r0, [r4, #0]
 8003a58:	9706      	str	r7, [sp, #24]
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	9701      	str	r7, [sp, #4]
 8003a60:	e9cd 9904 	strd	r9, r9, [sp, #16]
 8003a64:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003a68:	f8cd 8000 	str.w	r8, [sp]
 8003a6c:	f7fd ffac 	bl	80019c8 <drv_write_CSACR>
  HAL_Delay(1);
 8003a70:	4648      	mov	r0, r9
 8003a72:	f000 fee9 	bl	8004848 <HAL_Delay>
  zero_current(&controller);
 8003a76:	4628      	mov	r0, r5
 8003a78:	f7fe fc68 	bl	800234c <zero_current>
  HAL_Delay(1);
 8003a7c:	4648      	mov	r0, r9
 8003a7e:	f000 fee3 	bl	8004848 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8003a82:	88a1      	ldrh	r1, [r4, #4]
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	f8cd 8000 	str.w	r8, [sp]
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	e9cd 8705 	strd	r8, r7, [sp, #20]
 8003a92:	e9cd 7901 	strd	r7, r9, [sp, #4]
 8003a96:	e9cd 8803 	strd	r8, r8, [sp, #12]
 8003a9a:	f7fd ff95 	bl	80019c8 <drv_write_CSACR>
  HAL_Delay(1);
 8003a9e:	4648      	mov	r0, r9
 8003aa0:	f000 fed2 	bl	8004848 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 8003aa4:	f04f 0c0e 	mov.w	ip, #14
 8003aa8:	f8cd c008 	str.w	ip, [sp, #8]
 8003aac:	4643      	mov	r3, r8
 8003aae:	464a      	mov	r2, r9
 8003ab0:	88a1      	ldrh	r1, [r4, #4]
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	e9cd 7700 	strd	r7, r7, [sp]
 8003ab8:	f7fd ff54 	bl	8001964 <drv_write_OCPCR>
  HAL_Delay(1);
 8003abc:	4648      	mov	r0, r9
 8003abe:	f000 fec3 	bl	8004848 <HAL_Delay>
  drv_disable_gd(drv);
 8003ac2:	88a1      	ldrh	r1, [r4, #4]
 8003ac4:	6820      	ldr	r0, [r4, #0]
	  	  printf("%.2f %.2f %.2f %.2f %.2f %.2f\r\n", controller.i_a, controller.i_b, controller.i_d, controller.i_q, controller.dtheta_elec, controller.dtheta_mech);
 8003ac6:	4f39      	ldr	r7, [pc, #228]	; (8003bac <main+0x3a4>)
  drv_disable_gd(drv);
 8003ac8:	f7fe f80e 	bl	8001ae8 <drv_disable_gd>
  HAL_Delay(1);
 8003acc:	4648      	mov	r0, r9
 8003ace:	f000 febb 	bl	8004848 <HAL_Delay>
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 8003ad2:	e9d5 1224 	ldrd	r1, r2, [r5, #144]	; 0x90
 8003ad6:	4836      	ldr	r0, [pc, #216]	; (8003bb0 <main+0x3a8>)
 8003ad8:	f006 f85a 	bl	8009b90 <iprintf>
  HAL_GPIO_WritePin(LED1, 1 );
 8003adc:	4835      	ldr	r0, [pc, #212]	; (8003bb4 <main+0x3ac>)
 8003ade:	464a      	mov	r2, r9
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	f002 fb83 	bl	80061ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 1 );
 8003ae6:	464a      	mov	r2, r9
 8003ae8:	4832      	ldr	r0, [pc, #200]	; (8003bb4 <main+0x3ac>)
 8003aea:	2108      	movs	r1, #8
 8003aec:	f002 fb7e 	bl	80061ec <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003af0:	4641      	mov	r1, r8
 8003af2:	4831      	ldr	r0, [pc, #196]	; (8003bb8 <main+0x3b0>)
 8003af4:	f003 feb8 	bl	8007868 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003af8:	2104      	movs	r1, #4
 8003afa:	482f      	ldr	r0, [pc, #188]	; (8003bb8 <main+0x3b0>)
 8003afc:	f003 feb4 	bl	8007868 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003b00:	2108      	movs	r1, #8
 8003b02:	482d      	ldr	r0, [pc, #180]	; (8003bb8 <main+0x3b0>)
 8003b04:	f003 feb0 	bl	8007868 <HAL_TIM_PWM_Start>
  can_rx_init(&can_rx);
 8003b08:	482c      	ldr	r0, [pc, #176]	; (8003bbc <main+0x3b4>)
 8003b0a:	f7fe f9b9 	bl	8001e80 <can_rx_init>
  can_tx_init(&can_tx);
 8003b0e:	482c      	ldr	r0, [pc, #176]	; (8003bc0 <main+0x3b8>)
 8003b10:	f7fe f9d8 	bl	8001ec4 <can_tx_init>
  HAL_FDCAN_Start(&CAN_H);
 8003b14:	482b      	ldr	r0, [pc, #172]	; (8003bc4 <main+0x3bc>)
 8003b16:	f001 fe9d 	bl	8005854 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8003b1a:	4642      	mov	r2, r8
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	4829      	ldr	r0, [pc, #164]	; (8003bc4 <main+0x3bc>)
 8003b20:	f001 ff2e 	bl	8005980 <HAL_FDCAN_ActivateNotification>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <main+0x3c0>)
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003b26:	4929      	ldr	r1, [pc, #164]	; (8003bcc <main+0x3c4>)
  state.ready = 1;
 8003b28:	f886 9003 	strb.w	r9, [r6, #3]
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	2030      	movs	r0, #48	; 0x30
 8003b30:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8003b34:	f883 0356 	strb.w	r0, [r3, #854]	; 0x356
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003b38:	464a      	mov	r2, r9
 8003b3a:	4825      	ldr	r0, [pc, #148]	; (8003bd0 <main+0x3c8>)
  state.state = MENU_MODE;
 8003b3c:	f886 8000 	strb.w	r8, [r6]
  state.next_state = MENU_MODE;
 8003b40:	f886 8001 	strb.w	r8, [r6, #1]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003b44:	f004 fb18 	bl	8008178 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003b48:	481b      	ldr	r0, [pc, #108]	; (8003bb8 <main+0x3b0>)
 8003b4a:	f003 fdb1 	bl	80076b0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LED1, 0 );
 8003b4e:	4819      	ldr	r0, [pc, #100]	; (8003bb4 <main+0x3ac>)
 8003b50:	4642      	mov	r2, r8
 8003b52:	2104      	movs	r1, #4
 8003b54:	f002 fb4a 	bl	80061ec <HAL_GPIO_WritePin>
 8003b58:	e040      	b.n	8003bdc <main+0x3d4>
 8003b5a:	bf00      	nop
 8003b5c:	f3af 8000 	nop.w
 8003b60:	c0000000 	.word	0xc0000000
 8003b64:	4000cccc 	.word	0x4000cccc
 8003b68:	2000068c 	.word	0x2000068c
 8003b6c:	2000078c 	.word	0x2000078c
 8003b70:	20009368 	.word	0x20009368
 8003b74:	2000067c 	.word	0x2000067c
 8003b78:	0800e470 	.word	0x0800e470
 8003b7c:	447a0000 	.word	0x447a0000
 8003b80:	42200000 	.word	0x42200000
 8003b84:	42fa0000 	.word	0x42fa0000
 8003b88:	41600000 	.word	0x41600000
 8003b8c:	40a00000 	.word	0x40a00000
 8003b90:	41a80000 	.word	0x41a80000
 8003b94:	43fa0000 	.word	0x43fa0000
 8003b98:	20008cac 	.word	0x20008cac
 8003b9c:	20008f54 	.word	0x20008f54
 8003ba0:	200002a8 	.word	0x200002a8
 8003ba4:	2000023c 	.word	0x2000023c
 8003ba8:	20000314 	.word	0x20000314
 8003bac:	0800e4bc 	.word	0x0800e4bc
 8003bb0:	0800e494 	.word	0x0800e494
 8003bb4:	48000800 	.word	0x48000800
 8003bb8:	200094b0 	.word	0x200094b0
 8003bbc:	20009370 	.word	0x20009370
 8003bc0:	2000933c 	.word	0x2000933c
 8003bc4:	20000380 	.word	0x20000380
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	20000678 	.word	0x20000678
 8003bd0:	200094fc 	.word	0x200094fc
 8003bd4:	20008f3c 	.word	0x20008f3c
 8003bd8:	200003e8 	.word	0x200003e8
  HAL_GPIO_WritePin(LED2, 0 );
 8003bdc:	481e      	ldr	r0, [pc, #120]	; (8003c58 <main+0x450>)
 8003bde:	4642      	mov	r2, r8
 8003be0:	2108      	movs	r1, #8
 8003be2:	f002 fb03 	bl	80061ec <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8003be6:	2064      	movs	r0, #100	; 0x64
 8003be8:	f000 fe2e 	bl	8004848 <HAL_Delay>
	  if(! DRV_DISABLED ) drv_print_faults(drv);
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	88a1      	ldrh	r1, [r4, #4]
 8003bf0:	f7fd ffcc 	bl	8001b8c <drv_print_faults>
	  if(state.state==MOTOR_MODE){
 8003bf4:	7833      	ldrb	r3, [r6, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d1f5      	bne.n	8003be6 <main+0x3de>
	  	  printf("%.2f %.2f %.2f %.2f %.2f %.2f\r\n", controller.i_a, controller.i_b, controller.i_d, controller.i_q, controller.dtheta_elec, controller.dtheta_mech);
 8003bfa:	6968      	ldr	r0, [r5, #20]
 8003bfc:	f7fc fccc 	bl	8000598 <__aeabi_f2d>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003c06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c0a:	f7fc fcc5 	bl	8000598 <__aeabi_f2d>
 8003c0e:	4680      	mov	r8, r0
 8003c10:	4689      	mov	r9, r1
 8003c12:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003c14:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003c18:	f7fc fcbe 	bl	8000598 <__aeabi_f2d>
 8003c1c:	4680      	mov	r8, r0
 8003c1e:	4689      	mov	r9, r1
 8003c20:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003c22:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003c26:	f7fc fcb7 	bl	8000598 <__aeabi_f2d>
 8003c2a:	4680      	mov	r8, r0
 8003c2c:	4689      	mov	r9, r1
 8003c2e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003c30:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003c34:	f7fc fcb0 	bl	8000598 <__aeabi_f2d>
 8003c38:	4680      	mov	r8, r0
 8003c3a:	4689      	mov	r9, r1
 8003c3c:	69a8      	ldr	r0, [r5, #24]
 8003c3e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003c42:	f7fc fca9 	bl	8000598 <__aeabi_f2d>
 8003c46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f005 ff9e 	bl	8009b90 <iprintf>
 8003c54:	e7c7      	b.n	8003be6 <main+0x3de>
 8003c56:	bf00      	nop
 8003c58:	48000800 	.word	0x48000800

08003c5c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop

08003c60 <fast_fmaxf>:
#include "lookup.h"


float fast_fmaxf(float x, float y){
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8003c60:	eef4 0ac0 	vcmpe.f32	s1, s0
 8003c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 8003c68:	bfa8      	it	ge
 8003c6a:	eeb0 0a60 	vmovge.f32	s0, s1
 8003c6e:	4770      	bx	lr

08003c70 <fast_fminf>:

float fast_fminf(float x, float y){
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8003c70:	eef4 0ac0 	vcmpe.f32	s1, s0
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
 8003c78:	bf98      	it	ls
 8003c7a:	eeb0 0a60 	vmovls.f32	s0, s1
 8003c7e:	4770      	bx	lr

08003c80 <fmaxf3>:

float fmaxf3(float x, float y, float z){
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8003c80:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c88:	dd07      	ble.n	8003c9a <fmaxf3+0x1a>
 8003c8a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c92:	bfb8      	it	lt
 8003c94:	eeb0 0a41 	vmovlt.f32	s0, s2
 8003c98:	4770      	bx	lr
 8003c9a:	eef4 0ac1 	vcmpe.f32	s1, s2
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	bfb4      	ite	lt
 8003ca4:	eeb0 0a41 	vmovlt.f32	s0, s2
 8003ca8:	eeb0 0a60 	vmovge.f32	s0, s1
    }
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop

08003cb0 <fminf3>:

float fminf3(float x, float y, float z){
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8003cb0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb8:	d507      	bpl.n	8003cca <fminf3+0x1a>
 8003cba:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	bf88      	it	hi
 8003cc4:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003cc8:	4770      	bx	lr
 8003cca:	eef4 0ac1 	vcmpe.f32	s1, s2
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	bf8c      	ite	hi
 8003cd4:	eeb0 0a41 	vmovhi.f32	s0, s2
 8003cd8:	eeb0 0a60 	vmovls.f32	s0, s1
    }
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <limit_norm>:
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8003ce0:	edd1 7a00 	vldr	s15, [r1]
 8003ce4:	ed90 7a00 	vldr	s14, [r0]
 8003ce8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cec:	eee7 7a07 	vfma.f32	s15, s14, s14
 8003cf0:	eef1 6ae7 	vsqrt.f32	s13, s15
    if(norm > limit){
 8003cf4:	eef4 6ac0 	vcmpe.f32	s13, s0
 8003cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfc:	dd0d      	ble.n	8003d1a <limit_norm+0x3a>
        *x = *x * limit/norm;
 8003cfe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d06:	edc0 7a00 	vstr	s15, [r0]
        *y = *y * limit/norm;
 8003d0a:	edd1 7a00 	vldr	s15, [r1]
 8003d0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003d12:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8003d16:	edc1 7a00 	vstr	s15, [r1]
        }
    }
 8003d1a:	4770      	bx	lr

08003d1c <uint_to_float>:
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	ee07 0a90 	vmov	s15, r0
 8003d22:	fa03 f101 	lsl.w	r1, r3, r1
 8003d26:	3901      	subs	r1, #1
 8003d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float span = x_max - x_min;
 8003d2c:	ee70 0ac0 	vsub.f32	s1, s1, s0
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8003d30:	ee07 1a90 	vmov	s15, r1
 8003d34:	ee67 0a20 	vmul.f32	s1, s14, s1
 8003d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d3c:	ee80 7aa7 	vdiv.f32	s14, s1, s15
    }
 8003d40:	ee37 0a00 	vadd.f32	s0, s14, s0
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop

08003d48 <sin_lut>:

float sin_lut(float theta){
 8003d48:	b508      	push	{r3, lr}
 8003d4a:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 8003d4e:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 8003d88 <sin_lut+0x40>
 8003d52:	eef0 0a48 	vmov.f32	s1, s16
 8003d56:	f009 fc1d 	bl	800d594 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8003d5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d62:	bf48      	it	mi
 8003d64:	ee30 0a08 	vaddmi.f32	s0, s0, s16

	return sin_tab[(int) (LUT_MULT*theta)];
 8003d68:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003d8c <sin_lut+0x44>
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <sin_lut+0x48>)
 8003d6e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8003d72:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8003d76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003d7a:	ee10 2a10 	vmov	r2, s0
 8003d7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8003d82:	ed93 0a00 	vldr	s0, [r3]
 8003d86:	bd08      	pop	{r3, pc}
 8003d88:	40c90fdb 	.word	0x40c90fdb
 8003d8c:	42a2f983 	.word	0x42a2f983
 8003d90:	0800e4dc 	.word	0x0800e4dc

08003d94 <cos_lut>:

float cos_lut(float theta){
 8003d94:	b508      	push	{r3, lr}
	return sin_lut(PI_OVER_2_F - theta);
 8003d96:	eddf 7a11 	vldr	s15, [pc, #68]	; 8003ddc <cos_lut+0x48>
float cos_lut(float theta){
 8003d9a:	ed2d 8b02 	vpush	{d8}
	theta = fmodf(theta, TWO_PI_F);
 8003d9e:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8003de0 <cos_lut+0x4c>
 8003da2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003da6:	eef0 0a48 	vmov.f32	s1, s16
 8003daa:	f009 fbf3 	bl	800d594 <fmodf>
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8003dae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db6:	bf48      	it	mi
 8003db8:	ee30 0a08 	vaddmi.f32	s0, s0, s16
	return sin_tab[(int) (LUT_MULT*theta)];
 8003dbc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003de4 <cos_lut+0x50>
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <cos_lut+0x54>)
 8003dc2:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8003dc6:	ecbd 8b02 	vpop	{d8}
	return sin_tab[(int) (LUT_MULT*theta)];
 8003dca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003dce:	ee10 2a10 	vmov	r2, s0
 8003dd2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8003dd6:	ed93 0a00 	vldr	s0, [r3]
 8003dda:	bd08      	pop	{r3, pc}
 8003ddc:	3fc90fdb 	.word	0x3fc90fdb
 8003de0:	40c90fdb 	.word	0x40c90fdb
 8003de4:	42a2f983 	.word	0x42a2f983
 8003de8:	0800e4dc 	.word	0x0800e4dc

08003dec <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8003dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8003df0:	1e0f      	subs	r7, r1, #0
void ps_warmup(EncoderStruct * encoder, int n){
 8003df2:	b082      	sub	sp, #8
	for(int i = 0; i<n; i++){
 8003df4:	dd22      	ble.n	8003e3c <ps_warmup+0x50>
 8003df6:	4c13      	ldr	r4, [pc, #76]	; (8003e44 <ps_warmup+0x58>)
 8003df8:	4606      	mov	r6, r0
 8003dfa:	f100 0802 	add.w	r8, r0, #2
 8003dfe:	2500      	movs	r5, #0
		encoder->spi_tx_word = 0x0000;
 8003e00:	2200      	movs	r2, #0
 8003e02:	8032      	strh	r2, [r6, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8003e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e0c:	f002 f9ee 	bl	80061ec <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8003e10:	2364      	movs	r3, #100	; 0x64
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	480b      	ldr	r0, [pc, #44]	; (8003e44 <ps_warmup+0x58>)
 8003e16:	2301      	movs	r3, #1
 8003e18:	4642      	mov	r2, r8
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	f003 f93e 	bl	800709c <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8003e20:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d0fb      	beq.n	8003e20 <ps_warmup+0x34>
	for(int i = 0; i<n; i++){
 8003e28:	3501      	adds	r5, #1
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e34:	f002 f9da 	bl	80061ec <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8003e38:	42af      	cmp	r7, r5
 8003e3a:	d1e1      	bne.n	8003e00 <ps_warmup+0x14>
	}
}
 8003e3c:	b002      	add	sp, #8
 8003e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e42:	bf00      	nop
 8003e44:	200093e8 	.word	0x200093e8

08003e48 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8003e48:	b530      	push	{r4, r5, lr}
 8003e4a:	ed2d 8b02 	vpush	{d8}
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8003e4e:	6843      	ldr	r3, [r0, #4]
 8003e50:	6083      	str	r3, [r0, #8]
void ps_sample(EncoderStruct * encoder, float dt){
 8003e52:	4604      	mov	r4, r0
 8003e54:	b083      	sub	sp, #12
 8003e56:	f100 010c 	add.w	r1, r0, #12
 8003e5a:	224c      	movs	r2, #76	; 0x4c
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8003e5c:	4625      	mov	r5, r4
 8003e5e:	3010      	adds	r0, #16
void ps_sample(EncoderStruct * encoder, float dt){
 8003e60:	eeb0 8a40 	vmov.f32	s16, s0
 8003e64:	f005 fa08 	bl	8009278 <memmove>
	encoder->spi_tx_word = ENC_READ_WORD;
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f825 2b02 	strh.w	r2, [r5], #2
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8003e6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e76:	f002 f9b9 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
 8003e7a:	2364      	movs	r3, #100	; 0x64
 8003e7c:	462a      	mov	r2, r5
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4854      	ldr	r0, [pc, #336]	; (8003fd4 <ps_sample+0x18c>)
 8003e82:	4621      	mov	r1, r4
 8003e84:	2302      	movs	r3, #2
 8003e86:	f003 f909 	bl	800709c <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8003e8a:	4a52      	ldr	r2, [pc, #328]	; (8003fd4 <ps_sample+0x18c>)
 8003e8c:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d0fb      	beq.n	8003e8c <ps_sample+0x44>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8003e94:	2201      	movs	r2, #1
 8003e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9e:	f002 f9a5 	bl	80061ec <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8003ea2:	8861      	ldrh	r1, [r4, #2]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
	encoder->count = encoder->raw + off_interp;

	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8003ea4:	4d4c      	ldr	r5, [pc, #304]	; (8003fd8 <ps_sample+0x190>)
	encoder->raw = encoder ->spi_rx_word;
 8003ea6:	6761      	str	r1, [r4, #116]	; 0x74
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003ea8:	124b      	asrs	r3, r1, #9
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8003eb8:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	int int_angle = encoder->angle_singleturn;
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003ec0:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003fdc <ps_sample+0x194>
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003ec4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8003fe0 <ps_sample+0x198>
	int_angle = (int)encoder->elec_angle;
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003ec8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003fdc <ps_sample+0x194>
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8003ecc:	1ac0      	subs	r0, r0, r3
 8003ece:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8003ed2:	fb02 f200 	mul.w	r2, r2, r0
 8003ed6:	eb03 2362 	add.w	r3, r3, r2, asr #9
	encoder->count = encoder->raw + off_interp;
 8003eda:	440b      	add	r3, r1
 8003edc:	67a3      	str	r3, [r4, #120]	; 0x78
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8003ede:	692a      	ldr	r2, [r5, #16]
 8003ee0:	1a9a      	subs	r2, r3, r2
 8003ee2:	ee07 2a10 	vmov	s14, r2
 8003ee6:	eeba 7ac8 	vcvt.f32.s32	s14, s14, #16
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003eea:	696a      	ldr	r2, [r5, #20]
	int int_angle = encoder->angle_singleturn;
 8003eec:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003ef0:	1a9b      	subs	r3, r3, r2
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003efa:	ee07 3a90 	vmov	s15, r3
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8003efe:	ee27 7a26 	vmul.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8003f06:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0e:	bf48      	it	mi
 8003f10:	ee37 7a26 	vaddmi.f32	s14, s14, s13
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003f14:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8003f18:	ed84 7a01 	vstr	s14, [r4, #4]
	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8003f1c:	ee26 6a86 	vmul.f32	s12, s13, s12
 8003f20:	ee67 7a86 	vmul.f32	s15, s15, s12
	int_angle = (int)encoder->elec_angle;
 8003f24:	eebd 6ae7 	vcvt.s32.f32	s12, s15
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003f28:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003f2c:	ee77 7ac6 	vsub.f32	s15, s15, s12
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
	/* Rollover */
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8003f30:	ed94 6a02 	vldr	s12, [r4, #8]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8003f34:	ee67 7aa5 	vmul.f32	s15, s15, s11
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8003f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f40:	bf48      	it	mi
 8003f42:	ee77 7aa5 	vaddmi.f32	s15, s15, s11
	if(angle_diff > PI_F){encoder->turns--;}
 8003f46:	eddf 5a27 	vldr	s11, [pc, #156]	; 8003fe4 <ps_sample+0x19c>
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8003f4a:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8003f4e:	ee77 7a46 	vsub.f32	s15, s14, s12
	if(angle_diff > PI_F){encoder->turns--;}
 8003f52:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	dd25      	ble.n	8003fa8 <ps_sample+0x160>
 8003f5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003f60:	3b01      	subs	r3, #1
 8003f62:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	else if(angle_diff < -PI_F){encoder->turns++;}
	if(!encoder->first_sample){
 8003f66:	f894 328c 	ldrb.w	r3, [r4, #652]	; 0x28c
 8003f6a:	b36b      	cbz	r3, 8003fc8 <ps_sample+0x180>
 8003f6c:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 8003f70:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8003fdc <ps_sample+0x194>
 8003f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f78:	eea7 7a86 	vfma.f32	s14, s15, s12
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003f7c:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
 8003f80:	eddf 7a19 	vldr	s15, [pc, #100]	; 8003fe8 <ps_sample+0x1a0>
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8003f84:	ed84 7a03 	vstr	s14, [r4, #12]
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003f88:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f90:	eec7 7a08 	vdiv.f32	s15, s14, s16
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8003f94:	ee66 6aa7 	vmul.f32	s13, s13, s15
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8003f98:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8003f9c:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64

}
 8003fa0:	b003      	add	sp, #12
 8003fa2:	ecbd 8b02 	vpop	{d8}
 8003fa6:	bd30      	pop	{r4, r5, pc}
	else if(angle_diff < -PI_F){encoder->turns++;}
 8003fa8:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003fec <ps_sample+0x1a4>
 8003fac:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb4:	d5d7      	bpl.n	8003f66 <ps_sample+0x11e>
 8003fb6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	if(!encoder->first_sample){
 8003fc0:	f894 328c 	ldrb.w	r3, [r4, #652]	; 0x28c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1d1      	bne.n	8003f6c <ps_sample+0x124>
		encoder->first_sample = 1;
 8003fc8:	2201      	movs	r2, #1
		encoder->turns = 0;
 8003fca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		encoder->first_sample = 1;
 8003fce:	f884 228c 	strb.w	r2, [r4, #652]	; 0x28c
 8003fd2:	e7d3      	b.n	8003f7c <ps_sample+0x134>
 8003fd4:	200093e8 	.word	0x200093e8
 8003fd8:	20008f3c 	.word	0x20008f3c
 8003fdc:	40c90fdb 	.word	0x40c90fdb
 8003fe0:	37800000 	.word	0x37800000
 8003fe4:	40490fdb 	.word	0x40490fdb
 8003fe8:	3d579436 	.word	0x3d579436
 8003fec:	c0490fdb 	.word	0xc0490fdb

08003ff0 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	4604      	mov	r4, r0
	printf("Raw: %d", encoder->raw);
 8003ff4:	4813      	ldr	r0, [pc, #76]	; (8004044 <ps_print+0x54>)
 8003ff6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003ff8:	f005 fdca 	bl	8009b90 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8003ffc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003ffe:	4812      	ldr	r0, [pc, #72]	; (8004048 <ps_print+0x58>)
 8004000:	f005 fdc6 	bl	8009b90 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8004004:	6860      	ldr	r0, [r4, #4]
 8004006:	f7fc fac7 	bl	8000598 <__aeabi_f2d>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	480f      	ldr	r0, [pc, #60]	; (800404c <ps_print+0x5c>)
 8004010:	f005 fdbe 	bl	8009b90 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8004014:	68e0      	ldr	r0, [r4, #12]
 8004016:	f7fc fabf 	bl	8000598 <__aeabi_f2d>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	480c      	ldr	r0, [pc, #48]	; (8004050 <ps_print+0x60>)
 8004020:	f005 fdb6 	bl	8009b90 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8004024:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004026:	f7fc fab7 	bl	8000598 <__aeabi_f2d>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4809      	ldr	r0, [pc, #36]	; (8004054 <ps_print+0x64>)
 8004030:	f005 fdae 	bl	8009b90 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8004034:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004038:	4807      	ldr	r0, [pc, #28]	; (8004058 <ps_print+0x68>)
	//HAL_Delay(dt_ms);
}
 800403a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("   Turns:  %d\r\n", encoder->turns);
 800403e:	f005 bda7 	b.w	8009b90 <iprintf>
 8004042:	bf00      	nop
 8004044:	0800ecdc 	.word	0x0800ecdc
 8004048:	0800ece4 	.word	0x0800ece4
 800404c:	0800ecfc 	.word	0x0800ecfc
 8004050:	0800ed10 	.word	0x0800ed10
 8004054:	0800ed24 	.word	0x0800ed24
 8004058:	0800ed38 	.word	0x0800ed38

0800405c <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800405c:	4811      	ldr	r0, [pc, #68]	; (80040a4 <MX_SPI1_Init+0x48>)
{
 800405e:	b538      	push	{r3, r4, r5, lr}
  hspi1.Instance = SPI1;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <MX_SPI1_Init+0x4c>)
 8004062:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004064:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004068:	2301      	movs	r3, #1
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800406a:	f44f 6570 	mov.w	r5, #3840	; 0xf00
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800406e:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004072:	2130      	movs	r1, #48	; 0x30
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004074:	6042      	str	r2, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004076:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004078:	2207      	movs	r2, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800407a:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800407c:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004080:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004084:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004088:	60c5      	str	r5, [r0, #12]
  hspi1.Init.CRCPolynomial = 7;
 800408a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800408c:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800408e:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004090:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004092:	f002 ff7d 	bl	8006f90 <HAL_SPI_Init>
 8004096:	b900      	cbnz	r0, 800409a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004098:	bd38      	pop	{r3, r4, r5, pc}
 800409a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800409e:	f7ff bddd 	b.w	8003c5c <Error_Handler>
 80040a2:	bf00      	nop
 80040a4:	2000944c 	.word	0x2000944c
 80040a8:	40013000 	.word	0x40013000

080040ac <MX_SPI3_Init>:
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80040ac:	4810      	ldr	r0, [pc, #64]	; (80040f0 <MX_SPI3_Init+0x44>)
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <MX_SPI3_Init+0x48>)
{
 80040b0:	b510      	push	{r4, lr}
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80040b2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi3.Instance = SPI3;
 80040b6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80040b8:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80040bc:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 80040c0:	2107      	movs	r1, #7
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80040c2:	6043      	str	r3, [r0, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80040c4:	60c2      	str	r2, [r0, #12]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80040c6:	2300      	movs	r3, #0
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040c8:	2208      	movs	r2, #8
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80040ce:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80040d2:	6184      	str	r4, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 80040d4:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80040d6:	6083      	str	r3, [r0, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040da:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040dc:	61c2      	str	r2, [r0, #28]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040de:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80040e0:	f002 ff56 	bl	8006f90 <HAL_SPI_Init>
 80040e4:	b900      	cbnz	r0, 80040e8 <MX_SPI3_Init+0x3c>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80040e6:	bd10      	pop	{r4, pc}
 80040e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80040ec:	f7ff bdb6 	b.w	8003c5c <Error_Handler>
 80040f0:	200093e8 	.word	0x200093e8
 80040f4:	40003c00 	.word	0x40003c00

080040f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040f8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80040fa:	6802      	ldr	r2, [r0, #0]
 80040fc:	492d      	ldr	r1, [pc, #180]	; (80041b4 <HAL_SPI_MspInit+0xbc>)
{
 80040fe:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8004102:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004108:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800410c:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 800410e:	d004      	beq.n	800411a <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8004110:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <HAL_SPI_MspInit+0xc0>)
 8004112:	429a      	cmp	r2, r3
 8004114:	d028      	beq.n	8004168 <HAL_SPI_MspInit+0x70>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004116:	b00a      	add	sp, #40	; 0x28
 8004118:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800411a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800411e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004122:	2005      	movs	r0, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004124:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004126:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
 800412c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800412e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004132:	9200      	str	r2, [sp, #0]
 8004134:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	64da      	str	r2, [r3, #76]	; 0x4c
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004140:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004148:	2200      	movs	r2, #0
 800414a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800414e:	24e0      	movs	r4, #224	; 0xe0
 8004150:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004156:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800415a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800415e:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004160:	f001 ff50 	bl	8006004 <HAL_GPIO_Init>
}
 8004164:	b00a      	add	sp, #40	; 0x28
 8004166:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004168:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416c:	4813      	ldr	r0, [pc, #76]	; (80041bc <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800416e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004174:	659a      	str	r2, [r3, #88]	; 0x58
 8004176:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004178:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800417c:	9202      	str	r2, [sp, #8]
 800417e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004182:	f042 0204 	orr.w	r2, r2, #4
 8004186:	64da      	str	r2, [r3, #76]	; 0x4c
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004190:	2306      	movs	r3, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004192:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004194:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004196:	2200      	movs	r2, #0
 8004198:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800419c:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
 80041a0:	2502      	movs	r5, #2
 80041a2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80041a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041aa:	f001 ff2b 	bl	8006004 <HAL_GPIO_Init>
}
 80041ae:	b00a      	add	sp, #40	; 0x28
 80041b0:	bd70      	pop	{r4, r5, r6, pc}
 80041b2:	bf00      	nop
 80041b4:	40013000 	.word	0x40013000
 80041b8:	40003c00 	.word	0x40003c00
 80041bc:	48000800 	.word	0x48000800

080041c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_MspInit+0x30>)
 80041c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	661a      	str	r2, [r3, #96]	; 0x60
 80041ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80041cc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ce:	f002 0201 	and.w	r2, r2, #1
 80041d2:	9200      	str	r2, [sp, #0]
 80041d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041dc:	659a      	str	r2, [r3, #88]	; 0x58
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041e8:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80041ea:	f002 b883 	b.w	80062f4 <HAL_PWREx_DisableUCPDDeadBattery>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000

080041f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041f4:	e7fe      	b.n	80041f4 <NMI_Handler>
 80041f6:	bf00      	nop

080041f8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f8:	e7fe      	b.n	80041f8 <HardFault_Handler>
 80041fa:	bf00      	nop

080041fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041fc:	e7fe      	b.n	80041fc <MemManage_Handler>
 80041fe:	bf00      	nop

08004200 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004200:	e7fe      	b.n	8004200 <BusFault_Handler>
 8004202:	bf00      	nop

08004204 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004204:	e7fe      	b.n	8004204 <UsageFault_Handler>
 8004206:	bf00      	nop

08004208 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop

0800420c <DebugMon_Handler>:
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop

08004210 <PendSV_Handler>:
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop

08004214 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004214:	f000 bb06 	b.w	8004824 <HAL_IncTick>

08004218 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004218:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  HAL_GPIO_WritePin(LED1, 1);
 800421a:	4d10      	ldr	r5, [pc, #64]	; (800425c <TIM1_UP_TIM16_IRQHandler+0x44>)

  analog_sample(&controller);
 800421c:	4c10      	ldr	r4, [pc, #64]	; (8004260 <TIM1_UP_TIM16_IRQHandler+0x48>)
  HAL_GPIO_WritePin(LED1, 1);
 800421e:	2201      	movs	r2, #1
 8004220:	2104      	movs	r1, #4
 8004222:	4628      	mov	r0, r5
 8004224:	f001 ffe2 	bl	80061ec <HAL_GPIO_WritePin>
  analog_sample(&controller);
 8004228:	4620      	mov	r0, r4
 800422a:	f7fd ffd9 	bl	80021e0 <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 800422e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004264 <TIM1_UP_TIM16_IRQHandler+0x4c>
 8004232:	480d      	ldr	r0, [pc, #52]	; (8004268 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004234:	f7ff fe08 	bl	8003e48 <ps_sample>

  /* Run Finite State Machine */
  run_fsm(&state);
 8004238:	480c      	ldr	r0, [pc, #48]	; (800426c <TIM1_UP_TIM16_IRQHandler+0x54>)
 800423a:	f7fe fd81 	bl	8002d40 <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 800423e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0


  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004242:	480b      	ldr	r0, [pc, #44]	; (8004270 <TIM1_UP_TIM16_IRQHandler+0x58>)
  controller.loop_count++;
 8004244:	3301      	adds	r3, #1
 8004246:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  HAL_TIM_IRQHandler(&htim1);
 800424a:	f003 fc85 	bl	8007b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_GPIO_WritePin(LED1, 0);
 800424e:	4628      	mov	r0, r5
 8004250:	2200      	movs	r2, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1, 0);
 8004256:	2104      	movs	r1, #4
 8004258:	f001 bfc8 	b.w	80061ec <HAL_GPIO_WritePin>
 800425c:	48000800 	.word	0x48000800
 8004260:	2000078c 	.word	0x2000078c
 8004264:	387ba882 	.word	0x387ba882
 8004268:	200003e8 	.word	0x200003e8
 800426c:	2000067c 	.word	0x2000067c
 8004270:	200094b0 	.word	0x200094b0

08004274 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004276:	4805      	ldr	r0, [pc, #20]	; (800428c <USART2_IRQHandler+0x18>)
 8004278:	f004 f838 	bl	80082ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <USART2_IRQHandler+0x1c>)
  update_fsm(&state, c);
 800427e:	4805      	ldr	r0, [pc, #20]	; (8004294 <USART2_IRQHandler+0x20>)
 8004280:	7819      	ldrb	r1, [r3, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8004282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  update_fsm(&state, c);
 8004286:	f7ff b827 	b.w	80032d8 <update_fsm>
 800428a:	bf00      	nop
 800428c:	200094fc 	.word	0x200094fc
 8004290:	20000678 	.word	0x20000678
 8004294:	2000067c 	.word	0x2000067c

08004298 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800429c:	4838      	ldr	r0, [pc, #224]	; (8004380 <FDCAN2_IT0_IRQHandler+0xe8>)
  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  //TODO send again
  //HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800429e:	4c39      	ldr	r4, [pc, #228]	; (8004384 <FDCAN2_IT0_IRQHandler+0xec>)
{
 80042a0:	b090      	sub	sp, #64	; 0x40
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80042a2:	f001 fbf5 	bl	8005a90 <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 80042a6:	4b38      	ldr	r3, [pc, #224]	; (8004388 <FDCAN2_IT0_IRQHandler+0xf0>)
 80042a8:	4835      	ldr	r0, [pc, #212]	; (8004380 <FDCAN2_IT0_IRQHandler+0xe8>)
 80042aa:	f103 020b 	add.w	r2, r3, #11
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	f001 fae8 	bl	8005884 <HAL_FDCAN_GetRxMessage>
  printf("CAN tx disabled!!\n\r");
 80042b4:	4835      	ldr	r0, [pc, #212]	; (800438c <FDCAN2_IT0_IRQHandler+0xf4>)
 80042b6:	f005 fc6b 	bl	8009b90 <iprintf>
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80042ba:	7926      	ldrb	r6, [r4, #4]
 80042bc:	7963      	ldrb	r3, [r4, #5]
 80042be:	79a0      	ldrb	r0, [r4, #6]
 80042c0:	7862      	ldrb	r2, [r4, #1]
 80042c2:	f894 c002 	ldrb.w	ip, [r4, #2]
 80042c6:	78e5      	ldrb	r5, [r4, #3]
 80042c8:	79e7      	ldrb	r7, [r4, #7]
 80042ca:	ea06 0103 	and.w	r1, r6, r3
 80042ce:	4001      	ands	r1, r0
 80042d0:	ea02 020c 	and.w	r2, r2, ip
 80042d4:	402a      	ands	r2, r5
 80042d6:	4039      	ands	r1, r7
 80042d8:	4011      	ands	r1, r2
 80042da:	29ff      	cmp	r1, #255	; 0xff
 80042dc:	7a25      	ldrb	r5, [r4, #8]
 80042de:	d101      	bne.n	80042e4 <FDCAN2_IT0_IRQHandler+0x4c>
 80042e0:	2dfc      	cmp	r5, #252	; 0xfc
 80042e2:	d025      	beq.n	8004330 <FDCAN2_IT0_IRQHandler+0x98>
	  update_fsm(&state, MOTOR_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80042e4:	f1a6 06ff 	sub.w	r6, r6, #255	; 0xff
 80042e8:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
 80042ec:	fab6 f686 	clz	r6, r6
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	0976      	lsrs	r6, r6, #5
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	4038      	ands	r0, r7
 80042fa:	4002      	ands	r2, r0
 80042fc:	fb03 f306 	mul.w	r3, r3, r6
 8004300:	2aff      	cmp	r2, #255	; 0xff
 8004302:	bf14      	ite	ne
 8004304:	2300      	movne	r3, #0
 8004306:	f003 0301 	andeq.w	r3, r3, #1
 800430a:	2dfd      	cmp	r5, #253	; 0xfd
 800430c:	bf14      	ite	ne
 800430e:	2200      	movne	r2, #0
 8004310:	f003 0201 	andeq.w	r2, r3, #1
 8004314:	b99a      	cbnz	r2, 800433e <FDCAN2_IT0_IRQHandler+0xa6>
	  update_fsm(&state, MENU_CMD);
  	  }
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8004316:	2dfe      	cmp	r5, #254	; 0xfe
 8004318:	bf14      	ite	ne
 800431a:	2500      	movne	r5, #0
 800431c:	f003 0501 	andeq.w	r5, r3, #1
 8004320:	b1a5      	cbz	r5, 800434c <FDCAN2_IT0_IRQHandler+0xb4>
	  update_fsm(&state, ZERO_CMD);
 8004322:	481b      	ldr	r0, [pc, #108]	; (8004390 <FDCAN2_IT0_IRQHandler+0xf8>)
 8004324:	217a      	movs	r1, #122	; 0x7a
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004326:	b010      	add	sp, #64	; 0x40
 8004328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 800432c:	f7fe bfd4 	b.w	80032d8 <update_fsm>
 8004330:	4817      	ldr	r0, [pc, #92]	; (8004390 <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MOTOR_CMD);
 8004332:	216d      	movs	r1, #109	; 0x6d
}
 8004334:	b010      	add	sp, #64	; 0x40
 8004336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 800433a:	f7fe bfcd 	b.w	80032d8 <update_fsm>
 800433e:	4814      	ldr	r0, [pc, #80]	; (8004390 <FDCAN2_IT0_IRQHandler+0xf8>)
	  update_fsm(&state, MENU_CMD);
 8004340:	211b      	movs	r1, #27
}
 8004342:	b010      	add	sp, #64	; 0x40
 8004344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  update_fsm(&state, ZERO_CMD);
 8004348:	f7fe bfc6 	b.w	80032d8 <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 800434c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8004398 <FDCAN2_IT0_IRQHandler+0x100>
 8004350:	4f10      	ldr	r7, [pc, #64]	; (8004394 <FDCAN2_IT0_IRQHandler+0xfc>)
 8004352:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8004356:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004358:	466e      	mov	r6, sp
 800435a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800435c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800435e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004360:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004362:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004364:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004368:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800436c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004370:	f7fd fdbc 	bl	8001eec <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 8004374:	f848 5c14 	str.w	r5, [r8, #-20]
}
 8004378:	b010      	add	sp, #64	; 0x40
 800437a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800437e:	bf00      	nop
 8004380:	20000380 	.word	0x20000380
 8004384:	20009370 	.word	0x20009370
 8004388:	20009371 	.word	0x20009371
 800438c:	0800ed48 	.word	0x0800ed48
 8004390:	2000067c 	.word	0x2000067c
 8004394:	20009380 	.word	0x20009380
 8004398:	20000854 	.word	0x20000854

0800439c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800439c:	2001      	movs	r0, #1
 800439e:	4770      	bx	lr

080043a0 <_kill>:

int _kill(int pid, int sig)
{
 80043a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80043a2:	f004 ff31 	bl	8009208 <__errno>
 80043a6:	2316      	movs	r3, #22
 80043a8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80043aa:	f04f 30ff 	mov.w	r0, #4294967295
 80043ae:	bd08      	pop	{r3, pc}

080043b0 <_exit>:

void _exit (int status)
{
 80043b0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80043b2:	f004 ff29 	bl	8009208 <__errno>
 80043b6:	2316      	movs	r3, #22
 80043b8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80043ba:	e7fe      	b.n	80043ba <_exit+0xa>

080043bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043bc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043be:	1e16      	subs	r6, r2, #0
 80043c0:	dd07      	ble.n	80043d2 <_read+0x16>
 80043c2:	460c      	mov	r4, r1
 80043c4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80043c6:	f3af 8000 	nop.w
 80043ca:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ce:	42a5      	cmp	r5, r4
 80043d0:	d1f9      	bne.n	80043c6 <_read+0xa>
	}

return len;
}
 80043d2:	4630      	mov	r0, r6
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	bf00      	nop

080043d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043d8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043da:	1e16      	subs	r6, r2, #0
 80043dc:	dd07      	ble.n	80043ee <_write+0x16>
 80043de:	460c      	mov	r4, r1
 80043e0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80043e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80043e6:	f000 f9a3 	bl	8004730 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ea:	42ac      	cmp	r4, r5
 80043ec:	d1f9      	bne.n	80043e2 <_write+0xa>
	}
	return len;
}
 80043ee:	4630      	mov	r0, r6
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
 80043f2:	bf00      	nop

080043f4 <_close>:

int _close(int file)
{
	return -1;
}
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop

080043fc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80043fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004400:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004402:	2000      	movs	r0, #0
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop

08004408 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004408:	2001      	movs	r0, #1
 800440a:	4770      	bx	lr

0800440c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800440c:	2000      	movs	r0, #0
 800440e:	4770      	bx	lr

08004410 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004410:	490c      	ldr	r1, [pc, #48]	; (8004444 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004412:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004414:	680b      	ldr	r3, [r1, #0]
{
 8004416:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004418:	4c0c      	ldr	r4, [pc, #48]	; (800444c <_sbrk+0x3c>)
 800441a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800441c:	b12b      	cbz	r3, 800442a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800441e:	4418      	add	r0, r3
 8004420:	4290      	cmp	r0, r2
 8004422:	d807      	bhi.n	8004434 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004424:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004426:	4618      	mov	r0, r3
 8004428:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800442a:	4b09      	ldr	r3, [pc, #36]	; (8004450 <_sbrk+0x40>)
 800442c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800442e:	4418      	add	r0, r3
 8004430:	4290      	cmp	r0, r2
 8004432:	d9f7      	bls.n	8004424 <_sbrk+0x14>
    errno = ENOMEM;
 8004434:	f004 fee8 	bl	8009208 <__errno>
 8004438:	230c      	movs	r3, #12
 800443a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd10      	pop	{r4, pc}
 8004444:	20000230 	.word	0x20000230
 8004448:	20020000 	.word	0x20020000
 800444c:	00000400 	.word	0x00000400
 8004450:	200095a0 	.word	0x200095a0

08004454 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <SystemInit+0x10>)
 8004456:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800445a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800445e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004462:	4770      	bx	lr
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800446a:	2400      	movs	r4, #0
{
 800446c:	b0a7      	sub	sp, #156	; 0x9c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800446e:	4d5d      	ldr	r5, [pc, #372]	; (80045e4 <MX_TIM1_Init+0x17c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004470:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004472:	4621      	mov	r1, r4
 8004474:	2234      	movs	r2, #52	; 0x34
 8004476:	a818      	add	r0, sp, #96	; 0x60
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004478:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800447c:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004480:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8004484:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8004488:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448c:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448e:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004490:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004492:	f004 ff0b 	bl	80092ac <memset>
  htim1.Instance = TIM1;
 8004496:	4854      	ldr	r0, [pc, #336]	; (80045e8 <MX_TIM1_Init+0x180>)
 8004498:	6028      	str	r0, [r5, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800449a:	2120      	movs	r1, #32
  htim1.Init.Period = 4250; //4700 - 27.8u
 800449c:	f241 029a 	movw	r2, #4250	; 0x109a
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044a0:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044a2:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 0;
 80044a4:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 4250; //4700 - 27.8u
 80044a8:	e9c5 1202 	strd	r1, r2, [r5, #8]
  htim1.Init.Prescaler = 0;
 80044ac:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044ae:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044b0:	f003 f866 	bl	8007580 <HAL_TIM_Base_Init>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d15e      	bne.n	8004576 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044bc:	4849      	ldr	r0, [pc, #292]	; (80045e4 <MX_TIM1_Init+0x17c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044be:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044c0:	a906      	add	r1, sp, #24
 80044c2:	f003 fa6f 	bl	80079a4 <HAL_TIM_ConfigClockSource>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d16a      	bne.n	80045a0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044ca:	4846      	ldr	r0, [pc, #280]	; (80045e4 <MX_TIM1_Init+0x17c>)
 80044cc:	f003 f934 	bl	8007738 <HAL_TIM_PWM_Init>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d162      	bne.n	800459a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d4:	2600      	movs	r6, #0
 80044d6:	2700      	movs	r7, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044da:	4842      	ldr	r0, [pc, #264]	; (80045e4 <MX_TIM1_Init+0x17c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044dc:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044de:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044e4:	f003 fd86 	bl	8007ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d153      	bne.n	8004594 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ec:	2660      	movs	r6, #96	; 0x60
 80044ee:	2700      	movs	r7, #0
 80044f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044f4:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044f6:	2600      	movs	r6, #0
 80044f8:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044fa:	483a      	ldr	r0, [pc, #232]	; (80045e4 <MX_TIM1_Init+0x17c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044fc:	9216      	str	r2, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044fe:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004500:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004504:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004508:	f003 fc72 	bl	8007df0 <HAL_TIM_PWM_ConfigChannel>
 800450c:	2800      	cmp	r0, #0
 800450e:	d13e      	bne.n	800458e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004510:	4834      	ldr	r0, [pc, #208]	; (80045e4 <MX_TIM1_Init+0x17c>)
 8004512:	2204      	movs	r2, #4
 8004514:	a910      	add	r1, sp, #64	; 0x40
 8004516:	f003 fc6b 	bl	8007df0 <HAL_TIM_PWM_ConfigChannel>
 800451a:	bba8      	cbnz	r0, 8004588 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800451c:	4831      	ldr	r0, [pc, #196]	; (80045e4 <MX_TIM1_Init+0x17c>)
 800451e:	a910      	add	r1, sp, #64	; 0x40
 8004520:	2208      	movs	r2, #8
 8004522:	f003 fc65 	bl	8007df0 <HAL_TIM_PWM_ConfigChannel>
 8004526:	bb60      	cbnz	r0, 8004582 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004528:	2200      	movs	r2, #0
 800452a:	2300      	movs	r3, #0
 800452c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8004530:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8004534:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8004538:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800453c:	2200      	movs	r2, #0
 800453e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004542:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004546:	2400      	movs	r4, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004548:	2200      	movs	r2, #0
 800454a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800454e:	4825      	ldr	r0, [pc, #148]	; (80045e4 <MX_TIM1_Init+0x17c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004550:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004552:	a918      	add	r1, sp, #96	; 0x60
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004554:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004558:	f003 fdb0 	bl	80080bc <HAL_TIMEx_ConfigBreakDeadTime>
 800455c:	b970      	cbnz	r0, 800457c <MX_TIM1_Init+0x114>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 800455e:	6829      	ldr	r1, [r5, #0]
 8004560:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <MX_TIM1_Init+0x180>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004562:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8004564:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004566:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800456a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800456e:	930e      	str	r3, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM1)
 8004570:	d019      	beq.n	80045a6 <MX_TIM1_Init+0x13e>
}
 8004572:	b027      	add	sp, #156	; 0x9c
 8004574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8004576:	f7ff fb71 	bl	8003c5c <Error_Handler>
 800457a:	e79d      	b.n	80044b8 <MX_TIM1_Init+0x50>
    Error_Handler();
 800457c:	f7ff fb6e 	bl	8003c5c <Error_Handler>
 8004580:	e7ed      	b.n	800455e <MX_TIM1_Init+0xf6>
    Error_Handler();
 8004582:	f7ff fb6b 	bl	8003c5c <Error_Handler>
 8004586:	e7cf      	b.n	8004528 <MX_TIM1_Init+0xc0>
    Error_Handler();
 8004588:	f7ff fb68 	bl	8003c5c <Error_Handler>
 800458c:	e7c6      	b.n	800451c <MX_TIM1_Init+0xb4>
    Error_Handler();
 800458e:	f7ff fb65 	bl	8003c5c <Error_Handler>
 8004592:	e7bd      	b.n	8004510 <MX_TIM1_Init+0xa8>
    Error_Handler();
 8004594:	f7ff fb62 	bl	8003c5c <Error_Handler>
 8004598:	e7a8      	b.n	80044ec <MX_TIM1_Init+0x84>
    Error_Handler();
 800459a:	f7ff fb5f 	bl	8003c5c <Error_Handler>
 800459e:	e799      	b.n	80044d4 <MX_TIM1_Init+0x6c>
    Error_Handler();
 80045a0:	f7ff fb5c 	bl	8003c5c <Error_Handler>
 80045a4:	e791      	b.n	80044ca <MX_TIM1_Init+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80045ae:	2006      	movs	r0, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80045ba:	900e      	str	r0, [sp, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045c2:	2200      	movs	r2, #0
 80045c4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c6:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045c8:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 80045cc:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80045d2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80045d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045da:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045dc:	f001 fd12 	bl	8006004 <HAL_GPIO_Init>
}
 80045e0:	b027      	add	sp, #156	; 0x9c
 80045e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e4:	200094b0 	.word	0x200094b0
 80045e8:	40012c00 	.word	0x40012c00

080045ec <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_TIM_Base_MspInit+0x3c>)
 80045ee:	6802      	ldr	r2, [r0, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d000      	beq.n	80045f6 <HAL_TIM_Base_MspInit+0xa>
 80045f4:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045f6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 80045fa:	b500      	push	{lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004602:	661a      	str	r2, [r3, #96]	; 0x60
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8004606:	b083      	sub	sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800460e:	2200      	movs	r2, #0
 8004610:	2101      	movs	r1, #1
 8004612:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004614:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004616:	f000 fe71 	bl	80052fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800461a:	2019      	movs	r0, #25
}
 800461c:	b003      	add	sp, #12
 800461e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004622:	f000 bea3 	b.w	800536c <HAL_NVIC_EnableIRQ>
 8004626:	bf00      	nop
 8004628:	40012c00 	.word	0x40012c00

0800462c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800462c:	481f      	ldr	r0, [pc, #124]	; (80046ac <MX_USART2_UART_Init+0x80>)
{
 800462e:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <MX_USART2_UART_Init+0x84>)
 8004632:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004634:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004638:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800463a:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800463c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004640:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004644:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 115200;
 8004648:	6041      	str	r1, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800464a:	6142      	str	r2, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800464c:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800464e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004650:	f004 fa5a 	bl	8008b08 <HAL_UART_Init>
 8004654:	b970      	cbnz	r0, 8004674 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004656:	4815      	ldr	r0, [pc, #84]	; (80046ac <MX_USART2_UART_Init+0x80>)
 8004658:	2100      	movs	r1, #0
 800465a:	f004 fd51 	bl	8009100 <HAL_UARTEx_SetTxFifoThreshold>
 800465e:	b988      	cbnz	r0, 8004684 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004660:	4812      	ldr	r0, [pc, #72]	; (80046ac <MX_USART2_UART_Init+0x80>)
 8004662:	2100      	movs	r1, #0
 8004664:	f004 fd8a 	bl	800917c <HAL_UARTEx_SetRxFifoThreshold>
 8004668:	b9a0      	cbnz	r0, 8004694 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800466a:	4810      	ldr	r0, [pc, #64]	; (80046ac <MX_USART2_UART_Init+0x80>)
 800466c:	f004 fd2a 	bl	80090c4 <HAL_UARTEx_DisableFifoMode>
 8004670:	b9b8      	cbnz	r0, 80046a2 <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004672:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004674:	f7ff faf2 	bl	8003c5c <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004678:	480c      	ldr	r0, [pc, #48]	; (80046ac <MX_USART2_UART_Init+0x80>)
 800467a:	2100      	movs	r1, #0
 800467c:	f004 fd40 	bl	8009100 <HAL_UARTEx_SetTxFifoThreshold>
 8004680:	2800      	cmp	r0, #0
 8004682:	d0ed      	beq.n	8004660 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8004684:	f7ff faea 	bl	8003c5c <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004688:	4808      	ldr	r0, [pc, #32]	; (80046ac <MX_USART2_UART_Init+0x80>)
 800468a:	2100      	movs	r1, #0
 800468c:	f004 fd76 	bl	800917c <HAL_UARTEx_SetRxFifoThreshold>
 8004690:	2800      	cmp	r0, #0
 8004692:	d0ea      	beq.n	800466a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8004694:	f7ff fae2 	bl	8003c5c <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004698:	4804      	ldr	r0, [pc, #16]	; (80046ac <MX_USART2_UART_Init+0x80>)
 800469a:	f004 fd13 	bl	80090c4 <HAL_UARTEx_DisableFifoMode>
 800469e:	2800      	cmp	r0, #0
 80046a0:	d0e7      	beq.n	8004672 <MX_USART2_UART_Init+0x46>
}
 80046a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80046a6:	f7ff bad9 	b.w	8003c5c <Error_Handler>
 80046aa:	bf00      	nop
 80046ac:	200094fc 	.word	0x200094fc
 80046b0:	40004400 	.word	0x40004400

080046b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046b4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 80046b6:	6802      	ldr	r2, [r0, #0]
 80046b8:	4b1c      	ldr	r3, [pc, #112]	; (800472c <HAL_UART_MspInit+0x78>)
{
 80046ba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046bc:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 80046be:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80046c4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80046c8:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART2)
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80046cc:	b008      	add	sp, #32
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80046d0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80046d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046dc:	659a      	str	r2, [r3, #88]	; 0x58
 80046de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80046e4:	9200      	str	r2, [sp, #0]
 80046e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046f8:	220c      	movs	r2, #12
 80046fa:	2302      	movs	r3, #2
 80046fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004700:	2507      	movs	r5, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004702:	2300      	movs	r3, #0
 8004704:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800470a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470e:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004710:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004712:	f001 fc77 	bl	8006004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004716:	4622      	mov	r2, r4
 8004718:	2101      	movs	r1, #1
 800471a:	2026      	movs	r0, #38	; 0x26
 800471c:	f000 fdee 	bl	80052fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004720:	2026      	movs	r0, #38	; 0x26
 8004722:	f000 fe23 	bl	800536c <HAL_NVIC_EnableIRQ>
}
 8004726:	b008      	add	sp, #32
 8004728:	bd70      	pop	{r4, r5, r6, pc}
 800472a:	bf00      	nop
 800472c:	40004400 	.word	0x40004400

08004730 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8004730:	b500      	push	{lr}
 8004732:	b083      	sub	sp, #12
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8004734:	f64f 73ff 	movw	r3, #65535	; 0xffff
int __io_putchar(int ch) {
 8004738:	9001      	str	r0, [sp, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 800473a:	2201      	movs	r2, #1
 800473c:	a901      	add	r1, sp, #4
 800473e:	4803      	ldr	r0, [pc, #12]	; (800474c <__io_putchar+0x1c>)
 8004740:	f004 fc14 	bl	8008f6c <HAL_UART_Transmit>
return 0;
}
 8004744:	2000      	movs	r0, #0
 8004746:	b003      	add	sp, #12
 8004748:	f85d fb04 	ldr.w	pc, [sp], #4
 800474c:	200094fc 	.word	0x200094fc

08004750 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004750:	4902      	ldr	r1, [pc, #8]	; (800475c <HAL_UART_RxCpltCallback+0xc>)
 8004752:	4803      	ldr	r0, [pc, #12]	; (8004760 <HAL_UART_RxCpltCallback+0x10>)
 8004754:	2201      	movs	r2, #1
 8004756:	f003 bd0f 	b.w	8008178 <HAL_UART_Receive_IT>
 800475a:	bf00      	nop
 800475c:	20000678 	.word	0x20000678
 8004760:	200094fc 	.word	0x200094fc

08004764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004764:	480d      	ldr	r0, [pc, #52]	; (800479c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004766:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004768:	480d      	ldr	r0, [pc, #52]	; (80047a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800476a:	490e      	ldr	r1, [pc, #56]	; (80047a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800476c:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <LoopForever+0xe>)
  movs r3, #0
 800476e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004770:	e002      	b.n	8004778 <LoopCopyDataInit>

08004772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004776:	3304      	adds	r3, #4

08004778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800477a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800477c:	d3f9      	bcc.n	8004772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800477e:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8004780:	4c0b      	ldr	r4, [pc, #44]	; (80047b0 <LoopForever+0x16>)
  movs r3, #0
 8004782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004784:	e001      	b.n	800478a <LoopFillZerobss>

08004786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004788:	3204      	adds	r2, #4

0800478a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800478a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800478c:	d3fb      	bcc.n	8004786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800478e:	f7ff fe61 	bl	8004454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004792:	f004 fd3f 	bl	8009214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004796:	f7ff f837 	bl	8003808 <main>

0800479a <LoopForever>:

LoopForever:
    b LoopForever
 800479a:	e7fe      	b.n	800479a <LoopForever>
  ldr   r0, =_estack
 800479c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047a4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80047a8:	0800f2b8 	.word	0x0800f2b8
  ldr r2, =_sbss
 80047ac:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80047b0:	200095a0 	.word	0x200095a0

080047b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047b4:	e7fe      	b.n	80047b4 <ADC1_2_IRQHandler>
	...

080047b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <HAL_InitTick+0x40>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	b90b      	cbnz	r3, 80047c4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80047c0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80047c4:	490d      	ldr	r1, [pc, #52]	; (80047fc <HAL_InitTick+0x44>)
 80047c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047ca:	4605      	mov	r5, r0
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	6808      	ldr	r0, [r1, #0]
 80047d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80047d6:	f000 fdd7 	bl	8005388 <HAL_SYSTICK_Config>
 80047da:	4604      	mov	r4, r0
 80047dc:	2800      	cmp	r0, #0
 80047de:	d1ef      	bne.n	80047c0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047e0:	2d0f      	cmp	r5, #15
 80047e2:	d8ed      	bhi.n	80047c0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047e4:	4602      	mov	r2, r0
 80047e6:	4629      	mov	r1, r5
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	f000 fd86 	bl	80052fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_InitTick+0x48>)
 80047f2:	4620      	mov	r0, r4
 80047f4:	601d      	str	r5, [r3, #0]
}
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20000004 	.word	0x20000004
 80047fc:	20000000 	.word	0x20000000
 8004800:	20000008 	.word	0x20000008

08004804 <HAL_Init>:
{
 8004804:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004806:	2003      	movs	r0, #3
 8004808:	f000 fd64 	bl	80052d4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800480c:	2000      	movs	r0, #0
 800480e:	f7ff ffd3 	bl	80047b8 <HAL_InitTick>
 8004812:	b110      	cbz	r0, 800481a <HAL_Init+0x16>
    status = HAL_ERROR;
 8004814:	2401      	movs	r4, #1
}
 8004816:	4620      	mov	r0, r4
 8004818:	bd10      	pop	{r4, pc}
 800481a:	4604      	mov	r4, r0
    HAL_MspInit();
 800481c:	f7ff fcd0 	bl	80041c0 <HAL_MspInit>
}
 8004820:	4620      	mov	r0, r4
 8004822:	bd10      	pop	{r4, pc}

08004824 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004824:	4a03      	ldr	r2, [pc, #12]	; (8004834 <HAL_IncTick+0x10>)
 8004826:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_IncTick+0x14>)
 8004828:	6813      	ldr	r3, [r2, #0]
 800482a:	6809      	ldr	r1, [r1, #0]
 800482c:	440b      	add	r3, r1
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000958c 	.word	0x2000958c
 8004838:	20000004 	.word	0x20000004

0800483c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800483c:	4b01      	ldr	r3, [pc, #4]	; (8004844 <HAL_GetTick+0x8>)
 800483e:	6818      	ldr	r0, [r3, #0]
}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	2000958c 	.word	0x2000958c

08004848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800484c:	f7ff fff6 	bl	800483c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004850:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004852:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004854:	d002      	beq.n	800485c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_Delay+0x20>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800485c:	f7ff ffee 	bl	800483c <HAL_GetTick>
 8004860:	1b43      	subs	r3, r0, r5
 8004862:	42a3      	cmp	r3, r4
 8004864:	d3fa      	bcc.n	800485c <HAL_Delay+0x14>
  {
  }
}
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000004 	.word	0x20000004

0800486c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004870:	2300      	movs	r3, #0
 8004872:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004874:	2800      	cmp	r0, #0
 8004876:	f000 80d6 	beq.w	8004a26 <HAL_ADC_Init+0x1ba>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800487a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800487c:	4604      	mov	r4, r0
 800487e:	2d00      	cmp	r5, #0
 8004880:	f000 809f 	beq.w	80049c2 <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004884:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004886:	6893      	ldr	r3, [r2, #8]
 8004888:	0099      	lsls	r1, r3, #2
 800488a:	d505      	bpl.n	8004898 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800488c:	6893      	ldr	r3, [r2, #8]
 800488e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004892:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004896:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004898:	6893      	ldr	r3, [r2, #8]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	d419      	bmi.n	80048d2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800489e:	4b7f      	ldr	r3, [pc, #508]	; (8004a9c <HAL_ADC_Init+0x230>)
 80048a0:	487f      	ldr	r0, [pc, #508]	; (8004aa0 <HAL_ADC_Init+0x234>)
 80048a2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80048a4:	6891      	ldr	r1, [r2, #8]
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	fba0 0303 	umull	r0, r3, r0, r3
 80048ac:	099b      	lsrs	r3, r3, #6
 80048ae:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80048b2:	3301      	adds	r3, #1
 80048b4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80048be:	6091      	str	r1, [r2, #8]
 80048c0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80048c2:	9b01      	ldr	r3, [sp, #4]
 80048c4:	b12b      	cbz	r3, 80048d2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80048cc:	9b01      	ldr	r3, [sp, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f9      	bne.n	80048c6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048d2:	6893      	ldr	r3, [r2, #8]
 80048d4:	00de      	lsls	r6, r3, #3
 80048d6:	d466      	bmi.n	80049a6 <HAL_ADC_Init+0x13a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048da:	f043 0310 	orr.w	r3, r3, #16
 80048de:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048e8:	6893      	ldr	r3, [r2, #8]
 80048ea:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 80048ee:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048f4:	d15e      	bne.n	80049b4 <HAL_ADC_Init+0x148>
 80048f6:	06dd      	lsls	r5, r3, #27
 80048f8:	d45c      	bmi.n	80049b4 <HAL_ADC_Init+0x148>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80048fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004900:	f043 0302 	orr.w	r3, r3, #2
 8004904:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004906:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004908:	07d9      	lsls	r1, r3, #31
 800490a:	d419      	bmi.n	8004940 <HAL_ADC_Init+0xd4>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800490c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004910:	f000 80a1 	beq.w	8004a56 <HAL_ADC_Init+0x1ea>
 8004914:	4b63      	ldr	r3, [pc, #396]	; (8004aa4 <HAL_ADC_Init+0x238>)
 8004916:	429a      	cmp	r2, r3
 8004918:	f000 80a6 	beq.w	8004a68 <HAL_ADC_Init+0x1fc>
 800491c:	4d62      	ldr	r5, [pc, #392]	; (8004aa8 <HAL_ADC_Init+0x23c>)
 800491e:	4963      	ldr	r1, [pc, #396]	; (8004aac <HAL_ADC_Init+0x240>)
 8004920:	68ad      	ldr	r5, [r5, #8]
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	6889      	ldr	r1, [r1, #8]
 800492a:	432b      	orrs	r3, r5
 800492c:	430b      	orrs	r3, r1
 800492e:	07db      	lsls	r3, r3, #31
 8004930:	d406      	bmi.n	8004940 <HAL_ADC_Init+0xd4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004932:	495f      	ldr	r1, [pc, #380]	; (8004ab0 <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004934:	688b      	ldr	r3, [r1, #8]
 8004936:	6865      	ldr	r5, [r4, #4]
 8004938:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800493c:	432b      	orrs	r3, r5
 800493e:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004940:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8004944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004946:	432b      	orrs	r3, r5
 8004948:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800494a:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800494c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004950:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004954:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800495a:	d05f      	beq.n	8004a1c <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800495c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800495e:	b121      	cbz	r1, 800496a <HAL_ADC_Init+0xfe>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004960:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004962:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004966:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004968:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800496a:	68d6      	ldr	r6, [r2, #12]
 800496c:	4951      	ldr	r1, [pc, #324]	; (8004ab4 <HAL_ADC_Init+0x248>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800496e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004970:	4031      	ands	r1, r6
 8004972:	430b      	orrs	r3, r1
 8004974:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004976:	6913      	ldr	r3, [r2, #16]
 8004978:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800497c:	432b      	orrs	r3, r5
 800497e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004980:	6893      	ldr	r3, [r2, #8]
 8004982:	075e      	lsls	r6, r3, #29
 8004984:	d523      	bpl.n	80049ce <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004986:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004988:	6963      	ldr	r3, [r4, #20]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d04e      	beq.n	8004a2c <HAL_ADC_Init+0x1c0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800498e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004990:	f023 030f 	bic.w	r3, r3, #15
 8004994:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004996:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004998:	f023 0303 	bic.w	r3, r3, #3
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80049a2:	b002      	add	sp, #8
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049a6:	6893      	ldr	r3, [r2, #8]
 80049a8:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ac:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049b2:	d0a0      	beq.n	80048f6 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80049b6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b8:	f043 0310 	orr.w	r3, r3, #16
 80049bc:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80049be:	b002      	add	sp, #8
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80049c2:	f7fc fc29 	bl	8001218 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80049c6:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80049c8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80049cc:	e75a      	b.n	8004884 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049ce:	6893      	ldr	r3, [r2, #8]
 80049d0:	071d      	lsls	r5, r3, #28
 80049d2:	d4d9      	bmi.n	8004988 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049d4:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049da:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 80049dc:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049de:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049e2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049e4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80049e8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049ec:	430b      	orrs	r3, r1
 80049ee:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80049f0:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80049f2:	bb1d      	cbnz	r5, 8004a3c <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80049f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80049fa:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80049fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a06:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004a0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d033      	beq.n	8004a7a <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a12:	6913      	ldr	r3, [r2, #16]
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6113      	str	r3, [r2, #16]
 8004a1a:	e7b5      	b.n	8004988 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a1e:	3901      	subs	r1, #1
 8004a20:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004a24:	e79a      	b.n	800495c <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 8004a26:	2001      	movs	r0, #1
}
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a2c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a2e:	6a23      	ldr	r3, [r4, #32]
 8004a30:	f021 010f 	bic.w	r1, r1, #15
 8004a34:	3b01      	subs	r3, #1
 8004a36:	430b      	orrs	r3, r1
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	e7ac      	b.n	8004996 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004a42:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004a46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a4e:	432b      	orrs	r3, r5
 8004a50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004a54:	e7d9      	b.n	8004a0a <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a56:	4913      	ldr	r1, [pc, #76]	; (8004aa4 <HAL_ADC_Init+0x238>)
 8004a58:	6893      	ldr	r3, [r2, #8]
 8004a5a:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	07d9      	lsls	r1, r3, #31
 8004a60:	f53f af6e 	bmi.w	8004940 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a64:	4914      	ldr	r1, [pc, #80]	; (8004ab8 <HAL_ADC_Init+0x24c>)
 8004a66:	e765      	b.n	8004934 <HAL_ADC_Init+0xc8>
 8004a68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	07db      	lsls	r3, r3, #31
 8004a74:	f53f af64 	bmi.w	8004940 <HAL_ADC_Init+0xd4>
 8004a78:	e7f4      	b.n	8004a64 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a7a:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8004a7e:	6911      	ldr	r1, [r2, #16]
 8004a80:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004a82:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004a86:	f021 0104 	bic.w	r1, r1, #4
 8004a8a:	4333      	orrs	r3, r6
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a90:	432b      	orrs	r3, r5
 8004a92:	430b      	orrs	r3, r1
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6113      	str	r3, [r2, #16]
 8004a9a:	e775      	b.n	8004988 <HAL_ADC_Init+0x11c>
 8004a9c:	20000000 	.word	0x20000000
 8004aa0:	053e2d63 	.word	0x053e2d63
 8004aa4:	50000100 	.word	0x50000100
 8004aa8:	50000400 	.word	0x50000400
 8004aac:	50000600 	.word	0x50000600
 8004ab0:	50000700 	.word	0x50000700
 8004ab4:	fff04007 	.word	0xfff04007
 8004ab8:	50000300 	.word	0x50000300

08004abc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop

08004ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ac6:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8004aca:	b083      	sub	sp, #12
 8004acc:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004ace:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004ad0:	f04f 0000 	mov.w	r0, #0
 8004ad4:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004ad6:	f000 8150 	beq.w	8004d7a <HAL_ADC_ConfigChannel+0x2b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ada:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004adc:	2001      	movs	r0, #1
 8004ade:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ae2:	6894      	ldr	r4, [r2, #8]
 8004ae4:	0766      	lsls	r6, r4, #29
 8004ae6:	d450      	bmi.n	8004b8a <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(*preg,
 8004ae8:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004aec:	09a6      	lsrs	r6, r4, #6
 8004aee:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004af2:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8004af6:	f004 041f 	and.w	r4, r4, #31
 8004afa:	5977      	ldr	r7, [r6, r5]
 8004afc:	f04f 0c1f 	mov.w	ip, #31
 8004b00:	fa0c fc04 	lsl.w	ip, ip, r4
 8004b04:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004b08:	ea27 070c 	bic.w	r7, r7, ip
 8004b0c:	40a0      	lsls	r0, r4
 8004b0e:	4338      	orrs	r0, r7
 8004b10:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b12:	6890      	ldr	r0, [r2, #8]
 8004b14:	0745      	lsls	r5, r0, #29
 8004b16:	f140 80a5 	bpl.w	8004c64 <HAL_ADC_ConfigChannel+0x1a0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b1a:	6890      	ldr	r0, [r2, #8]
 8004b1c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b1e:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b20:	07e4      	lsls	r4, r4, #31
 8004b22:	d53b      	bpl.n	8004b9c <HAL_ADC_ConfigChannel+0xd8>
 8004b24:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b26:	49c2      	ldr	r1, [pc, #776]	; (8004e30 <HAL_ADC_ConfigChannel+0x36c>)
 8004b28:	420c      	tst	r4, r1
 8004b2a:	d02c      	beq.n	8004b86 <HAL_ADC_ConfigChannel+0xc2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b2c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004b30:	f000 8121 	beq.w	8004d76 <HAL_ADC_ConfigChannel+0x2b2>
 8004b34:	4dbf      	ldr	r5, [pc, #764]	; (8004e34 <HAL_ADC_ConfigChannel+0x370>)
 8004b36:	49c0      	ldr	r1, [pc, #768]	; (8004e38 <HAL_ADC_ConfigChannel+0x374>)
 8004b38:	48c0      	ldr	r0, [pc, #768]	; (8004e3c <HAL_ADC_ConfigChannel+0x378>)
 8004b3a:	42aa      	cmp	r2, r5
 8004b3c:	bf18      	it	ne
 8004b3e:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b40:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b42:	49bf      	ldr	r1, [pc, #764]	; (8004e40 <HAL_ADC_ConfigChannel+0x37c>)
 8004b44:	428c      	cmp	r4, r1
 8004b46:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8004b4a:	f000 8119 	beq.w	8004d80 <HAL_ADC_ConfigChannel+0x2bc>
 8004b4e:	49bd      	ldr	r1, [pc, #756]	; (8004e44 <HAL_ADC_ConfigChannel+0x380>)
 8004b50:	428c      	cmp	r4, r1
 8004b52:	f000 8115 	beq.w	8004d80 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b56:	49bc      	ldr	r1, [pc, #752]	; (8004e48 <HAL_ADC_ConfigChannel+0x384>)
 8004b58:	428c      	cmp	r4, r1
 8004b5a:	f040 814d 	bne.w	8004df8 <HAL_ADC_ConfigChannel+0x334>
 8004b5e:	01c0      	lsls	r0, r0, #7
 8004b60:	d411      	bmi.n	8004b86 <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b62:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004b66:	f000 822c 	beq.w	8004fc2 <HAL_ADC_ConfigChannel+0x4fe>
 8004b6a:	4cb2      	ldr	r4, [pc, #712]	; (8004e34 <HAL_ADC_ConfigChannel+0x370>)
 8004b6c:	49b2      	ldr	r1, [pc, #712]	; (8004e38 <HAL_ADC_ConfigChannel+0x374>)
 8004b6e:	48b3      	ldr	r0, [pc, #716]	; (8004e3c <HAL_ADC_ConfigChannel+0x378>)
 8004b70:	42a2      	cmp	r2, r4
 8004b72:	bf0c      	ite	eq
 8004b74:	460a      	moveq	r2, r1
 8004b76:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b78:	6891      	ldr	r1, [r2, #8]
 8004b7a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004b7e:	430d      	orrs	r5, r1
 8004b80:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 8004b84:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b86:	2000      	movs	r0, #0
}
 8004b88:	e003      	b.n	8004b92 <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b8c:	f042 0220 	orr.w	r2, r2, #32
 8004b90:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004b98:	b003      	add	sp, #12
 8004b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b9c:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004b9e:	4cab      	ldr	r4, [pc, #684]	; (8004e4c <HAL_ADC_ConfigChannel+0x388>)
 8004ba0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ba4:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8004e60 <HAL_ADC_ConfigChannel+0x39c>
 8004ba8:	f006 0718 	and.w	r7, r6, #24
 8004bac:	40fc      	lsrs	r4, r7
 8004bae:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8004bb2:	4004      	ands	r4, r0
 8004bb4:	ea25 0507 	bic.w	r5, r5, r7
 8004bb8:	432c      	orrs	r4, r5
 8004bba:	4566      	cmp	r6, ip
 8004bbc:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004bc0:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004bc2:	d1b0      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	f000 8104 	beq.w	8004dd2 <HAL_ADC_ConfigChannel+0x30e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	f000 819c 	beq.w	8004f0c <HAL_ADC_ConfigChannel+0x448>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004bd4:	fab4 f484 	clz	r4, r4
 8004bd8:	3401      	adds	r4, #1
 8004bda:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bde:	2c09      	cmp	r4, #9
 8004be0:	f240 8194 	bls.w	8004f0c <HAL_ADC_ConfigChannel+0x448>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	f000 81f0 	beq.w	8004fce <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8004bee:	fab5 f585 	clz	r5, r5
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	06ad      	lsls	r5, r5, #26
 8004bf6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004bfe:	2c00      	cmp	r4, #0
 8004c00:	f000 81e3 	beq.w	8004fca <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8004c04:	fab4 f484 	clz	r4, r4
 8004c08:	3401      	adds	r4, #1
 8004c0a:	f004 041f 	and.w	r4, r4, #31
 8004c0e:	2601      	movs	r6, #1
 8004c10:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c14:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	f000 81d3 	beq.w	8004fc6 <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 8004c20:	fab0 f480 	clz	r4, r0
 8004c24:	3401      	adds	r4, #1
 8004c26:	f004 041f 	and.w	r4, r4, #31
 8004c2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004c2e:	f1a4 001e 	sub.w	r0, r4, #30
 8004c32:	0500      	lsls	r0, r0, #20
 8004c34:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c38:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c3a:	0dc7      	lsrs	r7, r0, #23
 8004c3c:	f007 0704 	and.w	r7, r7, #4
 8004c40:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004c44:	688e      	ldr	r6, [r1, #8]
 8004c46:	597c      	ldr	r4, [r7, r5]
 8004c48:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8004c4c:	f04f 0c07 	mov.w	ip, #7
 8004c50:	fa0c fc00 	lsl.w	ip, ip, r0
 8004c54:	ea24 040c 	bic.w	r4, r4, ip
 8004c58:	fa06 f000 	lsl.w	r0, r6, r0
 8004c5c:	4320      	orrs	r0, r4
 8004c5e:	5178      	str	r0, [r7, r5]
 8004c60:	680c      	ldr	r4, [r1, #0]
}
 8004c62:	e760      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c64:	6890      	ldr	r0, [r2, #8]
 8004c66:	f010 0008 	ands.w	r0, r0, #8
 8004c6a:	f040 8082 	bne.w	8004d72 <HAL_ADC_ConfigChannel+0x2ae>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c6e:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004c70:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c72:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004c76:	f000 80f7 	beq.w	8004e68 <HAL_ADC_ConfigChannel+0x3a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c7a:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8004c7e:	f00c 0c04 	and.w	ip, ip, #4
 8004c82:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8004c86:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004c8a:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004c8e:	f04f 0e07 	mov.w	lr, #7
 8004c92:	fa0e fe06 	lsl.w	lr, lr, r6
 8004c96:	40b4      	lsls	r4, r6
 8004c98:	ea25 050e 	bic.w	r5, r5, lr
 8004c9c:	432c      	orrs	r4, r5
 8004c9e:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004ca2:	6954      	ldr	r4, [r2, #20]
 8004ca4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004ca8:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004caa:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004cae:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cb0:	f1bc 0f04 	cmp.w	ip, #4
 8004cb4:	d02e      	beq.n	8004d14 <HAL_ADC_ConfigChannel+0x250>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cb6:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8004cba:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004e64 <HAL_ADC_ConfigChannel+0x3a0>
 8004cbe:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8004cc2:	680f      	ldr	r7, [r1, #0]
 8004cc4:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004cc8:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004ccc:	694d      	ldr	r5, [r1, #20]
 8004cce:	0076      	lsls	r6, r6, #1
 8004cd0:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8004cd4:	40b5      	lsls	r5, r6
 8004cd6:	ea47 070e 	orr.w	r7, r7, lr
 8004cda:	433d      	orrs	r5, r7
 8004cdc:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8004ce0:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ce4:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004ce6:	698e      	ldr	r6, [r1, #24]
 8004ce8:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8004cec:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8004cf0:	4335      	orrs	r5, r6
 8004cf2:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004cf6:	690e      	ldr	r6, [r1, #16]
 8004cf8:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8004cfa:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8004cfe:	2f01      	cmp	r7, #1
 8004d00:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8004d04:	bf08      	it	eq
 8004d06:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8004d0a:	4328      	orrs	r0, r5
 8004d0c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8004d10:	6808      	ldr	r0, [r1, #0]
}
 8004d12:	e704      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d14:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d16:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004d18:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004d1a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d1e:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	f040 80b4 	bne.w	8004e90 <HAL_ADC_ConfigChannel+0x3cc>
 8004d28:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d2c:	42ac      	cmp	r4, r5
 8004d2e:	f000 8111 	beq.w	8004f54 <HAL_ADC_ConfigChannel+0x490>
 8004d32:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004d34:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d36:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d3a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004d3e:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8004d42:	42ae      	cmp	r6, r5
 8004d44:	f000 812b 	beq.w	8004f9e <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d48:	68a6      	ldr	r6, [r4, #8]
 8004d4a:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d4c:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d50:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004d54:	42ae      	cmp	r6, r5
 8004d56:	f000 8111 	beq.w	8004f7c <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d5a:	68e6      	ldr	r6, [r4, #12]
 8004d5c:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d5e:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d60:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004d64:	42b5      	cmp	r5, r6
 8004d66:	f47f aeda 	bne.w	8004b1e <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8004d6a:	6820      	ldr	r0, [r4, #0]
 8004d6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004d70:	6020      	str	r0, [r4, #0]
 8004d72:	6808      	ldr	r0, [r1, #0]
}
 8004d74:	e6d3      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x5a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d76:	4930      	ldr	r1, [pc, #192]	; (8004e38 <HAL_ADC_ConfigChannel+0x374>)
 8004d78:	e6e2      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8004d7a:	2002      	movs	r0, #2
}
 8004d7c:	b003      	add	sp, #12
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d80:	0201      	lsls	r1, r0, #8
 8004d82:	f53f af00 	bmi.w	8004b86 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d86:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004d8a:	d033      	beq.n	8004df4 <HAL_ADC_ConfigChannel+0x330>
 8004d8c:	4930      	ldr	r1, [pc, #192]	; (8004e50 <HAL_ADC_ConfigChannel+0x38c>)
 8004d8e:	428a      	cmp	r2, r1
 8004d90:	f47f aef9 	bne.w	8004b86 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d94:	4829      	ldr	r0, [pc, #164]	; (8004e3c <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d96:	4a2f      	ldr	r2, [pc, #188]	; (8004e54 <HAL_ADC_ConfigChannel+0x390>)
 8004d98:	4c2f      	ldr	r4, [pc, #188]	; (8004e58 <HAL_ADC_ConfigChannel+0x394>)
 8004d9a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004d9c:	6881      	ldr	r1, [r0, #8]
 8004d9e:	0992      	lsrs	r2, r2, #6
 8004da0:	fba4 4202 	umull	r4, r2, r4, r2
 8004da4:	0992      	lsrs	r2, r2, #6
 8004da6:	3201      	adds	r2, #1
 8004da8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004dac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004db0:	430d      	orrs	r5, r1
 8004db2:	0092      	lsls	r2, r2, #2
 8004db4:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 8004db8:	6085      	str	r5, [r0, #8]
 8004dba:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004dbc:	9a01      	ldr	r2, [sp, #4]
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	f43f aee1 	beq.w	8004b86 <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 8004dc4:	9a01      	ldr	r2, [sp, #4]
 8004dc6:	3a01      	subs	r2, #1
 8004dc8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004dca:	9a01      	ldr	r2, [sp, #4]
 8004dcc:	2a00      	cmp	r2, #0
 8004dce:	d1f9      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x300>
 8004dd0:	e6d9      	b.n	8004b86 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dd2:	0e80      	lsrs	r0, r0, #26
 8004dd4:	1c44      	adds	r4, r0, #1
 8004dd6:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dda:	2e09      	cmp	r6, #9
 8004ddc:	f200 8088 	bhi.w	8004ef0 <HAL_ADC_ConfigChannel+0x42c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004de0:	06a5      	lsls	r5, r4, #26
 8004de2:	2401      	movs	r4, #1
 8004de4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004de8:	40b4      	lsls	r4, r6
 8004dea:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004dee:	4325      	orrs	r5, r4
 8004df0:	0500      	lsls	r0, r0, #20
 8004df2:	e721      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004df4:	4810      	ldr	r0, [pc, #64]	; (8004e38 <HAL_ADC_ConfigChannel+0x374>)
 8004df6:	e7ce      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004df8:	4918      	ldr	r1, [pc, #96]	; (8004e5c <HAL_ADC_ConfigChannel+0x398>)
 8004dfa:	428c      	cmp	r4, r1
 8004dfc:	f47f aec3 	bne.w	8004b86 <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e00:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004e04:	f47f aebf 	bne.w	8004b86 <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e08:	490a      	ldr	r1, [pc, #40]	; (8004e34 <HAL_ADC_ConfigChannel+0x370>)
 8004e0a:	428a      	cmp	r2, r1
 8004e0c:	f43f aebb 	beq.w	8004b86 <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e10:	4c0a      	ldr	r4, [pc, #40]	; (8004e3c <HAL_ADC_ConfigChannel+0x378>)
 8004e12:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8004e16:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004e1a:	bf18      	it	ne
 8004e1c:	4621      	movne	r1, r4
 8004e1e:	688a      	ldr	r2, [r1, #8]
 8004e20:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004e24:	432a      	orrs	r2, r5
 8004e26:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004e2a:	608a      	str	r2, [r1, #8]
}
 8004e2c:	e6b1      	b.n	8004b92 <HAL_ADC_ConfigChannel+0xce>
 8004e2e:	bf00      	nop
 8004e30:	80080000 	.word	0x80080000
 8004e34:	50000100 	.word	0x50000100
 8004e38:	50000300 	.word	0x50000300
 8004e3c:	50000700 	.word	0x50000700
 8004e40:	c3210000 	.word	0xc3210000
 8004e44:	90c00010 	.word	0x90c00010
 8004e48:	c7520000 	.word	0xc7520000
 8004e4c:	0007ffff 	.word	0x0007ffff
 8004e50:	50000600 	.word	0x50000600
 8004e54:	20000000 	.word	0x20000000
 8004e58:	053e2d63 	.word	0x053e2d63
 8004e5c:	cb840000 	.word	0xcb840000
 8004e60:	407f0000 	.word	0x407f0000
 8004e64:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e68:	0df5      	lsrs	r5, r6, #23
 8004e6a:	f102 0414 	add.w	r4, r2, #20
 8004e6e:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8004e72:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004e76:	592f      	ldr	r7, [r5, r4]
 8004e78:	f04f 0c07 	mov.w	ip, #7
 8004e7c:	fa0c f606 	lsl.w	r6, ip, r6
 8004e80:	ea27 0606 	bic.w	r6, r7, r6
 8004e84:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e86:	6954      	ldr	r4, [r2, #20]
 8004e88:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004e8c:	6154      	str	r4, [r2, #20]
}
 8004e8e:	e70c      	b.n	8004caa <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004e94:	b11d      	cbz	r5, 8004e9e <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8004e96:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e9a:	42ac      	cmp	r4, r5
 8004e9c:	d05a      	beq.n	8004f54 <HAL_ADC_ConfigChannel+0x490>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e9e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004ea0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ea2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ea6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004eaa:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004eb2:	b11d      	cbz	r5, 8004ebc <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8004eb4:	fab5 f585 	clz	r5, r5
 8004eb8:	42ae      	cmp	r6, r5
 8004eba:	d070      	beq.n	8004f9e <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ebc:	68a5      	ldr	r5, [r4, #8]
 8004ebe:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ec0:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ec4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004ecc:	b11d      	cbz	r5, 8004ed6 <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 8004ece:	fab5 f585 	clz	r5, r5
 8004ed2:	42ae      	cmp	r6, r5
 8004ed4:	d052      	beq.n	8004f7c <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ed6:	68e5      	ldr	r5, [r4, #12]
 8004ed8:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eda:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004edc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004ee4:	2d00      	cmp	r5, #0
 8004ee6:	f43f ae1a 	beq.w	8004b1e <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8004eea:	fab5 f585 	clz	r5, r5
 8004eee:	e739      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x2a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ef0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004ef4:	06a5      	lsls	r5, r4, #26
 8004ef6:	381e      	subs	r0, #30
 8004ef8:	2401      	movs	r4, #1
 8004efa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004efe:	fa04 f606 	lsl.w	r6, r4, r6
 8004f02:	0500      	lsls	r0, r0, #20
 8004f04:	4335      	orrs	r5, r6
 8004f06:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004f0a:	e695      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	d064      	beq.n	8004fde <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8004f14:	fab5 f585 	clz	r5, r5
 8004f18:	3501      	adds	r5, #1
 8004f1a:	06ad      	lsls	r5, r5, #26
 8004f1c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f20:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004f24:	2c00      	cmp	r4, #0
 8004f26:	d058      	beq.n	8004fda <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8004f28:	fab4 f484 	clz	r4, r4
 8004f2c:	3401      	adds	r4, #1
 8004f2e:	f004 041f 	and.w	r4, r4, #31
 8004f32:	2601      	movs	r6, #1
 8004f34:	fa06 f404 	lsl.w	r4, r6, r4
 8004f38:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d048      	beq.n	8004fd4 <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 8004f42:	fab0 f480 	clz	r4, r0
 8004f46:	3401      	adds	r4, #1
 8004f48:	f004 041f 	and.w	r4, r4, #31
 8004f4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004f50:	0520      	lsls	r0, r4, #20
 8004f52:	e671      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 8004f54:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004f56:	4614      	mov	r4, r2
 8004f58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f5c:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f60:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f62:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8004f64:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8004f66:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f6a:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f6e:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	d19b      	bne.n	8004eae <HAL_ADC_ConfigChannel+0x3ea>
 8004f76:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004f7a:	e6e2      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f82:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f84:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f86:	68e5      	ldr	r5, [r4, #12]
 8004f88:	68e6      	ldr	r6, [r4, #12]
 8004f8a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f8e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f92:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f94:	2d00      	cmp	r5, #0
 8004f96:	d1a3      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x41c>
 8004f98:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004f9c:	e6e2      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(*preg,
 8004f9e:	6838      	ldr	r0, [r7, #0]
 8004fa0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004fa4:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fa6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fa8:	68a5      	ldr	r5, [r4, #8]
 8004faa:	68a6      	ldr	r6, [r4, #8]
 8004fac:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fb0:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fb4:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	d185      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x404>
 8004fbc:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004fc0:	e6c8      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x290>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fc2:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <HAL_ADC_ConfigChannel+0x520>)
 8004fc4:	e5d8      	b.n	8004b78 <HAL_ADC_ConfigChannel+0xb4>
 8004fc6:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <HAL_ADC_ConfigChannel+0x524>)
 8004fc8:	e636      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x174>
 8004fca:	2402      	movs	r4, #2
 8004fcc:	e622      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x150>
 8004fce:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004fd2:	e612      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x136>
 8004fd4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004fd8:	e62e      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x174>
 8004fda:	2402      	movs	r4, #2
 8004fdc:	e7ac      	b.n	8004f38 <HAL_ADC_ConfigChannel+0x474>
 8004fde:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004fe2:	e79d      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x45c>
 8004fe4:	50000300 	.word	0x50000300
 8004fe8:	fe500000 	.word	0xfe500000

08004fec <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fec:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	07d1      	lsls	r1, r2, #31
 8004ff2:	d501      	bpl.n	8004ff8 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ff4:	2000      	movs	r0, #0
}
 8004ff6:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ff8:	6899      	ldr	r1, [r3, #8]
 8004ffa:	4a19      	ldr	r2, [pc, #100]	; (8005060 <ADC_Enable+0x74>)
 8004ffc:	4211      	tst	r1, r2
{
 8004ffe:	b570      	push	{r4, r5, r6, lr}
 8005000:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005002:	d122      	bne.n	800504a <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	4d17      	ldr	r5, [pc, #92]	; (8005064 <ADC_Enable+0x78>)
 8005008:	402a      	ands	r2, r5
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005010:	f7ff fc14 	bl	800483c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005014:	6833      	ldr	r3, [r6, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 800501a:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800501c:	d413      	bmi.n	8005046 <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800501e:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005020:	07d0      	lsls	r0, r2, #31
 8005022:	d404      	bmi.n	800502e <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	402a      	ands	r2, r5
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800502e:	f7ff fc05 	bl	800483c <HAL_GetTick>
 8005032:	1b03      	subs	r3, r0, r4
 8005034:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005036:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005038:	d902      	bls.n	8005040 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	07d1      	lsls	r1, r2, #31
 800503e:	d504      	bpl.n	800504a <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	07d2      	lsls	r2, r2, #31
 8005044:	d5eb      	bpl.n	800501e <ADC_Enable+0x32>
  return HAL_OK;
 8005046:	2000      	movs	r0, #0
}
 8005048:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800504a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800504c:	f043 0310 	orr.w	r3, r3, #16
 8005050:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005052:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800505a:	2001      	movs	r0, #1
}
 800505c:	bd70      	pop	{r4, r5, r6, pc}
 800505e:	bf00      	nop
 8005060:	8000003f 	.word	0x8000003f
 8005064:	7fffffc0 	.word	0x7fffffc0

08005068 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005068:	6803      	ldr	r3, [r0, #0]
 800506a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800506e:	b570      	push	{r4, r5, r6, lr}
 8005070:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005072:	d04d      	beq.n	8005110 <HAL_ADC_Start+0xa8>
 8005074:	483a      	ldr	r0, [pc, #232]	; (8005160 <HAL_ADC_Start+0xf8>)
 8005076:	4a3b      	ldr	r2, [pc, #236]	; (8005164 <HAL_ADC_Start+0xfc>)
 8005078:	493b      	ldr	r1, [pc, #236]	; (8005168 <HAL_ADC_Start+0x100>)
 800507a:	4283      	cmp	r3, r0
 800507c:	bf18      	it	ne
 800507e:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005080:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005082:	689d      	ldr	r5, [r3, #8]
 8005084:	f015 0504 	ands.w	r5, r5, #4
 8005088:	d140      	bne.n	800510c <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 800508a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800508e:	2b01      	cmp	r3, #1
 8005090:	d03c      	beq.n	800510c <HAL_ADC_Start+0xa4>
 8005092:	2301      	movs	r3, #1
 8005094:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff ffa7 	bl	8004fec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800509e:	2800      	cmp	r0, #0
 80050a0:	d138      	bne.n	8005114 <HAL_ADC_Start+0xac>
      ADC_STATE_CLR_SET(hadc->State,
 80050a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050a4:	6822      	ldr	r2, [r4, #0]
 80050a6:	492e      	ldr	r1, [pc, #184]	; (8005160 <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 80050a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050b4:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80050b6:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 80050ba:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050bc:	d045      	beq.n	800514a <HAL_ADC_Start+0xe2>
 80050be:	4b2b      	ldr	r3, [pc, #172]	; (800516c <HAL_ADC_Start+0x104>)
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d047      	beq.n	8005154 <HAL_ADC_Start+0xec>
 80050c4:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050cc:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050d0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050d4:	bf1c      	itt	ne
 80050d6:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80050d8:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80050dc:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050de:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 80050e0:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050e2:	428a      	cmp	r2, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050e4:	6015      	str	r5, [r2, #0]
      __HAL_UNLOCK(hadc);
 80050e6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050ea:	d01c      	beq.n	8005126 <HAL_ADC_Start+0xbe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050ec:	2e09      	cmp	r6, #9
 80050ee:	d914      	bls.n	800511a <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80050f8:	68cb      	ldr	r3, [r1, #12]
 80050fa:	019b      	lsls	r3, r3, #6
 80050fc:	d505      	bpl.n	800510a <HAL_ADC_Start+0xa2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005108:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800510a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 800510c:	2002      	movs	r0, #2
}
 800510e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005110:	4a14      	ldr	r2, [pc, #80]	; (8005164 <HAL_ADC_Start+0xfc>)
 8005112:	e7b5      	b.n	8005080 <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 8005114:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8005118:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800511a:	f240 2321 	movw	r3, #545	; 0x221
 800511e:	fa23 f606 	lsr.w	r6, r3, r6
 8005122:	07f5      	lsls	r5, r6, #31
 8005124:	d5e4      	bpl.n	80050f0 <HAL_ADC_Start+0x88>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005126:	68d3      	ldr	r3, [r2, #12]
 8005128:	0199      	lsls	r1, r3, #6
 800512a:	d505      	bpl.n	8005138 <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800512c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800512e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005136:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8005138:	6893      	ldr	r3, [r2, #8]
 800513a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800513e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005142:	f043 0304 	orr.w	r3, r3, #4
 8005146:	6093      	str	r3, [r2, #8]
}
 8005148:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800514a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800514e:	2e00      	cmp	r6, #0
 8005150:	d1bd      	bne.n	80050ce <HAL_ADC_Start+0x66>
 8005152:	e7b8      	b.n	80050c6 <HAL_ADC_Start+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005154:	f501 7140 	add.w	r1, r1, #768	; 0x300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005158:	2e00      	cmp	r6, #0
 800515a:	d1b8      	bne.n	80050ce <HAL_ADC_Start+0x66>
 800515c:	e7b3      	b.n	80050c6 <HAL_ADC_Start+0x5e>
 800515e:	bf00      	nop
 8005160:	50000100 	.word	0x50000100
 8005164:	50000300 	.word	0x50000300
 8005168:	50000700 	.word	0x50000700
 800516c:	50000500 	.word	0x50000500

08005170 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005170:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005172:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005176:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8005178:	2b01      	cmp	r3, #1
{
 800517a:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 800517c:	d04d      	beq.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0xaa>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800517e:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005180:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8005182:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005184:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005188:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 800518a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800518e:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005190:	d00c      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8005192:	4d4a      	ldr	r5, [pc, #296]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005194:	42aa      	cmp	r2, r5
 8005196:	d03e      	beq.n	8005216 <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005198:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800519a:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800519e:	f042 0220 	orr.w	r2, r2, #32
 80051a2:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	b01c      	add	sp, #112	; 0x70
 80051a8:	bcf0      	pop	{r4, r5, r6, r7}
 80051aa:	4770      	bx	lr
 80051ac:	4b44      	ldr	r3, [pc, #272]	; (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	075b      	lsls	r3, r3, #29
 80051b2:	d50c      	bpl.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 80051b4:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80051b8:	f043 0320 	orr.w	r3, r3, #32
 80051bc:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 80051c0:	2200      	movs	r2, #0
 80051c2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	b01c      	add	sp, #112	; 0x70
 80051ca:	bcf0      	pop	{r4, r5, r6, r7}
 80051cc:	4770      	bx	lr
 80051ce:	6893      	ldr	r3, [r2, #8]
 80051d0:	075c      	lsls	r4, r3, #29
 80051d2:	d4f0      	bmi.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051d4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80051d8:	d024      	beq.n	8005224 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 80051da:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80051dc:	429a      	cmp	r2, r3
 80051de:	d021      	beq.n	8005224 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	d153      	bne.n	800528c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80051e4:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051e6:	4c35      	ldr	r4, [pc, #212]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80051e8:	6893      	ldr	r3, [r2, #8]
 80051ea:	4d37      	ldr	r5, [pc, #220]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80051ec:	4937      	ldr	r1, [pc, #220]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80051ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
 80051f4:	68a4      	ldr	r4, [r4, #8]
 80051f6:	68ab      	ldr	r3, [r5, #8]
 80051f8:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051fa:	4323      	orrs	r3, r4
 80051fc:	430b      	orrs	r3, r1
 80051fe:	43db      	mvns	r3, r3
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	b37b      	cbz	r3, 8005266 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800520c:	f023 030f 	bic.w	r3, r3, #15
 8005210:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e7d4      	b.n	80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8005216:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005218:	e7c9      	b.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 800521a:	2302      	movs	r3, #2
}
 800521c:	4618      	mov	r0, r3
 800521e:	b01c      	add	sp, #112	; 0x70
 8005220:	bcf0      	pop	{r4, r5, r6, r7}
 8005222:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005224:	b30e      	cbz	r6, 800526a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005226:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8005228:	684d      	ldr	r5, [r1, #4]
 800522a:	6893      	ldr	r3, [r2, #8]
 800522c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8005230:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005234:	432b      	orrs	r3, r5
 8005236:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 800523a:	6093      	str	r3, [r2, #8]
 800523c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005240:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005242:	6894      	ldr	r4, [r2, #8]
 8005244:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005246:	4323      	orrs	r3, r4
 8005248:	43db      	mvns	r3, r3
 800524a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	b143      	cbz	r3, 8005266 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        MODIFY_REG(tmpADC_Common->CCR,
 8005254:	6894      	ldr	r4, [r2, #8]
 8005256:	688b      	ldr	r3, [r1, #8]
 8005258:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 800525c:	431e      	orrs	r6, r3
 800525e:	f021 010f 	bic.w	r1, r1, #15
 8005262:	430e      	orrs	r6, r1
 8005264:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e7aa      	b.n	80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 800526c:	6893      	ldr	r3, [r2, #8]
 800526e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005272:	6093      	str	r3, [r2, #8]
 8005274:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005278:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800527a:	6891      	ldr	r1, [r2, #8]
 800527c:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800527e:	430b      	orrs	r3, r1
 8005280:	43db      	mvns	r3, r3
 8005282:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	e7bb      	b.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800528c:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800528e:	684d      	ldr	r5, [r1, #4]
 8005290:	6893      	ldr	r3, [r2, #8]
 8005292:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8005296:	4f0c      	ldr	r7, [pc, #48]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005298:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800529c:	432b      	orrs	r3, r5
 800529e:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 80052a2:	4d06      	ldr	r5, [pc, #24]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	4c09      	ldr	r4, [pc, #36]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80052a8:	68ad      	ldr	r5, [r5, #8]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	68a4      	ldr	r4, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052ae:	432b      	orrs	r3, r5
 80052b0:	4323      	orrs	r3, r4
 80052b2:	43db      	mvns	r3, r3
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	e7cb      	b.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80052ba:	bf00      	nop
 80052bc:	50000400 	.word	0x50000400
 80052c0:	50000100 	.word	0x50000100
 80052c4:	50000700 	.word	0x50000700
 80052c8:	50000500 	.word	0x50000500
 80052cc:	50000600 	.word	0x50000600
 80052d0:	50000300 	.word	0x50000300

080052d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052d4:	4908      	ldr	r1, [pc, #32]	; (80052f8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80052d6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d8:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052da:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052dc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80052e0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052e2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80052f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80052f4:	60cb      	str	r3, [r1, #12]
 80052f6:	4770      	bx	lr
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052fc:	4b19      	ldr	r3, [pc, #100]	; (8005364 <HAL_NVIC_SetPriority+0x68>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005304:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005306:	f1c3 0507 	rsb	r5, r3, #7
 800530a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800530c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005310:	bf28      	it	cs
 8005312:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005314:	2c06      	cmp	r4, #6
 8005316:	d919      	bls.n	800534c <HAL_NVIC_SetPriority+0x50>
 8005318:	3b03      	subs	r3, #3
 800531a:	f04f 34ff 	mov.w	r4, #4294967295
 800531e:	409c      	lsls	r4, r3
 8005320:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005324:	f04f 34ff 	mov.w	r4, #4294967295
 8005328:	40ac      	lsls	r4, r5
 800532a:	ea21 0104 	bic.w	r1, r1, r4
 800532e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005330:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005332:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005336:	db0c      	blt.n	8005352 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005338:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800533c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005340:	0109      	lsls	r1, r1, #4
 8005342:	b2c9      	uxtb	r1, r1
 8005344:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005348:	bc30      	pop	{r4, r5}
 800534a:	4770      	bx	lr
 800534c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534e:	4613      	mov	r3, r2
 8005350:	e7e8      	b.n	8005324 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_NVIC_SetPriority+0x6c>)
 8005354:	f000 000f 	and.w	r0, r0, #15
 8005358:	0109      	lsls	r1, r1, #4
 800535a:	4403      	add	r3, r0
 800535c:	b2c9      	uxtb	r1, r1
 800535e:	7619      	strb	r1, [r3, #24]
 8005360:	bc30      	pop	{r4, r5}
 8005362:	4770      	bx	lr
 8005364:	e000ed00 	.word	0xe000ed00
 8005368:	e000ecfc 	.word	0xe000ecfc

0800536c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800536c:	2800      	cmp	r0, #0
 800536e:	db07      	blt.n	8005380 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005370:	4a04      	ldr	r2, [pc, #16]	; (8005384 <HAL_NVIC_EnableIRQ+0x18>)
 8005372:	f000 011f 	and.w	r1, r0, #31
 8005376:	2301      	movs	r3, #1
 8005378:	0940      	lsrs	r0, r0, #5
 800537a:	408b      	lsls	r3, r1
 800537c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	e000e100 	.word	0xe000e100

08005388 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005388:	3801      	subs	r0, #1
 800538a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800538e:	d20e      	bcs.n	80053ae <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005392:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005394:	4c08      	ldr	r4, [pc, #32]	; (80053b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005396:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005398:	20f0      	movs	r0, #240	; 0xf0
 800539a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800539e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053a0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a4:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80053a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053aa:	6019      	str	r1, [r3, #0]
 80053ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80053ae:	2001      	movs	r0, #1
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	e000e010 	.word	0xe000e010
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053bc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80053c0:	2a02      	cmp	r2, #2
{
 80053c2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053c4:	d009      	beq.n	80053da <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c6:	2204      	movs	r2, #4
 80053c8:	63c2      	str	r2, [r0, #60]	; 0x3c
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053ca:	2101      	movs	r1, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80053cc:	2200      	movs	r2, #0
    status = HAL_ERROR;
 80053ce:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80053d0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80053d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 80053d8:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053da:	6802      	ldr	r2, [r0, #0]
{
 80053dc:	b470      	push	{r4, r5, r6}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053de:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e0:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e4:	f020 000e 	bic.w	r0, r0, #14
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053e8:	e9d3 5110 	ldrd	r5, r1, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ec:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80053f4:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 80053f6:	6814      	ldr	r4, [r2, #0]
     if (hdma->DMAmuxRequestGen != 0U)
 80053f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
     __HAL_DMA_DISABLE(hdma);
 80053fa:	f024 0401 	bic.w	r4, r4, #1
 80053fe:	6014      	str	r4, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005400:	f001 011f 	and.w	r1, r1, #31
 8005404:	2201      	movs	r2, #1
 8005406:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005408:	6d19      	ldr	r1, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800540a:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800540c:	6071      	str	r1, [r6, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800540e:	b138      	cbz	r0, 8005420 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005410:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005412:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800541a:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800541e:	604c      	str	r4, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8005420:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005422:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005424:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800542c:	bc70      	pop	{r4, r5, r6}
 800542e:	4770      	bx	lr

08005430 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005430:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005434:	2a02      	cmp	r2, #2
{
 8005436:	4603      	mov	r3, r0
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005438:	d009      	beq.n	800544e <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800543a:	2201      	movs	r2, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800543c:	2004      	movs	r0, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800543e:	2100      	movs	r1, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005440:	63d8      	str	r0, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005442:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005446:	4610      	mov	r0, r2
    hdma->State = HAL_DMA_STATE_READY;
 8005448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800544c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800544e:	6802      	ldr	r2, [r0, #0]
{
 8005450:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005452:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005454:	6810      	ldr	r0, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005456:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005458:	f020 000e 	bic.w	r0, r0, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800545c:	e9d3 4110 	ldrd	r4, r1, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005460:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005462:	6810      	ldr	r0, [r2, #0]
 8005464:	f020 0001 	bic.w	r0, r0, #1
 8005468:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800546a:	682a      	ldr	r2, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800546c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800546e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005472:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005474:	f001 011f 	and.w	r1, r1, #31
 8005478:	2201      	movs	r2, #1
 800547a:	408a      	lsls	r2, r1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800547c:	6d19      	ldr	r1, [r3, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800547e:	6062      	str	r2, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005480:	6071      	str	r1, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005482:	b130      	cbz	r0, 8005492 <HAL_DMA_Abort_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005484:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005486:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800548a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800548e:	6002      	str	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005490:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8005492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005494:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8005496:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005498:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800549c:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80054a0:	b11a      	cbz	r2, 80054aa <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80054a2:	4618      	mov	r0, r3
 80054a4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	4620      	mov	r0, r4
}
 80054a8:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	4610      	mov	r0, r2
}
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	bf00      	nop

080054b0 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80054b0:	2800      	cmp	r0, #0
 80054b2:	f000 8143 	beq.w	800573c <HAL_FDCAN_Init+0x28c>
{
 80054b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80054ba:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80054be:	4604      	mov	r4, r0
 80054c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d073      	beq.n	80055b0 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	6993      	ldr	r3, [r2, #24]
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054d2:	f7ff f9b3 	bl	800483c <HAL_GetTick>
 80054d6:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054d8:	e004      	b.n	80054e4 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054da:	f7ff f9af 	bl	800483c <HAL_GetTick>
 80054de:	1b43      	subs	r3, r0, r5
 80054e0:	2b0a      	cmp	r3, #10
 80054e2:	d85b      	bhi.n	800559c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	0712      	lsls	r2, r2, #28
 80054ea:	d4f6      	bmi.n	80054da <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054f4:	f7ff f9a2 	bl	800483c <HAL_GetTick>
 80054f8:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80054fa:	e004      	b.n	8005506 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80054fc:	f7ff f99e 	bl	800483c <HAL_GetTick>
 8005500:	1b40      	subs	r0, r0, r5
 8005502:	280a      	cmp	r0, #10
 8005504:	d84a      	bhi.n	800559c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005506:	6822      	ldr	r2, [r4, #0]
 8005508:	6993      	ldr	r3, [r2, #24]
 800550a:	07db      	lsls	r3, r3, #31
 800550c:	d5f6      	bpl.n	80054fc <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800550e:	6993      	ldr	r3, [r2, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005510:	4993      	ldr	r1, [pc, #588]	; (8005760 <HAL_FDCAN_Init+0x2b0>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005512:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8005516:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005518:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 800551a:	f000 810b 	beq.w	8005734 <HAL_FDCAN_Init+0x284>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800551e:	7c23      	ldrb	r3, [r4, #16]
 8005520:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005522:	6993      	ldr	r3, [r2, #24]
 8005524:	bf0c      	ite	eq
 8005526:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800552a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800552e:	6193      	str	r3, [r2, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005530:	7c63      	ldrb	r3, [r4, #17]
 8005532:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005534:	6993      	ldr	r3, [r2, #24]
 8005536:	bf0c      	ite	eq
 8005538:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800553c:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8005540:	6193      	str	r3, [r2, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005542:	7ca3      	ldrb	r3, [r4, #18]
 8005544:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005546:	6993      	ldr	r3, [r2, #24]
 8005548:	bf0c      	ite	eq
 800554a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800554e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005552:	6193      	str	r3, [r2, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005554:	6993      	ldr	r3, [r2, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005556:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800555a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555e:	432b      	orrs	r3, r5
 8005560:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005562:	6993      	ldr	r3, [r2, #24]
 8005564:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8005568:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800556a:	6913      	ldr	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800556c:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800556e:	f023 0310 	bic.w	r3, r3, #16
 8005572:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005574:	d021      	beq.n	80055ba <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005576:	b321      	cbz	r1, 80055c2 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005578:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800557a:	6993      	ldr	r3, [r2, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800557c:	f000 80ec 	beq.w	8005758 <HAL_FDCAN_Init+0x2a8>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005584:	6193      	str	r3, [r2, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005586:	6913      	ldr	r3, [r2, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005588:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800558a:	f043 0310 	orr.w	r3, r3, #16
 800558e:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005590:	d117      	bne.n	80055c2 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005592:	6993      	ldr	r3, [r2, #24]
 8005594:	f043 0320 	orr.w	r3, r3, #32
 8005598:	6193      	str	r3, [r2, #24]
 800559a:	e012      	b.n	80055c2 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800559c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800559e:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055a6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80055aa:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80055ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80055b0:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80055b4:	f7fc fc26 	bl	8001e04 <HAL_FDCAN_MspInit>
 80055b8:	e786      	b.n	80054c8 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80055ba:	6993      	ldr	r3, [r2, #24]
 80055bc:	f043 0304 	orr.w	r3, r3, #4
 80055c0:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055c2:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055c6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055c8:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055ca:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055ce:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80055d2:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055d4:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055d6:	4303      	orrs	r3, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80055d8:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80055de:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055e2:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80055e4:	d10e      	bne.n	8005604 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80055e6:	e9d4 530b 	ldrd	r5, r3, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80055ea:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80055ee:	3b01      	subs	r3, #1
 80055f0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80055f2:	3d01      	subs	r5, #1
 80055f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80055f8:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80055fa:	4303      	orrs	r3, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80055fc:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80055fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005602:	60d3      	str	r3, [r2, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005604:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005608:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800560a:	4956      	ldr	r1, [pc, #344]	; (8005764 <HAL_FDCAN_Init+0x2b4>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800560c:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 800560e:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005610:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8005614:	f000 8094 	beq.w	8005740 <HAL_FDCAN_Init+0x290>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005618:	4d53      	ldr	r5, [pc, #332]	; (8005768 <HAL_FDCAN_Init+0x2b8>)
 800561a:	4854      	ldr	r0, [pc, #336]	; (800576c <HAL_FDCAN_Init+0x2bc>)
 800561c:	4b54      	ldr	r3, [pc, #336]	; (8005770 <HAL_FDCAN_Init+0x2c0>)
 800561e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800578c <HAL_FDCAN_Init+0x2dc>
 8005622:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8005790 <HAL_FDCAN_Init+0x2e0>
 8005626:	4f53      	ldr	r7, [pc, #332]	; (8005774 <HAL_FDCAN_Init+0x2c4>)
 8005628:	f8df c168 	ldr.w	ip, [pc, #360]	; 8005794 <HAL_FDCAN_Init+0x2e4>
 800562c:	f8df e168 	ldr.w	lr, [pc, #360]	; 8005798 <HAL_FDCAN_Init+0x2e8>
 8005630:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800579c <HAL_FDCAN_Init+0x2ec>
 8005634:	4e50      	ldr	r6, [pc, #320]	; (8005778 <HAL_FDCAN_Init+0x2c8>)
 8005636:	42aa      	cmp	r2, r5
 8005638:	f501 4186 	add.w	r1, r1, #17152	; 0x4300
 800563c:	f505 5561 	add.w	r5, r5, #14400	; 0x3840
 8005640:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8005644:	bf18      	it	ne
 8005646:	4607      	movne	r7, r0
 8005648:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800564c:	f100 00d8 	add.w	r0, r0, #216	; 0xd8
 8005650:	bf18      	it	ne
 8005652:	4698      	movne	r8, r3
 8005654:	f1a3 03b0 	sub.w	r3, r3, #176	; 0xb0
 8005658:	bf03      	ittte	eq
 800565a:	46c6      	moveq	lr, r8
 800565c:	46d4      	moveq	ip, sl
 800565e:	4688      	moveq	r8, r1
 8005660:	46a9      	movne	r9, r5
 8005662:	f1a1 01b0 	sub.w	r1, r1, #176	; 0xb0
 8005666:	bf1c      	itt	ne
 8005668:	4606      	movne	r6, r0
 800566a:	4619      	movne	r1, r3

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800566c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8005670:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005672:	6421      	str	r1, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005674:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8005678:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800567c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005680:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 8005684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005686:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800568a:	1e70      	subs	r0, r6, #1
 800568c:	1a40      	subs	r0, r0, r1
 800568e:	f025 6970 	bic.w	r9, r5, #251658240	; 0xf000000
 8005692:	0885      	lsrs	r5, r0, #2
 8005694:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
 8005698:	3501      	adds	r5, #1
 800569a:	f101 0901 	add.w	r9, r1, #1
 800569e:	454e      	cmp	r6, r9
 80056a0:	bf38      	it	cc
 80056a2:	2501      	movcc	r5, #1
 80056a4:	2817      	cmp	r0, #23
 80056a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80056aa:	e9c4 8e12 	strd	r8, lr, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80056ae:	e9c4 c714 	strd	ip, r7, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80056b2:	f3c1 0380 	ubfx	r3, r1, #2, #1
 80056b6:	d91a      	bls.n	80056ee <HAL_FDCAN_Init+0x23e>
 80056b8:	454e      	cmp	r6, r9
 80056ba:	bf2c      	ite	cs
 80056bc:	2200      	movcs	r2, #0
 80056be:	2201      	movcc	r2, #1
 80056c0:	b9aa      	cbnz	r2, 80056ee <HAL_FDCAN_Init+0x23e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80056c2:	460f      	mov	r7, r1
 80056c4:	b10b      	cbz	r3, 80056ca <HAL_FDCAN_Init+0x21a>
 80056c6:	f847 2b04 	str.w	r2, [r7], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80056ca:	1aed      	subs	r5, r5, r3
 80056cc:	086a      	lsrs	r2, r5, #1
 80056ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80056d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80056d6:	2000      	movs	r0, #0
 80056d8:	2100      	movs	r1, #0
 80056da:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d1fb      	bne.n	80056da <HAL_FDCAN_Init+0x22a>
 80056e2:	f025 0301 	bic.w	r3, r5, #1
 80056e6:	429d      	cmp	r5, r3
 80056e8:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80056ec:	d01a      	beq.n	8005724 <HAL_FDCAN_Init+0x274>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80056ee:	460a      	mov	r2, r1
 80056f0:	2300      	movs	r3, #0
 80056f2:	f842 3b04 	str.w	r3, [r2], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80056f6:	4296      	cmp	r6, r2
 80056f8:	d914      	bls.n	8005724 <HAL_FDCAN_Init+0x274>
 80056fa:	f101 0208 	add.w	r2, r1, #8
 80056fe:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005700:	604b      	str	r3, [r1, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005702:	d90f      	bls.n	8005724 <HAL_FDCAN_Init+0x274>
 8005704:	f101 020c 	add.w	r2, r1, #12
 8005708:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800570a:	608b      	str	r3, [r1, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800570c:	d90a      	bls.n	8005724 <HAL_FDCAN_Init+0x274>
 800570e:	f101 0210 	add.w	r2, r1, #16
 8005712:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005714:	60cb      	str	r3, [r1, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005716:	d905      	bls.n	8005724 <HAL_FDCAN_Init+0x274>
 8005718:	f101 0214 	add.w	r2, r1, #20
 800571c:	4296      	cmp	r6, r2
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800571e:	610b      	str	r3, [r1, #16]
 8005720:	bf88      	it	hi
 8005722:	614b      	strhi	r3, [r1, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8005724:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005726:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005728:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800572a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 800572e:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_FDCAN_Init+0x2cc>)
 8005736:	6861      	ldr	r1, [r4, #4]
 8005738:	6019      	str	r1, [r3, #0]
 800573a:	e6f0      	b.n	800551e <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 800573c:	2001      	movs	r0, #1
}
 800573e:	4770      	bx	lr
 8005740:	4f0f      	ldr	r7, [pc, #60]	; (8005780 <HAL_FDCAN_Init+0x2d0>)
 8005742:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80057a0 <HAL_FDCAN_Init+0x2f0>
 8005746:	f8df e05c 	ldr.w	lr, [pc, #92]	; 80057a4 <HAL_FDCAN_Init+0x2f4>
 800574a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80057a8 <HAL_FDCAN_Init+0x2f8>
 800574e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80057ac <HAL_FDCAN_Init+0x2fc>
 8005752:	4e0c      	ldr	r6, [pc, #48]	; (8005784 <HAL_FDCAN_Init+0x2d4>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005754:	490c      	ldr	r1, [pc, #48]	; (8005788 <HAL_FDCAN_Init+0x2d8>)
 8005756:	e789      	b.n	800566c <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005758:	f043 0320 	orr.w	r3, r3, #32
 800575c:	6193      	str	r3, [r2, #24]
 800575e:	e730      	b.n	80055c2 <HAL_FDCAN_Init+0x112>
 8005760:	40006400 	.word	0x40006400
 8005764:	40006800 	.word	0x40006800
 8005768:	40006c00 	.word	0x40006c00
 800576c:	4000a678 	.word	0x4000a678
 8005770:	4000a4b0 	.word	0x4000a4b0
 8005774:	4000ad18 	.word	0x4000ad18
 8005778:	4000adf0 	.word	0x4000adf0
 800577c:	40006500 	.word	0x40006500
 8005780:	4000a9c8 	.word	0x4000a9c8
 8005784:	4000aaa0 	.word	0x4000aaa0
 8005788:	4000a750 	.word	0x4000a750
 800578c:	4000ac28 	.word	0x4000ac28
 8005790:	4000ad00 	.word	0x4000ad00
 8005794:	4000a660 	.word	0x4000a660
 8005798:	4000a588 	.word	0x4000a588
 800579c:	4000ab10 	.word	0x4000ab10
 80057a0:	4000a9b0 	.word	0x4000a9b0
 80057a4:	4000a8d8 	.word	0x4000a8d8
 80057a8:	4000a800 	.word	0x4000a800
 80057ac:	4000a7c0 	.word	0x4000a7c0

080057b0 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80057b0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80057b4:	3b01      	subs	r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d905      	bls.n	80057c6 <HAL_FDCAN_ConfigFilter+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80057ba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80057bc:	f043 0302 	orr.w	r3, r3, #2
 80057c0:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 80057c2:	2001      	movs	r0, #1
}
 80057c4:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80057c6:	680b      	ldr	r3, [r1, #0]
{
 80057c8:	b470      	push	{r4, r5, r6}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80057ca:	b983      	cbnz	r3, 80057ee <HAL_FDCAN_ConfigFilter+0x3e>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80057cc:	e9d1 6202 	ldrd	r6, r2, [r1, #8]
 80057d0:	694d      	ldr	r5, [r1, #20]
      *FilterAddress = FilterElementW1;
 80057d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
                         (sFilterConfig->FilterID1 << 16U)    |
 80057d4:	6908      	ldr	r0, [r1, #16]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80057d6:	6849      	ldr	r1, [r1, #4]
                         (sFilterConfig->FilterConfig << 27U) |
 80057d8:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80057da:	ea42 7286 	orr.w	r2, r2, r6, lsl #30
 80057de:	432a      	orrs	r2, r5
 80057e0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
      *FilterAddress = FilterElementW1;
 80057e4:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    return HAL_OK;
 80057e8:	4618      	mov	r0, r3
}
 80057ea:	bc70      	pop	{r4, r5, r6}
 80057ec:	4770      	bx	lr
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80057ee:	e9d1 6203 	ldrd	r6, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80057f2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80057f4:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80057f6:	688d      	ldr	r5, [r1, #8]
 80057f8:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80057fa:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80057fe:	ea42 7246 	orr.w	r2, r2, r6, lsl #29
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005802:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
      *FilterAddress = FilterElementW1;
 8005806:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 800580a:	2000      	movs	r0, #0
}
 800580c:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW2;
 800580e:	604b      	str	r3, [r1, #4]
}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop

08005814 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8005814:	b470      	push	{r4, r5, r6}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005816:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
 800581a:	2e01      	cmp	r6, #1
 800581c:	d006      	beq.n	800582c <HAL_FDCAN_ConfigGlobalFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800581e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005820:	f043 0304 	orr.w	r3, r3, #4
 8005824:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005826:	bc70      	pop	{r4, r5, r6}
    return HAL_ERROR;
 8005828:	2001      	movs	r0, #1
}
 800582a:	4770      	bx	lr
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800582c:	6806      	ldr	r6, [r0, #0]
 800582e:	4615      	mov	r5, r2
 8005830:	9a03      	ldr	r2, [sp, #12]
 8005832:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 8005836:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 800583a:	ea43 0285 	orr.w	r2, r3, r5, lsl #2
 800583e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8005842:	f020 033f 	bic.w	r3, r0, #63	; 0x3f
 8005846:	4319      	orrs	r1, r3
 8005848:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
    return HAL_OK;
 800584c:	2000      	movs	r0, #0
}
 800584e:	bc70      	pop	{r4, r5, r6}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop

08005854 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005854:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8005858:	2a01      	cmp	r2, #1
{
 800585a:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800585c:	d005      	beq.n	800586a <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800585e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005860:	f042 0204 	orr.w	r2, r2, #4
 8005864:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005866:	2001      	movs	r0, #1
}
 8005868:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800586a:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800586c:	2202      	movs	r2, #2
 800586e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005872:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005874:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005876:	f022 0201 	bic.w	r2, r2, #1
 800587a:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 800587c:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800587e:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop

08005884 <HAL_FDCAN_GetRxMessage>:
{
 8005884:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005886:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 800588a:	2c02      	cmp	r4, #2
 800588c:	d10c      	bne.n	80058a8 <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800588e:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005890:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005892:	d00f      	beq.n	80058b4 <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005894:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 8005898:	0724      	lsls	r4, r4, #28
 800589a:	d15c      	bne.n	8005956 <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800589c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800589e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a2:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 80058a4:	2001      	movs	r0, #1
}
 80058a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80058a8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80058aa:	f043 0308 	orr.w	r3, r3, #8
 80058ae:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 80058b0:	2001      	movs	r0, #1
}
 80058b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80058b4:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 80058b8:	0725      	lsls	r5, r4, #28
 80058ba:	d0ef      	beq.n	800589c <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80058bc:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80058c0:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80058c2:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80058c6:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80058ca:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80058ce:	683c      	ldr	r4, [r7, #0]
 80058d0:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80058d4:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80058d6:	2c00      	cmp	r4, #0
 80058d8:	d14c      	bne.n	8005974 <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80058da:	683c      	ldr	r4, [r7, #0]
 80058dc:	f3c4 448a 	ubfx	r4, r4, #18, #11
 80058e0:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80058e2:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80058e4:	f8df c094 	ldr.w	ip, [pc, #148]	; 800597c <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80058e8:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 80058ec:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80058ee:	683c      	ldr	r4, [r7, #0]
 80058f0:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80058f4:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80058f6:	88bc      	ldrh	r4, [r7, #4]
 80058f8:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80058fa:	687c      	ldr	r4, [r7, #4]
 80058fc:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8005900:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005902:	687d      	ldr	r5, [r7, #4]
 8005904:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8005908:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800590a:	687d      	ldr	r5, [r7, #4]
 800590c:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8005910:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005912:	79fd      	ldrb	r5, [r7, #7]
 8005914:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005918:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800591a:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800591c:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800591e:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005922:	0fed      	lsrs	r5, r5, #31
 8005924:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005926:	b174      	cbz	r4, 8005946 <HAL_FDCAN_GetRxMessage+0xc2>
 8005928:	1e5d      	subs	r5, r3, #1
 800592a:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 800592c:	4623      	mov	r3, r4
 800592e:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8005932:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005936:	89d6      	ldrh	r6, [r2, #14]
 8005938:	3b06      	subs	r3, #6
 800593a:	f81c 6006 	ldrb.w	r6, [ip, r6]
 800593e:	1bdb      	subs	r3, r3, r7
 8005940:	429e      	cmp	r6, r3
 8005942:	d8f3      	bhi.n	800592c <HAL_FDCAN_GetRxMessage+0xa8>
 8005944:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005946:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8005948:	bf0c      	ite	eq
 800594a:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 800594e:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 8005952:	2000      	movs	r0, #0
}
 8005954:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005956:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800595a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800595c:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005960:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8005964:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005968:	683c      	ldr	r4, [r7, #0]
 800596a:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 800596e:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005970:	2c00      	cmp	r4, #0
 8005972:	d0b2      	beq.n	80058da <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005974:	683c      	ldr	r4, [r7, #0]
 8005976:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 800597a:	e7b1      	b.n	80058e0 <HAL_FDCAN_GetRxMessage+0x5c>
 800597c:	0800ed74 	.word	0x0800ed74

08005980 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005980:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005984:	3b01      	subs	r3, #1
 8005986:	2b01      	cmp	r3, #1
 8005988:	d905      	bls.n	8005996 <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800598a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800598c:	f043 0302 	orr.w	r3, r3, #2
 8005990:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8005992:	2001      	movs	r0, #1
}
 8005994:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005996:	6803      	ldr	r3, [r0, #0]
{
 8005998:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800599a:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 800599e:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80059a0:	d03d      	beq.n	8005a1e <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80059a2:	07c4      	lsls	r4, r0, #31
 80059a4:	d43b      	bmi.n	8005a1e <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80059a6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80059a8:	f044 0401 	orr.w	r4, r4, #1
 80059ac:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80059ae:	b1cd      	cbz	r5, 80059e4 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80059b0:	07c5      	lsls	r5, r0, #31
 80059b2:	d517      	bpl.n	80059e4 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80059b4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80059b6:	f040 0002 	orr.w	r0, r0, #2
 80059ba:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80059bc:	060c      	lsls	r4, r1, #24
 80059be:	d504      	bpl.n	80059ca <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80059c0:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 80059c4:	4310      	orrs	r0, r2
 80059c6:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80059ca:	05c8      	lsls	r0, r1, #23
 80059cc:	d504      	bpl.n	80059d8 <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80059ce:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80059d2:	4302      	orrs	r2, r0
 80059d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80059d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059da:	4311      	orrs	r1, r2
    return HAL_OK;
 80059dc:	2000      	movs	r0, #0
}
 80059de:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80059e0:	6559      	str	r1, [r3, #84]	; 0x54
}
 80059e2:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80059e4:	f011 0f38 	tst.w	r1, #56	; 0x38
 80059e8:	d001      	beq.n	80059ee <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80059ea:	0784      	lsls	r4, r0, #30
 80059ec:	d4e2      	bmi.n	80059b4 <HAL_FDCAN_ActivateNotification+0x34>
 80059ee:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80059f2:	d131      	bne.n	8005a58 <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80059f4:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80059f8:	d001      	beq.n	80059fe <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80059fa:	0704      	lsls	r4, r0, #28
 80059fc:	d4da      	bmi.n	80059b4 <HAL_FDCAN_ActivateNotification+0x34>
 80059fe:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005a02:	d001      	beq.n	8005a08 <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005a04:	06c5      	lsls	r5, r0, #27
 8005a06:	d4d5      	bmi.n	80059b4 <HAL_FDCAN_ActivateNotification+0x34>
 8005a08:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005a0c:	d001      	beq.n	8005a12 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005a0e:	0684      	lsls	r4, r0, #26
 8005a10:	d4d0      	bmi.n	80059b4 <HAL_FDCAN_ActivateNotification+0x34>
 8005a12:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005a16:	d0d1      	beq.n	80059bc <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005a18:	0645      	lsls	r5, r0, #25
 8005a1a:	d5cf      	bpl.n	80059bc <HAL_FDCAN_ActivateNotification+0x3c>
 8005a1c:	e7ca      	b.n	80059b4 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005a1e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005a22:	d001      	beq.n	8005a28 <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005a24:	0784      	lsls	r4, r0, #30
 8005a26:	d5be      	bpl.n	80059a6 <HAL_FDCAN_ActivateNotification+0x26>
 8005a28:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005a2c:	d117      	bne.n	8005a5e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005a2e:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005a32:	d001      	beq.n	8005a38 <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005a34:	0704      	lsls	r4, r0, #28
 8005a36:	d5b6      	bpl.n	80059a6 <HAL_FDCAN_ActivateNotification+0x26>
 8005a38:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005a3c:	d001      	beq.n	8005a42 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005a3e:	06c4      	lsls	r4, r0, #27
 8005a40:	d5b1      	bpl.n	80059a6 <HAL_FDCAN_ActivateNotification+0x26>
 8005a42:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005a46:	d001      	beq.n	8005a4c <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005a48:	0684      	lsls	r4, r0, #26
 8005a4a:	d5ac      	bpl.n	80059a6 <HAL_FDCAN_ActivateNotification+0x26>
 8005a4c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005a50:	d0ad      	beq.n	80059ae <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005a52:	0644      	lsls	r4, r0, #25
 8005a54:	d4ab      	bmi.n	80059ae <HAL_FDCAN_ActivateNotification+0x2e>
 8005a56:	e7a6      	b.n	80059a6 <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005a58:	0745      	lsls	r5, r0, #29
 8005a5a:	d4ab      	bmi.n	80059b4 <HAL_FDCAN_ActivateNotification+0x34>
 8005a5c:	e7ca      	b.n	80059f4 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005a5e:	0744      	lsls	r4, r0, #29
 8005a60:	d5a1      	bpl.n	80059a6 <HAL_FDCAN_ActivateNotification+0x26>
 8005a62:	e7e4      	b.n	8005a2e <HAL_FDCAN_ActivateNotification+0xae>

08005a64 <HAL_FDCAN_TxEventFifoCallback>:
}
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <HAL_FDCAN_RxFifo0Callback>:
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop

08005a6c <HAL_FDCAN_RxFifo1Callback>:
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <HAL_FDCAN_TxFifoEmptyCallback>:
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop

08005a74 <HAL_FDCAN_TxBufferCompleteCallback>:
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <HAL_FDCAN_TxBufferAbortCallback>:
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop

08005a7c <HAL_FDCAN_TimestampWraparoundCallback>:
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop

08005a80 <HAL_FDCAN_TimeoutOccurredCallback>:
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop

08005a84 <HAL_FDCAN_HighPriorityMessageCallback>:
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop

08005a88 <HAL_FDCAN_ErrorCallback>:
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop

08005a8c <HAL_FDCAN_ErrorStatusCallback>:
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <HAL_FDCAN_IRQHandler>:
{
 8005a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005a94:	6803      	ldr	r3, [r0, #0]
 8005a96:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005a9a:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005a9e:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005aa2:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005aa4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005aa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005aa8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8005aaa:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005aae:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005ab0:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005ab4:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005ab6:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005aba:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 8005abe:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005ac2:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005ac4:	0652      	lsls	r2, r2, #25
{
 8005ac6:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005ac8:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005acc:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005ad0:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8005ad4:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005ad8:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005adc:	d502      	bpl.n	8005ae4 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005ade:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae0:	0651      	lsls	r1, r2, #25
 8005ae2:	d473      	bmi.n	8005bcc <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ae6:	05d2      	lsls	r2, r2, #23
 8005ae8:	d502      	bpl.n	8005af0 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005aea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aec:	05d0      	lsls	r0, r2, #23
 8005aee:	d45d      	bmi.n	8005bac <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 8005af0:	f1b9 0f00 	cmp.w	r9, #0
 8005af4:	d14a      	bne.n	8005b8c <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 8005af6:	f1b8 0f00 	cmp.w	r8, #0
 8005afa:	d137      	bne.n	8005b6c <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 8005afc:	2f00      	cmp	r7, #0
 8005afe:	d13e      	bne.n	8005b7e <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b02:	0591      	lsls	r1, r2, #22
 8005b04:	d502      	bpl.n	8005b0c <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b08:	0592      	lsls	r2, r2, #22
 8005b0a:	d475      	bmi.n	8005bf8 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b0e:	0617      	lsls	r7, r2, #24
 8005b10:	d502      	bpl.n	8005b18 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b14:	0610      	lsls	r0, r2, #24
 8005b16:	d477      	bmi.n	8005c08 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b1a:	0491      	lsls	r1, r2, #18
 8005b1c:	d502      	bpl.n	8005b24 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005b1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b20:	0492      	lsls	r2, r2, #18
 8005b22:	d459      	bmi.n	8005bd8 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b26:	0417      	lsls	r7, r2, #16
 8005b28:	d502      	bpl.n	8005b30 <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005b2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b2c:	0410      	lsls	r0, r2, #16
 8005b2e:	d45b      	bmi.n	8005be8 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b32:	0451      	lsls	r1, r2, #17
 8005b34:	d509      	bpl.n	8005b4a <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005b36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b38:	0452      	lsls	r2, r2, #17
 8005b3a:	d506      	bpl.n	8005b4a <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005b3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b40:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005b42:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b48:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8005b4a:	b94e      	cbnz	r6, 8005b60 <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 8005b4c:	b125      	cbz	r5, 8005b58 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8005b52:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b54:	431d      	orrs	r5, r3
 8005b56:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005b58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b5a:	bb13      	cbnz	r3, 8005ba2 <HAL_FDCAN_IRQHandler+0x112>
}
 8005b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005b60:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005b62:	4631      	mov	r1, r6
 8005b64:	4620      	mov	r0, r4
 8005b66:	f7ff ff91 	bl	8005a8c <HAL_FDCAN_ErrorStatusCallback>
 8005b6a:	e7ef      	b.n	8005b4c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005b6c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005b70:	4641      	mov	r1, r8
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7ff ff78 	bl	8005a68 <HAL_FDCAN_RxFifo0Callback>
 8005b78:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8005b7a:	2f00      	cmp	r7, #0
 8005b7c:	d0c0      	beq.n	8005b00 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005b7e:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005b80:	4639      	mov	r1, r7
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7ff ff72 	bl	8005a6c <HAL_FDCAN_RxFifo1Callback>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	e7b9      	b.n	8005b00 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005b8c:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005b90:	4649      	mov	r1, r9
 8005b92:	4620      	mov	r0, r4
 8005b94:	f7ff ff66 	bl	8005a64 <HAL_FDCAN_TxEventFifoCallback>
 8005b98:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	d0ad      	beq.n	8005afc <HAL_FDCAN_IRQHandler+0x6c>
 8005ba0:	e7e4      	b.n	8005b6c <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f7ff ff70 	bl	8005a88 <HAL_FDCAN_ErrorCallback>
}
 8005ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005bac:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005bb0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005bb8:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005bba:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff ff5b 	bl	8005a78 <HAL_FDCAN_TxBufferAbortCallback>
 8005bc2:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8005bc4:	f1b9 0f00 	cmp.w	r9, #0
 8005bc8:	d095      	beq.n	8005af6 <HAL_FDCAN_IRQHandler+0x66>
 8005bca:	e7df      	b.n	8005b8c <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005bcc:	2240      	movs	r2, #64	; 0x40
 8005bce:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005bd0:	f7ff ff58 	bl	8005a84 <HAL_FDCAN_HighPriorityMessageCallback>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	e785      	b.n	8005ae4 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bdc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff ff4c 	bl	8005a7c <HAL_FDCAN_TimestampWraparoundCallback>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	e79d      	b.n	8005b24 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005be8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f7ff ff46 	bl	8005a80 <HAL_FDCAN_TimeoutOccurredCallback>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	e79b      	b.n	8005b30 <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f7ff ff36 	bl	8005a70 <HAL_FDCAN_TxFifoEmptyCallback>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	e781      	b.n	8005b0c <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005c08:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005c0c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005c10:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005c12:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005c14:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005c16:	4620      	mov	r0, r4
 8005c18:	f7ff ff2c 	bl	8005a74 <HAL_FDCAN_TxBufferCompleteCallback>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	e77b      	b.n	8005b18 <HAL_FDCAN_IRQHandler+0x88>

08005c20 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c24:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8005d78 <HAL_FLASH_Program+0x158>
 8005c28:	f899 4000 	ldrb.w	r4, [r9]
 8005c2c:	2c01      	cmp	r4, #1
 8005c2e:	d04f      	beq.n	8005cd0 <HAL_FLASH_Program+0xb0>
 8005c30:	469b      	mov	fp, r3
 8005c32:	2301      	movs	r3, #1
 8005c34:	4682      	mov	sl, r0
 8005c36:	460f      	mov	r7, r1
 8005c38:	4690      	mov	r8, r2
 8005c3a:	f889 3000 	strb.w	r3, [r9]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005c3e:	f7fe fdfd 	bl	800483c <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005c42:	4e4c      	ldr	r6, [pc, #304]	; (8005d74 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8005c44:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005c46:	e005      	b.n	8005c54 <HAL_FLASH_Program+0x34>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005c48:	f7fe fdf8 	bl	800483c <HAL_GetTick>
 8005c4c:	1b44      	subs	r4, r0, r5
 8005c4e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8005c52:	d837      	bhi.n	8005cc4 <HAL_FLASH_Program+0xa4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005c54:	6933      	ldr	r3, [r6, #16]
 8005c56:	03d8      	lsls	r0, r3, #15
 8005c58:	d4f6      	bmi.n	8005c48 <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005c5a:	6934      	ldr	r4, [r6, #16]
 8005c5c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 8005c60:	401c      	ands	r4, r3
 8005c62:	d147      	bne.n	8005cf4 <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005c64:	6933      	ldr	r3, [r6, #16]
 8005c66:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005c68:	bf44      	itt	mi
 8005c6a:	2301      	movmi	r3, #1
 8005c6c:	6133      	strmi	r3, [r6, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f8c9 3004 	str.w	r3, [r9, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005c74:	f1ba 0f00 	cmp.w	sl, #0
 8005c78:	d02d      	beq.n	8005cd6 <HAL_FLASH_Program+0xb6>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005c7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d940      	bls.n	8005d04 <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 8005c82:	f7fe fddb 	bl	800483c <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005c86:	4e3b      	ldr	r6, [pc, #236]	; (8005d74 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8005c88:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005c8a:	e005      	b.n	8005c98 <HAL_FLASH_Program+0x78>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005c8c:	f7fe fdd6 	bl	800483c <HAL_GetTick>
 8005c90:	1b40      	subs	r0, r0, r5
 8005c92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005c96:	d82b      	bhi.n	8005cf0 <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005c98:	6933      	ldr	r3, [r6, #16]
 8005c9a:	03db      	lsls	r3, r3, #15
 8005c9c:	d4f6      	bmi.n	8005c8c <HAL_FLASH_Program+0x6c>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005c9e:	6933      	ldr	r3, [r6, #16]
 8005ca0:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d152      	bne.n	8005d4e <HAL_FLASH_Program+0x12e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005ca8:	6930      	ldr	r0, [r6, #16]
 8005caa:	f010 0001 	ands.w	r0, r0, #1
 8005cae:	d002      	beq.n	8005cb6 <HAL_FLASH_Program+0x96>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	6132      	str	r2, [r6, #16]
    if (prog_bit != 0U)
 8005cb6:	b134      	cbz	r4, 8005cc6 <HAL_FLASH_Program+0xa6>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005cb8:	4a2e      	ldr	r2, [pc, #184]	; (8005d74 <HAL_FLASH_Program+0x154>)
 8005cba:	6953      	ldr	r3, [r2, #20]
 8005cbc:	ea23 0404 	bic.w	r4, r3, r4
 8005cc0:	6154      	str	r4, [r2, #20]
 8005cc2:	e000      	b.n	8005cc6 <HAL_FLASH_Program+0xa6>
 8005cc4:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f889 3000 	strb.w	r3, [r9]
}
 8005ccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8005cd0:	2002      	movs	r0, #2
}
 8005cd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005cd6:	4a27      	ldr	r2, [pc, #156]	; (8005d74 <HAL_FLASH_Program+0x154>)
 8005cd8:	6953      	ldr	r3, [r2, #20]
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005ce0:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("isb 0xF":::"memory");
 8005ce4:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8005ce8:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005cea:	f8c7 b004 	str.w	fp, [r7, #4]
      prog_bit = FLASH_CR_PG;
 8005cee:	e7c8      	b.n	8005c82 <HAL_FLASH_Program+0x62>
      return HAL_TIMEOUT;
 8005cf0:	2003      	movs	r0, #3
 8005cf2:	e7e0      	b.n	8005cb6 <HAL_FLASH_Program+0x96>
    pFlash.ErrorCode |= error;
 8005cf4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005cf8:	4323      	orrs	r3, r4
 8005cfa:	f8c9 3004 	str.w	r3, [r9, #4]
    return HAL_ERROR;
 8005cfe:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8005d00:	6134      	str	r4, [r6, #16]
  if (status == HAL_OK)
 8005d02:	e7e0      	b.n	8005cc6 <HAL_FLASH_Program+0xa6>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_FLASH_Program+0x154>)
 8005d06:	6953      	ldr	r3, [r2, #20]
 8005d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d0c:	6153      	str	r3, [r2, #20]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005d0e:	4643      	mov	r3, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d10:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d14:	b672      	cpsid	i
 8005d16:	1dfa      	adds	r2, r7, #7
 8005d18:	eba2 0208 	sub.w	r2, r2, r8
 8005d1c:	2a0e      	cmp	r2, #14
 8005d1e:	d91e      	bls.n	8005d5e <HAL_FLASH_Program+0x13e>
 8005d20:	ea47 0208 	orr.w	r2, r7, r8
 8005d24:	0752      	lsls	r2, r2, #29
 8005d26:	d11a      	bne.n	8005d5e <HAL_FLASH_Program+0x13e>
 8005d28:	1aff      	subs	r7, r7, r3
 8005d2a:	f508 7880 	add.w	r8, r8, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d32:	18fa      	adds	r2, r7, r3
 8005d34:	3308      	adds	r3, #8
 8005d36:	4543      	cmp	r3, r8
 8005d38:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 8005d3c:	d1f7      	bne.n	8005d2e <HAL_FLASH_Program+0x10e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3e:	f385 8810 	msr	PRIMASK, r5
        prog_bit = FLASH_CR_FSTPG;
 8005d42:	f1ba 0f02 	cmp.w	sl, #2
 8005d46:	bf08      	it	eq
 8005d48:	f44f 2480 	moveq.w	r4, #262144	; 0x40000
 8005d4c:	e799      	b.n	8005c82 <HAL_FLASH_Program+0x62>
    pFlash.ErrorCode |= error;
 8005d4e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	f8c9 2004 	str.w	r2, [r9, #4]
    return HAL_ERROR;
 8005d58:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8005d5a:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 8005d5c:	e7ab      	b.n	8005cb6 <HAL_FLASH_Program+0x96>
 8005d5e:	eba7 0708 	sub.w	r7, r7, r8
 8005d62:	f508 7880 	add.w	r8, r8, #256	; 0x100
    *dest_addr = *src_addr;
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	51da      	str	r2, [r3, r7]
    src_addr++;
 8005d6a:	3304      	adds	r3, #4
  while (row_index != 0U);
 8005d6c:	4598      	cmp	r8, r3
 8005d6e:	d1fa      	bne.n	8005d66 <HAL_FLASH_Program+0x146>
 8005d70:	e7e5      	b.n	8005d3e <HAL_FLASH_Program+0x11e>
 8005d72:	bf00      	nop
 8005d74:	40022000 	.word	0x40022000
 8005d78:	2000000c 	.word	0x2000000c

08005d7c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_FLASH_Unlock+0x1c>)
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	db01      	blt.n	8005d88 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8005d84:	2000      	movs	r0, #0
}
 8005d86:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005d88:	4904      	ldr	r1, [pc, #16]	; (8005d9c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005d8a:	4a05      	ldr	r2, [pc, #20]	; (8005da0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005d8c:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005d8e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005d90:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	0fc0      	lsrs	r0, r0, #31
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40022000 	.word	0x40022000
 8005d9c:	45670123 	.word	0x45670123
 8005da0:	cdef89ab 	.word	0xcdef89ab

08005da4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <HAL_FLASH_Lock+0x14>)
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005dac:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005dae:	6958      	ldr	r0, [r3, #20]
}
 8005db0:	43c0      	mvns	r0, r0
 8005db2:	0fc0      	lsrs	r0, r0, #31
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40022000 	.word	0x40022000

08005dbc <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005dbc:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_FLASH_OB_Unlock+0x1c>)
 8005dbe:	6958      	ldr	r0, [r3, #20]
 8005dc0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8005dc4:	d006      	beq.n	8005dd4 <HAL_FLASH_OB_Unlock+0x18>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005dc6:	4905      	ldr	r1, [pc, #20]	; (8005ddc <HAL_FLASH_OB_Unlock+0x20>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005dc8:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <HAL_FLASH_OB_Unlock+0x24>)
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005dca:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005dcc:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005dce:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	f3c0 7080 	ubfx	r0, r0, #30, #1
}
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40022000 	.word	0x40022000
 8005ddc:	08192a3b 	.word	0x08192a3b
 8005de0:	4c5d6e7f 	.word	0x4c5d6e7f

08005de4 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_FLASH_OB_Lock+0x18>)
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005dec:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005dee:	6958      	ldr	r0, [r3, #20]
 8005df0:	f080 4080 	eor.w	r0, r0, #1073741824	; 0x40000000
}
 8005df4:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40022000 	.word	0x40022000

08005e00 <FLASH_WaitForLastOperation>:
{
 8005e00:	b570      	push	{r4, r5, r6, lr}
 8005e02:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8005e04:	f7fe fd1a 	bl	800483c <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e08:	4e10      	ldr	r6, [pc, #64]	; (8005e4c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8005e0a:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e0c:	e004      	b.n	8005e18 <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005e0e:	f7fe fd15 	bl	800483c <HAL_GetTick>
 8005e12:	1b03      	subs	r3, r0, r4
 8005e14:	42ab      	cmp	r3, r5
 8005e16:	d80f      	bhi.n	8005e38 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e18:	6933      	ldr	r3, [r6, #16]
 8005e1a:	03db      	lsls	r3, r3, #15
 8005e1c:	d4f7      	bmi.n	8005e0e <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005e1e:	6933      	ldr	r3, [r6, #16]
 8005e20:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8005e24:	4013      	ands	r3, r2
 8005e26:	d109      	bne.n	8005e3c <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005e28:	6930      	ldr	r0, [r6, #16]
 8005e2a:	f010 0001 	ands.w	r0, r0, #1
 8005e2e:	d002      	beq.n	8005e36 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005e30:	2201      	movs	r2, #1
 8005e32:	4618      	mov	r0, r3
 8005e34:	6132      	str	r2, [r6, #16]
}
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8005e38:	2003      	movs	r0, #3
}
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8005e3c:	4904      	ldr	r1, [pc, #16]	; (8005e50 <FLASH_WaitForLastOperation+0x50>)
 8005e3e:	684a      	ldr	r2, [r1, #4]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8005e44:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8005e46:	6133      	str	r3, [r6, #16]
}
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40022000 	.word	0x40022000
 8005e50:	2000000c 	.word	0x2000000c

08005e54 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e58:	4f67      	ldr	r7, [pc, #412]	; (8005ff8 <HAL_FLASHEx_Erase+0x1a4>)
 8005e5a:	783b      	ldrb	r3, [r7, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d062      	beq.n	8005f26 <HAL_FLASHEx_Erase+0xd2>
 8005e60:	4682      	mov	sl, r0
 8005e62:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e68:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8005e6a:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e6c:	f7ff ffc8 	bl	8005e00 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8005e70:	4606      	mov	r6, r0
 8005e72:	b120      	cbz	r0, 8005e7e <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e74:	2300      	movs	r3, #0
 8005e76:	703b      	strb	r3, [r7, #0]

  return status;
}
 8005e78:	4630      	mov	r0, r6
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005e7e:	4b5f      	ldr	r3, [pc, #380]	; (8005ffc <HAL_FLASHEx_Erase+0x1a8>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e80:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e88:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005e8a:	d150      	bne.n	8005f2e <HAL_FLASHEx_Erase+0xda>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e8c:	0554      	lsls	r4, r2, #21
 8005e8e:	f140 80a1 	bpl.w	8005fd4 <HAL_FLASHEx_Erase+0x180>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e92:	681a      	ldr	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005e94:	2102      	movs	r1, #2
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005e9c:	7739      	strb	r1, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e9e:	f8da 3000 	ldr.w	r3, [sl]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d050      	beq.n	8005f48 <HAL_FLASHEx_Erase+0xf4>
      *PageError = 0xFFFFFFFFU;
 8005ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eaa:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005eae:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 8005eb2:	442b      	add	r3, r5
 8005eb4:	429d      	cmp	r5, r3
 8005eb6:	d261      	bcs.n	8005f7c <HAL_FLASHEx_Erase+0x128>
{
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8005eb8:	4c50      	ldr	r4, [pc, #320]	; (8005ffc <HAL_FLASHEx_Erase+0x1a8>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005eba:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006000 <HAL_FLASHEx_Erase+0x1ac>
 8005ebe:	e023      	b.n	8005f08 <HAL_FLASHEx_Erase+0xb4>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005ec0:	6963      	ldr	r3, [r4, #20]
 8005ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ec6:	6163      	str	r3, [r4, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005ec8:	6962      	ldr	r2, [r4, #20]
 8005eca:	00eb      	lsls	r3, r5, #3
 8005ecc:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 8005ed0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005ed8:	6963      	ldr	r3, [r4, #20]
 8005eda:	f043 0302 	orr.w	r3, r3, #2
 8005ede:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ee0:	6963      	ldr	r3, [r4, #20]
 8005ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee6:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eec:	f7ff ff88 	bl	8005e00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005ef0:	6963      	ldr	r3, [r4, #20]
 8005ef2:	ea03 0309 	and.w	r3, r3, r9
 8005ef6:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d165      	bne.n	8005fc8 <HAL_FLASHEx_Erase+0x174>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005efc:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8005f00:	3501      	adds	r5, #1
 8005f02:	4413      	add	r3, r2
 8005f04:	42ab      	cmp	r3, r5
 8005f06:	d939      	bls.n	8005f7c <HAL_FLASHEx_Erase+0x128>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8005f08:	6a23      	ldr	r3, [r4, #32]
 8005f0a:	025b      	lsls	r3, r3, #9
 8005f0c:	d5d8      	bpl.n	8005ec0 <HAL_FLASHEx_Erase+0x6c>
    if ((Banks & FLASH_BANK_1) != 0U)
 8005f0e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005f12:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005f16:	6963      	ldr	r3, [r4, #20]
 8005f18:	bf14      	ite	ne
 8005f1a:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005f1e:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8005f22:	6163      	str	r3, [r4, #20]
 8005f24:	e7d0      	b.n	8005ec8 <HAL_FLASHEx_Erase+0x74>
  __HAL_LOCK(&pFlash);
 8005f26:	2602      	movs	r6, #2
}
 8005f28:	4630      	mov	r0, r6
 8005f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005f2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	0555      	lsls	r5, r2, #21
 8005f38:	d54a      	bpl.n	8005fd0 <HAL_FLASHEx_Erase+0x17c>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f3a:	681a      	ldr	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005f3c:	2103      	movs	r1, #3
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f42:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005f44:	7739      	strb	r1, [r7, #28]
 8005f46:	e7aa      	b.n	8005e9e <HAL_FLASHEx_Erase+0x4a>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8005f48:	4b2c      	ldr	r3, [pc, #176]	; (8005ffc <HAL_FLASHEx_Erase+0x1a8>)
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	0250      	lsls	r0, r2, #9
 8005f4e:	d443      	bmi.n	8005fd8 <HAL_FLASHEx_Erase+0x184>
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f56:	f042 0204 	orr.w	r2, r2, #4
 8005f5a:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f5c:	4c27      	ldr	r4, [pc, #156]	; (8005ffc <HAL_FLASHEx_Erase+0x1a8>)
 8005f5e:	6963      	ldr	r3, [r4, #20]
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f64:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f6a:	f7ff ff49 	bl	8005e00 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005f6e:	6963      	ldr	r3, [r4, #20]
 8005f70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f74:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f78:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005f7a:	6163      	str	r3, [r4, #20]
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005f7c:	7f3b      	ldrb	r3, [r7, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005f7e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005f82:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005f84:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005f86:	d10c      	bne.n	8005fa2 <HAL_FLASHEx_Erase+0x14e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005f88:	4a1c      	ldr	r2, [pc, #112]	; (8005ffc <HAL_FLASHEx_Erase+0x1a8>)
 8005f8a:	6811      	ldr	r1, [r2, #0]
 8005f8c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005f90:	6011      	str	r1, [r2, #0]
 8005f92:	6811      	ldr	r1, [r2, #0]
 8005f94:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005f98:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f9a:	6811      	ldr	r1, [r2, #0]
 8005f9c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005fa0:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005fa2:	3b02      	subs	r3, #2
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d80c      	bhi.n	8005fc2 <HAL_FLASHEx_Erase+0x16e>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <HAL_FLASHEx_Erase+0x1a8>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fb8:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fc0:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	773b      	strb	r3, [r7, #28]
}
 8005fc6:	e755      	b.n	8005e74 <HAL_FLASHEx_Erase+0x20>
          *PageError = page_index;
 8005fc8:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fcc:	4606      	mov	r6, r0
          break;
 8005fce:	e7d5      	b.n	8005f7c <HAL_FLASHEx_Erase+0x128>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005fd0:	773c      	strb	r4, [r7, #28]
 8005fd2:	e764      	b.n	8005e9e <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005fd4:	7738      	strb	r0, [r7, #28]
 8005fd6:	e762      	b.n	8005e9e <HAL_FLASHEx_Erase+0x4a>
      FLASH_MassErase(pEraseInit->Banks);
 8005fd8:	f8da 2004 	ldr.w	r2, [sl, #4]
    if ((Banks & FLASH_BANK_1) != 0U)
 8005fdc:	07d1      	lsls	r1, r2, #31
 8005fde:	d503      	bpl.n	8005fe8 <HAL_FLASHEx_Erase+0x194>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005fe0:	6959      	ldr	r1, [r3, #20]
 8005fe2:	f041 0104 	orr.w	r1, r1, #4
 8005fe6:	6159      	str	r1, [r3, #20]
    if ((Banks & FLASH_BANK_2) != 0U)
 8005fe8:	0792      	lsls	r2, r2, #30
 8005fea:	d5b7      	bpl.n	8005f5c <HAL_FLASHEx_Erase+0x108>
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8005fec:	4a03      	ldr	r2, [pc, #12]	; (8005ffc <HAL_FLASHEx_Erase+0x1a8>)
 8005fee:	6953      	ldr	r3, [r2, #20]
 8005ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff4:	6153      	str	r3, [r2, #20]
 8005ff6:	e7b1      	b.n	8005f5c <HAL_FLASHEx_Erase+0x108>
 8005ff8:	2000000c 	.word	0x2000000c
 8005ffc:	40022000 	.word	0x40022000
 8006000:	fffffc05 	.word	0xfffffc05

08006004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006008:	680e      	ldr	r6, [r1, #0]
{
 800600a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 800600c:	2e00      	cmp	r6, #0
 800600e:	f000 808b 	beq.w	8006128 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006012:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80061e8 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 8006016:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006018:	2201      	movs	r2, #1
 800601a:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 800601e:	ea14 0c06 	ands.w	ip, r4, r6
 8006022:	d07c      	beq.n	800611e <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006024:	684d      	ldr	r5, [r1, #4]
 8006026:	f025 0a10 	bic.w	sl, r5, #16
 800602a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800602e:	2a01      	cmp	r2, #1
 8006030:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006034:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006038:	d979      	bls.n	800612e <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 800603a:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800603c:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800603e:	fa02 f208 	lsl.w	r2, r2, r8
 8006042:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006046:	fa04 f408 	lsl.w	r4, r4, r8
 800604a:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 800604c:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800604e:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8006050:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006052:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006056:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006058:	fa02 f208 	lsl.w	r2, r2, r8
 800605c:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800605e:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8006060:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006062:	d55c      	bpl.n	800611e <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006064:	4c5a      	ldr	r4, [pc, #360]	; (80061d0 <HAL_GPIO_Init+0x1cc>)
 8006066:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006068:	f042 0201 	orr.w	r2, r2, #1
 800606c:	6622      	str	r2, [r4, #96]	; 0x60
 800606e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006070:	f023 0403 	bic.w	r4, r3, #3
 8006074:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006078:	f002 0201 	and.w	r2, r2, #1
 800607c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8006080:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006082:	f003 0203 	and.w	r2, r3, #3
 8006086:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800608a:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800608c:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800608e:	220f      	movs	r2, #15
 8006090:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006094:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006098:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800609c:	d018      	beq.n	80060d0 <HAL_GPIO_Init+0xcc>
 800609e:	4a4d      	ldr	r2, [pc, #308]	; (80061d4 <HAL_GPIO_Init+0x1d0>)
 80060a0:	4290      	cmp	r0, r2
 80060a2:	f000 8084 	beq.w	80061ae <HAL_GPIO_Init+0x1aa>
 80060a6:	4a4c      	ldr	r2, [pc, #304]	; (80061d8 <HAL_GPIO_Init+0x1d4>)
 80060a8:	4290      	cmp	r0, r2
 80060aa:	f000 8085 	beq.w	80061b8 <HAL_GPIO_Init+0x1b4>
 80060ae:	4a4b      	ldr	r2, [pc, #300]	; (80061dc <HAL_GPIO_Init+0x1d8>)
 80060b0:	4290      	cmp	r0, r2
 80060b2:	d076      	beq.n	80061a2 <HAL_GPIO_Init+0x19e>
 80060b4:	4a4a      	ldr	r2, [pc, #296]	; (80061e0 <HAL_GPIO_Init+0x1dc>)
 80060b6:	4290      	cmp	r0, r2
 80060b8:	f000 8084 	beq.w	80061c4 <HAL_GPIO_Init+0x1c0>
 80060bc:	4a49      	ldr	r2, [pc, #292]	; (80061e4 <HAL_GPIO_Init+0x1e0>)
 80060be:	4290      	cmp	r0, r2
 80060c0:	bf0c      	ite	eq
 80060c2:	f04f 0805 	moveq.w	r8, #5
 80060c6:	f04f 0806 	movne.w	r8, #6
 80060ca:	fa08 f209 	lsl.w	r2, r8, r9
 80060ce:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060d0:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 80060d2:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80060d6:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060da:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 80060dc:	bf54      	ite	pl
 80060de:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80060e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 80060e4:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 80060e8:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060ec:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 80060ee:	bf54      	ite	pl
 80060f0:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80060f2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 80060f6:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060fa:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060fe:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8006100:	bf54      	ite	pl
 8006102:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8006104:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8006108:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 800610c:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006110:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8006112:	bf54      	ite	pl
 8006114:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8006116:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 800611a:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 800611e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006120:	fa36 f203 	lsrs.w	r2, r6, r3
 8006124:	f47f af78 	bne.w	8006018 <HAL_GPIO_Init+0x14>
  }
}
 8006128:	b003      	add	sp, #12
 800612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800612e:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006130:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006134:	fa02 f208 	lsl.w	r2, r2, r8
 8006138:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800613c:	68cf      	ldr	r7, [r1, #12]
 800613e:	fa07 f708 	lsl.w	r7, r7, r8
 8006142:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8006146:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006148:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800614a:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800614e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006152:	465c      	mov	r4, fp
 8006154:	409c      	lsls	r4, r3
 8006156:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8006158:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800615a:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800615c:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006160:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006164:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006168:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800616c:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8006170:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006172:	f47f af6d 	bne.w	8006050 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8006176:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800617a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800617e:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006182:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006186:	0092      	lsls	r2, r2, #2
 8006188:	f04f 0a0f 	mov.w	sl, #15
 800618c:	fa0a fb02 	lsl.w	fp, sl, r2
 8006190:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006194:	690c      	ldr	r4, [r1, #16]
 8006196:	4094      	lsls	r4, r2
 8006198:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 800619c:	f8c9 4020 	str.w	r4, [r9, #32]
 80061a0:	e756      	b.n	8006050 <HAL_GPIO_Init+0x4c>
 80061a2:	f04f 0803 	mov.w	r8, #3
 80061a6:	fa08 f209 	lsl.w	r2, r8, r9
 80061aa:	4317      	orrs	r7, r2
 80061ac:	e790      	b.n	80060d0 <HAL_GPIO_Init+0xcc>
 80061ae:	2201      	movs	r2, #1
 80061b0:	fa02 f209 	lsl.w	r2, r2, r9
 80061b4:	4317      	orrs	r7, r2
 80061b6:	e78b      	b.n	80060d0 <HAL_GPIO_Init+0xcc>
 80061b8:	f04f 0802 	mov.w	r8, #2
 80061bc:	fa08 f209 	lsl.w	r2, r8, r9
 80061c0:	4317      	orrs	r7, r2
 80061c2:	e785      	b.n	80060d0 <HAL_GPIO_Init+0xcc>
 80061c4:	f04f 0804 	mov.w	r8, #4
 80061c8:	fa08 f209 	lsl.w	r2, r8, r9
 80061cc:	4317      	orrs	r7, r2
 80061ce:	e77f      	b.n	80060d0 <HAL_GPIO_Init+0xcc>
 80061d0:	40021000 	.word	0x40021000
 80061d4:	48000400 	.word	0x48000400
 80061d8:	48000800 	.word	0x48000800
 80061dc:	48000c00 	.word	0x48000c00
 80061e0:	48001000 	.word	0x48001000
 80061e4:	48001400 	.word	0x48001400
 80061e8:	40010400 	.word	0x40010400

080061ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061ec:	b10a      	cbz	r2, 80061f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061ee:	6181      	str	r1, [r0, #24]
 80061f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061f2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop

080061f8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061f8:	4a3b      	ldr	r2, [pc, #236]	; (80062e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 80061fa:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061fc:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80061fe:	b968      	cbnz	r0, 800621c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006208:	d014      	beq.n	8006234 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800620a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800620e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006212:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8006216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800621a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800621c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006220:	d02f      	beq.n	8006282 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800622a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800622c:	2000      	movs	r0, #0
}
 800622e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006232:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006234:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006238:	4b2c      	ldr	r3, [pc, #176]	; (80062ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800623a:	482d      	ldr	r0, [pc, #180]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800623c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006240:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006244:	6811      	ldr	r1, [r2, #0]
 8006246:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800624a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800624e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006250:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006252:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006254:	2332      	movs	r3, #50	; 0x32
 8006256:	fb03 f304 	mul.w	r3, r3, r4
 800625a:	fba0 0303 	umull	r0, r3, r0, r3
 800625e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006260:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006262:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006266:	d506      	bpl.n	8006276 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006268:	e000      	b.n	800626c <HAL_PWREx_ControlVoltageScaling+0x74>
 800626a:	b123      	cbz	r3, 8006276 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800626c:	6951      	ldr	r1, [r2, #20]
 800626e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006270:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006274:	d4f9      	bmi.n	800626a <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006276:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	055c      	lsls	r4, r3, #21
 800627c:	d5d6      	bpl.n	800622c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 800627e:	2003      	movs	r0, #3
 8006280:	e7c9      	b.n	8006216 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628a:	d009      	beq.n	80062a0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800628c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8006290:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006298:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800629a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800629e:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062a0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062a4:	4b11      	ldr	r3, [pc, #68]	; (80062ec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80062a6:	4812      	ldr	r0, [pc, #72]	; (80062f0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062a8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80062ac:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062b0:	6811      	ldr	r1, [r2, #0]
 80062b2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80062b6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80062ba:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062bc:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062be:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062c0:	2332      	movs	r3, #50	; 0x32
 80062c2:	fb03 f304 	mul.w	r3, r3, r4
 80062c6:	fba0 0303 	umull	r0, r3, r0, r3
 80062ca:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062cc:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062ce:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062d2:	d5d0      	bpl.n	8006276 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80062d4:	e001      	b.n	80062da <HAL_PWREx_ControlVoltageScaling+0xe2>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0cd      	beq.n	8006276 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80062da:	6951      	ldr	r1, [r2, #20]
 80062dc:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80062de:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062e2:	d5c8      	bpl.n	8006276 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80062e4:	e7f7      	b.n	80062d6 <HAL_PWREx_ControlVoltageScaling+0xde>
 80062e6:	bf00      	nop
 80062e8:	40007000 	.word	0x40007000
 80062ec:	20000000 	.word	0x20000000
 80062f0:	431bde83 	.word	0x431bde83

080062f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80062f4:	4a02      	ldr	r2, [pc, #8]	; (8006300 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80062f6:	6893      	ldr	r3, [r2, #8]
 80062f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062fc:	6093      	str	r3, [r2, #8]
}
 80062fe:	4770      	bx	lr
 8006300:	40007000 	.word	0x40007000

08006304 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006304:	2800      	cmp	r0, #0
 8006306:	f000 81c3 	beq.w	8006690 <HAL_RCC_OscConfig+0x38c>
{
 800630a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800630e:	6803      	ldr	r3, [r0, #0]
 8006310:	07d9      	lsls	r1, r3, #31
{
 8006312:	b082      	sub	sp, #8
 8006314:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006316:	d52d      	bpl.n	8006374 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006318:	49b5      	ldr	r1, [pc, #724]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 800631a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800631c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006322:	2a0c      	cmp	r2, #12
 8006324:	f000 810a 	beq.w	800653c <HAL_RCC_OscConfig+0x238>
 8006328:	2a08      	cmp	r2, #8
 800632a:	f000 810c 	beq.w	8006546 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006334:	f000 8133 	beq.w	800659e <HAL_RCC_OscConfig+0x29a>
 8006338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800633c:	f000 819b 	beq.w	8006676 <HAL_RCC_OscConfig+0x372>
 8006340:	4dab      	ldr	r5, [pc, #684]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 8006342:	682a      	ldr	r2, [r5, #0]
 8006344:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	682a      	ldr	r2, [r5, #0]
 800634c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006350:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006352:	2b00      	cmp	r3, #0
 8006354:	f040 8128 	bne.w	80065a8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fe fa70 	bl	800483c <HAL_GetTick>
 800635c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800635e:	e005      	b.n	800636c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006360:	f7fe fa6c 	bl	800483c <HAL_GetTick>
 8006364:	1b80      	subs	r0, r0, r6
 8006366:	2864      	cmp	r0, #100	; 0x64
 8006368:	f200 813b 	bhi.w	80065e2 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	039f      	lsls	r7, r3, #14
 8006370:	d4f6      	bmi.n	8006360 <HAL_RCC_OscConfig+0x5c>
 8006372:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006374:	079e      	lsls	r6, r3, #30
 8006376:	d528      	bpl.n	80063ca <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006378:	4a9d      	ldr	r2, [pc, #628]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 800637a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800637c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006382:	2b0c      	cmp	r3, #12
 8006384:	f000 80ec 	beq.w	8006560 <HAL_RCC_OscConfig+0x25c>
 8006388:	2b04      	cmp	r3, #4
 800638a:	f000 80ee 	beq.w	800656a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800638e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006390:	4d97      	ldr	r5, [pc, #604]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8116 	beq.w	80065c4 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a0:	f7fe fa4c 	bl	800483c <HAL_GetTick>
 80063a4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063a6:	e005      	b.n	80063b4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a8:	f7fe fa48 	bl	800483c <HAL_GetTick>
 80063ac:	1b80      	subs	r0, r0, r6
 80063ae:	2802      	cmp	r0, #2
 80063b0:	f200 8117 	bhi.w	80065e2 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	0558      	lsls	r0, r3, #21
 80063b8:	d5f6      	bpl.n	80063a8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	686b      	ldr	r3, [r5, #4]
 80063bc:	6922      	ldr	r2, [r4, #16]
 80063be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80063c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80063c6:	606b      	str	r3, [r5, #4]
 80063c8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ca:	071a      	lsls	r2, r3, #28
 80063cc:	d519      	bpl.n	8006402 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ce:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063d0:	4d87      	ldr	r5, [pc, #540]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 809e 	beq.w	8006514 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80063d8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7fe fa2a 	bl	800483c <HAL_GetTick>
 80063e8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063ea:	e005      	b.n	80063f8 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ec:	f7fe fa26 	bl	800483c <HAL_GetTick>
 80063f0:	1b80      	subs	r0, r0, r6
 80063f2:	2802      	cmp	r0, #2
 80063f4:	f200 80f5 	bhi.w	80065e2 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80063fc:	079f      	lsls	r7, r3, #30
 80063fe:	d5f5      	bpl.n	80063ec <HAL_RCC_OscConfig+0xe8>
 8006400:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006402:	0759      	lsls	r1, r3, #29
 8006404:	d541      	bpl.n	800648a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006406:	4b7a      	ldr	r3, [pc, #488]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 8006408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800640a:	00d2      	lsls	r2, r2, #3
 800640c:	f100 80ed 	bmi.w	80065ea <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006412:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006416:	659a      	str	r2, [r3, #88]	; 0x58
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006422:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006424:	4e73      	ldr	r6, [pc, #460]	; (80065f4 <HAL_RCC_OscConfig+0x2f0>)
 8006426:	6833      	ldr	r3, [r6, #0]
 8006428:	05df      	lsls	r7, r3, #23
 800642a:	f140 8113 	bpl.w	8006654 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	2b01      	cmp	r3, #1
 8006432:	f000 80e3 	beq.w	80065fc <HAL_RCC_OscConfig+0x2f8>
 8006436:	2b05      	cmp	r3, #5
 8006438:	f000 8169 	beq.w	800670e <HAL_RCC_OscConfig+0x40a>
 800643c:	4e6c      	ldr	r6, [pc, #432]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 800643e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800644a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800644e:	f022 0204 	bic.w	r2, r2, #4
 8006452:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 80d7 	bne.w	800660a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645c:	f7fe f9ee 	bl	800483c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006460:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006464:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006466:	e005      	b.n	8006474 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006468:	f7fe f9e8 	bl	800483c <HAL_GetTick>
 800646c:	1bc0      	subs	r0, r0, r7
 800646e:	4540      	cmp	r0, r8
 8006470:	f200 80b7 	bhi.w	80065e2 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006474:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8006478:	079a      	lsls	r2, r3, #30
 800647a:	d4f5      	bmi.n	8006468 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800647c:	b125      	cbz	r5, 8006488 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647e:	4a5c      	ldr	r2, [pc, #368]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 8006480:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006486:	6593      	str	r3, [r2, #88]	; 0x58
 8006488:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800648a:	069b      	lsls	r3, r3, #26
 800648c:	d518      	bpl.n	80064c0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800648e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006490:	4d57      	ldr	r5, [pc, #348]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80ca 	beq.w	800662c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8006498:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a4:	f7fe f9ca 	bl	800483c <HAL_GetTick>
 80064a8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064aa:	e005      	b.n	80064b8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064ac:	f7fe f9c6 	bl	800483c <HAL_GetTick>
 80064b0:	1b80      	subs	r0, r0, r6
 80064b2:	2802      	cmp	r0, #2
 80064b4:	f200 8095 	bhi.w	80065e2 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80064bc:	079f      	lsls	r7, r3, #30
 80064be:	d5f5      	bpl.n	80064ac <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064c0:	69e0      	ldr	r0, [r4, #28]
 80064c2:	b318      	cbz	r0, 800650c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064c4:	4d4a      	ldr	r5, [pc, #296]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 80064c6:	68ab      	ldr	r3, [r5, #8]
 80064c8:	f003 030c 	and.w	r3, r3, #12
 80064cc:	2b0c      	cmp	r3, #12
 80064ce:	f000 812c 	beq.w	800672a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064d4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80064d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064da:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064dc:	f000 80da 	beq.w	8006694 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80064e0:	68eb      	ldr	r3, [r5, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80064e8:	68eb      	ldr	r3, [r5, #12]
 80064ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80064ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f2:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fe f9a2 	bl	800483c <HAL_GetTick>
 80064f8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064fa:	e004      	b.n	8006506 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fe f99e 	bl	800483c <HAL_GetTick>
 8006500:	1b00      	subs	r0, r0, r4
 8006502:	2802      	cmp	r0, #2
 8006504:	d86d      	bhi.n	80065e2 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	019b      	lsls	r3, r3, #6
 800650a:	d4f7      	bmi.n	80064fc <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800650c:	2000      	movs	r0, #0
}
 800650e:	b002      	add	sp, #8
 8006510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006514:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006520:	f7fe f98c 	bl	800483c <HAL_GetTick>
 8006524:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006526:	e004      	b.n	8006532 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006528:	f7fe f988 	bl	800483c <HAL_GetTick>
 800652c:	1b80      	subs	r0, r0, r6
 800652e:	2802      	cmp	r0, #2
 8006530:	d857      	bhi.n	80065e2 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006532:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006536:	0798      	lsls	r0, r3, #30
 8006538:	d4f6      	bmi.n	8006528 <HAL_RCC_OscConfig+0x224>
 800653a:	e761      	b.n	8006400 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800653c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006540:	2903      	cmp	r1, #3
 8006542:	f47f aef4 	bne.w	800632e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006546:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	0392      	lsls	r2, r2, #14
 800654c:	f57f af12 	bpl.w	8006374 <HAL_RCC_OscConfig+0x70>
 8006550:	6862      	ldr	r2, [r4, #4]
 8006552:	2a00      	cmp	r2, #0
 8006554:	f47f af0e 	bne.w	8006374 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006558:	2001      	movs	r0, #1
}
 800655a:	b002      	add	sp, #8
 800655c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006560:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006564:	2a02      	cmp	r2, #2
 8006566:	f47f af12 	bne.w	800638e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800656a:	4b21      	ldr	r3, [pc, #132]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	055d      	lsls	r5, r3, #21
 8006570:	d502      	bpl.n	8006578 <HAL_RCC_OscConfig+0x274>
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0ef      	beq.n	8006558 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006578:	4a1d      	ldr	r2, [pc, #116]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 800657a:	6920      	ldr	r0, [r4, #16]
 800657c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800657e:	491e      	ldr	r1, [pc, #120]	; (80065f8 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006580:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006584:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006588:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800658a:	6808      	ldr	r0, [r1, #0]
 800658c:	f7fe f914 	bl	80047b8 <HAL_InitTick>
 8006590:	2800      	cmp	r0, #0
 8006592:	d1e1      	bne.n	8006558 <HAL_RCC_OscConfig+0x254>
 8006594:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006596:	071a      	lsls	r2, r3, #28
 8006598:	f57f af33 	bpl.w	8006402 <HAL_RCC_OscConfig+0xfe>
 800659c:	e717      	b.n	80063ce <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800659e:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
 80065a0:	6813      	ldr	r3, [r2, #0]
 80065a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80065a8:	f7fe f948 	bl	800483c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ac:	4e10      	ldr	r6, [pc, #64]	; (80065f0 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 80065ae:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065b0:	e004      	b.n	80065bc <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b2:	f7fe f943 	bl	800483c <HAL_GetTick>
 80065b6:	1b40      	subs	r0, r0, r5
 80065b8:	2864      	cmp	r0, #100	; 0x64
 80065ba:	d812      	bhi.n	80065e2 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065bc:	6833      	ldr	r3, [r6, #0]
 80065be:	039b      	lsls	r3, r3, #14
 80065c0:	d5f7      	bpl.n	80065b2 <HAL_RCC_OscConfig+0x2ae>
 80065c2:	e6d6      	b.n	8006372 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80065cc:	f7fe f936 	bl	800483c <HAL_GetTick>
 80065d0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065d2:	682b      	ldr	r3, [r5, #0]
 80065d4:	0559      	lsls	r1, r3, #21
 80065d6:	d5dd      	bpl.n	8006594 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d8:	f7fe f930 	bl	800483c <HAL_GetTick>
 80065dc:	1b80      	subs	r0, r0, r6
 80065de:	2802      	cmp	r0, #2
 80065e0:	d9f7      	bls.n	80065d2 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 80065e2:	2003      	movs	r0, #3
}
 80065e4:	b002      	add	sp, #8
 80065e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80065ea:	2500      	movs	r5, #0
 80065ec:	e71a      	b.n	8006424 <HAL_RCC_OscConfig+0x120>
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000
 80065f4:	40007000 	.word	0x40007000
 80065f8:	20000008 	.word	0x20000008
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065fc:	4a65      	ldr	r2, [pc, #404]	; (8006794 <HAL_RCC_OscConfig+0x490>)
 80065fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800660a:	f7fe f917 	bl	800483c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800660e:	4f61      	ldr	r7, [pc, #388]	; (8006794 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006610:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006616:	e004      	b.n	8006622 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006618:	f7fe f910 	bl	800483c <HAL_GetTick>
 800661c:	1b80      	subs	r0, r0, r6
 800661e:	4540      	cmp	r0, r8
 8006620:	d8df      	bhi.n	80065e2 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006626:	0799      	lsls	r1, r3, #30
 8006628:	d5f6      	bpl.n	8006618 <HAL_RCC_OscConfig+0x314>
 800662a:	e727      	b.n	800647c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800662c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006638:	f7fe f900 	bl	800483c <HAL_GetTick>
 800663c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800663e:	e004      	b.n	800664a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006640:	f7fe f8fc 	bl	800483c <HAL_GetTick>
 8006644:	1b80      	subs	r0, r0, r6
 8006646:	2802      	cmp	r0, #2
 8006648:	d8cb      	bhi.n	80065e2 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800664a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800664e:	0798      	lsls	r0, r3, #30
 8006650:	d4f6      	bmi.n	8006640 <HAL_RCC_OscConfig+0x33c>
 8006652:	e735      	b.n	80064c0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800665c:	f7fe f8ee 	bl	800483c <HAL_GetTick>
 8006660:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006662:	6833      	ldr	r3, [r6, #0]
 8006664:	05d8      	lsls	r0, r3, #23
 8006666:	f53f aee2 	bmi.w	800642e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666a:	f7fe f8e7 	bl	800483c <HAL_GetTick>
 800666e:	1bc0      	subs	r0, r0, r7
 8006670:	2802      	cmp	r0, #2
 8006672:	d9f6      	bls.n	8006662 <HAL_RCC_OscConfig+0x35e>
 8006674:	e7b5      	b.n	80065e2 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800667a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800668c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800668e:	e78b      	b.n	80065a8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8006690:	2001      	movs	r0, #1
}
 8006692:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006694:	f7fe f8d2 	bl	800483c <HAL_GetTick>
 8006698:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800669a:	e004      	b.n	80066a6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800669c:	f7fe f8ce 	bl	800483c <HAL_GetTick>
 80066a0:	1b80      	subs	r0, r0, r6
 80066a2:	2802      	cmp	r0, #2
 80066a4:	d89d      	bhi.n	80065e2 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	0199      	lsls	r1, r3, #6
 80066aa:	d4f7      	bmi.n	800669c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ac:	68e9      	ldr	r1, [r5, #12]
 80066ae:	4b3a      	ldr	r3, [pc, #232]	; (8006798 <HAL_RCC_OscConfig+0x494>)
 80066b0:	6a22      	ldr	r2, [r4, #32]
 80066b2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80066b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066b8:	400b      	ands	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80066c0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80066c4:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80066c8:	3801      	subs	r0, #1
 80066ca:	0849      	lsrs	r1, r1, #1
 80066cc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80066d0:	3901      	subs	r1, #1
 80066d2:	0852      	lsrs	r2, r2, #1
 80066d4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80066d8:	3a01      	subs	r2, #1
 80066da:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80066de:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80066e0:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066e2:	4e2c      	ldr	r6, [pc, #176]	; (8006794 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 80066e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066e8:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066ea:	68eb      	ldr	r3, [r5, #12]
 80066ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80066f2:	f7fe f8a3 	bl	800483c <HAL_GetTick>
 80066f6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066f8:	e005      	b.n	8006706 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066fa:	f7fe f89f 	bl	800483c <HAL_GetTick>
 80066fe:	1b00      	subs	r0, r0, r4
 8006700:	2802      	cmp	r0, #2
 8006702:	f63f af6e 	bhi.w	80065e2 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006706:	6833      	ldr	r3, [r6, #0]
 8006708:	019a      	lsls	r2, r3, #6
 800670a:	d5f6      	bpl.n	80066fa <HAL_RCC_OscConfig+0x3f6>
 800670c:	e6fe      	b.n	800650c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800670e:	4b21      	ldr	r3, [pc, #132]	; (8006794 <HAL_RCC_OscConfig+0x490>)
 8006710:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006714:	f042 0204 	orr.w	r2, r2, #4
 8006718:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800671c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006720:	f042 0201 	orr.w	r2, r2, #1
 8006724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006728:	e76f      	b.n	800660a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800672a:	2801      	cmp	r0, #1
 800672c:	f43f aeef 	beq.w	800650e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006730:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006732:	6a22      	ldr	r2, [r4, #32]
 8006734:	f003 0103 	and.w	r1, r3, #3
 8006738:	4291      	cmp	r1, r2
 800673a:	f47f af0d 	bne.w	8006558 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800673e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006744:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006746:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800674a:	f47f af05 	bne.w	8006558 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800674e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006750:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006754:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006758:	f47f aefe 	bne.w	8006558 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800675c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800675e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006762:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006766:	f47f aef7 	bne.w	8006558 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800676a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800676c:	0852      	lsrs	r2, r2, #1
 800676e:	3a01      	subs	r2, #1
 8006770:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006774:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006778:	f47f aeee 	bne.w	8006558 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800677c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800677e:	0852      	lsrs	r2, r2, #1
 8006780:	3a01      	subs	r2, #1
 8006782:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006786:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800678a:	bf14      	ite	ne
 800678c:	2001      	movne	r0, #1
 800678e:	2000      	moveq	r0, #0
 8006790:	e6bd      	b.n	800650e <HAL_RCC_OscConfig+0x20a>
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	019f800c 	.word	0x019f800c

0800679c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800679c:	4b18      	ldr	r3, [pc, #96]	; (8006800 <HAL_RCC_GetSysClockFreq+0x64>)
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	f002 020c 	and.w	r2, r2, #12
 80067a4:	2a04      	cmp	r2, #4
 80067a6:	d027      	beq.n	80067f8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	f002 020c 	and.w	r2, r2, #12
 80067ae:	2a08      	cmp	r2, #8
 80067b0:	d024      	beq.n	80067fc <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	f002 020c 	and.w	r2, r2, #12
 80067b8:	2a0c      	cmp	r2, #12
 80067ba:	d001      	beq.n	80067c0 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80067bc:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80067be:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067c0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067c2:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c4:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067c6:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067ca:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 80067ce:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067d0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067d4:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067d8:	bf0c      	ite	eq
 80067da:	480a      	ldreq	r0, [pc, #40]	; (8006804 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067dc:	480a      	ldrne	r0, [pc, #40]	; (8006808 <HAL_RCC_GetSysClockFreq+0x6c>)
 80067de:	fbb0 f0f2 	udiv	r0, r0, r2
 80067e2:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_GetSysClockFreq+0x64>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80067ee:	3301      	adds	r3, #1
 80067f0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80067f2:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80067f6:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80067f8:	4803      	ldr	r0, [pc, #12]	; (8006808 <HAL_RCC_GetSysClockFreq+0x6c>)
 80067fa:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <HAL_RCC_GetSysClockFreq+0x68>)
 80067fe:	4770      	bx	lr
 8006800:	40021000 	.word	0x40021000
 8006804:	007a1200 	.word	0x007a1200
 8006808:	00f42400 	.word	0x00f42400

0800680c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800680c:	2800      	cmp	r0, #0
 800680e:	f000 80ef 	beq.w	80069f0 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006812:	4a7f      	ldr	r2, [pc, #508]	; (8006a10 <HAL_RCC_ClockConfig+0x204>)
{
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006818:	6813      	ldr	r3, [r2, #0]
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	428b      	cmp	r3, r1
 8006820:	460d      	mov	r5, r1
 8006822:	4604      	mov	r4, r0
 8006824:	d20c      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	f023 030f 	bic.w	r3, r3, #15
 800682c:	430b      	orrs	r3, r1
 800682e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006830:	6813      	ldr	r3, [r2, #0]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	428b      	cmp	r3, r1
 8006838:	d002      	beq.n	8006840 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800683a:	2001      	movs	r0, #1
}
 800683c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	07de      	lsls	r6, r3, #31
 8006844:	d563      	bpl.n	800690e <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	2a03      	cmp	r2, #3
 800684a:	f000 809a 	beq.w	8006982 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800684e:	4b71      	ldr	r3, [pc, #452]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006850:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006852:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006854:	f000 8091 	beq.w	800697a <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006858:	055b      	lsls	r3, r3, #21
 800685a:	d5ee      	bpl.n	800683a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800685c:	f7ff ff9e 	bl	800679c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006860:	4b6d      	ldr	r3, [pc, #436]	; (8006a18 <HAL_RCC_ClockConfig+0x20c>)
 8006862:	4298      	cmp	r0, r3
 8006864:	f200 80c6 	bhi.w	80069f4 <HAL_RCC_ClockConfig+0x1e8>
 8006868:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800686a:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800686e:	4e69      	ldr	r6, [pc, #420]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 8006870:	68b3      	ldr	r3, [r6, #8]
 8006872:	f023 0303 	bic.w	r3, r3, #3
 8006876:	431a      	orrs	r2, r3
 8006878:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 800687a:	f7fd ffdf 	bl	800483c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800687e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006882:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006884:	e004      	b.n	8006890 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006886:	f7fd ffd9 	bl	800483c <HAL_GetTick>
 800688a:	1bc0      	subs	r0, r0, r7
 800688c:	4540      	cmp	r0, r8
 800688e:	d871      	bhi.n	8006974 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006890:	68b3      	ldr	r3, [r6, #8]
 8006892:	6862      	ldr	r2, [r4, #4]
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800689c:	d1f3      	bne.n	8006886 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	079f      	lsls	r7, r3, #30
 80068a2:	d436      	bmi.n	8006912 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80068a4:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80068a8:	d103      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80068aa:	68b3      	ldr	r3, [r6, #8]
 80068ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b0:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068b2:	4e57      	ldr	r6, [pc, #348]	; (8006a10 <HAL_RCC_ClockConfig+0x204>)
 80068b4:	6833      	ldr	r3, [r6, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	42ab      	cmp	r3, r5
 80068bc:	d846      	bhi.n	800694c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	075a      	lsls	r2, r3, #29
 80068c2:	d506      	bpl.n	80068d2 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068c4:	4953      	ldr	r1, [pc, #332]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 80068c6:	68e0      	ldr	r0, [r4, #12]
 80068c8:	688a      	ldr	r2, [r1, #8]
 80068ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068ce:	4302      	orrs	r2, r0
 80068d0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d2:	071b      	lsls	r3, r3, #28
 80068d4:	d507      	bpl.n	80068e6 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068d6:	4a4f      	ldr	r2, [pc, #316]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 80068d8:	6921      	ldr	r1, [r4, #16]
 80068da:	6893      	ldr	r3, [r2, #8]
 80068dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80068e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80068e4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068e6:	f7ff ff59 	bl	800679c <HAL_RCC_GetSysClockFreq>
 80068ea:	4a4a      	ldr	r2, [pc, #296]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 80068ec:	4c4b      	ldr	r4, [pc, #300]	; (8006a1c <HAL_RCC_ClockConfig+0x210>)
 80068ee:	6892      	ldr	r2, [r2, #8]
 80068f0:	494b      	ldr	r1, [pc, #300]	; (8006a20 <HAL_RCC_ClockConfig+0x214>)
 80068f2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80068f6:	4603      	mov	r3, r0
 80068f8:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80068fa:	484a      	ldr	r0, [pc, #296]	; (8006a24 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068fc:	f002 021f 	and.w	r2, r2, #31
 8006900:	40d3      	lsrs	r3, r2
 8006902:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006904:	6800      	ldr	r0, [r0, #0]
}
 8006906:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800690a:	f7fd bf55 	b.w	80047b8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800690e:	0798      	lsls	r0, r3, #30
 8006910:	d5cf      	bpl.n	80068b2 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006912:	0758      	lsls	r0, r3, #29
 8006914:	d504      	bpl.n	8006920 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006916:	493f      	ldr	r1, [pc, #252]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 8006918:	688a      	ldr	r2, [r1, #8]
 800691a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800691e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006920:	0719      	lsls	r1, r3, #28
 8006922:	d506      	bpl.n	8006932 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006924:	4a3b      	ldr	r2, [pc, #236]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 8006926:	6893      	ldr	r3, [r2, #8]
 8006928:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800692c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006930:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006932:	4a38      	ldr	r2, [pc, #224]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 8006934:	68a1      	ldr	r1, [r4, #8]
 8006936:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006938:	4e35      	ldr	r6, [pc, #212]	; (8006a10 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693e:	430b      	orrs	r3, r1
 8006940:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006942:	6833      	ldr	r3, [r6, #0]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	42ab      	cmp	r3, r5
 800694a:	d9b8      	bls.n	80068be <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	f023 030f 	bic.w	r3, r3, #15
 8006952:	432b      	orrs	r3, r5
 8006954:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006956:	f7fd ff71 	bl	800483c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800695a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800695e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	42ab      	cmp	r3, r5
 8006968:	d0a9      	beq.n	80068be <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800696a:	f7fd ff67 	bl	800483c <HAL_GetTick>
 800696e:	1bc0      	subs	r0, r0, r7
 8006970:	4540      	cmp	r0, r8
 8006972:	d9f5      	bls.n	8006960 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8006974:	2003      	movs	r0, #3
}
 8006976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800697a:	039a      	lsls	r2, r3, #14
 800697c:	f53f af6e 	bmi.w	800685c <HAL_RCC_ClockConfig+0x50>
 8006980:	e75b      	b.n	800683a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006982:	4824      	ldr	r0, [pc, #144]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 8006984:	6801      	ldr	r1, [r0, #0]
 8006986:	0189      	lsls	r1, r1, #6
 8006988:	f57f af57 	bpl.w	800683a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800698c:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800698e:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006990:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006992:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006996:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 800699a:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800699c:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069a0:	bf0c      	ite	eq
 80069a2:	4921      	ldreq	r1, [pc, #132]	; (8006a28 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069a4:	4921      	ldrne	r1, [pc, #132]	; (8006a2c <HAL_RCC_ClockConfig+0x220>)
 80069a6:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069aa:	4e1a      	ldr	r6, [pc, #104]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80069ac:	4f1a      	ldr	r7, [pc, #104]	; (8006a18 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ae:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80069b2:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069b6:	68f0      	ldr	r0, [r6, #12]
 80069b8:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80069bc:	3001      	adds	r0, #1
 80069be:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80069c0:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80069c4:	42b9      	cmp	r1, r7
 80069c6:	d920      	bls.n	8006a0a <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069c8:	68b1      	ldr	r1, [r6, #8]
 80069ca:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_ClockConfig+0x1d0>
 80069d0:	f013 0902 	ands.w	r9, r3, #2
 80069d4:	f43f af4b 	beq.w	800686e <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069d8:	68a3      	ldr	r3, [r4, #8]
 80069da:	b9b3      	cbnz	r3, 8006a0a <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069dc:	490d      	ldr	r1, [pc, #52]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 80069de:	688b      	ldr	r3, [r1, #8]
 80069e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e8:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069ea:	f04f 0980 	mov.w	r9, #128	; 0x80
 80069ee:	e73e      	b.n	800686e <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 80069f0:	2001      	movs	r0, #1
}
 80069f2:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069f4:	4a07      	ldr	r2, [pc, #28]	; (8006a14 <HAL_RCC_ClockConfig+0x208>)
 80069f6:	6893      	ldr	r3, [r2, #8]
 80069f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a02:	6862      	ldr	r2, [r4, #4]
 8006a04:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006a08:	e731      	b.n	800686e <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	e72e      	b.n	800686e <HAL_RCC_ClockConfig+0x62>
 8006a10:	40022000 	.word	0x40022000
 8006a14:	40021000 	.word	0x40021000
 8006a18:	04c4b400 	.word	0x04c4b400
 8006a1c:	0800ed5c 	.word	0x0800ed5c
 8006a20:	20000000 	.word	0x20000000
 8006a24:	20000008 	.word	0x20000008
 8006a28:	007a1200 	.word	0x007a1200
 8006a2c:	00f42400 	.word	0x00f42400

08006a30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006a32:	4a06      	ldr	r2, [pc, #24]	; (8006a4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006a34:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006a36:	4906      	ldr	r1, [pc, #24]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a38:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006a3c:	6808      	ldr	r0, [r1, #0]
 8006a3e:	5cd3      	ldrb	r3, [r2, r3]
 8006a40:	f003 031f 	and.w	r3, r3, #31
}
 8006a44:	40d8      	lsrs	r0, r3
 8006a46:	4770      	bx	lr
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	0800ed6c 	.word	0x0800ed6c
 8006a50:	20000000 	.word	0x20000000

08006a54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006a56:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006a58:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006a5a:	4906      	ldr	r1, [pc, #24]	; (8006a74 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a5c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	5cd3      	ldrb	r3, [r2, r3]
 8006a64:	f003 031f 	and.w	r3, r3, #31
}
 8006a68:	40d8      	lsrs	r0, r3
 8006a6a:	4770      	bx	lr
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	0800ed6c 	.word	0x0800ed6c
 8006a74:	20000000 	.word	0x20000000

08006a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a7c:	6803      	ldr	r3, [r0, #0]
{
 8006a7e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a80:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8006a84:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a86:	d056      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a88:	4bb6      	ldr	r3, [pc, #728]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a8c:	00d5      	lsls	r5, r2, #3
 8006a8e:	f140 813e 	bpl.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8006a92:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a94:	4db4      	ldr	r5, [pc, #720]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a96:	682b      	ldr	r3, [r5, #0]
 8006a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a9c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a9e:	f7fd fecd 	bl	800483c <HAL_GetTick>
 8006aa2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa6:	f7fd fec9 	bl	800483c <HAL_GetTick>
 8006aaa:	1b83      	subs	r3, r0, r6
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	f200 8139 	bhi.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	05d8      	lsls	r0, r3, #23
 8006ab6:	d5f6      	bpl.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ab8:	4daa      	ldr	r5, [pc, #680]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006aba:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006abe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006ac2:	d027      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006ac4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d025      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006aca:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ace:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ada:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ade:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ae6:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006aec:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006af0:	f140 8148 	bpl.w	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fd fea2 	bl	800483c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006afc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006afe:	e005      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b00:	f7fd fe9c 	bl	800483c <HAL_GetTick>
 8006b04:	1b80      	subs	r0, r0, r6
 8006b06:	4540      	cmp	r0, r8
 8006b08:	f200 810c 	bhi.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b0c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006b10:	079b      	lsls	r3, r3, #30
 8006b12:	d5f5      	bpl.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006b14:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b16:	4993      	ldr	r1, [pc, #588]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b26:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b28:	b127      	cbz	r7, 8006b34 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b2a:	4a8e      	ldr	r2, [pc, #568]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b32:	6593      	str	r3, [r2, #88]	; 0x58
 8006b34:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b36:	07dd      	lsls	r5, r3, #31
 8006b38:	d508      	bpl.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b3a:	498a      	ldr	r1, [pc, #552]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b3c:	6865      	ldr	r5, [r4, #4]
 8006b3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006b42:	f022 0203 	bic.w	r2, r2, #3
 8006b46:	432a      	orrs	r2, r5
 8006b48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b4c:	0799      	lsls	r1, r3, #30
 8006b4e:	d508      	bpl.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b50:	4984      	ldr	r1, [pc, #528]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b52:	68a5      	ldr	r5, [r4, #8]
 8006b54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006b58:	f022 020c 	bic.w	r2, r2, #12
 8006b5c:	432a      	orrs	r2, r5
 8006b5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b62:	075a      	lsls	r2, r3, #29
 8006b64:	d508      	bpl.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b66:	497f      	ldr	r1, [pc, #508]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b68:	68e5      	ldr	r5, [r4, #12]
 8006b6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006b6e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006b72:	432a      	orrs	r2, r5
 8006b74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b78:	071f      	lsls	r7, r3, #28
 8006b7a:	d508      	bpl.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b7c:	4979      	ldr	r1, [pc, #484]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b7e:	6925      	ldr	r5, [r4, #16]
 8006b80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006b84:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b88:	432a      	orrs	r2, r5
 8006b8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b8e:	06de      	lsls	r6, r3, #27
 8006b90:	d508      	bpl.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b92:	4974      	ldr	r1, [pc, #464]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b94:	6965      	ldr	r5, [r4, #20]
 8006b96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006b9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b9e:	432a      	orrs	r2, r5
 8006ba0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ba4:	069d      	lsls	r5, r3, #26
 8006ba6:	d508      	bpl.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ba8:	496e      	ldr	r1, [pc, #440]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006baa:	69a5      	ldr	r5, [r4, #24]
 8006bac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006bb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bb4:	432a      	orrs	r2, r5
 8006bb6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bba:	0659      	lsls	r1, r3, #25
 8006bbc:	d508      	bpl.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bbe:	4969      	ldr	r1, [pc, #420]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006bc0:	69e5      	ldr	r5, [r4, #28]
 8006bc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006bc6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006bca:	432a      	orrs	r2, r5
 8006bcc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bd0:	061a      	lsls	r2, r3, #24
 8006bd2:	d508      	bpl.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bd4:	4963      	ldr	r1, [pc, #396]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006bd6:	6a25      	ldr	r5, [r4, #32]
 8006bd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006bdc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006be0:	432a      	orrs	r2, r5
 8006be2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006be6:	05df      	lsls	r7, r3, #23
 8006be8:	d508      	bpl.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bea:	495e      	ldr	r1, [pc, #376]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006bec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006bee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006bf2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006bf6:	432a      	orrs	r2, r5
 8006bf8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bfc:	039e      	lsls	r6, r3, #14
 8006bfe:	d508      	bpl.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c00:	4958      	ldr	r1, [pc, #352]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c02:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006c04:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8006c08:	f022 0203 	bic.w	r2, r2, #3
 8006c0c:	432a      	orrs	r2, r5
 8006c0e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c12:	059d      	lsls	r5, r3, #22
 8006c14:	d508      	bpl.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c16:	4953      	ldr	r1, [pc, #332]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006c1a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006c1e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006c22:	432a      	orrs	r2, r5
 8006c24:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c28:	0559      	lsls	r1, r3, #21
 8006c2a:	d50b      	bpl.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c2c:	494d      	ldr	r1, [pc, #308]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c2e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006c30:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006c34:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006c38:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c3a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c42:	d071      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c44:	051a      	lsls	r2, r3, #20
 8006c46:	d50b      	bpl.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c48:	4946      	ldr	r1, [pc, #280]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c4a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006c4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006c50:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006c54:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c56:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c5a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c5e:	d068      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c60:	04df      	lsls	r7, r3, #19
 8006c62:	d50b      	bpl.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c64:	493f      	ldr	r1, [pc, #252]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c66:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006c68:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006c6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006c70:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c72:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c7a:	d05f      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c7c:	049e      	lsls	r6, r3, #18
 8006c7e:	d50b      	bpl.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c80:	4938      	ldr	r1, [pc, #224]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c82:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006c84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006c88:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006c8c:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c8e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c96:	d056      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c98:	045d      	lsls	r5, r3, #17
 8006c9a:	d50b      	bpl.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c9c:	4931      	ldr	r1, [pc, #196]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c9e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8006ca0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006ca4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006ca8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006caa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cb2:	d04d      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cb4:	0419      	lsls	r1, r3, #16
 8006cb6:	d50b      	bpl.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cb8:	492a      	ldr	r1, [pc, #168]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006cba:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8006cbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006cc4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cc6:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cce:	d044      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006cd0:	03da      	lsls	r2, r3, #15
 8006cd2:	d50b      	bpl.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006cd4:	4923      	ldr	r1, [pc, #140]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006cd6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8006cd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006cdc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006ce0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006ce2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ce6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006cea:	d03f      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cec:	035b      	lsls	r3, r3, #13
 8006cee:	d50b      	bpl.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cf0:	4a1c      	ldr	r2, [pc, #112]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006cf2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006cf4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8006cf8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cfc:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cfe:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d02:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006d06:	d036      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8006d08:	b002      	add	sp, #8
 8006d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d14:	659a      	str	r2, [r3, #88]	; 0x58
 8006d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006d20:	2701      	movs	r7, #1
 8006d22:	e6b7      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8006d24:	2003      	movs	r0, #3
 8006d26:	e6ff      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d28:	68ca      	ldr	r2, [r1, #12]
 8006d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d2e:	60ca      	str	r2, [r1, #12]
 8006d30:	e788      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d32:	68ca      	ldr	r2, [r1, #12]
 8006d34:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d38:	60ca      	str	r2, [r1, #12]
 8006d3a:	e791      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d3c:	68ca      	ldr	r2, [r1, #12]
 8006d3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d42:	60ca      	str	r2, [r1, #12]
 8006d44:	e79a      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d46:	68ca      	ldr	r2, [r1, #12]
 8006d48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d4c:	60ca      	str	r2, [r1, #12]
 8006d4e:	e7a3      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d50:	68ca      	ldr	r2, [r1, #12]
 8006d52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d56:	60ca      	str	r2, [r1, #12]
 8006d58:	e7ac      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d5a:	68ca      	ldr	r2, [r1, #12]
 8006d5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d60:	60ca      	str	r2, [r1, #12]
 8006d62:	e7b5      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8006d64:	40021000 	.word	0x40021000
 8006d68:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d6c:	68ca      	ldr	r2, [r1, #12]
 8006d6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d72:	60ca      	str	r2, [r1, #12]
 8006d74:	e7ba      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d76:	68d3      	ldr	r3, [r2, #12]
 8006d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d7c:	60d3      	str	r3, [r2, #12]
}
 8006d7e:	b002      	add	sp, #8
 8006d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d84:	4613      	mov	r3, r2
 8006d86:	e6c6      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x9e>

08006d88 <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	4617      	mov	r7, r2
 8006d90:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d92:	f7fd fd53 	bl	800483c <HAL_GetTick>
 8006d96:	4427      	add	r7, r4
 8006d98:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 8006d9a:	f7fd fd4f 	bl	800483c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d9e:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006da6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006daa:	0d1b      	lsrs	r3, r3, #20
 8006dac:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8006db0:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006db2:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006db4:	682a      	ldr	r2, [r5, #0]
 8006db6:	1c61      	adds	r1, r4, #1
 8006db8:	6893      	ldr	r3, [r2, #8]
 8006dba:	d10d      	bne.n	8006dd8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 8006dbc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006dc0:	d007      	beq.n	8006dd2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006dc2:	7b13      	ldrb	r3, [r2, #12]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006dc8:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006dca:	6893      	ldr	r3, [r2, #8]
 8006dcc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006dd0:	d1f7      	bne.n	8006dc2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 8006dd2:	2000      	movs	r0, #0
}
 8006dd4:	b003      	add	sp, #12
 8006dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8006dd8:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8006ddc:	d0f9      	beq.n	8006dd2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006dde:	7b13      	ldrb	r3, [r2, #12]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8006de4:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006de6:	f7fd fd29 	bl	800483c <HAL_GetTick>
 8006dea:	1bc0      	subs	r0, r0, r7
 8006dec:	42b0      	cmp	r0, r6
 8006dee:	d208      	bcs.n	8006e02 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8006df0:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006df2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006df4:	2a00      	cmp	r2, #0
      count--;
 8006df6:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006dfa:	bf08      	it	eq
 8006dfc:	2600      	moveq	r6, #0
      count--;
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	e7d8      	b.n	8006db4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e02:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e06:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e08:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e10:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e12:	d014      	beq.n	8006e3e <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e14:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006e16:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006e1a:	d007      	beq.n	8006e2c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 8006e1c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006e1e:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8006e20:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8006e24:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8006e28:	2003      	movs	r0, #3
 8006e2a:	e7d3      	b.n	8006dd4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e7ee      	b.n	8006e1c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e3e:	68aa      	ldr	r2, [r5, #8]
 8006e40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006e44:	d002      	beq.n	8006e4c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006e4a:	d1e3      	bne.n	8006e14 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e7de      	b.n	8006e14 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 8006e56:	bf00      	nop
 8006e58:	20000000 	.word	0x20000000

08006e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	eb01 0802 	add.w	r8, r1, r2
 8006e66:	460d      	mov	r5, r1
 8006e68:	4616      	mov	r6, r2
 8006e6a:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e6c:	f7fd fce6 	bl	800483c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e70:	4f46      	ldr	r7, [pc, #280]	; (8006f8c <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e72:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 8006e76:	f7fd fce1 	bl	800483c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006e80:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e84:	0d1b      	lsrs	r3, r3, #20
 8006e86:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8006e8a:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e8c:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e8e:	1c68      	adds	r0, r5, #1
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	d11f      	bne.n	8006ed4 <SPI_EndRxTxTransaction+0x78>
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8006e9a:	d1fb      	bne.n	8006e94 <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e9c:	f7fd fcce 	bl	800483c <HAL_GetTick>
 8006ea0:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 8006ea4:	f7fd fcca 	bl	800483c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006eae:	fb08 f303 	mul.w	r3, r8, r3
 8006eb2:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 8006eb4:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eb6:	1c69      	adds	r1, r5, #1
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	d11f      	bne.n	8006efc <SPI_EndRxTxTransaction+0xa0>
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	0612      	lsls	r2, r2, #24
 8006ec0:	d4fc      	bmi.n	8006ebc <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ec2:	4632      	mov	r2, r6
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff ff5e 	bl	8006d88 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8006ecc:	bb40      	cbnz	r0, 8006f20 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006ece:	b002      	add	sp, #8
 8006ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8006eda:	d0df      	beq.n	8006e9c <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006edc:	f7fd fcae 	bl	800483c <HAL_GetTick>
 8006ee0:	eba0 000a 	sub.w	r0, r0, sl
 8006ee4:	4548      	cmp	r0, r9
 8006ee6:	d221      	bcs.n	8006f2c <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8006ee8:	9a00      	ldr	r2, [sp, #0]
      count--;
 8006eea:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 8006eec:	2a00      	cmp	r2, #0
      count--;
 8006eee:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006ef2:	bf08      	it	eq
 8006ef4:	f04f 0900 	moveq.w	r9, #0
      count--;
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	e7c8      	b.n	8006e8e <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	061b      	lsls	r3, r3, #24
 8006f00:	d5df      	bpl.n	8006ec2 <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f02:	f7fd fc9b 	bl	800483c <HAL_GetTick>
 8006f06:	1bc3      	subs	r3, r0, r7
 8006f08:	4543      	cmp	r3, r8
 8006f0a:	d20f      	bcs.n	8006f2c <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8006f0c:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006f0e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006f10:	2a00      	cmp	r2, #0
      count--;
 8006f12:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006f16:	bf08      	it	eq
 8006f18:	f04f 0800 	moveq.w	r8, #0
      count--;
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	e7ca      	b.n	8006eb6 <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f22:	f043 0320 	orr.w	r3, r3, #32
 8006f26:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f28:	2003      	movs	r0, #3
 8006f2a:	e7d0      	b.n	8006ece <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f2c:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f30:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f32:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f3a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f3c:	d019      	beq.n	8006f72 <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006f40:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006f44:	d107      	bne.n	8006f56 <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f54:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5c:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8006f5e:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f60:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8006f64:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f66:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8006f68:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8006f6c:	b002      	add	sp, #8
 8006f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f72:	68a2      	ldr	r2, [r4, #8]
 8006f74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006f78:	d002      	beq.n	8006f80 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f7a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006f7e:	d1de      	bne.n	8006f3e <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	e7d9      	b.n	8006f3e <SPI_EndRxTxTransaction+0xe2>
 8006f8a:	bf00      	nop
 8006f8c:	20000000 	.word	0x20000000

08006f90 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d07f      	beq.n	8007094 <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f94:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8006f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f9e:	f1bc 0f00 	cmp.w	ip, #0
 8006fa2:	d05c      	beq.n	800705e <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fa4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006faa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fae:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fb0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d05e      	beq.n	8007078 <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 8006fba:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fbc:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006fc4:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fc6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8006fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fce:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fd0:	d94c      	bls.n	800706c <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fd2:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8006fd6:	d15f      	bne.n	8007098 <HAL_SPI_Init+0x108>
 8006fd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006fda:	2700      	movs	r7, #0
 8006fdc:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fe0:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8006fe4:	6925      	ldr	r5, [r4, #16]
 8006fe6:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8006fea:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8006fee:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006ff2:	4333      	orrs	r3, r6
 8006ff4:	f005 0502 	and.w	r5, r5, #2
 8006ff8:	432b      	orrs	r3, r5
 8006ffa:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ffc:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007000:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007004:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007006:	432b      	orrs	r3, r5
 8007008:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800700c:	f002 0208 	and.w	r2, r2, #8
 8007010:	ea42 0208 	orr.w	r2, r2, r8
 8007014:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007018:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800701c:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007020:	ea43 030e 	orr.w	r3, r3, lr
 8007024:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007028:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800702c:	4333      	orrs	r3, r6
 800702e:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007032:	f00c 0c10 	and.w	ip, ip, #16
 8007036:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800703a:	432b      	orrs	r3, r5
 800703c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800703e:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007042:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007044:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007046:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007048:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800704a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800704e:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007050:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007052:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007054:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 8007058:	4610      	mov	r0, r2
}
 800705a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800705e:	6843      	ldr	r3, [r0, #4]
 8007060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007064:	d0a1      	beq.n	8006faa <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007066:	f8c0 c01c 	str.w	ip, [r0, #28]
 800706a:	e79e      	b.n	8006faa <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800706c:	d00c      	beq.n	8007088 <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800706e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007072:	2000      	movs	r0, #0
 8007074:	62a0      	str	r0, [r4, #40]	; 0x28
 8007076:	e7b3      	b.n	8006fe0 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 8007078:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800707c:	4620      	mov	r0, r4
 800707e:	f7fd f83b 	bl	80040f8 <HAL_SPI_MspInit>
 8007082:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8007086:	e798      	b.n	8006fba <HAL_SPI_Init+0x2a>
 8007088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800708a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800708e:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8007092:	e7a5      	b.n	8006fe0 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8007094:	2001      	movs	r0, #1
}
 8007096:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007098:	2700      	movs	r7, #0
 800709a:	e7ea      	b.n	8007072 <HAL_SPI_Init+0xe2>

0800709c <HAL_SPI_TransmitReceive>:
{
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80070a2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 80070a6:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 80070a8:	2801      	cmp	r0, #1
 80070aa:	f000 809d 	beq.w	80071e8 <HAL_SPI_TransmitReceive+0x14c>
 80070ae:	4698      	mov	r8, r3
 80070b0:	2301      	movs	r3, #1
 80070b2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80070b6:	468a      	mov	sl, r1
 80070b8:	4691      	mov	r9, r2
 80070ba:	f7fd fbbf 	bl	800483c <HAL_GetTick>
  tmp_state           = hspi->State;
 80070be:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80070c2:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070c4:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 80070c6:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80070c8:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070ca:	d010      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x52>
 80070cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d0:	d008      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 80070d2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80070d4:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80070d6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80070d8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80070dc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80070e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070e4:	68a2      	ldr	r2, [r4, #8]
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	d1f3      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x36>
 80070ea:	2904      	cmp	r1, #4
 80070ec:	d1f1      	bne.n	80070d2 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070ee:	f1ba 0f00 	cmp.w	sl, #0
 80070f2:	d07c      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x152>
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	d079      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x152>
 80070fa:	f1b8 0f00 	cmp.w	r8, #0
 80070fe:	d076      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007100:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007104:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007108:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800710a:	bf1c      	itt	ne
 800710c:	2205      	movne	r2, #5
 800710e:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007112:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 8007114:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007118:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800711a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800711e:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007120:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8007122:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8007126:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800712a:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800712e:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007132:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 8007134:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007138:	d85b      	bhi.n	80071f2 <HAL_SPI_TransmitReceive+0x156>
 800713a:	f1b8 0f01 	cmp.w	r8, #1
 800713e:	f240 80ea 	bls.w	8007316 <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007142:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007146:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007148:	6811      	ldr	r1, [r2, #0]
 800714a:	0649      	lsls	r1, r1, #25
 800714c:	f140 80ea 	bpl.w	8007324 <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007150:	b96b      	cbnz	r3, 800716e <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 8007152:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	f240 8120 	bls.w	800739c <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800715c:	4651      	mov	r1, sl
 800715e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007162:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8007164:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007166:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007168:	3b02      	subs	r3, #2
 800716a:	b29b      	uxth	r3, r3
 800716c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800716e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007170:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007172:	b29b      	uxth	r3, r3
 8007174:	b92b      	cbnz	r3, 8007182 <HAL_SPI_TransmitReceive+0xe6>
 8007176:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8084 	beq.w	800728a <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	6893      	ldr	r3, [r2, #8]
 8007186:	0799      	lsls	r1, r3, #30
 8007188:	d505      	bpl.n	8007196 <HAL_SPI_TransmitReceive+0xfa>
 800718a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800718c:	b29b      	uxth	r3, r3
 800718e:	b113      	cbz	r3, 8007196 <HAL_SPI_TransmitReceive+0xfa>
 8007190:	2f00      	cmp	r7, #0
 8007192:	f040 80e1 	bne.w	8007358 <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007196:	6893      	ldr	r3, [r2, #8]
 8007198:	f013 0301 	ands.w	r3, r3, #1
 800719c:	d01b      	beq.n	80071d6 <HAL_SPI_TransmitReceive+0x13a>
 800719e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80071a2:	b289      	uxth	r1, r1
 80071a4:	b1b9      	cbz	r1, 80071d6 <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 80071a6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80071aa:	b289      	uxth	r1, r1
 80071ac:	2901      	cmp	r1, #1
 80071ae:	f240 80c5 	bls.w	800733c <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80071b4:	68d1      	ldr	r1, [r2, #12]
 80071b6:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 80071ba:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071be:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80071c0:	3902      	subs	r1, #2
 80071c2:	b289      	uxth	r1, r1
 80071c4:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80071c8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80071cc:	b289      	uxth	r1, r1
 80071ce:	2901      	cmp	r1, #1
 80071d0:	f240 80d1 	bls.w	8007376 <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 80071d4:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071d6:	f7fd fb31 	bl	800483c <HAL_GetTick>
 80071da:	1b40      	subs	r0, r0, r5
 80071dc:	42b0      	cmp	r0, r6
 80071de:	d3c7      	bcc.n	8007170 <HAL_SPI_TransmitReceive+0xd4>
 80071e0:	1c73      	adds	r3, r6, #1
 80071e2:	d0c5      	beq.n	8007170 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 80071e4:	2003      	movs	r0, #3
 80071e6:	e775      	b.n	80070d4 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80071e8:	2002      	movs	r0, #2
}
 80071ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 80071ee:	2001      	movs	r0, #1
 80071f0:	e770      	b.n	80070d4 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071f2:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80071f6:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071f8:	6811      	ldr	r1, [r2, #0]
 80071fa:	0648      	lsls	r0, r1, #25
 80071fc:	d403      	bmi.n	8007206 <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 80071fe:	6811      	ldr	r1, [r2, #0]
 8007200:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007204:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 8081 	bne.w	800730e <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720c:	4651      	mov	r1, sl
 800720e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007212:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8007214:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007216:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007218:	3b01      	subs	r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800721e:	1c72      	adds	r2, r6, #1
{
 8007220:	f04f 0701 	mov.w	r7, #1
 8007224:	d028      	beq.n	8007278 <HAL_SPI_TransmitReceive+0x1dc>
 8007226:	e06d      	b.n	8007304 <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	6893      	ldr	r3, [r2, #8]
 800722c:	079b      	lsls	r3, r3, #30
 800722e:	d50d      	bpl.n	800724c <HAL_SPI_TransmitReceive+0x1b0>
 8007230:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007232:	b29b      	uxth	r3, r3
 8007234:	b153      	cbz	r3, 800724c <HAL_SPI_TransmitReceive+0x1b0>
 8007236:	b14f      	cbz	r7, 800724c <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007238:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800723a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800723e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8007240:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007242:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007244:	3b01      	subs	r3, #1
 8007246:	b29b      	uxth	r3, r3
 8007248:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800724a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800724c:	6893      	ldr	r3, [r2, #8]
 800724e:	f013 0301 	ands.w	r3, r3, #1
 8007252:	d00f      	beq.n	8007274 <HAL_SPI_TransmitReceive+0x1d8>
 8007254:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007258:	b289      	uxth	r1, r1
 800725a:	b159      	cbz	r1, 8007274 <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800725c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800725e:	68d2      	ldr	r2, [r2, #12]
 8007260:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8007264:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007268:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800726a:	3a01      	subs	r2, #1
 800726c:	b292      	uxth	r2, r2
        txallowed = 1U;
 800726e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8007270:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007274:	f7fd fae2 	bl	800483c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007278:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1d3      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x18c>
 8007280:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1ce      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800728a:	462a      	mov	r2, r5
 800728c:	4631      	mov	r1, r6
 800728e:	4620      	mov	r0, r4
 8007290:	f7ff fde4 	bl	8006e5c <SPI_EndRxTxTransaction>
 8007294:	2800      	cmp	r0, #0
 8007296:	f43f af1d 	beq.w	80070d4 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729a:	2320      	movs	r3, #32
 800729c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800729e:	2001      	movs	r0, #1
 80072a0:	e718      	b.n	80070d4 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0ee      	beq.n	800728a <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	6893      	ldr	r3, [r2, #8]
 80072b0:	0798      	lsls	r0, r3, #30
 80072b2:	d50d      	bpl.n	80072d0 <HAL_SPI_TransmitReceive+0x234>
 80072b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b153      	cbz	r3, 80072d0 <HAL_SPI_TransmitReceive+0x234>
 80072ba:	b14f      	cbz	r7, 80072d0 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072be:	f831 3b02 	ldrh.w	r3, [r1], #2
 80072c2:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80072c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c6:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80072ce:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072d0:	6893      	ldr	r3, [r2, #8]
 80072d2:	f013 0301 	ands.w	r3, r3, #1
 80072d6:	d00f      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x25c>
 80072d8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80072dc:	b289      	uxth	r1, r1
 80072de:	b159      	cbz	r1, 80072f8 <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80072e2:	68d2      	ldr	r2, [r2, #12]
 80072e4:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80072e8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ec:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80072ee:	3a01      	subs	r2, #1
 80072f0:	b292      	uxth	r2, r2
        txallowed = 1U;
 80072f2:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80072f4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072f8:	f7fd faa0 	bl	800483c <HAL_GetTick>
 80072fc:	1b40      	subs	r0, r0, r5
 80072fe:	42b0      	cmp	r0, r6
 8007300:	f4bf af70 	bcs.w	80071e4 <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007304:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1cf      	bne.n	80072ac <HAL_SPI_TransmitReceive+0x210>
 800730c:	e7c9      	b.n	80072a2 <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730e:	f1b8 0f01 	cmp.w	r8, #1
 8007312:	d184      	bne.n	800721e <HAL_SPI_TransmitReceive+0x182>
 8007314:	e77a      	b.n	800720c <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007316:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800731a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800731c:	6811      	ldr	r1, [r2, #0]
 800731e:	0649      	lsls	r1, r1, #25
 8007320:	f53f af17 	bmi.w	8007152 <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8007324:	6811      	ldr	r1, [r2, #0]
 8007326:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800732a:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800732c:	2b00      	cmp	r3, #0
 800732e:	f43f af10 	beq.w	8007152 <HAL_SPI_TransmitReceive+0xb6>
 8007332:	f1b8 0f01 	cmp.w	r8, #1
 8007336:	f47f af1a 	bne.w	800716e <HAL_SPI_TransmitReceive+0xd2>
 800733a:	e70a      	b.n	8007152 <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800733c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800733e:	7b12      	ldrb	r2, [r2, #12]
 8007340:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8007342:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8007346:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007348:	3a01      	subs	r2, #1
 800734a:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 800734c:	3101      	adds	r1, #1
        txallowed = 1U;
 800734e:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 8007350:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8007354:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007356:	e73e      	b.n	80071d6 <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 8007358:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d910      	bls.n	8007382 <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007360:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007362:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007366:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8007368:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800736a:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800736c:	3b02      	subs	r3, #2
 800736e:	b29b      	uxth	r3, r3
 8007370:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007372:	2700      	movs	r7, #0
 8007374:	e70f      	b.n	8007196 <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007376:	6851      	ldr	r1, [r2, #4]
 8007378:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 800737c:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800737e:	6051      	str	r1, [r2, #4]
 8007380:	e729      	b.n	80071d6 <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8007388:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800738a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800738c:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 800738e:	3b01      	subs	r3, #1
 8007390:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8007392:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8007394:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8007396:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8007398:	2700      	movs	r7, #0
 800739a:	e6fc      	b.n	8007196 <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800739c:	f89a 3000 	ldrb.w	r3, [sl]
 80073a0:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80073a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80073a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80073aa:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80073ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80073ae:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80073b0:	e6dd      	b.n	800716e <HAL_SPI_TransmitReceive+0xd2>
 80073b2:	bf00      	nop

080073b4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b4:	6a03      	ldr	r3, [r0, #32]
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	6203      	str	r3, [r0, #32]
{
 80073bc:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073c2:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073c4:	4f1a      	ldr	r7, [pc, #104]	; (8007430 <TIM_OC1_SetConfig+0x7c>)
  tmpccer |= OC_Config->OCPolarity;
 80073c6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80073c8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80073ce:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073d6:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 80073d8:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 80073dc:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073e0:	d012      	beq.n	8007408 <TIM_OC1_SetConfig+0x54>
 80073e2:	4c14      	ldr	r4, [pc, #80]	; (8007434 <TIM_OC1_SetConfig+0x80>)
 80073e4:	42a0      	cmp	r0, r4
 80073e6:	d00f      	beq.n	8007408 <TIM_OC1_SetConfig+0x54>
 80073e8:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80073ec:	42a0      	cmp	r0, r4
 80073ee:	d00b      	beq.n	8007408 <TIM_OC1_SetConfig+0x54>
 80073f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073f4:	42a0      	cmp	r0, r4
 80073f6:	d007      	beq.n	8007408 <TIM_OC1_SetConfig+0x54>
 80073f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073fc:	42a0      	cmp	r0, r4
 80073fe:	d003      	beq.n	8007408 <TIM_OC1_SetConfig+0x54>
 8007400:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007404:	42a0      	cmp	r0, r4
 8007406:	d10b      	bne.n	8007420 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007408:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800740a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800740e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007410:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007414:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007418:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800741a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800741e:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007420:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007422:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007424:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007426:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8007428:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800742a:	6203      	str	r3, [r0, #32]
}
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40012c00 	.word	0x40012c00
 8007434:	40013400 	.word	0x40013400

08007438 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007438:	6a03      	ldr	r3, [r0, #32]
 800743a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800743e:	6203      	str	r3, [r0, #32]
{
 8007440:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007446:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007448:	4f21      	ldr	r7, [pc, #132]	; (80074d0 <TIM_OC3_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800744a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800744c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800744e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8007452:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007456:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800745a:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8007460:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007464:	d016      	beq.n	8007494 <TIM_OC3_SetConfig+0x5c>
 8007466:	4c1b      	ldr	r4, [pc, #108]	; (80074d4 <TIM_OC3_SetConfig+0x9c>)
 8007468:	42a0      	cmp	r0, r4
 800746a:	d013      	beq.n	8007494 <TIM_OC3_SetConfig+0x5c>
 800746c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007470:	42a0      	cmp	r0, r4
 8007472:	d024      	beq.n	80074be <TIM_OC3_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007474:	4c18      	ldr	r4, [pc, #96]	; (80074d8 <TIM_OC3_SetConfig+0xa0>)
 8007476:	42a0      	cmp	r0, r4
 8007478:	d013      	beq.n	80074a2 <TIM_OC3_SetConfig+0x6a>
 800747a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800747e:	42a0      	cmp	r0, r4
 8007480:	d00f      	beq.n	80074a2 <TIM_OC3_SetConfig+0x6a>
 8007482:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007486:	42a0      	cmp	r0, r4
 8007488:	d00b      	beq.n	80074a2 <TIM_OC3_SetConfig+0x6a>
 800748a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800748e:	42a0      	cmp	r0, r4
 8007490:	d10e      	bne.n	80074b0 <TIM_OC3_SetConfig+0x78>
 8007492:	e006      	b.n	80074a2 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007494:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800749e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074a2:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074a6:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074aa:	432c      	orrs	r4, r5
 80074ac:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80074b2:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80074b4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80074b6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80074b8:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80074ba:	6203      	str	r3, [r0, #32]
}
 80074bc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074be:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80074c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074c4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80074c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074cc:	e7d2      	b.n	8007474 <TIM_OC3_SetConfig+0x3c>
 80074ce:	bf00      	nop
 80074d0:	40012c00 	.word	0x40012c00
 80074d4:	40013400 	.word	0x40013400
 80074d8:	40014000 	.word	0x40014000

080074dc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074dc:	6a03      	ldr	r3, [r0, #32]
 80074de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e2:	6203      	str	r3, [r0, #32]
{
 80074e4:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ea:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074ec:	4f21      	ldr	r7, [pc, #132]	; (8007574 <TIM_OC4_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074ee:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f0:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074f2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 80074f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074fe:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007500:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007504:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007508:	d016      	beq.n	8007538 <TIM_OC4_SetConfig+0x5c>
 800750a:	4c1b      	ldr	r4, [pc, #108]	; (8007578 <TIM_OC4_SetConfig+0x9c>)
 800750c:	42a0      	cmp	r0, r4
 800750e:	d013      	beq.n	8007538 <TIM_OC4_SetConfig+0x5c>
 8007510:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007514:	42a0      	cmp	r0, r4
 8007516:	d024      	beq.n	8007562 <TIM_OC4_SetConfig+0x86>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007518:	4c18      	ldr	r4, [pc, #96]	; (800757c <TIM_OC4_SetConfig+0xa0>)
 800751a:	42a0      	cmp	r0, r4
 800751c:	d013      	beq.n	8007546 <TIM_OC4_SetConfig+0x6a>
 800751e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007522:	42a0      	cmp	r0, r4
 8007524:	d00f      	beq.n	8007546 <TIM_OC4_SetConfig+0x6a>
 8007526:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800752a:	42a0      	cmp	r0, r4
 800752c:	d00b      	beq.n	8007546 <TIM_OC4_SetConfig+0x6a>
 800752e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007532:	42a0      	cmp	r0, r4
 8007534:	d10e      	bne.n	8007554 <TIM_OC4_SetConfig+0x78>
 8007536:	e006      	b.n	8007546 <TIM_OC4_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007538:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800753a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800753e:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007546:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800754a:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800754e:	432c      	orrs	r4, r5
 8007550:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007554:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007556:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007558:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800755a:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 800755c:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800755e:	6203      	str	r3, [r0, #32]
}
 8007560:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007562:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007568:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800756c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007570:	e7d2      	b.n	8007518 <TIM_OC4_SetConfig+0x3c>
 8007572:	bf00      	nop
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40013400 	.word	0x40013400
 800757c:	40014000 	.word	0x40014000

08007580 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007580:	2800      	cmp	r0, #0
 8007582:	f000 8089 	beq.w	8007698 <HAL_TIM_Base_Init+0x118>
{
 8007586:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007588:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800758c:	4604      	mov	r4, r0
 800758e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007592:	2b00      	cmp	r3, #0
 8007594:	d078      	beq.n	8007688 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007596:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007598:	4a43      	ldr	r2, [pc, #268]	; (80076a8 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 800759a:	2302      	movs	r3, #2
 800759c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a0:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80075a2:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a4:	d05c      	beq.n	8007660 <HAL_TIM_Base_Init+0xe0>
 80075a6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80075aa:	d02c      	beq.n	8007606 <HAL_TIM_Base_Init+0x86>
 80075ac:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80075b0:	4291      	cmp	r1, r2
 80075b2:	d028      	beq.n	8007606 <HAL_TIM_Base_Init+0x86>
 80075b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075b8:	4291      	cmp	r1, r2
 80075ba:	d024      	beq.n	8007606 <HAL_TIM_Base_Init+0x86>
 80075bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075c0:	4291      	cmp	r1, r2
 80075c2:	d020      	beq.n	8007606 <HAL_TIM_Base_Init+0x86>
 80075c4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80075c8:	4291      	cmp	r1, r2
 80075ca:	d049      	beq.n	8007660 <HAL_TIM_Base_Init+0xe0>
 80075cc:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80075d0:	4291      	cmp	r1, r2
 80075d2:	d063      	beq.n	800769c <HAL_TIM_Base_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075d4:	4a35      	ldr	r2, [pc, #212]	; (80076ac <HAL_TIM_Base_Init+0x12c>)
 80075d6:	4291      	cmp	r1, r2
 80075d8:	d05b      	beq.n	8007692 <HAL_TIM_Base_Init+0x112>
 80075da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075de:	4291      	cmp	r1, r2
 80075e0:	d057      	beq.n	8007692 <HAL_TIM_Base_Init+0x112>
 80075e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075e6:	4291      	cmp	r1, r2
 80075e8:	d053      	beq.n	8007692 <HAL_TIM_Base_Init+0x112>
 80075ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ee:	4291      	cmp	r1, r2
 80075f0:	d04f      	beq.n	8007692 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f2:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f4:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80075f6:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075fc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80075fe:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007600:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007602:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007604:	e010      	b.n	8007628 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007606:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007608:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800760a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007610:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8007612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007616:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007618:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800761a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800761e:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007620:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007622:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007624:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007626:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007628:	2301      	movs	r3, #1
 800762a:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007630:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007634:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007638:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800763c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007648:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800764c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007650:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007654:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800765c:	2000      	movs	r0, #0
}
 800765e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007660:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007662:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007664:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800766a:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800766c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007670:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007676:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007678:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800767e:	6863      	ldr	r3, [r4, #4]
 8007680:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007682:	6963      	ldr	r3, [r4, #20]
 8007684:	630b      	str	r3, [r1, #48]	; 0x30
 8007686:	e7cf      	b.n	8007628 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007688:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800768c:	f7fc ffae 	bl	80045ec <HAL_TIM_Base_MspInit>
 8007690:	e781      	b.n	8007596 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007692:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007694:	69a2      	ldr	r2, [r4, #24]
 8007696:	e7e9      	b.n	800766c <HAL_TIM_Base_Init+0xec>
    return HAL_ERROR;
 8007698:	2001      	movs	r0, #1
}
 800769a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800769c:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800769e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80076a2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a4:	e796      	b.n	80075d4 <HAL_TIM_Base_Init+0x54>
 80076a6:	bf00      	nop
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40014000 	.word	0x40014000

080076b0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80076b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d132      	bne.n	800771e <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ba:	491b      	ldr	r1, [pc, #108]	; (8007728 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	2202      	movs	r2, #2
 80076be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076cc:	d019      	beq.n	8007702 <HAL_TIM_Base_Start_IT+0x52>
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d2:	d016      	beq.n	8007702 <HAL_TIM_Base_Start_IT+0x52>
 80076d4:	4a15      	ldr	r2, [pc, #84]	; (800772c <HAL_TIM_Base_Start_IT+0x7c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_TIM_Base_Start_IT+0x52>
 80076da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <HAL_TIM_Base_Start_IT+0x52>
 80076e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <HAL_TIM_Base_Start_IT+0x52>
 80076ea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <HAL_TIM_Base_Start_IT+0x52>
 80076f2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <HAL_TIM_Base_Start_IT+0x52>
 80076fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076fe:	4293      	cmp	r3, r2
 8007700:	d107      	bne.n	8007712 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007702:	6899      	ldr	r1, [r3, #8]
 8007704:	4a0a      	ldr	r2, [pc, #40]	; (8007730 <HAL_TIM_Base_Start_IT+0x80>)
 8007706:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007708:	2a06      	cmp	r2, #6
 800770a:	d00a      	beq.n	8007722 <HAL_TIM_Base_Start_IT+0x72>
 800770c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007710:	d007      	beq.n	8007722 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	f042 0201 	orr.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800771a:	2000      	movs	r0, #0
 800771c:	4770      	bx	lr
    return HAL_ERROR;
 800771e:	2001      	movs	r0, #1
 8007720:	4770      	bx	lr
  return HAL_OK;
 8007722:	2000      	movs	r0, #0
}
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40000400 	.word	0x40000400
 8007730:	00010007 	.word	0x00010007

08007734 <HAL_TIM_PWM_MspInit>:
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop

08007738 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007738:	2800      	cmp	r0, #0
 800773a:	f000 8089 	beq.w	8007850 <HAL_TIM_PWM_Init+0x118>
{
 800773e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007740:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007744:	4604      	mov	r4, r0
 8007746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800774a:	2b00      	cmp	r3, #0
 800774c:	d078      	beq.n	8007840 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800774e:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007750:	4a43      	ldr	r2, [pc, #268]	; (8007860 <HAL_TIM_PWM_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007752:	2302      	movs	r3, #2
 8007754:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007758:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 800775a:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800775c:	d05c      	beq.n	8007818 <HAL_TIM_PWM_Init+0xe0>
 800775e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007762:	d02c      	beq.n	80077be <HAL_TIM_PWM_Init+0x86>
 8007764:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007768:	4291      	cmp	r1, r2
 800776a:	d028      	beq.n	80077be <HAL_TIM_PWM_Init+0x86>
 800776c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007770:	4291      	cmp	r1, r2
 8007772:	d024      	beq.n	80077be <HAL_TIM_PWM_Init+0x86>
 8007774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007778:	4291      	cmp	r1, r2
 800777a:	d020      	beq.n	80077be <HAL_TIM_PWM_Init+0x86>
 800777c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007780:	4291      	cmp	r1, r2
 8007782:	d049      	beq.n	8007818 <HAL_TIM_PWM_Init+0xe0>
 8007784:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8007788:	4291      	cmp	r1, r2
 800778a:	d063      	beq.n	8007854 <HAL_TIM_PWM_Init+0x11c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800778c:	4a35      	ldr	r2, [pc, #212]	; (8007864 <HAL_TIM_PWM_Init+0x12c>)
 800778e:	4291      	cmp	r1, r2
 8007790:	d05b      	beq.n	800784a <HAL_TIM_PWM_Init+0x112>
 8007792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007796:	4291      	cmp	r1, r2
 8007798:	d057      	beq.n	800784a <HAL_TIM_PWM_Init+0x112>
 800779a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800779e:	4291      	cmp	r1, r2
 80077a0:	d053      	beq.n	800784a <HAL_TIM_PWM_Init+0x112>
 80077a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a6:	4291      	cmp	r1, r2
 80077a8:	d04f      	beq.n	800784a <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077aa:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077ac:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80077ae:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80077b6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b8:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80077ba:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077bc:	e010      	b.n	80077e0 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 80077be:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c0:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c2:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80077c8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077ce:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077d0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d6:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80077d8:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80077da:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077dc:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80077de:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80077e0:	2301      	movs	r3, #1
 80077e2:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80077ec:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80077f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80077f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80077f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007808:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800780c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007814:	2000      	movs	r0, #0
}
 8007816:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007818:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800781c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007822:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007828:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800782a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800782e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007830:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007836:	6863      	ldr	r3, [r4, #4]
 8007838:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800783a:	6963      	ldr	r3, [r4, #20]
 800783c:	630b      	str	r3, [r1, #48]	; 0x30
 800783e:	e7cf      	b.n	80077e0 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007840:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007844:	f7ff ff76 	bl	8007734 <HAL_TIM_PWM_MspInit>
 8007848:	e781      	b.n	800774e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800784a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800784c:	69a2      	ldr	r2, [r4, #24]
 800784e:	e7e9      	b.n	8007824 <HAL_TIM_PWM_Init+0xec>
    return HAL_ERROR;
 8007850:	2001      	movs	r0, #1
}
 8007852:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007854:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800785a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800785c:	e796      	b.n	800778c <HAL_TIM_PWM_Init+0x54>
 800785e:	bf00      	nop
 8007860:	40012c00 	.word	0x40012c00
 8007864:	40014000 	.word	0x40014000

08007868 <HAL_TIM_PWM_Start>:
 8007868:	2900      	cmp	r1, #0
 800786a:	d158      	bne.n	800791e <HAL_TIM_PWM_Start+0xb6>
 800786c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007870:	2b01      	cmp	r3, #1
 8007872:	d15e      	bne.n	8007932 <HAL_TIM_PWM_Start+0xca>
 8007874:	2302      	movs	r3, #2
 8007876:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800787a:	6803      	ldr	r3, [r0, #0]
 800787c:	2201      	movs	r2, #1
 800787e:	6a18      	ldr	r0, [r3, #32]
 8007880:	f001 011f 	and.w	r1, r1, #31
 8007884:	fa02 f101 	lsl.w	r1, r2, r1
 8007888:	ea20 0001 	bic.w	r0, r0, r1
 800788c:	b410      	push	{r4}
 800788e:	6218      	str	r0, [r3, #32]
 8007890:	6a1a      	ldr	r2, [r3, #32]
 8007892:	4c40      	ldr	r4, [pc, #256]	; (8007994 <HAL_TIM_PWM_Start+0x12c>)
 8007894:	4311      	orrs	r1, r2
 8007896:	42a3      	cmp	r3, r4
 8007898:	6219      	str	r1, [r3, #32]
 800789a:	d05a      	beq.n	8007952 <HAL_TIM_PWM_Start+0xea>
 800789c:	4a3e      	ldr	r2, [pc, #248]	; (8007998 <HAL_TIM_PWM_Start+0x130>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00f      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x5a>
 80078a2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00b      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x5a>
 80078aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d007      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x5a>
 80078b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d003      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x5a>
 80078ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078be:	4293      	cmp	r3, r2
 80078c0:	d103      	bne.n	80078ca <HAL_TIM_PWM_Start+0x62>
 80078c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078c8:	645a      	str	r2, [r3, #68]	; 0x44
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d016      	beq.n	80078fe <HAL_TIM_PWM_Start+0x96>
 80078d0:	4a32      	ldr	r2, [pc, #200]	; (800799c <HAL_TIM_PWM_Start+0x134>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <HAL_TIM_PWM_Start+0x96>
 80078d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00f      	beq.n	80078fe <HAL_TIM_PWM_Start+0x96>
 80078de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00b      	beq.n	80078fe <HAL_TIM_PWM_Start+0x96>
 80078e6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d007      	beq.n	80078fe <HAL_TIM_PWM_Start+0x96>
 80078ee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_PWM_Start+0x96>
 80078f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d107      	bne.n	800790e <HAL_TIM_PWM_Start+0xa6>
 80078fe:	6899      	ldr	r1, [r3, #8]
 8007900:	4a27      	ldr	r2, [pc, #156]	; (80079a0 <HAL_TIM_PWM_Start+0x138>)
 8007902:	400a      	ands	r2, r1
 8007904:	2a06      	cmp	r2, #6
 8007906:	d016      	beq.n	8007936 <HAL_TIM_PWM_Start+0xce>
 8007908:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800790c:	d013      	beq.n	8007936 <HAL_TIM_PWM_Start+0xce>
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007914:	f042 0201 	orr.w	r2, r2, #1
 8007918:	2000      	movs	r0, #0
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	4770      	bx	lr
 800791e:	2904      	cmp	r1, #4
 8007920:	d01c      	beq.n	800795c <HAL_TIM_PWM_Start+0xf4>
 8007922:	2908      	cmp	r1, #8
 8007924:	d022      	beq.n	800796c <HAL_TIM_PWM_Start+0x104>
 8007926:	290c      	cmp	r1, #12
 8007928:	d109      	bne.n	800793e <HAL_TIM_PWM_Start+0xd6>
 800792a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800792e:	2b01      	cmp	r3, #1
 8007930:	d024      	beq.n	800797c <HAL_TIM_PWM_Start+0x114>
 8007932:	2001      	movs	r0, #1
 8007934:	4770      	bx	lr
 8007936:	2000      	movs	r0, #0
 8007938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	2910      	cmp	r1, #16
 8007940:	d020      	beq.n	8007984 <HAL_TIM_PWM_Start+0x11c>
 8007942:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007946:	2b01      	cmp	r3, #1
 8007948:	d1f3      	bne.n	8007932 <HAL_TIM_PWM_Start+0xca>
 800794a:	2302      	movs	r3, #2
 800794c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007950:	e793      	b.n	800787a <HAL_TIM_PWM_Start+0x12>
 8007952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007958:	645a      	str	r2, [r3, #68]	; 0x44
 800795a:	e7d0      	b.n	80078fe <HAL_TIM_PWM_Start+0x96>
 800795c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007960:	2b01      	cmp	r3, #1
 8007962:	d1e6      	bne.n	8007932 <HAL_TIM_PWM_Start+0xca>
 8007964:	2302      	movs	r3, #2
 8007966:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800796a:	e786      	b.n	800787a <HAL_TIM_PWM_Start+0x12>
 800796c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007970:	2b01      	cmp	r3, #1
 8007972:	d1de      	bne.n	8007932 <HAL_TIM_PWM_Start+0xca>
 8007974:	2302      	movs	r3, #2
 8007976:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800797a:	e77e      	b.n	800787a <HAL_TIM_PWM_Start+0x12>
 800797c:	2302      	movs	r3, #2
 800797e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007982:	e77a      	b.n	800787a <HAL_TIM_PWM_Start+0x12>
 8007984:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007988:	2b01      	cmp	r3, #1
 800798a:	d1d2      	bne.n	8007932 <HAL_TIM_PWM_Start+0xca>
 800798c:	2302      	movs	r3, #2
 800798e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007992:	e772      	b.n	800787a <HAL_TIM_PWM_Start+0x12>
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40013400 	.word	0x40013400
 800799c:	40000400 	.word	0x40000400
 80079a0:	00010007 	.word	0x00010007

080079a4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80079a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	f000 808c 	beq.w	8007ac6 <HAL_TIM_ConfigClockSource+0x122>
{
 80079ae:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 80079b0:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80079b2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80079b6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80079ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80079be:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80079c0:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c2:	4c5c      	ldr	r4, [pc, #368]	; (8007b34 <HAL_TIM_ConfigClockSource+0x190>)
  switch (sClockSourceConfig->ClockSource)
 80079c4:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c6:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80079ca:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80079cc:	d07d      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x126>
 80079ce:	d921      	bls.n	8007a14 <HAL_TIM_ConfigClockSource+0x70>
 80079d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d4:	d067      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0x102>
 80079d6:	d94a      	bls.n	8007a6e <HAL_TIM_ConfigClockSource+0xca>
 80079d8:	4957      	ldr	r1, [pc, #348]	; (8007b38 <HAL_TIM_ConfigClockSource+0x194>)
 80079da:	428b      	cmp	r3, r1
 80079dc:	d008      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
 80079de:	d93e      	bls.n	8007a5e <HAL_TIM_ConfigClockSource+0xba>
 80079e0:	4956      	ldr	r1, [pc, #344]	; (8007b3c <HAL_TIM_ConfigClockSource+0x198>)
 80079e2:	428b      	cmp	r3, r1
 80079e4:	d004      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
 80079e6:	3910      	subs	r1, #16
 80079e8:	f023 0420 	bic.w	r4, r3, #32
 80079ec:	428c      	cmp	r4, r1
 80079ee:	d108      	bne.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079f0:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80079f6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079fa:	430b      	orrs	r3, r1
 80079fc:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a00:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8007a02:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	2201      	movs	r2, #1
 8007a06:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007a0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007a0e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007a10:	4618      	mov	r0, r3
}
 8007a12:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007a14:	2b40      	cmp	r3, #64	; 0x40
 8007a16:	d073      	beq.n	8007b00 <HAL_TIM_ConfigClockSource+0x15c>
 8007a18:	d91b      	bls.n	8007a52 <HAL_TIM_ConfigClockSource+0xae>
 8007a1a:	2b50      	cmp	r3, #80	; 0x50
 8007a1c:	d1f1      	bne.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8007a1e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a20:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a22:	684c      	ldr	r4, [r1, #4]
 8007a24:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a26:	f026 0601 	bic.w	r6, r6, #1
 8007a2a:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2c:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a2e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a36:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007a3a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007a3c:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007a3e:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007a40:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a4a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007a4e:	6093      	str	r3, [r2, #8]
}
 8007a50:	e7d7      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d0cc      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
 8007a56:	d91c      	bls.n	8007a92 <HAL_TIM_ConfigClockSource+0xee>
 8007a58:	2b30      	cmp	r3, #48	; 0x30
 8007a5a:	d1d2      	bne.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
 8007a5c:	e7c8      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
 8007a5e:	3920      	subs	r1, #32
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d0c5      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
 8007a64:	d919      	bls.n	8007a9a <HAL_TIM_ConfigClockSource+0xf6>
 8007a66:	4936      	ldr	r1, [pc, #216]	; (8007b40 <HAL_TIM_ConfigClockSource+0x19c>)
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	d0c1      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
 8007a6c:	e7c9      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
 8007a6e:	2b70      	cmp	r3, #112	; 0x70
 8007a70:	d1c7      	bne.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a72:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007a76:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007a78:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a7a:	432b      	orrs	r3, r5
 8007a7c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a80:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a84:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a86:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007a88:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007a8e:	6093      	str	r3, [r2, #8]
      break;
 8007a90:	e7b7      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8007a92:	f033 0110 	bics.w	r1, r3, #16
 8007a96:	d1b4      	bne.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
 8007a98:	e7aa      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
 8007a9a:	f023 0110 	bic.w	r1, r3, #16
 8007a9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007aa2:	d1ae      	bne.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
 8007aa4:	e7a4      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x4c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aa6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007aaa:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007aac:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aae:	432b      	orrs	r3, r5
 8007ab0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ab4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ab8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007aba:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007abc:	6893      	ldr	r3, [r2, #8]
 8007abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ac2:	6093      	str	r3, [r2, #8]
      break;
 8007ac4:	e79d      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 8007ac6:	2002      	movs	r0, #2
}
 8007ac8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aca:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007acc:	684d      	ldr	r5, [r1, #4]
 8007ace:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad0:	f024 0410 	bic.w	r4, r4, #16
 8007ad4:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad6:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8007ad8:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ada:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ae2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ae6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007aea:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8007aec:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007aee:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007af0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007af8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007afc:	6093      	str	r3, [r2, #8]
}
 8007afe:	e780      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8007b00:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b02:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b04:	684c      	ldr	r4, [r1, #4]
 8007b06:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b08:	f026 0601 	bic.w	r6, r6, #1
 8007b0c:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0e:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b10:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b18:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007b1c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007b1e:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007b20:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007b22:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b2c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007b30:	6093      	str	r3, [r2, #8]
}
 8007b32:	e766      	b.n	8007a02 <HAL_TIM_ConfigClockSource+0x5e>
 8007b34:	ffce0088 	.word	0xffce0088
 8007b38:	00100040 	.word	0x00100040
 8007b3c:	00100060 	.word	0x00100060
 8007b40:	00100030 	.word	0x00100030

08007b44 <HAL_TIM_PeriodElapsedCallback>:
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop

08007b48 <HAL_TIM_OC_DelayElapsedCallback>:
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop

08007b4c <HAL_TIM_IC_CaptureCallback>:
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop

08007b50 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop

08007b54 <HAL_TIM_TriggerCallback>:
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop

08007b58 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b58:	6803      	ldr	r3, [r0, #0]
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	0791      	lsls	r1, r2, #30
{
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b62:	d503      	bpl.n	8007b6c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	0792      	lsls	r2, r2, #30
 8007b68:	f100 808a 	bmi.w	8007c80 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b6c:	691a      	ldr	r2, [r3, #16]
 8007b6e:	0752      	lsls	r2, r2, #29
 8007b70:	d502      	bpl.n	8007b78 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	0750      	lsls	r0, r2, #29
 8007b76:	d470      	bmi.n	8007c5a <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	0711      	lsls	r1, r2, #28
 8007b7c:	d502      	bpl.n	8007b84 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	0712      	lsls	r2, r2, #28
 8007b82:	d458      	bmi.n	8007c36 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	06d1      	lsls	r1, r2, #27
 8007b88:	d502      	bpl.n	8007b90 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	06d2      	lsls	r2, r2, #27
 8007b8e:	d43e      	bmi.n	8007c0e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	07d0      	lsls	r0, r2, #31
 8007b94:	d503      	bpl.n	8007b9e <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	07d1      	lsls	r1, r2, #31
 8007b9a:	f100 808a 	bmi.w	8007cb2 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	0612      	lsls	r2, r2, #24
 8007ba2:	d503      	bpl.n	8007bac <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	0610      	lsls	r0, r2, #24
 8007ba8:	f100 808b 	bmi.w	8007cc2 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bac:	691a      	ldr	r2, [r3, #16]
 8007bae:	05d1      	lsls	r1, r2, #23
 8007bb0:	d503      	bpl.n	8007bba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	0612      	lsls	r2, r2, #24
 8007bb6:	f100 808c 	bmi.w	8007cd2 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	0650      	lsls	r0, r2, #25
 8007bbe:	d503      	bpl.n	8007bc8 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	0651      	lsls	r1, r2, #25
 8007bc4:	f100 808d 	bmi.w	8007ce2 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bc8:	691a      	ldr	r2, [r3, #16]
 8007bca:	0692      	lsls	r2, r2, #26
 8007bcc:	d503      	bpl.n	8007bd6 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	0690      	lsls	r0, r2, #26
 8007bd2:	f100 808e 	bmi.w	8007cf2 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	02d1      	lsls	r1, r2, #11
 8007bda:	d503      	bpl.n	8007be4 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	02d2      	lsls	r2, r2, #11
 8007be0:	f100 808f 	bmi.w	8007d02 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	0290      	lsls	r0, r2, #10
 8007be8:	d503      	bpl.n	8007bf2 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	0291      	lsls	r1, r2, #10
 8007bee:	f100 8090 	bmi.w	8007d12 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	0252      	lsls	r2, r2, #9
 8007bf6:	d503      	bpl.n	8007c00 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	0250      	lsls	r0, r2, #9
 8007bfc:	f100 8091 	bmi.w	8007d22 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	0211      	lsls	r1, r2, #8
 8007c04:	d502      	bpl.n	8007c0c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	0212      	lsls	r2, r2, #8
 8007c0a:	d44a      	bmi.n	8007ca2 <HAL_TIM_IRQHandler+0x14a>
}
 8007c0c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c0e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c12:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c14:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c16:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c20:	f040 8090 	bne.w	8007d44 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c24:	f7ff ff90 	bl	8007b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f7ff ff91 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	2200      	movs	r2, #0
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	7722      	strb	r2, [r4, #28]
 8007c34:	e7ac      	b.n	8007b90 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c36:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c3a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c3c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c3e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007c44:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c46:	d17a      	bne.n	8007d3e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c48:	f7ff ff7e 	bl	8007b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff ff7f 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c52:	2200      	movs	r2, #0
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	7722      	strb	r2, [r4, #28]
 8007c58:	e794      	b.n	8007b84 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c5a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c5e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c60:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c62:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c6c:	d164      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	f7ff ff6b 	bl	8007b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c72:	4620      	mov	r0, r4
 8007c74:	f7ff ff6c 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c78:	2200      	movs	r2, #0
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	7722      	strb	r2, [r4, #28]
 8007c7e:	e77b      	b.n	8007b78 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c80:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c84:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c86:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c88:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	0799      	lsls	r1, r3, #30
 8007c8e:	d150      	bne.n	8007d32 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c90:	f7ff ff5a 	bl	8007b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7ff ff5b 	bl	8007b50 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	7722      	strb	r2, [r4, #28]
 8007ca0:	e764      	b.n	8007b6c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007ca2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007ca6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007ca8:	611a      	str	r2, [r3, #16]
}
 8007caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007cae:	f000 ba61 	b.w	8008174 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cb2:	f06f 0201 	mvn.w	r2, #1
 8007cb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7ff ff43 	bl	8007b44 <HAL_TIM_PeriodElapsedCallback>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	e76d      	b.n	8007b9e <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fa49 	bl	8008160 <HAL_TIMEx_BreakCallback>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	e76c      	b.n	8007bac <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fa43 	bl	8008164 <HAL_TIMEx_Break2Callback>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	e76b      	b.n	8007bba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ce6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f7ff ff33 	bl	8007b54 <HAL_TIM_TriggerCallback>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	e76a      	b.n	8007bc8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cf2:	f06f 0220 	mvn.w	r2, #32
 8007cf6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fa2f 	bl	800815c <HAL_TIMEx_CommutCallback>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	e769      	b.n	8007bd6 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007d02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007d06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 fa2d 	bl	8008168 <HAL_TIMEx_EncoderIndexCallback>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	e768      	b.n	8007be4 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007d12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007d16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fa27 	bl	800816c <HAL_TIMEx_DirectionChangeCallback>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	e767      	b.n	8007bf2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007d22:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007d26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fa21 	bl	8008170 <HAL_TIMEx_IndexErrorCallback>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	e766      	b.n	8007c00 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8007d32:	f7ff ff0b 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 8007d36:	e7b0      	b.n	8007c9a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d38:	f7ff ff08 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 8007d3c:	e79c      	b.n	8007c78 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3e:	f7ff ff05 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 8007d42:	e786      	b.n	8007c52 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d44:	f7ff ff02 	bl	8007b4c <HAL_TIM_IC_CaptureCallback>
 8007d48:	e771      	b.n	8007c2e <HAL_TIM_IRQHandler+0xd6>
 8007d4a:	bf00      	nop

08007d4c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d4c:	6a03      	ldr	r3, [r0, #32]
 8007d4e:	f023 0310 	bic.w	r3, r3, #16
 8007d52:	6203      	str	r3, [r0, #32]
{
 8007d54:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8007d56:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007d58:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007d5a:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d5c:	4f21      	ldr	r7, [pc, #132]	; (8007de4 <TIM_OC2_SetConfig+0x98>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d5e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d60:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d62:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8007d66:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d6a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d6e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d74:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d78:	d016      	beq.n	8007da8 <TIM_OC2_SetConfig+0x5c>
 8007d7a:	4c1b      	ldr	r4, [pc, #108]	; (8007de8 <TIM_OC2_SetConfig+0x9c>)
 8007d7c:	42a0      	cmp	r0, r4
 8007d7e:	d013      	beq.n	8007da8 <TIM_OC2_SetConfig+0x5c>
 8007d80:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8007d84:	42a0      	cmp	r0, r4
 8007d86:	d024      	beq.n	8007dd2 <TIM_OC2_SetConfig+0x86>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d88:	4c18      	ldr	r4, [pc, #96]	; (8007dec <TIM_OC2_SetConfig+0xa0>)
 8007d8a:	42a0      	cmp	r0, r4
 8007d8c:	d013      	beq.n	8007db6 <TIM_OC2_SetConfig+0x6a>
 8007d8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d92:	42a0      	cmp	r0, r4
 8007d94:	d00f      	beq.n	8007db6 <TIM_OC2_SetConfig+0x6a>
 8007d96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007d9a:	42a0      	cmp	r0, r4
 8007d9c:	d00b      	beq.n	8007db6 <TIM_OC2_SetConfig+0x6a>
 8007d9e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007da2:	42a0      	cmp	r0, r4
 8007da4:	d10e      	bne.n	8007dc4 <TIM_OC2_SetConfig+0x78>
 8007da6:	e006      	b.n	8007db6 <TIM_OC2_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007da8:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dae:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007db6:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dba:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dbe:	432c      	orrs	r4, r5
 8007dc0:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007dc4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007dc6:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007dc8:	6182      	str	r2, [r0, #24]
}
 8007dca:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8007dcc:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007dce:	6203      	str	r3, [r0, #32]
}
 8007dd0:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dd2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dd8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de0:	e7d2      	b.n	8007d88 <TIM_OC2_SetConfig+0x3c>
 8007de2:	bf00      	nop
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40013400 	.word	0x40013400
 8007dec:	40014000 	.word	0x40014000

08007df0 <HAL_TIM_PWM_ConfigChannel>:
{
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007df2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	f000 80e8 	beq.w	8007fcc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	4604      	mov	r4, r0
 8007e00:	460d      	mov	r5, r1
 8007e02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007e06:	2a14      	cmp	r2, #20
 8007e08:	d844      	bhi.n	8007e94 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8007e0a:	e8df f002 	tbb	[pc, r2]
 8007e0e:	4347      	.short	0x4347
 8007e10:	435b4343 	.word	0x435b4343
 8007e14:	43704343 	.word	0x43704343
 8007e18:	43844343 	.word	0x43844343
 8007e1c:	43994343 	.word	0x43994343
 8007e20:	4343      	.short	0x4343
 8007e22:	0b          	.byte	0x0b
 8007e23:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e24:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e26:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e2a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e2c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2e:	4e70      	ldr	r6, [pc, #448]	; (8007ff0 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e30:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8007e34:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8007e36:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007e38:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e3c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e40:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e44:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e48:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e4a:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e4e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e52:	d008      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007e54:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007e58:	42b3      	cmp	r3, r6
 8007e5a:	d004      	beq.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007e5c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007e60:	42b3      	cmp	r3, r6
 8007e62:	f040 80b5 	bne.w	8007fd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e66:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e68:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e6c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8007e70:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007e72:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007e74:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007e76:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8007e78:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e7c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e7e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007e82:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007e86:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007e8a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007e92:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007e94:	2000      	movs	r0, #0
 8007e96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e9c:	6800      	ldr	r0, [r0, #0]
 8007e9e:	f7ff fa89 	bl	80073b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ea2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ea6:	6999      	ldr	r1, [r3, #24]
 8007ea8:	f041 0108 	orr.w	r1, r1, #8
 8007eac:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007eae:	6999      	ldr	r1, [r3, #24]
 8007eb0:	f021 0104 	bic.w	r1, r1, #4
 8007eb4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eb6:	699a      	ldr	r2, [r3, #24]
 8007eb8:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007eba:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ebc:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007ebe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007ec2:	e7ea      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ec4:	6800      	ldr	r0, [r0, #0]
 8007ec6:	f7ff ff41 	bl	8007d4c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ecc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ece:	6999      	ldr	r1, [r3, #24]
 8007ed0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007ed4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed6:	6999      	ldr	r1, [r3, #24]
 8007ed8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007edc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8007ee4:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007ee8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007eec:	e7d5      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eee:	6800      	ldr	r0, [r0, #0]
 8007ef0:	f7ff faa2 	bl	8007438 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ef4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ef6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ef8:	69d9      	ldr	r1, [r3, #28]
 8007efa:	f041 0108 	orr.w	r1, r1, #8
 8007efe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f00:	69d9      	ldr	r1, [r3, #28]
 8007f02:	f021 0104 	bic.w	r1, r1, #4
 8007f06:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f08:	69da      	ldr	r2, [r3, #28]
 8007f0a:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007f0c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f0e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007f10:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007f14:	e7c1      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	f7ff fae0 	bl	80074dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f1c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f1e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f20:	69d9      	ldr	r1, [r3, #28]
 8007f22:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007f26:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f28:	69d9      	ldr	r1, [r3, #28]
 8007f2a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007f2e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f30:	69da      	ldr	r2, [r3, #28]
 8007f32:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8007f36:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f38:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007f3a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007f3e:	e7ac      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f40:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f42:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f46:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8007f48:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4a:	4e29      	ldr	r6, [pc, #164]	; (8007ff0 <HAL_TIM_PWM_ConfigChannel+0x200>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f4c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007f50:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8007f52:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007f54:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8007f5c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f64:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f66:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8007f6a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6e:	d013      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007f70:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007f74:	42b3      	cmp	r3, r6
 8007f76:	d00f      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007f78:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007f7c:	42b3      	cmp	r3, r6
 8007f7e:	d00b      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007f80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007f84:	42b3      	cmp	r3, r6
 8007f86:	d007      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007f88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007f8c:	42b3      	cmp	r3, r6
 8007f8e:	d003      	beq.n	8007f98 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8007f90:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007f94:	42b3      	cmp	r3, r6
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_PWM_ConfigChannel+0x1b2>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f98:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f9a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f9e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8007fa2:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007fa4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007fa6:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8007fa8:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8007faa:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fac:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fb0:	f041 0108 	orr.w	r1, r1, #8
 8007fb4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fb6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007fb8:	f021 0104 	bic.w	r1, r1, #4
 8007fbc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fc0:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007fc2:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007fc6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007fca:	e766      	b.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8007fcc:	2002      	movs	r0, #2
}
 8007fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007fd4:	42b3      	cmp	r3, r6
 8007fd6:	f43f af46 	beq.w	8007e66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007fda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007fde:	42b3      	cmp	r3, r6
 8007fe0:	f43f af41 	beq.w	8007e66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007fe4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	f47f af41 	bne.w	8007e70 <HAL_TIM_PWM_ConfigChannel+0x80>
 8007fee:	e73a      	b.n	8007e66 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007ff0:	40012c00 	.word	0x40012c00

08007ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ff4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d058      	beq.n	80080ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
{
 8007ffc:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ffe:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008000:	4c2c      	ldr	r4, [pc, #176]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008002:	2302      	movs	r3, #2
 8008004:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008008:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 800800a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800800c:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800800e:	d042      	beq.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008010:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008014:	42a2      	cmp	r2, r4
 8008016:	d032      	beq.n	800807e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008018:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800801c:	42a2      	cmp	r2, r4
 800801e:	d02e      	beq.n	800807e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008020:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008022:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800802a:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800802c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008032:	d016      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008034:	4b20      	ldr	r3, [pc, #128]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008036:	429a      	cmp	r2, r3
 8008038:	d013      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800803a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803e:	429a      	cmp	r2, r3
 8008040:	d00f      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008046:	429a      	cmp	r2, r3
 8008048:	d00b      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800804a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800804e:	429a      	cmp	r2, r3
 8008050:	d007      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008052:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008056:	429a      	cmp	r2, r3
 8008058:	d003      	beq.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800805a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805e:	429a      	cmp	r2, r3
 8008060:	d104      	bne.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008062:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008064:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008068:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800806a:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800806c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800806e:	2201      	movs	r2, #1
 8008070:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008074:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008078:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800807a:	4618      	mov	r0, r3
}
 800807c:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800807e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008086:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008088:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800808c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008090:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8008092:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008094:	e7cb      	b.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008096:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800809a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800809e:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80080a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080a8:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80080aa:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ac:	e7d9      	b.n	8008062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 80080ae:	2002      	movs	r0, #2
}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40012c00 	.word	0x40012c00
 80080b8:	40000400 	.word	0x40000400

080080bc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d047      	beq.n	8008154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
{
 80080c4:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080c6:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80080ca:	4602      	mov	r2, r0
 80080cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080d0:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080d4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080da:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080e0:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080e4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ea:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080f0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80080f2:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080f4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080fa:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080fc:	4c16      	ldr	r4, [pc, #88]	; (8008158 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80080fe:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008100:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008104:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008106:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800810a:	d007      	beq.n	800811c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 800810c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008110:	42a0      	cmp	r0, r4
 8008112:	d003      	beq.n	800811c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008114:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008118:	42a0      	cmp	r0, r4
 800811a:	d114      	bne.n	8008146 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800811c:	69cd      	ldr	r5, [r1, #28]
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800811e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008124:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008126:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800812a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800812e:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008136:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008138:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800813c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800813e:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008140:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008144:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8008146:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008148:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800814a:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800814e:	4608      	mov	r0, r1
}
 8008150:	bc30      	pop	{r4, r5}
 8008152:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008154:	2002      	movs	r0, #2
}
 8008156:	4770      	bx	lr
 8008158:	40012c00 	.word	0x40012c00

0800815c <HAL_TIMEx_CommutCallback>:
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <HAL_TIMEx_BreakCallback>:
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop

08008164 <HAL_TIMEx_Break2Callback>:
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop

08008168 <HAL_TIMEx_EncoderIndexCallback>:
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop

0800816c <HAL_TIMEx_DirectionChangeCallback>:
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop

08008170 <HAL_TIMEx_IndexErrorCallback>:
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop

08008174 <HAL_TIMEx_TransitionErrorCallback>:
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop

08008178 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008178:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800817c:	2b20      	cmp	r3, #32
 800817e:	d149      	bne.n	8008214 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008180:	2900      	cmp	r1, #0
 8008182:	d045      	beq.n	8008210 <HAL_UART_Receive_IT+0x98>
 8008184:	2a00      	cmp	r2, #0
 8008186:	d043      	beq.n	8008210 <HAL_UART_Receive_IT+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008188:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800818c:	2b01      	cmp	r3, #1
 800818e:	d041      	beq.n	8008214 <HAL_UART_Receive_IT+0x9c>
{
 8008190:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008192:	4b49      	ldr	r3, [pc, #292]	; (80082b8 <HAL_UART_Receive_IT+0x140>)
 8008194:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8008196:	2501      	movs	r5, #1
 8008198:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800819c:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819e:	f04f 0500 	mov.w	r5, #0
 80081a2:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081a4:	d006      	beq.n	80081b4 <HAL_UART_Receive_IT+0x3c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081a6:	6863      	ldr	r3, [r4, #4]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	d503      	bpl.n	80081b4 <HAL_UART_Receive_IT+0x3c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081b2:	6023      	str	r3, [r4, #0]
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081b4:	6883      	ldr	r3, [r0, #8]
  huart->pRxBuffPtr  = pData;
 80081b6:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 80081b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 80081bc:	f04f 0100 	mov.w	r1, #0
  huart->RxXferSize  = Size;
 80081c0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80081c4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80081c8:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80081ca:	d025      	beq.n	8008218 <HAL_UART_Receive_IT+0xa0>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d138      	bne.n	8008242 <HAL_UART_Receive_IT+0xca>
 80081d0:	6903      	ldr	r3, [r0, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d05e      	beq.n	8008294 <HAL_UART_Receive_IT+0x11c>
 80081d6:	237f      	movs	r3, #127	; 0x7f
 80081d8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081de:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e0:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e8:	68a3      	ldr	r3, [r4, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081ea:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ec:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081f0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f4:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081f6:	d03a      	beq.n	800826e <HAL_UART_Receive_IT+0xf6>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80081f8:	4b30      	ldr	r3, [pc, #192]	; (80082bc <HAL_UART_Receive_IT+0x144>)
 80081fa:	6703      	str	r3, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80081fc:	2300      	movs	r3, #0
 80081fe:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008202:	6822      	ldr	r2, [r4, #0]
 8008204:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008208:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800820a:	6022      	str	r2, [r4, #0]
}
 800820c:	bc30      	pop	{r4, r5}
 800820e:	4770      	bx	lr
      return HAL_ERROR;
 8008210:	2001      	movs	r0, #1
 8008212:	4770      	bx	lr
    return HAL_BUSY;
 8008214:	2002      	movs	r0, #2
}
 8008216:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008218:	6903      	ldr	r3, [r0, #16]
 800821a:	b9c3      	cbnz	r3, 800824e <HAL_UART_Receive_IT+0xd6>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800821c:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008222:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008226:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008228:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	f240 15ff 	movw	r5, #511	; 0x1ff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008232:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008236:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800823c:	d035      	beq.n	80082aa <HAL_UART_Receive_IT+0x132>
      huart->RxISR = UART_RxISR_16BIT;
 800823e:	4b20      	ldr	r3, [pc, #128]	; (80082c0 <HAL_UART_Receive_IT+0x148>)
 8008240:	e7db      	b.n	80081fa <HAL_UART_Receive_IT+0x82>
  UART_MASK_COMPUTATION(huart);
 8008242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008246:	d029      	beq.n	800829c <HAL_UART_Receive_IT+0x124>
 8008248:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 800824c:	e7c6      	b.n	80081dc <HAL_UART_Receive_IT+0x64>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800824e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008250:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008254:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008258:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800825a:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825c:	f043 0301 	orr.w	r3, r3, #1
 8008260:	25ff      	movs	r5, #255	; 0xff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008262:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008266:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826a:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800826c:	d1c4      	bne.n	80081f8 <HAL_UART_Receive_IT+0x80>
 800826e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008272:	4293      	cmp	r3, r2
 8008274:	d8c0      	bhi.n	80081f8 <HAL_UART_Receive_IT+0x80>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008276:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <HAL_UART_Receive_IT+0x14c>)
 8008278:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800827a:	2300      	movs	r3, #0
 800827c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008280:	6822      	ldr	r2, [r4, #0]
 8008282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008286:	6022      	str	r2, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008288:	68a2      	ldr	r2, [r4, #8]
 800828a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    return (UART_Start_Receive_IT(huart, pData, Size));
 800828e:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008290:	60a2      	str	r2, [r4, #8]
 8008292:	e7bb      	b.n	800820c <HAL_UART_Receive_IT+0x94>
  UART_MASK_COMPUTATION(huart);
 8008294:	23ff      	movs	r3, #255	; 0xff
 8008296:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800829a:	e79f      	b.n	80081dc <HAL_UART_Receive_IT+0x64>
 800829c:	6903      	ldr	r3, [r0, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d099      	beq.n	80081d6 <HAL_UART_Receive_IT+0x5e>
 80082a2:	233f      	movs	r3, #63	; 0x3f
 80082a4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80082a8:	e798      	b.n	80081dc <HAL_UART_Receive_IT+0x64>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082aa:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d8c5      	bhi.n	800823e <HAL_UART_Receive_IT+0xc6>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <HAL_UART_Receive_IT+0x150>)
 80082b4:	e7e0      	b.n	8008278 <HAL_UART_Receive_IT+0x100>
 80082b6:	bf00      	nop
 80082b8:	40008000 	.word	0x40008000
 80082bc:	080085b9 	.word	0x080085b9
 80082c0:	08008639 	.word	0x08008639
 80082c4:	080086b1 	.word	0x080086b1
 80082c8:	08008825 	.word	0x08008825

080082cc <HAL_UART_TxCpltCallback>:
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <HAL_UART_ErrorCallback>:
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop

080082d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80082de:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082e2:	f7ff fff5 	bl	80082d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082e6:	bd08      	pop	{r3, pc}

080082e8 <HAL_UARTEx_RxEventCallback>:
}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop

080082ec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082ec:	6802      	ldr	r2, [r0, #0]
 80082ee:	69d3      	ldr	r3, [r2, #28]
{
 80082f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082f4:	f640 060f 	movw	r6, #2063	; 0x80f
  if (errorflags == 0U)
 80082f8:	4233      	tst	r3, r6
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082fa:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082fc:	6891      	ldr	r1, [r2, #8]
{
 80082fe:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008300:	d027      	beq.n	8008352 <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008302:	48aa      	ldr	r0, [pc, #680]	; (80085ac <HAL_UART_IRQHandler+0x2c0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008304:	4eaa      	ldr	r6, [pc, #680]	; (80085b0 <HAL_UART_IRQHandler+0x2c4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008306:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008308:	402e      	ands	r6, r5
 800830a:	4306      	orrs	r6, r0
 800830c:	d153      	bne.n	80083b6 <HAL_UART_IRQHandler+0xca>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800830e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008310:	2801      	cmp	r0, #1
 8008312:	d02c      	beq.n	800836e <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008314:	02de      	lsls	r6, r3, #11
 8008316:	d502      	bpl.n	800831e <HAL_UART_IRQHandler+0x32>
 8008318:	0248      	lsls	r0, r1, #9
 800831a:	f100 80d7 	bmi.w	80084cc <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800831e:	061f      	lsls	r7, r3, #24
 8008320:	d506      	bpl.n	8008330 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008322:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008326:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800832a:	4301      	orrs	r1, r0
 800832c:	f040 80c6 	bne.w	80084bc <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008330:	065e      	lsls	r6, r3, #25
 8008332:	d502      	bpl.n	800833a <HAL_UART_IRQHandler+0x4e>
 8008334:	0668      	lsls	r0, r5, #25
 8008336:	f100 80d5 	bmi.w	80084e4 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800833a:	0219      	lsls	r1, r3, #8
 800833c:	d502      	bpl.n	8008344 <HAL_UART_IRQHandler+0x58>
 800833e:	006a      	lsls	r2, r5, #1
 8008340:	f100 80dd 	bmi.w	80084fe <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008344:	01db      	lsls	r3, r3, #7
 8008346:	d502      	bpl.n	800834e <HAL_UART_IRQHandler+0x62>
 8008348:	2d00      	cmp	r5, #0
 800834a:	f2c0 810b 	blt.w	8008564 <HAL_UART_IRQHandler+0x278>
}
 800834e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008352:	069e      	lsls	r6, r3, #26
 8008354:	d5db      	bpl.n	800830e <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008356:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800835a:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 800835e:	433e      	orrs	r6, r7
 8008360:	d0d5      	beq.n	800830e <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 8008362:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0f2      	beq.n	800834e <HAL_UART_IRQHandler+0x62>
}
 8008368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800836c:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800836e:	06d8      	lsls	r0, r3, #27
 8008370:	d5d0      	bpl.n	8008314 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008372:	06ef      	lsls	r7, r5, #27
 8008374:	d5ce      	bpl.n	8008314 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008376:	2310      	movs	r3, #16
 8008378:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837a:	6893      	ldr	r3, [r2, #8]
 800837c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8008380:	f000 80c9 	beq.w	8008516 <HAL_UART_IRQHandler+0x22a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008384:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008386:	6801      	ldr	r1, [r0, #0]
 8008388:	684b      	ldr	r3, [r1, #4]
 800838a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0de      	beq.n	800834e <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008390:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008394:	429d      	cmp	r5, r3
 8008396:	d9da      	bls.n	800834e <HAL_UART_IRQHandler+0x62>
        huart->RxXferCount = nb_remaining_rx_data;
 8008398:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800839c:	680b      	ldr	r3, [r1, #0]
 800839e:	f013 0320 	ands.w	r3, r3, #32
 80083a2:	f000 80ea 	beq.w	800857a <HAL_UART_IRQHandler+0x28e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083a6:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 80083aa:	1a69      	subs	r1, r5, r1
 80083ac:	b289      	uxth	r1, r1
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff ff9a 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 80083b4:	e7cb      	b.n	800834e <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083b6:	07df      	lsls	r7, r3, #31
 80083b8:	d509      	bpl.n	80083ce <HAL_UART_IRQHandler+0xe2>
 80083ba:	05ee      	lsls	r6, r5, #23
 80083bc:	d507      	bpl.n	80083ce <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083be:	2601      	movs	r6, #1
 80083c0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083c2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80083c6:	f046 0601 	orr.w	r6, r6, #1
 80083ca:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ce:	079f      	lsls	r7, r3, #30
 80083d0:	d567      	bpl.n	80084a2 <HAL_UART_IRQHandler+0x1b6>
 80083d2:	07ce      	lsls	r6, r1, #31
 80083d4:	d509      	bpl.n	80083ea <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083d6:	2602      	movs	r6, #2
 80083d8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083da:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083de:	075f      	lsls	r7, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083e0:	f046 0604 	orr.w	r6, r6, #4
 80083e4:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e8:	d45f      	bmi.n	80084aa <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083ea:	071e      	lsls	r6, r3, #28
 80083ec:	d50b      	bpl.n	8008406 <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083ee:	f005 0620 	and.w	r6, r5, #32
 80083f2:	4330      	orrs	r0, r6
 80083f4:	d007      	beq.n	8008406 <HAL_UART_IRQHandler+0x11a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083f6:	2008      	movs	r0, #8
 80083f8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80083fe:	f040 0008 	orr.w	r0, r0, #8
 8008402:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008406:	0518      	lsls	r0, r3, #20
 8008408:	d50a      	bpl.n	8008420 <HAL_UART_IRQHandler+0x134>
 800840a:	016f      	lsls	r7, r5, #5
 800840c:	d508      	bpl.n	8008420 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800840e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008412:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008414:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008418:	f040 0020 	orr.w	r0, r0, #32
 800841c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008420:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008424:	2800      	cmp	r0, #0
 8008426:	d092      	beq.n	800834e <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008428:	069e      	lsls	r6, r3, #26
 800842a:	d506      	bpl.n	800843a <HAL_UART_IRQHandler+0x14e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800842c:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008430:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8008434:	ea55 0301 	orrs.w	r3, r5, r1
 8008438:	d166      	bne.n	8008508 <HAL_UART_IRQHandler+0x21c>
      errorcode = huart->ErrorCode;
 800843a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800843e:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008440:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	431d      	orrs	r5, r3
 800844a:	f000 8090 	beq.w	800856e <HAL_UART_IRQHandler+0x282>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008454:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008456:	6893      	ldr	r3, [r2, #8]
 8008458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008462:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008464:	2b01      	cmp	r3, #1
 8008466:	d103      	bne.n	8008470 <HAL_UART_IRQHandler+0x184>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008468:	6813      	ldr	r3, [r2, #0]
 800846a:	f023 0310 	bic.w	r3, r3, #16
 800846e:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8008470:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008472:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008474:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008478:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800847a:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 800847c:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800847e:	064d      	lsls	r5, r1, #25
 8008480:	d52c      	bpl.n	80084dc <HAL_UART_IRQHandler+0x1f0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008482:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008484:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848a:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800848c:	b330      	cbz	r0, 80084dc <HAL_UART_IRQHandler+0x1f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800848e:	4b49      	ldr	r3, [pc, #292]	; (80085b4 <HAL_UART_IRQHandler+0x2c8>)
 8008490:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008492:	f7fc ffcd 	bl	8005430 <HAL_DMA_Abort_IT>
 8008496:	2800      	cmp	r0, #0
 8008498:	f43f af59 	beq.w	800834e <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800849c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800849e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80084a0:	e762      	b.n	8008368 <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084a2:	075e      	lsls	r6, r3, #29
 80084a4:	d5a1      	bpl.n	80083ea <HAL_UART_IRQHandler+0xfe>
 80084a6:	07cf      	lsls	r7, r1, #31
 80084a8:	d59f      	bpl.n	80083ea <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084aa:	2604      	movs	r6, #4
 80084ac:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ae:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80084b2:	f046 0602 	orr.w	r6, r6, #2
 80084b6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80084ba:	e796      	b.n	80083ea <HAL_UART_IRQHandler+0xfe>
    if (huart->TxISR != NULL)
 80084bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f43f af45 	beq.w	800834e <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 80084c4:	4620      	mov	r0, r4
}
 80084c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80084ca:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80084d0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084d2:	6213      	str	r3, [r2, #32]
}
 80084d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80084d8:	f000 bdee 	b.w	80090b8 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80084dc:	4620      	mov	r0, r4
 80084de:	f7ff fef7 	bl	80082d0 <HAL_UART_ErrorCallback>
 80084e2:	e734      	b.n	800834e <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084e4:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084e6:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084ec:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084ee:	6013      	str	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084f0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80084f2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 80084f6:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 80084f8:	f7ff fee8 	bl	80082cc <HAL_UART_TxCpltCallback>
    return;
 80084fc:	e727      	b.n	800834e <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084fe:	4620      	mov	r0, r4
}
 8008500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008504:	f000 bddc 	b.w	80090c0 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8008508:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800850a:	2b00      	cmp	r3, #0
 800850c:	d095      	beq.n	800843a <HAL_UART_IRQHandler+0x14e>
          huart->RxISR(huart);
 800850e:	4620      	mov	r0, r4
 8008510:	4798      	blx	r3
 8008512:	6822      	ldr	r2, [r4, #0]
 8008514:	e791      	b.n	800843a <HAL_UART_IRQHandler+0x14e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008516:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800851a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 800851e:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008520:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8008522:	2900      	cmp	r1, #0
 8008524:	f43f af13 	beq.w	800834e <HAL_UART_IRQHandler+0x62>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008528:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800852c:	1a08      	subs	r0, r1, r0
 800852e:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8008530:	2900      	cmp	r1, #0
 8008532:	f43f af0c 	beq.w	800834e <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008536:	6810      	ldr	r0, [r2, #0]
 8008538:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800853c:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800853e:	6890      	ldr	r0, [r2, #8]
 8008540:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8008544:	f020 0001 	bic.w	r0, r0, #1
        huart->RxState = HAL_UART_STATE_READY;
 8008548:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800854a:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800854c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008550:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008552:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 8008554:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008556:	f020 0310 	bic.w	r3, r0, #16
 800855a:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800855c:	4620      	mov	r0, r4
 800855e:	f7ff fec3 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 8008562:	e6f4      	b.n	800834e <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008564:	4620      	mov	r0, r4
}
 8008566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800856a:	f000 bda7 	b.w	80090bc <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800856e:	4620      	mov	r0, r4
 8008570:	f7ff feae 	bl	80082d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008574:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8008578:	e6e9      	b.n	800834e <HAL_UART_IRQHandler+0x62>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857a:	6811      	ldr	r1, [r2, #0]
 800857c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008580:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008582:	6891      	ldr	r1, [r2, #8]
 8008584:	f021 0101 	bic.w	r1, r1, #1
 8008588:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858a:	6891      	ldr	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800858c:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008592:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8008594:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008598:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	f023 0310 	bic.w	r3, r3, #16
 80085a0:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085a2:	f7fc ff0b 	bl	80053bc <HAL_DMA_Abort>
 80085a6:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80085aa:	e6fc      	b.n	80083a6 <HAL_UART_IRQHandler+0xba>
 80085ac:	10000001 	.word	0x10000001
 80085b0:	04000120 	.word	0x04000120
 80085b4:	080082d5 	.word	0x080082d5

080085b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085b8:	b538      	push	{r3, r4, r5, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085ba:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80085be:	2b22      	cmp	r3, #34	; 0x22
{
 80085c0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085c2:	d005      	beq.n	80085d0 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085c4:	6802      	ldr	r2, [r0, #0]
 80085c6:	6993      	ldr	r3, [r2, #24]
 80085c8:	f043 0308 	orr.w	r3, r3, #8
 80085cc:	6193      	str	r3, [r2, #24]
  }
}
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085d0:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085d2:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085d8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80085da:	400b      	ands	r3, r1
 80085dc:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 80085de:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80085e2:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80085ec:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80085f0:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 80085f2:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 80085f4:	6582      	str	r2, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e9      	bne.n	80085ce <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085fa:	6802      	ldr	r2, [r0, #0]
 80085fc:	6811      	ldr	r1, [r2, #0]
 80085fe:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008602:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008604:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008606:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	f021 0101 	bic.w	r1, r1, #1
 800860c:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800860e:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008612:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008614:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008616:	2901      	cmp	r1, #1
 8008618:	d004      	beq.n	8008624 <UART_RxISR_8BIT+0x6c>
        HAL_UART_RxCpltCallback(huart);
 800861a:	f7fc f899 	bl	8004750 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861e:	2300      	movs	r3, #0
 8008620:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008622:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008624:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008626:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862a:	f023 0310 	bic.w	r3, r3, #16
 800862e:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008630:	f7ff fe5a 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 8008634:	e7f3      	b.n	800861e <UART_RxISR_8BIT+0x66>
 8008636:	bf00      	nop

08008638 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008638:	b538      	push	{r3, r4, r5, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800863a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800863e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008640:	2b22      	cmp	r3, #34	; 0x22
{
 8008642:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008644:	d004      	beq.n	8008650 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008646:	6993      	ldr	r3, [r2, #24]
 8008648:	f043 0308 	orr.w	r3, r3, #8
 800864c:	6193      	str	r3, [r2, #24]
  }
}
 800864e:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008650:	6a53      	ldr	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008652:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8008656:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008658:	402b      	ands	r3, r5
 800865a:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 800865e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8008662:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008664:	3b01      	subs	r3, #1
 8008666:	b29b      	uxth	r3, r3
 8008668:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800866c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1eb      	bne.n	800864e <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008676:	6811      	ldr	r1, [r2, #0]
 8008678:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800867c:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867e:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008680:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008682:	f021 0101 	bic.w	r1, r1, #1
 8008686:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8008688:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 800868e:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	2901      	cmp	r1, #1
 8008692:	d004      	beq.n	800869e <UART_RxISR_16BIT+0x66>
        HAL_UART_RxCpltCallback(huart);
 8008694:	f7fc f85c 	bl	8004750 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008698:	2300      	movs	r3, #0
 800869a:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800869c:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869e:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086a0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a4:	f023 0310 	bic.w	r3, r3, #16
 80086a8:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086aa:	f7ff fe1d 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 80086ae:	e7f3      	b.n	8008698 <UART_RxISR_16BIT+0x60>

080086b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086b4:	6803      	ldr	r3, [r0, #0]
 80086b6:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086b8:	681f      	ldr	r7, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086ba:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086bc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80086c0:	2a22      	cmp	r2, #34	; 0x22
 80086c2:	d005      	beq.n	80086d0 <UART_RxISR_8BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086c4:	699a      	ldr	r2, [r3, #24]
 80086c6:	f042 0208 	orr.w	r2, r2, #8
 80086ca:	619a      	str	r2, [r3, #24]
  }
}
 80086cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086d0:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80086d4:	4604      	mov	r4, r0
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	f000 809c 	beq.w	8008814 <UART_RxISR_8BIT_FIFOEN+0x164>
 80086dc:	068a      	lsls	r2, r1, #26
 80086de:	f140 8082 	bpl.w	80087e6 <UART_RxISR_8BIT_FIFOEN+0x136>
 80086e2:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086e6:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8008820 <UART_RxISR_8BIT_FIFOEN+0x170>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086ea:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ee:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f2:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086f6:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086fc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80086fe:	402b      	ands	r3, r5
 8008700:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8008702:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008706:	6821      	ldr	r1, [r4, #0]
      huart->pRxBuffPtr++;
 8008708:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800870a:	3b01      	subs	r3, #1
 800870c:	b29b      	uxth	r3, r3
 800870e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008712:	f8d1 b01c 	ldr.w	fp, [r1, #28]
      huart->pRxBuffPtr++;
 8008716:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008718:	f01b 0f07 	tst.w	fp, #7
      huart->pRxBuffPtr++;
 800871c:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800871e:	d026      	beq.n	800876e <UART_RxISR_8BIT_FIFOEN+0xbe>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008720:	f01b 0f01 	tst.w	fp, #1
 8008724:	d008      	beq.n	8008738 <UART_RxISR_8BIT_FIFOEN+0x88>
 8008726:	b13f      	cbz	r7, 8008738 <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008728:	2301      	movs	r3, #1
 800872a:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800872c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008738:	f01b 0f02 	tst.w	fp, #2
 800873c:	d035      	beq.n	80087aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800873e:	b196      	cbz	r6, 8008766 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008740:	2302      	movs	r3, #2
 8008742:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008744:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008748:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800874c:	f043 0304 	orr.w	r3, r3, #4
 8008750:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008754:	d007      	beq.n	8008766 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008756:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800875a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800875e:	f043 0302 	orr.w	r3, r3, #2
 8008762:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008766:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d135      	bne.n	80087da <UART_RxISR_8BIT_FIFOEN+0x12a>
      if (huart->RxXferCount == 0U)
 800876e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008772:	b29b      	uxth	r3, r3
 8008774:	b9a3      	cbnz	r3, 80087a0 <UART_RxISR_8BIT_FIFOEN+0xf0>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	6811      	ldr	r1, [r2, #0]
 800877a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800877e:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008780:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008782:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008784:	ea01 0109 	and.w	r1, r1, r9
 8008788:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800878a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8008790:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008792:	2901      	cmp	r1, #1
 8008794:	d017      	beq.n	80087c6 <UART_RxISR_8BIT_FIFOEN+0x116>
          HAL_UART_RxCpltCallback(huart);
 8008796:	4620      	mov	r0, r4
 8008798:	f7fb ffda 	bl	8004750 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879c:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087a0:	f01b 0f20 	tst.w	fp, #32
 80087a4:	d01f      	beq.n	80087e6 <UART_RxISR_8BIT_FIFOEN+0x136>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	e7a7      	b.n	80086fa <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087aa:	f01b 0f04 	tst.w	fp, #4
 80087ae:	d0da      	beq.n	8008766 <UART_RxISR_8BIT_FIFOEN+0xb6>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	d0d8      	beq.n	8008766 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087b4:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80087bc:	f043 0302 	orr.w	r3, r3, #2
 80087c0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80087c4:	e7cf      	b.n	8008766 <UART_RxISR_8BIT_FIFOEN+0xb6>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c6:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087c8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087cc:	f023 0310 	bic.w	r3, r3, #16
 80087d0:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff fd88 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 80087d8:	e7e0      	b.n	800879c <UART_RxISR_8BIT_FIFOEN+0xec>
          HAL_UART_ErrorCallback(huart);
 80087da:	4620      	mov	r0, r4
 80087dc:	f7ff fd78 	bl	80082d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 80087e4:	e7c3      	b.n	800876e <UART_RxISR_8BIT_FIFOEN+0xbe>
    rxdatacount = huart->RxXferCount;
 80087e6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80087ea:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f43f af6d 	beq.w	80086cc <UART_RxISR_8BIT_FIFOEN+0x1c>
 80087f2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80087f6:	429a      	cmp	r2, r3
 80087f8:	f67f af68 	bls.w	80086cc <UART_RxISR_8BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087fc:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 80087fe:	4907      	ldr	r1, [pc, #28]	; (800881c <UART_RxISR_8BIT_FIFOEN+0x16c>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008806:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008808:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800880a:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800880c:	f042 0220 	orr.w	r2, r2, #32
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	e75b      	b.n	80086cc <UART_RxISR_8BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8008814:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008818:	e758      	b.n	80086cc <UART_RxISR_8BIT_FIFOEN+0x1c>
 800881a:	bf00      	nop
 800881c:	080085b9 	.word	0x080085b9
 8008820:	effffffe 	.word	0xeffffffe

08008824 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008824:	6802      	ldr	r2, [r0, #0]
{
 8008826:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800882a:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800882c:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800882e:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008830:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008834:	2b22      	cmp	r3, #34	; 0x22
 8008836:	d005      	beq.n	8008844 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008838:	6993      	ldr	r3, [r2, #24]
 800883a:	f043 0308 	orr.w	r3, r3, #8
 800883e:	6193      	str	r3, [r2, #24]
  }
}
 8008840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008844:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008848:	4604      	mov	r4, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 8099 	beq.w	8008982 <UART_RxISR_16BIT_FIFOEN+0x15e>
 8008850:	068b      	lsls	r3, r1, #26
 8008852:	d57f      	bpl.n	8008954 <UART_RxISR_16BIT_FIFOEN+0x130>
  uint16_t  uhMask = huart->Mask;
 8008854:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008858:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800898c <UART_RxISR_16BIT_FIFOEN+0x168>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800885c:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008860:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008864:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008868:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886c:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800886e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008870:	402b      	ands	r3, r5
 8008872:	f821 3b02 	strh.w	r3, [r1], #2
      huart->RxXferCount--;
 8008876:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 800887a:	65a1      	str	r1, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800887c:	3b01      	subs	r3, #1
 800887e:	b29b      	uxth	r3, r3
 8008880:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008884:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008888:	f01b 0f07 	tst.w	fp, #7
 800888c:	d026      	beq.n	80088dc <UART_RxISR_16BIT_FIFOEN+0xb8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800888e:	f01b 0f01 	tst.w	fp, #1
 8008892:	d008      	beq.n	80088a6 <UART_RxISR_16BIT_FIFOEN+0x82>
 8008894:	b13f      	cbz	r7, 80088a6 <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008896:	2301      	movs	r3, #1
 8008898:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800889a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800889e:	f043 0301 	orr.w	r3, r3, #1
 80088a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088a6:	f01b 0f02 	tst.w	fp, #2
 80088aa:	d035      	beq.n	8008918 <UART_RxISR_16BIT_FIFOEN+0xf4>
 80088ac:	b196      	cbz	r6, 80088d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088ae:	2302      	movs	r3, #2
 80088b0:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088b6:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ba:	f043 0304 	orr.w	r3, r3, #4
 80088be:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088c2:	d007      	beq.n	80088d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088c4:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80088cc:	f043 0302 	orr.w	r3, r3, #2
 80088d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d135      	bne.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x124>
      if (huart->RxXferCount == 0U)
 80088dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	b9a3      	cbnz	r3, 800890e <UART_RxISR_16BIT_FIFOEN+0xea>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e4:	6822      	ldr	r2, [r4, #0]
 80088e6:	6811      	ldr	r1, [r2, #0]
 80088e8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80088ec:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088ee:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80088f0:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088f2:	ea01 0109 	and.w	r1, r1, r9
 80088f6:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80088f8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088fc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80088fe:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	2901      	cmp	r1, #1
 8008902:	d017      	beq.n	8008934 <UART_RxISR_16BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8008904:	4620      	mov	r0, r4
 8008906:	f7fb ff23 	bl	8004750 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800890e:	f01b 0f20 	tst.w	fp, #32
 8008912:	d01f      	beq.n	8008954 <UART_RxISR_16BIT_FIFOEN+0x130>
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	e7a9      	b.n	800886c <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008918:	f01b 0f04 	tst.w	fp, #4
 800891c:	d0da      	beq.n	80088d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800891e:	2e00      	cmp	r6, #0
 8008920:	d0d8      	beq.n	80088d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008922:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008926:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800892a:	f043 0302 	orr.w	r3, r3, #2
 800892e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008932:	e7cf      	b.n	80088d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008934:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008936:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893a:	f023 0310 	bic.w	r3, r3, #16
 800893e:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff fcd1 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 8008946:	e7e0      	b.n	800890a <UART_RxISR_16BIT_FIFOEN+0xe6>
          HAL_UART_ErrorCallback(huart);
 8008948:	4620      	mov	r0, r4
 800894a:	f7ff fcc1 	bl	80082d0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894e:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8008952:	e7c3      	b.n	80088dc <UART_RxISR_16BIT_FIFOEN+0xb8>
    rxdatacount = huart->RxXferCount;
 8008954:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008958:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800895a:	2b00      	cmp	r3, #0
 800895c:	f43f af70 	beq.w	8008840 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8008960:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008964:	429a      	cmp	r2, r3
 8008966:	f67f af6b 	bls.w	8008840 <UART_RxISR_16BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800896a:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800896c:	4906      	ldr	r1, [pc, #24]	; (8008988 <UART_RxISR_16BIT_FIFOEN+0x164>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008974:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008976:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008978:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800897a:	f042 0220 	orr.w	r2, r2, #32
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	e75e      	b.n	8008840 <UART_RxISR_16BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8008982:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008986:	e75b      	b.n	8008840 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8008988:	08008639 	.word	0x08008639
 800898c:	effffffe 	.word	0xeffffffe

08008990 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008990:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008992:	07da      	lsls	r2, r3, #31
{
 8008994:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008996:	d506      	bpl.n	80089a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008998:	6801      	ldr	r1, [r0, #0]
 800899a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800899c:	684a      	ldr	r2, [r1, #4]
 800899e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80089a2:	4322      	orrs	r2, r4
 80089a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089a6:	079c      	lsls	r4, r3, #30
 80089a8:	d506      	bpl.n	80089b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089aa:	6801      	ldr	r1, [r0, #0]
 80089ac:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80089ae:	684a      	ldr	r2, [r1, #4]
 80089b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089b4:	4322      	orrs	r2, r4
 80089b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089b8:	0759      	lsls	r1, r3, #29
 80089ba:	d506      	bpl.n	80089ca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089bc:	6801      	ldr	r1, [r0, #0]
 80089be:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80089c0:	684a      	ldr	r2, [r1, #4]
 80089c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089c6:	4322      	orrs	r2, r4
 80089c8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ca:	071a      	lsls	r2, r3, #28
 80089cc:	d506      	bpl.n	80089dc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089ce:	6801      	ldr	r1, [r0, #0]
 80089d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80089d2:	684a      	ldr	r2, [r1, #4]
 80089d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089d8:	4322      	orrs	r2, r4
 80089da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089dc:	06dc      	lsls	r4, r3, #27
 80089de:	d506      	bpl.n	80089ee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089e0:	6801      	ldr	r1, [r0, #0]
 80089e2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80089e4:	688a      	ldr	r2, [r1, #8]
 80089e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089ea:	4322      	orrs	r2, r4
 80089ec:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ee:	0699      	lsls	r1, r3, #26
 80089f0:	d506      	bpl.n	8008a00 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089f2:	6801      	ldr	r1, [r0, #0]
 80089f4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80089f6:	688a      	ldr	r2, [r1, #8]
 80089f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089fc:	4322      	orrs	r2, r4
 80089fe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a00:	065a      	lsls	r2, r3, #25
 8008a02:	d509      	bpl.n	8008a18 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a04:	6801      	ldr	r1, [r0, #0]
 8008a06:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008a08:	684a      	ldr	r2, [r1, #4]
 8008a0a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008a0e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a14:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a16:	d00b      	beq.n	8008a30 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a18:	061b      	lsls	r3, r3, #24
 8008a1a:	d506      	bpl.n	8008a2a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a1c:	6802      	ldr	r2, [r0, #0]
 8008a1e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008a20:	6853      	ldr	r3, [r2, #4]
 8008a22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008a26:	430b      	orrs	r3, r1
 8008a28:	6053      	str	r3, [r2, #4]
}
 8008a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a2e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a30:	684a      	ldr	r2, [r1, #4]
 8008a32:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008a34:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008a38:	4322      	orrs	r2, r4
 8008a3a:	604a      	str	r2, [r1, #4]
 8008a3c:	e7ec      	b.n	8008a18 <UART_AdvFeatureConfig+0x88>
 8008a3e:	bf00      	nop

08008a40 <UART_CheckIdleState>:
{
 8008a40:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a42:	2300      	movs	r3, #0
{
 8008a44:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a46:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8008a4a:	f7fb fef7 	bl	800483c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8008a54:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a56:	d40d      	bmi.n	8008a74 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	0752      	lsls	r2, r2, #29
 8008a5c:	d431      	bmi.n	8008ac2 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a5e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008a60:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8008a62:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8008a66:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 8008a6a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a70:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a74:	69da      	ldr	r2, [r3, #28]
 8008a76:	0292      	lsls	r2, r2, #10
 8008a78:	d4ee      	bmi.n	8008a58 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7fb fedf 	bl	800483c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a7e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a80:	1b40      	subs	r0, r0, r5
 8008a82:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a86:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a88:	d22c      	bcs.n	8008ae4 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a8a:	0750      	lsls	r0, r2, #29
 8008a8c:	d5f2      	bpl.n	8008a74 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a8e:	69da      	ldr	r2, [r3, #28]
 8008a90:	0511      	lsls	r1, r2, #20
 8008a92:	d5ef      	bpl.n	8008a74 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a98:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008aa0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa2:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8008aa4:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	f021 0101 	bic.w	r1, r1, #1
 8008aaa:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008aac:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8008aae:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8008ab2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8008ab6:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8008ab8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008abc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	0258      	lsls	r0, r3, #9
 8008ac6:	d4ca      	bmi.n	8008a5e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac8:	f7fb feb8 	bl	800483c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008acc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ace:	1b40      	subs	r0, r0, r5
 8008ad0:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ad4:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad6:	d205      	bcs.n	8008ae4 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ad8:	0751      	lsls	r1, r2, #29
 8008ada:	d5f2      	bpl.n	8008ac2 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008adc:	69da      	ldr	r2, [r3, #28]
 8008ade:	0512      	lsls	r2, r2, #20
 8008ae0:	d5ef      	bpl.n	8008ac2 <UART_CheckIdleState+0x82>
 8008ae2:	e7d7      	b.n	8008a94 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ae8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aea:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8008aec:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008af4:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8008af6:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8008afa:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8008afe:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8008b00:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	bf00      	nop

08008b08 <HAL_UART_Init>:
  if (huart == NULL)
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	f000 81b5 	beq.w	8008e78 <HAL_UART_Init+0x370>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008b0e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8008b12:	b570      	push	{r4, r5, r6, lr}
 8008b14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d06c      	beq.n	8008bf4 <HAL_UART_Init+0xec>
  __HAL_UART_DISABLE(huart);
 8008b1a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b1c:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b1e:	49c0      	ldr	r1, [pc, #768]	; (8008e20 <HAL_UART_Init+0x318>)
  huart->gState = HAL_UART_STATE_BUSY;
 8008b20:	2224      	movs	r2, #36	; 0x24
 8008b22:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008b26:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b28:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008b2a:	f020 0001 	bic.w	r0, r0, #1
 8008b2e:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b30:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b32:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b34:	4332      	orrs	r2, r6
 8008b36:	4302      	orrs	r2, r0
 8008b38:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b3a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b3c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b46:	49b7      	ldr	r1, [pc, #732]	; (8008e24 <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b48:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008b4c:	432a      	orrs	r2, r5
 8008b4e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b50:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b52:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b54:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b56:	d052      	beq.n	8008bfe <HAL_UART_Init+0xf6>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b58:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b5c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008b60:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8008b64:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b66:	430a      	orrs	r2, r1
 8008b68:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b6c:	49ae      	ldr	r1, [pc, #696]	; (8008e28 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b6e:	f022 020f 	bic.w	r2, r2, #15
 8008b72:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b74:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b76:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b78:	d028      	beq.n	8008bcc <HAL_UART_Init+0xc4>
 8008b7a:	4aac      	ldr	r2, [pc, #688]	; (8008e2c <HAL_UART_Init+0x324>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	f000 8091 	beq.w	8008ca4 <HAL_UART_Init+0x19c>
 8008b82:	4aab      	ldr	r2, [pc, #684]	; (8008e30 <HAL_UART_Init+0x328>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	f000 8165 	beq.w	8008e54 <HAL_UART_Init+0x34c>
 8008b8a:	4aaa      	ldr	r2, [pc, #680]	; (8008e34 <HAL_UART_Init+0x32c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	f000 80e4 	beq.w	8008d5a <HAL_UART_Init+0x252>
 8008b92:	4aa9      	ldr	r2, [pc, #676]	; (8008e38 <HAL_UART_Init+0x330>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d111      	bne.n	8008bbc <HAL_UART_Init+0xb4>
 8008b98:	4ba8      	ldr	r3, [pc, #672]	; (8008e3c <HAL_UART_Init+0x334>)
 8008b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba6:	f000 817d 	beq.w	8008ea4 <HAL_UART_Init+0x39c>
 8008baa:	f200 8101 	bhi.w	8008db0 <HAL_UART_Init+0x2a8>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 80e7 	beq.w	8008d82 <HAL_UART_Init+0x27a>
 8008bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb8:	f000 80dd 	beq.w	8008d76 <HAL_UART_Init+0x26e>
  huart->NbRxDataToProcess = 1;
 8008bbc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8008bc0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008bc2:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008bc6:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8008bc8:	2001      	movs	r0, #1
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bcc:	4b9b      	ldr	r3, [pc, #620]	; (8008e3c <HAL_UART_Init+0x334>)
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd2:	f003 0303 	and.w	r3, r3, #3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	f240 80d9 	bls.w	8008d90 <HAL_UART_Init+0x288>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bde:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008be2:	f000 8151 	beq.w	8008e88 <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008be6:	f7fd ff35 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f000 80d3 	beq.w	8008d96 <HAL_UART_Init+0x28e>
 8008bf0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008bf2:	e081      	b.n	8008cf8 <HAL_UART_Init+0x1f0>
    huart->Lock = HAL_UNLOCKED;
 8008bf4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8008bf8:	f7fb fd5c 	bl	80046b4 <HAL_UART_MspInit>
 8008bfc:	e78d      	b.n	8008b1a <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bfe:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008c02:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008c06:	430a      	orrs	r2, r1
 8008c08:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c0e:	488b      	ldr	r0, [pc, #556]	; (8008e3c <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c10:	f022 020f 	bic.w	r2, r2, #15
 8008c14:	430a      	orrs	r2, r1
 8008c16:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c18:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c24:	f000 813c 	beq.w	8008ea0 <HAL_UART_Init+0x398>
 8008c28:	d80c      	bhi.n	8008c44 <HAL_UART_Init+0x13c>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 8132 	beq.w	8008e94 <HAL_UART_Init+0x38c>
 8008c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c34:	d1c2      	bne.n	8008bbc <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8008c36:	f7fd fdb1 	bl	800679c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f000 80ab 	beq.w	8008d96 <HAL_UART_Init+0x28e>
 8008c40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c42:	e004      	b.n	8008c4e <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c48:	d1b8      	bne.n	8008bbc <HAL_UART_Init+0xb4>
        pclk = (uint32_t) LSE_VALUE;
 8008c4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c4e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c50:	4b7b      	ldr	r3, [pc, #492]	; (8008e40 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c52:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c56:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8008c5a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c5e:	42b3      	cmp	r3, r6
 8008c60:	d3ac      	bcc.n	8008bbc <HAL_UART_Init+0xb4>
 8008c62:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008c66:	d8a9      	bhi.n	8008bbc <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c68:	2600      	movs	r6, #0
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	f7f8 f833 	bl	8000cd8 <__aeabi_uldivmod>
 8008c72:	020b      	lsls	r3, r1, #8
 8008c74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c78:	0202      	lsls	r2, r0, #8
 8008c7a:	0868      	lsrs	r0, r5, #1
 8008c7c:	1810      	adds	r0, r2, r0
 8008c7e:	f143 0100 	adc.w	r1, r3, #0
 8008c82:	462a      	mov	r2, r5
 8008c84:	4633      	mov	r3, r6
 8008c86:	f7f8 f827 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c8a:	4b6e      	ldr	r3, [pc, #440]	; (8008e44 <HAL_UART_Init+0x33c>)
 8008c8c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d893      	bhi.n	8008bbc <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 8008c94:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8008c96:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8008c9a:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8008c9c:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008ca0:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 8008ca2:	e043      	b.n	8008d2c <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ca4:	4b65      	ldr	r3, [pc, #404]	; (8008e3c <HAL_UART_Init+0x334>)
 8008ca6:	4a68      	ldr	r2, [pc, #416]	; (8008e48 <HAL_UART_Init+0x340>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cac:	f003 030c 	and.w	r3, r3, #12
 8008cb0:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cb2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008cb6:	d07f      	beq.n	8008db8 <HAL_UART_Init+0x2b0>
    switch (clocksource)
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	f63f af7f 	bhi.w	8008bbc <HAL_UART_Init+0xb4>
 8008cbe:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <HAL_UART_Init+0x1bc>)
 8008cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc4:	08008d8b 	.word	0x08008d8b
 8008cc8:	08008be7 	.word	0x08008be7
 8008ccc:	08008d57 	.word	0x08008d57
 8008cd0:	08008bbd 	.word	0x08008bbd
 8008cd4:	08008d7d 	.word	0x08008d7d
 8008cd8:	08008bbd 	.word	0x08008bbd
 8008cdc:	08008bbd 	.word	0x08008bbd
 8008ce0:	08008bbd 	.word	0x08008bbd
 8008ce4:	08008cf5 	.word	0x08008cf5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ce8:	2b30      	cmp	r3, #48	; 0x30
 8008cea:	f47f af67 	bne.w	8008bbc <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008cf2:	d07a      	beq.n	8008dea <HAL_UART_Init+0x2e2>
 8008cf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf8:	6862      	ldr	r2, [r4, #4]
 8008cfa:	4b51      	ldr	r3, [pc, #324]	; (8008e40 <HAL_UART_Init+0x338>)
 8008cfc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8008d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d04:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d0c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d0e:	f1a3 0110 	sub.w	r1, r3, #16
 8008d12:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008d16:	4291      	cmp	r1, r2
 8008d18:	f63f af50 	bhi.w	8008bbc <HAL_UART_Init+0xb4>
        huart->Instance->BRR = usartdiv;
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8008d20:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8008d22:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d2a:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d13a      	bne.n	8008da8 <HAL_UART_Init+0x2a0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d42:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8008d4a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8008d4c:	601a      	str	r2, [r3, #0]
}
 8008d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 8008d52:	f7ff be75 	b.w	8008a40 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8008d56:	483d      	ldr	r0, [pc, #244]	; (8008e4c <HAL_UART_Init+0x344>)
 8008d58:	e7ce      	b.n	8008cf8 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d5a:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <HAL_UART_Init+0x334>)
 8008d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d64:	2b80      	cmp	r3, #128	; 0x80
 8008d66:	f000 809d 	beq.w	8008ea4 <HAL_UART_Init+0x39c>
 8008d6a:	f200 8081 	bhi.w	8008e70 <HAL_UART_Init+0x368>
 8008d6e:	b143      	cbz	r3, 8008d82 <HAL_UART_Init+0x27a>
 8008d70:	2b40      	cmp	r3, #64	; 0x40
 8008d72:	f47f af23 	bne.w	8008bbc <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008d7a:	d07f      	beq.n	8008e7c <HAL_UART_Init+0x374>
        pclk = HAL_RCC_GetSysClockFreq();
 8008d7c:	f7fd fd0e 	bl	800679c <HAL_RCC_GetSysClockFreq>
        break;
 8008d80:	e733      	b.n	8008bea <HAL_UART_Init+0xe2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008d86:	f000 8082 	beq.w	8008e8e <HAL_UART_Init+0x386>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d8a:	f7fd fe51 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
        break;
 8008d8e:	e72c      	b.n	8008bea <HAL_UART_Init+0xe2>
 8008d90:	4a2f      	ldr	r2, [pc, #188]	; (8008e50 <HAL_UART_Init+0x348>)
 8008d92:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d94:	e78d      	b.n	8008cb2 <HAL_UART_Init+0x1aa>
  huart->RxISR = NULL;
 8008d96:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008d98:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8008d9e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008da2:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0c4      	beq.n	8008d32 <HAL_UART_Init+0x22a>
    UART_AdvFeatureConfig(huart);
 8008da8:	4620      	mov	r0, r4
 8008daa:	f7ff fdf1 	bl	8008990 <UART_AdvFeatureConfig>
 8008dae:	e7c0      	b.n	8008d32 <HAL_UART_Init+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db4:	d09b      	beq.n	8008cee <HAL_UART_Init+0x1e6>
 8008db6:	e701      	b.n	8008bbc <HAL_UART_Init+0xb4>
    switch (clocksource)
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	f63f aeff 	bhi.w	8008bbc <HAL_UART_Init+0xb4>
 8008dbe:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <HAL_UART_Init+0x2bc>)
 8008dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc4:	08008e8f 	.word	0x08008e8f
 8008dc8:	08008e89 	.word	0x08008e89
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008bbd 	.word	0x08008bbd
 8008dd4:	08008e7d 	.word	0x08008e7d
 8008dd8:	08008bbd 	.word	0x08008bbd
 8008ddc:	08008bbd 	.word	0x08008bbd
 8008de0:	08008bbd 	.word	0x08008bbd
 8008de4:	08008deb 	.word	0x08008deb
        pclk = (uint32_t) HSI_VALUE;
 8008de8:	4818      	ldr	r0, [pc, #96]	; (8008e4c <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dea:	6862      	ldr	r2, [r4, #4]
 8008dec:	4914      	ldr	r1, [pc, #80]	; (8008e40 <HAL_UART_Init+0x338>)
 8008dee:	0853      	lsrs	r3, r2, #1
 8008df0:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8008df4:	fbb0 f0f1 	udiv	r0, r0, r1
 8008df8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008dfc:	fbb0 f0f2 	udiv	r0, r0, r2
 8008e00:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e02:	f1a2 0110 	sub.w	r1, r2, #16
 8008e06:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008e0a:	4299      	cmp	r1, r3
 8008e0c:	f63f aed6 	bhi.w	8008bbc <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e10:	f020 030f 	bic.w	r3, r0, #15
 8008e14:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e16:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8008e1a:	6820      	ldr	r0, [r4, #0]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	e77e      	b.n	8008d1e <HAL_UART_Init+0x216>
 8008e20:	cfff69f3 	.word	0xcfff69f3
 8008e24:	40008000 	.word	0x40008000
 8008e28:	40013800 	.word	0x40013800
 8008e2c:	40004400 	.word	0x40004400
 8008e30:	40004800 	.word	0x40004800
 8008e34:	40004c00 	.word	0x40004c00
 8008e38:	40005000 	.word	0x40005000
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	0800ed98 	.word	0x0800ed98
 8008e44:	000ffcff 	.word	0x000ffcff
 8008e48:	0800ed88 	.word	0x0800ed88
 8008e4c:	00f42400 	.word	0x00f42400
 8008e50:	0800ed84 	.word	0x0800ed84
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e54:	4b16      	ldr	r3, [pc, #88]	; (8008eb0 <HAL_UART_Init+0x3a8>)
 8008e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	d020      	beq.n	8008ea4 <HAL_UART_Init+0x39c>
 8008e62:	f63f af41 	bhi.w	8008ce8 <HAL_UART_Init+0x1e0>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d08b      	beq.n	8008d82 <HAL_UART_Init+0x27a>
 8008e6a:	2b10      	cmp	r3, #16
 8008e6c:	d083      	beq.n	8008d76 <HAL_UART_Init+0x26e>
 8008e6e:	e6a5      	b.n	8008bbc <HAL_UART_Init+0xb4>
 8008e70:	2bc0      	cmp	r3, #192	; 0xc0
 8008e72:	f43f af3c 	beq.w	8008cee <HAL_UART_Init+0x1e6>
 8008e76:	e6a1      	b.n	8008bbc <HAL_UART_Init+0xb4>
}
 8008e78:	2001      	movs	r0, #1
 8008e7a:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8008e7c:	f7fd fc8e 	bl	800679c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d088      	beq.n	8008d96 <HAL_UART_Init+0x28e>
 8008e84:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008e86:	e7b0      	b.n	8008dea <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e88:	f7fd fde4 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
        break;
 8008e8c:	e7f8      	b.n	8008e80 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e8e:	f7fd fdcf 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
        break;
 8008e92:	e7f5      	b.n	8008e80 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e94:	f7fd fdcc 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f43f af7c 	beq.w	8008d96 <HAL_UART_Init+0x28e>
 8008e9e:	e6cf      	b.n	8008c40 <HAL_UART_Init+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ea0:	4804      	ldr	r0, [pc, #16]	; (8008eb4 <HAL_UART_Init+0x3ac>)
 8008ea2:	e6d4      	b.n	8008c4e <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008ea8:	4802      	ldr	r0, [pc, #8]	; (8008eb4 <HAL_UART_Init+0x3ac>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eaa:	f47f af25 	bne.w	8008cf8 <HAL_UART_Init+0x1f0>
 8008eae:	e79c      	b.n	8008dea <HAL_UART_Init+0x2e2>
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	00f42400 	.word	0x00f42400

08008eb8 <UART_WaitOnFlagUntilTimeout>:
{
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ec0:	6804      	ldr	r4, [r0, #0]
 8008ec2:	4607      	mov	r7, r0
 8008ec4:	460e      	mov	r6, r1
 8008ec6:	4615      	mov	r5, r2
 8008ec8:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eca:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008ece:	d10a      	bne.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008ed0:	69e3      	ldr	r3, [r4, #28]
 8008ed2:	ea36 0303 	bics.w	r3, r6, r3
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	429d      	cmp	r5, r3
 8008ede:	d0f7      	beq.n	8008ed0 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8008ee0:	2000      	movs	r0, #0
}
 8008ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ee6:	69e3      	ldr	r3, [r4, #28]
 8008ee8:	ea36 0303 	bics.w	r3, r6, r3
 8008eec:	bf0c      	ite	eq
 8008eee:	2301      	moveq	r3, #1
 8008ef0:	2300      	movne	r3, #0
 8008ef2:	429d      	cmp	r5, r3
 8008ef4:	d1f4      	bne.n	8008ee0 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef6:	f7fb fca1 	bl	800483c <HAL_GetTick>
 8008efa:	eba0 0009 	sub.w	r0, r0, r9
 8008efe:	4540      	cmp	r0, r8
 8008f00:	d820      	bhi.n	8008f44 <UART_WaitOnFlagUntilTimeout+0x8c>
 8008f02:	f1b8 0f00 	cmp.w	r8, #0
 8008f06:	d01d      	beq.n	8008f44 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f08:	683c      	ldr	r4, [r7, #0]
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	075a      	lsls	r2, r3, #29
 8008f0e:	d5dc      	bpl.n	8008eca <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f10:	69e3      	ldr	r3, [r4, #28]
 8008f12:	051b      	lsls	r3, r3, #20
 8008f14:	d5d9      	bpl.n	8008eca <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f1a:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f22:	6023      	str	r3, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f24:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008f26:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f28:	f022 0201 	bic.w	r2, r2, #1
          __HAL_UNLOCK(huart);
 8008f2c:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2e:	60a2      	str	r2, [r4, #8]
          return HAL_TIMEOUT;
 8008f30:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8008f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8008f36:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8008f42:	e7ce      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x2a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4e:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008f50:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f52:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8008f56:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f58:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8008f5a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8008f5c:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8008f60:	f887 4080 	strb.w	r4, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008f64:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8008f68:	e7bb      	b.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x2a>
 8008f6a:	bf00      	nop

08008f6c <HAL_UART_Transmit>:
{
 8008f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f70:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8008f72:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8008f76:	2820      	cmp	r0, #32
{
 8008f78:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8008f7a:	d17b      	bne.n	8009074 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8008f7c:	4688      	mov	r8, r1
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	d048      	beq.n	8009014 <HAL_UART_Transmit+0xa8>
 8008f82:	4617      	mov	r7, r2
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	d045      	beq.n	8009014 <HAL_UART_Transmit+0xa8>
 8008f88:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8008f8a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d070      	beq.n	8009074 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f92:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8008f94:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f96:	f04f 0900 	mov.w	r9, #0
 8008f9a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 8008f9e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fa2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 8008fa6:	f7fb fc49 	bl	800483c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008faa:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008fac:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8008fb4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8008fb6:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fba:	d05f      	beq.n	800907c <HAL_UART_Transmit+0x110>
      pdata16bits = NULL;
 8008fbc:	464f      	mov	r7, r9
    while (huart->TxXferCount > 0U)
 8008fbe:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8008fc2:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8008fc4:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8008fc6:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8008fca:	b1b3      	cbz	r3, 8008ffa <HAL_UART_Transmit+0x8e>
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	1c69      	adds	r1, r5, #1
 8008fd0:	d124      	bne.n	800901c <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd2:	69d3      	ldr	r3, [r2, #28]
 8008fd4:	061b      	lsls	r3, r3, #24
 8008fd6:	d5fc      	bpl.n	8008fd2 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8008fd8:	f1b8 0f00 	cmp.w	r8, #0
 8008fdc:	d045      	beq.n	800906a <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fde:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fe2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8008fe4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ff0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e9      	bne.n	8008fce <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ffa:	9500      	str	r5, [sp, #0]
 8008ffc:	4633      	mov	r3, r6
 8008ffe:	2200      	movs	r2, #0
 8009000:	2140      	movs	r1, #64	; 0x40
 8009002:	4620      	mov	r0, r4
 8009004:	f7ff ff58 	bl	8008eb8 <UART_WaitOnFlagUntilTimeout>
 8009008:	2800      	cmp	r0, #0
 800900a:	d152      	bne.n	80090b2 <HAL_UART_Transmit+0x146>
    huart->gState = HAL_UART_STATE_READY;
 800900c:	2320      	movs	r3, #32
 800900e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8009012:	e000      	b.n	8009016 <HAL_UART_Transmit+0xaa>
      return  HAL_ERROR;
 8009014:	2001      	movs	r0, #1
}
 8009016:	b003      	add	sp, #12
 8009018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800901c:	69d3      	ldr	r3, [r2, #28]
 800901e:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8009022:	d1d9      	bne.n	8008fd8 <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009024:	f7fb fc0a 	bl	800483c <HAL_GetTick>
 8009028:	1b80      	subs	r0, r0, r6
 800902a:	4285      	cmp	r5, r0
 800902c:	d32c      	bcc.n	8009088 <HAL_UART_Transmit+0x11c>
 800902e:	b35d      	cbz	r5, 8009088 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009030:	6822      	ldr	r2, [r4, #0]
 8009032:	6813      	ldr	r3, [r2, #0]
 8009034:	075b      	lsls	r3, r3, #29
 8009036:	d5ca      	bpl.n	8008fce <HAL_UART_Transmit+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009038:	69d3      	ldr	r3, [r2, #28]
 800903a:	0518      	lsls	r0, r3, #20
 800903c:	d5c7      	bpl.n	8008fce <HAL_UART_Transmit+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800903e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009042:	6213      	str	r3, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009044:	6813      	ldr	r3, [r2, #0]
 8009046:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800904a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904c:	6891      	ldr	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800904e:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009050:	f021 0101 	bic.w	r1, r1, #1
 8009054:	6091      	str	r1, [r2, #8]
        return HAL_TIMEOUT;
 8009056:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8009058:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800905c:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009060:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009064:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009068:	e7d5      	b.n	8009016 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800906a:	f837 3b02 	ldrh.w	r3, [r7], #2
 800906e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009072:	e7b6      	b.n	8008fe2 <HAL_UART_Transmit+0x76>
    return HAL_BUSY;
 8009074:	2002      	movs	r0, #2
}
 8009076:	b003      	add	sp, #12
 8009078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d19c      	bne.n	8008fbc <HAL_UART_Transmit+0x50>
 8009082:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8009084:	4698      	mov	r8, r3
 8009086:	e79a      	b.n	8008fbe <HAL_UART_Transmit+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009090:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009092:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009094:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 800909a:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 800909c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80090a0:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80090a4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80090a8:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 80090ac:	b003      	add	sp, #12
 80090ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80090b2:	2003      	movs	r0, #3
 80090b4:	e7af      	b.n	8009016 <HAL_UART_Transmit+0xaa>
 80090b6:	bf00      	nop

080090b8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop

080090bc <HAL_UARTEx_RxFifoFullCallback>:
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <HAL_UARTEx_TxFifoEmptyCallback>:
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop

080090c4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090c4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80090c8:	2a01      	cmp	r2, #1
 80090ca:	d017      	beq.n	80090fc <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090cc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80090ce:	2124      	movs	r1, #36	; 0x24
{
 80090d0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80090d2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 80090d6:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090d8:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090da:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090dc:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090de:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80090e2:	f024 0401 	bic.w	r4, r4, #1
 80090e6:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80090e8:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090ea:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ec:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090ee:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 80090f2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80090f4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80090f8:	bc30      	pop	{r4, r5}
 80090fa:	4770      	bx	lr
  __HAL_LOCK(huart);
 80090fc:	2002      	movs	r0, #2
}
 80090fe:	4770      	bx	lr

08009100 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009100:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009104:	2a01      	cmp	r2, #1
 8009106:	d033      	beq.n	8009170 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8009108:	4603      	mov	r3, r0
 800910a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800910c:	681a      	ldr	r2, [r3, #0]
{
 800910e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009110:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009114:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009116:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009118:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800911a:	f020 0001 	bic.w	r0, r0, #1
 800911e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009120:	6890      	ldr	r0, [r2, #8]
 8009122:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8009126:	4301      	orrs	r1, r0
 8009128:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800912a:	b1f5      	cbz	r5, 800916a <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800912c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800912e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009130:	4810      	ldr	r0, [pc, #64]	; (8009174 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8009132:	4f11      	ldr	r7, [pc, #68]	; (8009178 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009134:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009138:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800913a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800913c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800913e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009140:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009142:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009144:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009146:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800914a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800914e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009152:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8009154:	2520      	movs	r5, #32
 8009156:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800915a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800915c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009160:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009162:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009166:	bcf0      	pop	{r4, r5, r6, r7}
 8009168:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800916a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800916c:	4608      	mov	r0, r1
 800916e:	e7ee      	b.n	800914e <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8009170:	2002      	movs	r0, #2
}
 8009172:	4770      	bx	lr
 8009174:	0800edb8 	.word	0x0800edb8
 8009178:	0800edb0 	.word	0x0800edb0

0800917c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800917c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009180:	2a01      	cmp	r2, #1
 8009182:	d033      	beq.n	80091ec <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8009184:	4603      	mov	r3, r0
 8009186:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009188:	681a      	ldr	r2, [r3, #0]
{
 800918a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800918c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009190:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009192:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009194:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8009196:	f020 0001 	bic.w	r0, r0, #1
 800919a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800919c:	6890      	ldr	r0, [r2, #8]
 800919e:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80091a2:	4301      	orrs	r1, r0
 80091a4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091a6:	b1f5      	cbz	r5, 80091e6 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091a8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091aa:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ac:	4810      	ldr	r0, [pc, #64]	; (80091f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80091ae:	4f11      	ldr	r7, [pc, #68]	; (80091f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091b0:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091b4:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091b6:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091b8:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80091ba:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80091bc:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091be:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091c0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091c2:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091c6:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ca:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80091ce:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80091d0:	2520      	movs	r5, #32
 80091d2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091d6:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80091d8:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80091dc:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80091de:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80091e2:	bcf0      	pop	{r4, r5, r6, r7}
 80091e4:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80091e6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80091e8:	4608      	mov	r0, r1
 80091ea:	e7ee      	b.n	80091ca <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80091ec:	2002      	movs	r0, #2
}
 80091ee:	4770      	bx	lr
 80091f0:	0800edb8 	.word	0x0800edb8
 80091f4:	0800edb0 	.word	0x0800edb0

080091f8 <atof>:
 80091f8:	2100      	movs	r1, #0
 80091fa:	f001 bb7f 	b.w	800a8fc <strtod>

080091fe <atoi>:
 80091fe:	220a      	movs	r2, #10
 8009200:	2100      	movs	r1, #0
 8009202:	f001 bc0b 	b.w	800aa1c <strtol>
	...

08009208 <__errno>:
 8009208:	4b01      	ldr	r3, [pc, #4]	; (8009210 <__errno+0x8>)
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	2000002c 	.word	0x2000002c

08009214 <__libc_init_array>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	4d0d      	ldr	r5, [pc, #52]	; (800924c <__libc_init_array+0x38>)
 8009218:	4c0d      	ldr	r4, [pc, #52]	; (8009250 <__libc_init_array+0x3c>)
 800921a:	1b64      	subs	r4, r4, r5
 800921c:	10a4      	asrs	r4, r4, #2
 800921e:	2600      	movs	r6, #0
 8009220:	42a6      	cmp	r6, r4
 8009222:	d109      	bne.n	8009238 <__libc_init_array+0x24>
 8009224:	4d0b      	ldr	r5, [pc, #44]	; (8009254 <__libc_init_array+0x40>)
 8009226:	4c0c      	ldr	r4, [pc, #48]	; (8009258 <__libc_init_array+0x44>)
 8009228:	f004 fbea 	bl	800da00 <_init>
 800922c:	1b64      	subs	r4, r4, r5
 800922e:	10a4      	asrs	r4, r4, #2
 8009230:	2600      	movs	r6, #0
 8009232:	42a6      	cmp	r6, r4
 8009234:	d105      	bne.n	8009242 <__libc_init_array+0x2e>
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	f855 3b04 	ldr.w	r3, [r5], #4
 800923c:	4798      	blx	r3
 800923e:	3601      	adds	r6, #1
 8009240:	e7ee      	b.n	8009220 <__libc_init_array+0xc>
 8009242:	f855 3b04 	ldr.w	r3, [r5], #4
 8009246:	4798      	blx	r3
 8009248:	3601      	adds	r6, #1
 800924a:	e7f2      	b.n	8009232 <__libc_init_array+0x1e>
 800924c:	0800f2b0 	.word	0x0800f2b0
 8009250:	0800f2b0 	.word	0x0800f2b0
 8009254:	0800f2b0 	.word	0x0800f2b0
 8009258:	0800f2b4 	.word	0x0800f2b4

0800925c <memcpy>:
 800925c:	440a      	add	r2, r1
 800925e:	4291      	cmp	r1, r2
 8009260:	f100 33ff 	add.w	r3, r0, #4294967295
 8009264:	d100      	bne.n	8009268 <memcpy+0xc>
 8009266:	4770      	bx	lr
 8009268:	b510      	push	{r4, lr}
 800926a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800926e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009272:	4291      	cmp	r1, r2
 8009274:	d1f9      	bne.n	800926a <memcpy+0xe>
 8009276:	bd10      	pop	{r4, pc}

08009278 <memmove>:
 8009278:	4288      	cmp	r0, r1
 800927a:	b510      	push	{r4, lr}
 800927c:	eb01 0402 	add.w	r4, r1, r2
 8009280:	d902      	bls.n	8009288 <memmove+0x10>
 8009282:	4284      	cmp	r4, r0
 8009284:	4623      	mov	r3, r4
 8009286:	d807      	bhi.n	8009298 <memmove+0x20>
 8009288:	1e43      	subs	r3, r0, #1
 800928a:	42a1      	cmp	r1, r4
 800928c:	d008      	beq.n	80092a0 <memmove+0x28>
 800928e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009296:	e7f8      	b.n	800928a <memmove+0x12>
 8009298:	4402      	add	r2, r0
 800929a:	4601      	mov	r1, r0
 800929c:	428a      	cmp	r2, r1
 800929e:	d100      	bne.n	80092a2 <memmove+0x2a>
 80092a0:	bd10      	pop	{r4, pc}
 80092a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092aa:	e7f7      	b.n	800929c <memmove+0x24>

080092ac <memset>:
 80092ac:	4402      	add	r2, r0
 80092ae:	4603      	mov	r3, r0
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d100      	bne.n	80092b6 <memset+0xa>
 80092b4:	4770      	bx	lr
 80092b6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ba:	e7f9      	b.n	80092b0 <memset+0x4>

080092bc <__cvt>:
 80092bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c0:	ec55 4b10 	vmov	r4, r5, d0
 80092c4:	2d00      	cmp	r5, #0
 80092c6:	460e      	mov	r6, r1
 80092c8:	4619      	mov	r1, r3
 80092ca:	462b      	mov	r3, r5
 80092cc:	bfbb      	ittet	lt
 80092ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092d2:	461d      	movlt	r5, r3
 80092d4:	2300      	movge	r3, #0
 80092d6:	232d      	movlt	r3, #45	; 0x2d
 80092d8:	700b      	strb	r3, [r1, #0]
 80092da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092e0:	4691      	mov	r9, r2
 80092e2:	f023 0820 	bic.w	r8, r3, #32
 80092e6:	bfbc      	itt	lt
 80092e8:	4622      	movlt	r2, r4
 80092ea:	4614      	movlt	r4, r2
 80092ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092f0:	d005      	beq.n	80092fe <__cvt+0x42>
 80092f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092f6:	d100      	bne.n	80092fa <__cvt+0x3e>
 80092f8:	3601      	adds	r6, #1
 80092fa:	2102      	movs	r1, #2
 80092fc:	e000      	b.n	8009300 <__cvt+0x44>
 80092fe:	2103      	movs	r1, #3
 8009300:	ab03      	add	r3, sp, #12
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	ab02      	add	r3, sp, #8
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	ec45 4b10 	vmov	d0, r4, r5
 800930c:	4653      	mov	r3, sl
 800930e:	4632      	mov	r2, r6
 8009310:	f001 fcda 	bl	800acc8 <_dtoa_r>
 8009314:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009318:	4607      	mov	r7, r0
 800931a:	d102      	bne.n	8009322 <__cvt+0x66>
 800931c:	f019 0f01 	tst.w	r9, #1
 8009320:	d022      	beq.n	8009368 <__cvt+0xac>
 8009322:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009326:	eb07 0906 	add.w	r9, r7, r6
 800932a:	d110      	bne.n	800934e <__cvt+0x92>
 800932c:	783b      	ldrb	r3, [r7, #0]
 800932e:	2b30      	cmp	r3, #48	; 0x30
 8009330:	d10a      	bne.n	8009348 <__cvt+0x8c>
 8009332:	2200      	movs	r2, #0
 8009334:	2300      	movs	r3, #0
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f7 fbed 	bl	8000b18 <__aeabi_dcmpeq>
 800933e:	b918      	cbnz	r0, 8009348 <__cvt+0x8c>
 8009340:	f1c6 0601 	rsb	r6, r6, #1
 8009344:	f8ca 6000 	str.w	r6, [sl]
 8009348:	f8da 3000 	ldr.w	r3, [sl]
 800934c:	4499      	add	r9, r3
 800934e:	2200      	movs	r2, #0
 8009350:	2300      	movs	r3, #0
 8009352:	4620      	mov	r0, r4
 8009354:	4629      	mov	r1, r5
 8009356:	f7f7 fbdf 	bl	8000b18 <__aeabi_dcmpeq>
 800935a:	b108      	cbz	r0, 8009360 <__cvt+0xa4>
 800935c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009360:	2230      	movs	r2, #48	; 0x30
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	454b      	cmp	r3, r9
 8009366:	d307      	bcc.n	8009378 <__cvt+0xbc>
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800936c:	1bdb      	subs	r3, r3, r7
 800936e:	4638      	mov	r0, r7
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	b004      	add	sp, #16
 8009374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009378:	1c59      	adds	r1, r3, #1
 800937a:	9103      	str	r1, [sp, #12]
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	e7f0      	b.n	8009362 <__cvt+0xa6>

08009380 <__exponent>:
 8009380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009382:	4603      	mov	r3, r0
 8009384:	2900      	cmp	r1, #0
 8009386:	bfb8      	it	lt
 8009388:	4249      	neglt	r1, r1
 800938a:	f803 2b02 	strb.w	r2, [r3], #2
 800938e:	bfb4      	ite	lt
 8009390:	222d      	movlt	r2, #45	; 0x2d
 8009392:	222b      	movge	r2, #43	; 0x2b
 8009394:	2909      	cmp	r1, #9
 8009396:	7042      	strb	r2, [r0, #1]
 8009398:	dd2a      	ble.n	80093f0 <__exponent+0x70>
 800939a:	f10d 0407 	add.w	r4, sp, #7
 800939e:	46a4      	mov	ip, r4
 80093a0:	270a      	movs	r7, #10
 80093a2:	46a6      	mov	lr, r4
 80093a4:	460a      	mov	r2, r1
 80093a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80093aa:	fb07 1516 	mls	r5, r7, r6, r1
 80093ae:	3530      	adds	r5, #48	; 0x30
 80093b0:	2a63      	cmp	r2, #99	; 0x63
 80093b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80093b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80093ba:	4631      	mov	r1, r6
 80093bc:	dcf1      	bgt.n	80093a2 <__exponent+0x22>
 80093be:	3130      	adds	r1, #48	; 0x30
 80093c0:	f1ae 0502 	sub.w	r5, lr, #2
 80093c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093c8:	1c44      	adds	r4, r0, #1
 80093ca:	4629      	mov	r1, r5
 80093cc:	4561      	cmp	r1, ip
 80093ce:	d30a      	bcc.n	80093e6 <__exponent+0x66>
 80093d0:	f10d 0209 	add.w	r2, sp, #9
 80093d4:	eba2 020e 	sub.w	r2, r2, lr
 80093d8:	4565      	cmp	r5, ip
 80093da:	bf88      	it	hi
 80093dc:	2200      	movhi	r2, #0
 80093de:	4413      	add	r3, r2
 80093e0:	1a18      	subs	r0, r3, r0
 80093e2:	b003      	add	sp, #12
 80093e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80093ee:	e7ed      	b.n	80093cc <__exponent+0x4c>
 80093f0:	2330      	movs	r3, #48	; 0x30
 80093f2:	3130      	adds	r1, #48	; 0x30
 80093f4:	7083      	strb	r3, [r0, #2]
 80093f6:	70c1      	strb	r1, [r0, #3]
 80093f8:	1d03      	adds	r3, r0, #4
 80093fa:	e7f1      	b.n	80093e0 <__exponent+0x60>

080093fc <_printf_float>:
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	ed2d 8b02 	vpush	{d8}
 8009404:	b08d      	sub	sp, #52	; 0x34
 8009406:	460c      	mov	r4, r1
 8009408:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800940c:	4616      	mov	r6, r2
 800940e:	461f      	mov	r7, r3
 8009410:	4605      	mov	r5, r0
 8009412:	f002 ff6b 	bl	800c2ec <_localeconv_r>
 8009416:	f8d0 a000 	ldr.w	sl, [r0]
 800941a:	4650      	mov	r0, sl
 800941c:	f7f6 ff00 	bl	8000220 <strlen>
 8009420:	2300      	movs	r3, #0
 8009422:	930a      	str	r3, [sp, #40]	; 0x28
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	9305      	str	r3, [sp, #20]
 8009428:	f8d8 3000 	ldr.w	r3, [r8]
 800942c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009430:	3307      	adds	r3, #7
 8009432:	f023 0307 	bic.w	r3, r3, #7
 8009436:	f103 0208 	add.w	r2, r3, #8
 800943a:	f8c8 2000 	str.w	r2, [r8]
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009446:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800944a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	f8cd 8018 	str.w	r8, [sp, #24]
 8009454:	ee08 0a10 	vmov	s16, r0
 8009458:	4b9f      	ldr	r3, [pc, #636]	; (80096d8 <_printf_float+0x2dc>)
 800945a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800945e:	f04f 32ff 	mov.w	r2, #4294967295
 8009462:	f7f7 fb8b 	bl	8000b7c <__aeabi_dcmpun>
 8009466:	bb88      	cbnz	r0, 80094cc <_printf_float+0xd0>
 8009468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800946c:	4b9a      	ldr	r3, [pc, #616]	; (80096d8 <_printf_float+0x2dc>)
 800946e:	f04f 32ff 	mov.w	r2, #4294967295
 8009472:	f7f7 fb65 	bl	8000b40 <__aeabi_dcmple>
 8009476:	bb48      	cbnz	r0, 80094cc <_printf_float+0xd0>
 8009478:	2200      	movs	r2, #0
 800947a:	2300      	movs	r3, #0
 800947c:	4640      	mov	r0, r8
 800947e:	4649      	mov	r1, r9
 8009480:	f7f7 fb54 	bl	8000b2c <__aeabi_dcmplt>
 8009484:	b110      	cbz	r0, 800948c <_printf_float+0x90>
 8009486:	232d      	movs	r3, #45	; 0x2d
 8009488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948c:	4b93      	ldr	r3, [pc, #588]	; (80096dc <_printf_float+0x2e0>)
 800948e:	4894      	ldr	r0, [pc, #592]	; (80096e0 <_printf_float+0x2e4>)
 8009490:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009494:	bf94      	ite	ls
 8009496:	4698      	movls	r8, r3
 8009498:	4680      	movhi	r8, r0
 800949a:	2303      	movs	r3, #3
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	9b05      	ldr	r3, [sp, #20]
 80094a0:	f023 0204 	bic.w	r2, r3, #4
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	f04f 0900 	mov.w	r9, #0
 80094aa:	9700      	str	r7, [sp, #0]
 80094ac:	4633      	mov	r3, r6
 80094ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80094b0:	4621      	mov	r1, r4
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f9d8 	bl	8009868 <_printf_common>
 80094b8:	3001      	adds	r0, #1
 80094ba:	f040 8090 	bne.w	80095de <_printf_float+0x1e2>
 80094be:	f04f 30ff 	mov.w	r0, #4294967295
 80094c2:	b00d      	add	sp, #52	; 0x34
 80094c4:	ecbd 8b02 	vpop	{d8}
 80094c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094cc:	4642      	mov	r2, r8
 80094ce:	464b      	mov	r3, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	f7f7 fb52 	bl	8000b7c <__aeabi_dcmpun>
 80094d8:	b140      	cbz	r0, 80094ec <_printf_float+0xf0>
 80094da:	464b      	mov	r3, r9
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfbc      	itt	lt
 80094e0:	232d      	movlt	r3, #45	; 0x2d
 80094e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094e6:	487f      	ldr	r0, [pc, #508]	; (80096e4 <_printf_float+0x2e8>)
 80094e8:	4b7f      	ldr	r3, [pc, #508]	; (80096e8 <_printf_float+0x2ec>)
 80094ea:	e7d1      	b.n	8009490 <_printf_float+0x94>
 80094ec:	6863      	ldr	r3, [r4, #4]
 80094ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094f2:	9206      	str	r2, [sp, #24]
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	d13f      	bne.n	8009578 <_printf_float+0x17c>
 80094f8:	2306      	movs	r3, #6
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	9b05      	ldr	r3, [sp, #20]
 80094fe:	6861      	ldr	r1, [r4, #4]
 8009500:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009504:	2300      	movs	r3, #0
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	ab0a      	add	r3, sp, #40	; 0x28
 800950a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800950e:	ab09      	add	r3, sp, #36	; 0x24
 8009510:	ec49 8b10 	vmov	d0, r8, r9
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	6022      	str	r2, [r4, #0]
 8009518:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800951c:	4628      	mov	r0, r5
 800951e:	f7ff fecd 	bl	80092bc <__cvt>
 8009522:	9b06      	ldr	r3, [sp, #24]
 8009524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009526:	2b47      	cmp	r3, #71	; 0x47
 8009528:	4680      	mov	r8, r0
 800952a:	d108      	bne.n	800953e <_printf_float+0x142>
 800952c:	1cc8      	adds	r0, r1, #3
 800952e:	db02      	blt.n	8009536 <_printf_float+0x13a>
 8009530:	6863      	ldr	r3, [r4, #4]
 8009532:	4299      	cmp	r1, r3
 8009534:	dd41      	ble.n	80095ba <_printf_float+0x1be>
 8009536:	f1ab 0b02 	sub.w	fp, fp, #2
 800953a:	fa5f fb8b 	uxtb.w	fp, fp
 800953e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009542:	d820      	bhi.n	8009586 <_printf_float+0x18a>
 8009544:	3901      	subs	r1, #1
 8009546:	465a      	mov	r2, fp
 8009548:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800954c:	9109      	str	r1, [sp, #36]	; 0x24
 800954e:	f7ff ff17 	bl	8009380 <__exponent>
 8009552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009554:	1813      	adds	r3, r2, r0
 8009556:	2a01      	cmp	r2, #1
 8009558:	4681      	mov	r9, r0
 800955a:	6123      	str	r3, [r4, #16]
 800955c:	dc02      	bgt.n	8009564 <_printf_float+0x168>
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	07d2      	lsls	r2, r2, #31
 8009562:	d501      	bpl.n	8009568 <_printf_float+0x16c>
 8009564:	3301      	adds	r3, #1
 8009566:	6123      	str	r3, [r4, #16]
 8009568:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800956c:	2b00      	cmp	r3, #0
 800956e:	d09c      	beq.n	80094aa <_printf_float+0xae>
 8009570:	232d      	movs	r3, #45	; 0x2d
 8009572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009576:	e798      	b.n	80094aa <_printf_float+0xae>
 8009578:	9a06      	ldr	r2, [sp, #24]
 800957a:	2a47      	cmp	r2, #71	; 0x47
 800957c:	d1be      	bne.n	80094fc <_printf_float+0x100>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1bc      	bne.n	80094fc <_printf_float+0x100>
 8009582:	2301      	movs	r3, #1
 8009584:	e7b9      	b.n	80094fa <_printf_float+0xfe>
 8009586:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800958a:	d118      	bne.n	80095be <_printf_float+0x1c2>
 800958c:	2900      	cmp	r1, #0
 800958e:	6863      	ldr	r3, [r4, #4]
 8009590:	dd0b      	ble.n	80095aa <_printf_float+0x1ae>
 8009592:	6121      	str	r1, [r4, #16]
 8009594:	b913      	cbnz	r3, 800959c <_printf_float+0x1a0>
 8009596:	6822      	ldr	r2, [r4, #0]
 8009598:	07d0      	lsls	r0, r2, #31
 800959a:	d502      	bpl.n	80095a2 <_printf_float+0x1a6>
 800959c:	3301      	adds	r3, #1
 800959e:	440b      	add	r3, r1
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80095a4:	f04f 0900 	mov.w	r9, #0
 80095a8:	e7de      	b.n	8009568 <_printf_float+0x16c>
 80095aa:	b913      	cbnz	r3, 80095b2 <_printf_float+0x1b6>
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	07d2      	lsls	r2, r2, #31
 80095b0:	d501      	bpl.n	80095b6 <_printf_float+0x1ba>
 80095b2:	3302      	adds	r3, #2
 80095b4:	e7f4      	b.n	80095a0 <_printf_float+0x1a4>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e7f2      	b.n	80095a0 <_printf_float+0x1a4>
 80095ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80095be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c0:	4299      	cmp	r1, r3
 80095c2:	db05      	blt.n	80095d0 <_printf_float+0x1d4>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	6121      	str	r1, [r4, #16]
 80095c8:	07d8      	lsls	r0, r3, #31
 80095ca:	d5ea      	bpl.n	80095a2 <_printf_float+0x1a6>
 80095cc:	1c4b      	adds	r3, r1, #1
 80095ce:	e7e7      	b.n	80095a0 <_printf_float+0x1a4>
 80095d0:	2900      	cmp	r1, #0
 80095d2:	bfd4      	ite	le
 80095d4:	f1c1 0202 	rsble	r2, r1, #2
 80095d8:	2201      	movgt	r2, #1
 80095da:	4413      	add	r3, r2
 80095dc:	e7e0      	b.n	80095a0 <_printf_float+0x1a4>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	055a      	lsls	r2, r3, #21
 80095e2:	d407      	bmi.n	80095f4 <_printf_float+0x1f8>
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	4642      	mov	r2, r8
 80095e8:	4631      	mov	r1, r6
 80095ea:	4628      	mov	r0, r5
 80095ec:	47b8      	blx	r7
 80095ee:	3001      	adds	r0, #1
 80095f0:	d12c      	bne.n	800964c <_printf_float+0x250>
 80095f2:	e764      	b.n	80094be <_printf_float+0xc2>
 80095f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095f8:	f240 80e0 	bls.w	80097bc <_printf_float+0x3c0>
 80095fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009600:	2200      	movs	r2, #0
 8009602:	2300      	movs	r3, #0
 8009604:	f7f7 fa88 	bl	8000b18 <__aeabi_dcmpeq>
 8009608:	2800      	cmp	r0, #0
 800960a:	d034      	beq.n	8009676 <_printf_float+0x27a>
 800960c:	4a37      	ldr	r2, [pc, #220]	; (80096ec <_printf_float+0x2f0>)
 800960e:	2301      	movs	r3, #1
 8009610:	4631      	mov	r1, r6
 8009612:	4628      	mov	r0, r5
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f af51 	beq.w	80094be <_printf_float+0xc2>
 800961c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009620:	429a      	cmp	r2, r3
 8009622:	db02      	blt.n	800962a <_printf_float+0x22e>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	07d8      	lsls	r0, r3, #31
 8009628:	d510      	bpl.n	800964c <_printf_float+0x250>
 800962a:	ee18 3a10 	vmov	r3, s16
 800962e:	4652      	mov	r2, sl
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f af41 	beq.w	80094be <_printf_float+0xc2>
 800963c:	f04f 0800 	mov.w	r8, #0
 8009640:	f104 091a 	add.w	r9, r4, #26
 8009644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009646:	3b01      	subs	r3, #1
 8009648:	4543      	cmp	r3, r8
 800964a:	dc09      	bgt.n	8009660 <_printf_float+0x264>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	079b      	lsls	r3, r3, #30
 8009650:	f100 8105 	bmi.w	800985e <_printf_float+0x462>
 8009654:	68e0      	ldr	r0, [r4, #12]
 8009656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009658:	4298      	cmp	r0, r3
 800965a:	bfb8      	it	lt
 800965c:	4618      	movlt	r0, r3
 800965e:	e730      	b.n	80094c2 <_printf_float+0xc6>
 8009660:	2301      	movs	r3, #1
 8009662:	464a      	mov	r2, r9
 8009664:	4631      	mov	r1, r6
 8009666:	4628      	mov	r0, r5
 8009668:	47b8      	blx	r7
 800966a:	3001      	adds	r0, #1
 800966c:	f43f af27 	beq.w	80094be <_printf_float+0xc2>
 8009670:	f108 0801 	add.w	r8, r8, #1
 8009674:	e7e6      	b.n	8009644 <_printf_float+0x248>
 8009676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009678:	2b00      	cmp	r3, #0
 800967a:	dc39      	bgt.n	80096f0 <_printf_float+0x2f4>
 800967c:	4a1b      	ldr	r2, [pc, #108]	; (80096ec <_printf_float+0x2f0>)
 800967e:	2301      	movs	r3, #1
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	47b8      	blx	r7
 8009686:	3001      	adds	r0, #1
 8009688:	f43f af19 	beq.w	80094be <_printf_float+0xc2>
 800968c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009690:	4313      	orrs	r3, r2
 8009692:	d102      	bne.n	800969a <_printf_float+0x29e>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	07d9      	lsls	r1, r3, #31
 8009698:	d5d8      	bpl.n	800964c <_printf_float+0x250>
 800969a:	ee18 3a10 	vmov	r3, s16
 800969e:	4652      	mov	r2, sl
 80096a0:	4631      	mov	r1, r6
 80096a2:	4628      	mov	r0, r5
 80096a4:	47b8      	blx	r7
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f af09 	beq.w	80094be <_printf_float+0xc2>
 80096ac:	f04f 0900 	mov.w	r9, #0
 80096b0:	f104 0a1a 	add.w	sl, r4, #26
 80096b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b6:	425b      	negs	r3, r3
 80096b8:	454b      	cmp	r3, r9
 80096ba:	dc01      	bgt.n	80096c0 <_printf_float+0x2c4>
 80096bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096be:	e792      	b.n	80095e6 <_printf_float+0x1ea>
 80096c0:	2301      	movs	r3, #1
 80096c2:	4652      	mov	r2, sl
 80096c4:	4631      	mov	r1, r6
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	f43f aef7 	beq.w	80094be <_printf_float+0xc2>
 80096d0:	f109 0901 	add.w	r9, r9, #1
 80096d4:	e7ee      	b.n	80096b4 <_printf_float+0x2b8>
 80096d6:	bf00      	nop
 80096d8:	7fefffff 	.word	0x7fefffff
 80096dc:	0800edc4 	.word	0x0800edc4
 80096e0:	0800edc8 	.word	0x0800edc8
 80096e4:	0800edd0 	.word	0x0800edd0
 80096e8:	0800edcc 	.word	0x0800edcc
 80096ec:	0800edd4 	.word	0x0800edd4
 80096f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096f4:	429a      	cmp	r2, r3
 80096f6:	bfa8      	it	ge
 80096f8:	461a      	movge	r2, r3
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	4691      	mov	r9, r2
 80096fe:	dc37      	bgt.n	8009770 <_printf_float+0x374>
 8009700:	f04f 0b00 	mov.w	fp, #0
 8009704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009708:	f104 021a 	add.w	r2, r4, #26
 800970c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800970e:	9305      	str	r3, [sp, #20]
 8009710:	eba3 0309 	sub.w	r3, r3, r9
 8009714:	455b      	cmp	r3, fp
 8009716:	dc33      	bgt.n	8009780 <_printf_float+0x384>
 8009718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800971c:	429a      	cmp	r2, r3
 800971e:	db3b      	blt.n	8009798 <_printf_float+0x39c>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	07da      	lsls	r2, r3, #31
 8009724:	d438      	bmi.n	8009798 <_printf_float+0x39c>
 8009726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009728:	9b05      	ldr	r3, [sp, #20]
 800972a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	eba2 0901 	sub.w	r9, r2, r1
 8009732:	4599      	cmp	r9, r3
 8009734:	bfa8      	it	ge
 8009736:	4699      	movge	r9, r3
 8009738:	f1b9 0f00 	cmp.w	r9, #0
 800973c:	dc35      	bgt.n	80097aa <_printf_float+0x3ae>
 800973e:	f04f 0800 	mov.w	r8, #0
 8009742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009746:	f104 0a1a 	add.w	sl, r4, #26
 800974a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800974e:	1a9b      	subs	r3, r3, r2
 8009750:	eba3 0309 	sub.w	r3, r3, r9
 8009754:	4543      	cmp	r3, r8
 8009756:	f77f af79 	ble.w	800964c <_printf_float+0x250>
 800975a:	2301      	movs	r3, #1
 800975c:	4652      	mov	r2, sl
 800975e:	4631      	mov	r1, r6
 8009760:	4628      	mov	r0, r5
 8009762:	47b8      	blx	r7
 8009764:	3001      	adds	r0, #1
 8009766:	f43f aeaa 	beq.w	80094be <_printf_float+0xc2>
 800976a:	f108 0801 	add.w	r8, r8, #1
 800976e:	e7ec      	b.n	800974a <_printf_float+0x34e>
 8009770:	4613      	mov	r3, r2
 8009772:	4631      	mov	r1, r6
 8009774:	4642      	mov	r2, r8
 8009776:	4628      	mov	r0, r5
 8009778:	47b8      	blx	r7
 800977a:	3001      	adds	r0, #1
 800977c:	d1c0      	bne.n	8009700 <_printf_float+0x304>
 800977e:	e69e      	b.n	80094be <_printf_float+0xc2>
 8009780:	2301      	movs	r3, #1
 8009782:	4631      	mov	r1, r6
 8009784:	4628      	mov	r0, r5
 8009786:	9205      	str	r2, [sp, #20]
 8009788:	47b8      	blx	r7
 800978a:	3001      	adds	r0, #1
 800978c:	f43f ae97 	beq.w	80094be <_printf_float+0xc2>
 8009790:	9a05      	ldr	r2, [sp, #20]
 8009792:	f10b 0b01 	add.w	fp, fp, #1
 8009796:	e7b9      	b.n	800970c <_printf_float+0x310>
 8009798:	ee18 3a10 	vmov	r3, s16
 800979c:	4652      	mov	r2, sl
 800979e:	4631      	mov	r1, r6
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b8      	blx	r7
 80097a4:	3001      	adds	r0, #1
 80097a6:	d1be      	bne.n	8009726 <_printf_float+0x32a>
 80097a8:	e689      	b.n	80094be <_printf_float+0xc2>
 80097aa:	9a05      	ldr	r2, [sp, #20]
 80097ac:	464b      	mov	r3, r9
 80097ae:	4442      	add	r2, r8
 80097b0:	4631      	mov	r1, r6
 80097b2:	4628      	mov	r0, r5
 80097b4:	47b8      	blx	r7
 80097b6:	3001      	adds	r0, #1
 80097b8:	d1c1      	bne.n	800973e <_printf_float+0x342>
 80097ba:	e680      	b.n	80094be <_printf_float+0xc2>
 80097bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097be:	2a01      	cmp	r2, #1
 80097c0:	dc01      	bgt.n	80097c6 <_printf_float+0x3ca>
 80097c2:	07db      	lsls	r3, r3, #31
 80097c4:	d538      	bpl.n	8009838 <_printf_float+0x43c>
 80097c6:	2301      	movs	r3, #1
 80097c8:	4642      	mov	r2, r8
 80097ca:	4631      	mov	r1, r6
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b8      	blx	r7
 80097d0:	3001      	adds	r0, #1
 80097d2:	f43f ae74 	beq.w	80094be <_printf_float+0xc2>
 80097d6:	ee18 3a10 	vmov	r3, s16
 80097da:	4652      	mov	r2, sl
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	f43f ae6b 	beq.w	80094be <_printf_float+0xc2>
 80097e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097ec:	2200      	movs	r2, #0
 80097ee:	2300      	movs	r3, #0
 80097f0:	f7f7 f992 	bl	8000b18 <__aeabi_dcmpeq>
 80097f4:	b9d8      	cbnz	r0, 800982e <_printf_float+0x432>
 80097f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f8:	f108 0201 	add.w	r2, r8, #1
 80097fc:	3b01      	subs	r3, #1
 80097fe:	4631      	mov	r1, r6
 8009800:	4628      	mov	r0, r5
 8009802:	47b8      	blx	r7
 8009804:	3001      	adds	r0, #1
 8009806:	d10e      	bne.n	8009826 <_printf_float+0x42a>
 8009808:	e659      	b.n	80094be <_printf_float+0xc2>
 800980a:	2301      	movs	r3, #1
 800980c:	4652      	mov	r2, sl
 800980e:	4631      	mov	r1, r6
 8009810:	4628      	mov	r0, r5
 8009812:	47b8      	blx	r7
 8009814:	3001      	adds	r0, #1
 8009816:	f43f ae52 	beq.w	80094be <_printf_float+0xc2>
 800981a:	f108 0801 	add.w	r8, r8, #1
 800981e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009820:	3b01      	subs	r3, #1
 8009822:	4543      	cmp	r3, r8
 8009824:	dcf1      	bgt.n	800980a <_printf_float+0x40e>
 8009826:	464b      	mov	r3, r9
 8009828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800982c:	e6dc      	b.n	80095e8 <_printf_float+0x1ec>
 800982e:	f04f 0800 	mov.w	r8, #0
 8009832:	f104 0a1a 	add.w	sl, r4, #26
 8009836:	e7f2      	b.n	800981e <_printf_float+0x422>
 8009838:	2301      	movs	r3, #1
 800983a:	4642      	mov	r2, r8
 800983c:	e7df      	b.n	80097fe <_printf_float+0x402>
 800983e:	2301      	movs	r3, #1
 8009840:	464a      	mov	r2, r9
 8009842:	4631      	mov	r1, r6
 8009844:	4628      	mov	r0, r5
 8009846:	47b8      	blx	r7
 8009848:	3001      	adds	r0, #1
 800984a:	f43f ae38 	beq.w	80094be <_printf_float+0xc2>
 800984e:	f108 0801 	add.w	r8, r8, #1
 8009852:	68e3      	ldr	r3, [r4, #12]
 8009854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009856:	1a5b      	subs	r3, r3, r1
 8009858:	4543      	cmp	r3, r8
 800985a:	dcf0      	bgt.n	800983e <_printf_float+0x442>
 800985c:	e6fa      	b.n	8009654 <_printf_float+0x258>
 800985e:	f04f 0800 	mov.w	r8, #0
 8009862:	f104 0919 	add.w	r9, r4, #25
 8009866:	e7f4      	b.n	8009852 <_printf_float+0x456>

08009868 <_printf_common>:
 8009868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	4616      	mov	r6, r2
 800986e:	4699      	mov	r9, r3
 8009870:	688a      	ldr	r2, [r1, #8]
 8009872:	690b      	ldr	r3, [r1, #16]
 8009874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009878:	4293      	cmp	r3, r2
 800987a:	bfb8      	it	lt
 800987c:	4613      	movlt	r3, r2
 800987e:	6033      	str	r3, [r6, #0]
 8009880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009884:	4607      	mov	r7, r0
 8009886:	460c      	mov	r4, r1
 8009888:	b10a      	cbz	r2, 800988e <_printf_common+0x26>
 800988a:	3301      	adds	r3, #1
 800988c:	6033      	str	r3, [r6, #0]
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	0699      	lsls	r1, r3, #26
 8009892:	bf42      	ittt	mi
 8009894:	6833      	ldrmi	r3, [r6, #0]
 8009896:	3302      	addmi	r3, #2
 8009898:	6033      	strmi	r3, [r6, #0]
 800989a:	6825      	ldr	r5, [r4, #0]
 800989c:	f015 0506 	ands.w	r5, r5, #6
 80098a0:	d106      	bne.n	80098b0 <_printf_common+0x48>
 80098a2:	f104 0a19 	add.w	sl, r4, #25
 80098a6:	68e3      	ldr	r3, [r4, #12]
 80098a8:	6832      	ldr	r2, [r6, #0]
 80098aa:	1a9b      	subs	r3, r3, r2
 80098ac:	42ab      	cmp	r3, r5
 80098ae:	dc26      	bgt.n	80098fe <_printf_common+0x96>
 80098b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098b4:	1e13      	subs	r3, r2, #0
 80098b6:	6822      	ldr	r2, [r4, #0]
 80098b8:	bf18      	it	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	0692      	lsls	r2, r2, #26
 80098be:	d42b      	bmi.n	8009918 <_printf_common+0xb0>
 80098c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098c4:	4649      	mov	r1, r9
 80098c6:	4638      	mov	r0, r7
 80098c8:	47c0      	blx	r8
 80098ca:	3001      	adds	r0, #1
 80098cc:	d01e      	beq.n	800990c <_printf_common+0xa4>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	68e5      	ldr	r5, [r4, #12]
 80098d2:	6832      	ldr	r2, [r6, #0]
 80098d4:	f003 0306 	and.w	r3, r3, #6
 80098d8:	2b04      	cmp	r3, #4
 80098da:	bf08      	it	eq
 80098dc:	1aad      	subeq	r5, r5, r2
 80098de:	68a3      	ldr	r3, [r4, #8]
 80098e0:	6922      	ldr	r2, [r4, #16]
 80098e2:	bf0c      	ite	eq
 80098e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098e8:	2500      	movne	r5, #0
 80098ea:	4293      	cmp	r3, r2
 80098ec:	bfc4      	itt	gt
 80098ee:	1a9b      	subgt	r3, r3, r2
 80098f0:	18ed      	addgt	r5, r5, r3
 80098f2:	2600      	movs	r6, #0
 80098f4:	341a      	adds	r4, #26
 80098f6:	42b5      	cmp	r5, r6
 80098f8:	d11a      	bne.n	8009930 <_printf_common+0xc8>
 80098fa:	2000      	movs	r0, #0
 80098fc:	e008      	b.n	8009910 <_printf_common+0xa8>
 80098fe:	2301      	movs	r3, #1
 8009900:	4652      	mov	r2, sl
 8009902:	4649      	mov	r1, r9
 8009904:	4638      	mov	r0, r7
 8009906:	47c0      	blx	r8
 8009908:	3001      	adds	r0, #1
 800990a:	d103      	bne.n	8009914 <_printf_common+0xac>
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009914:	3501      	adds	r5, #1
 8009916:	e7c6      	b.n	80098a6 <_printf_common+0x3e>
 8009918:	18e1      	adds	r1, r4, r3
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	2030      	movs	r0, #48	; 0x30
 800991e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009922:	4422      	add	r2, r4
 8009924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800992c:	3302      	adds	r3, #2
 800992e:	e7c7      	b.n	80098c0 <_printf_common+0x58>
 8009930:	2301      	movs	r3, #1
 8009932:	4622      	mov	r2, r4
 8009934:	4649      	mov	r1, r9
 8009936:	4638      	mov	r0, r7
 8009938:	47c0      	blx	r8
 800993a:	3001      	adds	r0, #1
 800993c:	d0e6      	beq.n	800990c <_printf_common+0xa4>
 800993e:	3601      	adds	r6, #1
 8009940:	e7d9      	b.n	80098f6 <_printf_common+0x8e>
	...

08009944 <_printf_i>:
 8009944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	4691      	mov	r9, r2
 800994c:	7e27      	ldrb	r7, [r4, #24]
 800994e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009950:	2f78      	cmp	r7, #120	; 0x78
 8009952:	4680      	mov	r8, r0
 8009954:	469a      	mov	sl, r3
 8009956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800995a:	d807      	bhi.n	800996c <_printf_i+0x28>
 800995c:	2f62      	cmp	r7, #98	; 0x62
 800995e:	d80a      	bhi.n	8009976 <_printf_i+0x32>
 8009960:	2f00      	cmp	r7, #0
 8009962:	f000 80d8 	beq.w	8009b16 <_printf_i+0x1d2>
 8009966:	2f58      	cmp	r7, #88	; 0x58
 8009968:	f000 80a3 	beq.w	8009ab2 <_printf_i+0x16e>
 800996c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009974:	e03a      	b.n	80099ec <_printf_i+0xa8>
 8009976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800997a:	2b15      	cmp	r3, #21
 800997c:	d8f6      	bhi.n	800996c <_printf_i+0x28>
 800997e:	a001      	add	r0, pc, #4	; (adr r0, 8009984 <_printf_i+0x40>)
 8009980:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009984:	080099dd 	.word	0x080099dd
 8009988:	080099f1 	.word	0x080099f1
 800998c:	0800996d 	.word	0x0800996d
 8009990:	0800996d 	.word	0x0800996d
 8009994:	0800996d 	.word	0x0800996d
 8009998:	0800996d 	.word	0x0800996d
 800999c:	080099f1 	.word	0x080099f1
 80099a0:	0800996d 	.word	0x0800996d
 80099a4:	0800996d 	.word	0x0800996d
 80099a8:	0800996d 	.word	0x0800996d
 80099ac:	0800996d 	.word	0x0800996d
 80099b0:	08009afd 	.word	0x08009afd
 80099b4:	08009a21 	.word	0x08009a21
 80099b8:	08009adf 	.word	0x08009adf
 80099bc:	0800996d 	.word	0x0800996d
 80099c0:	0800996d 	.word	0x0800996d
 80099c4:	08009b1f 	.word	0x08009b1f
 80099c8:	0800996d 	.word	0x0800996d
 80099cc:	08009a21 	.word	0x08009a21
 80099d0:	0800996d 	.word	0x0800996d
 80099d4:	0800996d 	.word	0x0800996d
 80099d8:	08009ae7 	.word	0x08009ae7
 80099dc:	680b      	ldr	r3, [r1, #0]
 80099de:	1d1a      	adds	r2, r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	600a      	str	r2, [r1, #0]
 80099e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099ec:	2301      	movs	r3, #1
 80099ee:	e0a3      	b.n	8009b38 <_printf_i+0x1f4>
 80099f0:	6825      	ldr	r5, [r4, #0]
 80099f2:	6808      	ldr	r0, [r1, #0]
 80099f4:	062e      	lsls	r6, r5, #24
 80099f6:	f100 0304 	add.w	r3, r0, #4
 80099fa:	d50a      	bpl.n	8009a12 <_printf_i+0xce>
 80099fc:	6805      	ldr	r5, [r0, #0]
 80099fe:	600b      	str	r3, [r1, #0]
 8009a00:	2d00      	cmp	r5, #0
 8009a02:	da03      	bge.n	8009a0c <_printf_i+0xc8>
 8009a04:	232d      	movs	r3, #45	; 0x2d
 8009a06:	426d      	negs	r5, r5
 8009a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a0c:	485e      	ldr	r0, [pc, #376]	; (8009b88 <_printf_i+0x244>)
 8009a0e:	230a      	movs	r3, #10
 8009a10:	e019      	b.n	8009a46 <_printf_i+0x102>
 8009a12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a16:	6805      	ldr	r5, [r0, #0]
 8009a18:	600b      	str	r3, [r1, #0]
 8009a1a:	bf18      	it	ne
 8009a1c:	b22d      	sxthne	r5, r5
 8009a1e:	e7ef      	b.n	8009a00 <_printf_i+0xbc>
 8009a20:	680b      	ldr	r3, [r1, #0]
 8009a22:	6825      	ldr	r5, [r4, #0]
 8009a24:	1d18      	adds	r0, r3, #4
 8009a26:	6008      	str	r0, [r1, #0]
 8009a28:	0628      	lsls	r0, r5, #24
 8009a2a:	d501      	bpl.n	8009a30 <_printf_i+0xec>
 8009a2c:	681d      	ldr	r5, [r3, #0]
 8009a2e:	e002      	b.n	8009a36 <_printf_i+0xf2>
 8009a30:	0669      	lsls	r1, r5, #25
 8009a32:	d5fb      	bpl.n	8009a2c <_printf_i+0xe8>
 8009a34:	881d      	ldrh	r5, [r3, #0]
 8009a36:	4854      	ldr	r0, [pc, #336]	; (8009b88 <_printf_i+0x244>)
 8009a38:	2f6f      	cmp	r7, #111	; 0x6f
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2308      	moveq	r3, #8
 8009a3e:	230a      	movne	r3, #10
 8009a40:	2100      	movs	r1, #0
 8009a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a46:	6866      	ldr	r6, [r4, #4]
 8009a48:	60a6      	str	r6, [r4, #8]
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	bfa2      	ittt	ge
 8009a4e:	6821      	ldrge	r1, [r4, #0]
 8009a50:	f021 0104 	bicge.w	r1, r1, #4
 8009a54:	6021      	strge	r1, [r4, #0]
 8009a56:	b90d      	cbnz	r5, 8009a5c <_printf_i+0x118>
 8009a58:	2e00      	cmp	r6, #0
 8009a5a:	d04d      	beq.n	8009af8 <_printf_i+0x1b4>
 8009a5c:	4616      	mov	r6, r2
 8009a5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a62:	fb03 5711 	mls	r7, r3, r1, r5
 8009a66:	5dc7      	ldrb	r7, [r0, r7]
 8009a68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a6c:	462f      	mov	r7, r5
 8009a6e:	42bb      	cmp	r3, r7
 8009a70:	460d      	mov	r5, r1
 8009a72:	d9f4      	bls.n	8009a5e <_printf_i+0x11a>
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d10b      	bne.n	8009a90 <_printf_i+0x14c>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	07df      	lsls	r7, r3, #31
 8009a7c:	d508      	bpl.n	8009a90 <_printf_i+0x14c>
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	6861      	ldr	r1, [r4, #4]
 8009a82:	4299      	cmp	r1, r3
 8009a84:	bfde      	ittt	le
 8009a86:	2330      	movle	r3, #48	; 0x30
 8009a88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a90:	1b92      	subs	r2, r2, r6
 8009a92:	6122      	str	r2, [r4, #16]
 8009a94:	f8cd a000 	str.w	sl, [sp]
 8009a98:	464b      	mov	r3, r9
 8009a9a:	aa03      	add	r2, sp, #12
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	f7ff fee2 	bl	8009868 <_printf_common>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d14c      	bne.n	8009b42 <_printf_i+0x1fe>
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	b004      	add	sp, #16
 8009aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab2:	4835      	ldr	r0, [pc, #212]	; (8009b88 <_printf_i+0x244>)
 8009ab4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	680e      	ldr	r6, [r1, #0]
 8009abc:	061f      	lsls	r7, r3, #24
 8009abe:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ac2:	600e      	str	r6, [r1, #0]
 8009ac4:	d514      	bpl.n	8009af0 <_printf_i+0x1ac>
 8009ac6:	07d9      	lsls	r1, r3, #31
 8009ac8:	bf44      	itt	mi
 8009aca:	f043 0320 	orrmi.w	r3, r3, #32
 8009ace:	6023      	strmi	r3, [r4, #0]
 8009ad0:	b91d      	cbnz	r5, 8009ada <_printf_i+0x196>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	f023 0320 	bic.w	r3, r3, #32
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	2310      	movs	r3, #16
 8009adc:	e7b0      	b.n	8009a40 <_printf_i+0xfc>
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	f043 0320 	orr.w	r3, r3, #32
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	2378      	movs	r3, #120	; 0x78
 8009ae8:	4828      	ldr	r0, [pc, #160]	; (8009b8c <_printf_i+0x248>)
 8009aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aee:	e7e3      	b.n	8009ab8 <_printf_i+0x174>
 8009af0:	065e      	lsls	r6, r3, #25
 8009af2:	bf48      	it	mi
 8009af4:	b2ad      	uxthmi	r5, r5
 8009af6:	e7e6      	b.n	8009ac6 <_printf_i+0x182>
 8009af8:	4616      	mov	r6, r2
 8009afa:	e7bb      	b.n	8009a74 <_printf_i+0x130>
 8009afc:	680b      	ldr	r3, [r1, #0]
 8009afe:	6826      	ldr	r6, [r4, #0]
 8009b00:	6960      	ldr	r0, [r4, #20]
 8009b02:	1d1d      	adds	r5, r3, #4
 8009b04:	600d      	str	r5, [r1, #0]
 8009b06:	0635      	lsls	r5, r6, #24
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	d501      	bpl.n	8009b10 <_printf_i+0x1cc>
 8009b0c:	6018      	str	r0, [r3, #0]
 8009b0e:	e002      	b.n	8009b16 <_printf_i+0x1d2>
 8009b10:	0671      	lsls	r1, r6, #25
 8009b12:	d5fb      	bpl.n	8009b0c <_printf_i+0x1c8>
 8009b14:	8018      	strh	r0, [r3, #0]
 8009b16:	2300      	movs	r3, #0
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	4616      	mov	r6, r2
 8009b1c:	e7ba      	b.n	8009a94 <_printf_i+0x150>
 8009b1e:	680b      	ldr	r3, [r1, #0]
 8009b20:	1d1a      	adds	r2, r3, #4
 8009b22:	600a      	str	r2, [r1, #0]
 8009b24:	681e      	ldr	r6, [r3, #0]
 8009b26:	6862      	ldr	r2, [r4, #4]
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7f6 fb80 	bl	8000230 <memchr>
 8009b30:	b108      	cbz	r0, 8009b36 <_printf_i+0x1f2>
 8009b32:	1b80      	subs	r0, r0, r6
 8009b34:	6060      	str	r0, [r4, #4]
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	6123      	str	r3, [r4, #16]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b40:	e7a8      	b.n	8009a94 <_printf_i+0x150>
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	4632      	mov	r2, r6
 8009b46:	4649      	mov	r1, r9
 8009b48:	4640      	mov	r0, r8
 8009b4a:	47d0      	blx	sl
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d0ab      	beq.n	8009aa8 <_printf_i+0x164>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	079b      	lsls	r3, r3, #30
 8009b54:	d413      	bmi.n	8009b7e <_printf_i+0x23a>
 8009b56:	68e0      	ldr	r0, [r4, #12]
 8009b58:	9b03      	ldr	r3, [sp, #12]
 8009b5a:	4298      	cmp	r0, r3
 8009b5c:	bfb8      	it	lt
 8009b5e:	4618      	movlt	r0, r3
 8009b60:	e7a4      	b.n	8009aac <_printf_i+0x168>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4632      	mov	r2, r6
 8009b66:	4649      	mov	r1, r9
 8009b68:	4640      	mov	r0, r8
 8009b6a:	47d0      	blx	sl
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d09b      	beq.n	8009aa8 <_printf_i+0x164>
 8009b70:	3501      	adds	r5, #1
 8009b72:	68e3      	ldr	r3, [r4, #12]
 8009b74:	9903      	ldr	r1, [sp, #12]
 8009b76:	1a5b      	subs	r3, r3, r1
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	dcf2      	bgt.n	8009b62 <_printf_i+0x21e>
 8009b7c:	e7eb      	b.n	8009b56 <_printf_i+0x212>
 8009b7e:	2500      	movs	r5, #0
 8009b80:	f104 0619 	add.w	r6, r4, #25
 8009b84:	e7f5      	b.n	8009b72 <_printf_i+0x22e>
 8009b86:	bf00      	nop
 8009b88:	0800edd6 	.word	0x0800edd6
 8009b8c:	0800ede7 	.word	0x0800ede7

08009b90 <iprintf>:
 8009b90:	b40f      	push	{r0, r1, r2, r3}
 8009b92:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <iprintf+0x2c>)
 8009b94:	b513      	push	{r0, r1, r4, lr}
 8009b96:	681c      	ldr	r4, [r3, #0]
 8009b98:	b124      	cbz	r4, 8009ba4 <iprintf+0x14>
 8009b9a:	69a3      	ldr	r3, [r4, #24]
 8009b9c:	b913      	cbnz	r3, 8009ba4 <iprintf+0x14>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f001 ff98 	bl	800bad4 <__sinit>
 8009ba4:	ab05      	add	r3, sp, #20
 8009ba6:	9a04      	ldr	r2, [sp, #16]
 8009ba8:	68a1      	ldr	r1, [r4, #8]
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	4620      	mov	r0, r4
 8009bae:	f003 f9c1 	bl	800cf34 <_vfiprintf_r>
 8009bb2:	b002      	add	sp, #8
 8009bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb8:	b004      	add	sp, #16
 8009bba:	4770      	bx	lr
 8009bbc:	2000002c 	.word	0x2000002c

08009bc0 <_puts_r>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	460e      	mov	r6, r1
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	b118      	cbz	r0, 8009bd0 <_puts_r+0x10>
 8009bc8:	6983      	ldr	r3, [r0, #24]
 8009bca:	b90b      	cbnz	r3, 8009bd0 <_puts_r+0x10>
 8009bcc:	f001 ff82 	bl	800bad4 <__sinit>
 8009bd0:	69ab      	ldr	r3, [r5, #24]
 8009bd2:	68ac      	ldr	r4, [r5, #8]
 8009bd4:	b913      	cbnz	r3, 8009bdc <_puts_r+0x1c>
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f001 ff7c 	bl	800bad4 <__sinit>
 8009bdc:	4b2c      	ldr	r3, [pc, #176]	; (8009c90 <_puts_r+0xd0>)
 8009bde:	429c      	cmp	r4, r3
 8009be0:	d120      	bne.n	8009c24 <_puts_r+0x64>
 8009be2:	686c      	ldr	r4, [r5, #4]
 8009be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009be6:	07db      	lsls	r3, r3, #31
 8009be8:	d405      	bmi.n	8009bf6 <_puts_r+0x36>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	0598      	lsls	r0, r3, #22
 8009bee:	d402      	bmi.n	8009bf6 <_puts_r+0x36>
 8009bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bf2:	f002 fb80 	bl	800c2f6 <__retarget_lock_acquire_recursive>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	0719      	lsls	r1, r3, #28
 8009bfa:	d51d      	bpl.n	8009c38 <_puts_r+0x78>
 8009bfc:	6923      	ldr	r3, [r4, #16]
 8009bfe:	b1db      	cbz	r3, 8009c38 <_puts_r+0x78>
 8009c00:	3e01      	subs	r6, #1
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	60a3      	str	r3, [r4, #8]
 8009c0c:	bb39      	cbnz	r1, 8009c5e <_puts_r+0x9e>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	da38      	bge.n	8009c84 <_puts_r+0xc4>
 8009c12:	4622      	mov	r2, r4
 8009c14:	210a      	movs	r1, #10
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 ff0a 	bl	800aa30 <__swbuf_r>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d011      	beq.n	8009c44 <_puts_r+0x84>
 8009c20:	250a      	movs	r5, #10
 8009c22:	e011      	b.n	8009c48 <_puts_r+0x88>
 8009c24:	4b1b      	ldr	r3, [pc, #108]	; (8009c94 <_puts_r+0xd4>)
 8009c26:	429c      	cmp	r4, r3
 8009c28:	d101      	bne.n	8009c2e <_puts_r+0x6e>
 8009c2a:	68ac      	ldr	r4, [r5, #8]
 8009c2c:	e7da      	b.n	8009be4 <_puts_r+0x24>
 8009c2e:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <_puts_r+0xd8>)
 8009c30:	429c      	cmp	r4, r3
 8009c32:	bf08      	it	eq
 8009c34:	68ec      	ldreq	r4, [r5, #12]
 8009c36:	e7d5      	b.n	8009be4 <_puts_r+0x24>
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f000 ff4a 	bl	800aad4 <__swsetup_r>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d0dd      	beq.n	8009c00 <_puts_r+0x40>
 8009c44:	f04f 35ff 	mov.w	r5, #4294967295
 8009c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c4a:	07da      	lsls	r2, r3, #31
 8009c4c:	d405      	bmi.n	8009c5a <_puts_r+0x9a>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	059b      	lsls	r3, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_puts_r+0x9a>
 8009c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c56:	f002 fb4f 	bl	800c2f8 <__retarget_lock_release_recursive>
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da04      	bge.n	8009c6c <_puts_r+0xac>
 8009c62:	69a2      	ldr	r2, [r4, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	dc06      	bgt.n	8009c76 <_puts_r+0xb6>
 8009c68:	290a      	cmp	r1, #10
 8009c6a:	d004      	beq.n	8009c76 <_puts_r+0xb6>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	6022      	str	r2, [r4, #0]
 8009c72:	7019      	strb	r1, [r3, #0]
 8009c74:	e7c5      	b.n	8009c02 <_puts_r+0x42>
 8009c76:	4622      	mov	r2, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f000 fed9 	bl	800aa30 <__swbuf_r>
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d1bf      	bne.n	8009c02 <_puts_r+0x42>
 8009c82:	e7df      	b.n	8009c44 <_puts_r+0x84>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	250a      	movs	r5, #10
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	6022      	str	r2, [r4, #0]
 8009c8c:	701d      	strb	r5, [r3, #0]
 8009c8e:	e7db      	b.n	8009c48 <_puts_r+0x88>
 8009c90:	0800f000 	.word	0x0800f000
 8009c94:	0800f020 	.word	0x0800f020
 8009c98:	0800efe0 	.word	0x0800efe0

08009c9c <puts>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <puts+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f7ff bf8d 	b.w	8009bc0 <_puts_r>
 8009ca6:	bf00      	nop
 8009ca8:	2000002c 	.word	0x2000002c

08009cac <sulp>:
 8009cac:	b570      	push	{r4, r5, r6, lr}
 8009cae:	4604      	mov	r4, r0
 8009cb0:	460d      	mov	r5, r1
 8009cb2:	ec45 4b10 	vmov	d0, r4, r5
 8009cb6:	4616      	mov	r6, r2
 8009cb8:	f002 ff0a 	bl	800cad0 <__ulp>
 8009cbc:	ec51 0b10 	vmov	r0, r1, d0
 8009cc0:	b17e      	cbz	r6, 8009ce2 <sulp+0x36>
 8009cc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dd09      	ble.n	8009ce2 <sulp+0x36>
 8009cce:	051b      	lsls	r3, r3, #20
 8009cd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009cd4:	2400      	movs	r4, #0
 8009cd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009cda:	4622      	mov	r2, r4
 8009cdc:	462b      	mov	r3, r5
 8009cde:	f7f6 fcb3 	bl	8000648 <__aeabi_dmul>
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	0000      	movs	r0, r0
	...

08009ce8 <_strtod_l>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	b0a3      	sub	sp, #140	; 0x8c
 8009cee:	461f      	mov	r7, r3
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	931e      	str	r3, [sp, #120]	; 0x78
 8009cf4:	4ba4      	ldr	r3, [pc, #656]	; (8009f88 <_strtod_l+0x2a0>)
 8009cf6:	9219      	str	r2, [sp, #100]	; 0x64
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	9307      	str	r3, [sp, #28]
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	4688      	mov	r8, r1
 8009d02:	f7f6 fa8d 	bl	8000220 <strlen>
 8009d06:	f04f 0a00 	mov.w	sl, #0
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	f04f 0b00 	mov.w	fp, #0
 8009d10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d16:	781a      	ldrb	r2, [r3, #0]
 8009d18:	2a2b      	cmp	r2, #43	; 0x2b
 8009d1a:	d04c      	beq.n	8009db6 <_strtod_l+0xce>
 8009d1c:	d839      	bhi.n	8009d92 <_strtod_l+0xaa>
 8009d1e:	2a0d      	cmp	r2, #13
 8009d20:	d832      	bhi.n	8009d88 <_strtod_l+0xa0>
 8009d22:	2a08      	cmp	r2, #8
 8009d24:	d832      	bhi.n	8009d8c <_strtod_l+0xa4>
 8009d26:	2a00      	cmp	r2, #0
 8009d28:	d03c      	beq.n	8009da4 <_strtod_l+0xbc>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d2e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d30:	7833      	ldrb	r3, [r6, #0]
 8009d32:	2b30      	cmp	r3, #48	; 0x30
 8009d34:	f040 80b4 	bne.w	8009ea0 <_strtod_l+0x1b8>
 8009d38:	7873      	ldrb	r3, [r6, #1]
 8009d3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d3e:	2b58      	cmp	r3, #88	; 0x58
 8009d40:	d16c      	bne.n	8009e1c <_strtod_l+0x134>
 8009d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d44:	9301      	str	r3, [sp, #4]
 8009d46:	ab1e      	add	r3, sp, #120	; 0x78
 8009d48:	9702      	str	r7, [sp, #8]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	4a8f      	ldr	r2, [pc, #572]	; (8009f8c <_strtod_l+0x2a4>)
 8009d4e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009d50:	a91d      	add	r1, sp, #116	; 0x74
 8009d52:	4620      	mov	r0, r4
 8009d54:	f001 ffc2 	bl	800bcdc <__gethex>
 8009d58:	f010 0707 	ands.w	r7, r0, #7
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	d005      	beq.n	8009d6c <_strtod_l+0x84>
 8009d60:	2f06      	cmp	r7, #6
 8009d62:	d12a      	bne.n	8009dba <_strtod_l+0xd2>
 8009d64:	3601      	adds	r6, #1
 8009d66:	2300      	movs	r3, #0
 8009d68:	961d      	str	r6, [sp, #116]	; 0x74
 8009d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 8596 	bne.w	800a8a0 <_strtod_l+0xbb8>
 8009d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d76:	b1db      	cbz	r3, 8009db0 <_strtod_l+0xc8>
 8009d78:	4652      	mov	r2, sl
 8009d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d7e:	ec43 2b10 	vmov	d0, r2, r3
 8009d82:	b023      	add	sp, #140	; 0x8c
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	2a20      	cmp	r2, #32
 8009d8a:	d1ce      	bne.n	8009d2a <_strtod_l+0x42>
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	931d      	str	r3, [sp, #116]	; 0x74
 8009d90:	e7c0      	b.n	8009d14 <_strtod_l+0x2c>
 8009d92:	2a2d      	cmp	r2, #45	; 0x2d
 8009d94:	d1c9      	bne.n	8009d2a <_strtod_l+0x42>
 8009d96:	2201      	movs	r2, #1
 8009d98:	920e      	str	r2, [sp, #56]	; 0x38
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	921d      	str	r2, [sp, #116]	; 0x74
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1c4      	bne.n	8009d2e <_strtod_l+0x46>
 8009da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009da6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 8576 	bne.w	800a89c <_strtod_l+0xbb4>
 8009db0:	4652      	mov	r2, sl
 8009db2:	465b      	mov	r3, fp
 8009db4:	e7e3      	b.n	8009d7e <_strtod_l+0x96>
 8009db6:	2200      	movs	r2, #0
 8009db8:	e7ee      	b.n	8009d98 <_strtod_l+0xb0>
 8009dba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dbc:	b13a      	cbz	r2, 8009dce <_strtod_l+0xe6>
 8009dbe:	2135      	movs	r1, #53	; 0x35
 8009dc0:	a820      	add	r0, sp, #128	; 0x80
 8009dc2:	f002 ff90 	bl	800cce6 <__copybits>
 8009dc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f002 fb55 	bl	800c478 <_Bfree>
 8009dce:	3f01      	subs	r7, #1
 8009dd0:	2f05      	cmp	r7, #5
 8009dd2:	d807      	bhi.n	8009de4 <_strtod_l+0xfc>
 8009dd4:	e8df f007 	tbb	[pc, r7]
 8009dd8:	1d180b0e 	.word	0x1d180b0e
 8009ddc:	030e      	.short	0x030e
 8009dde:	f04f 0b00 	mov.w	fp, #0
 8009de2:	46da      	mov	sl, fp
 8009de4:	0728      	lsls	r0, r5, #28
 8009de6:	d5c1      	bpl.n	8009d6c <_strtod_l+0x84>
 8009de8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009dec:	e7be      	b.n	8009d6c <_strtod_l+0x84>
 8009dee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009df2:	e7f7      	b.n	8009de4 <_strtod_l+0xfc>
 8009df4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009df8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009dfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009dfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e06:	e7ed      	b.n	8009de4 <_strtod_l+0xfc>
 8009e08:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009f90 <_strtod_l+0x2a8>
 8009e0c:	f04f 0a00 	mov.w	sl, #0
 8009e10:	e7e8      	b.n	8009de4 <_strtod_l+0xfc>
 8009e12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009e16:	f04f 3aff 	mov.w	sl, #4294967295
 8009e1a:	e7e3      	b.n	8009de4 <_strtod_l+0xfc>
 8009e1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	921d      	str	r2, [sp, #116]	; 0x74
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	2b30      	cmp	r3, #48	; 0x30
 8009e26:	d0f9      	beq.n	8009e1c <_strtod_l+0x134>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d09f      	beq.n	8009d6c <_strtod_l+0x84>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f04f 0900 	mov.w	r9, #0
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e36:	930a      	str	r3, [sp, #40]	; 0x28
 8009e38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e3c:	464f      	mov	r7, r9
 8009e3e:	220a      	movs	r2, #10
 8009e40:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009e42:	7806      	ldrb	r6, [r0, #0]
 8009e44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e48:	b2d9      	uxtb	r1, r3
 8009e4a:	2909      	cmp	r1, #9
 8009e4c:	d92a      	bls.n	8009ea4 <_strtod_l+0x1bc>
 8009e4e:	9907      	ldr	r1, [sp, #28]
 8009e50:	462a      	mov	r2, r5
 8009e52:	f003 f9fc 	bl	800d24e <strncmp>
 8009e56:	b398      	cbz	r0, 8009ec0 <_strtod_l+0x1d8>
 8009e58:	2000      	movs	r0, #0
 8009e5a:	4633      	mov	r3, r6
 8009e5c:	463d      	mov	r5, r7
 8009e5e:	9007      	str	r0, [sp, #28]
 8009e60:	4602      	mov	r2, r0
 8009e62:	2b65      	cmp	r3, #101	; 0x65
 8009e64:	d001      	beq.n	8009e6a <_strtod_l+0x182>
 8009e66:	2b45      	cmp	r3, #69	; 0x45
 8009e68:	d118      	bne.n	8009e9c <_strtod_l+0x1b4>
 8009e6a:	b91d      	cbnz	r5, 8009e74 <_strtod_l+0x18c>
 8009e6c:	9b04      	ldr	r3, [sp, #16]
 8009e6e:	4303      	orrs	r3, r0
 8009e70:	d098      	beq.n	8009da4 <_strtod_l+0xbc>
 8009e72:	2500      	movs	r5, #0
 8009e74:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009e78:	f108 0301 	add.w	r3, r8, #1
 8009e7c:	931d      	str	r3, [sp, #116]	; 0x74
 8009e7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e82:	2b2b      	cmp	r3, #43	; 0x2b
 8009e84:	d075      	beq.n	8009f72 <_strtod_l+0x28a>
 8009e86:	2b2d      	cmp	r3, #45	; 0x2d
 8009e88:	d07b      	beq.n	8009f82 <_strtod_l+0x29a>
 8009e8a:	f04f 0c00 	mov.w	ip, #0
 8009e8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009e92:	2909      	cmp	r1, #9
 8009e94:	f240 8082 	bls.w	8009f9c <_strtod_l+0x2b4>
 8009e98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009e9c:	2600      	movs	r6, #0
 8009e9e:	e09d      	b.n	8009fdc <_strtod_l+0x2f4>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e7c4      	b.n	8009e2e <_strtod_l+0x146>
 8009ea4:	2f08      	cmp	r7, #8
 8009ea6:	bfd8      	it	le
 8009ea8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009eaa:	f100 0001 	add.w	r0, r0, #1
 8009eae:	bfda      	itte	le
 8009eb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009eb4:	9309      	strle	r3, [sp, #36]	; 0x24
 8009eb6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009eba:	3701      	adds	r7, #1
 8009ebc:	901d      	str	r0, [sp, #116]	; 0x74
 8009ebe:	e7bf      	b.n	8009e40 <_strtod_l+0x158>
 8009ec0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ec2:	195a      	adds	r2, r3, r5
 8009ec4:	921d      	str	r2, [sp, #116]	; 0x74
 8009ec6:	5d5b      	ldrb	r3, [r3, r5]
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	d037      	beq.n	8009f3c <_strtod_l+0x254>
 8009ecc:	9007      	str	r0, [sp, #28]
 8009ece:	463d      	mov	r5, r7
 8009ed0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ed4:	2a09      	cmp	r2, #9
 8009ed6:	d912      	bls.n	8009efe <_strtod_l+0x216>
 8009ed8:	2201      	movs	r2, #1
 8009eda:	e7c2      	b.n	8009e62 <_strtod_l+0x17a>
 8009edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	921d      	str	r2, [sp, #116]	; 0x74
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	2b30      	cmp	r3, #48	; 0x30
 8009ee8:	d0f8      	beq.n	8009edc <_strtod_l+0x1f4>
 8009eea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009eee:	2a08      	cmp	r2, #8
 8009ef0:	f200 84db 	bhi.w	800a8aa <_strtod_l+0xbc2>
 8009ef4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009ef6:	9007      	str	r0, [sp, #28]
 8009ef8:	2000      	movs	r0, #0
 8009efa:	920a      	str	r2, [sp, #40]	; 0x28
 8009efc:	4605      	mov	r5, r0
 8009efe:	3b30      	subs	r3, #48	; 0x30
 8009f00:	f100 0201 	add.w	r2, r0, #1
 8009f04:	d014      	beq.n	8009f30 <_strtod_l+0x248>
 8009f06:	9907      	ldr	r1, [sp, #28]
 8009f08:	4411      	add	r1, r2
 8009f0a:	9107      	str	r1, [sp, #28]
 8009f0c:	462a      	mov	r2, r5
 8009f0e:	eb00 0e05 	add.w	lr, r0, r5
 8009f12:	210a      	movs	r1, #10
 8009f14:	4572      	cmp	r2, lr
 8009f16:	d113      	bne.n	8009f40 <_strtod_l+0x258>
 8009f18:	182a      	adds	r2, r5, r0
 8009f1a:	2a08      	cmp	r2, #8
 8009f1c:	f105 0501 	add.w	r5, r5, #1
 8009f20:	4405      	add	r5, r0
 8009f22:	dc1c      	bgt.n	8009f5e <_strtod_l+0x276>
 8009f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f26:	220a      	movs	r2, #10
 8009f28:	fb02 3301 	mla	r3, r2, r1, r3
 8009f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2e:	2200      	movs	r2, #0
 8009f30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f32:	1c59      	adds	r1, r3, #1
 8009f34:	911d      	str	r1, [sp, #116]	; 0x74
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	4610      	mov	r0, r2
 8009f3a:	e7c9      	b.n	8009ed0 <_strtod_l+0x1e8>
 8009f3c:	4638      	mov	r0, r7
 8009f3e:	e7d2      	b.n	8009ee6 <_strtod_l+0x1fe>
 8009f40:	2a08      	cmp	r2, #8
 8009f42:	dc04      	bgt.n	8009f4e <_strtod_l+0x266>
 8009f44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f46:	434e      	muls	r6, r1
 8009f48:	9609      	str	r6, [sp, #36]	; 0x24
 8009f4a:	3201      	adds	r2, #1
 8009f4c:	e7e2      	b.n	8009f14 <_strtod_l+0x22c>
 8009f4e:	f102 0c01 	add.w	ip, r2, #1
 8009f52:	f1bc 0f10 	cmp.w	ip, #16
 8009f56:	bfd8      	it	le
 8009f58:	fb01 f909 	mulle.w	r9, r1, r9
 8009f5c:	e7f5      	b.n	8009f4a <_strtod_l+0x262>
 8009f5e:	2d10      	cmp	r5, #16
 8009f60:	bfdc      	itt	le
 8009f62:	220a      	movle	r2, #10
 8009f64:	fb02 3909 	mlale	r9, r2, r9, r3
 8009f68:	e7e1      	b.n	8009f2e <_strtod_l+0x246>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9307      	str	r3, [sp, #28]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	e77c      	b.n	8009e6c <_strtod_l+0x184>
 8009f72:	f04f 0c00 	mov.w	ip, #0
 8009f76:	f108 0302 	add.w	r3, r8, #2
 8009f7a:	931d      	str	r3, [sp, #116]	; 0x74
 8009f7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009f80:	e785      	b.n	8009e8e <_strtod_l+0x1a6>
 8009f82:	f04f 0c01 	mov.w	ip, #1
 8009f86:	e7f6      	b.n	8009f76 <_strtod_l+0x28e>
 8009f88:	0800f0ac 	.word	0x0800f0ac
 8009f8c:	0800edf8 	.word	0x0800edf8
 8009f90:	7ff00000 	.word	0x7ff00000
 8009f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f96:	1c59      	adds	r1, r3, #1
 8009f98:	911d      	str	r1, [sp, #116]	; 0x74
 8009f9a:	785b      	ldrb	r3, [r3, #1]
 8009f9c:	2b30      	cmp	r3, #48	; 0x30
 8009f9e:	d0f9      	beq.n	8009f94 <_strtod_l+0x2ac>
 8009fa0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009fa4:	2908      	cmp	r1, #8
 8009fa6:	f63f af79 	bhi.w	8009e9c <_strtod_l+0x1b4>
 8009faa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009fae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fb0:	9308      	str	r3, [sp, #32]
 8009fb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fb4:	1c59      	adds	r1, r3, #1
 8009fb6:	911d      	str	r1, [sp, #116]	; 0x74
 8009fb8:	785b      	ldrb	r3, [r3, #1]
 8009fba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009fbe:	2e09      	cmp	r6, #9
 8009fc0:	d937      	bls.n	800a032 <_strtod_l+0x34a>
 8009fc2:	9e08      	ldr	r6, [sp, #32]
 8009fc4:	1b89      	subs	r1, r1, r6
 8009fc6:	2908      	cmp	r1, #8
 8009fc8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009fcc:	dc02      	bgt.n	8009fd4 <_strtod_l+0x2ec>
 8009fce:	4576      	cmp	r6, lr
 8009fd0:	bfa8      	it	ge
 8009fd2:	4676      	movge	r6, lr
 8009fd4:	f1bc 0f00 	cmp.w	ip, #0
 8009fd8:	d000      	beq.n	8009fdc <_strtod_l+0x2f4>
 8009fda:	4276      	negs	r6, r6
 8009fdc:	2d00      	cmp	r5, #0
 8009fde:	d14f      	bne.n	800a080 <_strtod_l+0x398>
 8009fe0:	9904      	ldr	r1, [sp, #16]
 8009fe2:	4301      	orrs	r1, r0
 8009fe4:	f47f aec2 	bne.w	8009d6c <_strtod_l+0x84>
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	f47f aedb 	bne.w	8009da4 <_strtod_l+0xbc>
 8009fee:	2b69      	cmp	r3, #105	; 0x69
 8009ff0:	d027      	beq.n	800a042 <_strtod_l+0x35a>
 8009ff2:	dc24      	bgt.n	800a03e <_strtod_l+0x356>
 8009ff4:	2b49      	cmp	r3, #73	; 0x49
 8009ff6:	d024      	beq.n	800a042 <_strtod_l+0x35a>
 8009ff8:	2b4e      	cmp	r3, #78	; 0x4e
 8009ffa:	f47f aed3 	bne.w	8009da4 <_strtod_l+0xbc>
 8009ffe:	499e      	ldr	r1, [pc, #632]	; (800a278 <_strtod_l+0x590>)
 800a000:	a81d      	add	r0, sp, #116	; 0x74
 800a002:	f002 f8c3 	bl	800c18c <__match>
 800a006:	2800      	cmp	r0, #0
 800a008:	f43f aecc 	beq.w	8009da4 <_strtod_l+0xbc>
 800a00c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b28      	cmp	r3, #40	; 0x28
 800a012:	d12d      	bne.n	800a070 <_strtod_l+0x388>
 800a014:	4999      	ldr	r1, [pc, #612]	; (800a27c <_strtod_l+0x594>)
 800a016:	aa20      	add	r2, sp, #128	; 0x80
 800a018:	a81d      	add	r0, sp, #116	; 0x74
 800a01a:	f002 f8cb 	bl	800c1b4 <__hexnan>
 800a01e:	2805      	cmp	r0, #5
 800a020:	d126      	bne.n	800a070 <_strtod_l+0x388>
 800a022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a024:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a028:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a02c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a030:	e69c      	b.n	8009d6c <_strtod_l+0x84>
 800a032:	210a      	movs	r1, #10
 800a034:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a038:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a03c:	e7b9      	b.n	8009fb2 <_strtod_l+0x2ca>
 800a03e:	2b6e      	cmp	r3, #110	; 0x6e
 800a040:	e7db      	b.n	8009ffa <_strtod_l+0x312>
 800a042:	498f      	ldr	r1, [pc, #572]	; (800a280 <_strtod_l+0x598>)
 800a044:	a81d      	add	r0, sp, #116	; 0x74
 800a046:	f002 f8a1 	bl	800c18c <__match>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f43f aeaa 	beq.w	8009da4 <_strtod_l+0xbc>
 800a050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a052:	498c      	ldr	r1, [pc, #560]	; (800a284 <_strtod_l+0x59c>)
 800a054:	3b01      	subs	r3, #1
 800a056:	a81d      	add	r0, sp, #116	; 0x74
 800a058:	931d      	str	r3, [sp, #116]	; 0x74
 800a05a:	f002 f897 	bl	800c18c <__match>
 800a05e:	b910      	cbnz	r0, 800a066 <_strtod_l+0x37e>
 800a060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a062:	3301      	adds	r3, #1
 800a064:	931d      	str	r3, [sp, #116]	; 0x74
 800a066:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a294 <_strtod_l+0x5ac>
 800a06a:	f04f 0a00 	mov.w	sl, #0
 800a06e:	e67d      	b.n	8009d6c <_strtod_l+0x84>
 800a070:	4885      	ldr	r0, [pc, #532]	; (800a288 <_strtod_l+0x5a0>)
 800a072:	f003 f891 	bl	800d198 <nan>
 800a076:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a07a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a07e:	e675      	b.n	8009d6c <_strtod_l+0x84>
 800a080:	9b07      	ldr	r3, [sp, #28]
 800a082:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a084:	1af3      	subs	r3, r6, r3
 800a086:	2f00      	cmp	r7, #0
 800a088:	bf08      	it	eq
 800a08a:	462f      	moveq	r7, r5
 800a08c:	2d10      	cmp	r5, #16
 800a08e:	9308      	str	r3, [sp, #32]
 800a090:	46a8      	mov	r8, r5
 800a092:	bfa8      	it	ge
 800a094:	f04f 0810 	movge.w	r8, #16
 800a098:	f7f6 fa5c 	bl	8000554 <__aeabi_ui2d>
 800a09c:	2d09      	cmp	r5, #9
 800a09e:	4682      	mov	sl, r0
 800a0a0:	468b      	mov	fp, r1
 800a0a2:	dd13      	ble.n	800a0cc <_strtod_l+0x3e4>
 800a0a4:	4b79      	ldr	r3, [pc, #484]	; (800a28c <_strtod_l+0x5a4>)
 800a0a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a0aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a0ae:	f7f6 facb 	bl	8000648 <__aeabi_dmul>
 800a0b2:	4682      	mov	sl, r0
 800a0b4:	4648      	mov	r0, r9
 800a0b6:	468b      	mov	fp, r1
 800a0b8:	f7f6 fa4c 	bl	8000554 <__aeabi_ui2d>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	f7f6 f90a 	bl	80002dc <__adddf3>
 800a0c8:	4682      	mov	sl, r0
 800a0ca:	468b      	mov	fp, r1
 800a0cc:	2d0f      	cmp	r5, #15
 800a0ce:	dc38      	bgt.n	800a142 <_strtod_l+0x45a>
 800a0d0:	9b08      	ldr	r3, [sp, #32]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f43f ae4a 	beq.w	8009d6c <_strtod_l+0x84>
 800a0d8:	dd24      	ble.n	800a124 <_strtod_l+0x43c>
 800a0da:	2b16      	cmp	r3, #22
 800a0dc:	dc0b      	bgt.n	800a0f6 <_strtod_l+0x40e>
 800a0de:	4d6b      	ldr	r5, [pc, #428]	; (800a28c <_strtod_l+0x5a4>)
 800a0e0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a0e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a0e8:	4652      	mov	r2, sl
 800a0ea:	465b      	mov	r3, fp
 800a0ec:	f7f6 faac 	bl	8000648 <__aeabi_dmul>
 800a0f0:	4682      	mov	sl, r0
 800a0f2:	468b      	mov	fp, r1
 800a0f4:	e63a      	b.n	8009d6c <_strtod_l+0x84>
 800a0f6:	9a08      	ldr	r2, [sp, #32]
 800a0f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	db20      	blt.n	800a142 <_strtod_l+0x45a>
 800a100:	4c62      	ldr	r4, [pc, #392]	; (800a28c <_strtod_l+0x5a4>)
 800a102:	f1c5 050f 	rsb	r5, r5, #15
 800a106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a10a:	4652      	mov	r2, sl
 800a10c:	465b      	mov	r3, fp
 800a10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a112:	f7f6 fa99 	bl	8000648 <__aeabi_dmul>
 800a116:	9b08      	ldr	r3, [sp, #32]
 800a118:	1b5d      	subs	r5, r3, r5
 800a11a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a11e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a122:	e7e3      	b.n	800a0ec <_strtod_l+0x404>
 800a124:	9b08      	ldr	r3, [sp, #32]
 800a126:	3316      	adds	r3, #22
 800a128:	db0b      	blt.n	800a142 <_strtod_l+0x45a>
 800a12a:	9b07      	ldr	r3, [sp, #28]
 800a12c:	4a57      	ldr	r2, [pc, #348]	; (800a28c <_strtod_l+0x5a4>)
 800a12e:	1b9e      	subs	r6, r3, r6
 800a130:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a134:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a138:	4650      	mov	r0, sl
 800a13a:	4659      	mov	r1, fp
 800a13c:	f7f6 fbae 	bl	800089c <__aeabi_ddiv>
 800a140:	e7d6      	b.n	800a0f0 <_strtod_l+0x408>
 800a142:	9b08      	ldr	r3, [sp, #32]
 800a144:	eba5 0808 	sub.w	r8, r5, r8
 800a148:	4498      	add	r8, r3
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	dd71      	ble.n	800a234 <_strtod_l+0x54c>
 800a150:	f018 030f 	ands.w	r3, r8, #15
 800a154:	d00a      	beq.n	800a16c <_strtod_l+0x484>
 800a156:	494d      	ldr	r1, [pc, #308]	; (800a28c <_strtod_l+0x5a4>)
 800a158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a15c:	4652      	mov	r2, sl
 800a15e:	465b      	mov	r3, fp
 800a160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a164:	f7f6 fa70 	bl	8000648 <__aeabi_dmul>
 800a168:	4682      	mov	sl, r0
 800a16a:	468b      	mov	fp, r1
 800a16c:	f038 080f 	bics.w	r8, r8, #15
 800a170:	d04d      	beq.n	800a20e <_strtod_l+0x526>
 800a172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a176:	dd22      	ble.n	800a1be <_strtod_l+0x4d6>
 800a178:	2500      	movs	r5, #0
 800a17a:	462e      	mov	r6, r5
 800a17c:	9509      	str	r5, [sp, #36]	; 0x24
 800a17e:	9507      	str	r5, [sp, #28]
 800a180:	2322      	movs	r3, #34	; 0x22
 800a182:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a294 <_strtod_l+0x5ac>
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	f04f 0a00 	mov.w	sl, #0
 800a18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f43f adec 	beq.w	8009d6c <_strtod_l+0x84>
 800a194:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a196:	4620      	mov	r0, r4
 800a198:	f002 f96e 	bl	800c478 <_Bfree>
 800a19c:	9907      	ldr	r1, [sp, #28]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f002 f96a 	bl	800c478 <_Bfree>
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f002 f966 	bl	800c478 <_Bfree>
 800a1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f002 f962 	bl	800c478 <_Bfree>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f002 f95e 	bl	800c478 <_Bfree>
 800a1bc:	e5d6      	b.n	8009d6c <_strtod_l+0x84>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a1c4:	4650      	mov	r0, sl
 800a1c6:	4659      	mov	r1, fp
 800a1c8:	4699      	mov	r9, r3
 800a1ca:	f1b8 0f01 	cmp.w	r8, #1
 800a1ce:	dc21      	bgt.n	800a214 <_strtod_l+0x52c>
 800a1d0:	b10b      	cbz	r3, 800a1d6 <_strtod_l+0x4ee>
 800a1d2:	4682      	mov	sl, r0
 800a1d4:	468b      	mov	fp, r1
 800a1d6:	4b2e      	ldr	r3, [pc, #184]	; (800a290 <_strtod_l+0x5a8>)
 800a1d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a1dc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a1e0:	4652      	mov	r2, sl
 800a1e2:	465b      	mov	r3, fp
 800a1e4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a1e8:	f7f6 fa2e 	bl	8000648 <__aeabi_dmul>
 800a1ec:	4b29      	ldr	r3, [pc, #164]	; (800a294 <_strtod_l+0x5ac>)
 800a1ee:	460a      	mov	r2, r1
 800a1f0:	400b      	ands	r3, r1
 800a1f2:	4929      	ldr	r1, [pc, #164]	; (800a298 <_strtod_l+0x5b0>)
 800a1f4:	428b      	cmp	r3, r1
 800a1f6:	4682      	mov	sl, r0
 800a1f8:	d8be      	bhi.n	800a178 <_strtod_l+0x490>
 800a1fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a1fe:	428b      	cmp	r3, r1
 800a200:	bf86      	itte	hi
 800a202:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a29c <_strtod_l+0x5b4>
 800a206:	f04f 3aff 	movhi.w	sl, #4294967295
 800a20a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a20e:	2300      	movs	r3, #0
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	e081      	b.n	800a318 <_strtod_l+0x630>
 800a214:	f018 0f01 	tst.w	r8, #1
 800a218:	d007      	beq.n	800a22a <_strtod_l+0x542>
 800a21a:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <_strtod_l+0x5a8>)
 800a21c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 fa10 	bl	8000648 <__aeabi_dmul>
 800a228:	2301      	movs	r3, #1
 800a22a:	f109 0901 	add.w	r9, r9, #1
 800a22e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a232:	e7ca      	b.n	800a1ca <_strtod_l+0x4e2>
 800a234:	d0eb      	beq.n	800a20e <_strtod_l+0x526>
 800a236:	f1c8 0800 	rsb	r8, r8, #0
 800a23a:	f018 020f 	ands.w	r2, r8, #15
 800a23e:	d00a      	beq.n	800a256 <_strtod_l+0x56e>
 800a240:	4b12      	ldr	r3, [pc, #72]	; (800a28c <_strtod_l+0x5a4>)
 800a242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a246:	4650      	mov	r0, sl
 800a248:	4659      	mov	r1, fp
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	f7f6 fb25 	bl	800089c <__aeabi_ddiv>
 800a252:	4682      	mov	sl, r0
 800a254:	468b      	mov	fp, r1
 800a256:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a25a:	d0d8      	beq.n	800a20e <_strtod_l+0x526>
 800a25c:	f1b8 0f1f 	cmp.w	r8, #31
 800a260:	dd1e      	ble.n	800a2a0 <_strtod_l+0x5b8>
 800a262:	2500      	movs	r5, #0
 800a264:	462e      	mov	r6, r5
 800a266:	9509      	str	r5, [sp, #36]	; 0x24
 800a268:	9507      	str	r5, [sp, #28]
 800a26a:	2322      	movs	r3, #34	; 0x22
 800a26c:	f04f 0a00 	mov.w	sl, #0
 800a270:	f04f 0b00 	mov.w	fp, #0
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	e789      	b.n	800a18c <_strtod_l+0x4a4>
 800a278:	0800edd1 	.word	0x0800edd1
 800a27c:	0800ee0c 	.word	0x0800ee0c
 800a280:	0800edc9 	.word	0x0800edc9
 800a284:	0800ef4c 	.word	0x0800ef4c
 800a288:	0800f268 	.word	0x0800f268
 800a28c:	0800f148 	.word	0x0800f148
 800a290:	0800f120 	.word	0x0800f120
 800a294:	7ff00000 	.word	0x7ff00000
 800a298:	7ca00000 	.word	0x7ca00000
 800a29c:	7fefffff 	.word	0x7fefffff
 800a2a0:	f018 0310 	ands.w	r3, r8, #16
 800a2a4:	bf18      	it	ne
 800a2a6:	236a      	movne	r3, #106	; 0x6a
 800a2a8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a660 <_strtod_l+0x978>
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f018 0f01 	tst.w	r8, #1
 800a2b8:	d004      	beq.n	800a2c4 <_strtod_l+0x5dc>
 800a2ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a2be:	f7f6 f9c3 	bl	8000648 <__aeabi_dmul>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a2c8:	f109 0908 	add.w	r9, r9, #8
 800a2cc:	d1f2      	bne.n	800a2b4 <_strtod_l+0x5cc>
 800a2ce:	b10b      	cbz	r3, 800a2d4 <_strtod_l+0x5ec>
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	468b      	mov	fp, r1
 800a2d4:	9b04      	ldr	r3, [sp, #16]
 800a2d6:	b1bb      	cbz	r3, 800a308 <_strtod_l+0x620>
 800a2d8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a2dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	4659      	mov	r1, fp
 800a2e4:	dd10      	ble.n	800a308 <_strtod_l+0x620>
 800a2e6:	2b1f      	cmp	r3, #31
 800a2e8:	f340 8128 	ble.w	800a53c <_strtod_l+0x854>
 800a2ec:	2b34      	cmp	r3, #52	; 0x34
 800a2ee:	bfde      	ittt	le
 800a2f0:	3b20      	suble	r3, #32
 800a2f2:	f04f 32ff 	movle.w	r2, #4294967295
 800a2f6:	fa02 f303 	lslle.w	r3, r2, r3
 800a2fa:	f04f 0a00 	mov.w	sl, #0
 800a2fe:	bfcc      	ite	gt
 800a300:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a304:	ea03 0b01 	andle.w	fp, r3, r1
 800a308:	2200      	movs	r2, #0
 800a30a:	2300      	movs	r3, #0
 800a30c:	4650      	mov	r0, sl
 800a30e:	4659      	mov	r1, fp
 800a310:	f7f6 fc02 	bl	8000b18 <__aeabi_dcmpeq>
 800a314:	2800      	cmp	r0, #0
 800a316:	d1a4      	bne.n	800a262 <_strtod_l+0x57a>
 800a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a31e:	462b      	mov	r3, r5
 800a320:	463a      	mov	r2, r7
 800a322:	4620      	mov	r0, r4
 800a324:	f002 f914 	bl	800c550 <__s2b>
 800a328:	9009      	str	r0, [sp, #36]	; 0x24
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f43f af24 	beq.w	800a178 <_strtod_l+0x490>
 800a330:	9b07      	ldr	r3, [sp, #28]
 800a332:	1b9e      	subs	r6, r3, r6
 800a334:	9b08      	ldr	r3, [sp, #32]
 800a336:	2b00      	cmp	r3, #0
 800a338:	bfb4      	ite	lt
 800a33a:	4633      	movlt	r3, r6
 800a33c:	2300      	movge	r3, #0
 800a33e:	9310      	str	r3, [sp, #64]	; 0x40
 800a340:	9b08      	ldr	r3, [sp, #32]
 800a342:	2500      	movs	r5, #0
 800a344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a348:	9318      	str	r3, [sp, #96]	; 0x60
 800a34a:	462e      	mov	r6, r5
 800a34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34e:	4620      	mov	r0, r4
 800a350:	6859      	ldr	r1, [r3, #4]
 800a352:	f002 f851 	bl	800c3f8 <_Balloc>
 800a356:	9007      	str	r0, [sp, #28]
 800a358:	2800      	cmp	r0, #0
 800a35a:	f43f af11 	beq.w	800a180 <_strtod_l+0x498>
 800a35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a360:	691a      	ldr	r2, [r3, #16]
 800a362:	3202      	adds	r2, #2
 800a364:	f103 010c 	add.w	r1, r3, #12
 800a368:	0092      	lsls	r2, r2, #2
 800a36a:	300c      	adds	r0, #12
 800a36c:	f7fe ff76 	bl	800925c <memcpy>
 800a370:	ec4b ab10 	vmov	d0, sl, fp
 800a374:	aa20      	add	r2, sp, #128	; 0x80
 800a376:	a91f      	add	r1, sp, #124	; 0x7c
 800a378:	4620      	mov	r0, r4
 800a37a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a37e:	f002 fc23 	bl	800cbc8 <__d2b>
 800a382:	901e      	str	r0, [sp, #120]	; 0x78
 800a384:	2800      	cmp	r0, #0
 800a386:	f43f aefb 	beq.w	800a180 <_strtod_l+0x498>
 800a38a:	2101      	movs	r1, #1
 800a38c:	4620      	mov	r0, r4
 800a38e:	f002 f979 	bl	800c684 <__i2b>
 800a392:	4606      	mov	r6, r0
 800a394:	2800      	cmp	r0, #0
 800a396:	f43f aef3 	beq.w	800a180 <_strtod_l+0x498>
 800a39a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a39c:	9904      	ldr	r1, [sp, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bfab      	itete	ge
 800a3a2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a3a4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a3a6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a3a8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a3ac:	bfac      	ite	ge
 800a3ae:	eb03 0902 	addge.w	r9, r3, r2
 800a3b2:	1ad7      	sublt	r7, r2, r3
 800a3b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3b6:	eba3 0801 	sub.w	r8, r3, r1
 800a3ba:	4490      	add	r8, r2
 800a3bc:	4ba3      	ldr	r3, [pc, #652]	; (800a64c <_strtod_l+0x964>)
 800a3be:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3c2:	4598      	cmp	r8, r3
 800a3c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a3c8:	f280 80cc 	bge.w	800a564 <_strtod_l+0x87c>
 800a3cc:	eba3 0308 	sub.w	r3, r3, r8
 800a3d0:	2b1f      	cmp	r3, #31
 800a3d2:	eba2 0203 	sub.w	r2, r2, r3
 800a3d6:	f04f 0101 	mov.w	r1, #1
 800a3da:	f300 80b6 	bgt.w	800a54a <_strtod_l+0x862>
 800a3de:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e2:	9311      	str	r3, [sp, #68]	; 0x44
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a3e8:	eb09 0802 	add.w	r8, r9, r2
 800a3ec:	9b04      	ldr	r3, [sp, #16]
 800a3ee:	45c1      	cmp	r9, r8
 800a3f0:	4417      	add	r7, r2
 800a3f2:	441f      	add	r7, r3
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	bfa8      	it	ge
 800a3f8:	4643      	movge	r3, r8
 800a3fa:	42bb      	cmp	r3, r7
 800a3fc:	bfa8      	it	ge
 800a3fe:	463b      	movge	r3, r7
 800a400:	2b00      	cmp	r3, #0
 800a402:	bfc2      	ittt	gt
 800a404:	eba8 0803 	subgt.w	r8, r8, r3
 800a408:	1aff      	subgt	r7, r7, r3
 800a40a:	eba9 0903 	subgt.w	r9, r9, r3
 800a40e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a410:	2b00      	cmp	r3, #0
 800a412:	dd17      	ble.n	800a444 <_strtod_l+0x75c>
 800a414:	4631      	mov	r1, r6
 800a416:	461a      	mov	r2, r3
 800a418:	4620      	mov	r0, r4
 800a41a:	f002 f9ef 	bl	800c7fc <__pow5mult>
 800a41e:	4606      	mov	r6, r0
 800a420:	2800      	cmp	r0, #0
 800a422:	f43f aead 	beq.w	800a180 <_strtod_l+0x498>
 800a426:	4601      	mov	r1, r0
 800a428:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a42a:	4620      	mov	r0, r4
 800a42c:	f002 f940 	bl	800c6b0 <__multiply>
 800a430:	900f      	str	r0, [sp, #60]	; 0x3c
 800a432:	2800      	cmp	r0, #0
 800a434:	f43f aea4 	beq.w	800a180 <_strtod_l+0x498>
 800a438:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a43a:	4620      	mov	r0, r4
 800a43c:	f002 f81c 	bl	800c478 <_Bfree>
 800a440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a442:	931e      	str	r3, [sp, #120]	; 0x78
 800a444:	f1b8 0f00 	cmp.w	r8, #0
 800a448:	f300 8091 	bgt.w	800a56e <_strtod_l+0x886>
 800a44c:	9b08      	ldr	r3, [sp, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dd08      	ble.n	800a464 <_strtod_l+0x77c>
 800a452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a454:	9907      	ldr	r1, [sp, #28]
 800a456:	4620      	mov	r0, r4
 800a458:	f002 f9d0 	bl	800c7fc <__pow5mult>
 800a45c:	9007      	str	r0, [sp, #28]
 800a45e:	2800      	cmp	r0, #0
 800a460:	f43f ae8e 	beq.w	800a180 <_strtod_l+0x498>
 800a464:	2f00      	cmp	r7, #0
 800a466:	dd08      	ble.n	800a47a <_strtod_l+0x792>
 800a468:	9907      	ldr	r1, [sp, #28]
 800a46a:	463a      	mov	r2, r7
 800a46c:	4620      	mov	r0, r4
 800a46e:	f002 fa1f 	bl	800c8b0 <__lshift>
 800a472:	9007      	str	r0, [sp, #28]
 800a474:	2800      	cmp	r0, #0
 800a476:	f43f ae83 	beq.w	800a180 <_strtod_l+0x498>
 800a47a:	f1b9 0f00 	cmp.w	r9, #0
 800a47e:	dd08      	ble.n	800a492 <_strtod_l+0x7aa>
 800a480:	4631      	mov	r1, r6
 800a482:	464a      	mov	r2, r9
 800a484:	4620      	mov	r0, r4
 800a486:	f002 fa13 	bl	800c8b0 <__lshift>
 800a48a:	4606      	mov	r6, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f43f ae77 	beq.w	800a180 <_strtod_l+0x498>
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a496:	4620      	mov	r0, r4
 800a498:	f002 fa92 	bl	800c9c0 <__mdiff>
 800a49c:	4605      	mov	r5, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f ae6e 	beq.w	800a180 <_strtod_l+0x498>
 800a4a4:	68c3      	ldr	r3, [r0, #12]
 800a4a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60c3      	str	r3, [r0, #12]
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	f002 fa6b 	bl	800c988 <__mcmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	da65      	bge.n	800a582 <_strtod_l+0x89a>
 800a4b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a4bc:	f040 8087 	bne.w	800a5ce <_strtod_l+0x8e6>
 800a4c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 8082 	bne.w	800a5ce <_strtod_l+0x8e6>
 800a4ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4ce:	0d1b      	lsrs	r3, r3, #20
 800a4d0:	051b      	lsls	r3, r3, #20
 800a4d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a4d6:	d97a      	bls.n	800a5ce <_strtod_l+0x8e6>
 800a4d8:	696b      	ldr	r3, [r5, #20]
 800a4da:	b913      	cbnz	r3, 800a4e2 <_strtod_l+0x7fa>
 800a4dc:	692b      	ldr	r3, [r5, #16]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	dd75      	ble.n	800a5ce <_strtod_l+0x8e6>
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f002 f9e2 	bl	800c8b0 <__lshift>
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	f002 fa4a 	bl	800c988 <__mcmp>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	dd6a      	ble.n	800a5ce <_strtod_l+0x8e6>
 800a4f8:	9904      	ldr	r1, [sp, #16]
 800a4fa:	4a55      	ldr	r2, [pc, #340]	; (800a650 <_strtod_l+0x968>)
 800a4fc:	465b      	mov	r3, fp
 800a4fe:	2900      	cmp	r1, #0
 800a500:	f000 8085 	beq.w	800a60e <_strtod_l+0x926>
 800a504:	ea02 010b 	and.w	r1, r2, fp
 800a508:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a50c:	dc7f      	bgt.n	800a60e <_strtod_l+0x926>
 800a50e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a512:	f77f aeaa 	ble.w	800a26a <_strtod_l+0x582>
 800a516:	4a4f      	ldr	r2, [pc, #316]	; (800a654 <_strtod_l+0x96c>)
 800a518:	2300      	movs	r3, #0
 800a51a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a51e:	4650      	mov	r0, sl
 800a520:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a524:	4659      	mov	r1, fp
 800a526:	f7f6 f88f 	bl	8000648 <__aeabi_dmul>
 800a52a:	460b      	mov	r3, r1
 800a52c:	4303      	orrs	r3, r0
 800a52e:	bf08      	it	eq
 800a530:	2322      	moveq	r3, #34	; 0x22
 800a532:	4682      	mov	sl, r0
 800a534:	468b      	mov	fp, r1
 800a536:	bf08      	it	eq
 800a538:	6023      	streq	r3, [r4, #0]
 800a53a:	e62b      	b.n	800a194 <_strtod_l+0x4ac>
 800a53c:	f04f 32ff 	mov.w	r2, #4294967295
 800a540:	fa02 f303 	lsl.w	r3, r2, r3
 800a544:	ea03 0a0a 	and.w	sl, r3, sl
 800a548:	e6de      	b.n	800a308 <_strtod_l+0x620>
 800a54a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a54e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a55a:	fa01 f308 	lsl.w	r3, r1, r8
 800a55e:	930c      	str	r3, [sp, #48]	; 0x30
 800a560:	9111      	str	r1, [sp, #68]	; 0x44
 800a562:	e741      	b.n	800a3e8 <_strtod_l+0x700>
 800a564:	2300      	movs	r3, #0
 800a566:	930c      	str	r3, [sp, #48]	; 0x30
 800a568:	2301      	movs	r3, #1
 800a56a:	9311      	str	r3, [sp, #68]	; 0x44
 800a56c:	e73c      	b.n	800a3e8 <_strtod_l+0x700>
 800a56e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a570:	4642      	mov	r2, r8
 800a572:	4620      	mov	r0, r4
 800a574:	f002 f99c 	bl	800c8b0 <__lshift>
 800a578:	901e      	str	r0, [sp, #120]	; 0x78
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f47f af66 	bne.w	800a44c <_strtod_l+0x764>
 800a580:	e5fe      	b.n	800a180 <_strtod_l+0x498>
 800a582:	465f      	mov	r7, fp
 800a584:	d16e      	bne.n	800a664 <_strtod_l+0x97c>
 800a586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a58c:	b342      	cbz	r2, 800a5e0 <_strtod_l+0x8f8>
 800a58e:	4a32      	ldr	r2, [pc, #200]	; (800a658 <_strtod_l+0x970>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d128      	bne.n	800a5e6 <_strtod_l+0x8fe>
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	4650      	mov	r0, sl
 800a598:	b1eb      	cbz	r3, 800a5d6 <_strtod_l+0x8ee>
 800a59a:	4a2d      	ldr	r2, [pc, #180]	; (800a650 <_strtod_l+0x968>)
 800a59c:	403a      	ands	r2, r7
 800a59e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a5a2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5a6:	d819      	bhi.n	800a5dc <_strtod_l+0x8f4>
 800a5a8:	0d12      	lsrs	r2, r2, #20
 800a5aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b2:	4298      	cmp	r0, r3
 800a5b4:	d117      	bne.n	800a5e6 <_strtod_l+0x8fe>
 800a5b6:	4b29      	ldr	r3, [pc, #164]	; (800a65c <_strtod_l+0x974>)
 800a5b8:	429f      	cmp	r7, r3
 800a5ba:	d102      	bne.n	800a5c2 <_strtod_l+0x8da>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f43f addf 	beq.w	800a180 <_strtod_l+0x498>
 800a5c2:	4b23      	ldr	r3, [pc, #140]	; (800a650 <_strtod_l+0x968>)
 800a5c4:	403b      	ands	r3, r7
 800a5c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a5ca:	f04f 0a00 	mov.w	sl, #0
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1a0      	bne.n	800a516 <_strtod_l+0x82e>
 800a5d4:	e5de      	b.n	800a194 <_strtod_l+0x4ac>
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5da:	e7ea      	b.n	800a5b2 <_strtod_l+0x8ca>
 800a5dc:	460b      	mov	r3, r1
 800a5de:	e7e8      	b.n	800a5b2 <_strtod_l+0x8ca>
 800a5e0:	ea53 030a 	orrs.w	r3, r3, sl
 800a5e4:	d088      	beq.n	800a4f8 <_strtod_l+0x810>
 800a5e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5e8:	b1db      	cbz	r3, 800a622 <_strtod_l+0x93a>
 800a5ea:	423b      	tst	r3, r7
 800a5ec:	d0ef      	beq.n	800a5ce <_strtod_l+0x8e6>
 800a5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5f0:	9a04      	ldr	r2, [sp, #16]
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	b1c3      	cbz	r3, 800a62a <_strtod_l+0x942>
 800a5f8:	f7ff fb58 	bl	8009cac <sulp>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a604:	f7f5 fe6a 	bl	80002dc <__adddf3>
 800a608:	4682      	mov	sl, r0
 800a60a:	468b      	mov	fp, r1
 800a60c:	e7df      	b.n	800a5ce <_strtod_l+0x8e6>
 800a60e:	4013      	ands	r3, r2
 800a610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a61c:	f04f 3aff 	mov.w	sl, #4294967295
 800a620:	e7d5      	b.n	800a5ce <_strtod_l+0x8e6>
 800a622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a624:	ea13 0f0a 	tst.w	r3, sl
 800a628:	e7e0      	b.n	800a5ec <_strtod_l+0x904>
 800a62a:	f7ff fb3f 	bl	8009cac <sulp>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a636:	f7f5 fe4f 	bl	80002d8 <__aeabi_dsub>
 800a63a:	2200      	movs	r2, #0
 800a63c:	2300      	movs	r3, #0
 800a63e:	4682      	mov	sl, r0
 800a640:	468b      	mov	fp, r1
 800a642:	f7f6 fa69 	bl	8000b18 <__aeabi_dcmpeq>
 800a646:	2800      	cmp	r0, #0
 800a648:	d0c1      	beq.n	800a5ce <_strtod_l+0x8e6>
 800a64a:	e60e      	b.n	800a26a <_strtod_l+0x582>
 800a64c:	fffffc02 	.word	0xfffffc02
 800a650:	7ff00000 	.word	0x7ff00000
 800a654:	39500000 	.word	0x39500000
 800a658:	000fffff 	.word	0x000fffff
 800a65c:	7fefffff 	.word	0x7fefffff
 800a660:	0800ee20 	.word	0x0800ee20
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	f002 fb0a 	bl	800cc80 <__ratio>
 800a66c:	ec59 8b10 	vmov	r8, r9, d0
 800a670:	ee10 0a10 	vmov	r0, s0
 800a674:	2200      	movs	r2, #0
 800a676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f6 fa60 	bl	8000b40 <__aeabi_dcmple>
 800a680:	2800      	cmp	r0, #0
 800a682:	d07c      	beq.n	800a77e <_strtod_l+0xa96>
 800a684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d04c      	beq.n	800a724 <_strtod_l+0xa3c>
 800a68a:	4b95      	ldr	r3, [pc, #596]	; (800a8e0 <_strtod_l+0xbf8>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a8e0 <_strtod_l+0xbf8>
 800a696:	f04f 0800 	mov.w	r8, #0
 800a69a:	4b92      	ldr	r3, [pc, #584]	; (800a8e4 <_strtod_l+0xbfc>)
 800a69c:	403b      	ands	r3, r7
 800a69e:	9311      	str	r3, [sp, #68]	; 0x44
 800a6a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6a2:	4b91      	ldr	r3, [pc, #580]	; (800a8e8 <_strtod_l+0xc00>)
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	f040 80b2 	bne.w	800a80e <_strtod_l+0xb26>
 800a6aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a6b6:	ec4b ab10 	vmov	d0, sl, fp
 800a6ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a6be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6c2:	f002 fa05 	bl	800cad0 <__ulp>
 800a6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6ca:	ec53 2b10 	vmov	r2, r3, d0
 800a6ce:	f7f5 ffbb 	bl	8000648 <__aeabi_dmul>
 800a6d2:	4652      	mov	r2, sl
 800a6d4:	465b      	mov	r3, fp
 800a6d6:	f7f5 fe01 	bl	80002dc <__adddf3>
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4981      	ldr	r1, [pc, #516]	; (800a8e4 <_strtod_l+0xbfc>)
 800a6de:	4a83      	ldr	r2, [pc, #524]	; (800a8ec <_strtod_l+0xc04>)
 800a6e0:	4019      	ands	r1, r3
 800a6e2:	4291      	cmp	r1, r2
 800a6e4:	4682      	mov	sl, r0
 800a6e6:	d95e      	bls.n	800a7a6 <_strtod_l+0xabe>
 800a6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d103      	bne.n	800a6fa <_strtod_l+0xa12>
 800a6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	f43f ad43 	beq.w	800a180 <_strtod_l+0x498>
 800a6fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a8f8 <_strtod_l+0xc10>
 800a6fe:	f04f 3aff 	mov.w	sl, #4294967295
 800a702:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a704:	4620      	mov	r0, r4
 800a706:	f001 feb7 	bl	800c478 <_Bfree>
 800a70a:	9907      	ldr	r1, [sp, #28]
 800a70c:	4620      	mov	r0, r4
 800a70e:	f001 feb3 	bl	800c478 <_Bfree>
 800a712:	4631      	mov	r1, r6
 800a714:	4620      	mov	r0, r4
 800a716:	f001 feaf 	bl	800c478 <_Bfree>
 800a71a:	4629      	mov	r1, r5
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 feab 	bl	800c478 <_Bfree>
 800a722:	e613      	b.n	800a34c <_strtod_l+0x664>
 800a724:	f1ba 0f00 	cmp.w	sl, #0
 800a728:	d11b      	bne.n	800a762 <_strtod_l+0xa7a>
 800a72a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a72e:	b9f3      	cbnz	r3, 800a76e <_strtod_l+0xa86>
 800a730:	4b6b      	ldr	r3, [pc, #428]	; (800a8e0 <_strtod_l+0xbf8>)
 800a732:	2200      	movs	r2, #0
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f6 f9f8 	bl	8000b2c <__aeabi_dcmplt>
 800a73c:	b9d0      	cbnz	r0, 800a774 <_strtod_l+0xa8c>
 800a73e:	4640      	mov	r0, r8
 800a740:	4649      	mov	r1, r9
 800a742:	4b6b      	ldr	r3, [pc, #428]	; (800a8f0 <_strtod_l+0xc08>)
 800a744:	2200      	movs	r2, #0
 800a746:	f7f5 ff7f 	bl	8000648 <__aeabi_dmul>
 800a74a:	4680      	mov	r8, r0
 800a74c:	4689      	mov	r9, r1
 800a74e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a752:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a756:	931b      	str	r3, [sp, #108]	; 0x6c
 800a758:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a75c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a760:	e79b      	b.n	800a69a <_strtod_l+0x9b2>
 800a762:	f1ba 0f01 	cmp.w	sl, #1
 800a766:	d102      	bne.n	800a76e <_strtod_l+0xa86>
 800a768:	2f00      	cmp	r7, #0
 800a76a:	f43f ad7e 	beq.w	800a26a <_strtod_l+0x582>
 800a76e:	4b61      	ldr	r3, [pc, #388]	; (800a8f4 <_strtod_l+0xc0c>)
 800a770:	2200      	movs	r2, #0
 800a772:	e78c      	b.n	800a68e <_strtod_l+0x9a6>
 800a774:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a8f0 <_strtod_l+0xc08>
 800a778:	f04f 0800 	mov.w	r8, #0
 800a77c:	e7e7      	b.n	800a74e <_strtod_l+0xa66>
 800a77e:	4b5c      	ldr	r3, [pc, #368]	; (800a8f0 <_strtod_l+0xc08>)
 800a780:	4640      	mov	r0, r8
 800a782:	4649      	mov	r1, r9
 800a784:	2200      	movs	r2, #0
 800a786:	f7f5 ff5f 	bl	8000648 <__aeabi_dmul>
 800a78a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a78c:	4680      	mov	r8, r0
 800a78e:	4689      	mov	r9, r1
 800a790:	b933      	cbnz	r3, 800a7a0 <_strtod_l+0xab8>
 800a792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a796:	9012      	str	r0, [sp, #72]	; 0x48
 800a798:	9313      	str	r3, [sp, #76]	; 0x4c
 800a79a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a79e:	e7dd      	b.n	800a75c <_strtod_l+0xa74>
 800a7a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a7a4:	e7f9      	b.n	800a79a <_strtod_l+0xab2>
 800a7a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a7aa:	9b04      	ldr	r3, [sp, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1a8      	bne.n	800a702 <_strtod_l+0xa1a>
 800a7b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7b6:	0d1b      	lsrs	r3, r3, #20
 800a7b8:	051b      	lsls	r3, r3, #20
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d1a1      	bne.n	800a702 <_strtod_l+0xa1a>
 800a7be:	4640      	mov	r0, r8
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	f7f6 faa1 	bl	8000d08 <__aeabi_d2lz>
 800a7c6:	f7f5 ff11 	bl	80005ec <__aeabi_l2d>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	4649      	mov	r1, r9
 800a7d2:	f7f5 fd81 	bl	80002d8 <__aeabi_dsub>
 800a7d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7dc:	ea43 030a 	orr.w	r3, r3, sl
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	4680      	mov	r8, r0
 800a7e4:	4689      	mov	r9, r1
 800a7e6:	d053      	beq.n	800a890 <_strtod_l+0xba8>
 800a7e8:	a335      	add	r3, pc, #212	; (adr r3, 800a8c0 <_strtod_l+0xbd8>)
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	f7f6 f99d 	bl	8000b2c <__aeabi_dcmplt>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	f47f acce 	bne.w	800a194 <_strtod_l+0x4ac>
 800a7f8:	a333      	add	r3, pc, #204	; (adr r3, 800a8c8 <_strtod_l+0xbe0>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f6 f9b1 	bl	8000b68 <__aeabi_dcmpgt>
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f af7b 	beq.w	800a702 <_strtod_l+0xa1a>
 800a80c:	e4c2      	b.n	800a194 <_strtod_l+0x4ac>
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	b333      	cbz	r3, 800a860 <_strtod_l+0xb78>
 800a812:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a814:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a818:	d822      	bhi.n	800a860 <_strtod_l+0xb78>
 800a81a:	a32d      	add	r3, pc, #180	; (adr r3, 800a8d0 <_strtod_l+0xbe8>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	4640      	mov	r0, r8
 800a822:	4649      	mov	r1, r9
 800a824:	f7f6 f98c 	bl	8000b40 <__aeabi_dcmple>
 800a828:	b1a0      	cbz	r0, 800a854 <_strtod_l+0xb6c>
 800a82a:	4649      	mov	r1, r9
 800a82c:	4640      	mov	r0, r8
 800a82e:	f7f6 f9e3 	bl	8000bf8 <__aeabi_d2uiz>
 800a832:	2801      	cmp	r0, #1
 800a834:	bf38      	it	cc
 800a836:	2001      	movcc	r0, #1
 800a838:	f7f5 fe8c 	bl	8000554 <__aeabi_ui2d>
 800a83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a83e:	4680      	mov	r8, r0
 800a840:	4689      	mov	r9, r1
 800a842:	bb13      	cbnz	r3, 800a88a <_strtod_l+0xba2>
 800a844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a848:	9014      	str	r0, [sp, #80]	; 0x50
 800a84a:	9315      	str	r3, [sp, #84]	; 0x54
 800a84c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a850:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a856:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a858:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a85c:	1a9b      	subs	r3, r3, r2
 800a85e:	930d      	str	r3, [sp, #52]	; 0x34
 800a860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a864:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a868:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a86c:	f002 f930 	bl	800cad0 <__ulp>
 800a870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a874:	ec53 2b10 	vmov	r2, r3, d0
 800a878:	f7f5 fee6 	bl	8000648 <__aeabi_dmul>
 800a87c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a880:	f7f5 fd2c 	bl	80002dc <__adddf3>
 800a884:	4682      	mov	sl, r0
 800a886:	468b      	mov	fp, r1
 800a888:	e78f      	b.n	800a7aa <_strtod_l+0xac2>
 800a88a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a88e:	e7dd      	b.n	800a84c <_strtod_l+0xb64>
 800a890:	a311      	add	r3, pc, #68	; (adr r3, 800a8d8 <_strtod_l+0xbf0>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f6 f949 	bl	8000b2c <__aeabi_dcmplt>
 800a89a:	e7b4      	b.n	800a806 <_strtod_l+0xb1e>
 800a89c:	2300      	movs	r3, #0
 800a89e:	930e      	str	r3, [sp, #56]	; 0x38
 800a8a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	f7ff ba65 	b.w	8009d74 <_strtod_l+0x8c>
 800a8aa:	2b65      	cmp	r3, #101	; 0x65
 800a8ac:	f43f ab5d 	beq.w	8009f6a <_strtod_l+0x282>
 800a8b0:	2b45      	cmp	r3, #69	; 0x45
 800a8b2:	f43f ab5a 	beq.w	8009f6a <_strtod_l+0x282>
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f7ff bb92 	b.w	8009fe0 <_strtod_l+0x2f8>
 800a8bc:	f3af 8000 	nop.w
 800a8c0:	94a03595 	.word	0x94a03595
 800a8c4:	3fdfffff 	.word	0x3fdfffff
 800a8c8:	35afe535 	.word	0x35afe535
 800a8cc:	3fe00000 	.word	0x3fe00000
 800a8d0:	ffc00000 	.word	0xffc00000
 800a8d4:	41dfffff 	.word	0x41dfffff
 800a8d8:	94a03595 	.word	0x94a03595
 800a8dc:	3fcfffff 	.word	0x3fcfffff
 800a8e0:	3ff00000 	.word	0x3ff00000
 800a8e4:	7ff00000 	.word	0x7ff00000
 800a8e8:	7fe00000 	.word	0x7fe00000
 800a8ec:	7c9fffff 	.word	0x7c9fffff
 800a8f0:	3fe00000 	.word	0x3fe00000
 800a8f4:	bff00000 	.word	0xbff00000
 800a8f8:	7fefffff 	.word	0x7fefffff

0800a8fc <strtod>:
 800a8fc:	460a      	mov	r2, r1
 800a8fe:	4601      	mov	r1, r0
 800a900:	4802      	ldr	r0, [pc, #8]	; (800a90c <strtod+0x10>)
 800a902:	4b03      	ldr	r3, [pc, #12]	; (800a910 <strtod+0x14>)
 800a904:	6800      	ldr	r0, [r0, #0]
 800a906:	f7ff b9ef 	b.w	8009ce8 <_strtod_l>
 800a90a:	bf00      	nop
 800a90c:	2000002c 	.word	0x2000002c
 800a910:	20000094 	.word	0x20000094

0800a914 <_strtol_l.isra.0>:
 800a914:	2b01      	cmp	r3, #1
 800a916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a91a:	d001      	beq.n	800a920 <_strtol_l.isra.0+0xc>
 800a91c:	2b24      	cmp	r3, #36	; 0x24
 800a91e:	d906      	bls.n	800a92e <_strtol_l.isra.0+0x1a>
 800a920:	f7fe fc72 	bl	8009208 <__errno>
 800a924:	2316      	movs	r3, #22
 800a926:	6003      	str	r3, [r0, #0]
 800a928:	2000      	movs	r0, #0
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	4f3a      	ldr	r7, [pc, #232]	; (800aa18 <_strtol_l.isra.0+0x104>)
 800a930:	468e      	mov	lr, r1
 800a932:	4676      	mov	r6, lr
 800a934:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a938:	5de5      	ldrb	r5, [r4, r7]
 800a93a:	f015 0508 	ands.w	r5, r5, #8
 800a93e:	d1f8      	bne.n	800a932 <_strtol_l.isra.0+0x1e>
 800a940:	2c2d      	cmp	r4, #45	; 0x2d
 800a942:	d134      	bne.n	800a9ae <_strtol_l.isra.0+0x9a>
 800a944:	f89e 4000 	ldrb.w	r4, [lr]
 800a948:	f04f 0801 	mov.w	r8, #1
 800a94c:	f106 0e02 	add.w	lr, r6, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d05c      	beq.n	800aa0e <_strtol_l.isra.0+0xfa>
 800a954:	2b10      	cmp	r3, #16
 800a956:	d10c      	bne.n	800a972 <_strtol_l.isra.0+0x5e>
 800a958:	2c30      	cmp	r4, #48	; 0x30
 800a95a:	d10a      	bne.n	800a972 <_strtol_l.isra.0+0x5e>
 800a95c:	f89e 4000 	ldrb.w	r4, [lr]
 800a960:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a964:	2c58      	cmp	r4, #88	; 0x58
 800a966:	d14d      	bne.n	800aa04 <_strtol_l.isra.0+0xf0>
 800a968:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a96c:	2310      	movs	r3, #16
 800a96e:	f10e 0e02 	add.w	lr, lr, #2
 800a972:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a976:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a97a:	2600      	movs	r6, #0
 800a97c:	fbbc f9f3 	udiv	r9, ip, r3
 800a980:	4635      	mov	r5, r6
 800a982:	fb03 ca19 	mls	sl, r3, r9, ip
 800a986:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a98a:	2f09      	cmp	r7, #9
 800a98c:	d818      	bhi.n	800a9c0 <_strtol_l.isra.0+0xac>
 800a98e:	463c      	mov	r4, r7
 800a990:	42a3      	cmp	r3, r4
 800a992:	dd24      	ble.n	800a9de <_strtol_l.isra.0+0xca>
 800a994:	2e00      	cmp	r6, #0
 800a996:	db1f      	blt.n	800a9d8 <_strtol_l.isra.0+0xc4>
 800a998:	45a9      	cmp	r9, r5
 800a99a:	d31d      	bcc.n	800a9d8 <_strtol_l.isra.0+0xc4>
 800a99c:	d101      	bne.n	800a9a2 <_strtol_l.isra.0+0x8e>
 800a99e:	45a2      	cmp	sl, r4
 800a9a0:	db1a      	blt.n	800a9d8 <_strtol_l.isra.0+0xc4>
 800a9a2:	fb05 4503 	mla	r5, r5, r3, r4
 800a9a6:	2601      	movs	r6, #1
 800a9a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a9ac:	e7eb      	b.n	800a986 <_strtol_l.isra.0+0x72>
 800a9ae:	2c2b      	cmp	r4, #43	; 0x2b
 800a9b0:	bf08      	it	eq
 800a9b2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a9b6:	46a8      	mov	r8, r5
 800a9b8:	bf08      	it	eq
 800a9ba:	f106 0e02 	addeq.w	lr, r6, #2
 800a9be:	e7c7      	b.n	800a950 <_strtol_l.isra.0+0x3c>
 800a9c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a9c4:	2f19      	cmp	r7, #25
 800a9c6:	d801      	bhi.n	800a9cc <_strtol_l.isra.0+0xb8>
 800a9c8:	3c37      	subs	r4, #55	; 0x37
 800a9ca:	e7e1      	b.n	800a990 <_strtol_l.isra.0+0x7c>
 800a9cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a9d0:	2f19      	cmp	r7, #25
 800a9d2:	d804      	bhi.n	800a9de <_strtol_l.isra.0+0xca>
 800a9d4:	3c57      	subs	r4, #87	; 0x57
 800a9d6:	e7db      	b.n	800a990 <_strtol_l.isra.0+0x7c>
 800a9d8:	f04f 36ff 	mov.w	r6, #4294967295
 800a9dc:	e7e4      	b.n	800a9a8 <_strtol_l.isra.0+0x94>
 800a9de:	2e00      	cmp	r6, #0
 800a9e0:	da05      	bge.n	800a9ee <_strtol_l.isra.0+0xda>
 800a9e2:	2322      	movs	r3, #34	; 0x22
 800a9e4:	6003      	str	r3, [r0, #0]
 800a9e6:	4665      	mov	r5, ip
 800a9e8:	b942      	cbnz	r2, 800a9fc <_strtol_l.isra.0+0xe8>
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	e79d      	b.n	800a92a <_strtol_l.isra.0+0x16>
 800a9ee:	f1b8 0f00 	cmp.w	r8, #0
 800a9f2:	d000      	beq.n	800a9f6 <_strtol_l.isra.0+0xe2>
 800a9f4:	426d      	negs	r5, r5
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d0f7      	beq.n	800a9ea <_strtol_l.isra.0+0xd6>
 800a9fa:	b10e      	cbz	r6, 800aa00 <_strtol_l.isra.0+0xec>
 800a9fc:	f10e 31ff 	add.w	r1, lr, #4294967295
 800aa00:	6011      	str	r1, [r2, #0]
 800aa02:	e7f2      	b.n	800a9ea <_strtol_l.isra.0+0xd6>
 800aa04:	2430      	movs	r4, #48	; 0x30
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1b3      	bne.n	800a972 <_strtol_l.isra.0+0x5e>
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	e7b1      	b.n	800a972 <_strtol_l.isra.0+0x5e>
 800aa0e:	2c30      	cmp	r4, #48	; 0x30
 800aa10:	d0a4      	beq.n	800a95c <_strtol_l.isra.0+0x48>
 800aa12:	230a      	movs	r3, #10
 800aa14:	e7ad      	b.n	800a972 <_strtol_l.isra.0+0x5e>
 800aa16:	bf00      	nop
 800aa18:	0800ee49 	.word	0x0800ee49

0800aa1c <strtol>:
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	460a      	mov	r2, r1
 800aa20:	4601      	mov	r1, r0
 800aa22:	4802      	ldr	r0, [pc, #8]	; (800aa2c <strtol+0x10>)
 800aa24:	6800      	ldr	r0, [r0, #0]
 800aa26:	f7ff bf75 	b.w	800a914 <_strtol_l.isra.0>
 800aa2a:	bf00      	nop
 800aa2c:	2000002c 	.word	0x2000002c

0800aa30 <__swbuf_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	460e      	mov	r6, r1
 800aa34:	4614      	mov	r4, r2
 800aa36:	4605      	mov	r5, r0
 800aa38:	b118      	cbz	r0, 800aa42 <__swbuf_r+0x12>
 800aa3a:	6983      	ldr	r3, [r0, #24]
 800aa3c:	b90b      	cbnz	r3, 800aa42 <__swbuf_r+0x12>
 800aa3e:	f001 f849 	bl	800bad4 <__sinit>
 800aa42:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <__swbuf_r+0x98>)
 800aa44:	429c      	cmp	r4, r3
 800aa46:	d12b      	bne.n	800aaa0 <__swbuf_r+0x70>
 800aa48:	686c      	ldr	r4, [r5, #4]
 800aa4a:	69a3      	ldr	r3, [r4, #24]
 800aa4c:	60a3      	str	r3, [r4, #8]
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	071a      	lsls	r2, r3, #28
 800aa52:	d52f      	bpl.n	800aab4 <__swbuf_r+0x84>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	b36b      	cbz	r3, 800aab4 <__swbuf_r+0x84>
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	6820      	ldr	r0, [r4, #0]
 800aa5c:	1ac0      	subs	r0, r0, r3
 800aa5e:	6963      	ldr	r3, [r4, #20]
 800aa60:	b2f6      	uxtb	r6, r6
 800aa62:	4283      	cmp	r3, r0
 800aa64:	4637      	mov	r7, r6
 800aa66:	dc04      	bgt.n	800aa72 <__swbuf_r+0x42>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 ff9e 	bl	800b9ac <_fflush_r>
 800aa70:	bb30      	cbnz	r0, 800aac0 <__swbuf_r+0x90>
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	60a3      	str	r3, [r4, #8]
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	6022      	str	r2, [r4, #0]
 800aa7e:	701e      	strb	r6, [r3, #0]
 800aa80:	6963      	ldr	r3, [r4, #20]
 800aa82:	3001      	adds	r0, #1
 800aa84:	4283      	cmp	r3, r0
 800aa86:	d004      	beq.n	800aa92 <__swbuf_r+0x62>
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	07db      	lsls	r3, r3, #31
 800aa8c:	d506      	bpl.n	800aa9c <__swbuf_r+0x6c>
 800aa8e:	2e0a      	cmp	r6, #10
 800aa90:	d104      	bne.n	800aa9c <__swbuf_r+0x6c>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4628      	mov	r0, r5
 800aa96:	f000 ff89 	bl	800b9ac <_fflush_r>
 800aa9a:	b988      	cbnz	r0, 800aac0 <__swbuf_r+0x90>
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <__swbuf_r+0x9c>)
 800aaa2:	429c      	cmp	r4, r3
 800aaa4:	d101      	bne.n	800aaaa <__swbuf_r+0x7a>
 800aaa6:	68ac      	ldr	r4, [r5, #8]
 800aaa8:	e7cf      	b.n	800aa4a <__swbuf_r+0x1a>
 800aaaa:	4b09      	ldr	r3, [pc, #36]	; (800aad0 <__swbuf_r+0xa0>)
 800aaac:	429c      	cmp	r4, r3
 800aaae:	bf08      	it	eq
 800aab0:	68ec      	ldreq	r4, [r5, #12]
 800aab2:	e7ca      	b.n	800aa4a <__swbuf_r+0x1a>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f80c 	bl	800aad4 <__swsetup_r>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d0cb      	beq.n	800aa58 <__swbuf_r+0x28>
 800aac0:	f04f 37ff 	mov.w	r7, #4294967295
 800aac4:	e7ea      	b.n	800aa9c <__swbuf_r+0x6c>
 800aac6:	bf00      	nop
 800aac8:	0800f000 	.word	0x0800f000
 800aacc:	0800f020 	.word	0x0800f020
 800aad0:	0800efe0 	.word	0x0800efe0

0800aad4 <__swsetup_r>:
 800aad4:	4b32      	ldr	r3, [pc, #200]	; (800aba0 <__swsetup_r+0xcc>)
 800aad6:	b570      	push	{r4, r5, r6, lr}
 800aad8:	681d      	ldr	r5, [r3, #0]
 800aada:	4606      	mov	r6, r0
 800aadc:	460c      	mov	r4, r1
 800aade:	b125      	cbz	r5, 800aaea <__swsetup_r+0x16>
 800aae0:	69ab      	ldr	r3, [r5, #24]
 800aae2:	b913      	cbnz	r3, 800aaea <__swsetup_r+0x16>
 800aae4:	4628      	mov	r0, r5
 800aae6:	f000 fff5 	bl	800bad4 <__sinit>
 800aaea:	4b2e      	ldr	r3, [pc, #184]	; (800aba4 <__swsetup_r+0xd0>)
 800aaec:	429c      	cmp	r4, r3
 800aaee:	d10f      	bne.n	800ab10 <__swsetup_r+0x3c>
 800aaf0:	686c      	ldr	r4, [r5, #4]
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf8:	0719      	lsls	r1, r3, #28
 800aafa:	d42c      	bmi.n	800ab56 <__swsetup_r+0x82>
 800aafc:	06dd      	lsls	r5, r3, #27
 800aafe:	d411      	bmi.n	800ab24 <__swsetup_r+0x50>
 800ab00:	2309      	movs	r3, #9
 800ab02:	6033      	str	r3, [r6, #0]
 800ab04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0e:	e03e      	b.n	800ab8e <__swsetup_r+0xba>
 800ab10:	4b25      	ldr	r3, [pc, #148]	; (800aba8 <__swsetup_r+0xd4>)
 800ab12:	429c      	cmp	r4, r3
 800ab14:	d101      	bne.n	800ab1a <__swsetup_r+0x46>
 800ab16:	68ac      	ldr	r4, [r5, #8]
 800ab18:	e7eb      	b.n	800aaf2 <__swsetup_r+0x1e>
 800ab1a:	4b24      	ldr	r3, [pc, #144]	; (800abac <__swsetup_r+0xd8>)
 800ab1c:	429c      	cmp	r4, r3
 800ab1e:	bf08      	it	eq
 800ab20:	68ec      	ldreq	r4, [r5, #12]
 800ab22:	e7e6      	b.n	800aaf2 <__swsetup_r+0x1e>
 800ab24:	0758      	lsls	r0, r3, #29
 800ab26:	d512      	bpl.n	800ab4e <__swsetup_r+0x7a>
 800ab28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab2a:	b141      	cbz	r1, 800ab3e <__swsetup_r+0x6a>
 800ab2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab30:	4299      	cmp	r1, r3
 800ab32:	d002      	beq.n	800ab3a <__swsetup_r+0x66>
 800ab34:	4630      	mov	r0, r6
 800ab36:	f002 f929 	bl	800cd8c <_free_r>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	2300      	movs	r3, #0
 800ab48:	6063      	str	r3, [r4, #4]
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	89a3      	ldrh	r3, [r4, #12]
 800ab50:	f043 0308 	orr.w	r3, r3, #8
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	6923      	ldr	r3, [r4, #16]
 800ab58:	b94b      	cbnz	r3, 800ab6e <__swsetup_r+0x9a>
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab64:	d003      	beq.n	800ab6e <__swsetup_r+0x9a>
 800ab66:	4621      	mov	r1, r4
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f001 fbeb 	bl	800c344 <__smakebuf_r>
 800ab6e:	89a0      	ldrh	r0, [r4, #12]
 800ab70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab74:	f010 0301 	ands.w	r3, r0, #1
 800ab78:	d00a      	beq.n	800ab90 <__swsetup_r+0xbc>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60a3      	str	r3, [r4, #8]
 800ab7e:	6963      	ldr	r3, [r4, #20]
 800ab80:	425b      	negs	r3, r3
 800ab82:	61a3      	str	r3, [r4, #24]
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	b943      	cbnz	r3, 800ab9a <__swsetup_r+0xc6>
 800ab88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab8c:	d1ba      	bne.n	800ab04 <__swsetup_r+0x30>
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	0781      	lsls	r1, r0, #30
 800ab92:	bf58      	it	pl
 800ab94:	6963      	ldrpl	r3, [r4, #20]
 800ab96:	60a3      	str	r3, [r4, #8]
 800ab98:	e7f4      	b.n	800ab84 <__swsetup_r+0xb0>
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	e7f7      	b.n	800ab8e <__swsetup_r+0xba>
 800ab9e:	bf00      	nop
 800aba0:	2000002c 	.word	0x2000002c
 800aba4:	0800f000 	.word	0x0800f000
 800aba8:	0800f020 	.word	0x0800f020
 800abac:	0800efe0 	.word	0x0800efe0

0800abb0 <quorem>:
 800abb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	6903      	ldr	r3, [r0, #16]
 800abb6:	690c      	ldr	r4, [r1, #16]
 800abb8:	42a3      	cmp	r3, r4
 800abba:	4607      	mov	r7, r0
 800abbc:	f2c0 8081 	blt.w	800acc2 <quorem+0x112>
 800abc0:	3c01      	subs	r4, #1
 800abc2:	f101 0814 	add.w	r8, r1, #20
 800abc6:	f100 0514 	add.w	r5, r0, #20
 800abca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd8:	3301      	adds	r3, #1
 800abda:	429a      	cmp	r2, r3
 800abdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abe4:	fbb2 f6f3 	udiv	r6, r2, r3
 800abe8:	d331      	bcc.n	800ac4e <quorem+0x9e>
 800abea:	f04f 0e00 	mov.w	lr, #0
 800abee:	4640      	mov	r0, r8
 800abf0:	46ac      	mov	ip, r5
 800abf2:	46f2      	mov	sl, lr
 800abf4:	f850 2b04 	ldr.w	r2, [r0], #4
 800abf8:	b293      	uxth	r3, r2
 800abfa:	fb06 e303 	mla	r3, r6, r3, lr
 800abfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ebaa 0303 	sub.w	r3, sl, r3
 800ac08:	0c12      	lsrs	r2, r2, #16
 800ac0a:	f8dc a000 	ldr.w	sl, [ip]
 800ac0e:	fb06 e202 	mla	r2, r6, r2, lr
 800ac12:	fa13 f38a 	uxtah	r3, r3, sl
 800ac16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac1a:	fa1f fa82 	uxth.w	sl, r2
 800ac1e:	f8dc 2000 	ldr.w	r2, [ip]
 800ac22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ac26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac30:	4581      	cmp	r9, r0
 800ac32:	f84c 3b04 	str.w	r3, [ip], #4
 800ac36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac3a:	d2db      	bcs.n	800abf4 <quorem+0x44>
 800ac3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac40:	b92b      	cbnz	r3, 800ac4e <quorem+0x9e>
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	3b04      	subs	r3, #4
 800ac46:	429d      	cmp	r5, r3
 800ac48:	461a      	mov	r2, r3
 800ac4a:	d32e      	bcc.n	800acaa <quorem+0xfa>
 800ac4c:	613c      	str	r4, [r7, #16]
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f001 fe9a 	bl	800c988 <__mcmp>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	db24      	blt.n	800aca2 <quorem+0xf2>
 800ac58:	3601      	adds	r6, #1
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f04f 0c00 	mov.w	ip, #0
 800ac60:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac64:	f8d0 e000 	ldr.w	lr, [r0]
 800ac68:	b293      	uxth	r3, r2
 800ac6a:	ebac 0303 	sub.w	r3, ip, r3
 800ac6e:	0c12      	lsrs	r2, r2, #16
 800ac70:	fa13 f38e 	uxtah	r3, r3, lr
 800ac74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac82:	45c1      	cmp	r9, r8
 800ac84:	f840 3b04 	str.w	r3, [r0], #4
 800ac88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac8c:	d2e8      	bcs.n	800ac60 <quorem+0xb0>
 800ac8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac96:	b922      	cbnz	r2, 800aca2 <quorem+0xf2>
 800ac98:	3b04      	subs	r3, #4
 800ac9a:	429d      	cmp	r5, r3
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	d30a      	bcc.n	800acb6 <quorem+0x106>
 800aca0:	613c      	str	r4, [r7, #16]
 800aca2:	4630      	mov	r0, r6
 800aca4:	b003      	add	sp, #12
 800aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acaa:	6812      	ldr	r2, [r2, #0]
 800acac:	3b04      	subs	r3, #4
 800acae:	2a00      	cmp	r2, #0
 800acb0:	d1cc      	bne.n	800ac4c <quorem+0x9c>
 800acb2:	3c01      	subs	r4, #1
 800acb4:	e7c7      	b.n	800ac46 <quorem+0x96>
 800acb6:	6812      	ldr	r2, [r2, #0]
 800acb8:	3b04      	subs	r3, #4
 800acba:	2a00      	cmp	r2, #0
 800acbc:	d1f0      	bne.n	800aca0 <quorem+0xf0>
 800acbe:	3c01      	subs	r4, #1
 800acc0:	e7eb      	b.n	800ac9a <quorem+0xea>
 800acc2:	2000      	movs	r0, #0
 800acc4:	e7ee      	b.n	800aca4 <quorem+0xf4>
	...

0800acc8 <_dtoa_r>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	ed2d 8b02 	vpush	{d8}
 800acd0:	ec57 6b10 	vmov	r6, r7, d0
 800acd4:	b095      	sub	sp, #84	; 0x54
 800acd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800acd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800acdc:	9105      	str	r1, [sp, #20]
 800acde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ace2:	4604      	mov	r4, r0
 800ace4:	9209      	str	r2, [sp, #36]	; 0x24
 800ace6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ace8:	b975      	cbnz	r5, 800ad08 <_dtoa_r+0x40>
 800acea:	2010      	movs	r0, #16
 800acec:	f001 fb6a 	bl	800c3c4 <malloc>
 800acf0:	4602      	mov	r2, r0
 800acf2:	6260      	str	r0, [r4, #36]	; 0x24
 800acf4:	b920      	cbnz	r0, 800ad00 <_dtoa_r+0x38>
 800acf6:	4bb2      	ldr	r3, [pc, #712]	; (800afc0 <_dtoa_r+0x2f8>)
 800acf8:	21ea      	movs	r1, #234	; 0xea
 800acfa:	48b2      	ldr	r0, [pc, #712]	; (800afc4 <_dtoa_r+0x2fc>)
 800acfc:	f002 fad8 	bl	800d2b0 <__assert_func>
 800ad00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad04:	6005      	str	r5, [r0, #0]
 800ad06:	60c5      	str	r5, [r0, #12]
 800ad08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad0a:	6819      	ldr	r1, [r3, #0]
 800ad0c:	b151      	cbz	r1, 800ad24 <_dtoa_r+0x5c>
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	604a      	str	r2, [r1, #4]
 800ad12:	2301      	movs	r3, #1
 800ad14:	4093      	lsls	r3, r2
 800ad16:	608b      	str	r3, [r1, #8]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 fbad 	bl	800c478 <_Bfree>
 800ad1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	1e3b      	subs	r3, r7, #0
 800ad26:	bfb9      	ittee	lt
 800ad28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad2c:	9303      	strlt	r3, [sp, #12]
 800ad2e:	2300      	movge	r3, #0
 800ad30:	f8c8 3000 	strge.w	r3, [r8]
 800ad34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ad38:	4ba3      	ldr	r3, [pc, #652]	; (800afc8 <_dtoa_r+0x300>)
 800ad3a:	bfbc      	itt	lt
 800ad3c:	2201      	movlt	r2, #1
 800ad3e:	f8c8 2000 	strlt.w	r2, [r8]
 800ad42:	ea33 0309 	bics.w	r3, r3, r9
 800ad46:	d11b      	bne.n	800ad80 <_dtoa_r+0xb8>
 800ad48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad54:	4333      	orrs	r3, r6
 800ad56:	f000 857a 	beq.w	800b84e <_dtoa_r+0xb86>
 800ad5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad5c:	b963      	cbnz	r3, 800ad78 <_dtoa_r+0xb0>
 800ad5e:	4b9b      	ldr	r3, [pc, #620]	; (800afcc <_dtoa_r+0x304>)
 800ad60:	e024      	b.n	800adac <_dtoa_r+0xe4>
 800ad62:	4b9b      	ldr	r3, [pc, #620]	; (800afd0 <_dtoa_r+0x308>)
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	3308      	adds	r3, #8
 800ad68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	9800      	ldr	r0, [sp, #0]
 800ad6e:	b015      	add	sp, #84	; 0x54
 800ad70:	ecbd 8b02 	vpop	{d8}
 800ad74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad78:	4b94      	ldr	r3, [pc, #592]	; (800afcc <_dtoa_r+0x304>)
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	3303      	adds	r3, #3
 800ad7e:	e7f3      	b.n	800ad68 <_dtoa_r+0xa0>
 800ad80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad84:	2200      	movs	r2, #0
 800ad86:	ec51 0b17 	vmov	r0, r1, d7
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ad90:	f7f5 fec2 	bl	8000b18 <__aeabi_dcmpeq>
 800ad94:	4680      	mov	r8, r0
 800ad96:	b158      	cbz	r0, 800adb0 <_dtoa_r+0xe8>
 800ad98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 8551 	beq.w	800b848 <_dtoa_r+0xb80>
 800ada6:	488b      	ldr	r0, [pc, #556]	; (800afd4 <_dtoa_r+0x30c>)
 800ada8:	6018      	str	r0, [r3, #0]
 800adaa:	1e43      	subs	r3, r0, #1
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	e7dd      	b.n	800ad6c <_dtoa_r+0xa4>
 800adb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800adb4:	aa12      	add	r2, sp, #72	; 0x48
 800adb6:	a913      	add	r1, sp, #76	; 0x4c
 800adb8:	4620      	mov	r0, r4
 800adba:	f001 ff05 	bl	800cbc8 <__d2b>
 800adbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adc2:	4683      	mov	fp, r0
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	d07c      	beq.n	800aec2 <_dtoa_r+0x1fa>
 800adc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800adce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800add2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800add6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800adda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800adde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ade2:	4b7d      	ldr	r3, [pc, #500]	; (800afd8 <_dtoa_r+0x310>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	4630      	mov	r0, r6
 800ade8:	4639      	mov	r1, r7
 800adea:	f7f5 fa75 	bl	80002d8 <__aeabi_dsub>
 800adee:	a36e      	add	r3, pc, #440	; (adr r3, 800afa8 <_dtoa_r+0x2e0>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	f7f5 fc28 	bl	8000648 <__aeabi_dmul>
 800adf8:	a36d      	add	r3, pc, #436	; (adr r3, 800afb0 <_dtoa_r+0x2e8>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f7f5 fa6d 	bl	80002dc <__adddf3>
 800ae02:	4606      	mov	r6, r0
 800ae04:	4628      	mov	r0, r5
 800ae06:	460f      	mov	r7, r1
 800ae08:	f7f5 fbb4 	bl	8000574 <__aeabi_i2d>
 800ae0c:	a36a      	add	r3, pc, #424	; (adr r3, 800afb8 <_dtoa_r+0x2f0>)
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f7f5 fc19 	bl	8000648 <__aeabi_dmul>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	4639      	mov	r1, r7
 800ae1e:	f7f5 fa5d 	bl	80002dc <__adddf3>
 800ae22:	4606      	mov	r6, r0
 800ae24:	460f      	mov	r7, r1
 800ae26:	f7f5 febf 	bl	8000ba8 <__aeabi_d2iz>
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fe7a 	bl	8000b2c <__aeabi_dcmplt>
 800ae38:	b148      	cbz	r0, 800ae4e <_dtoa_r+0x186>
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	f7f5 fb9a 	bl	8000574 <__aeabi_i2d>
 800ae40:	4632      	mov	r2, r6
 800ae42:	463b      	mov	r3, r7
 800ae44:	f7f5 fe68 	bl	8000b18 <__aeabi_dcmpeq>
 800ae48:	b908      	cbnz	r0, 800ae4e <_dtoa_r+0x186>
 800ae4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae4e:	f1ba 0f16 	cmp.w	sl, #22
 800ae52:	d854      	bhi.n	800aefe <_dtoa_r+0x236>
 800ae54:	4b61      	ldr	r3, [pc, #388]	; (800afdc <_dtoa_r+0x314>)
 800ae56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae62:	f7f5 fe63 	bl	8000b2c <__aeabi_dcmplt>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d04b      	beq.n	800af02 <_dtoa_r+0x23a>
 800ae6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae6e:	2300      	movs	r3, #0
 800ae70:	930e      	str	r3, [sp, #56]	; 0x38
 800ae72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae74:	1b5d      	subs	r5, r3, r5
 800ae76:	1e6b      	subs	r3, r5, #1
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	bf43      	ittte	mi
 800ae7c:	2300      	movmi	r3, #0
 800ae7e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ae82:	9304      	strmi	r3, [sp, #16]
 800ae84:	f04f 0800 	movpl.w	r8, #0
 800ae88:	f1ba 0f00 	cmp.w	sl, #0
 800ae8c:	db3b      	blt.n	800af06 <_dtoa_r+0x23e>
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ae94:	4453      	add	r3, sl
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	9306      	str	r3, [sp, #24]
 800ae9c:	9b05      	ldr	r3, [sp, #20]
 800ae9e:	2b09      	cmp	r3, #9
 800aea0:	d869      	bhi.n	800af76 <_dtoa_r+0x2ae>
 800aea2:	2b05      	cmp	r3, #5
 800aea4:	bfc4      	itt	gt
 800aea6:	3b04      	subgt	r3, #4
 800aea8:	9305      	strgt	r3, [sp, #20]
 800aeaa:	9b05      	ldr	r3, [sp, #20]
 800aeac:	f1a3 0302 	sub.w	r3, r3, #2
 800aeb0:	bfcc      	ite	gt
 800aeb2:	2500      	movgt	r5, #0
 800aeb4:	2501      	movle	r5, #1
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d869      	bhi.n	800af8e <_dtoa_r+0x2c6>
 800aeba:	e8df f003 	tbb	[pc, r3]
 800aebe:	4e2c      	.short	0x4e2c
 800aec0:	5a4c      	.short	0x5a4c
 800aec2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aec6:	441d      	add	r5, r3
 800aec8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aecc:	2b20      	cmp	r3, #32
 800aece:	bfc1      	itttt	gt
 800aed0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aed4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aed8:	fa09 f303 	lslgt.w	r3, r9, r3
 800aedc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aee0:	bfda      	itte	le
 800aee2:	f1c3 0320 	rsble	r3, r3, #32
 800aee6:	fa06 f003 	lslle.w	r0, r6, r3
 800aeea:	4318      	orrgt	r0, r3
 800aeec:	f7f5 fb32 	bl	8000554 <__aeabi_ui2d>
 800aef0:	2301      	movs	r3, #1
 800aef2:	4606      	mov	r6, r0
 800aef4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aef8:	3d01      	subs	r5, #1
 800aefa:	9310      	str	r3, [sp, #64]	; 0x40
 800aefc:	e771      	b.n	800ade2 <_dtoa_r+0x11a>
 800aefe:	2301      	movs	r3, #1
 800af00:	e7b6      	b.n	800ae70 <_dtoa_r+0x1a8>
 800af02:	900e      	str	r0, [sp, #56]	; 0x38
 800af04:	e7b5      	b.n	800ae72 <_dtoa_r+0x1aa>
 800af06:	f1ca 0300 	rsb	r3, sl, #0
 800af0a:	9306      	str	r3, [sp, #24]
 800af0c:	2300      	movs	r3, #0
 800af0e:	eba8 080a 	sub.w	r8, r8, sl
 800af12:	930d      	str	r3, [sp, #52]	; 0x34
 800af14:	e7c2      	b.n	800ae9c <_dtoa_r+0x1d4>
 800af16:	2300      	movs	r3, #0
 800af18:	9308      	str	r3, [sp, #32]
 800af1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dc39      	bgt.n	800af94 <_dtoa_r+0x2cc>
 800af20:	f04f 0901 	mov.w	r9, #1
 800af24:	f8cd 9004 	str.w	r9, [sp, #4]
 800af28:	464b      	mov	r3, r9
 800af2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800af2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af30:	2200      	movs	r2, #0
 800af32:	6042      	str	r2, [r0, #4]
 800af34:	2204      	movs	r2, #4
 800af36:	f102 0614 	add.w	r6, r2, #20
 800af3a:	429e      	cmp	r6, r3
 800af3c:	6841      	ldr	r1, [r0, #4]
 800af3e:	d92f      	bls.n	800afa0 <_dtoa_r+0x2d8>
 800af40:	4620      	mov	r0, r4
 800af42:	f001 fa59 	bl	800c3f8 <_Balloc>
 800af46:	9000      	str	r0, [sp, #0]
 800af48:	2800      	cmp	r0, #0
 800af4a:	d14b      	bne.n	800afe4 <_dtoa_r+0x31c>
 800af4c:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <_dtoa_r+0x318>)
 800af4e:	4602      	mov	r2, r0
 800af50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af54:	e6d1      	b.n	800acfa <_dtoa_r+0x32>
 800af56:	2301      	movs	r3, #1
 800af58:	e7de      	b.n	800af18 <_dtoa_r+0x250>
 800af5a:	2300      	movs	r3, #0
 800af5c:	9308      	str	r3, [sp, #32]
 800af5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af60:	eb0a 0903 	add.w	r9, sl, r3
 800af64:	f109 0301 	add.w	r3, r9, #1
 800af68:	2b01      	cmp	r3, #1
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	bfb8      	it	lt
 800af6e:	2301      	movlt	r3, #1
 800af70:	e7dd      	b.n	800af2e <_dtoa_r+0x266>
 800af72:	2301      	movs	r3, #1
 800af74:	e7f2      	b.n	800af5c <_dtoa_r+0x294>
 800af76:	2501      	movs	r5, #1
 800af78:	2300      	movs	r3, #0
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	9508      	str	r5, [sp, #32]
 800af7e:	f04f 39ff 	mov.w	r9, #4294967295
 800af82:	2200      	movs	r2, #0
 800af84:	f8cd 9004 	str.w	r9, [sp, #4]
 800af88:	2312      	movs	r3, #18
 800af8a:	9209      	str	r2, [sp, #36]	; 0x24
 800af8c:	e7cf      	b.n	800af2e <_dtoa_r+0x266>
 800af8e:	2301      	movs	r3, #1
 800af90:	9308      	str	r3, [sp, #32]
 800af92:	e7f4      	b.n	800af7e <_dtoa_r+0x2b6>
 800af94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800af98:	f8cd 9004 	str.w	r9, [sp, #4]
 800af9c:	464b      	mov	r3, r9
 800af9e:	e7c6      	b.n	800af2e <_dtoa_r+0x266>
 800afa0:	3101      	adds	r1, #1
 800afa2:	6041      	str	r1, [r0, #4]
 800afa4:	0052      	lsls	r2, r2, #1
 800afa6:	e7c6      	b.n	800af36 <_dtoa_r+0x26e>
 800afa8:	636f4361 	.word	0x636f4361
 800afac:	3fd287a7 	.word	0x3fd287a7
 800afb0:	8b60c8b3 	.word	0x8b60c8b3
 800afb4:	3fc68a28 	.word	0x3fc68a28
 800afb8:	509f79fb 	.word	0x509f79fb
 800afbc:	3fd34413 	.word	0x3fd34413
 800afc0:	0800ef56 	.word	0x0800ef56
 800afc4:	0800ef6d 	.word	0x0800ef6d
 800afc8:	7ff00000 	.word	0x7ff00000
 800afcc:	0800ef52 	.word	0x0800ef52
 800afd0:	0800ef49 	.word	0x0800ef49
 800afd4:	0800edd5 	.word	0x0800edd5
 800afd8:	3ff80000 	.word	0x3ff80000
 800afdc:	0800f148 	.word	0x0800f148
 800afe0:	0800efcc 	.word	0x0800efcc
 800afe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe6:	9a00      	ldr	r2, [sp, #0]
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	2b0e      	cmp	r3, #14
 800afee:	f200 80ad 	bhi.w	800b14c <_dtoa_r+0x484>
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	f000 80aa 	beq.w	800b14c <_dtoa_r+0x484>
 800aff8:	f1ba 0f00 	cmp.w	sl, #0
 800affc:	dd36      	ble.n	800b06c <_dtoa_r+0x3a4>
 800affe:	4ac3      	ldr	r2, [pc, #780]	; (800b30c <_dtoa_r+0x644>)
 800b000:	f00a 030f 	and.w	r3, sl, #15
 800b004:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b008:	ed93 7b00 	vldr	d7, [r3]
 800b00c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b010:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b014:	eeb0 8a47 	vmov.f32	s16, s14
 800b018:	eef0 8a67 	vmov.f32	s17, s15
 800b01c:	d016      	beq.n	800b04c <_dtoa_r+0x384>
 800b01e:	4bbc      	ldr	r3, [pc, #752]	; (800b310 <_dtoa_r+0x648>)
 800b020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b028:	f7f5 fc38 	bl	800089c <__aeabi_ddiv>
 800b02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b030:	f007 070f 	and.w	r7, r7, #15
 800b034:	2503      	movs	r5, #3
 800b036:	4eb6      	ldr	r6, [pc, #728]	; (800b310 <_dtoa_r+0x648>)
 800b038:	b957      	cbnz	r7, 800b050 <_dtoa_r+0x388>
 800b03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b03e:	ec53 2b18 	vmov	r2, r3, d8
 800b042:	f7f5 fc2b 	bl	800089c <__aeabi_ddiv>
 800b046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b04a:	e029      	b.n	800b0a0 <_dtoa_r+0x3d8>
 800b04c:	2502      	movs	r5, #2
 800b04e:	e7f2      	b.n	800b036 <_dtoa_r+0x36e>
 800b050:	07f9      	lsls	r1, r7, #31
 800b052:	d508      	bpl.n	800b066 <_dtoa_r+0x39e>
 800b054:	ec51 0b18 	vmov	r0, r1, d8
 800b058:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b05c:	f7f5 faf4 	bl	8000648 <__aeabi_dmul>
 800b060:	ec41 0b18 	vmov	d8, r0, r1
 800b064:	3501      	adds	r5, #1
 800b066:	107f      	asrs	r7, r7, #1
 800b068:	3608      	adds	r6, #8
 800b06a:	e7e5      	b.n	800b038 <_dtoa_r+0x370>
 800b06c:	f000 80a6 	beq.w	800b1bc <_dtoa_r+0x4f4>
 800b070:	f1ca 0600 	rsb	r6, sl, #0
 800b074:	4ba5      	ldr	r3, [pc, #660]	; (800b30c <_dtoa_r+0x644>)
 800b076:	4fa6      	ldr	r7, [pc, #664]	; (800b310 <_dtoa_r+0x648>)
 800b078:	f006 020f 	and.w	r2, r6, #15
 800b07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b088:	f7f5 fade 	bl	8000648 <__aeabi_dmul>
 800b08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b090:	1136      	asrs	r6, r6, #4
 800b092:	2300      	movs	r3, #0
 800b094:	2502      	movs	r5, #2
 800b096:	2e00      	cmp	r6, #0
 800b098:	f040 8085 	bne.w	800b1a6 <_dtoa_r+0x4de>
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1d2      	bne.n	800b046 <_dtoa_r+0x37e>
 800b0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 808c 	beq.w	800b1c0 <_dtoa_r+0x4f8>
 800b0a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0ac:	4b99      	ldr	r3, [pc, #612]	; (800b314 <_dtoa_r+0x64c>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 fd3a 	bl	8000b2c <__aeabi_dcmplt>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	f000 8081 	beq.w	800b1c0 <_dtoa_r+0x4f8>
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d07d      	beq.n	800b1c0 <_dtoa_r+0x4f8>
 800b0c4:	f1b9 0f00 	cmp.w	r9, #0
 800b0c8:	dd3c      	ble.n	800b144 <_dtoa_r+0x47c>
 800b0ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b0ce:	9307      	str	r3, [sp, #28]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4b91      	ldr	r3, [pc, #580]	; (800b318 <_dtoa_r+0x650>)
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 fab6 	bl	8000648 <__aeabi_dmul>
 800b0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b0e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f7f5 fa42 	bl	8000574 <__aeabi_i2d>
 800b0f0:	4632      	mov	r2, r6
 800b0f2:	463b      	mov	r3, r7
 800b0f4:	f7f5 faa8 	bl	8000648 <__aeabi_dmul>
 800b0f8:	4b88      	ldr	r3, [pc, #544]	; (800b31c <_dtoa_r+0x654>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f7f5 f8ee 	bl	80002dc <__adddf3>
 800b100:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b108:	9303      	str	r3, [sp, #12]
 800b10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d15c      	bne.n	800b1ca <_dtoa_r+0x502>
 800b110:	4b83      	ldr	r3, [pc, #524]	; (800b320 <_dtoa_r+0x658>)
 800b112:	2200      	movs	r2, #0
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	f7f5 f8de 	bl	80002d8 <__aeabi_dsub>
 800b11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	f7f5 fd20 	bl	8000b68 <__aeabi_dcmpgt>
 800b128:	2800      	cmp	r0, #0
 800b12a:	f040 8296 	bne.w	800b65a <_dtoa_r+0x992>
 800b12e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b132:	4630      	mov	r0, r6
 800b134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b138:	4639      	mov	r1, r7
 800b13a:	f7f5 fcf7 	bl	8000b2c <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	f040 8288 	bne.w	800b654 <_dtoa_r+0x98c>
 800b144:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b14c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f2c0 8158 	blt.w	800b404 <_dtoa_r+0x73c>
 800b154:	f1ba 0f0e 	cmp.w	sl, #14
 800b158:	f300 8154 	bgt.w	800b404 <_dtoa_r+0x73c>
 800b15c:	4b6b      	ldr	r3, [pc, #428]	; (800b30c <_dtoa_r+0x644>)
 800b15e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b162:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f280 80e3 	bge.w	800b334 <_dtoa_r+0x66c>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f300 80df 	bgt.w	800b334 <_dtoa_r+0x66c>
 800b176:	f040 826d 	bne.w	800b654 <_dtoa_r+0x98c>
 800b17a:	4b69      	ldr	r3, [pc, #420]	; (800b320 <_dtoa_r+0x658>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	4640      	mov	r0, r8
 800b180:	4649      	mov	r1, r9
 800b182:	f7f5 fa61 	bl	8000648 <__aeabi_dmul>
 800b186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b18a:	f7f5 fce3 	bl	8000b54 <__aeabi_dcmpge>
 800b18e:	9e01      	ldr	r6, [sp, #4]
 800b190:	4637      	mov	r7, r6
 800b192:	2800      	cmp	r0, #0
 800b194:	f040 8243 	bne.w	800b61e <_dtoa_r+0x956>
 800b198:	9d00      	ldr	r5, [sp, #0]
 800b19a:	2331      	movs	r3, #49	; 0x31
 800b19c:	f805 3b01 	strb.w	r3, [r5], #1
 800b1a0:	f10a 0a01 	add.w	sl, sl, #1
 800b1a4:	e23f      	b.n	800b626 <_dtoa_r+0x95e>
 800b1a6:	07f2      	lsls	r2, r6, #31
 800b1a8:	d505      	bpl.n	800b1b6 <_dtoa_r+0x4ee>
 800b1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ae:	f7f5 fa4b 	bl	8000648 <__aeabi_dmul>
 800b1b2:	3501      	adds	r5, #1
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	1076      	asrs	r6, r6, #1
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	e76c      	b.n	800b096 <_dtoa_r+0x3ce>
 800b1bc:	2502      	movs	r5, #2
 800b1be:	e76f      	b.n	800b0a0 <_dtoa_r+0x3d8>
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b1c6:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c8:	e78d      	b.n	800b0e6 <_dtoa_r+0x41e>
 800b1ca:	9900      	ldr	r1, [sp, #0]
 800b1cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1d0:	4b4e      	ldr	r3, [pc, #312]	; (800b30c <_dtoa_r+0x644>)
 800b1d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1d6:	4401      	add	r1, r0
 800b1d8:	9102      	str	r1, [sp, #8]
 800b1da:	9908      	ldr	r1, [sp, #32]
 800b1dc:	eeb0 8a47 	vmov.f32	s16, s14
 800b1e0:	eef0 8a67 	vmov.f32	s17, s15
 800b1e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	d045      	beq.n	800b27c <_dtoa_r+0x5b4>
 800b1f0:	494c      	ldr	r1, [pc, #304]	; (800b324 <_dtoa_r+0x65c>)
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	f7f5 fb52 	bl	800089c <__aeabi_ddiv>
 800b1f8:	ec53 2b18 	vmov	r2, r3, d8
 800b1fc:	f7f5 f86c 	bl	80002d8 <__aeabi_dsub>
 800b200:	9d00      	ldr	r5, [sp, #0]
 800b202:	ec41 0b18 	vmov	d8, r0, r1
 800b206:	4639      	mov	r1, r7
 800b208:	4630      	mov	r0, r6
 800b20a:	f7f5 fccd 	bl	8000ba8 <__aeabi_d2iz>
 800b20e:	900c      	str	r0, [sp, #48]	; 0x30
 800b210:	f7f5 f9b0 	bl	8000574 <__aeabi_i2d>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4630      	mov	r0, r6
 800b21a:	4639      	mov	r1, r7
 800b21c:	f7f5 f85c 	bl	80002d8 <__aeabi_dsub>
 800b220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b222:	3330      	adds	r3, #48	; 0x30
 800b224:	f805 3b01 	strb.w	r3, [r5], #1
 800b228:	ec53 2b18 	vmov	r2, r3, d8
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	f7f5 fc7c 	bl	8000b2c <__aeabi_dcmplt>
 800b234:	2800      	cmp	r0, #0
 800b236:	d165      	bne.n	800b304 <_dtoa_r+0x63c>
 800b238:	4632      	mov	r2, r6
 800b23a:	463b      	mov	r3, r7
 800b23c:	4935      	ldr	r1, [pc, #212]	; (800b314 <_dtoa_r+0x64c>)
 800b23e:	2000      	movs	r0, #0
 800b240:	f7f5 f84a 	bl	80002d8 <__aeabi_dsub>
 800b244:	ec53 2b18 	vmov	r2, r3, d8
 800b248:	f7f5 fc70 	bl	8000b2c <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f040 80b9 	bne.w	800b3c4 <_dtoa_r+0x6fc>
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	429d      	cmp	r5, r3
 800b256:	f43f af75 	beq.w	800b144 <_dtoa_r+0x47c>
 800b25a:	4b2f      	ldr	r3, [pc, #188]	; (800b318 <_dtoa_r+0x650>)
 800b25c:	ec51 0b18 	vmov	r0, r1, d8
 800b260:	2200      	movs	r2, #0
 800b262:	f7f5 f9f1 	bl	8000648 <__aeabi_dmul>
 800b266:	4b2c      	ldr	r3, [pc, #176]	; (800b318 <_dtoa_r+0x650>)
 800b268:	ec41 0b18 	vmov	d8, r0, r1
 800b26c:	2200      	movs	r2, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 f9e9 	bl	8000648 <__aeabi_dmul>
 800b276:	4606      	mov	r6, r0
 800b278:	460f      	mov	r7, r1
 800b27a:	e7c4      	b.n	800b206 <_dtoa_r+0x53e>
 800b27c:	ec51 0b17 	vmov	r0, r1, d7
 800b280:	f7f5 f9e2 	bl	8000648 <__aeabi_dmul>
 800b284:	9b02      	ldr	r3, [sp, #8]
 800b286:	9d00      	ldr	r5, [sp, #0]
 800b288:	930c      	str	r3, [sp, #48]	; 0x30
 800b28a:	ec41 0b18 	vmov	d8, r0, r1
 800b28e:	4639      	mov	r1, r7
 800b290:	4630      	mov	r0, r6
 800b292:	f7f5 fc89 	bl	8000ba8 <__aeabi_d2iz>
 800b296:	9011      	str	r0, [sp, #68]	; 0x44
 800b298:	f7f5 f96c 	bl	8000574 <__aeabi_i2d>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f5 f818 	bl	80002d8 <__aeabi_dsub>
 800b2a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2aa:	3330      	adds	r3, #48	; 0x30
 800b2ac:	f805 3b01 	strb.w	r3, [r5], #1
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	429d      	cmp	r5, r3
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	460f      	mov	r7, r1
 800b2b8:	f04f 0200 	mov.w	r2, #0
 800b2bc:	d134      	bne.n	800b328 <_dtoa_r+0x660>
 800b2be:	4b19      	ldr	r3, [pc, #100]	; (800b324 <_dtoa_r+0x65c>)
 800b2c0:	ec51 0b18 	vmov	r0, r1, d8
 800b2c4:	f7f5 f80a 	bl	80002dc <__adddf3>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f5 fc4a 	bl	8000b68 <__aeabi_dcmpgt>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d175      	bne.n	800b3c4 <_dtoa_r+0x6fc>
 800b2d8:	ec53 2b18 	vmov	r2, r3, d8
 800b2dc:	4911      	ldr	r1, [pc, #68]	; (800b324 <_dtoa_r+0x65c>)
 800b2de:	2000      	movs	r0, #0
 800b2e0:	f7f4 fffa 	bl	80002d8 <__aeabi_dsub>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f5 fc1e 	bl	8000b2c <__aeabi_dcmplt>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	f43f af27 	beq.w	800b144 <_dtoa_r+0x47c>
 800b2f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2f8:	1e6b      	subs	r3, r5, #1
 800b2fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b2fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b300:	2b30      	cmp	r3, #48	; 0x30
 800b302:	d0f8      	beq.n	800b2f6 <_dtoa_r+0x62e>
 800b304:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b308:	e04a      	b.n	800b3a0 <_dtoa_r+0x6d8>
 800b30a:	bf00      	nop
 800b30c:	0800f148 	.word	0x0800f148
 800b310:	0800f120 	.word	0x0800f120
 800b314:	3ff00000 	.word	0x3ff00000
 800b318:	40240000 	.word	0x40240000
 800b31c:	401c0000 	.word	0x401c0000
 800b320:	40140000 	.word	0x40140000
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	4baf      	ldr	r3, [pc, #700]	; (800b5e8 <_dtoa_r+0x920>)
 800b32a:	f7f5 f98d 	bl	8000648 <__aeabi_dmul>
 800b32e:	4606      	mov	r6, r0
 800b330:	460f      	mov	r7, r1
 800b332:	e7ac      	b.n	800b28e <_dtoa_r+0x5c6>
 800b334:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b338:	9d00      	ldr	r5, [sp, #0]
 800b33a:	4642      	mov	r2, r8
 800b33c:	464b      	mov	r3, r9
 800b33e:	4630      	mov	r0, r6
 800b340:	4639      	mov	r1, r7
 800b342:	f7f5 faab 	bl	800089c <__aeabi_ddiv>
 800b346:	f7f5 fc2f 	bl	8000ba8 <__aeabi_d2iz>
 800b34a:	9002      	str	r0, [sp, #8]
 800b34c:	f7f5 f912 	bl	8000574 <__aeabi_i2d>
 800b350:	4642      	mov	r2, r8
 800b352:	464b      	mov	r3, r9
 800b354:	f7f5 f978 	bl	8000648 <__aeabi_dmul>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4630      	mov	r0, r6
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f4 ffba 	bl	80002d8 <__aeabi_dsub>
 800b364:	9e02      	ldr	r6, [sp, #8]
 800b366:	9f01      	ldr	r7, [sp, #4]
 800b368:	3630      	adds	r6, #48	; 0x30
 800b36a:	f805 6b01 	strb.w	r6, [r5], #1
 800b36e:	9e00      	ldr	r6, [sp, #0]
 800b370:	1bae      	subs	r6, r5, r6
 800b372:	42b7      	cmp	r7, r6
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	d137      	bne.n	800b3ea <_dtoa_r+0x722>
 800b37a:	f7f4 ffaf 	bl	80002dc <__adddf3>
 800b37e:	4642      	mov	r2, r8
 800b380:	464b      	mov	r3, r9
 800b382:	4606      	mov	r6, r0
 800b384:	460f      	mov	r7, r1
 800b386:	f7f5 fbef 	bl	8000b68 <__aeabi_dcmpgt>
 800b38a:	b9c8      	cbnz	r0, 800b3c0 <_dtoa_r+0x6f8>
 800b38c:	4642      	mov	r2, r8
 800b38e:	464b      	mov	r3, r9
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f5 fbc0 	bl	8000b18 <__aeabi_dcmpeq>
 800b398:	b110      	cbz	r0, 800b3a0 <_dtoa_r+0x6d8>
 800b39a:	9b02      	ldr	r3, [sp, #8]
 800b39c:	07d9      	lsls	r1, r3, #31
 800b39e:	d40f      	bmi.n	800b3c0 <_dtoa_r+0x6f8>
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4659      	mov	r1, fp
 800b3a4:	f001 f868 	bl	800c478 <_Bfree>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	702b      	strb	r3, [r5, #0]
 800b3ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3ae:	f10a 0001 	add.w	r0, sl, #1
 800b3b2:	6018      	str	r0, [r3, #0]
 800b3b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f43f acd8 	beq.w	800ad6c <_dtoa_r+0xa4>
 800b3bc:	601d      	str	r5, [r3, #0]
 800b3be:	e4d5      	b.n	800ad6c <_dtoa_r+0xa4>
 800b3c0:	f8cd a01c 	str.w	sl, [sp, #28]
 800b3c4:	462b      	mov	r3, r5
 800b3c6:	461d      	mov	r5, r3
 800b3c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3cc:	2a39      	cmp	r2, #57	; 0x39
 800b3ce:	d108      	bne.n	800b3e2 <_dtoa_r+0x71a>
 800b3d0:	9a00      	ldr	r2, [sp, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d1f7      	bne.n	800b3c6 <_dtoa_r+0x6fe>
 800b3d6:	9a07      	ldr	r2, [sp, #28]
 800b3d8:	9900      	ldr	r1, [sp, #0]
 800b3da:	3201      	adds	r2, #1
 800b3dc:	9207      	str	r2, [sp, #28]
 800b3de:	2230      	movs	r2, #48	; 0x30
 800b3e0:	700a      	strb	r2, [r1, #0]
 800b3e2:	781a      	ldrb	r2, [r3, #0]
 800b3e4:	3201      	adds	r2, #1
 800b3e6:	701a      	strb	r2, [r3, #0]
 800b3e8:	e78c      	b.n	800b304 <_dtoa_r+0x63c>
 800b3ea:	4b7f      	ldr	r3, [pc, #508]	; (800b5e8 <_dtoa_r+0x920>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f7f5 f92b 	bl	8000648 <__aeabi_dmul>
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	f7f5 fb8d 	bl	8000b18 <__aeabi_dcmpeq>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d09b      	beq.n	800b33a <_dtoa_r+0x672>
 800b402:	e7cd      	b.n	800b3a0 <_dtoa_r+0x6d8>
 800b404:	9a08      	ldr	r2, [sp, #32]
 800b406:	2a00      	cmp	r2, #0
 800b408:	f000 80c4 	beq.w	800b594 <_dtoa_r+0x8cc>
 800b40c:	9a05      	ldr	r2, [sp, #20]
 800b40e:	2a01      	cmp	r2, #1
 800b410:	f300 80a8 	bgt.w	800b564 <_dtoa_r+0x89c>
 800b414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b416:	2a00      	cmp	r2, #0
 800b418:	f000 80a0 	beq.w	800b55c <_dtoa_r+0x894>
 800b41c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b420:	9e06      	ldr	r6, [sp, #24]
 800b422:	4645      	mov	r5, r8
 800b424:	9a04      	ldr	r2, [sp, #16]
 800b426:	2101      	movs	r1, #1
 800b428:	441a      	add	r2, r3
 800b42a:	4620      	mov	r0, r4
 800b42c:	4498      	add	r8, r3
 800b42e:	9204      	str	r2, [sp, #16]
 800b430:	f001 f928 	bl	800c684 <__i2b>
 800b434:	4607      	mov	r7, r0
 800b436:	2d00      	cmp	r5, #0
 800b438:	dd0b      	ble.n	800b452 <_dtoa_r+0x78a>
 800b43a:	9b04      	ldr	r3, [sp, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	dd08      	ble.n	800b452 <_dtoa_r+0x78a>
 800b440:	42ab      	cmp	r3, r5
 800b442:	9a04      	ldr	r2, [sp, #16]
 800b444:	bfa8      	it	ge
 800b446:	462b      	movge	r3, r5
 800b448:	eba8 0803 	sub.w	r8, r8, r3
 800b44c:	1aed      	subs	r5, r5, r3
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	b1fb      	cbz	r3, 800b496 <_dtoa_r+0x7ce>
 800b456:	9b08      	ldr	r3, [sp, #32]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 809f 	beq.w	800b59c <_dtoa_r+0x8d4>
 800b45e:	2e00      	cmp	r6, #0
 800b460:	dd11      	ble.n	800b486 <_dtoa_r+0x7be>
 800b462:	4639      	mov	r1, r7
 800b464:	4632      	mov	r2, r6
 800b466:	4620      	mov	r0, r4
 800b468:	f001 f9c8 	bl	800c7fc <__pow5mult>
 800b46c:	465a      	mov	r2, fp
 800b46e:	4601      	mov	r1, r0
 800b470:	4607      	mov	r7, r0
 800b472:	4620      	mov	r0, r4
 800b474:	f001 f91c 	bl	800c6b0 <__multiply>
 800b478:	4659      	mov	r1, fp
 800b47a:	9007      	str	r0, [sp, #28]
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fffb 	bl	800c478 <_Bfree>
 800b482:	9b07      	ldr	r3, [sp, #28]
 800b484:	469b      	mov	fp, r3
 800b486:	9b06      	ldr	r3, [sp, #24]
 800b488:	1b9a      	subs	r2, r3, r6
 800b48a:	d004      	beq.n	800b496 <_dtoa_r+0x7ce>
 800b48c:	4659      	mov	r1, fp
 800b48e:	4620      	mov	r0, r4
 800b490:	f001 f9b4 	bl	800c7fc <__pow5mult>
 800b494:	4683      	mov	fp, r0
 800b496:	2101      	movs	r1, #1
 800b498:	4620      	mov	r0, r4
 800b49a:	f001 f8f3 	bl	800c684 <__i2b>
 800b49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	dd7c      	ble.n	800b5a0 <_dtoa_r+0x8d8>
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 f9a6 	bl	800c7fc <__pow5mult>
 800b4b0:	9b05      	ldr	r3, [sp, #20]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	dd76      	ble.n	800b5a6 <_dtoa_r+0x8de>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9306      	str	r3, [sp, #24]
 800b4bc:	6933      	ldr	r3, [r6, #16]
 800b4be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b4c2:	6918      	ldr	r0, [r3, #16]
 800b4c4:	f001 f88e 	bl	800c5e4 <__hi0bits>
 800b4c8:	f1c0 0020 	rsb	r0, r0, #32
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	4418      	add	r0, r3
 800b4d0:	f010 001f 	ands.w	r0, r0, #31
 800b4d4:	f000 8086 	beq.w	800b5e4 <_dtoa_r+0x91c>
 800b4d8:	f1c0 0320 	rsb	r3, r0, #32
 800b4dc:	2b04      	cmp	r3, #4
 800b4de:	dd7f      	ble.n	800b5e0 <_dtoa_r+0x918>
 800b4e0:	f1c0 001c 	rsb	r0, r0, #28
 800b4e4:	9b04      	ldr	r3, [sp, #16]
 800b4e6:	4403      	add	r3, r0
 800b4e8:	4480      	add	r8, r0
 800b4ea:	4405      	add	r5, r0
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	f1b8 0f00 	cmp.w	r8, #0
 800b4f2:	dd05      	ble.n	800b500 <_dtoa_r+0x838>
 800b4f4:	4659      	mov	r1, fp
 800b4f6:	4642      	mov	r2, r8
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f001 f9d9 	bl	800c8b0 <__lshift>
 800b4fe:	4683      	mov	fp, r0
 800b500:	9b04      	ldr	r3, [sp, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	dd05      	ble.n	800b512 <_dtoa_r+0x84a>
 800b506:	4631      	mov	r1, r6
 800b508:	461a      	mov	r2, r3
 800b50a:	4620      	mov	r0, r4
 800b50c:	f001 f9d0 	bl	800c8b0 <__lshift>
 800b510:	4606      	mov	r6, r0
 800b512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b514:	2b00      	cmp	r3, #0
 800b516:	d069      	beq.n	800b5ec <_dtoa_r+0x924>
 800b518:	4631      	mov	r1, r6
 800b51a:	4658      	mov	r0, fp
 800b51c:	f001 fa34 	bl	800c988 <__mcmp>
 800b520:	2800      	cmp	r0, #0
 800b522:	da63      	bge.n	800b5ec <_dtoa_r+0x924>
 800b524:	2300      	movs	r3, #0
 800b526:	4659      	mov	r1, fp
 800b528:	220a      	movs	r2, #10
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 ffc6 	bl	800c4bc <__multadd>
 800b530:	9b08      	ldr	r3, [sp, #32]
 800b532:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b536:	4683      	mov	fp, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 818f 	beq.w	800b85c <_dtoa_r+0xb94>
 800b53e:	4639      	mov	r1, r7
 800b540:	2300      	movs	r3, #0
 800b542:	220a      	movs	r2, #10
 800b544:	4620      	mov	r0, r4
 800b546:	f000 ffb9 	bl	800c4bc <__multadd>
 800b54a:	f1b9 0f00 	cmp.w	r9, #0
 800b54e:	4607      	mov	r7, r0
 800b550:	f300 808e 	bgt.w	800b670 <_dtoa_r+0x9a8>
 800b554:	9b05      	ldr	r3, [sp, #20]
 800b556:	2b02      	cmp	r3, #2
 800b558:	dc50      	bgt.n	800b5fc <_dtoa_r+0x934>
 800b55a:	e089      	b.n	800b670 <_dtoa_r+0x9a8>
 800b55c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b55e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b562:	e75d      	b.n	800b420 <_dtoa_r+0x758>
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	1e5e      	subs	r6, r3, #1
 800b568:	9b06      	ldr	r3, [sp, #24]
 800b56a:	42b3      	cmp	r3, r6
 800b56c:	bfbf      	itttt	lt
 800b56e:	9b06      	ldrlt	r3, [sp, #24]
 800b570:	9606      	strlt	r6, [sp, #24]
 800b572:	1af2      	sublt	r2, r6, r3
 800b574:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b576:	bfb6      	itet	lt
 800b578:	189b      	addlt	r3, r3, r2
 800b57a:	1b9e      	subge	r6, r3, r6
 800b57c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b57e:	9b01      	ldr	r3, [sp, #4]
 800b580:	bfb8      	it	lt
 800b582:	2600      	movlt	r6, #0
 800b584:	2b00      	cmp	r3, #0
 800b586:	bfb5      	itete	lt
 800b588:	eba8 0503 	sublt.w	r5, r8, r3
 800b58c:	9b01      	ldrge	r3, [sp, #4]
 800b58e:	2300      	movlt	r3, #0
 800b590:	4645      	movge	r5, r8
 800b592:	e747      	b.n	800b424 <_dtoa_r+0x75c>
 800b594:	9e06      	ldr	r6, [sp, #24]
 800b596:	9f08      	ldr	r7, [sp, #32]
 800b598:	4645      	mov	r5, r8
 800b59a:	e74c      	b.n	800b436 <_dtoa_r+0x76e>
 800b59c:	9a06      	ldr	r2, [sp, #24]
 800b59e:	e775      	b.n	800b48c <_dtoa_r+0x7c4>
 800b5a0:	9b05      	ldr	r3, [sp, #20]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	dc18      	bgt.n	800b5d8 <_dtoa_r+0x910>
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	b9b3      	cbnz	r3, 800b5d8 <_dtoa_r+0x910>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5b0:	b9a3      	cbnz	r3, 800b5dc <_dtoa_r+0x914>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5b8:	0d1b      	lsrs	r3, r3, #20
 800b5ba:	051b      	lsls	r3, r3, #20
 800b5bc:	b12b      	cbz	r3, 800b5ca <_dtoa_r+0x902>
 800b5be:	9b04      	ldr	r3, [sp, #16]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	f108 0801 	add.w	r8, r8, #1
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f47f af74 	bne.w	800b4bc <_dtoa_r+0x7f4>
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	e779      	b.n	800b4cc <_dtoa_r+0x804>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e7f6      	b.n	800b5ca <_dtoa_r+0x902>
 800b5dc:	9b02      	ldr	r3, [sp, #8]
 800b5de:	e7f4      	b.n	800b5ca <_dtoa_r+0x902>
 800b5e0:	d085      	beq.n	800b4ee <_dtoa_r+0x826>
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	301c      	adds	r0, #28
 800b5e6:	e77d      	b.n	800b4e4 <_dtoa_r+0x81c>
 800b5e8:	40240000 	.word	0x40240000
 800b5ec:	9b01      	ldr	r3, [sp, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	dc38      	bgt.n	800b664 <_dtoa_r+0x99c>
 800b5f2:	9b05      	ldr	r3, [sp, #20]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	dd35      	ble.n	800b664 <_dtoa_r+0x99c>
 800b5f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b5fc:	f1b9 0f00 	cmp.w	r9, #0
 800b600:	d10d      	bne.n	800b61e <_dtoa_r+0x956>
 800b602:	4631      	mov	r1, r6
 800b604:	464b      	mov	r3, r9
 800b606:	2205      	movs	r2, #5
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 ff57 	bl	800c4bc <__multadd>
 800b60e:	4601      	mov	r1, r0
 800b610:	4606      	mov	r6, r0
 800b612:	4658      	mov	r0, fp
 800b614:	f001 f9b8 	bl	800c988 <__mcmp>
 800b618:	2800      	cmp	r0, #0
 800b61a:	f73f adbd 	bgt.w	800b198 <_dtoa_r+0x4d0>
 800b61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b620:	9d00      	ldr	r5, [sp, #0]
 800b622:	ea6f 0a03 	mvn.w	sl, r3
 800b626:	f04f 0800 	mov.w	r8, #0
 800b62a:	4631      	mov	r1, r6
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 ff23 	bl	800c478 <_Bfree>
 800b632:	2f00      	cmp	r7, #0
 800b634:	f43f aeb4 	beq.w	800b3a0 <_dtoa_r+0x6d8>
 800b638:	f1b8 0f00 	cmp.w	r8, #0
 800b63c:	d005      	beq.n	800b64a <_dtoa_r+0x982>
 800b63e:	45b8      	cmp	r8, r7
 800b640:	d003      	beq.n	800b64a <_dtoa_r+0x982>
 800b642:	4641      	mov	r1, r8
 800b644:	4620      	mov	r0, r4
 800b646:	f000 ff17 	bl	800c478 <_Bfree>
 800b64a:	4639      	mov	r1, r7
 800b64c:	4620      	mov	r0, r4
 800b64e:	f000 ff13 	bl	800c478 <_Bfree>
 800b652:	e6a5      	b.n	800b3a0 <_dtoa_r+0x6d8>
 800b654:	2600      	movs	r6, #0
 800b656:	4637      	mov	r7, r6
 800b658:	e7e1      	b.n	800b61e <_dtoa_r+0x956>
 800b65a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b65c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b660:	4637      	mov	r7, r6
 800b662:	e599      	b.n	800b198 <_dtoa_r+0x4d0>
 800b664:	9b08      	ldr	r3, [sp, #32]
 800b666:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 80fd 	beq.w	800b86a <_dtoa_r+0xba2>
 800b670:	2d00      	cmp	r5, #0
 800b672:	dd05      	ble.n	800b680 <_dtoa_r+0x9b8>
 800b674:	4639      	mov	r1, r7
 800b676:	462a      	mov	r2, r5
 800b678:	4620      	mov	r0, r4
 800b67a:	f001 f919 	bl	800c8b0 <__lshift>
 800b67e:	4607      	mov	r7, r0
 800b680:	9b06      	ldr	r3, [sp, #24]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d05c      	beq.n	800b740 <_dtoa_r+0xa78>
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 feb5 	bl	800c3f8 <_Balloc>
 800b68e:	4605      	mov	r5, r0
 800b690:	b928      	cbnz	r0, 800b69e <_dtoa_r+0x9d6>
 800b692:	4b80      	ldr	r3, [pc, #512]	; (800b894 <_dtoa_r+0xbcc>)
 800b694:	4602      	mov	r2, r0
 800b696:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b69a:	f7ff bb2e 	b.w	800acfa <_dtoa_r+0x32>
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	3202      	adds	r2, #2
 800b6a2:	0092      	lsls	r2, r2, #2
 800b6a4:	f107 010c 	add.w	r1, r7, #12
 800b6a8:	300c      	adds	r0, #12
 800b6aa:	f7fd fdd7 	bl	800925c <memcpy>
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f001 f8fc 	bl	800c8b0 <__lshift>
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	444b      	add	r3, r9
 800b6c2:	9307      	str	r3, [sp, #28]
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	46b8      	mov	r8, r7
 800b6cc:	9306      	str	r3, [sp, #24]
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	4658      	mov	r0, fp
 800b6d8:	9302      	str	r3, [sp, #8]
 800b6da:	f7ff fa69 	bl	800abb0 <quorem>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	3330      	adds	r3, #48	; 0x30
 800b6e2:	9004      	str	r0, [sp, #16]
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	9308      	str	r3, [sp, #32]
 800b6ea:	f001 f94d 	bl	800c988 <__mcmp>
 800b6ee:	463a      	mov	r2, r7
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f001 f963 	bl	800c9c0 <__mdiff>
 800b6fa:	68c2      	ldr	r2, [r0, #12]
 800b6fc:	9b08      	ldr	r3, [sp, #32]
 800b6fe:	4605      	mov	r5, r0
 800b700:	bb02      	cbnz	r2, 800b744 <_dtoa_r+0xa7c>
 800b702:	4601      	mov	r1, r0
 800b704:	4658      	mov	r0, fp
 800b706:	f001 f93f 	bl	800c988 <__mcmp>
 800b70a:	9b08      	ldr	r3, [sp, #32]
 800b70c:	4602      	mov	r2, r0
 800b70e:	4629      	mov	r1, r5
 800b710:	4620      	mov	r0, r4
 800b712:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b716:	f000 feaf 	bl	800c478 <_Bfree>
 800b71a:	9b05      	ldr	r3, [sp, #20]
 800b71c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b71e:	9d01      	ldr	r5, [sp, #4]
 800b720:	ea43 0102 	orr.w	r1, r3, r2
 800b724:	9b06      	ldr	r3, [sp, #24]
 800b726:	430b      	orrs	r3, r1
 800b728:	9b08      	ldr	r3, [sp, #32]
 800b72a:	d10d      	bne.n	800b748 <_dtoa_r+0xa80>
 800b72c:	2b39      	cmp	r3, #57	; 0x39
 800b72e:	d029      	beq.n	800b784 <_dtoa_r+0xabc>
 800b730:	f1b9 0f00 	cmp.w	r9, #0
 800b734:	dd01      	ble.n	800b73a <_dtoa_r+0xa72>
 800b736:	9b04      	ldr	r3, [sp, #16]
 800b738:	3331      	adds	r3, #49	; 0x31
 800b73a:	9a02      	ldr	r2, [sp, #8]
 800b73c:	7013      	strb	r3, [r2, #0]
 800b73e:	e774      	b.n	800b62a <_dtoa_r+0x962>
 800b740:	4638      	mov	r0, r7
 800b742:	e7b9      	b.n	800b6b8 <_dtoa_r+0x9f0>
 800b744:	2201      	movs	r2, #1
 800b746:	e7e2      	b.n	800b70e <_dtoa_r+0xa46>
 800b748:	f1b9 0f00 	cmp.w	r9, #0
 800b74c:	db06      	blt.n	800b75c <_dtoa_r+0xa94>
 800b74e:	9905      	ldr	r1, [sp, #20]
 800b750:	ea41 0909 	orr.w	r9, r1, r9
 800b754:	9906      	ldr	r1, [sp, #24]
 800b756:	ea59 0101 	orrs.w	r1, r9, r1
 800b75a:	d120      	bne.n	800b79e <_dtoa_r+0xad6>
 800b75c:	2a00      	cmp	r2, #0
 800b75e:	ddec      	ble.n	800b73a <_dtoa_r+0xa72>
 800b760:	4659      	mov	r1, fp
 800b762:	2201      	movs	r2, #1
 800b764:	4620      	mov	r0, r4
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	f001 f8a2 	bl	800c8b0 <__lshift>
 800b76c:	4631      	mov	r1, r6
 800b76e:	4683      	mov	fp, r0
 800b770:	f001 f90a 	bl	800c988 <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	9b01      	ldr	r3, [sp, #4]
 800b778:	dc02      	bgt.n	800b780 <_dtoa_r+0xab8>
 800b77a:	d1de      	bne.n	800b73a <_dtoa_r+0xa72>
 800b77c:	07da      	lsls	r2, r3, #31
 800b77e:	d5dc      	bpl.n	800b73a <_dtoa_r+0xa72>
 800b780:	2b39      	cmp	r3, #57	; 0x39
 800b782:	d1d8      	bne.n	800b736 <_dtoa_r+0xa6e>
 800b784:	9a02      	ldr	r2, [sp, #8]
 800b786:	2339      	movs	r3, #57	; 0x39
 800b788:	7013      	strb	r3, [r2, #0]
 800b78a:	462b      	mov	r3, r5
 800b78c:	461d      	mov	r5, r3
 800b78e:	3b01      	subs	r3, #1
 800b790:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b794:	2a39      	cmp	r2, #57	; 0x39
 800b796:	d050      	beq.n	800b83a <_dtoa_r+0xb72>
 800b798:	3201      	adds	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e745      	b.n	800b62a <_dtoa_r+0x962>
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	dd03      	ble.n	800b7aa <_dtoa_r+0xae2>
 800b7a2:	2b39      	cmp	r3, #57	; 0x39
 800b7a4:	d0ee      	beq.n	800b784 <_dtoa_r+0xabc>
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	e7c7      	b.n	800b73a <_dtoa_r+0xa72>
 800b7aa:	9a01      	ldr	r2, [sp, #4]
 800b7ac:	9907      	ldr	r1, [sp, #28]
 800b7ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b7b2:	428a      	cmp	r2, r1
 800b7b4:	d02a      	beq.n	800b80c <_dtoa_r+0xb44>
 800b7b6:	4659      	mov	r1, fp
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	220a      	movs	r2, #10
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 fe7d 	bl	800c4bc <__multadd>
 800b7c2:	45b8      	cmp	r8, r7
 800b7c4:	4683      	mov	fp, r0
 800b7c6:	f04f 0300 	mov.w	r3, #0
 800b7ca:	f04f 020a 	mov.w	r2, #10
 800b7ce:	4641      	mov	r1, r8
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	d107      	bne.n	800b7e4 <_dtoa_r+0xb1c>
 800b7d4:	f000 fe72 	bl	800c4bc <__multadd>
 800b7d8:	4680      	mov	r8, r0
 800b7da:	4607      	mov	r7, r0
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	e775      	b.n	800b6d0 <_dtoa_r+0xa08>
 800b7e4:	f000 fe6a 	bl	800c4bc <__multadd>
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	4680      	mov	r8, r0
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	220a      	movs	r2, #10
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fe63 	bl	800c4bc <__multadd>
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	e7f0      	b.n	800b7dc <_dtoa_r+0xb14>
 800b7fa:	f1b9 0f00 	cmp.w	r9, #0
 800b7fe:	9a00      	ldr	r2, [sp, #0]
 800b800:	bfcc      	ite	gt
 800b802:	464d      	movgt	r5, r9
 800b804:	2501      	movle	r5, #1
 800b806:	4415      	add	r5, r2
 800b808:	f04f 0800 	mov.w	r8, #0
 800b80c:	4659      	mov	r1, fp
 800b80e:	2201      	movs	r2, #1
 800b810:	4620      	mov	r0, r4
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	f001 f84c 	bl	800c8b0 <__lshift>
 800b818:	4631      	mov	r1, r6
 800b81a:	4683      	mov	fp, r0
 800b81c:	f001 f8b4 	bl	800c988 <__mcmp>
 800b820:	2800      	cmp	r0, #0
 800b822:	dcb2      	bgt.n	800b78a <_dtoa_r+0xac2>
 800b824:	d102      	bne.n	800b82c <_dtoa_r+0xb64>
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	07db      	lsls	r3, r3, #31
 800b82a:	d4ae      	bmi.n	800b78a <_dtoa_r+0xac2>
 800b82c:	462b      	mov	r3, r5
 800b82e:	461d      	mov	r5, r3
 800b830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b834:	2a30      	cmp	r2, #48	; 0x30
 800b836:	d0fa      	beq.n	800b82e <_dtoa_r+0xb66>
 800b838:	e6f7      	b.n	800b62a <_dtoa_r+0x962>
 800b83a:	9a00      	ldr	r2, [sp, #0]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d1a5      	bne.n	800b78c <_dtoa_r+0xac4>
 800b840:	f10a 0a01 	add.w	sl, sl, #1
 800b844:	2331      	movs	r3, #49	; 0x31
 800b846:	e779      	b.n	800b73c <_dtoa_r+0xa74>
 800b848:	4b13      	ldr	r3, [pc, #76]	; (800b898 <_dtoa_r+0xbd0>)
 800b84a:	f7ff baaf 	b.w	800adac <_dtoa_r+0xe4>
 800b84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b850:	2b00      	cmp	r3, #0
 800b852:	f47f aa86 	bne.w	800ad62 <_dtoa_r+0x9a>
 800b856:	4b11      	ldr	r3, [pc, #68]	; (800b89c <_dtoa_r+0xbd4>)
 800b858:	f7ff baa8 	b.w	800adac <_dtoa_r+0xe4>
 800b85c:	f1b9 0f00 	cmp.w	r9, #0
 800b860:	dc03      	bgt.n	800b86a <_dtoa_r+0xba2>
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	2b02      	cmp	r3, #2
 800b866:	f73f aec9 	bgt.w	800b5fc <_dtoa_r+0x934>
 800b86a:	9d00      	ldr	r5, [sp, #0]
 800b86c:	4631      	mov	r1, r6
 800b86e:	4658      	mov	r0, fp
 800b870:	f7ff f99e 	bl	800abb0 <quorem>
 800b874:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b878:	f805 3b01 	strb.w	r3, [r5], #1
 800b87c:	9a00      	ldr	r2, [sp, #0]
 800b87e:	1aaa      	subs	r2, r5, r2
 800b880:	4591      	cmp	r9, r2
 800b882:	ddba      	ble.n	800b7fa <_dtoa_r+0xb32>
 800b884:	4659      	mov	r1, fp
 800b886:	2300      	movs	r3, #0
 800b888:	220a      	movs	r2, #10
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fe16 	bl	800c4bc <__multadd>
 800b890:	4683      	mov	fp, r0
 800b892:	e7eb      	b.n	800b86c <_dtoa_r+0xba4>
 800b894:	0800efcc 	.word	0x0800efcc
 800b898:	0800edd4 	.word	0x0800edd4
 800b89c:	0800ef49 	.word	0x0800ef49

0800b8a0 <__sflush_r>:
 800b8a0:	898a      	ldrh	r2, [r1, #12]
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	0710      	lsls	r0, r2, #28
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	d458      	bmi.n	800b960 <__sflush_r+0xc0>
 800b8ae:	684b      	ldr	r3, [r1, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc05      	bgt.n	800b8c0 <__sflush_r+0x20>
 800b8b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	dc02      	bgt.n	800b8c0 <__sflush_r+0x20>
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	d0f9      	beq.n	800b8ba <__sflush_r+0x1a>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8cc:	682f      	ldr	r7, [r5, #0]
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	d032      	beq.n	800b938 <__sflush_r+0x98>
 800b8d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	075a      	lsls	r2, r3, #29
 800b8d8:	d505      	bpl.n	800b8e6 <__sflush_r+0x46>
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	1ac0      	subs	r0, r0, r3
 800b8de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8e0:	b10b      	cbz	r3, 800b8e6 <__sflush_r+0x46>
 800b8e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8e4:	1ac0      	subs	r0, r0, r3
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8ec:	6a21      	ldr	r1, [r4, #32]
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	47b0      	blx	r6
 800b8f2:	1c43      	adds	r3, r0, #1
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	d106      	bne.n	800b906 <__sflush_r+0x66>
 800b8f8:	6829      	ldr	r1, [r5, #0]
 800b8fa:	291d      	cmp	r1, #29
 800b8fc:	d82c      	bhi.n	800b958 <__sflush_r+0xb8>
 800b8fe:	4a2a      	ldr	r2, [pc, #168]	; (800b9a8 <__sflush_r+0x108>)
 800b900:	40ca      	lsrs	r2, r1
 800b902:	07d6      	lsls	r6, r2, #31
 800b904:	d528      	bpl.n	800b958 <__sflush_r+0xb8>
 800b906:	2200      	movs	r2, #0
 800b908:	6062      	str	r2, [r4, #4]
 800b90a:	04d9      	lsls	r1, r3, #19
 800b90c:	6922      	ldr	r2, [r4, #16]
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	d504      	bpl.n	800b91c <__sflush_r+0x7c>
 800b912:	1c42      	adds	r2, r0, #1
 800b914:	d101      	bne.n	800b91a <__sflush_r+0x7a>
 800b916:	682b      	ldr	r3, [r5, #0]
 800b918:	b903      	cbnz	r3, 800b91c <__sflush_r+0x7c>
 800b91a:	6560      	str	r0, [r4, #84]	; 0x54
 800b91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b91e:	602f      	str	r7, [r5, #0]
 800b920:	2900      	cmp	r1, #0
 800b922:	d0ca      	beq.n	800b8ba <__sflush_r+0x1a>
 800b924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b928:	4299      	cmp	r1, r3
 800b92a:	d002      	beq.n	800b932 <__sflush_r+0x92>
 800b92c:	4628      	mov	r0, r5
 800b92e:	f001 fa2d 	bl	800cd8c <_free_r>
 800b932:	2000      	movs	r0, #0
 800b934:	6360      	str	r0, [r4, #52]	; 0x34
 800b936:	e7c1      	b.n	800b8bc <__sflush_r+0x1c>
 800b938:	6a21      	ldr	r1, [r4, #32]
 800b93a:	2301      	movs	r3, #1
 800b93c:	4628      	mov	r0, r5
 800b93e:	47b0      	blx	r6
 800b940:	1c41      	adds	r1, r0, #1
 800b942:	d1c7      	bne.n	800b8d4 <__sflush_r+0x34>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0c4      	beq.n	800b8d4 <__sflush_r+0x34>
 800b94a:	2b1d      	cmp	r3, #29
 800b94c:	d001      	beq.n	800b952 <__sflush_r+0xb2>
 800b94e:	2b16      	cmp	r3, #22
 800b950:	d101      	bne.n	800b956 <__sflush_r+0xb6>
 800b952:	602f      	str	r7, [r5, #0]
 800b954:	e7b1      	b.n	800b8ba <__sflush_r+0x1a>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	e7ad      	b.n	800b8bc <__sflush_r+0x1c>
 800b960:	690f      	ldr	r7, [r1, #16]
 800b962:	2f00      	cmp	r7, #0
 800b964:	d0a9      	beq.n	800b8ba <__sflush_r+0x1a>
 800b966:	0793      	lsls	r3, r2, #30
 800b968:	680e      	ldr	r6, [r1, #0]
 800b96a:	bf08      	it	eq
 800b96c:	694b      	ldreq	r3, [r1, #20]
 800b96e:	600f      	str	r7, [r1, #0]
 800b970:	bf18      	it	ne
 800b972:	2300      	movne	r3, #0
 800b974:	eba6 0807 	sub.w	r8, r6, r7
 800b978:	608b      	str	r3, [r1, #8]
 800b97a:	f1b8 0f00 	cmp.w	r8, #0
 800b97e:	dd9c      	ble.n	800b8ba <__sflush_r+0x1a>
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b984:	4643      	mov	r3, r8
 800b986:	463a      	mov	r2, r7
 800b988:	4628      	mov	r0, r5
 800b98a:	47b0      	blx	r6
 800b98c:	2800      	cmp	r0, #0
 800b98e:	dc06      	bgt.n	800b99e <__sflush_r+0xfe>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b996:	81a3      	strh	r3, [r4, #12]
 800b998:	f04f 30ff 	mov.w	r0, #4294967295
 800b99c:	e78e      	b.n	800b8bc <__sflush_r+0x1c>
 800b99e:	4407      	add	r7, r0
 800b9a0:	eba8 0800 	sub.w	r8, r8, r0
 800b9a4:	e7e9      	b.n	800b97a <__sflush_r+0xda>
 800b9a6:	bf00      	nop
 800b9a8:	20400001 	.word	0x20400001

0800b9ac <_fflush_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	690b      	ldr	r3, [r1, #16]
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	b913      	cbnz	r3, 800b9bc <_fflush_r+0x10>
 800b9b6:	2500      	movs	r5, #0
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	b118      	cbz	r0, 800b9c6 <_fflush_r+0x1a>
 800b9be:	6983      	ldr	r3, [r0, #24]
 800b9c0:	b90b      	cbnz	r3, 800b9c6 <_fflush_r+0x1a>
 800b9c2:	f000 f887 	bl	800bad4 <__sinit>
 800b9c6:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <_fflush_r+0x6c>)
 800b9c8:	429c      	cmp	r4, r3
 800b9ca:	d11b      	bne.n	800ba04 <_fflush_r+0x58>
 800b9cc:	686c      	ldr	r4, [r5, #4]
 800b9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0ef      	beq.n	800b9b6 <_fflush_r+0xa>
 800b9d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9d8:	07d0      	lsls	r0, r2, #31
 800b9da:	d404      	bmi.n	800b9e6 <_fflush_r+0x3a>
 800b9dc:	0599      	lsls	r1, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_fflush_r+0x3a>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9e2:	f000 fc88 	bl	800c2f6 <__retarget_lock_acquire_recursive>
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f7ff ff59 	bl	800b8a0 <__sflush_r>
 800b9ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9f0:	07da      	lsls	r2, r3, #31
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	d4e0      	bmi.n	800b9b8 <_fflush_r+0xc>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	059b      	lsls	r3, r3, #22
 800b9fa:	d4dd      	bmi.n	800b9b8 <_fflush_r+0xc>
 800b9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9fe:	f000 fc7b 	bl	800c2f8 <__retarget_lock_release_recursive>
 800ba02:	e7d9      	b.n	800b9b8 <_fflush_r+0xc>
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <_fflush_r+0x70>)
 800ba06:	429c      	cmp	r4, r3
 800ba08:	d101      	bne.n	800ba0e <_fflush_r+0x62>
 800ba0a:	68ac      	ldr	r4, [r5, #8]
 800ba0c:	e7df      	b.n	800b9ce <_fflush_r+0x22>
 800ba0e:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <_fflush_r+0x74>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	bf08      	it	eq
 800ba14:	68ec      	ldreq	r4, [r5, #12]
 800ba16:	e7da      	b.n	800b9ce <_fflush_r+0x22>
 800ba18:	0800f000 	.word	0x0800f000
 800ba1c:	0800f020 	.word	0x0800f020
 800ba20:	0800efe0 	.word	0x0800efe0

0800ba24 <std>:
 800ba24:	2300      	movs	r3, #0
 800ba26:	b510      	push	{r4, lr}
 800ba28:	4604      	mov	r4, r0
 800ba2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba32:	6083      	str	r3, [r0, #8]
 800ba34:	8181      	strh	r1, [r0, #12]
 800ba36:	6643      	str	r3, [r0, #100]	; 0x64
 800ba38:	81c2      	strh	r2, [r0, #14]
 800ba3a:	6183      	str	r3, [r0, #24]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	2208      	movs	r2, #8
 800ba40:	305c      	adds	r0, #92	; 0x5c
 800ba42:	f7fd fc33 	bl	80092ac <memset>
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <std+0x38>)
 800ba48:	6263      	str	r3, [r4, #36]	; 0x24
 800ba4a:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <std+0x3c>)
 800ba4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba4e:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <std+0x40>)
 800ba50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <std+0x44>)
 800ba54:	6224      	str	r4, [r4, #32]
 800ba56:	6323      	str	r3, [r4, #48]	; 0x30
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800d1c9 	.word	0x0800d1c9
 800ba60:	0800d1eb 	.word	0x0800d1eb
 800ba64:	0800d223 	.word	0x0800d223
 800ba68:	0800d247 	.word	0x0800d247

0800ba6c <_cleanup_r>:
 800ba6c:	4901      	ldr	r1, [pc, #4]	; (800ba74 <_cleanup_r+0x8>)
 800ba6e:	f000 b8af 	b.w	800bbd0 <_fwalk_reent>
 800ba72:	bf00      	nop
 800ba74:	0800b9ad 	.word	0x0800b9ad

0800ba78 <__sfmoreglue>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	1e4a      	subs	r2, r1, #1
 800ba7c:	2568      	movs	r5, #104	; 0x68
 800ba7e:	4355      	muls	r5, r2
 800ba80:	460e      	mov	r6, r1
 800ba82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba86:	f001 f9d1 	bl	800ce2c <_malloc_r>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	b140      	cbz	r0, 800baa0 <__sfmoreglue+0x28>
 800ba8e:	2100      	movs	r1, #0
 800ba90:	e9c0 1600 	strd	r1, r6, [r0]
 800ba94:	300c      	adds	r0, #12
 800ba96:	60a0      	str	r0, [r4, #8]
 800ba98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba9c:	f7fd fc06 	bl	80092ac <memset>
 800baa0:	4620      	mov	r0, r4
 800baa2:	bd70      	pop	{r4, r5, r6, pc}

0800baa4 <__sfp_lock_acquire>:
 800baa4:	4801      	ldr	r0, [pc, #4]	; (800baac <__sfp_lock_acquire+0x8>)
 800baa6:	f000 bc26 	b.w	800c2f6 <__retarget_lock_acquire_recursive>
 800baaa:	bf00      	nop
 800baac:	20009598 	.word	0x20009598

0800bab0 <__sfp_lock_release>:
 800bab0:	4801      	ldr	r0, [pc, #4]	; (800bab8 <__sfp_lock_release+0x8>)
 800bab2:	f000 bc21 	b.w	800c2f8 <__retarget_lock_release_recursive>
 800bab6:	bf00      	nop
 800bab8:	20009598 	.word	0x20009598

0800babc <__sinit_lock_acquire>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__sinit_lock_acquire+0x8>)
 800babe:	f000 bc1a 	b.w	800c2f6 <__retarget_lock_acquire_recursive>
 800bac2:	bf00      	nop
 800bac4:	20009593 	.word	0x20009593

0800bac8 <__sinit_lock_release>:
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <__sinit_lock_release+0x8>)
 800baca:	f000 bc15 	b.w	800c2f8 <__retarget_lock_release_recursive>
 800bace:	bf00      	nop
 800bad0:	20009593 	.word	0x20009593

0800bad4 <__sinit>:
 800bad4:	b510      	push	{r4, lr}
 800bad6:	4604      	mov	r4, r0
 800bad8:	f7ff fff0 	bl	800babc <__sinit_lock_acquire>
 800badc:	69a3      	ldr	r3, [r4, #24]
 800bade:	b11b      	cbz	r3, 800bae8 <__sinit+0x14>
 800bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae4:	f7ff bff0 	b.w	800bac8 <__sinit_lock_release>
 800bae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800baec:	6523      	str	r3, [r4, #80]	; 0x50
 800baee:	4b13      	ldr	r3, [pc, #76]	; (800bb3c <__sinit+0x68>)
 800baf0:	4a13      	ldr	r2, [pc, #76]	; (800bb40 <__sinit+0x6c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	62a2      	str	r2, [r4, #40]	; 0x28
 800baf6:	42a3      	cmp	r3, r4
 800baf8:	bf04      	itt	eq
 800bafa:	2301      	moveq	r3, #1
 800bafc:	61a3      	streq	r3, [r4, #24]
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 f820 	bl	800bb44 <__sfp>
 800bb04:	6060      	str	r0, [r4, #4]
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 f81c 	bl	800bb44 <__sfp>
 800bb0c:	60a0      	str	r0, [r4, #8]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 f818 	bl	800bb44 <__sfp>
 800bb14:	2200      	movs	r2, #0
 800bb16:	60e0      	str	r0, [r4, #12]
 800bb18:	2104      	movs	r1, #4
 800bb1a:	6860      	ldr	r0, [r4, #4]
 800bb1c:	f7ff ff82 	bl	800ba24 <std>
 800bb20:	68a0      	ldr	r0, [r4, #8]
 800bb22:	2201      	movs	r2, #1
 800bb24:	2109      	movs	r1, #9
 800bb26:	f7ff ff7d 	bl	800ba24 <std>
 800bb2a:	68e0      	ldr	r0, [r4, #12]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	2112      	movs	r1, #18
 800bb30:	f7ff ff78 	bl	800ba24 <std>
 800bb34:	2301      	movs	r3, #1
 800bb36:	61a3      	str	r3, [r4, #24]
 800bb38:	e7d2      	b.n	800bae0 <__sinit+0xc>
 800bb3a:	bf00      	nop
 800bb3c:	0800edc0 	.word	0x0800edc0
 800bb40:	0800ba6d 	.word	0x0800ba6d

0800bb44 <__sfp>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	4607      	mov	r7, r0
 800bb48:	f7ff ffac 	bl	800baa4 <__sfp_lock_acquire>
 800bb4c:	4b1e      	ldr	r3, [pc, #120]	; (800bbc8 <__sfp+0x84>)
 800bb4e:	681e      	ldr	r6, [r3, #0]
 800bb50:	69b3      	ldr	r3, [r6, #24]
 800bb52:	b913      	cbnz	r3, 800bb5a <__sfp+0x16>
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff ffbd 	bl	800bad4 <__sinit>
 800bb5a:	3648      	adds	r6, #72	; 0x48
 800bb5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	d503      	bpl.n	800bb6c <__sfp+0x28>
 800bb64:	6833      	ldr	r3, [r6, #0]
 800bb66:	b30b      	cbz	r3, 800bbac <__sfp+0x68>
 800bb68:	6836      	ldr	r6, [r6, #0]
 800bb6a:	e7f7      	b.n	800bb5c <__sfp+0x18>
 800bb6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb70:	b9d5      	cbnz	r5, 800bba8 <__sfp+0x64>
 800bb72:	4b16      	ldr	r3, [pc, #88]	; (800bbcc <__sfp+0x88>)
 800bb74:	60e3      	str	r3, [r4, #12]
 800bb76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb7a:	6665      	str	r5, [r4, #100]	; 0x64
 800bb7c:	f000 fbba 	bl	800c2f4 <__retarget_lock_init_recursive>
 800bb80:	f7ff ff96 	bl	800bab0 <__sfp_lock_release>
 800bb84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb8c:	6025      	str	r5, [r4, #0]
 800bb8e:	61a5      	str	r5, [r4, #24]
 800bb90:	2208      	movs	r2, #8
 800bb92:	4629      	mov	r1, r5
 800bb94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb98:	f7fd fb88 	bl	80092ac <memset>
 800bb9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bba4:	4620      	mov	r0, r4
 800bba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba8:	3468      	adds	r4, #104	; 0x68
 800bbaa:	e7d9      	b.n	800bb60 <__sfp+0x1c>
 800bbac:	2104      	movs	r1, #4
 800bbae:	4638      	mov	r0, r7
 800bbb0:	f7ff ff62 	bl	800ba78 <__sfmoreglue>
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	6030      	str	r0, [r6, #0]
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d1d5      	bne.n	800bb68 <__sfp+0x24>
 800bbbc:	f7ff ff78 	bl	800bab0 <__sfp_lock_release>
 800bbc0:	230c      	movs	r3, #12
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	e7ee      	b.n	800bba4 <__sfp+0x60>
 800bbc6:	bf00      	nop
 800bbc8:	0800edc0 	.word	0x0800edc0
 800bbcc:	ffff0001 	.word	0xffff0001

0800bbd0 <_fwalk_reent>:
 800bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	4688      	mov	r8, r1
 800bbd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbdc:	2700      	movs	r7, #0
 800bbde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbe2:	f1b9 0901 	subs.w	r9, r9, #1
 800bbe6:	d505      	bpl.n	800bbf4 <_fwalk_reent+0x24>
 800bbe8:	6824      	ldr	r4, [r4, #0]
 800bbea:	2c00      	cmp	r4, #0
 800bbec:	d1f7      	bne.n	800bbde <_fwalk_reent+0xe>
 800bbee:	4638      	mov	r0, r7
 800bbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf4:	89ab      	ldrh	r3, [r5, #12]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d907      	bls.n	800bc0a <_fwalk_reent+0x3a>
 800bbfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	d003      	beq.n	800bc0a <_fwalk_reent+0x3a>
 800bc02:	4629      	mov	r1, r5
 800bc04:	4630      	mov	r0, r6
 800bc06:	47c0      	blx	r8
 800bc08:	4307      	orrs	r7, r0
 800bc0a:	3568      	adds	r5, #104	; 0x68
 800bc0c:	e7e9      	b.n	800bbe2 <_fwalk_reent+0x12>

0800bc0e <rshift>:
 800bc0e:	6903      	ldr	r3, [r0, #16]
 800bc10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc18:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc1c:	f100 0414 	add.w	r4, r0, #20
 800bc20:	dd45      	ble.n	800bcae <rshift+0xa0>
 800bc22:	f011 011f 	ands.w	r1, r1, #31
 800bc26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc2e:	d10c      	bne.n	800bc4a <rshift+0x3c>
 800bc30:	f100 0710 	add.w	r7, r0, #16
 800bc34:	4629      	mov	r1, r5
 800bc36:	42b1      	cmp	r1, r6
 800bc38:	d334      	bcc.n	800bca4 <rshift+0x96>
 800bc3a:	1a9b      	subs	r3, r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	1eea      	subs	r2, r5, #3
 800bc40:	4296      	cmp	r6, r2
 800bc42:	bf38      	it	cc
 800bc44:	2300      	movcc	r3, #0
 800bc46:	4423      	add	r3, r4
 800bc48:	e015      	b.n	800bc76 <rshift+0x68>
 800bc4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc4e:	f1c1 0820 	rsb	r8, r1, #32
 800bc52:	40cf      	lsrs	r7, r1
 800bc54:	f105 0e04 	add.w	lr, r5, #4
 800bc58:	46a1      	mov	r9, r4
 800bc5a:	4576      	cmp	r6, lr
 800bc5c:	46f4      	mov	ip, lr
 800bc5e:	d815      	bhi.n	800bc8c <rshift+0x7e>
 800bc60:	1a9b      	subs	r3, r3, r2
 800bc62:	009a      	lsls	r2, r3, #2
 800bc64:	3a04      	subs	r2, #4
 800bc66:	3501      	adds	r5, #1
 800bc68:	42ae      	cmp	r6, r5
 800bc6a:	bf38      	it	cc
 800bc6c:	2200      	movcc	r2, #0
 800bc6e:	18a3      	adds	r3, r4, r2
 800bc70:	50a7      	str	r7, [r4, r2]
 800bc72:	b107      	cbz	r7, 800bc76 <rshift+0x68>
 800bc74:	3304      	adds	r3, #4
 800bc76:	1b1a      	subs	r2, r3, r4
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc7e:	bf08      	it	eq
 800bc80:	2300      	moveq	r3, #0
 800bc82:	6102      	str	r2, [r0, #16]
 800bc84:	bf08      	it	eq
 800bc86:	6143      	streq	r3, [r0, #20]
 800bc88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc8c:	f8dc c000 	ldr.w	ip, [ip]
 800bc90:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc94:	ea4c 0707 	orr.w	r7, ip, r7
 800bc98:	f849 7b04 	str.w	r7, [r9], #4
 800bc9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bca0:	40cf      	lsrs	r7, r1
 800bca2:	e7da      	b.n	800bc5a <rshift+0x4c>
 800bca4:	f851 cb04 	ldr.w	ip, [r1], #4
 800bca8:	f847 cf04 	str.w	ip, [r7, #4]!
 800bcac:	e7c3      	b.n	800bc36 <rshift+0x28>
 800bcae:	4623      	mov	r3, r4
 800bcb0:	e7e1      	b.n	800bc76 <rshift+0x68>

0800bcb2 <__hexdig_fun>:
 800bcb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bcb6:	2b09      	cmp	r3, #9
 800bcb8:	d802      	bhi.n	800bcc0 <__hexdig_fun+0xe>
 800bcba:	3820      	subs	r0, #32
 800bcbc:	b2c0      	uxtb	r0, r0
 800bcbe:	4770      	bx	lr
 800bcc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bcc4:	2b05      	cmp	r3, #5
 800bcc6:	d801      	bhi.n	800bccc <__hexdig_fun+0x1a>
 800bcc8:	3847      	subs	r0, #71	; 0x47
 800bcca:	e7f7      	b.n	800bcbc <__hexdig_fun+0xa>
 800bccc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bcd0:	2b05      	cmp	r3, #5
 800bcd2:	d801      	bhi.n	800bcd8 <__hexdig_fun+0x26>
 800bcd4:	3827      	subs	r0, #39	; 0x27
 800bcd6:	e7f1      	b.n	800bcbc <__hexdig_fun+0xa>
 800bcd8:	2000      	movs	r0, #0
 800bcda:	4770      	bx	lr

0800bcdc <__gethex>:
 800bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	ed2d 8b02 	vpush	{d8}
 800bce4:	b089      	sub	sp, #36	; 0x24
 800bce6:	ee08 0a10 	vmov	s16, r0
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	4bbc      	ldr	r3, [pc, #752]	; (800bfe0 <__gethex+0x304>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	468b      	mov	fp, r1
 800bcf6:	4690      	mov	r8, r2
 800bcf8:	f7f4 fa92 	bl	8000220 <strlen>
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	f8db 2000 	ldr.w	r2, [fp]
 800bd02:	4403      	add	r3, r0
 800bd04:	4682      	mov	sl, r0
 800bd06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bd0a:	9305      	str	r3, [sp, #20]
 800bd0c:	1c93      	adds	r3, r2, #2
 800bd0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd16:	32fe      	adds	r2, #254	; 0xfe
 800bd18:	18d1      	adds	r1, r2, r3
 800bd1a:	461f      	mov	r7, r3
 800bd1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd20:	9100      	str	r1, [sp, #0]
 800bd22:	2830      	cmp	r0, #48	; 0x30
 800bd24:	d0f8      	beq.n	800bd18 <__gethex+0x3c>
 800bd26:	f7ff ffc4 	bl	800bcb2 <__hexdig_fun>
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d13a      	bne.n	800bda6 <__gethex+0xca>
 800bd30:	9901      	ldr	r1, [sp, #4]
 800bd32:	4652      	mov	r2, sl
 800bd34:	4638      	mov	r0, r7
 800bd36:	f001 fa8a 	bl	800d24e <strncmp>
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d168      	bne.n	800be12 <__gethex+0x136>
 800bd40:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd44:	eb07 060a 	add.w	r6, r7, sl
 800bd48:	f7ff ffb3 	bl	800bcb2 <__hexdig_fun>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d062      	beq.n	800be16 <__gethex+0x13a>
 800bd50:	4633      	mov	r3, r6
 800bd52:	7818      	ldrb	r0, [r3, #0]
 800bd54:	2830      	cmp	r0, #48	; 0x30
 800bd56:	461f      	mov	r7, r3
 800bd58:	f103 0301 	add.w	r3, r3, #1
 800bd5c:	d0f9      	beq.n	800bd52 <__gethex+0x76>
 800bd5e:	f7ff ffa8 	bl	800bcb2 <__hexdig_fun>
 800bd62:	2301      	movs	r3, #1
 800bd64:	fab0 f480 	clz	r4, r0
 800bd68:	0964      	lsrs	r4, r4, #5
 800bd6a:	4635      	mov	r5, r6
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	463a      	mov	r2, r7
 800bd70:	4616      	mov	r6, r2
 800bd72:	3201      	adds	r2, #1
 800bd74:	7830      	ldrb	r0, [r6, #0]
 800bd76:	f7ff ff9c 	bl	800bcb2 <__hexdig_fun>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d1f8      	bne.n	800bd70 <__gethex+0x94>
 800bd7e:	9901      	ldr	r1, [sp, #4]
 800bd80:	4652      	mov	r2, sl
 800bd82:	4630      	mov	r0, r6
 800bd84:	f001 fa63 	bl	800d24e <strncmp>
 800bd88:	b980      	cbnz	r0, 800bdac <__gethex+0xd0>
 800bd8a:	b94d      	cbnz	r5, 800bda0 <__gethex+0xc4>
 800bd8c:	eb06 050a 	add.w	r5, r6, sl
 800bd90:	462a      	mov	r2, r5
 800bd92:	4616      	mov	r6, r2
 800bd94:	3201      	adds	r2, #1
 800bd96:	7830      	ldrb	r0, [r6, #0]
 800bd98:	f7ff ff8b 	bl	800bcb2 <__hexdig_fun>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d1f8      	bne.n	800bd92 <__gethex+0xb6>
 800bda0:	1bad      	subs	r5, r5, r6
 800bda2:	00ad      	lsls	r5, r5, #2
 800bda4:	e004      	b.n	800bdb0 <__gethex+0xd4>
 800bda6:	2400      	movs	r4, #0
 800bda8:	4625      	mov	r5, r4
 800bdaa:	e7e0      	b.n	800bd6e <__gethex+0x92>
 800bdac:	2d00      	cmp	r5, #0
 800bdae:	d1f7      	bne.n	800bda0 <__gethex+0xc4>
 800bdb0:	7833      	ldrb	r3, [r6, #0]
 800bdb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdb6:	2b50      	cmp	r3, #80	; 0x50
 800bdb8:	d13b      	bne.n	800be32 <__gethex+0x156>
 800bdba:	7873      	ldrb	r3, [r6, #1]
 800bdbc:	2b2b      	cmp	r3, #43	; 0x2b
 800bdbe:	d02c      	beq.n	800be1a <__gethex+0x13e>
 800bdc0:	2b2d      	cmp	r3, #45	; 0x2d
 800bdc2:	d02e      	beq.n	800be22 <__gethex+0x146>
 800bdc4:	1c71      	adds	r1, r6, #1
 800bdc6:	f04f 0900 	mov.w	r9, #0
 800bdca:	7808      	ldrb	r0, [r1, #0]
 800bdcc:	f7ff ff71 	bl	800bcb2 <__hexdig_fun>
 800bdd0:	1e43      	subs	r3, r0, #1
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b18      	cmp	r3, #24
 800bdd6:	d82c      	bhi.n	800be32 <__gethex+0x156>
 800bdd8:	f1a0 0210 	sub.w	r2, r0, #16
 800bddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bde0:	f7ff ff67 	bl	800bcb2 <__hexdig_fun>
 800bde4:	1e43      	subs	r3, r0, #1
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b18      	cmp	r3, #24
 800bdea:	d91d      	bls.n	800be28 <__gethex+0x14c>
 800bdec:	f1b9 0f00 	cmp.w	r9, #0
 800bdf0:	d000      	beq.n	800bdf4 <__gethex+0x118>
 800bdf2:	4252      	negs	r2, r2
 800bdf4:	4415      	add	r5, r2
 800bdf6:	f8cb 1000 	str.w	r1, [fp]
 800bdfa:	b1e4      	cbz	r4, 800be36 <__gethex+0x15a>
 800bdfc:	9b00      	ldr	r3, [sp, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bf14      	ite	ne
 800be02:	2700      	movne	r7, #0
 800be04:	2706      	moveq	r7, #6
 800be06:	4638      	mov	r0, r7
 800be08:	b009      	add	sp, #36	; 0x24
 800be0a:	ecbd 8b02 	vpop	{d8}
 800be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	463e      	mov	r6, r7
 800be14:	4625      	mov	r5, r4
 800be16:	2401      	movs	r4, #1
 800be18:	e7ca      	b.n	800bdb0 <__gethex+0xd4>
 800be1a:	f04f 0900 	mov.w	r9, #0
 800be1e:	1cb1      	adds	r1, r6, #2
 800be20:	e7d3      	b.n	800bdca <__gethex+0xee>
 800be22:	f04f 0901 	mov.w	r9, #1
 800be26:	e7fa      	b.n	800be1e <__gethex+0x142>
 800be28:	230a      	movs	r3, #10
 800be2a:	fb03 0202 	mla	r2, r3, r2, r0
 800be2e:	3a10      	subs	r2, #16
 800be30:	e7d4      	b.n	800bddc <__gethex+0x100>
 800be32:	4631      	mov	r1, r6
 800be34:	e7df      	b.n	800bdf6 <__gethex+0x11a>
 800be36:	1bf3      	subs	r3, r6, r7
 800be38:	3b01      	subs	r3, #1
 800be3a:	4621      	mov	r1, r4
 800be3c:	2b07      	cmp	r3, #7
 800be3e:	dc0b      	bgt.n	800be58 <__gethex+0x17c>
 800be40:	ee18 0a10 	vmov	r0, s16
 800be44:	f000 fad8 	bl	800c3f8 <_Balloc>
 800be48:	4604      	mov	r4, r0
 800be4a:	b940      	cbnz	r0, 800be5e <__gethex+0x182>
 800be4c:	4b65      	ldr	r3, [pc, #404]	; (800bfe4 <__gethex+0x308>)
 800be4e:	4602      	mov	r2, r0
 800be50:	21de      	movs	r1, #222	; 0xde
 800be52:	4865      	ldr	r0, [pc, #404]	; (800bfe8 <__gethex+0x30c>)
 800be54:	f001 fa2c 	bl	800d2b0 <__assert_func>
 800be58:	3101      	adds	r1, #1
 800be5a:	105b      	asrs	r3, r3, #1
 800be5c:	e7ee      	b.n	800be3c <__gethex+0x160>
 800be5e:	f100 0914 	add.w	r9, r0, #20
 800be62:	f04f 0b00 	mov.w	fp, #0
 800be66:	f1ca 0301 	rsb	r3, sl, #1
 800be6a:	f8cd 9008 	str.w	r9, [sp, #8]
 800be6e:	f8cd b000 	str.w	fp, [sp]
 800be72:	9306      	str	r3, [sp, #24]
 800be74:	42b7      	cmp	r7, r6
 800be76:	d340      	bcc.n	800befa <__gethex+0x21e>
 800be78:	9802      	ldr	r0, [sp, #8]
 800be7a:	9b00      	ldr	r3, [sp, #0]
 800be7c:	f840 3b04 	str.w	r3, [r0], #4
 800be80:	eba0 0009 	sub.w	r0, r0, r9
 800be84:	1080      	asrs	r0, r0, #2
 800be86:	0146      	lsls	r6, r0, #5
 800be88:	6120      	str	r0, [r4, #16]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fbaa 	bl	800c5e4 <__hi0bits>
 800be90:	1a30      	subs	r0, r6, r0
 800be92:	f8d8 6000 	ldr.w	r6, [r8]
 800be96:	42b0      	cmp	r0, r6
 800be98:	dd63      	ble.n	800bf62 <__gethex+0x286>
 800be9a:	1b87      	subs	r7, r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 ff44 	bl	800cd2c <__any_on>
 800bea4:	4682      	mov	sl, r0
 800bea6:	b1a8      	cbz	r0, 800bed4 <__gethex+0x1f8>
 800bea8:	1e7b      	subs	r3, r7, #1
 800beaa:	1159      	asrs	r1, r3, #5
 800beac:	f003 021f 	and.w	r2, r3, #31
 800beb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800beb4:	f04f 0a01 	mov.w	sl, #1
 800beb8:	fa0a f202 	lsl.w	r2, sl, r2
 800bebc:	420a      	tst	r2, r1
 800bebe:	d009      	beq.n	800bed4 <__gethex+0x1f8>
 800bec0:	4553      	cmp	r3, sl
 800bec2:	dd05      	ble.n	800bed0 <__gethex+0x1f4>
 800bec4:	1eb9      	subs	r1, r7, #2
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 ff30 	bl	800cd2c <__any_on>
 800becc:	2800      	cmp	r0, #0
 800bece:	d145      	bne.n	800bf5c <__gethex+0x280>
 800bed0:	f04f 0a02 	mov.w	sl, #2
 800bed4:	4639      	mov	r1, r7
 800bed6:	4620      	mov	r0, r4
 800bed8:	f7ff fe99 	bl	800bc0e <rshift>
 800bedc:	443d      	add	r5, r7
 800bede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bee2:	42ab      	cmp	r3, r5
 800bee4:	da4c      	bge.n	800bf80 <__gethex+0x2a4>
 800bee6:	ee18 0a10 	vmov	r0, s16
 800beea:	4621      	mov	r1, r4
 800beec:	f000 fac4 	bl	800c478 <_Bfree>
 800bef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bef2:	2300      	movs	r3, #0
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	27a3      	movs	r7, #163	; 0xa3
 800bef8:	e785      	b.n	800be06 <__gethex+0x12a>
 800befa:	1e73      	subs	r3, r6, #1
 800befc:	9a05      	ldr	r2, [sp, #20]
 800befe:	9303      	str	r3, [sp, #12]
 800bf00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d019      	beq.n	800bf3c <__gethex+0x260>
 800bf08:	f1bb 0f20 	cmp.w	fp, #32
 800bf0c:	d107      	bne.n	800bf1e <__gethex+0x242>
 800bf0e:	9b02      	ldr	r3, [sp, #8]
 800bf10:	9a00      	ldr	r2, [sp, #0]
 800bf12:	f843 2b04 	str.w	r2, [r3], #4
 800bf16:	9302      	str	r3, [sp, #8]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	469b      	mov	fp, r3
 800bf1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf22:	f7ff fec6 	bl	800bcb2 <__hexdig_fun>
 800bf26:	9b00      	ldr	r3, [sp, #0]
 800bf28:	f000 000f 	and.w	r0, r0, #15
 800bf2c:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf30:	4303      	orrs	r3, r0
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	f10b 0b04 	add.w	fp, fp, #4
 800bf38:	9b03      	ldr	r3, [sp, #12]
 800bf3a:	e00d      	b.n	800bf58 <__gethex+0x27c>
 800bf3c:	9b03      	ldr	r3, [sp, #12]
 800bf3e:	9a06      	ldr	r2, [sp, #24]
 800bf40:	4413      	add	r3, r2
 800bf42:	42bb      	cmp	r3, r7
 800bf44:	d3e0      	bcc.n	800bf08 <__gethex+0x22c>
 800bf46:	4618      	mov	r0, r3
 800bf48:	9901      	ldr	r1, [sp, #4]
 800bf4a:	9307      	str	r3, [sp, #28]
 800bf4c:	4652      	mov	r2, sl
 800bf4e:	f001 f97e 	bl	800d24e <strncmp>
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d1d7      	bne.n	800bf08 <__gethex+0x22c>
 800bf58:	461e      	mov	r6, r3
 800bf5a:	e78b      	b.n	800be74 <__gethex+0x198>
 800bf5c:	f04f 0a03 	mov.w	sl, #3
 800bf60:	e7b8      	b.n	800bed4 <__gethex+0x1f8>
 800bf62:	da0a      	bge.n	800bf7a <__gethex+0x29e>
 800bf64:	1a37      	subs	r7, r6, r0
 800bf66:	4621      	mov	r1, r4
 800bf68:	ee18 0a10 	vmov	r0, s16
 800bf6c:	463a      	mov	r2, r7
 800bf6e:	f000 fc9f 	bl	800c8b0 <__lshift>
 800bf72:	1bed      	subs	r5, r5, r7
 800bf74:	4604      	mov	r4, r0
 800bf76:	f100 0914 	add.w	r9, r0, #20
 800bf7a:	f04f 0a00 	mov.w	sl, #0
 800bf7e:	e7ae      	b.n	800bede <__gethex+0x202>
 800bf80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bf84:	42a8      	cmp	r0, r5
 800bf86:	dd72      	ble.n	800c06e <__gethex+0x392>
 800bf88:	1b45      	subs	r5, r0, r5
 800bf8a:	42ae      	cmp	r6, r5
 800bf8c:	dc36      	bgt.n	800bffc <__gethex+0x320>
 800bf8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d02a      	beq.n	800bfec <__gethex+0x310>
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d02c      	beq.n	800bff4 <__gethex+0x318>
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d115      	bne.n	800bfca <__gethex+0x2ee>
 800bf9e:	42ae      	cmp	r6, r5
 800bfa0:	d113      	bne.n	800bfca <__gethex+0x2ee>
 800bfa2:	2e01      	cmp	r6, #1
 800bfa4:	d10b      	bne.n	800bfbe <__gethex+0x2e2>
 800bfa6:	9a04      	ldr	r2, [sp, #16]
 800bfa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	2301      	movs	r3, #1
 800bfb0:	6123      	str	r3, [r4, #16]
 800bfb2:	f8c9 3000 	str.w	r3, [r9]
 800bfb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfb8:	2762      	movs	r7, #98	; 0x62
 800bfba:	601c      	str	r4, [r3, #0]
 800bfbc:	e723      	b.n	800be06 <__gethex+0x12a>
 800bfbe:	1e71      	subs	r1, r6, #1
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 feb3 	bl	800cd2c <__any_on>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d1ed      	bne.n	800bfa6 <__gethex+0x2ca>
 800bfca:	ee18 0a10 	vmov	r0, s16
 800bfce:	4621      	mov	r1, r4
 800bfd0:	f000 fa52 	bl	800c478 <_Bfree>
 800bfd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	2750      	movs	r7, #80	; 0x50
 800bfdc:	e713      	b.n	800be06 <__gethex+0x12a>
 800bfde:	bf00      	nop
 800bfe0:	0800f0ac 	.word	0x0800f0ac
 800bfe4:	0800efcc 	.word	0x0800efcc
 800bfe8:	0800f040 	.word	0x0800f040
 800bfec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1eb      	bne.n	800bfca <__gethex+0x2ee>
 800bff2:	e7d8      	b.n	800bfa6 <__gethex+0x2ca>
 800bff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1d5      	bne.n	800bfa6 <__gethex+0x2ca>
 800bffa:	e7e6      	b.n	800bfca <__gethex+0x2ee>
 800bffc:	1e6f      	subs	r7, r5, #1
 800bffe:	f1ba 0f00 	cmp.w	sl, #0
 800c002:	d131      	bne.n	800c068 <__gethex+0x38c>
 800c004:	b127      	cbz	r7, 800c010 <__gethex+0x334>
 800c006:	4639      	mov	r1, r7
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 fe8f 	bl	800cd2c <__any_on>
 800c00e:	4682      	mov	sl, r0
 800c010:	117b      	asrs	r3, r7, #5
 800c012:	2101      	movs	r1, #1
 800c014:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c018:	f007 071f 	and.w	r7, r7, #31
 800c01c:	fa01 f707 	lsl.w	r7, r1, r7
 800c020:	421f      	tst	r7, r3
 800c022:	4629      	mov	r1, r5
 800c024:	4620      	mov	r0, r4
 800c026:	bf18      	it	ne
 800c028:	f04a 0a02 	orrne.w	sl, sl, #2
 800c02c:	1b76      	subs	r6, r6, r5
 800c02e:	f7ff fdee 	bl	800bc0e <rshift>
 800c032:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c036:	2702      	movs	r7, #2
 800c038:	f1ba 0f00 	cmp.w	sl, #0
 800c03c:	d048      	beq.n	800c0d0 <__gethex+0x3f4>
 800c03e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c042:	2b02      	cmp	r3, #2
 800c044:	d015      	beq.n	800c072 <__gethex+0x396>
 800c046:	2b03      	cmp	r3, #3
 800c048:	d017      	beq.n	800c07a <__gethex+0x39e>
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d109      	bne.n	800c062 <__gethex+0x386>
 800c04e:	f01a 0f02 	tst.w	sl, #2
 800c052:	d006      	beq.n	800c062 <__gethex+0x386>
 800c054:	f8d9 0000 	ldr.w	r0, [r9]
 800c058:	ea4a 0a00 	orr.w	sl, sl, r0
 800c05c:	f01a 0f01 	tst.w	sl, #1
 800c060:	d10e      	bne.n	800c080 <__gethex+0x3a4>
 800c062:	f047 0710 	orr.w	r7, r7, #16
 800c066:	e033      	b.n	800c0d0 <__gethex+0x3f4>
 800c068:	f04f 0a01 	mov.w	sl, #1
 800c06c:	e7d0      	b.n	800c010 <__gethex+0x334>
 800c06e:	2701      	movs	r7, #1
 800c070:	e7e2      	b.n	800c038 <__gethex+0x35c>
 800c072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c074:	f1c3 0301 	rsb	r3, r3, #1
 800c078:	9315      	str	r3, [sp, #84]	; 0x54
 800c07a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0f0      	beq.n	800c062 <__gethex+0x386>
 800c080:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c084:	f104 0314 	add.w	r3, r4, #20
 800c088:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c08c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c090:	f04f 0c00 	mov.w	ip, #0
 800c094:	4618      	mov	r0, r3
 800c096:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c09e:	d01c      	beq.n	800c0da <__gethex+0x3fe>
 800c0a0:	3201      	adds	r2, #1
 800c0a2:	6002      	str	r2, [r0, #0]
 800c0a4:	2f02      	cmp	r7, #2
 800c0a6:	f104 0314 	add.w	r3, r4, #20
 800c0aa:	d13f      	bne.n	800c12c <__gethex+0x450>
 800c0ac:	f8d8 2000 	ldr.w	r2, [r8]
 800c0b0:	3a01      	subs	r2, #1
 800c0b2:	42b2      	cmp	r2, r6
 800c0b4:	d10a      	bne.n	800c0cc <__gethex+0x3f0>
 800c0b6:	1171      	asrs	r1, r6, #5
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0be:	f006 061f 	and.w	r6, r6, #31
 800c0c2:	fa02 f606 	lsl.w	r6, r2, r6
 800c0c6:	421e      	tst	r6, r3
 800c0c8:	bf18      	it	ne
 800c0ca:	4617      	movne	r7, r2
 800c0cc:	f047 0720 	orr.w	r7, r7, #32
 800c0d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0d2:	601c      	str	r4, [r3, #0]
 800c0d4:	9b04      	ldr	r3, [sp, #16]
 800c0d6:	601d      	str	r5, [r3, #0]
 800c0d8:	e695      	b.n	800be06 <__gethex+0x12a>
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c0e0:	d8d8      	bhi.n	800c094 <__gethex+0x3b8>
 800c0e2:	68a3      	ldr	r3, [r4, #8]
 800c0e4:	459b      	cmp	fp, r3
 800c0e6:	db19      	blt.n	800c11c <__gethex+0x440>
 800c0e8:	6861      	ldr	r1, [r4, #4]
 800c0ea:	ee18 0a10 	vmov	r0, s16
 800c0ee:	3101      	adds	r1, #1
 800c0f0:	f000 f982 	bl	800c3f8 <_Balloc>
 800c0f4:	4681      	mov	r9, r0
 800c0f6:	b918      	cbnz	r0, 800c100 <__gethex+0x424>
 800c0f8:	4b1a      	ldr	r3, [pc, #104]	; (800c164 <__gethex+0x488>)
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	2184      	movs	r1, #132	; 0x84
 800c0fe:	e6a8      	b.n	800be52 <__gethex+0x176>
 800c100:	6922      	ldr	r2, [r4, #16]
 800c102:	3202      	adds	r2, #2
 800c104:	f104 010c 	add.w	r1, r4, #12
 800c108:	0092      	lsls	r2, r2, #2
 800c10a:	300c      	adds	r0, #12
 800c10c:	f7fd f8a6 	bl	800925c <memcpy>
 800c110:	4621      	mov	r1, r4
 800c112:	ee18 0a10 	vmov	r0, s16
 800c116:	f000 f9af 	bl	800c478 <_Bfree>
 800c11a:	464c      	mov	r4, r9
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c124:	6122      	str	r2, [r4, #16]
 800c126:	2201      	movs	r2, #1
 800c128:	615a      	str	r2, [r3, #20]
 800c12a:	e7bb      	b.n	800c0a4 <__gethex+0x3c8>
 800c12c:	6922      	ldr	r2, [r4, #16]
 800c12e:	455a      	cmp	r2, fp
 800c130:	dd0b      	ble.n	800c14a <__gethex+0x46e>
 800c132:	2101      	movs	r1, #1
 800c134:	4620      	mov	r0, r4
 800c136:	f7ff fd6a 	bl	800bc0e <rshift>
 800c13a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c13e:	3501      	adds	r5, #1
 800c140:	42ab      	cmp	r3, r5
 800c142:	f6ff aed0 	blt.w	800bee6 <__gethex+0x20a>
 800c146:	2701      	movs	r7, #1
 800c148:	e7c0      	b.n	800c0cc <__gethex+0x3f0>
 800c14a:	f016 061f 	ands.w	r6, r6, #31
 800c14e:	d0fa      	beq.n	800c146 <__gethex+0x46a>
 800c150:	449a      	add	sl, r3
 800c152:	f1c6 0620 	rsb	r6, r6, #32
 800c156:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c15a:	f000 fa43 	bl	800c5e4 <__hi0bits>
 800c15e:	42b0      	cmp	r0, r6
 800c160:	dbe7      	blt.n	800c132 <__gethex+0x456>
 800c162:	e7f0      	b.n	800c146 <__gethex+0x46a>
 800c164:	0800efcc 	.word	0x0800efcc

0800c168 <L_shift>:
 800c168:	f1c2 0208 	rsb	r2, r2, #8
 800c16c:	0092      	lsls	r2, r2, #2
 800c16e:	b570      	push	{r4, r5, r6, lr}
 800c170:	f1c2 0620 	rsb	r6, r2, #32
 800c174:	6843      	ldr	r3, [r0, #4]
 800c176:	6804      	ldr	r4, [r0, #0]
 800c178:	fa03 f506 	lsl.w	r5, r3, r6
 800c17c:	432c      	orrs	r4, r5
 800c17e:	40d3      	lsrs	r3, r2
 800c180:	6004      	str	r4, [r0, #0]
 800c182:	f840 3f04 	str.w	r3, [r0, #4]!
 800c186:	4288      	cmp	r0, r1
 800c188:	d3f4      	bcc.n	800c174 <L_shift+0xc>
 800c18a:	bd70      	pop	{r4, r5, r6, pc}

0800c18c <__match>:
 800c18c:	b530      	push	{r4, r5, lr}
 800c18e:	6803      	ldr	r3, [r0, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c196:	b914      	cbnz	r4, 800c19e <__match+0x12>
 800c198:	6003      	str	r3, [r0, #0]
 800c19a:	2001      	movs	r0, #1
 800c19c:	bd30      	pop	{r4, r5, pc}
 800c19e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1a6:	2d19      	cmp	r5, #25
 800c1a8:	bf98      	it	ls
 800c1aa:	3220      	addls	r2, #32
 800c1ac:	42a2      	cmp	r2, r4
 800c1ae:	d0f0      	beq.n	800c192 <__match+0x6>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e7f3      	b.n	800c19c <__match+0x10>

0800c1b4 <__hexnan>:
 800c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	680b      	ldr	r3, [r1, #0]
 800c1ba:	6801      	ldr	r1, [r0, #0]
 800c1bc:	115e      	asrs	r6, r3, #5
 800c1be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1c2:	f013 031f 	ands.w	r3, r3, #31
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	bf18      	it	ne
 800c1ca:	3604      	addne	r6, #4
 800c1cc:	2500      	movs	r5, #0
 800c1ce:	1f37      	subs	r7, r6, #4
 800c1d0:	4682      	mov	sl, r0
 800c1d2:	4690      	mov	r8, r2
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1da:	46b9      	mov	r9, r7
 800c1dc:	463c      	mov	r4, r7
 800c1de:	9502      	str	r5, [sp, #8]
 800c1e0:	46ab      	mov	fp, r5
 800c1e2:	784a      	ldrb	r2, [r1, #1]
 800c1e4:	1c4b      	adds	r3, r1, #1
 800c1e6:	9303      	str	r3, [sp, #12]
 800c1e8:	b342      	cbz	r2, 800c23c <__hexnan+0x88>
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	9105      	str	r1, [sp, #20]
 800c1ee:	9204      	str	r2, [sp, #16]
 800c1f0:	f7ff fd5f 	bl	800bcb2 <__hexdig_fun>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d14f      	bne.n	800c298 <__hexnan+0xe4>
 800c1f8:	9a04      	ldr	r2, [sp, #16]
 800c1fa:	9905      	ldr	r1, [sp, #20]
 800c1fc:	2a20      	cmp	r2, #32
 800c1fe:	d818      	bhi.n	800c232 <__hexnan+0x7e>
 800c200:	9b02      	ldr	r3, [sp, #8]
 800c202:	459b      	cmp	fp, r3
 800c204:	dd13      	ble.n	800c22e <__hexnan+0x7a>
 800c206:	454c      	cmp	r4, r9
 800c208:	d206      	bcs.n	800c218 <__hexnan+0x64>
 800c20a:	2d07      	cmp	r5, #7
 800c20c:	dc04      	bgt.n	800c218 <__hexnan+0x64>
 800c20e:	462a      	mov	r2, r5
 800c210:	4649      	mov	r1, r9
 800c212:	4620      	mov	r0, r4
 800c214:	f7ff ffa8 	bl	800c168 <L_shift>
 800c218:	4544      	cmp	r4, r8
 800c21a:	d950      	bls.n	800c2be <__hexnan+0x10a>
 800c21c:	2300      	movs	r3, #0
 800c21e:	f1a4 0904 	sub.w	r9, r4, #4
 800c222:	f844 3c04 	str.w	r3, [r4, #-4]
 800c226:	f8cd b008 	str.w	fp, [sp, #8]
 800c22a:	464c      	mov	r4, r9
 800c22c:	461d      	mov	r5, r3
 800c22e:	9903      	ldr	r1, [sp, #12]
 800c230:	e7d7      	b.n	800c1e2 <__hexnan+0x2e>
 800c232:	2a29      	cmp	r2, #41	; 0x29
 800c234:	d156      	bne.n	800c2e4 <__hexnan+0x130>
 800c236:	3102      	adds	r1, #2
 800c238:	f8ca 1000 	str.w	r1, [sl]
 800c23c:	f1bb 0f00 	cmp.w	fp, #0
 800c240:	d050      	beq.n	800c2e4 <__hexnan+0x130>
 800c242:	454c      	cmp	r4, r9
 800c244:	d206      	bcs.n	800c254 <__hexnan+0xa0>
 800c246:	2d07      	cmp	r5, #7
 800c248:	dc04      	bgt.n	800c254 <__hexnan+0xa0>
 800c24a:	462a      	mov	r2, r5
 800c24c:	4649      	mov	r1, r9
 800c24e:	4620      	mov	r0, r4
 800c250:	f7ff ff8a 	bl	800c168 <L_shift>
 800c254:	4544      	cmp	r4, r8
 800c256:	d934      	bls.n	800c2c2 <__hexnan+0x10e>
 800c258:	f1a8 0204 	sub.w	r2, r8, #4
 800c25c:	4623      	mov	r3, r4
 800c25e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c262:	f842 1f04 	str.w	r1, [r2, #4]!
 800c266:	429f      	cmp	r7, r3
 800c268:	d2f9      	bcs.n	800c25e <__hexnan+0xaa>
 800c26a:	1b3b      	subs	r3, r7, r4
 800c26c:	f023 0303 	bic.w	r3, r3, #3
 800c270:	3304      	adds	r3, #4
 800c272:	3401      	adds	r4, #1
 800c274:	3e03      	subs	r6, #3
 800c276:	42b4      	cmp	r4, r6
 800c278:	bf88      	it	hi
 800c27a:	2304      	movhi	r3, #4
 800c27c:	4443      	add	r3, r8
 800c27e:	2200      	movs	r2, #0
 800c280:	f843 2b04 	str.w	r2, [r3], #4
 800c284:	429f      	cmp	r7, r3
 800c286:	d2fb      	bcs.n	800c280 <__hexnan+0xcc>
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	b91b      	cbnz	r3, 800c294 <__hexnan+0xe0>
 800c28c:	4547      	cmp	r7, r8
 800c28e:	d127      	bne.n	800c2e0 <__hexnan+0x12c>
 800c290:	2301      	movs	r3, #1
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	2005      	movs	r0, #5
 800c296:	e026      	b.n	800c2e6 <__hexnan+0x132>
 800c298:	3501      	adds	r5, #1
 800c29a:	2d08      	cmp	r5, #8
 800c29c:	f10b 0b01 	add.w	fp, fp, #1
 800c2a0:	dd06      	ble.n	800c2b0 <__hexnan+0xfc>
 800c2a2:	4544      	cmp	r4, r8
 800c2a4:	d9c3      	bls.n	800c22e <__hexnan+0x7a>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2ac:	2501      	movs	r5, #1
 800c2ae:	3c04      	subs	r4, #4
 800c2b0:	6822      	ldr	r2, [r4, #0]
 800c2b2:	f000 000f 	and.w	r0, r0, #15
 800c2b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c2ba:	6022      	str	r2, [r4, #0]
 800c2bc:	e7b7      	b.n	800c22e <__hexnan+0x7a>
 800c2be:	2508      	movs	r5, #8
 800c2c0:	e7b5      	b.n	800c22e <__hexnan+0x7a>
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d0df      	beq.n	800c288 <__hexnan+0xd4>
 800c2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c2cc:	f1c3 0320 	rsb	r3, r3, #32
 800c2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2d8:	401a      	ands	r2, r3
 800c2da:	f846 2c04 	str.w	r2, [r6, #-4]
 800c2de:	e7d3      	b.n	800c288 <__hexnan+0xd4>
 800c2e0:	3f04      	subs	r7, #4
 800c2e2:	e7d1      	b.n	800c288 <__hexnan+0xd4>
 800c2e4:	2004      	movs	r0, #4
 800c2e6:	b007      	add	sp, #28
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2ec <_localeconv_r>:
 800c2ec:	4800      	ldr	r0, [pc, #0]	; (800c2f0 <_localeconv_r+0x4>)
 800c2ee:	4770      	bx	lr
 800c2f0:	20000184 	.word	0x20000184

0800c2f4 <__retarget_lock_init_recursive>:
 800c2f4:	4770      	bx	lr

0800c2f6 <__retarget_lock_acquire_recursive>:
 800c2f6:	4770      	bx	lr

0800c2f8 <__retarget_lock_release_recursive>:
 800c2f8:	4770      	bx	lr

0800c2fa <__swhatbuf_r>:
 800c2fa:	b570      	push	{r4, r5, r6, lr}
 800c2fc:	460e      	mov	r6, r1
 800c2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c302:	2900      	cmp	r1, #0
 800c304:	b096      	sub	sp, #88	; 0x58
 800c306:	4614      	mov	r4, r2
 800c308:	461d      	mov	r5, r3
 800c30a:	da07      	bge.n	800c31c <__swhatbuf_r+0x22>
 800c30c:	2300      	movs	r3, #0
 800c30e:	602b      	str	r3, [r5, #0]
 800c310:	89b3      	ldrh	r3, [r6, #12]
 800c312:	061a      	lsls	r2, r3, #24
 800c314:	d410      	bmi.n	800c338 <__swhatbuf_r+0x3e>
 800c316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c31a:	e00e      	b.n	800c33a <__swhatbuf_r+0x40>
 800c31c:	466a      	mov	r2, sp
 800c31e:	f001 f807 	bl	800d330 <_fstat_r>
 800c322:	2800      	cmp	r0, #0
 800c324:	dbf2      	blt.n	800c30c <__swhatbuf_r+0x12>
 800c326:	9a01      	ldr	r2, [sp, #4]
 800c328:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c32c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c330:	425a      	negs	r2, r3
 800c332:	415a      	adcs	r2, r3
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	e7ee      	b.n	800c316 <__swhatbuf_r+0x1c>
 800c338:	2340      	movs	r3, #64	; 0x40
 800c33a:	2000      	movs	r0, #0
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	b016      	add	sp, #88	; 0x58
 800c340:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c344 <__smakebuf_r>:
 800c344:	898b      	ldrh	r3, [r1, #12]
 800c346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c348:	079d      	lsls	r5, r3, #30
 800c34a:	4606      	mov	r6, r0
 800c34c:	460c      	mov	r4, r1
 800c34e:	d507      	bpl.n	800c360 <__smakebuf_r+0x1c>
 800c350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	2301      	movs	r3, #1
 800c35a:	6163      	str	r3, [r4, #20]
 800c35c:	b002      	add	sp, #8
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	ab01      	add	r3, sp, #4
 800c362:	466a      	mov	r2, sp
 800c364:	f7ff ffc9 	bl	800c2fa <__swhatbuf_r>
 800c368:	9900      	ldr	r1, [sp, #0]
 800c36a:	4605      	mov	r5, r0
 800c36c:	4630      	mov	r0, r6
 800c36e:	f000 fd5d 	bl	800ce2c <_malloc_r>
 800c372:	b948      	cbnz	r0, 800c388 <__smakebuf_r+0x44>
 800c374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c378:	059a      	lsls	r2, r3, #22
 800c37a:	d4ef      	bmi.n	800c35c <__smakebuf_r+0x18>
 800c37c:	f023 0303 	bic.w	r3, r3, #3
 800c380:	f043 0302 	orr.w	r3, r3, #2
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	e7e3      	b.n	800c350 <__smakebuf_r+0xc>
 800c388:	4b0d      	ldr	r3, [pc, #52]	; (800c3c0 <__smakebuf_r+0x7c>)
 800c38a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	6020      	str	r0, [r4, #0]
 800c390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	9b00      	ldr	r3, [sp, #0]
 800c398:	6163      	str	r3, [r4, #20]
 800c39a:	9b01      	ldr	r3, [sp, #4]
 800c39c:	6120      	str	r0, [r4, #16]
 800c39e:	b15b      	cbz	r3, 800c3b8 <__smakebuf_r+0x74>
 800c3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f000 ffd5 	bl	800d354 <_isatty_r>
 800c3aa:	b128      	cbz	r0, 800c3b8 <__smakebuf_r+0x74>
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f023 0303 	bic.w	r3, r3, #3
 800c3b2:	f043 0301 	orr.w	r3, r3, #1
 800c3b6:	81a3      	strh	r3, [r4, #12]
 800c3b8:	89a0      	ldrh	r0, [r4, #12]
 800c3ba:	4305      	orrs	r5, r0
 800c3bc:	81a5      	strh	r5, [r4, #12]
 800c3be:	e7cd      	b.n	800c35c <__smakebuf_r+0x18>
 800c3c0:	0800ba6d 	.word	0x0800ba6d

0800c3c4 <malloc>:
 800c3c4:	4b02      	ldr	r3, [pc, #8]	; (800c3d0 <malloc+0xc>)
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	6818      	ldr	r0, [r3, #0]
 800c3ca:	f000 bd2f 	b.w	800ce2c <_malloc_r>
 800c3ce:	bf00      	nop
 800c3d0:	2000002c 	.word	0x2000002c

0800c3d4 <__ascii_mbtowc>:
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	b901      	cbnz	r1, 800c3da <__ascii_mbtowc+0x6>
 800c3d8:	a901      	add	r1, sp, #4
 800c3da:	b142      	cbz	r2, 800c3ee <__ascii_mbtowc+0x1a>
 800c3dc:	b14b      	cbz	r3, 800c3f2 <__ascii_mbtowc+0x1e>
 800c3de:	7813      	ldrb	r3, [r2, #0]
 800c3e0:	600b      	str	r3, [r1, #0]
 800c3e2:	7812      	ldrb	r2, [r2, #0]
 800c3e4:	1e10      	subs	r0, r2, #0
 800c3e6:	bf18      	it	ne
 800c3e8:	2001      	movne	r0, #1
 800c3ea:	b002      	add	sp, #8
 800c3ec:	4770      	bx	lr
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	e7fb      	b.n	800c3ea <__ascii_mbtowc+0x16>
 800c3f2:	f06f 0001 	mvn.w	r0, #1
 800c3f6:	e7f8      	b.n	800c3ea <__ascii_mbtowc+0x16>

0800c3f8 <_Balloc>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	b976      	cbnz	r6, 800c420 <_Balloc+0x28>
 800c402:	2010      	movs	r0, #16
 800c404:	f7ff ffde 	bl	800c3c4 <malloc>
 800c408:	4602      	mov	r2, r0
 800c40a:	6260      	str	r0, [r4, #36]	; 0x24
 800c40c:	b920      	cbnz	r0, 800c418 <_Balloc+0x20>
 800c40e:	4b18      	ldr	r3, [pc, #96]	; (800c470 <_Balloc+0x78>)
 800c410:	4818      	ldr	r0, [pc, #96]	; (800c474 <_Balloc+0x7c>)
 800c412:	2166      	movs	r1, #102	; 0x66
 800c414:	f000 ff4c 	bl	800d2b0 <__assert_func>
 800c418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c41c:	6006      	str	r6, [r0, #0]
 800c41e:	60c6      	str	r6, [r0, #12]
 800c420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c422:	68f3      	ldr	r3, [r6, #12]
 800c424:	b183      	cbz	r3, 800c448 <_Balloc+0x50>
 800c426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c42e:	b9b8      	cbnz	r0, 800c460 <_Balloc+0x68>
 800c430:	2101      	movs	r1, #1
 800c432:	fa01 f605 	lsl.w	r6, r1, r5
 800c436:	1d72      	adds	r2, r6, #5
 800c438:	0092      	lsls	r2, r2, #2
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 fc97 	bl	800cd6e <_calloc_r>
 800c440:	b160      	cbz	r0, 800c45c <_Balloc+0x64>
 800c442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c446:	e00e      	b.n	800c466 <_Balloc+0x6e>
 800c448:	2221      	movs	r2, #33	; 0x21
 800c44a:	2104      	movs	r1, #4
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 fc8e 	bl	800cd6e <_calloc_r>
 800c452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c454:	60f0      	str	r0, [r6, #12]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e4      	bne.n	800c426 <_Balloc+0x2e>
 800c45c:	2000      	movs	r0, #0
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	6802      	ldr	r2, [r0, #0]
 800c462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c466:	2300      	movs	r3, #0
 800c468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c46c:	e7f7      	b.n	800c45e <_Balloc+0x66>
 800c46e:	bf00      	nop
 800c470:	0800ef56 	.word	0x0800ef56
 800c474:	0800f0c0 	.word	0x0800f0c0

0800c478 <_Bfree>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c47c:	4605      	mov	r5, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	b976      	cbnz	r6, 800c4a0 <_Bfree+0x28>
 800c482:	2010      	movs	r0, #16
 800c484:	f7ff ff9e 	bl	800c3c4 <malloc>
 800c488:	4602      	mov	r2, r0
 800c48a:	6268      	str	r0, [r5, #36]	; 0x24
 800c48c:	b920      	cbnz	r0, 800c498 <_Bfree+0x20>
 800c48e:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <_Bfree+0x3c>)
 800c490:	4809      	ldr	r0, [pc, #36]	; (800c4b8 <_Bfree+0x40>)
 800c492:	218a      	movs	r1, #138	; 0x8a
 800c494:	f000 ff0c 	bl	800d2b0 <__assert_func>
 800c498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c49c:	6006      	str	r6, [r0, #0]
 800c49e:	60c6      	str	r6, [r0, #12]
 800c4a0:	b13c      	cbz	r4, 800c4b2 <_Bfree+0x3a>
 800c4a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4a4:	6862      	ldr	r2, [r4, #4]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4ac:	6021      	str	r1, [r4, #0]
 800c4ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	0800ef56 	.word	0x0800ef56
 800c4b8:	0800f0c0 	.word	0x0800f0c0

0800c4bc <__multadd>:
 800c4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c0:	690e      	ldr	r6, [r1, #16]
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	4698      	mov	r8, r3
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	f101 0014 	add.w	r0, r1, #20
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	6805      	ldr	r5, [r0, #0]
 800c4d0:	b2a9      	uxth	r1, r5
 800c4d2:	fb02 8101 	mla	r1, r2, r1, r8
 800c4d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c4da:	0c2d      	lsrs	r5, r5, #16
 800c4dc:	fb02 c505 	mla	r5, r2, r5, ip
 800c4e0:	b289      	uxth	r1, r1
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c4e8:	429e      	cmp	r6, r3
 800c4ea:	f840 1b04 	str.w	r1, [r0], #4
 800c4ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c4f2:	dcec      	bgt.n	800c4ce <__multadd+0x12>
 800c4f4:	f1b8 0f00 	cmp.w	r8, #0
 800c4f8:	d022      	beq.n	800c540 <__multadd+0x84>
 800c4fa:	68a3      	ldr	r3, [r4, #8]
 800c4fc:	42b3      	cmp	r3, r6
 800c4fe:	dc19      	bgt.n	800c534 <__multadd+0x78>
 800c500:	6861      	ldr	r1, [r4, #4]
 800c502:	4638      	mov	r0, r7
 800c504:	3101      	adds	r1, #1
 800c506:	f7ff ff77 	bl	800c3f8 <_Balloc>
 800c50a:	4605      	mov	r5, r0
 800c50c:	b928      	cbnz	r0, 800c51a <__multadd+0x5e>
 800c50e:	4602      	mov	r2, r0
 800c510:	4b0d      	ldr	r3, [pc, #52]	; (800c548 <__multadd+0x8c>)
 800c512:	480e      	ldr	r0, [pc, #56]	; (800c54c <__multadd+0x90>)
 800c514:	21b5      	movs	r1, #181	; 0xb5
 800c516:	f000 fecb 	bl	800d2b0 <__assert_func>
 800c51a:	6922      	ldr	r2, [r4, #16]
 800c51c:	3202      	adds	r2, #2
 800c51e:	f104 010c 	add.w	r1, r4, #12
 800c522:	0092      	lsls	r2, r2, #2
 800c524:	300c      	adds	r0, #12
 800c526:	f7fc fe99 	bl	800925c <memcpy>
 800c52a:	4621      	mov	r1, r4
 800c52c:	4638      	mov	r0, r7
 800c52e:	f7ff ffa3 	bl	800c478 <_Bfree>
 800c532:	462c      	mov	r4, r5
 800c534:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c538:	3601      	adds	r6, #1
 800c53a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c53e:	6126      	str	r6, [r4, #16]
 800c540:	4620      	mov	r0, r4
 800c542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c546:	bf00      	nop
 800c548:	0800efcc 	.word	0x0800efcc
 800c54c:	0800f0c0 	.word	0x0800f0c0

0800c550 <__s2b>:
 800c550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c554:	460c      	mov	r4, r1
 800c556:	4615      	mov	r5, r2
 800c558:	461f      	mov	r7, r3
 800c55a:	2209      	movs	r2, #9
 800c55c:	3308      	adds	r3, #8
 800c55e:	4606      	mov	r6, r0
 800c560:	fb93 f3f2 	sdiv	r3, r3, r2
 800c564:	2100      	movs	r1, #0
 800c566:	2201      	movs	r2, #1
 800c568:	429a      	cmp	r2, r3
 800c56a:	db09      	blt.n	800c580 <__s2b+0x30>
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ff43 	bl	800c3f8 <_Balloc>
 800c572:	b940      	cbnz	r0, 800c586 <__s2b+0x36>
 800c574:	4602      	mov	r2, r0
 800c576:	4b19      	ldr	r3, [pc, #100]	; (800c5dc <__s2b+0x8c>)
 800c578:	4819      	ldr	r0, [pc, #100]	; (800c5e0 <__s2b+0x90>)
 800c57a:	21ce      	movs	r1, #206	; 0xce
 800c57c:	f000 fe98 	bl	800d2b0 <__assert_func>
 800c580:	0052      	lsls	r2, r2, #1
 800c582:	3101      	adds	r1, #1
 800c584:	e7f0      	b.n	800c568 <__s2b+0x18>
 800c586:	9b08      	ldr	r3, [sp, #32]
 800c588:	6143      	str	r3, [r0, #20]
 800c58a:	2d09      	cmp	r5, #9
 800c58c:	f04f 0301 	mov.w	r3, #1
 800c590:	6103      	str	r3, [r0, #16]
 800c592:	dd16      	ble.n	800c5c2 <__s2b+0x72>
 800c594:	f104 0909 	add.w	r9, r4, #9
 800c598:	46c8      	mov	r8, r9
 800c59a:	442c      	add	r4, r5
 800c59c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	3b30      	subs	r3, #48	; 0x30
 800c5a4:	220a      	movs	r2, #10
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7ff ff88 	bl	800c4bc <__multadd>
 800c5ac:	45a0      	cmp	r8, r4
 800c5ae:	d1f5      	bne.n	800c59c <__s2b+0x4c>
 800c5b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c5b4:	444c      	add	r4, r9
 800c5b6:	1b2d      	subs	r5, r5, r4
 800c5b8:	1963      	adds	r3, r4, r5
 800c5ba:	42bb      	cmp	r3, r7
 800c5bc:	db04      	blt.n	800c5c8 <__s2b+0x78>
 800c5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5c2:	340a      	adds	r4, #10
 800c5c4:	2509      	movs	r5, #9
 800c5c6:	e7f6      	b.n	800c5b6 <__s2b+0x66>
 800c5c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	3b30      	subs	r3, #48	; 0x30
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ff72 	bl	800c4bc <__multadd>
 800c5d8:	e7ee      	b.n	800c5b8 <__s2b+0x68>
 800c5da:	bf00      	nop
 800c5dc:	0800efcc 	.word	0x0800efcc
 800c5e0:	0800f0c0 	.word	0x0800f0c0

0800c5e4 <__hi0bits>:
 800c5e4:	0c03      	lsrs	r3, r0, #16
 800c5e6:	041b      	lsls	r3, r3, #16
 800c5e8:	b9d3      	cbnz	r3, 800c620 <__hi0bits+0x3c>
 800c5ea:	0400      	lsls	r0, r0, #16
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5f2:	bf04      	itt	eq
 800c5f4:	0200      	lsleq	r0, r0, #8
 800c5f6:	3308      	addeq	r3, #8
 800c5f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5fc:	bf04      	itt	eq
 800c5fe:	0100      	lsleq	r0, r0, #4
 800c600:	3304      	addeq	r3, #4
 800c602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c606:	bf04      	itt	eq
 800c608:	0080      	lsleq	r0, r0, #2
 800c60a:	3302      	addeq	r3, #2
 800c60c:	2800      	cmp	r0, #0
 800c60e:	db05      	blt.n	800c61c <__hi0bits+0x38>
 800c610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c614:	f103 0301 	add.w	r3, r3, #1
 800c618:	bf08      	it	eq
 800c61a:	2320      	moveq	r3, #32
 800c61c:	4618      	mov	r0, r3
 800c61e:	4770      	bx	lr
 800c620:	2300      	movs	r3, #0
 800c622:	e7e4      	b.n	800c5ee <__hi0bits+0xa>

0800c624 <__lo0bits>:
 800c624:	6803      	ldr	r3, [r0, #0]
 800c626:	f013 0207 	ands.w	r2, r3, #7
 800c62a:	4601      	mov	r1, r0
 800c62c:	d00b      	beq.n	800c646 <__lo0bits+0x22>
 800c62e:	07da      	lsls	r2, r3, #31
 800c630:	d424      	bmi.n	800c67c <__lo0bits+0x58>
 800c632:	0798      	lsls	r0, r3, #30
 800c634:	bf49      	itett	mi
 800c636:	085b      	lsrmi	r3, r3, #1
 800c638:	089b      	lsrpl	r3, r3, #2
 800c63a:	2001      	movmi	r0, #1
 800c63c:	600b      	strmi	r3, [r1, #0]
 800c63e:	bf5c      	itt	pl
 800c640:	600b      	strpl	r3, [r1, #0]
 800c642:	2002      	movpl	r0, #2
 800c644:	4770      	bx	lr
 800c646:	b298      	uxth	r0, r3
 800c648:	b9b0      	cbnz	r0, 800c678 <__lo0bits+0x54>
 800c64a:	0c1b      	lsrs	r3, r3, #16
 800c64c:	2010      	movs	r0, #16
 800c64e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c652:	bf04      	itt	eq
 800c654:	0a1b      	lsreq	r3, r3, #8
 800c656:	3008      	addeq	r0, #8
 800c658:	071a      	lsls	r2, r3, #28
 800c65a:	bf04      	itt	eq
 800c65c:	091b      	lsreq	r3, r3, #4
 800c65e:	3004      	addeq	r0, #4
 800c660:	079a      	lsls	r2, r3, #30
 800c662:	bf04      	itt	eq
 800c664:	089b      	lsreq	r3, r3, #2
 800c666:	3002      	addeq	r0, #2
 800c668:	07da      	lsls	r2, r3, #31
 800c66a:	d403      	bmi.n	800c674 <__lo0bits+0x50>
 800c66c:	085b      	lsrs	r3, r3, #1
 800c66e:	f100 0001 	add.w	r0, r0, #1
 800c672:	d005      	beq.n	800c680 <__lo0bits+0x5c>
 800c674:	600b      	str	r3, [r1, #0]
 800c676:	4770      	bx	lr
 800c678:	4610      	mov	r0, r2
 800c67a:	e7e8      	b.n	800c64e <__lo0bits+0x2a>
 800c67c:	2000      	movs	r0, #0
 800c67e:	4770      	bx	lr
 800c680:	2020      	movs	r0, #32
 800c682:	4770      	bx	lr

0800c684 <__i2b>:
 800c684:	b510      	push	{r4, lr}
 800c686:	460c      	mov	r4, r1
 800c688:	2101      	movs	r1, #1
 800c68a:	f7ff feb5 	bl	800c3f8 <_Balloc>
 800c68e:	4602      	mov	r2, r0
 800c690:	b928      	cbnz	r0, 800c69e <__i2b+0x1a>
 800c692:	4b05      	ldr	r3, [pc, #20]	; (800c6a8 <__i2b+0x24>)
 800c694:	4805      	ldr	r0, [pc, #20]	; (800c6ac <__i2b+0x28>)
 800c696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c69a:	f000 fe09 	bl	800d2b0 <__assert_func>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	6144      	str	r4, [r0, #20]
 800c6a2:	6103      	str	r3, [r0, #16]
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	bf00      	nop
 800c6a8:	0800efcc 	.word	0x0800efcc
 800c6ac:	0800f0c0 	.word	0x0800f0c0

0800c6b0 <__multiply>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	4614      	mov	r4, r2
 800c6b6:	690a      	ldr	r2, [r1, #16]
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	bfb8      	it	lt
 800c6be:	460b      	movlt	r3, r1
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	bfbc      	itt	lt
 800c6c4:	4625      	movlt	r5, r4
 800c6c6:	461c      	movlt	r4, r3
 800c6c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c6cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c6d0:	68ab      	ldr	r3, [r5, #8]
 800c6d2:	6869      	ldr	r1, [r5, #4]
 800c6d4:	eb0a 0709 	add.w	r7, sl, r9
 800c6d8:	42bb      	cmp	r3, r7
 800c6da:	b085      	sub	sp, #20
 800c6dc:	bfb8      	it	lt
 800c6de:	3101      	addlt	r1, #1
 800c6e0:	f7ff fe8a 	bl	800c3f8 <_Balloc>
 800c6e4:	b930      	cbnz	r0, 800c6f4 <__multiply+0x44>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	4b42      	ldr	r3, [pc, #264]	; (800c7f4 <__multiply+0x144>)
 800c6ea:	4843      	ldr	r0, [pc, #268]	; (800c7f8 <__multiply+0x148>)
 800c6ec:	f240 115d 	movw	r1, #349	; 0x15d
 800c6f0:	f000 fdde 	bl	800d2b0 <__assert_func>
 800c6f4:	f100 0614 	add.w	r6, r0, #20
 800c6f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c6fc:	4633      	mov	r3, r6
 800c6fe:	2200      	movs	r2, #0
 800c700:	4543      	cmp	r3, r8
 800c702:	d31e      	bcc.n	800c742 <__multiply+0x92>
 800c704:	f105 0c14 	add.w	ip, r5, #20
 800c708:	f104 0314 	add.w	r3, r4, #20
 800c70c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c710:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c714:	9202      	str	r2, [sp, #8]
 800c716:	ebac 0205 	sub.w	r2, ip, r5
 800c71a:	3a15      	subs	r2, #21
 800c71c:	f022 0203 	bic.w	r2, r2, #3
 800c720:	3204      	adds	r2, #4
 800c722:	f105 0115 	add.w	r1, r5, #21
 800c726:	458c      	cmp	ip, r1
 800c728:	bf38      	it	cc
 800c72a:	2204      	movcc	r2, #4
 800c72c:	9201      	str	r2, [sp, #4]
 800c72e:	9a02      	ldr	r2, [sp, #8]
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	429a      	cmp	r2, r3
 800c734:	d808      	bhi.n	800c748 <__multiply+0x98>
 800c736:	2f00      	cmp	r7, #0
 800c738:	dc55      	bgt.n	800c7e6 <__multiply+0x136>
 800c73a:	6107      	str	r7, [r0, #16]
 800c73c:	b005      	add	sp, #20
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	f843 2b04 	str.w	r2, [r3], #4
 800c746:	e7db      	b.n	800c700 <__multiply+0x50>
 800c748:	f8b3 a000 	ldrh.w	sl, [r3]
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	d020      	beq.n	800c794 <__multiply+0xe4>
 800c752:	f105 0e14 	add.w	lr, r5, #20
 800c756:	46b1      	mov	r9, r6
 800c758:	2200      	movs	r2, #0
 800c75a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c75e:	f8d9 b000 	ldr.w	fp, [r9]
 800c762:	b2a1      	uxth	r1, r4
 800c764:	fa1f fb8b 	uxth.w	fp, fp
 800c768:	fb0a b101 	mla	r1, sl, r1, fp
 800c76c:	4411      	add	r1, r2
 800c76e:	f8d9 2000 	ldr.w	r2, [r9]
 800c772:	0c24      	lsrs	r4, r4, #16
 800c774:	0c12      	lsrs	r2, r2, #16
 800c776:	fb0a 2404 	mla	r4, sl, r4, r2
 800c77a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c77e:	b289      	uxth	r1, r1
 800c780:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c784:	45f4      	cmp	ip, lr
 800c786:	f849 1b04 	str.w	r1, [r9], #4
 800c78a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c78e:	d8e4      	bhi.n	800c75a <__multiply+0xaa>
 800c790:	9901      	ldr	r1, [sp, #4]
 800c792:	5072      	str	r2, [r6, r1]
 800c794:	9a03      	ldr	r2, [sp, #12]
 800c796:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c79a:	3304      	adds	r3, #4
 800c79c:	f1b9 0f00 	cmp.w	r9, #0
 800c7a0:	d01f      	beq.n	800c7e2 <__multiply+0x132>
 800c7a2:	6834      	ldr	r4, [r6, #0]
 800c7a4:	f105 0114 	add.w	r1, r5, #20
 800c7a8:	46b6      	mov	lr, r6
 800c7aa:	f04f 0a00 	mov.w	sl, #0
 800c7ae:	880a      	ldrh	r2, [r1, #0]
 800c7b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c7b4:	fb09 b202 	mla	r2, r9, r2, fp
 800c7b8:	4492      	add	sl, r2
 800c7ba:	b2a4      	uxth	r4, r4
 800c7bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c7c0:	f84e 4b04 	str.w	r4, [lr], #4
 800c7c4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c7c8:	f8be 2000 	ldrh.w	r2, [lr]
 800c7cc:	0c24      	lsrs	r4, r4, #16
 800c7ce:	fb09 2404 	mla	r4, r9, r4, r2
 800c7d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c7d6:	458c      	cmp	ip, r1
 800c7d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c7dc:	d8e7      	bhi.n	800c7ae <__multiply+0xfe>
 800c7de:	9a01      	ldr	r2, [sp, #4]
 800c7e0:	50b4      	str	r4, [r6, r2]
 800c7e2:	3604      	adds	r6, #4
 800c7e4:	e7a3      	b.n	800c72e <__multiply+0x7e>
 800c7e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1a5      	bne.n	800c73a <__multiply+0x8a>
 800c7ee:	3f01      	subs	r7, #1
 800c7f0:	e7a1      	b.n	800c736 <__multiply+0x86>
 800c7f2:	bf00      	nop
 800c7f4:	0800efcc 	.word	0x0800efcc
 800c7f8:	0800f0c0 	.word	0x0800f0c0

0800c7fc <__pow5mult>:
 800c7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c800:	4615      	mov	r5, r2
 800c802:	f012 0203 	ands.w	r2, r2, #3
 800c806:	4606      	mov	r6, r0
 800c808:	460f      	mov	r7, r1
 800c80a:	d007      	beq.n	800c81c <__pow5mult+0x20>
 800c80c:	4c25      	ldr	r4, [pc, #148]	; (800c8a4 <__pow5mult+0xa8>)
 800c80e:	3a01      	subs	r2, #1
 800c810:	2300      	movs	r3, #0
 800c812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c816:	f7ff fe51 	bl	800c4bc <__multadd>
 800c81a:	4607      	mov	r7, r0
 800c81c:	10ad      	asrs	r5, r5, #2
 800c81e:	d03d      	beq.n	800c89c <__pow5mult+0xa0>
 800c820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c822:	b97c      	cbnz	r4, 800c844 <__pow5mult+0x48>
 800c824:	2010      	movs	r0, #16
 800c826:	f7ff fdcd 	bl	800c3c4 <malloc>
 800c82a:	4602      	mov	r2, r0
 800c82c:	6270      	str	r0, [r6, #36]	; 0x24
 800c82e:	b928      	cbnz	r0, 800c83c <__pow5mult+0x40>
 800c830:	4b1d      	ldr	r3, [pc, #116]	; (800c8a8 <__pow5mult+0xac>)
 800c832:	481e      	ldr	r0, [pc, #120]	; (800c8ac <__pow5mult+0xb0>)
 800c834:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c838:	f000 fd3a 	bl	800d2b0 <__assert_func>
 800c83c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c840:	6004      	str	r4, [r0, #0]
 800c842:	60c4      	str	r4, [r0, #12]
 800c844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c84c:	b94c      	cbnz	r4, 800c862 <__pow5mult+0x66>
 800c84e:	f240 2171 	movw	r1, #625	; 0x271
 800c852:	4630      	mov	r0, r6
 800c854:	f7ff ff16 	bl	800c684 <__i2b>
 800c858:	2300      	movs	r3, #0
 800c85a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c85e:	4604      	mov	r4, r0
 800c860:	6003      	str	r3, [r0, #0]
 800c862:	f04f 0900 	mov.w	r9, #0
 800c866:	07eb      	lsls	r3, r5, #31
 800c868:	d50a      	bpl.n	800c880 <__pow5mult+0x84>
 800c86a:	4639      	mov	r1, r7
 800c86c:	4622      	mov	r2, r4
 800c86e:	4630      	mov	r0, r6
 800c870:	f7ff ff1e 	bl	800c6b0 <__multiply>
 800c874:	4639      	mov	r1, r7
 800c876:	4680      	mov	r8, r0
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff fdfd 	bl	800c478 <_Bfree>
 800c87e:	4647      	mov	r7, r8
 800c880:	106d      	asrs	r5, r5, #1
 800c882:	d00b      	beq.n	800c89c <__pow5mult+0xa0>
 800c884:	6820      	ldr	r0, [r4, #0]
 800c886:	b938      	cbnz	r0, 800c898 <__pow5mult+0x9c>
 800c888:	4622      	mov	r2, r4
 800c88a:	4621      	mov	r1, r4
 800c88c:	4630      	mov	r0, r6
 800c88e:	f7ff ff0f 	bl	800c6b0 <__multiply>
 800c892:	6020      	str	r0, [r4, #0]
 800c894:	f8c0 9000 	str.w	r9, [r0]
 800c898:	4604      	mov	r4, r0
 800c89a:	e7e4      	b.n	800c866 <__pow5mult+0x6a>
 800c89c:	4638      	mov	r0, r7
 800c89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0800f210 	.word	0x0800f210
 800c8a8:	0800ef56 	.word	0x0800ef56
 800c8ac:	0800f0c0 	.word	0x0800f0c0

0800c8b0 <__lshift>:
 800c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	6849      	ldr	r1, [r1, #4]
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8be:	68a3      	ldr	r3, [r4, #8]
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	4691      	mov	r9, r2
 800c8c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8c8:	f108 0601 	add.w	r6, r8, #1
 800c8cc:	42b3      	cmp	r3, r6
 800c8ce:	db0b      	blt.n	800c8e8 <__lshift+0x38>
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f7ff fd91 	bl	800c3f8 <_Balloc>
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	b948      	cbnz	r0, 800c8ee <__lshift+0x3e>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	4b28      	ldr	r3, [pc, #160]	; (800c980 <__lshift+0xd0>)
 800c8de:	4829      	ldr	r0, [pc, #164]	; (800c984 <__lshift+0xd4>)
 800c8e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8e4:	f000 fce4 	bl	800d2b0 <__assert_func>
 800c8e8:	3101      	adds	r1, #1
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	e7ee      	b.n	800c8cc <__lshift+0x1c>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f100 0114 	add.w	r1, r0, #20
 800c8f4:	f100 0210 	add.w	r2, r0, #16
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	4553      	cmp	r3, sl
 800c8fc:	db33      	blt.n	800c966 <__lshift+0xb6>
 800c8fe:	6920      	ldr	r0, [r4, #16]
 800c900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c904:	f104 0314 	add.w	r3, r4, #20
 800c908:	f019 091f 	ands.w	r9, r9, #31
 800c90c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c914:	d02b      	beq.n	800c96e <__lshift+0xbe>
 800c916:	f1c9 0e20 	rsb	lr, r9, #32
 800c91a:	468a      	mov	sl, r1
 800c91c:	2200      	movs	r2, #0
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	fa00 f009 	lsl.w	r0, r0, r9
 800c924:	4302      	orrs	r2, r0
 800c926:	f84a 2b04 	str.w	r2, [sl], #4
 800c92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92e:	459c      	cmp	ip, r3
 800c930:	fa22 f20e 	lsr.w	r2, r2, lr
 800c934:	d8f3      	bhi.n	800c91e <__lshift+0x6e>
 800c936:	ebac 0304 	sub.w	r3, ip, r4
 800c93a:	3b15      	subs	r3, #21
 800c93c:	f023 0303 	bic.w	r3, r3, #3
 800c940:	3304      	adds	r3, #4
 800c942:	f104 0015 	add.w	r0, r4, #21
 800c946:	4584      	cmp	ip, r0
 800c948:	bf38      	it	cc
 800c94a:	2304      	movcc	r3, #4
 800c94c:	50ca      	str	r2, [r1, r3]
 800c94e:	b10a      	cbz	r2, 800c954 <__lshift+0xa4>
 800c950:	f108 0602 	add.w	r6, r8, #2
 800c954:	3e01      	subs	r6, #1
 800c956:	4638      	mov	r0, r7
 800c958:	612e      	str	r6, [r5, #16]
 800c95a:	4621      	mov	r1, r4
 800c95c:	f7ff fd8c 	bl	800c478 <_Bfree>
 800c960:	4628      	mov	r0, r5
 800c962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c966:	f842 0f04 	str.w	r0, [r2, #4]!
 800c96a:	3301      	adds	r3, #1
 800c96c:	e7c5      	b.n	800c8fa <__lshift+0x4a>
 800c96e:	3904      	subs	r1, #4
 800c970:	f853 2b04 	ldr.w	r2, [r3], #4
 800c974:	f841 2f04 	str.w	r2, [r1, #4]!
 800c978:	459c      	cmp	ip, r3
 800c97a:	d8f9      	bhi.n	800c970 <__lshift+0xc0>
 800c97c:	e7ea      	b.n	800c954 <__lshift+0xa4>
 800c97e:	bf00      	nop
 800c980:	0800efcc 	.word	0x0800efcc
 800c984:	0800f0c0 	.word	0x0800f0c0

0800c988 <__mcmp>:
 800c988:	b530      	push	{r4, r5, lr}
 800c98a:	6902      	ldr	r2, [r0, #16]
 800c98c:	690c      	ldr	r4, [r1, #16]
 800c98e:	1b12      	subs	r2, r2, r4
 800c990:	d10e      	bne.n	800c9b0 <__mcmp+0x28>
 800c992:	f100 0314 	add.w	r3, r0, #20
 800c996:	3114      	adds	r1, #20
 800c998:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c99c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9a8:	42a5      	cmp	r5, r4
 800c9aa:	d003      	beq.n	800c9b4 <__mcmp+0x2c>
 800c9ac:	d305      	bcc.n	800c9ba <__mcmp+0x32>
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	bd30      	pop	{r4, r5, pc}
 800c9b4:	4283      	cmp	r3, r0
 800c9b6:	d3f3      	bcc.n	800c9a0 <__mcmp+0x18>
 800c9b8:	e7fa      	b.n	800c9b0 <__mcmp+0x28>
 800c9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c9be:	e7f7      	b.n	800c9b0 <__mcmp+0x28>

0800c9c0 <__mdiff>:
 800c9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	4606      	mov	r6, r0
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	4617      	mov	r7, r2
 800c9ce:	f7ff ffdb 	bl	800c988 <__mcmp>
 800c9d2:	1e05      	subs	r5, r0, #0
 800c9d4:	d110      	bne.n	800c9f8 <__mdiff+0x38>
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f7ff fd0d 	bl	800c3f8 <_Balloc>
 800c9de:	b930      	cbnz	r0, 800c9ee <__mdiff+0x2e>
 800c9e0:	4b39      	ldr	r3, [pc, #228]	; (800cac8 <__mdiff+0x108>)
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	f240 2132 	movw	r1, #562	; 0x232
 800c9e8:	4838      	ldr	r0, [pc, #224]	; (800cacc <__mdiff+0x10c>)
 800c9ea:	f000 fc61 	bl	800d2b0 <__assert_func>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f8:	bfa4      	itt	ge
 800c9fa:	463b      	movge	r3, r7
 800c9fc:	4627      	movge	r7, r4
 800c9fe:	4630      	mov	r0, r6
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	bfa6      	itte	ge
 800ca04:	461c      	movge	r4, r3
 800ca06:	2500      	movge	r5, #0
 800ca08:	2501      	movlt	r5, #1
 800ca0a:	f7ff fcf5 	bl	800c3f8 <_Balloc>
 800ca0e:	b920      	cbnz	r0, 800ca1a <__mdiff+0x5a>
 800ca10:	4b2d      	ldr	r3, [pc, #180]	; (800cac8 <__mdiff+0x108>)
 800ca12:	4602      	mov	r2, r0
 800ca14:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca18:	e7e6      	b.n	800c9e8 <__mdiff+0x28>
 800ca1a:	693e      	ldr	r6, [r7, #16]
 800ca1c:	60c5      	str	r5, [r0, #12]
 800ca1e:	6925      	ldr	r5, [r4, #16]
 800ca20:	f107 0114 	add.w	r1, r7, #20
 800ca24:	f104 0914 	add.w	r9, r4, #20
 800ca28:	f100 0e14 	add.w	lr, r0, #20
 800ca2c:	f107 0210 	add.w	r2, r7, #16
 800ca30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ca34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ca38:	46f2      	mov	sl, lr
 800ca3a:	2700      	movs	r7, #0
 800ca3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca44:	fa1f f883 	uxth.w	r8, r3
 800ca48:	fa17 f78b 	uxtah	r7, r7, fp
 800ca4c:	0c1b      	lsrs	r3, r3, #16
 800ca4e:	eba7 0808 	sub.w	r8, r7, r8
 800ca52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca5a:	fa1f f888 	uxth.w	r8, r8
 800ca5e:	141f      	asrs	r7, r3, #16
 800ca60:	454d      	cmp	r5, r9
 800ca62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca66:	f84a 3b04 	str.w	r3, [sl], #4
 800ca6a:	d8e7      	bhi.n	800ca3c <__mdiff+0x7c>
 800ca6c:	1b2b      	subs	r3, r5, r4
 800ca6e:	3b15      	subs	r3, #21
 800ca70:	f023 0303 	bic.w	r3, r3, #3
 800ca74:	3304      	adds	r3, #4
 800ca76:	3415      	adds	r4, #21
 800ca78:	42a5      	cmp	r5, r4
 800ca7a:	bf38      	it	cc
 800ca7c:	2304      	movcc	r3, #4
 800ca7e:	4419      	add	r1, r3
 800ca80:	4473      	add	r3, lr
 800ca82:	469e      	mov	lr, r3
 800ca84:	460d      	mov	r5, r1
 800ca86:	4565      	cmp	r5, ip
 800ca88:	d30e      	bcc.n	800caa8 <__mdiff+0xe8>
 800ca8a:	f10c 0203 	add.w	r2, ip, #3
 800ca8e:	1a52      	subs	r2, r2, r1
 800ca90:	f022 0203 	bic.w	r2, r2, #3
 800ca94:	3903      	subs	r1, #3
 800ca96:	458c      	cmp	ip, r1
 800ca98:	bf38      	it	cc
 800ca9a:	2200      	movcc	r2, #0
 800ca9c:	441a      	add	r2, r3
 800ca9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800caa2:	b17b      	cbz	r3, 800cac4 <__mdiff+0x104>
 800caa4:	6106      	str	r6, [r0, #16]
 800caa6:	e7a5      	b.n	800c9f4 <__mdiff+0x34>
 800caa8:	f855 8b04 	ldr.w	r8, [r5], #4
 800caac:	fa17 f488 	uxtah	r4, r7, r8
 800cab0:	1422      	asrs	r2, r4, #16
 800cab2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cab6:	b2a4      	uxth	r4, r4
 800cab8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cabc:	f84e 4b04 	str.w	r4, [lr], #4
 800cac0:	1417      	asrs	r7, r2, #16
 800cac2:	e7e0      	b.n	800ca86 <__mdiff+0xc6>
 800cac4:	3e01      	subs	r6, #1
 800cac6:	e7ea      	b.n	800ca9e <__mdiff+0xde>
 800cac8:	0800efcc 	.word	0x0800efcc
 800cacc:	0800f0c0 	.word	0x0800f0c0

0800cad0 <__ulp>:
 800cad0:	b082      	sub	sp, #8
 800cad2:	ed8d 0b00 	vstr	d0, [sp]
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	4912      	ldr	r1, [pc, #72]	; (800cb24 <__ulp+0x54>)
 800cada:	4019      	ands	r1, r3
 800cadc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cae0:	2900      	cmp	r1, #0
 800cae2:	dd05      	ble.n	800caf0 <__ulp+0x20>
 800cae4:	2200      	movs	r2, #0
 800cae6:	460b      	mov	r3, r1
 800cae8:	ec43 2b10 	vmov	d0, r2, r3
 800caec:	b002      	add	sp, #8
 800caee:	4770      	bx	lr
 800caf0:	4249      	negs	r1, r1
 800caf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800caf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cafa:	f04f 0200 	mov.w	r2, #0
 800cafe:	f04f 0300 	mov.w	r3, #0
 800cb02:	da04      	bge.n	800cb0e <__ulp+0x3e>
 800cb04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cb08:	fa41 f300 	asr.w	r3, r1, r0
 800cb0c:	e7ec      	b.n	800cae8 <__ulp+0x18>
 800cb0e:	f1a0 0114 	sub.w	r1, r0, #20
 800cb12:	291e      	cmp	r1, #30
 800cb14:	bfda      	itte	le
 800cb16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cb1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cb1e:	2101      	movgt	r1, #1
 800cb20:	460a      	mov	r2, r1
 800cb22:	e7e1      	b.n	800cae8 <__ulp+0x18>
 800cb24:	7ff00000 	.word	0x7ff00000

0800cb28 <__b2d>:
 800cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2a:	6905      	ldr	r5, [r0, #16]
 800cb2c:	f100 0714 	add.w	r7, r0, #20
 800cb30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cb34:	1f2e      	subs	r6, r5, #4
 800cb36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7ff fd52 	bl	800c5e4 <__hi0bits>
 800cb40:	f1c0 0320 	rsb	r3, r0, #32
 800cb44:	280a      	cmp	r0, #10
 800cb46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cbc4 <__b2d+0x9c>
 800cb4a:	600b      	str	r3, [r1, #0]
 800cb4c:	dc14      	bgt.n	800cb78 <__b2d+0x50>
 800cb4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800cb52:	fa24 f10e 	lsr.w	r1, r4, lr
 800cb56:	42b7      	cmp	r7, r6
 800cb58:	ea41 030c 	orr.w	r3, r1, ip
 800cb5c:	bf34      	ite	cc
 800cb5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cb62:	2100      	movcs	r1, #0
 800cb64:	3015      	adds	r0, #21
 800cb66:	fa04 f000 	lsl.w	r0, r4, r0
 800cb6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800cb6e:	ea40 0201 	orr.w	r2, r0, r1
 800cb72:	ec43 2b10 	vmov	d0, r2, r3
 800cb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb78:	42b7      	cmp	r7, r6
 800cb7a:	bf3a      	itte	cc
 800cb7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cb80:	f1a5 0608 	subcc.w	r6, r5, #8
 800cb84:	2100      	movcs	r1, #0
 800cb86:	380b      	subs	r0, #11
 800cb88:	d017      	beq.n	800cbba <__b2d+0x92>
 800cb8a:	f1c0 0c20 	rsb	ip, r0, #32
 800cb8e:	fa04 f500 	lsl.w	r5, r4, r0
 800cb92:	42be      	cmp	r6, r7
 800cb94:	fa21 f40c 	lsr.w	r4, r1, ip
 800cb98:	ea45 0504 	orr.w	r5, r5, r4
 800cb9c:	bf8c      	ite	hi
 800cb9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cba2:	2400      	movls	r4, #0
 800cba4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cba8:	fa01 f000 	lsl.w	r0, r1, r0
 800cbac:	fa24 f40c 	lsr.w	r4, r4, ip
 800cbb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cbb4:	ea40 0204 	orr.w	r2, r0, r4
 800cbb8:	e7db      	b.n	800cb72 <__b2d+0x4a>
 800cbba:	ea44 030c 	orr.w	r3, r4, ip
 800cbbe:	460a      	mov	r2, r1
 800cbc0:	e7d7      	b.n	800cb72 <__b2d+0x4a>
 800cbc2:	bf00      	nop
 800cbc4:	3ff00000 	.word	0x3ff00000

0800cbc8 <__d2b>:
 800cbc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbcc:	4689      	mov	r9, r1
 800cbce:	2101      	movs	r1, #1
 800cbd0:	ec57 6b10 	vmov	r6, r7, d0
 800cbd4:	4690      	mov	r8, r2
 800cbd6:	f7ff fc0f 	bl	800c3f8 <_Balloc>
 800cbda:	4604      	mov	r4, r0
 800cbdc:	b930      	cbnz	r0, 800cbec <__d2b+0x24>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	4b25      	ldr	r3, [pc, #148]	; (800cc78 <__d2b+0xb0>)
 800cbe2:	4826      	ldr	r0, [pc, #152]	; (800cc7c <__d2b+0xb4>)
 800cbe4:	f240 310a 	movw	r1, #778	; 0x30a
 800cbe8:	f000 fb62 	bl	800d2b0 <__assert_func>
 800cbec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cbf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cbf4:	bb35      	cbnz	r5, 800cc44 <__d2b+0x7c>
 800cbf6:	2e00      	cmp	r6, #0
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	d028      	beq.n	800cc4e <__d2b+0x86>
 800cbfc:	4668      	mov	r0, sp
 800cbfe:	9600      	str	r6, [sp, #0]
 800cc00:	f7ff fd10 	bl	800c624 <__lo0bits>
 800cc04:	9900      	ldr	r1, [sp, #0]
 800cc06:	b300      	cbz	r0, 800cc4a <__d2b+0x82>
 800cc08:	9a01      	ldr	r2, [sp, #4]
 800cc0a:	f1c0 0320 	rsb	r3, r0, #32
 800cc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc12:	430b      	orrs	r3, r1
 800cc14:	40c2      	lsrs	r2, r0
 800cc16:	6163      	str	r3, [r4, #20]
 800cc18:	9201      	str	r2, [sp, #4]
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	61a3      	str	r3, [r4, #24]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bf14      	ite	ne
 800cc22:	2202      	movne	r2, #2
 800cc24:	2201      	moveq	r2, #1
 800cc26:	6122      	str	r2, [r4, #16]
 800cc28:	b1d5      	cbz	r5, 800cc60 <__d2b+0x98>
 800cc2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc2e:	4405      	add	r5, r0
 800cc30:	f8c9 5000 	str.w	r5, [r9]
 800cc34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc38:	f8c8 0000 	str.w	r0, [r8]
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	b003      	add	sp, #12
 800cc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc48:	e7d5      	b.n	800cbf6 <__d2b+0x2e>
 800cc4a:	6161      	str	r1, [r4, #20]
 800cc4c:	e7e5      	b.n	800cc1a <__d2b+0x52>
 800cc4e:	a801      	add	r0, sp, #4
 800cc50:	f7ff fce8 	bl	800c624 <__lo0bits>
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	6163      	str	r3, [r4, #20]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	6122      	str	r2, [r4, #16]
 800cc5c:	3020      	adds	r0, #32
 800cc5e:	e7e3      	b.n	800cc28 <__d2b+0x60>
 800cc60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc68:	f8c9 0000 	str.w	r0, [r9]
 800cc6c:	6918      	ldr	r0, [r3, #16]
 800cc6e:	f7ff fcb9 	bl	800c5e4 <__hi0bits>
 800cc72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc76:	e7df      	b.n	800cc38 <__d2b+0x70>
 800cc78:	0800efcc 	.word	0x0800efcc
 800cc7c:	0800f0c0 	.word	0x0800f0c0

0800cc80 <__ratio>:
 800cc80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	4688      	mov	r8, r1
 800cc86:	4669      	mov	r1, sp
 800cc88:	4681      	mov	r9, r0
 800cc8a:	f7ff ff4d 	bl	800cb28 <__b2d>
 800cc8e:	a901      	add	r1, sp, #4
 800cc90:	4640      	mov	r0, r8
 800cc92:	ec55 4b10 	vmov	r4, r5, d0
 800cc96:	f7ff ff47 	bl	800cb28 <__b2d>
 800cc9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cca2:	eba3 0c02 	sub.w	ip, r3, r2
 800cca6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccaa:	1a9b      	subs	r3, r3, r2
 800ccac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ccb0:	ec51 0b10 	vmov	r0, r1, d0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	bfd6      	itet	le
 800ccb8:	460a      	movle	r2, r1
 800ccba:	462a      	movgt	r2, r5
 800ccbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ccc0:	468b      	mov	fp, r1
 800ccc2:	462f      	mov	r7, r5
 800ccc4:	bfd4      	ite	le
 800ccc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ccca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ccce:	4620      	mov	r0, r4
 800ccd0:	ee10 2a10 	vmov	r2, s0
 800ccd4:	465b      	mov	r3, fp
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	f7f3 fde0 	bl	800089c <__aeabi_ddiv>
 800ccdc:	ec41 0b10 	vmov	d0, r0, r1
 800cce0:	b003      	add	sp, #12
 800cce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cce6 <__copybits>:
 800cce6:	3901      	subs	r1, #1
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	1149      	asrs	r1, r1, #5
 800ccec:	6914      	ldr	r4, [r2, #16]
 800ccee:	3101      	adds	r1, #1
 800ccf0:	f102 0314 	add.w	r3, r2, #20
 800ccf4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ccf8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccfc:	1f05      	subs	r5, r0, #4
 800ccfe:	42a3      	cmp	r3, r4
 800cd00:	d30c      	bcc.n	800cd1c <__copybits+0x36>
 800cd02:	1aa3      	subs	r3, r4, r2
 800cd04:	3b11      	subs	r3, #17
 800cd06:	f023 0303 	bic.w	r3, r3, #3
 800cd0a:	3211      	adds	r2, #17
 800cd0c:	42a2      	cmp	r2, r4
 800cd0e:	bf88      	it	hi
 800cd10:	2300      	movhi	r3, #0
 800cd12:	4418      	add	r0, r3
 800cd14:	2300      	movs	r3, #0
 800cd16:	4288      	cmp	r0, r1
 800cd18:	d305      	bcc.n	800cd26 <__copybits+0x40>
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd20:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd24:	e7eb      	b.n	800ccfe <__copybits+0x18>
 800cd26:	f840 3b04 	str.w	r3, [r0], #4
 800cd2a:	e7f4      	b.n	800cd16 <__copybits+0x30>

0800cd2c <__any_on>:
 800cd2c:	f100 0214 	add.w	r2, r0, #20
 800cd30:	6900      	ldr	r0, [r0, #16]
 800cd32:	114b      	asrs	r3, r1, #5
 800cd34:	4298      	cmp	r0, r3
 800cd36:	b510      	push	{r4, lr}
 800cd38:	db11      	blt.n	800cd5e <__any_on+0x32>
 800cd3a:	dd0a      	ble.n	800cd52 <__any_on+0x26>
 800cd3c:	f011 011f 	ands.w	r1, r1, #31
 800cd40:	d007      	beq.n	800cd52 <__any_on+0x26>
 800cd42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd46:	fa24 f001 	lsr.w	r0, r4, r1
 800cd4a:	fa00 f101 	lsl.w	r1, r0, r1
 800cd4e:	428c      	cmp	r4, r1
 800cd50:	d10b      	bne.n	800cd6a <__any_on+0x3e>
 800cd52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d803      	bhi.n	800cd62 <__any_on+0x36>
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	4603      	mov	r3, r0
 800cd60:	e7f7      	b.n	800cd52 <__any_on+0x26>
 800cd62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd66:	2900      	cmp	r1, #0
 800cd68:	d0f5      	beq.n	800cd56 <__any_on+0x2a>
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	e7f6      	b.n	800cd5c <__any_on+0x30>

0800cd6e <_calloc_r>:
 800cd6e:	b513      	push	{r0, r1, r4, lr}
 800cd70:	434a      	muls	r2, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	9201      	str	r2, [sp, #4]
 800cd76:	f000 f859 	bl	800ce2c <_malloc_r>
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	b118      	cbz	r0, 800cd86 <_calloc_r+0x18>
 800cd7e:	9a01      	ldr	r2, [sp, #4]
 800cd80:	2100      	movs	r1, #0
 800cd82:	f7fc fa93 	bl	80092ac <memset>
 800cd86:	4620      	mov	r0, r4
 800cd88:	b002      	add	sp, #8
 800cd8a:	bd10      	pop	{r4, pc}

0800cd8c <_free_r>:
 800cd8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd8e:	2900      	cmp	r1, #0
 800cd90:	d048      	beq.n	800ce24 <_free_r+0x98>
 800cd92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd96:	9001      	str	r0, [sp, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd9e:	bfb8      	it	lt
 800cda0:	18e4      	addlt	r4, r4, r3
 800cda2:	f000 faf9 	bl	800d398 <__malloc_lock>
 800cda6:	4a20      	ldr	r2, [pc, #128]	; (800ce28 <_free_r+0x9c>)
 800cda8:	9801      	ldr	r0, [sp, #4]
 800cdaa:	6813      	ldr	r3, [r2, #0]
 800cdac:	4615      	mov	r5, r2
 800cdae:	b933      	cbnz	r3, 800cdbe <_free_r+0x32>
 800cdb0:	6063      	str	r3, [r4, #4]
 800cdb2:	6014      	str	r4, [r2, #0]
 800cdb4:	b003      	add	sp, #12
 800cdb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdba:	f000 baf3 	b.w	800d3a4 <__malloc_unlock>
 800cdbe:	42a3      	cmp	r3, r4
 800cdc0:	d90b      	bls.n	800cdda <_free_r+0x4e>
 800cdc2:	6821      	ldr	r1, [r4, #0]
 800cdc4:	1862      	adds	r2, r4, r1
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	bf04      	itt	eq
 800cdca:	681a      	ldreq	r2, [r3, #0]
 800cdcc:	685b      	ldreq	r3, [r3, #4]
 800cdce:	6063      	str	r3, [r4, #4]
 800cdd0:	bf04      	itt	eq
 800cdd2:	1852      	addeq	r2, r2, r1
 800cdd4:	6022      	streq	r2, [r4, #0]
 800cdd6:	602c      	str	r4, [r5, #0]
 800cdd8:	e7ec      	b.n	800cdb4 <_free_r+0x28>
 800cdda:	461a      	mov	r2, r3
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	b10b      	cbz	r3, 800cde4 <_free_r+0x58>
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	d9fa      	bls.n	800cdda <_free_r+0x4e>
 800cde4:	6811      	ldr	r1, [r2, #0]
 800cde6:	1855      	adds	r5, r2, r1
 800cde8:	42a5      	cmp	r5, r4
 800cdea:	d10b      	bne.n	800ce04 <_free_r+0x78>
 800cdec:	6824      	ldr	r4, [r4, #0]
 800cdee:	4421      	add	r1, r4
 800cdf0:	1854      	adds	r4, r2, r1
 800cdf2:	42a3      	cmp	r3, r4
 800cdf4:	6011      	str	r1, [r2, #0]
 800cdf6:	d1dd      	bne.n	800cdb4 <_free_r+0x28>
 800cdf8:	681c      	ldr	r4, [r3, #0]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	6053      	str	r3, [r2, #4]
 800cdfe:	4421      	add	r1, r4
 800ce00:	6011      	str	r1, [r2, #0]
 800ce02:	e7d7      	b.n	800cdb4 <_free_r+0x28>
 800ce04:	d902      	bls.n	800ce0c <_free_r+0x80>
 800ce06:	230c      	movs	r3, #12
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	e7d3      	b.n	800cdb4 <_free_r+0x28>
 800ce0c:	6825      	ldr	r5, [r4, #0]
 800ce0e:	1961      	adds	r1, r4, r5
 800ce10:	428b      	cmp	r3, r1
 800ce12:	bf04      	itt	eq
 800ce14:	6819      	ldreq	r1, [r3, #0]
 800ce16:	685b      	ldreq	r3, [r3, #4]
 800ce18:	6063      	str	r3, [r4, #4]
 800ce1a:	bf04      	itt	eq
 800ce1c:	1949      	addeq	r1, r1, r5
 800ce1e:	6021      	streq	r1, [r4, #0]
 800ce20:	6054      	str	r4, [r2, #4]
 800ce22:	e7c7      	b.n	800cdb4 <_free_r+0x28>
 800ce24:	b003      	add	sp, #12
 800ce26:	bd30      	pop	{r4, r5, pc}
 800ce28:	20000234 	.word	0x20000234

0800ce2c <_malloc_r>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	1ccd      	adds	r5, r1, #3
 800ce30:	f025 0503 	bic.w	r5, r5, #3
 800ce34:	3508      	adds	r5, #8
 800ce36:	2d0c      	cmp	r5, #12
 800ce38:	bf38      	it	cc
 800ce3a:	250c      	movcc	r5, #12
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	4606      	mov	r6, r0
 800ce40:	db01      	blt.n	800ce46 <_malloc_r+0x1a>
 800ce42:	42a9      	cmp	r1, r5
 800ce44:	d903      	bls.n	800ce4e <_malloc_r+0x22>
 800ce46:	230c      	movs	r3, #12
 800ce48:	6033      	str	r3, [r6, #0]
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce4e:	f000 faa3 	bl	800d398 <__malloc_lock>
 800ce52:	4921      	ldr	r1, [pc, #132]	; (800ced8 <_malloc_r+0xac>)
 800ce54:	680a      	ldr	r2, [r1, #0]
 800ce56:	4614      	mov	r4, r2
 800ce58:	b99c      	cbnz	r4, 800ce82 <_malloc_r+0x56>
 800ce5a:	4f20      	ldr	r7, [pc, #128]	; (800cedc <_malloc_r+0xb0>)
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	b923      	cbnz	r3, 800ce6a <_malloc_r+0x3e>
 800ce60:	4621      	mov	r1, r4
 800ce62:	4630      	mov	r0, r6
 800ce64:	f000 f9a0 	bl	800d1a8 <_sbrk_r>
 800ce68:	6038      	str	r0, [r7, #0]
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f99b 	bl	800d1a8 <_sbrk_r>
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	d123      	bne.n	800cebe <_malloc_r+0x92>
 800ce76:	230c      	movs	r3, #12
 800ce78:	6033      	str	r3, [r6, #0]
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f000 fa92 	bl	800d3a4 <__malloc_unlock>
 800ce80:	e7e3      	b.n	800ce4a <_malloc_r+0x1e>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	1b5b      	subs	r3, r3, r5
 800ce86:	d417      	bmi.n	800ceb8 <_malloc_r+0x8c>
 800ce88:	2b0b      	cmp	r3, #11
 800ce8a:	d903      	bls.n	800ce94 <_malloc_r+0x68>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	441c      	add	r4, r3
 800ce90:	6025      	str	r5, [r4, #0]
 800ce92:	e004      	b.n	800ce9e <_malloc_r+0x72>
 800ce94:	6863      	ldr	r3, [r4, #4]
 800ce96:	42a2      	cmp	r2, r4
 800ce98:	bf0c      	ite	eq
 800ce9a:	600b      	streq	r3, [r1, #0]
 800ce9c:	6053      	strne	r3, [r2, #4]
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f000 fa80 	bl	800d3a4 <__malloc_unlock>
 800cea4:	f104 000b 	add.w	r0, r4, #11
 800cea8:	1d23      	adds	r3, r4, #4
 800ceaa:	f020 0007 	bic.w	r0, r0, #7
 800ceae:	1ac2      	subs	r2, r0, r3
 800ceb0:	d0cc      	beq.n	800ce4c <_malloc_r+0x20>
 800ceb2:	1a1b      	subs	r3, r3, r0
 800ceb4:	50a3      	str	r3, [r4, r2]
 800ceb6:	e7c9      	b.n	800ce4c <_malloc_r+0x20>
 800ceb8:	4622      	mov	r2, r4
 800ceba:	6864      	ldr	r4, [r4, #4]
 800cebc:	e7cc      	b.n	800ce58 <_malloc_r+0x2c>
 800cebe:	1cc4      	adds	r4, r0, #3
 800cec0:	f024 0403 	bic.w	r4, r4, #3
 800cec4:	42a0      	cmp	r0, r4
 800cec6:	d0e3      	beq.n	800ce90 <_malloc_r+0x64>
 800cec8:	1a21      	subs	r1, r4, r0
 800ceca:	4630      	mov	r0, r6
 800cecc:	f000 f96c 	bl	800d1a8 <_sbrk_r>
 800ced0:	3001      	adds	r0, #1
 800ced2:	d1dd      	bne.n	800ce90 <_malloc_r+0x64>
 800ced4:	e7cf      	b.n	800ce76 <_malloc_r+0x4a>
 800ced6:	bf00      	nop
 800ced8:	20000234 	.word	0x20000234
 800cedc:	20000238 	.word	0x20000238

0800cee0 <__sfputc_r>:
 800cee0:	6893      	ldr	r3, [r2, #8]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	b410      	push	{r4}
 800cee8:	6093      	str	r3, [r2, #8]
 800ceea:	da08      	bge.n	800cefe <__sfputc_r+0x1e>
 800ceec:	6994      	ldr	r4, [r2, #24]
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	db01      	blt.n	800cef6 <__sfputc_r+0x16>
 800cef2:	290a      	cmp	r1, #10
 800cef4:	d103      	bne.n	800cefe <__sfputc_r+0x1e>
 800cef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cefa:	f7fd bd99 	b.w	800aa30 <__swbuf_r>
 800cefe:	6813      	ldr	r3, [r2, #0]
 800cf00:	1c58      	adds	r0, r3, #1
 800cf02:	6010      	str	r0, [r2, #0]
 800cf04:	7019      	strb	r1, [r3, #0]
 800cf06:	4608      	mov	r0, r1
 800cf08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <__sfputs_r>:
 800cf0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf10:	4606      	mov	r6, r0
 800cf12:	460f      	mov	r7, r1
 800cf14:	4614      	mov	r4, r2
 800cf16:	18d5      	adds	r5, r2, r3
 800cf18:	42ac      	cmp	r4, r5
 800cf1a:	d101      	bne.n	800cf20 <__sfputs_r+0x12>
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	e007      	b.n	800cf30 <__sfputs_r+0x22>
 800cf20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf24:	463a      	mov	r2, r7
 800cf26:	4630      	mov	r0, r6
 800cf28:	f7ff ffda 	bl	800cee0 <__sfputc_r>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d1f3      	bne.n	800cf18 <__sfputs_r+0xa>
 800cf30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf34 <_vfiprintf_r>:
 800cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	460d      	mov	r5, r1
 800cf3a:	b09d      	sub	sp, #116	; 0x74
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	4698      	mov	r8, r3
 800cf40:	4606      	mov	r6, r0
 800cf42:	b118      	cbz	r0, 800cf4c <_vfiprintf_r+0x18>
 800cf44:	6983      	ldr	r3, [r0, #24]
 800cf46:	b90b      	cbnz	r3, 800cf4c <_vfiprintf_r+0x18>
 800cf48:	f7fe fdc4 	bl	800bad4 <__sinit>
 800cf4c:	4b89      	ldr	r3, [pc, #548]	; (800d174 <_vfiprintf_r+0x240>)
 800cf4e:	429d      	cmp	r5, r3
 800cf50:	d11b      	bne.n	800cf8a <_vfiprintf_r+0x56>
 800cf52:	6875      	ldr	r5, [r6, #4]
 800cf54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf56:	07d9      	lsls	r1, r3, #31
 800cf58:	d405      	bmi.n	800cf66 <_vfiprintf_r+0x32>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	059a      	lsls	r2, r3, #22
 800cf5e:	d402      	bmi.n	800cf66 <_vfiprintf_r+0x32>
 800cf60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf62:	f7ff f9c8 	bl	800c2f6 <__retarget_lock_acquire_recursive>
 800cf66:	89ab      	ldrh	r3, [r5, #12]
 800cf68:	071b      	lsls	r3, r3, #28
 800cf6a:	d501      	bpl.n	800cf70 <_vfiprintf_r+0x3c>
 800cf6c:	692b      	ldr	r3, [r5, #16]
 800cf6e:	b9eb      	cbnz	r3, 800cfac <_vfiprintf_r+0x78>
 800cf70:	4629      	mov	r1, r5
 800cf72:	4630      	mov	r0, r6
 800cf74:	f7fd fdae 	bl	800aad4 <__swsetup_r>
 800cf78:	b1c0      	cbz	r0, 800cfac <_vfiprintf_r+0x78>
 800cf7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf7c:	07dc      	lsls	r4, r3, #31
 800cf7e:	d50e      	bpl.n	800cf9e <_vfiprintf_r+0x6a>
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	b01d      	add	sp, #116	; 0x74
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8a:	4b7b      	ldr	r3, [pc, #492]	; (800d178 <_vfiprintf_r+0x244>)
 800cf8c:	429d      	cmp	r5, r3
 800cf8e:	d101      	bne.n	800cf94 <_vfiprintf_r+0x60>
 800cf90:	68b5      	ldr	r5, [r6, #8]
 800cf92:	e7df      	b.n	800cf54 <_vfiprintf_r+0x20>
 800cf94:	4b79      	ldr	r3, [pc, #484]	; (800d17c <_vfiprintf_r+0x248>)
 800cf96:	429d      	cmp	r5, r3
 800cf98:	bf08      	it	eq
 800cf9a:	68f5      	ldreq	r5, [r6, #12]
 800cf9c:	e7da      	b.n	800cf54 <_vfiprintf_r+0x20>
 800cf9e:	89ab      	ldrh	r3, [r5, #12]
 800cfa0:	0598      	lsls	r0, r3, #22
 800cfa2:	d4ed      	bmi.n	800cf80 <_vfiprintf_r+0x4c>
 800cfa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfa6:	f7ff f9a7 	bl	800c2f8 <__retarget_lock_release_recursive>
 800cfaa:	e7e9      	b.n	800cf80 <_vfiprintf_r+0x4c>
 800cfac:	2300      	movs	r3, #0
 800cfae:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb0:	2320      	movs	r3, #32
 800cfb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfba:	2330      	movs	r3, #48	; 0x30
 800cfbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d180 <_vfiprintf_r+0x24c>
 800cfc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfc4:	f04f 0901 	mov.w	r9, #1
 800cfc8:	4623      	mov	r3, r4
 800cfca:	469a      	mov	sl, r3
 800cfcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfd0:	b10a      	cbz	r2, 800cfd6 <_vfiprintf_r+0xa2>
 800cfd2:	2a25      	cmp	r2, #37	; 0x25
 800cfd4:	d1f9      	bne.n	800cfca <_vfiprintf_r+0x96>
 800cfd6:	ebba 0b04 	subs.w	fp, sl, r4
 800cfda:	d00b      	beq.n	800cff4 <_vfiprintf_r+0xc0>
 800cfdc:	465b      	mov	r3, fp
 800cfde:	4622      	mov	r2, r4
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f7ff ff93 	bl	800cf0e <__sfputs_r>
 800cfe8:	3001      	adds	r0, #1
 800cfea:	f000 80aa 	beq.w	800d142 <_vfiprintf_r+0x20e>
 800cfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cff0:	445a      	add	r2, fp
 800cff2:	9209      	str	r2, [sp, #36]	; 0x24
 800cff4:	f89a 3000 	ldrb.w	r3, [sl]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 80a2 	beq.w	800d142 <_vfiprintf_r+0x20e>
 800cffe:	2300      	movs	r3, #0
 800d000:	f04f 32ff 	mov.w	r2, #4294967295
 800d004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d008:	f10a 0a01 	add.w	sl, sl, #1
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	9307      	str	r3, [sp, #28]
 800d010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d014:	931a      	str	r3, [sp, #104]	; 0x68
 800d016:	4654      	mov	r4, sl
 800d018:	2205      	movs	r2, #5
 800d01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01e:	4858      	ldr	r0, [pc, #352]	; (800d180 <_vfiprintf_r+0x24c>)
 800d020:	f7f3 f906 	bl	8000230 <memchr>
 800d024:	9a04      	ldr	r2, [sp, #16]
 800d026:	b9d8      	cbnz	r0, 800d060 <_vfiprintf_r+0x12c>
 800d028:	06d1      	lsls	r1, r2, #27
 800d02a:	bf44      	itt	mi
 800d02c:	2320      	movmi	r3, #32
 800d02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d032:	0713      	lsls	r3, r2, #28
 800d034:	bf44      	itt	mi
 800d036:	232b      	movmi	r3, #43	; 0x2b
 800d038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d03c:	f89a 3000 	ldrb.w	r3, [sl]
 800d040:	2b2a      	cmp	r3, #42	; 0x2a
 800d042:	d015      	beq.n	800d070 <_vfiprintf_r+0x13c>
 800d044:	9a07      	ldr	r2, [sp, #28]
 800d046:	4654      	mov	r4, sl
 800d048:	2000      	movs	r0, #0
 800d04a:	f04f 0c0a 	mov.w	ip, #10
 800d04e:	4621      	mov	r1, r4
 800d050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d054:	3b30      	subs	r3, #48	; 0x30
 800d056:	2b09      	cmp	r3, #9
 800d058:	d94e      	bls.n	800d0f8 <_vfiprintf_r+0x1c4>
 800d05a:	b1b0      	cbz	r0, 800d08a <_vfiprintf_r+0x156>
 800d05c:	9207      	str	r2, [sp, #28]
 800d05e:	e014      	b.n	800d08a <_vfiprintf_r+0x156>
 800d060:	eba0 0308 	sub.w	r3, r0, r8
 800d064:	fa09 f303 	lsl.w	r3, r9, r3
 800d068:	4313      	orrs	r3, r2
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	46a2      	mov	sl, r4
 800d06e:	e7d2      	b.n	800d016 <_vfiprintf_r+0xe2>
 800d070:	9b03      	ldr	r3, [sp, #12]
 800d072:	1d19      	adds	r1, r3, #4
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	9103      	str	r1, [sp, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	bfbb      	ittet	lt
 800d07c:	425b      	neglt	r3, r3
 800d07e:	f042 0202 	orrlt.w	r2, r2, #2
 800d082:	9307      	strge	r3, [sp, #28]
 800d084:	9307      	strlt	r3, [sp, #28]
 800d086:	bfb8      	it	lt
 800d088:	9204      	strlt	r2, [sp, #16]
 800d08a:	7823      	ldrb	r3, [r4, #0]
 800d08c:	2b2e      	cmp	r3, #46	; 0x2e
 800d08e:	d10c      	bne.n	800d0aa <_vfiprintf_r+0x176>
 800d090:	7863      	ldrb	r3, [r4, #1]
 800d092:	2b2a      	cmp	r3, #42	; 0x2a
 800d094:	d135      	bne.n	800d102 <_vfiprintf_r+0x1ce>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	1d1a      	adds	r2, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9203      	str	r2, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfb8      	it	lt
 800d0a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0a6:	3402      	adds	r4, #2
 800d0a8:	9305      	str	r3, [sp, #20]
 800d0aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d190 <_vfiprintf_r+0x25c>
 800d0ae:	7821      	ldrb	r1, [r4, #0]
 800d0b0:	2203      	movs	r2, #3
 800d0b2:	4650      	mov	r0, sl
 800d0b4:	f7f3 f8bc 	bl	8000230 <memchr>
 800d0b8:	b140      	cbz	r0, 800d0cc <_vfiprintf_r+0x198>
 800d0ba:	2340      	movs	r3, #64	; 0x40
 800d0bc:	eba0 000a 	sub.w	r0, r0, sl
 800d0c0:	fa03 f000 	lsl.w	r0, r3, r0
 800d0c4:	9b04      	ldr	r3, [sp, #16]
 800d0c6:	4303      	orrs	r3, r0
 800d0c8:	3401      	adds	r4, #1
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d0:	482c      	ldr	r0, [pc, #176]	; (800d184 <_vfiprintf_r+0x250>)
 800d0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0d6:	2206      	movs	r2, #6
 800d0d8:	f7f3 f8aa 	bl	8000230 <memchr>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d03f      	beq.n	800d160 <_vfiprintf_r+0x22c>
 800d0e0:	4b29      	ldr	r3, [pc, #164]	; (800d188 <_vfiprintf_r+0x254>)
 800d0e2:	bb1b      	cbnz	r3, 800d12c <_vfiprintf_r+0x1f8>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	3307      	adds	r3, #7
 800d0e8:	f023 0307 	bic.w	r3, r3, #7
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	9303      	str	r3, [sp, #12]
 800d0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f2:	443b      	add	r3, r7
 800d0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f6:	e767      	b.n	800cfc8 <_vfiprintf_r+0x94>
 800d0f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	2001      	movs	r0, #1
 800d100:	e7a5      	b.n	800d04e <_vfiprintf_r+0x11a>
 800d102:	2300      	movs	r3, #0
 800d104:	3401      	adds	r4, #1
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	4619      	mov	r1, r3
 800d10a:	f04f 0c0a 	mov.w	ip, #10
 800d10e:	4620      	mov	r0, r4
 800d110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d114:	3a30      	subs	r2, #48	; 0x30
 800d116:	2a09      	cmp	r2, #9
 800d118:	d903      	bls.n	800d122 <_vfiprintf_r+0x1ee>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0c5      	beq.n	800d0aa <_vfiprintf_r+0x176>
 800d11e:	9105      	str	r1, [sp, #20]
 800d120:	e7c3      	b.n	800d0aa <_vfiprintf_r+0x176>
 800d122:	fb0c 2101 	mla	r1, ip, r1, r2
 800d126:	4604      	mov	r4, r0
 800d128:	2301      	movs	r3, #1
 800d12a:	e7f0      	b.n	800d10e <_vfiprintf_r+0x1da>
 800d12c:	ab03      	add	r3, sp, #12
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	462a      	mov	r2, r5
 800d132:	4b16      	ldr	r3, [pc, #88]	; (800d18c <_vfiprintf_r+0x258>)
 800d134:	a904      	add	r1, sp, #16
 800d136:	4630      	mov	r0, r6
 800d138:	f7fc f960 	bl	80093fc <_printf_float>
 800d13c:	4607      	mov	r7, r0
 800d13e:	1c78      	adds	r0, r7, #1
 800d140:	d1d6      	bne.n	800d0f0 <_vfiprintf_r+0x1bc>
 800d142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d144:	07d9      	lsls	r1, r3, #31
 800d146:	d405      	bmi.n	800d154 <_vfiprintf_r+0x220>
 800d148:	89ab      	ldrh	r3, [r5, #12]
 800d14a:	059a      	lsls	r2, r3, #22
 800d14c:	d402      	bmi.n	800d154 <_vfiprintf_r+0x220>
 800d14e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d150:	f7ff f8d2 	bl	800c2f8 <__retarget_lock_release_recursive>
 800d154:	89ab      	ldrh	r3, [r5, #12]
 800d156:	065b      	lsls	r3, r3, #25
 800d158:	f53f af12 	bmi.w	800cf80 <_vfiprintf_r+0x4c>
 800d15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d15e:	e711      	b.n	800cf84 <_vfiprintf_r+0x50>
 800d160:	ab03      	add	r3, sp, #12
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	462a      	mov	r2, r5
 800d166:	4b09      	ldr	r3, [pc, #36]	; (800d18c <_vfiprintf_r+0x258>)
 800d168:	a904      	add	r1, sp, #16
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7fc fbea 	bl	8009944 <_printf_i>
 800d170:	e7e4      	b.n	800d13c <_vfiprintf_r+0x208>
 800d172:	bf00      	nop
 800d174:	0800f000 	.word	0x0800f000
 800d178:	0800f020 	.word	0x0800f020
 800d17c:	0800efe0 	.word	0x0800efe0
 800d180:	0800f21c 	.word	0x0800f21c
 800d184:	0800f226 	.word	0x0800f226
 800d188:	080093fd 	.word	0x080093fd
 800d18c:	0800cf0f 	.word	0x0800cf0f
 800d190:	0800f222 	.word	0x0800f222
 800d194:	00000000 	.word	0x00000000

0800d198 <nan>:
 800d198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d1a0 <nan+0x8>
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	00000000 	.word	0x00000000
 800d1a4:	7ff80000 	.word	0x7ff80000

0800d1a8 <_sbrk_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d06      	ldr	r5, [pc, #24]	; (800d1c4 <_sbrk_r+0x1c>)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	4608      	mov	r0, r1
 800d1b2:	602b      	str	r3, [r5, #0]
 800d1b4:	f7f7 f92c 	bl	8004410 <_sbrk>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_sbrk_r+0x1a>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_sbrk_r+0x1a>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	2000959c 	.word	0x2000959c

0800d1c8 <__sread>:
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d0:	f000 f8ee 	bl	800d3b0 <_read_r>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	bfab      	itete	ge
 800d1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1da:	89a3      	ldrhlt	r3, [r4, #12]
 800d1dc:	181b      	addge	r3, r3, r0
 800d1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1e2:	bfac      	ite	ge
 800d1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1e6:	81a3      	strhlt	r3, [r4, #12]
 800d1e8:	bd10      	pop	{r4, pc}

0800d1ea <__swrite>:
 800d1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ee:	461f      	mov	r7, r3
 800d1f0:	898b      	ldrh	r3, [r1, #12]
 800d1f2:	05db      	lsls	r3, r3, #23
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	4616      	mov	r6, r2
 800d1fa:	d505      	bpl.n	800d208 <__swrite+0x1e>
 800d1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d200:	2302      	movs	r3, #2
 800d202:	2200      	movs	r2, #0
 800d204:	f000 f8b6 	bl	800d374 <_lseek_r>
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d212:	81a3      	strh	r3, [r4, #12]
 800d214:	4632      	mov	r2, r6
 800d216:	463b      	mov	r3, r7
 800d218:	4628      	mov	r0, r5
 800d21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21e:	f000 b835 	b.w	800d28c <_write_r>

0800d222 <__sseek>:
 800d222:	b510      	push	{r4, lr}
 800d224:	460c      	mov	r4, r1
 800d226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d22a:	f000 f8a3 	bl	800d374 <_lseek_r>
 800d22e:	1c43      	adds	r3, r0, #1
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	bf15      	itete	ne
 800d234:	6560      	strne	r0, [r4, #84]	; 0x54
 800d236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d23e:	81a3      	strheq	r3, [r4, #12]
 800d240:	bf18      	it	ne
 800d242:	81a3      	strhne	r3, [r4, #12]
 800d244:	bd10      	pop	{r4, pc}

0800d246 <__sclose>:
 800d246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d24a:	f000 b84f 	b.w	800d2ec <_close_r>

0800d24e <strncmp>:
 800d24e:	b510      	push	{r4, lr}
 800d250:	b16a      	cbz	r2, 800d26e <strncmp+0x20>
 800d252:	3901      	subs	r1, #1
 800d254:	1884      	adds	r4, r0, r2
 800d256:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d25a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d25e:	4293      	cmp	r3, r2
 800d260:	d103      	bne.n	800d26a <strncmp+0x1c>
 800d262:	42a0      	cmp	r0, r4
 800d264:	d001      	beq.n	800d26a <strncmp+0x1c>
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1f5      	bne.n	800d256 <strncmp+0x8>
 800d26a:	1a98      	subs	r0, r3, r2
 800d26c:	bd10      	pop	{r4, pc}
 800d26e:	4610      	mov	r0, r2
 800d270:	e7fc      	b.n	800d26c <strncmp+0x1e>

0800d272 <__ascii_wctomb>:
 800d272:	b149      	cbz	r1, 800d288 <__ascii_wctomb+0x16>
 800d274:	2aff      	cmp	r2, #255	; 0xff
 800d276:	bf85      	ittet	hi
 800d278:	238a      	movhi	r3, #138	; 0x8a
 800d27a:	6003      	strhi	r3, [r0, #0]
 800d27c:	700a      	strbls	r2, [r1, #0]
 800d27e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d282:	bf98      	it	ls
 800d284:	2001      	movls	r0, #1
 800d286:	4770      	bx	lr
 800d288:	4608      	mov	r0, r1
 800d28a:	4770      	bx	lr

0800d28c <_write_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d07      	ldr	r5, [pc, #28]	; (800d2ac <_write_r+0x20>)
 800d290:	4604      	mov	r4, r0
 800d292:	4608      	mov	r0, r1
 800d294:	4611      	mov	r1, r2
 800d296:	2200      	movs	r2, #0
 800d298:	602a      	str	r2, [r5, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	f7f7 f89c 	bl	80043d8 <_write>
 800d2a0:	1c43      	adds	r3, r0, #1
 800d2a2:	d102      	bne.n	800d2aa <_write_r+0x1e>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	b103      	cbz	r3, 800d2aa <_write_r+0x1e>
 800d2a8:	6023      	str	r3, [r4, #0]
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	2000959c 	.word	0x2000959c

0800d2b0 <__assert_func>:
 800d2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2b2:	4614      	mov	r4, r2
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <__assert_func+0x2c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	68d8      	ldr	r0, [r3, #12]
 800d2be:	b14c      	cbz	r4, 800d2d4 <__assert_func+0x24>
 800d2c0:	4b07      	ldr	r3, [pc, #28]	; (800d2e0 <__assert_func+0x30>)
 800d2c2:	9100      	str	r1, [sp, #0]
 800d2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2c8:	4906      	ldr	r1, [pc, #24]	; (800d2e4 <__assert_func+0x34>)
 800d2ca:	462b      	mov	r3, r5
 800d2cc:	f000 f81e 	bl	800d30c <fiprintf>
 800d2d0:	f000 f880 	bl	800d3d4 <abort>
 800d2d4:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <__assert_func+0x38>)
 800d2d6:	461c      	mov	r4, r3
 800d2d8:	e7f3      	b.n	800d2c2 <__assert_func+0x12>
 800d2da:	bf00      	nop
 800d2dc:	2000002c 	.word	0x2000002c
 800d2e0:	0800f22d 	.word	0x0800f22d
 800d2e4:	0800f23a 	.word	0x0800f23a
 800d2e8:	0800f268 	.word	0x0800f268

0800d2ec <_close_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d06      	ldr	r5, [pc, #24]	; (800d308 <_close_r+0x1c>)
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4608      	mov	r0, r1
 800d2f6:	602b      	str	r3, [r5, #0]
 800d2f8:	f7f7 f87c 	bl	80043f4 <_close>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_close_r+0x1a>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_close_r+0x1a>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	2000959c 	.word	0x2000959c

0800d30c <fiprintf>:
 800d30c:	b40e      	push	{r1, r2, r3}
 800d30e:	b503      	push	{r0, r1, lr}
 800d310:	4601      	mov	r1, r0
 800d312:	ab03      	add	r3, sp, #12
 800d314:	4805      	ldr	r0, [pc, #20]	; (800d32c <fiprintf+0x20>)
 800d316:	f853 2b04 	ldr.w	r2, [r3], #4
 800d31a:	6800      	ldr	r0, [r0, #0]
 800d31c:	9301      	str	r3, [sp, #4]
 800d31e:	f7ff fe09 	bl	800cf34 <_vfiprintf_r>
 800d322:	b002      	add	sp, #8
 800d324:	f85d eb04 	ldr.w	lr, [sp], #4
 800d328:	b003      	add	sp, #12
 800d32a:	4770      	bx	lr
 800d32c:	2000002c 	.word	0x2000002c

0800d330 <_fstat_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d07      	ldr	r5, [pc, #28]	; (800d350 <_fstat_r+0x20>)
 800d334:	2300      	movs	r3, #0
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	4611      	mov	r1, r2
 800d33c:	602b      	str	r3, [r5, #0]
 800d33e:	f7f7 f85d 	bl	80043fc <_fstat>
 800d342:	1c43      	adds	r3, r0, #1
 800d344:	d102      	bne.n	800d34c <_fstat_r+0x1c>
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	b103      	cbz	r3, 800d34c <_fstat_r+0x1c>
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	bd38      	pop	{r3, r4, r5, pc}
 800d34e:	bf00      	nop
 800d350:	2000959c 	.word	0x2000959c

0800d354 <_isatty_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4d06      	ldr	r5, [pc, #24]	; (800d370 <_isatty_r+0x1c>)
 800d358:	2300      	movs	r3, #0
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	602b      	str	r3, [r5, #0]
 800d360:	f7f7 f852 	bl	8004408 <_isatty>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_isatty_r+0x1a>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_isatty_r+0x1a>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	2000959c 	.word	0x2000959c

0800d374 <_lseek_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d07      	ldr	r5, [pc, #28]	; (800d394 <_lseek_r+0x20>)
 800d378:	4604      	mov	r4, r0
 800d37a:	4608      	mov	r0, r1
 800d37c:	4611      	mov	r1, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	602a      	str	r2, [r5, #0]
 800d382:	461a      	mov	r2, r3
 800d384:	f7f7 f842 	bl	800440c <_lseek>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_lseek_r+0x1e>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_lseek_r+0x1e>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	2000959c 	.word	0x2000959c

0800d398 <__malloc_lock>:
 800d398:	4801      	ldr	r0, [pc, #4]	; (800d3a0 <__malloc_lock+0x8>)
 800d39a:	f7fe bfac 	b.w	800c2f6 <__retarget_lock_acquire_recursive>
 800d39e:	bf00      	nop
 800d3a0:	20009594 	.word	0x20009594

0800d3a4 <__malloc_unlock>:
 800d3a4:	4801      	ldr	r0, [pc, #4]	; (800d3ac <__malloc_unlock+0x8>)
 800d3a6:	f7fe bfa7 	b.w	800c2f8 <__retarget_lock_release_recursive>
 800d3aa:	bf00      	nop
 800d3ac:	20009594 	.word	0x20009594

0800d3b0 <_read_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	4d07      	ldr	r5, [pc, #28]	; (800d3d0 <_read_r+0x20>)
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	602a      	str	r2, [r5, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	f7f6 fffc 	bl	80043bc <_read>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d102      	bne.n	800d3ce <_read_r+0x1e>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	b103      	cbz	r3, 800d3ce <_read_r+0x1e>
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	2000959c 	.word	0x2000959c

0800d3d4 <abort>:
 800d3d4:	b508      	push	{r3, lr}
 800d3d6:	2006      	movs	r0, #6
 800d3d8:	f000 f82c 	bl	800d434 <raise>
 800d3dc:	2001      	movs	r0, #1
 800d3de:	f7f6 ffe7 	bl	80043b0 <_exit>

0800d3e2 <_raise_r>:
 800d3e2:	291f      	cmp	r1, #31
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	460d      	mov	r5, r1
 800d3ea:	d904      	bls.n	800d3f6 <_raise_r+0x14>
 800d3ec:	2316      	movs	r3, #22
 800d3ee:	6003      	str	r3, [r0, #0]
 800d3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f4:	bd38      	pop	{r3, r4, r5, pc}
 800d3f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3f8:	b112      	cbz	r2, 800d400 <_raise_r+0x1e>
 800d3fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3fe:	b94b      	cbnz	r3, 800d414 <_raise_r+0x32>
 800d400:	4620      	mov	r0, r4
 800d402:	f000 f831 	bl	800d468 <_getpid_r>
 800d406:	462a      	mov	r2, r5
 800d408:	4601      	mov	r1, r0
 800d40a:	4620      	mov	r0, r4
 800d40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d410:	f000 b818 	b.w	800d444 <_kill_r>
 800d414:	2b01      	cmp	r3, #1
 800d416:	d00a      	beq.n	800d42e <_raise_r+0x4c>
 800d418:	1c59      	adds	r1, r3, #1
 800d41a:	d103      	bne.n	800d424 <_raise_r+0x42>
 800d41c:	2316      	movs	r3, #22
 800d41e:	6003      	str	r3, [r0, #0]
 800d420:	2001      	movs	r0, #1
 800d422:	e7e7      	b.n	800d3f4 <_raise_r+0x12>
 800d424:	2400      	movs	r4, #0
 800d426:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d42a:	4628      	mov	r0, r5
 800d42c:	4798      	blx	r3
 800d42e:	2000      	movs	r0, #0
 800d430:	e7e0      	b.n	800d3f4 <_raise_r+0x12>
	...

0800d434 <raise>:
 800d434:	4b02      	ldr	r3, [pc, #8]	; (800d440 <raise+0xc>)
 800d436:	4601      	mov	r1, r0
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	f7ff bfd2 	b.w	800d3e2 <_raise_r>
 800d43e:	bf00      	nop
 800d440:	2000002c 	.word	0x2000002c

0800d444 <_kill_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4d07      	ldr	r5, [pc, #28]	; (800d464 <_kill_r+0x20>)
 800d448:	2300      	movs	r3, #0
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	4611      	mov	r1, r2
 800d450:	602b      	str	r3, [r5, #0]
 800d452:	f7f6 ffa5 	bl	80043a0 <_kill>
 800d456:	1c43      	adds	r3, r0, #1
 800d458:	d102      	bne.n	800d460 <_kill_r+0x1c>
 800d45a:	682b      	ldr	r3, [r5, #0]
 800d45c:	b103      	cbz	r3, 800d460 <_kill_r+0x1c>
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	bd38      	pop	{r3, r4, r5, pc}
 800d462:	bf00      	nop
 800d464:	2000959c 	.word	0x2000959c

0800d468 <_getpid_r>:
 800d468:	f7f6 bf98 	b.w	800439c <_getpid>

0800d46c <round>:
 800d46c:	ec51 0b10 	vmov	r0, r1, d0
 800d470:	b570      	push	{r4, r5, r6, lr}
 800d472:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d476:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d47a:	2c13      	cmp	r4, #19
 800d47c:	ee10 2a10 	vmov	r2, s0
 800d480:	460b      	mov	r3, r1
 800d482:	dc19      	bgt.n	800d4b8 <round+0x4c>
 800d484:	2c00      	cmp	r4, #0
 800d486:	da09      	bge.n	800d49c <round+0x30>
 800d488:	3401      	adds	r4, #1
 800d48a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d48e:	d103      	bne.n	800d498 <round+0x2c>
 800d490:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d494:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d498:	2100      	movs	r1, #0
 800d49a:	e028      	b.n	800d4ee <round+0x82>
 800d49c:	4d15      	ldr	r5, [pc, #84]	; (800d4f4 <round+0x88>)
 800d49e:	4125      	asrs	r5, r4
 800d4a0:	ea01 0605 	and.w	r6, r1, r5
 800d4a4:	4332      	orrs	r2, r6
 800d4a6:	d00e      	beq.n	800d4c6 <round+0x5a>
 800d4a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d4ac:	fa42 f404 	asr.w	r4, r2, r4
 800d4b0:	4423      	add	r3, r4
 800d4b2:	ea23 0305 	bic.w	r3, r3, r5
 800d4b6:	e7ef      	b.n	800d498 <round+0x2c>
 800d4b8:	2c33      	cmp	r4, #51	; 0x33
 800d4ba:	dd07      	ble.n	800d4cc <round+0x60>
 800d4bc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d4c0:	d101      	bne.n	800d4c6 <round+0x5a>
 800d4c2:	f7f2 ff0b 	bl	80002dc <__adddf3>
 800d4c6:	ec41 0b10 	vmov	d0, r0, r1
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d4d0:	f04f 35ff 	mov.w	r5, #4294967295
 800d4d4:	40f5      	lsrs	r5, r6
 800d4d6:	4228      	tst	r0, r5
 800d4d8:	d0f5      	beq.n	800d4c6 <round+0x5a>
 800d4da:	2101      	movs	r1, #1
 800d4dc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d4e0:	fa01 f404 	lsl.w	r4, r1, r4
 800d4e4:	1912      	adds	r2, r2, r4
 800d4e6:	bf28      	it	cs
 800d4e8:	185b      	addcs	r3, r3, r1
 800d4ea:	ea22 0105 	bic.w	r1, r2, r5
 800d4ee:	4608      	mov	r0, r1
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	e7e8      	b.n	800d4c6 <round+0x5a>
 800d4f4:	000fffff 	.word	0x000fffff

0800d4f8 <exp>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	ed2d 8b02 	vpush	{d8}
 800d4fe:	ec55 4b10 	vmov	r4, r5, d0
 800d502:	f000 f875 	bl	800d5f0 <__ieee754_exp>
 800d506:	4b22      	ldr	r3, [pc, #136]	; (800d590 <exp+0x98>)
 800d508:	eeb0 8a40 	vmov.f32	s16, s0
 800d50c:	eef0 8a60 	vmov.f32	s17, s1
 800d510:	f993 3000 	ldrsb.w	r3, [r3]
 800d514:	3301      	adds	r3, #1
 800d516:	d012      	beq.n	800d53e <exp+0x46>
 800d518:	ec45 4b10 	vmov	d0, r4, r5
 800d51c:	f000 fa64 	bl	800d9e8 <finite>
 800d520:	b168      	cbz	r0, 800d53e <exp+0x46>
 800d522:	a313      	add	r3, pc, #76	; (adr r3, 800d570 <exp+0x78>)
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	4620      	mov	r0, r4
 800d52a:	4629      	mov	r1, r5
 800d52c:	f7f3 fb1c 	bl	8000b68 <__aeabi_dcmpgt>
 800d530:	b160      	cbz	r0, 800d54c <exp+0x54>
 800d532:	f7fb fe69 	bl	8009208 <__errno>
 800d536:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800d578 <exp+0x80>
 800d53a:	2322      	movs	r3, #34	; 0x22
 800d53c:	6003      	str	r3, [r0, #0]
 800d53e:	eeb0 0a48 	vmov.f32	s0, s16
 800d542:	eef0 0a68 	vmov.f32	s1, s17
 800d546:	ecbd 8b02 	vpop	{d8}
 800d54a:	bd38      	pop	{r3, r4, r5, pc}
 800d54c:	a30c      	add	r3, pc, #48	; (adr r3, 800d580 <exp+0x88>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	4620      	mov	r0, r4
 800d554:	4629      	mov	r1, r5
 800d556:	f7f3 fae9 	bl	8000b2c <__aeabi_dcmplt>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d0ef      	beq.n	800d53e <exp+0x46>
 800d55e:	f7fb fe53 	bl	8009208 <__errno>
 800d562:	2322      	movs	r3, #34	; 0x22
 800d564:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800d588 <exp+0x90>
 800d568:	6003      	str	r3, [r0, #0]
 800d56a:	e7e8      	b.n	800d53e <exp+0x46>
 800d56c:	f3af 8000 	nop.w
 800d570:	fefa39ef 	.word	0xfefa39ef
 800d574:	40862e42 	.word	0x40862e42
 800d578:	00000000 	.word	0x00000000
 800d57c:	7ff00000 	.word	0x7ff00000
 800d580:	d52d3051 	.word	0xd52d3051
 800d584:	c0874910 	.word	0xc0874910
	...
 800d590:	20000200 	.word	0x20000200

0800d594 <fmodf>:
 800d594:	b508      	push	{r3, lr}
 800d596:	ed2d 8b02 	vpush	{d8}
 800d59a:	eef0 8a40 	vmov.f32	s17, s0
 800d59e:	eeb0 8a60 	vmov.f32	s16, s1
 800d5a2:	f000 f99f 	bl	800d8e4 <__ieee754_fmodf>
 800d5a6:	4b0f      	ldr	r3, [pc, #60]	; (800d5e4 <fmodf+0x50>)
 800d5a8:	f993 3000 	ldrsb.w	r3, [r3]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	d016      	beq.n	800d5de <fmodf+0x4a>
 800d5b0:	eeb4 8a48 	vcmp.f32	s16, s16
 800d5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b8:	d611      	bvs.n	800d5de <fmodf+0x4a>
 800d5ba:	eef4 8a68 	vcmp.f32	s17, s17
 800d5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c2:	d60c      	bvs.n	800d5de <fmodf+0x4a>
 800d5c4:	eddf 8a08 	vldr	s17, [pc, #32]	; 800d5e8 <fmodf+0x54>
 800d5c8:	eeb4 8a68 	vcmp.f32	s16, s17
 800d5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d0:	d105      	bne.n	800d5de <fmodf+0x4a>
 800d5d2:	f7fb fe19 	bl	8009208 <__errno>
 800d5d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d5da:	2321      	movs	r3, #33	; 0x21
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	ecbd 8b02 	vpop	{d8}
 800d5e2:	bd08      	pop	{r3, pc}
 800d5e4:	20000200 	.word	0x20000200
	...

0800d5f0 <__ieee754_exp>:
 800d5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f4:	ec55 4b10 	vmov	r4, r5, d0
 800d5f8:	49b1      	ldr	r1, [pc, #708]	; (800d8c0 <__ieee754_exp+0x2d0>)
 800d5fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d5fe:	428b      	cmp	r3, r1
 800d600:	ed2d 8b04 	vpush	{d8-d9}
 800d604:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d608:	d937      	bls.n	800d67a <__ieee754_exp+0x8a>
 800d60a:	49ae      	ldr	r1, [pc, #696]	; (800d8c4 <__ieee754_exp+0x2d4>)
 800d60c:	428b      	cmp	r3, r1
 800d60e:	d916      	bls.n	800d63e <__ieee754_exp+0x4e>
 800d610:	ee10 3a10 	vmov	r3, s0
 800d614:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d618:	4313      	orrs	r3, r2
 800d61a:	d009      	beq.n	800d630 <__ieee754_exp+0x40>
 800d61c:	ee10 2a10 	vmov	r2, s0
 800d620:	462b      	mov	r3, r5
 800d622:	4620      	mov	r0, r4
 800d624:	4629      	mov	r1, r5
 800d626:	f7f2 fe59 	bl	80002dc <__adddf3>
 800d62a:	4604      	mov	r4, r0
 800d62c:	460d      	mov	r5, r1
 800d62e:	e000      	b.n	800d632 <__ieee754_exp+0x42>
 800d630:	bb06      	cbnz	r6, 800d674 <__ieee754_exp+0x84>
 800d632:	ecbd 8b04 	vpop	{d8-d9}
 800d636:	ec45 4b10 	vmov	d0, r4, r5
 800d63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63e:	a38a      	add	r3, pc, #552	; (adr r3, 800d868 <__ieee754_exp+0x278>)
 800d640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d644:	ee10 0a10 	vmov	r0, s0
 800d648:	4629      	mov	r1, r5
 800d64a:	f7f3 fa8d 	bl	8000b68 <__aeabi_dcmpgt>
 800d64e:	b138      	cbz	r0, 800d660 <__ieee754_exp+0x70>
 800d650:	a387      	add	r3, pc, #540	; (adr r3, 800d870 <__ieee754_exp+0x280>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	4610      	mov	r0, r2
 800d658:	4619      	mov	r1, r3
 800d65a:	f7f2 fff5 	bl	8000648 <__aeabi_dmul>
 800d65e:	e7e4      	b.n	800d62a <__ieee754_exp+0x3a>
 800d660:	a385      	add	r3, pc, #532	; (adr r3, 800d878 <__ieee754_exp+0x288>)
 800d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d666:	4620      	mov	r0, r4
 800d668:	4629      	mov	r1, r5
 800d66a:	f7f3 fa5f 	bl	8000b2c <__aeabi_dcmplt>
 800d66e:	2800      	cmp	r0, #0
 800d670:	f000 8087 	beq.w	800d782 <__ieee754_exp+0x192>
 800d674:	2400      	movs	r4, #0
 800d676:	2500      	movs	r5, #0
 800d678:	e7db      	b.n	800d632 <__ieee754_exp+0x42>
 800d67a:	4a93      	ldr	r2, [pc, #588]	; (800d8c8 <__ieee754_exp+0x2d8>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	f240 80ac 	bls.w	800d7da <__ieee754_exp+0x1ea>
 800d682:	4a92      	ldr	r2, [pc, #584]	; (800d8cc <__ieee754_exp+0x2dc>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d87c      	bhi.n	800d782 <__ieee754_exp+0x192>
 800d688:	4b91      	ldr	r3, [pc, #580]	; (800d8d0 <__ieee754_exp+0x2e0>)
 800d68a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d692:	ee10 0a10 	vmov	r0, s0
 800d696:	4629      	mov	r1, r5
 800d698:	f7f2 fe1e 	bl	80002d8 <__aeabi_dsub>
 800d69c:	4b8d      	ldr	r3, [pc, #564]	; (800d8d4 <__ieee754_exp+0x2e4>)
 800d69e:	00f7      	lsls	r7, r6, #3
 800d6a0:	443b      	add	r3, r7
 800d6a2:	ed93 7b00 	vldr	d7, [r3]
 800d6a6:	f1c6 0a01 	rsb	sl, r6, #1
 800d6aa:	4680      	mov	r8, r0
 800d6ac:	4689      	mov	r9, r1
 800d6ae:	ebaa 0a06 	sub.w	sl, sl, r6
 800d6b2:	eeb0 8a47 	vmov.f32	s16, s14
 800d6b6:	eef0 8a67 	vmov.f32	s17, s15
 800d6ba:	ec53 2b18 	vmov	r2, r3, d8
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	f7f2 fe09 	bl	80002d8 <__aeabi_dsub>
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	f7f2 ffb9 	bl	8000648 <__aeabi_dmul>
 800d6d6:	a36a      	add	r3, pc, #424	; (adr r3, 800d880 <__ieee754_exp+0x290>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	4606      	mov	r6, r0
 800d6de:	460f      	mov	r7, r1
 800d6e0:	f7f2 ffb2 	bl	8000648 <__aeabi_dmul>
 800d6e4:	a368      	add	r3, pc, #416	; (adr r3, 800d888 <__ieee754_exp+0x298>)
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	f7f2 fdf5 	bl	80002d8 <__aeabi_dsub>
 800d6ee:	4632      	mov	r2, r6
 800d6f0:	463b      	mov	r3, r7
 800d6f2:	f7f2 ffa9 	bl	8000648 <__aeabi_dmul>
 800d6f6:	a366      	add	r3, pc, #408	; (adr r3, 800d890 <__ieee754_exp+0x2a0>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f7f2 fdee 	bl	80002dc <__adddf3>
 800d700:	4632      	mov	r2, r6
 800d702:	463b      	mov	r3, r7
 800d704:	f7f2 ffa0 	bl	8000648 <__aeabi_dmul>
 800d708:	a363      	add	r3, pc, #396	; (adr r3, 800d898 <__ieee754_exp+0x2a8>)
 800d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70e:	f7f2 fde3 	bl	80002d8 <__aeabi_dsub>
 800d712:	4632      	mov	r2, r6
 800d714:	463b      	mov	r3, r7
 800d716:	f7f2 ff97 	bl	8000648 <__aeabi_dmul>
 800d71a:	a361      	add	r3, pc, #388	; (adr r3, 800d8a0 <__ieee754_exp+0x2b0>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	f7f2 fddc 	bl	80002dc <__adddf3>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f2 ff8e 	bl	8000648 <__aeabi_dmul>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4620      	mov	r0, r4
 800d732:	4629      	mov	r1, r5
 800d734:	f7f2 fdd0 	bl	80002d8 <__aeabi_dsub>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	4620      	mov	r0, r4
 800d742:	4629      	mov	r1, r5
 800d744:	f7f2 ff80 	bl	8000648 <__aeabi_dmul>
 800d748:	ec41 0b19 	vmov	d9, r0, r1
 800d74c:	f1ba 0f00 	cmp.w	sl, #0
 800d750:	d15d      	bne.n	800d80e <__ieee754_exp+0x21e>
 800d752:	2200      	movs	r2, #0
 800d754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d758:	4630      	mov	r0, r6
 800d75a:	4639      	mov	r1, r7
 800d75c:	f7f2 fdbc 	bl	80002d8 <__aeabi_dsub>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	ec51 0b19 	vmov	r0, r1, d9
 800d768:	f7f3 f898 	bl	800089c <__aeabi_ddiv>
 800d76c:	4622      	mov	r2, r4
 800d76e:	462b      	mov	r3, r5
 800d770:	f7f2 fdb2 	bl	80002d8 <__aeabi_dsub>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	2000      	movs	r0, #0
 800d77a:	4957      	ldr	r1, [pc, #348]	; (800d8d8 <__ieee754_exp+0x2e8>)
 800d77c:	f7f2 fdac 	bl	80002d8 <__aeabi_dsub>
 800d780:	e753      	b.n	800d62a <__ieee754_exp+0x3a>
 800d782:	4856      	ldr	r0, [pc, #344]	; (800d8dc <__ieee754_exp+0x2ec>)
 800d784:	a348      	add	r3, pc, #288	; (adr r3, 800d8a8 <__ieee754_exp+0x2b8>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d78e:	4629      	mov	r1, r5
 800d790:	4620      	mov	r0, r4
 800d792:	f7f2 ff59 	bl	8000648 <__aeabi_dmul>
 800d796:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d79a:	f7f2 fd9f 	bl	80002dc <__adddf3>
 800d79e:	f7f3 fa03 	bl	8000ba8 <__aeabi_d2iz>
 800d7a2:	4682      	mov	sl, r0
 800d7a4:	f7f2 fee6 	bl	8000574 <__aeabi_i2d>
 800d7a8:	a341      	add	r3, pc, #260	; (adr r3, 800d8b0 <__ieee754_exp+0x2c0>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	460f      	mov	r7, r1
 800d7b2:	f7f2 ff49 	bl	8000648 <__aeabi_dmul>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7f2 fd8b 	bl	80002d8 <__aeabi_dsub>
 800d7c2:	a33d      	add	r3, pc, #244	; (adr r3, 800d8b8 <__ieee754_exp+0x2c8>)
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	4680      	mov	r8, r0
 800d7ca:	4689      	mov	r9, r1
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	4639      	mov	r1, r7
 800d7d0:	f7f2 ff3a 	bl	8000648 <__aeabi_dmul>
 800d7d4:	ec41 0b18 	vmov	d8, r0, r1
 800d7d8:	e76f      	b.n	800d6ba <__ieee754_exp+0xca>
 800d7da:	4a41      	ldr	r2, [pc, #260]	; (800d8e0 <__ieee754_exp+0x2f0>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d811      	bhi.n	800d804 <__ieee754_exp+0x214>
 800d7e0:	a323      	add	r3, pc, #140	; (adr r3, 800d870 <__ieee754_exp+0x280>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	ee10 0a10 	vmov	r0, s0
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	f7f2 fd76 	bl	80002dc <__adddf3>
 800d7f0:	4b39      	ldr	r3, [pc, #228]	; (800d8d8 <__ieee754_exp+0x2e8>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f7f3 f9b8 	bl	8000b68 <__aeabi_dcmpgt>
 800d7f8:	b138      	cbz	r0, 800d80a <__ieee754_exp+0x21a>
 800d7fa:	4b37      	ldr	r3, [pc, #220]	; (800d8d8 <__ieee754_exp+0x2e8>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	4620      	mov	r0, r4
 800d800:	4629      	mov	r1, r5
 800d802:	e710      	b.n	800d626 <__ieee754_exp+0x36>
 800d804:	f04f 0a00 	mov.w	sl, #0
 800d808:	e75f      	b.n	800d6ca <__ieee754_exp+0xda>
 800d80a:	4682      	mov	sl, r0
 800d80c:	e75d      	b.n	800d6ca <__ieee754_exp+0xda>
 800d80e:	4632      	mov	r2, r6
 800d810:	463b      	mov	r3, r7
 800d812:	2000      	movs	r0, #0
 800d814:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d818:	f7f2 fd5e 	bl	80002d8 <__aeabi_dsub>
 800d81c:	4602      	mov	r2, r0
 800d81e:	460b      	mov	r3, r1
 800d820:	ec51 0b19 	vmov	r0, r1, d9
 800d824:	f7f3 f83a 	bl	800089c <__aeabi_ddiv>
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	ec51 0b18 	vmov	r0, r1, d8
 800d830:	f7f2 fd52 	bl	80002d8 <__aeabi_dsub>
 800d834:	4642      	mov	r2, r8
 800d836:	464b      	mov	r3, r9
 800d838:	f7f2 fd4e 	bl	80002d8 <__aeabi_dsub>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	2000      	movs	r0, #0
 800d842:	4925      	ldr	r1, [pc, #148]	; (800d8d8 <__ieee754_exp+0x2e8>)
 800d844:	f7f2 fd48 	bl	80002d8 <__aeabi_dsub>
 800d848:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d84c:	4592      	cmp	sl, r2
 800d84e:	db02      	blt.n	800d856 <__ieee754_exp+0x266>
 800d850:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d854:	e6e9      	b.n	800d62a <__ieee754_exp+0x3a>
 800d856:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d85a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d85e:	2200      	movs	r2, #0
 800d860:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d864:	e6f9      	b.n	800d65a <__ieee754_exp+0x6a>
 800d866:	bf00      	nop
 800d868:	fefa39ef 	.word	0xfefa39ef
 800d86c:	40862e42 	.word	0x40862e42
 800d870:	8800759c 	.word	0x8800759c
 800d874:	7e37e43c 	.word	0x7e37e43c
 800d878:	d52d3051 	.word	0xd52d3051
 800d87c:	c0874910 	.word	0xc0874910
 800d880:	72bea4d0 	.word	0x72bea4d0
 800d884:	3e663769 	.word	0x3e663769
 800d888:	c5d26bf1 	.word	0xc5d26bf1
 800d88c:	3ebbbd41 	.word	0x3ebbbd41
 800d890:	af25de2c 	.word	0xaf25de2c
 800d894:	3f11566a 	.word	0x3f11566a
 800d898:	16bebd93 	.word	0x16bebd93
 800d89c:	3f66c16c 	.word	0x3f66c16c
 800d8a0:	5555553e 	.word	0x5555553e
 800d8a4:	3fc55555 	.word	0x3fc55555
 800d8a8:	652b82fe 	.word	0x652b82fe
 800d8ac:	3ff71547 	.word	0x3ff71547
 800d8b0:	fee00000 	.word	0xfee00000
 800d8b4:	3fe62e42 	.word	0x3fe62e42
 800d8b8:	35793c76 	.word	0x35793c76
 800d8bc:	3dea39ef 	.word	0x3dea39ef
 800d8c0:	40862e41 	.word	0x40862e41
 800d8c4:	7fefffff 	.word	0x7fefffff
 800d8c8:	3fd62e42 	.word	0x3fd62e42
 800d8cc:	3ff0a2b1 	.word	0x3ff0a2b1
 800d8d0:	0800f280 	.word	0x0800f280
 800d8d4:	0800f290 	.word	0x0800f290
 800d8d8:	3ff00000 	.word	0x3ff00000
 800d8dc:	0800f270 	.word	0x0800f270
 800d8e0:	3e2fffff 	.word	0x3e2fffff

0800d8e4 <__ieee754_fmodf>:
 800d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8e6:	ee10 6a90 	vmov	r6, s1
 800d8ea:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800d8ee:	d009      	beq.n	800d904 <__ieee754_fmodf+0x20>
 800d8f0:	ee10 2a10 	vmov	r2, s0
 800d8f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d8f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d8fc:	da02      	bge.n	800d904 <__ieee754_fmodf+0x20>
 800d8fe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d902:	dd04      	ble.n	800d90e <__ieee754_fmodf+0x2a>
 800d904:	ee60 0a20 	vmul.f32	s1, s0, s1
 800d908:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800d90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d90e:	42ab      	cmp	r3, r5
 800d910:	dbfc      	blt.n	800d90c <__ieee754_fmodf+0x28>
 800d912:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800d916:	d106      	bne.n	800d926 <__ieee754_fmodf+0x42>
 800d918:	4a32      	ldr	r2, [pc, #200]	; (800d9e4 <__ieee754_fmodf+0x100>)
 800d91a:	0fe3      	lsrs	r3, r4, #31
 800d91c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d920:	ed93 0a00 	vldr	s0, [r3]
 800d924:	e7f2      	b.n	800d90c <__ieee754_fmodf+0x28>
 800d926:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800d92a:	d13f      	bne.n	800d9ac <__ieee754_fmodf+0xc8>
 800d92c:	0219      	lsls	r1, r3, #8
 800d92e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800d932:	2900      	cmp	r1, #0
 800d934:	dc37      	bgt.n	800d9a6 <__ieee754_fmodf+0xc2>
 800d936:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800d93a:	d13d      	bne.n	800d9b8 <__ieee754_fmodf+0xd4>
 800d93c:	022f      	lsls	r7, r5, #8
 800d93e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800d942:	2f00      	cmp	r7, #0
 800d944:	da35      	bge.n	800d9b2 <__ieee754_fmodf+0xce>
 800d946:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800d94a:	bfbb      	ittet	lt
 800d94c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800d950:	1a12      	sublt	r2, r2, r0
 800d952:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800d956:	4093      	lsllt	r3, r2
 800d958:	bfa8      	it	ge
 800d95a:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800d95e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800d962:	bfb5      	itete	lt
 800d964:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800d968:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800d96c:	1a52      	sublt	r2, r2, r1
 800d96e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800d972:	bfb8      	it	lt
 800d974:	4095      	lsllt	r5, r2
 800d976:	1a40      	subs	r0, r0, r1
 800d978:	1b5a      	subs	r2, r3, r5
 800d97a:	bb00      	cbnz	r0, 800d9be <__ieee754_fmodf+0xda>
 800d97c:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800d980:	bf38      	it	cc
 800d982:	4613      	movcc	r3, r2
 800d984:	2b00      	cmp	r3, #0
 800d986:	d0c7      	beq.n	800d918 <__ieee754_fmodf+0x34>
 800d988:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d98c:	db1f      	blt.n	800d9ce <__ieee754_fmodf+0xea>
 800d98e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800d992:	db1f      	blt.n	800d9d4 <__ieee754_fmodf+0xf0>
 800d994:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800d998:	317f      	adds	r1, #127	; 0x7f
 800d99a:	4323      	orrs	r3, r4
 800d99c:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800d9a0:	ee00 3a10 	vmov	s0, r3
 800d9a4:	e7b2      	b.n	800d90c <__ieee754_fmodf+0x28>
 800d9a6:	3801      	subs	r0, #1
 800d9a8:	0049      	lsls	r1, r1, #1
 800d9aa:	e7c2      	b.n	800d932 <__ieee754_fmodf+0x4e>
 800d9ac:	15d8      	asrs	r0, r3, #23
 800d9ae:	387f      	subs	r0, #127	; 0x7f
 800d9b0:	e7c1      	b.n	800d936 <__ieee754_fmodf+0x52>
 800d9b2:	3901      	subs	r1, #1
 800d9b4:	007f      	lsls	r7, r7, #1
 800d9b6:	e7c4      	b.n	800d942 <__ieee754_fmodf+0x5e>
 800d9b8:	15e9      	asrs	r1, r5, #23
 800d9ba:	397f      	subs	r1, #127	; 0x7f
 800d9bc:	e7c3      	b.n	800d946 <__ieee754_fmodf+0x62>
 800d9be:	2a00      	cmp	r2, #0
 800d9c0:	da02      	bge.n	800d9c8 <__ieee754_fmodf+0xe4>
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	3801      	subs	r0, #1
 800d9c6:	e7d7      	b.n	800d978 <__ieee754_fmodf+0x94>
 800d9c8:	d0a6      	beq.n	800d918 <__ieee754_fmodf+0x34>
 800d9ca:	0053      	lsls	r3, r2, #1
 800d9cc:	e7fa      	b.n	800d9c4 <__ieee754_fmodf+0xe0>
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	3901      	subs	r1, #1
 800d9d2:	e7d9      	b.n	800d988 <__ieee754_fmodf+0xa4>
 800d9d4:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800d9d8:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800d9dc:	3182      	adds	r1, #130	; 0x82
 800d9de:	410b      	asrs	r3, r1
 800d9e0:	4323      	orrs	r3, r4
 800d9e2:	e7dd      	b.n	800d9a0 <__ieee754_fmodf+0xbc>
 800d9e4:	0800f2a0 	.word	0x0800f2a0

0800d9e8 <finite>:
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	ed8d 0b00 	vstr	d0, [sp]
 800d9ee:	9801      	ldr	r0, [sp, #4]
 800d9f0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d9f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d9f8:	0fc0      	lsrs	r0, r0, #31
 800d9fa:	b002      	add	sp, #8
 800d9fc:	4770      	bx	lr
	...

0800da00 <_init>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	bf00      	nop
 800da04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da06:	bc08      	pop	{r3}
 800da08:	469e      	mov	lr, r3
 800da0a:	4770      	bx	lr

0800da0c <_fini>:
 800da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0e:	bf00      	nop
 800da10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da12:	bc08      	pop	{r3}
 800da14:	469e      	mov	lr, r3
 800da16:	4770      	bx	lr
