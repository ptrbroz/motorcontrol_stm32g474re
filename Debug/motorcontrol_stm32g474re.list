
motorcontrol_stm32g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001206c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001618  08012250  08012250  00022250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013868  08013868  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08013868  08013868  00023868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013870  08013870  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013870  08013870  00023870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013874  08013874  00023874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08013878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009390  20000208  08013a7c  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009598  08013a7c  00039598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000308a5  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052d8  00000000  00000000  00060ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00065db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba8  00000000  00000000  00067b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d948  00000000  00000000  00069708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241cb  00000000  00000000  00097050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b162  00000000  00000000  000bb21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d637d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009480  00000000  00000000  001d63d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012234 	.word	0x08012234

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	08012234 	.word	0x08012234

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f00c fccb 	bl	800d9f0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <MX_ADC1_Init+0xe8>)
 800105c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <MX_ADC1_Init+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <MX_ADC1_Init+0xe8>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001084:	2204      	movs	r2, #4
 8001086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_ADC1_Init+0xe8>)
 8001096:	2201      	movs	r2, #1
 8001098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010c6:	f005 f859 	bl	800617c <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d0:	f003 fcde 	bl	8004a90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_ADC1_Init+0xe8>)
 80010e0:	f006 f8ce 	bl	8007280 <HAL_ADCEx_MultiModeConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ea:	f003 fcd1 	bl	8004a90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_ADC1_Init+0xec>)
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2306      	movs	r3, #6
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fa:	237f      	movs	r3, #127	; 0x7f
 80010fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC1_Init+0xe8>)
 800110c:	f005 fbf0 	bl	80068f0 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001116:	f003 fcbb 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002a0 	.word	0x200002a0
 8001128:	19200040 	.word	0x19200040

0800112c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00c fc59 	bl	800d9f0 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001140:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <MX_ADC2_Init+0xc4>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_ADC2_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_ADC2_Init+0xc0>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001166:	2204      	movs	r2, #4
 8001168:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001178:	2201      	movs	r2, #1
 800117a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_ADC2_Init+0xc0>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_ADC2_Init+0xc0>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_ADC2_Init+0xc0>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011a8:	f004 ffe8 	bl	800617c <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011b2:	f003 fc6d 	bl	8004a90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_ADC2_Init+0xc8>)
 80011b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2306      	movs	r3, #6
 80011bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c2:	237f      	movs	r3, #127	; 0x7f
 80011c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c6:	2304      	movs	r3, #4
 80011c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_ADC2_Init+0xc0>)
 80011d4:	f005 fb8c 	bl	80068f0 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011de:	f003 fc57 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000234 	.word	0x20000234
 80011f0:	50000100 	.word	0x50000100
 80011f4:	1d500080 	.word	0x1d500080

080011f8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00c fbed 	bl	800d9f0 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001218:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <MX_ADC3_Init+0xe8>)
 800121a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <MX_ADC3_Init+0xe4>)
 800121e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001222:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_ADC3_Init+0xe4>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_ADC3_Init+0xe4>)
 800123e:	2204      	movs	r2, #4
 8001240:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_ADC3_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001250:	2201      	movs	r2, #1
 8001252:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <MX_ADC3_Init+0xe4>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_ADC3_Init+0xe4>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001272:	2200      	movs	r2, #0
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <MX_ADC3_Init+0xe4>)
 8001280:	f004 ff7c 	bl	800617c <HAL_ADC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800128a:	f003 fc01 	bl	8004a90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_ADC3_Init+0xe4>)
 800129a:	f005 fff1 	bl	8007280 <HAL_ADCEx_MultiModeConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f003 fbf4 	bl	8004a90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_ADC3_Init+0xec>)
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ac:	2306      	movs	r3, #6
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b4:	237f      	movs	r3, #127	; 0x7f
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b8:	2304      	movs	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_ADC3_Init+0xe4>)
 80012c6:	f005 fb13 	bl	80068f0 <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012d0:	f003 fbde 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	; 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000030c 	.word	0x2000030c
 80012e0:	50000400 	.word	0x50000400
 80012e4:	32601000 	.word	0x32601000

080012e8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001308:	d12d      	bne.n	8001366 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001312:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001314:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10b      	bne.n	8001334 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_ADC_MspInit+0x144>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a42      	ldr	r2, [pc, #264]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_ADC_MspInit+0x144>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_ADC_MspInit+0x144>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134c:	2301      	movs	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135c:	4619      	mov	r1, r3
 800135e:	4834      	ldr	r0, [pc, #208]	; (8001430 <HAL_ADC_MspInit+0x148>)
 8001360:	f007 fb34 	bl	80089cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001364:	e05b      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_ADC_MspInit+0x14c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d12d      	bne.n	80013cc <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <HAL_ADC_MspInit+0x140>)
 8001378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_ADC_MspInit+0x140>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d10b      	bne.n	800139a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_ADC_MspInit+0x144>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_ADC_MspInit+0x144>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b2:	2302      	movs	r3, #2
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <HAL_ADC_MspInit+0x148>)
 80013c6:	f007 fb01 	bl	80089cc <HAL_GPIO_Init>
}
 80013ca:	e028      	b.n	800141e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_ADC_MspInit+0x150>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d123      	bne.n	800141e <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_ADC_MspInit+0x144>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <HAL_ADC_MspInit+0x154>)
 800141a:	f007 fad7 	bl	80089cc <HAL_GPIO_Init>
}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	; 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000224 	.word	0x20000224
 800142c:	40021000 	.word	0x40021000
 8001430:	48000800 	.word	0x48000800
 8001434:	50000100 	.word	0x50000100
 8001438:	50000400 	.word	0x50000400
 800143c:	48000400 	.word	0x48000400

08001440 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800144e:	4b76      	ldr	r3, [pc, #472]	; (8001628 <order_phases+0x1e8>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

	if(!cal->started){
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7c1b      	ldrb	r3, [r3, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d108      	bne.n	800146e <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 800145c:	4873      	ldr	r0, [pc, #460]	; (800162c <order_phases+0x1ec>)
 800145e:	f00c ffbf 	bl	800e3e0 <puts>
		cal->started = 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001630 <order_phases+0x1f0>
 8001482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d528      	bpl.n	80014f2 <order_phases+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80014b2:	3388      	adds	r3, #136	; 0x88
 80014b4:	601a      	str	r2, [r3, #0]
        cal->cal_position.elec_velocity = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80014bc:	3390      	adds	r3, #144	; 0x90
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80014c4:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <order_phases+0x1f4>)
 80014c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80014de:	332c      	adds	r3, #44	; 0x2c
 80014e0:	4619      	mov	r1, r3
 80014e2:	68b8      	ldr	r0, [r7, #8]
 80014e4:	f001 fdb4 	bl	8003050 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
    	return;
 80014f0:	e096      	b.n	8001620 <order_phases+0x1e0>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001638 <order_phases+0x1f8>
 80014fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	d51d      	bpl.n	8001542 <order_phases+0x102>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	edd3 7a05 	vldr	s15, [r3, #20]
 800150c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001514:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800152c:	3388      	adds	r3, #136	; 0x88
 800152e:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001536:	332c      	adds	r3, #44	; 0x2c
 8001538:	4619      	mov	r1, r3
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f001 fd88 	bl	8003050 <commutate>
    	return;
 8001540:	e06e      	b.n	8001620 <order_phases+0x1e0>
    }

	reset_foc(controller);
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f001 fc9a 	bl	8002e7c <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edd3 7a06 	vldr	s15, [r3, #24]
 8001554:	ed97 7a05 	vldr	s14, [r7, #20]
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	eef0 7ae7 	vabs.f32	s15, s15
 8001560:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800163c <order_phases+0x1fc>
 8001564:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001568:	ee16 0a90 	vmov	r0, s13
 800156c:	f7ff f814 	bl	8000598 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	ec43 2b10 	vmov	d0, r2, r3
 8001578:	f010 fb18 	bl	8011bac <round>
 800157c:	ec53 2b10 	vmov	r2, r3, d0
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb38 	bl	8000bf8 <__aeabi_d2uiz>
 8001588:	4603      	mov	r3, r0
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	edd3 7a06 	vldr	s15, [r3, #24]
 8001596:	ed97 7a05 	vldr	s14, [r7, #20]
 800159a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	dd07      	ble.n	80015b4 <order_phases+0x174>
		cal->phase_order = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <order_phases+0x200>)
 80015ae:	f00c ff17 	bl	800e3e0 <puts>
 80015b2:	e006      	b.n	80015c2 <order_phases+0x182>
	}
	else{
		cal->phase_order = 1;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <order_phases+0x204>)
 80015be:	f00c ff0f 	bl	800e3e0 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <order_phases+0x208>)
 80015ca:	f00c fe83 	bl	800e2d4 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffe0 	bl	8000598 <__aeabi_f2d>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f7fe ffdb 	bl	8000598 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9cd 2300 	strd	r2, r3, [sp]
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
 80015ee:	4817      	ldr	r0, [pc, #92]	; (800164c <order_phases+0x20c>)
 80015f0:	f00c fe70 	bl	800e2d4 <iprintf>
    PHASE_ORDER = cal->phase_order;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <order_phases+0x1e8>)
 80015fe:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <order_phases+0x1f4>)
 800160e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	20008f34 	.word	0x20008f34
 800162c:	08012250 	.word	0x08012250
 8001630:	37d1b717 	.word	0x37d1b717
 8001634:	20000684 	.word	0x20000684
 8001638:	3fd06cbe 	.word	0x3fd06cbe
 800163c:	40c90fdb 	.word	0x40c90fdb
 8001640:	08012274 	.word	0x08012274
 8001644:	0801228c 	.word	0x0801228c
 8001648:	080122a4 	.word	0x080122a4
 800164c:	080122b8 	.word	0x080122b8

08001650 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7c1b      	ldrb	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8001666:	489e      	ldr	r0, [pc, #632]	; (80018e0 <calibrate_encoder+0x290>)
 8001668:	f00c feba 	bl	800e3e0 <puts>
			cal->started = 1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80018e4 <calibrate_encoder+0x294>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d525      	bpl.n	8001704 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016ca:	3388      	adds	r3, #136	; 0x88
 80016cc:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 80016ce:	4b86      	ldr	r3, [pc, #536]	; (80018e8 <calibrate_encoder+0x298>)
 80016d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80016e8:	332c      	adds	r3, #44	; 0x2c
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f001 fcaf 	bl	8003050 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001702:	e259      	b.n	8001bb8 <calibrate_encoder+0x568>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	ed93 7a05 	vldr	s14, [r3, #20]
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <calibrate_encoder+0x298>)
 800170c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001710:	eddf 6a76 	vldr	s13, [pc, #472]	; 80018ec <calibrate_encoder+0x29c>
 8001714:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001718:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800171c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	f140 808f 	bpl.w	8001852 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a02 	vldr	s15, [r3, #8]
 800173a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80018f0 <calibrate_encoder+0x2a0>
 800173e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001752:	3388      	adds	r3, #136	; 0x88
 8001754:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800175c:	332c      	adds	r3, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f001 fc75 	bl	8003050 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	ed93 7a05 	vldr	s14, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dc00      	bgt.n	800177e <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 800177c:	e21c      	b.n	8001bb8 <calibrate_encoder+0x568>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	edd3 7a02 	vldr	s15, [r3, #8]
 8001784:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001904 <calibrate_encoder+0x2b4>
 8001788:	ee67 6a87 	vmul.f32	s13, s15, s14
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <calibrate_encoder+0x298>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80018ec <calibrate_encoder+0x29c>
 8001796:	ee27 7a87 	vmul.f32	s14, s15, s14
 800179a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	13db      	asrs	r3, r3, #15
 80017b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	4618      	mov	r0, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	441a      	add	r2, r3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	f100 030a 	add.w	r3, r0, #10
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017d4:	461d      	mov	r5, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	330a      	adds	r3, #10
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	685c      	ldr	r4, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fed5 	bl	8000598 <__aeabi_f2d>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9cd 2300 	strd	r2, r3, [sp]
 80017f6:	4623      	mov	r3, r4
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4629      	mov	r1, r5
 80017fc:	483d      	ldr	r0, [pc, #244]	; (80018f4 <calibrate_encoder+0x2a4>)
 80017fe:	f00c fd69 	bl	800e2d4 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001808:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80018f8 <calibrate_encoder+0x2a8>
 800180c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <calibrate_encoder+0x298>)
 8001824:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001828:	eddf 6a34 	vldr	s13, [pc, #208]	; 80018fc <calibrate_encoder+0x2ac>
 800182c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001834:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001838:	eeb4 7a67 	vcmp.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	f000 81b7 	beq.w	8001bb2 <calibrate_encoder+0x562>
			cal->sample_count++;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001850:	e1b2      	b.n	8001bb8 <calibrate_encoder+0x568>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	ed93 7a05 	vldr	s14, [r3, #20]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <calibrate_encoder+0x298>)
 800185a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800185e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001900 <calibrate_encoder+0x2b0>
 8001862:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001866:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800186a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800186e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	f140 80a9 	bpl.w	80019d4 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a02 	vldr	s15, [r3, #8]
 8001888:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80018f0 <calibrate_encoder+0x2a0>
 800188c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <calibrate_encoder+0x298>)
 8001898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80018b4:	3388      	adds	r3, #136	; 0x88
 80018b6:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80018be:	332c      	adds	r3, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f001 fbc4 	bl	8003050 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	dc14      	bgt.n	8001908 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 80018de:	e16a      	b.n	8001bb6 <calibrate_encoder+0x566>
 80018e0:	080122d4 	.word	0x080122d4
 80018e4:	37d1b717 	.word	0x37d1b717
 80018e8:	20000684 	.word	0x20000684
 80018ec:	40c90fdb 	.word	0x40c90fdb
 80018f0:	3983126e 	.word	0x3983126e
 80018f4:	080122fc 	.word	0x080122fc
 80018f8:	3ba0d97c 	.word	0x3ba0d97c
 80018fc:	43000000 	.word	0x43000000
 8001900:	41490fdb 	.word	0x41490fdb
 8001904:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8152 	beq.w	8001bb6 <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edd3 7a02 	vldr	s15, [r3, #8]
 8001918:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001904 <calibrate_encoder+0x2b4>
 800191c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001920:	4ba7      	ldr	r3, [pc, #668]	; (8001bc0 <calibrate_encoder+0x570>)
 8001922:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001926:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001bc4 <calibrate_encoder+0x574>
 800192a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800192e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001936:	ee17 3a90 	vmov	r3, s15
 800193a:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	13db      	asrs	r3, r3, #15
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	330a      	adds	r3, #10
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800196a:	4610      	mov	r0, r2
 800196c:	0fda      	lsrs	r2, r3, #31
 800196e:	4413      	add	r3, r2
 8001970:	105b      	asrs	r3, r3, #1
 8001972:	4619      	mov	r1, r3
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	f100 030a 	add.w	r3, r0, #10
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001984:	461d      	mov	r5, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	330a      	adds	r3, #10
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	685c      	ldr	r4, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdfd 	bl	8000598 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9cd 2300 	strd	r2, r3, [sp]
 80019a6:	4623      	mov	r3, r4
 80019a8:	6a3a      	ldr	r2, [r7, #32]
 80019aa:	4629      	mov	r1, r5
 80019ac:	4886      	ldr	r0, [pc, #536]	; (8001bc8 <calibrate_encoder+0x578>)
 80019ae:	f00c fc91 	bl	800e2d4 <iprintf>
			cal->sample_count--;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019c4:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001bcc <calibrate_encoder+0x57c>
 80019c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 80019d2:	e0f0      	b.n	8001bb6 <calibrate_encoder+0x566>
    }

    reset_foc(controller);
 80019d4:	68b8      	ldr	r0, [r7, #8]
 80019d6:	f001 fa51 	bl	8002e7c <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019de:	2300      	movs	r3, #0
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
 80019e2:	e00b      	b.n	80019fc <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e8:	330a      	adds	r3, #10
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f2:	4413      	add	r3, r2
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f8:	3301      	adds	r3, #1
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
 80019fc:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <calibrate_encoder+0x570>)
 80019fe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	01db      	lsls	r3, r3, #7
 8001a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dbe8      	blt.n	80019e4 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <calibrate_encoder+0x570>)
 8001a1e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a22:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001bd0 <calibrate_encoder+0x580>
 8001a26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a32:	ee17 2a90 	vmov	r2, s15
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da01      	bge.n	8001a4e <calibrate_encoder+0x3fe>
 8001a4a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a4e:	125b      	asrs	r3, r3, #9
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001a52:	2300      	movs	r3, #0
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a56:	e0a0      	b.n	8001b9a <calibrate_encoder+0x54a>
			int moving_avg = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	0fda      	lsrs	r2, r3, #31
 8001a60:	4413      	add	r3, r2
 8001a62:	105b      	asrs	r3, r3, #1
 8001a64:	425b      	negs	r3, r3
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
 8001a68:	e068      	b.n	8001b3c <calibrate_encoder+0x4ec>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a74:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <calibrate_encoder+0x570>)
 8001a76:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001bd0 <calibrate_encoder+0x580>
 8001a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a86:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001bd0 <calibrate_encoder+0x580>
 8001a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da13      	bge.n	8001ad4 <calibrate_encoder+0x484>
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab6:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <calibrate_encoder+0x570>)
 8001ab8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001abc:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001bd0 <calibrate_encoder+0x580>
 8001ac0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001acc:	ee17 3a90 	vmov	r3, s15
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad2:	e027      	b.n	8001b24 <calibrate_encoder+0x4d4>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <calibrate_encoder+0x570>)
 8001ae0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ae4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001bd0 <calibrate_encoder+0x580>
 8001ae8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001af0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	dd12      	ble.n	8001b24 <calibrate_encoder+0x4d4>
 8001afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <calibrate_encoder+0x570>)
 8001b0a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b0e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001bd0 <calibrate_encoder+0x580>
 8001b12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 3a90 	vmov	r3, s15
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b28:	330a      	adds	r3, #10
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b32:	4413      	add	r3, r2
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	3301      	adds	r3, #1
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	0fda      	lsrs	r2, r3, #31
 8001b40:	4413      	add	r3, r2
 8001b42:	105b      	asrs	r3, r3, #1
 8001b44:	461a      	mov	r2, r3
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	db8e      	blt.n	8001a6a <calibrate_encoder+0x41a>
			}
			moving_avg = moving_avg/window;
 8001b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5a:	4413      	add	r3, r2
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b60:	2b7f      	cmp	r3, #127	; 0x7f
 8001b62:	dd02      	ble.n	8001b6a <calibrate_encoder+0x51a>
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	3b80      	subs	r3, #128	; 0x80
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b8e:	4811      	ldr	r0, [pc, #68]	; (8001bd4 <calibrate_encoder+0x584>)
 8001b90:	f00c fba0 	bl	800e2d4 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	3301      	adds	r3, #1
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9e:	f77f af5b 	ble.w	8001a58 <calibrate_encoder+0x408>

		}

	cal->started = 0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001bb0:	e002      	b.n	8001bb8 <calibrate_encoder+0x568>
				return;
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <calibrate_encoder+0x568>
		return;
 8001bb6:	bf00      	nop
}
 8001bb8:	3748      	adds	r7, #72	; 0x48
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000684 	.word	0x20000684
 8001bc4:	40c90fdb 	.word	0x40c90fdb
 8001bc8:	080122fc 	.word	0x080122fc
 8001bcc:	3ba0d97c 	.word	0x3ba0d97c
 8001bd0:	43000000 	.word	0x43000000
 8001bd4:	0801230c 	.word	0x0801230c

08001bd8 <drv_spi_write>:
#include <drv8353.h>
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001bea:	2200      	movs	r2, #0
 8001bec:	2110      	movs	r1, #16
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf2:	f007 f86d 	bl	8008cd0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1c9a      	adds	r2, r3, #2
 8001bfc:	2364      	movs	r3, #100	; 0x64
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2301      	movs	r3, #1
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <drv_spi_write+0x58>)
 8001c04:	f008 f95b 	bl	8009ebe <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001c08:	bf00      	nop
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <drv_spi_write+0x58>)
 8001c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d0f9      	beq.n	8001c0a <drv_spi_write+0x32>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001c16:	2201      	movs	r2, #1
 8001c18:	2110      	movs	r1, #16
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f007 f857 	bl	8008cd0 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	885b      	ldrh	r3, [r3, #2]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20009444 	.word	0x20009444

08001c34 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001c40:	463b      	mov	r3, r7
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ffc6 	bl	8001bd8 <drv_spi_write>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001c62:	463b      	mov	r3, r7
 8001c64:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ffb5 	bl	8001bd8 <drv_spi_write>
 8001c6e:	4603      	mov	r3, r0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c86:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	02db      	lsls	r3, r3, #11
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff99 	bl	8001bd8 <drv_spi_write>
 8001ca6:	4603      	mov	r3, r0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	f107 0408 	add.w	r4, r7, #8
 8001cba:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
	printf("spi w %d \n", val);
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <drv_write_register+0x40>)
 8001cc6:	f00c fb05 	bl	800e2d4 <iprintf>
	drv_spi_write(&drv, (reg<<11)|val);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	02db      	lsls	r3, r3, #11
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b21b      	sxth	r3, r3
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff79 	bl	8001bd8 <drv_spi_write>
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	08012318 	.word	0x08012318

08001cf4 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	f107 0408 	add.w	r4, r7, #8
 8001cfe:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	01db      	lsls	r3, r3, #7
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	015b      	lsls	r3, r3, #5
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x07FF;
 8001d62:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d66:	82bb      	strh	r3, [r7, #20]
	printf("spi w %d, data being %d \n\r", val, (val&mask));
 8001d68:	8af9      	ldrh	r1, [r7, #22]
 8001d6a:	8afa      	ldrh	r2, [r7, #22]
 8001d6c:	8abb      	ldrh	r3, [r7, #20]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	480b      	ldr	r0, [pc, #44]	; (8001da4 <drv_write_DCR+0xb0>)
 8001d76:	f00c faad 	bl	800e2d4 <iprintf>
	uint16_t retval = drv_spi_write(&drv, val);
 8001d7a:	8afa      	ldrh	r2, [r7, #22]
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff28 	bl	8001bd8 <drv_spi_write>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	827b      	strh	r3, [r7, #18]
	printf("loop retval = %d\n\r", (retval&mask));
 8001d8c:	8a7a      	ldrh	r2, [r7, #18]
 8001d8e:	8abb      	ldrh	r3, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4619      	mov	r1, r3
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <drv_write_DCR+0xb4>)
 8001d98:	f00c fa9c 	bl	800e2d4 <iprintf>
}
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}
 8001da4:	08012324 	.word	0x08012324
 8001da8:	08012340 	.word	0x08012340

08001dac <drv_write_OCPCR>:
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	printf("spi w %d \n", val);
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	f107 0408 	add.w	r4, r7, #8
 8001db6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	029b      	lsls	r3, r3, #10
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	019b      	lsls	r3, r3, #6
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	82fb      	strh	r3, [r7, #22]
	printf("spi w %d \n", val);
 8001df2:	8afb      	ldrh	r3, [r7, #22]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <drv_write_OCPCR+0x68>)
 8001df8:	f00c fa6c 	bl	800e2d4 <iprintf>
	drv_spi_write(&drv, val);
 8001dfc:	8afa      	ldrh	r2, [r7, #22]
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fee7 	bl	8001bd8 <drv_spi_write>
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	08012318 	.word	0x08012318

08001e18 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	f107 0408 	add.w	r4, r7, #8
 8001e22:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	029b      	lsls	r3, r3, #10
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	025b      	lsls	r3, r3, #9
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	019b      	lsls	r3, r3, #6
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	015b      	lsls	r3, r3, #5
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	82fb      	strh	r3, [r7, #22]
	printf("spi w %d \n", val);
 8001e86:	8afb      	ldrh	r3, [r7, #22]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <drv_write_CSACR+0x90>)
 8001e8c:	f00c fa22 	bl	800e2d4 <iprintf>
	drv_spi_write(&drv, val);
 8001e90:	8afa      	ldrh	r2, [r7, #22]
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fe9d 	bl	8001bd8 <drv_spi_write>
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	08012318 	.word	0x08012318

08001eac <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8001eb8:	2202      	movs	r2, #2
 8001eba:	463b      	mov	r3, r7
 8001ebc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ec0:	f7ff feda 	bl	8001c78 <drv_read_register>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	81fb      	strh	r3, [r7, #14]
	printf("spi w %d \n", val);
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4806      	ldr	r0, [pc, #24]	; (8001eec <drv_enable_gd+0x40>)
 8001ed2:	f00c f9ff 	bl	800e2d4 <iprintf>
	drv_write_register(drv, DCR, val);
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4639      	mov	r1, r7
 8001edc:	c903      	ldmia	r1, {r0, r1}
 8001ede:	f7ff fee7 	bl	8001cb0 <drv_write_register>
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	08012318 	.word	0x08012318

08001ef0 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8001efc:	2202      	movs	r2, #2
 8001efe:	463b      	mov	r3, r7
 8001f00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f04:	f7ff feb8 	bl	8001c78 <drv_read_register>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	81fb      	strh	r3, [r7, #14]
	printf("spi w %d \n", val);
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	4619      	mov	r1, r3
 8001f14:	4806      	ldr	r0, [pc, #24]	; (8001f30 <drv_disable_gd+0x40>)
 8001f16:	f00c f9dd 	bl	800e2d4 <iprintf>
	drv_write_register(drv, DCR, val);
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4639      	mov	r1, r7
 8001f20:	c903      	ldmia	r1, {r0, r1}
 8001f22:	f7ff fec5 	bl	8001cb0 <drv_write_register>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	08012318 	.word	0x08012318

08001f34 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	printf("spi w %d \n", val);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8001f40:	463b      	mov	r3, r7
 8001f42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f46:	f7ff fe75 	bl	8001c34 <drv_read_FSR1>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f54:	f7ff fe7f 	bl	8001c56 <drv_read_FSR2>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001f5c:	89fb      	ldrh	r3, [r7, #14]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <drv_print_faults+0x38>
 8001f66:	4857      	ldr	r0, [pc, #348]	; (80020c4 <drv_print_faults+0x190>)
 8001f68:	f00c f9b4 	bl	800e2d4 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <drv_print_faults+0x48>
 8001f76:	4854      	ldr	r0, [pc, #336]	; (80020c8 <drv_print_faults+0x194>)
 8001f78:	f00c f9ac 	bl	800e2d4 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001f7c:	89fb      	ldrh	r3, [r7, #14]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <drv_print_faults+0x58>
 8001f86:	4851      	ldr	r0, [pc, #324]	; (80020cc <drv_print_faults+0x198>)
 8001f88:	f00c f9a4 	bl	800e2d4 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <drv_print_faults+0x68>
 8001f96:	484e      	ldr	r0, [pc, #312]	; (80020d0 <drv_print_faults+0x19c>)
 8001f98:	f00c f99c 	bl	800e2d4 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <drv_print_faults+0x78>
 8001fa6:	484b      	ldr	r0, [pc, #300]	; (80020d4 <drv_print_faults+0x1a0>)
 8001fa8:	f00c f994 	bl	800e2d4 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001fac:	89fb      	ldrh	r3, [r7, #14]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <drv_print_faults+0x88>
 8001fb6:	4848      	ldr	r0, [pc, #288]	; (80020d8 <drv_print_faults+0x1a4>)
 8001fb8:	f00c f98c 	bl	800e2d4 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <drv_print_faults+0x98>
 8001fc6:	4845      	ldr	r0, [pc, #276]	; (80020dc <drv_print_faults+0x1a8>)
 8001fc8:	f00c f984 	bl	800e2d4 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <drv_print_faults+0xa8>
 8001fd6:	4842      	ldr	r0, [pc, #264]	; (80020e0 <drv_print_faults+0x1ac>)
 8001fd8:	f00c f97c 	bl	800e2d4 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001fdc:	89fb      	ldrh	r3, [r7, #14]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <drv_print_faults+0xb8>
 8001fe6:	483f      	ldr	r0, [pc, #252]	; (80020e4 <drv_print_faults+0x1b0>)
 8001fe8:	f00c f974 	bl	800e2d4 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <drv_print_faults+0xc8>
 8001ff6:	483c      	ldr	r0, [pc, #240]	; (80020e8 <drv_print_faults+0x1b4>)
 8001ff8:	f00c f96c 	bl	800e2d4 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <drv_print_faults+0xd8>
 8002006:	4839      	ldr	r0, [pc, #228]	; (80020ec <drv_print_faults+0x1b8>)
 8002008:	f00c f964 	bl	800e2d4 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 800200c:	89bb      	ldrh	r3, [r7, #12]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <drv_print_faults+0xe8>
 8002016:	4836      	ldr	r0, [pc, #216]	; (80020f0 <drv_print_faults+0x1bc>)
 8002018:	f00c f95c 	bl	800e2d4 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 800201c:	89bb      	ldrh	r3, [r7, #12]
 800201e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <drv_print_faults+0xf8>
 8002026:	4833      	ldr	r0, [pc, #204]	; (80020f4 <drv_print_faults+0x1c0>)
 8002028:	f00c f954 	bl	800e2d4 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 800202c:	89bb      	ldrh	r3, [r7, #12]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <drv_print_faults+0x108>
 8002036:	4830      	ldr	r0, [pc, #192]	; (80020f8 <drv_print_faults+0x1c4>)
 8002038:	f00c f94c 	bl	800e2d4 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 800203c:	89bb      	ldrh	r3, [r7, #12]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <drv_print_faults+0x118>
 8002046:	482d      	ldr	r0, [pc, #180]	; (80020fc <drv_print_faults+0x1c8>)
 8002048:	f00c f944 	bl	800e2d4 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 800204c:	89bb      	ldrh	r3, [r7, #12]
 800204e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <drv_print_faults+0x128>
 8002056:	482a      	ldr	r0, [pc, #168]	; (8002100 <drv_print_faults+0x1cc>)
 8002058:	f00c f93c 	bl	800e2d4 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 800205c:	89bb      	ldrh	r3, [r7, #12]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <drv_print_faults+0x138>
 8002066:	4827      	ldr	r0, [pc, #156]	; (8002104 <drv_print_faults+0x1d0>)
 8002068:	f00c f934 	bl	800e2d4 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 800206c:	89bb      	ldrh	r3, [r7, #12]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <drv_print_faults+0x148>
 8002076:	4824      	ldr	r0, [pc, #144]	; (8002108 <drv_print_faults+0x1d4>)
 8002078:	f00c f92c 	bl	800e2d4 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 800207c:	89bb      	ldrh	r3, [r7, #12]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <drv_print_faults+0x158>
 8002086:	4821      	ldr	r0, [pc, #132]	; (800210c <drv_print_faults+0x1d8>)
 8002088:	f00c f924 	bl	800e2d4 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <drv_print_faults+0x168>
 8002096:	481e      	ldr	r0, [pc, #120]	; (8002110 <drv_print_faults+0x1dc>)
 8002098:	f00c f91c 	bl	800e2d4 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 800209c:	89bb      	ldrh	r3, [r7, #12]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <drv_print_faults+0x178>
 80020a6:	481b      	ldr	r0, [pc, #108]	; (8002114 <drv_print_faults+0x1e0>)
 80020a8:	f00c f914 	bl	800e2d4 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 80020ac:	89bb      	ldrh	r3, [r7, #12]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <drv_print_faults+0x188>
 80020b6:	4818      	ldr	r0, [pc, #96]	; (8002118 <drv_print_faults+0x1e4>)
 80020b8:	f00c f90c 	bl	800e2d4 <iprintf>

}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	08012354 	.word	0x08012354
 80020c8:	08012360 	.word	0x08012360
 80020cc:	0801236c 	.word	0x0801236c
 80020d0:	08012374 	.word	0x08012374
 80020d4:	0801237c 	.word	0x0801237c
 80020d8:	08012384 	.word	0x08012384
 80020dc:	08012390 	.word	0x08012390
 80020e0:	0801239c 	.word	0x0801239c
 80020e4:	080123a8 	.word	0x080123a8
 80020e8:	080123b4 	.word	0x080123b4
 80020ec:	080123c0 	.word	0x080123c0
 80020f0:	080123cc 	.word	0x080123cc
 80020f4:	080123d4 	.word	0x080123d4
 80020f8:	080123dc 	.word	0x080123dc
 80020fc:	080123e4 	.word	0x080123e4
 8002100:	080123ec 	.word	0x080123ec
 8002104:	080123f4 	.word	0x080123f4
 8002108:	08012400 	.word	0x08012400
 800210c:	0801240c 	.word	0x0801240c
 8002110:	08012418 	.word	0x08012418
 8002114:	08012424 	.word	0x08012424
 8002118:	08012430 	.word	0x08012430

0800211c <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002120:	4b1e      	ldr	r3, [pc, #120]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <MX_FDCAN2_Init+0x84>)
 8002124:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <MX_FDCAN2_Init+0x80>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002134:	2200      	movs	r2, #0
 8002136:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <MX_FDCAN2_Init+0x80>)
 800213a:	2200      	movs	r2, #0
 800213c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002140:	2200      	movs	r2, #0
 8002142:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002146:	2201      	movs	r2, #1
 8002148:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <MX_FDCAN2_Init+0x80>)
 800214c:	2201      	movs	r2, #1
 800214e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 12;
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002152:	220c      	movs	r2, #12
 8002154:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 3;
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002158:	2203      	movs	r2, #3
 800215a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <MX_FDCAN2_Init+0x80>)
 800215e:	2201      	movs	r2, #1
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002164:	2201      	movs	r2, #1
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <MX_FDCAN2_Init+0x80>)
 800216a:	220c      	movs	r2, #12
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 3;
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002170:	2203      	movs	r2, #3
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002176:	2201      	movs	r2, #1
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <MX_FDCAN2_Init+0x80>)
 800217c:	2201      	movs	r2, #1
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002182:	2200      	movs	r2, #0
 8002184:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_FDCAN2_Init+0x80>)
 8002188:	f005 fb52 	bl	8007830 <HAL_FDCAN_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 8002192:	f002 fc7d 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000378 	.word	0x20000378
 80021a0:	40006800 	.word	0x40006800

080021a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1b      	ldr	r2, [pc, #108]	; (8002230 <HAL_FDCAN_MspInit+0x8c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12f      	bne.n	8002226 <HAL_FDCAN_MspInit+0x82>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_FDCAN_MspInit+0x90>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_FDCAN_MspInit+0x90>)
 80021cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_FDCAN_MspInit+0x90>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_FDCAN_MspInit+0x90>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a14      	ldr	r2, [pc, #80]	; (8002234 <HAL_FDCAN_MspInit+0x90>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_FDCAN_MspInit+0x90>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021f6:	2360      	movs	r3, #96	; 0x60
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002206:	2309      	movs	r3, #9
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	4809      	ldr	r0, [pc, #36]	; (8002238 <HAL_FDCAN_MspInit+0x94>)
 8002212:	f006 fbdb 	bl	80089cc <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	2056      	movs	r0, #86	; 0x56
 800221c:	f005 fa13 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002220:	2056      	movs	r0, #86	; 0x56
 8002222:	f005 fa2a 	bl	800767a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40006800 	.word	0x40006800
 8002234:	40021000 	.word	0x40021000
 8002238:	48000400 	.word	0x48000400

0800223c <can_rx_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
	msg->filter.FilterID1 = CAN_ID;//<<5;
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <can_rx_init+0x58>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = 0x7FF;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002254:	649a      	str	r2, [r3, #72]	; 0x48
	msg->filter.FilterIndex = 0;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_MASK;//FDCAN_FILTER_RANGE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
	//msg->filter.FilterConfig = FDCAN_FILTER_DISABLE;


	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3334      	adds	r3, #52	; 0x34
 8002272:	4619      	mov	r1, r3
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <can_rx_init+0x5c>)
 8002276:	f005 fc35 	bl	8007ae4 <HAL_FDCAN_ConfigFilter>

	//HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT);
 800227a:	2302      	movs	r3, #2
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2302      	movs	r3, #2
 8002280:	2202      	movs	r2, #2
 8002282:	2102      	movs	r1, #2
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <can_rx_init+0x5c>)
 8002286:	f005 fc87 	bl	8007b98 <HAL_FDCAN_ConfigGlobalFilter>
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
	msg->filter.FilterActivation=ENABLE;
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
	*/
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20008f34 	.word	0x20008f34
 8002298:	20000378 	.word	0x20000378

0800229c <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80022b0:	615a      	str	r2, [r3, #20]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE; //???
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	621a      	str	r2, [r3, #32]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
	msg->tx_header.Identifier = CAN_MASTER; // ?
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <can_tx_init+0x54>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	609a      	str	r2, [r3, #8]
	msg->tx_header.MessageMarker = 0; //???
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
	msg->tx_header.TxEventFifoControl = FDCAN_STORE_TX_EVENTS; //???
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
	msg->tx_header.DLC = 6; 			// message size of 8 byte - DataLength
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard - TxFrameType
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request? - ???
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID - ??? Probably Identifier
	*/
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20008f34 	.word	0x20008f34

080022f4 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 80022f4:	b084      	sub	sp, #16
 80022f6:	b590      	push	{r4, r7, lr}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8002304:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8002312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800231c:	0912      	lsrs	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002324:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800232e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8002336:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002340:	0912      	lsrs	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	4313      	orrs	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8002348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002352:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002356:	4313      	orrs	r3, r2
 8002358:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 800235a:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <unpack_cmd+0x160>)
 800235c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002360:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <unpack_cmd+0x160>)
 8002362:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002366:	2110      	movs	r1, #16
 8002368:	eef0 0a47 	vmov.f32	s1, s14
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	6978      	ldr	r0, [r7, #20]
 8002372:	f002 fc7d 	bl	8004c70 <uint_to_float>
 8002376:	eef0 7a40 	vmov.f32	s15, s0
 800237a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237c:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8002380:	4b34      	ldr	r3, [pc, #208]	; (8002454 <unpack_cmd+0x160>)
 8002382:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002386:	4b33      	ldr	r3, [pc, #204]	; (8002454 <unpack_cmd+0x160>)
 8002388:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800238c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238e:	1d1c      	adds	r4, r3, #4
 8002390:	210c      	movs	r1, #12
 8002392:	eef0 0a47 	vmov.f32	s1, s14
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	6938      	ldr	r0, [r7, #16]
 800239c:	f002 fc68 	bl	8004c70 <uint_to_float>
 80023a0:	eef0 7a40 	vmov.f32	s15, s0
 80023a4:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <unpack_cmd+0x160>)
 80023aa:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80023ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b0:	f103 0408 	add.w	r4, r3, #8
 80023b4:	210c      	movs	r1, #12
 80023b6:	eef0 0a67 	vmov.f32	s1, s15
 80023ba:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002458 <unpack_cmd+0x164>
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f002 fc56 	bl	8004c70 <uint_to_float>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <unpack_cmd+0x160>)
 80023ce:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	f103 040c 	add.w	r4, r3, #12
 80023d8:	210c      	movs	r1, #12
 80023da:	eef0 0a67 	vmov.f32	s1, s15
 80023de:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002458 <unpack_cmd+0x164>
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f002 fc44 	bl	8004c70 <uint_to_float>
 80023e8:	eef0 7a40 	vmov.f32	s15, s0
 80023ec:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <unpack_cmd+0x160>)
 80023f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80023f6:	eeb1 7a67 	vneg.f32	s14, s15
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <unpack_cmd+0x160>)
 80023fc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <unpack_cmd+0x160>)
 8002406:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800240a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <unpack_cmd+0x160>)
 8002410:	ed93 7a03 	vldr	s14, [r3, #12]
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <unpack_cmd+0x160>)
 8002416:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <unpack_cmd+0x160>)
 8002420:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242a:	f103 0410 	add.w	r4, r3, #16
 800242e:	210c      	movs	r1, #12
 8002430:	eef0 0a67 	vmov.f32	s1, s15
 8002434:	eeb0 0a66 	vmov.f32	s0, s13
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f002 fc19 	bl	8004c70 <uint_to_float>
 800243e:	eef0 7a40 	vmov.f32	s15, s0
 8002442:	edc4 7a00 	vstr	s15, [r4]

    }
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002450:	b004      	add	sp, #16
 8002452:	4770      	bx	lr
 8002454:	20000684 	.word	0x20000684
 8002458:	00000000 	.word	0x00000000

0800245c <load_from_flash>:


/**
  * @brief  Loads floats and ints from flash memory into global arrays
  */
void load_from_flash(){
 800245c:	b480      	push	{r7}
 800245e:	b093      	sub	sp, #76	; 0x4c
 8002460:	af00      	add	r7, sp, #0
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 8002462:	2300      	movs	r3, #0
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
 8002466:	e02f      	b.n	80024c8 <load_from_flash+0x6c>
    	uint32_t address = FLOATS_ADDR + i*4;
 8002468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800246e:	f503 33fb 	add.w	r3, r3, #128512	; 0x1f600
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    	uint64_t doubleWord = *((uint64_t*)(address));
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	60fb      	str	r3, [r7, #12]
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;
 8002484:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	000a      	movs	r2, r1
 8002492:	2300      	movs	r3, #0
 8002494:	4613      	mov	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]

    	float float1 = *((float*)(&word1));
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]
    	float float2 = *((float*)(&word2));
 80024a0:	f107 0308 	add.w	r3, r7, #8
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]

    	__float_reg[i] =   float1;
 80024a8:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <load_from_flash+0x10c>)
 80024aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	601a      	str	r2, [r3, #0]
    	__float_reg[i+1] = float2;
 80024b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b6:	3301      	adds	r3, #1
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <load_from_flash+0x10c>)
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	601a      	str	r2, [r3, #0]
    for(int i = 0;i<FLOATSCOUNT;i=i+2){
 80024c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c4:	3302      	adds	r3, #2
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	2b3f      	cmp	r3, #63	; 0x3f
 80024cc:	ddcc      	ble.n	8002468 <load_from_flash+0xc>

    }
    for(int i = 0;i<INTSCOUNT;i=i+2){
 80024ce:	2300      	movs	r3, #0
 80024d0:	643b      	str	r3, [r7, #64]	; 0x40
 80024d2:	e03e      	b.n	8002552 <load_from_flash+0xf6>
    	uint32_t address = INTS_ADDR + i*4;
 80024d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <load_from_flash+0x110>)
 80024dc:	4413      	add	r3, r2
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c

    	uint64_t doubleWord = *((uint64_t*)(address));
 80024e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    	uint32_t word1 = doubleWord&0x00000000ffffffff;
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	607b      	str	r3, [r7, #4]
    	uint32_t word2 = (doubleWord&0xffffffff00000000) >> 32;
 80024ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	000a      	movs	r2, r1
 80024fc:	2300      	movs	r3, #0
 80024fe:	4613      	mov	r3, r2
 8002500:	603b      	str	r3, [r7, #0]

		float int1 = *((int*)(&word1));
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float int2 = *((int*)(&word2));
 8002512:	463b      	mov	r3, r7
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		__int_reg[i] =   int1;
 8002522:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800252a:	ee17 1a90 	vmov	r1, s15
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <load_from_flash+0x114>)
 8002530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002532:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__int_reg[i+1] = int2;
 8002536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002538:	3301      	adds	r3, #1
 800253a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800253e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002542:	ee17 1a90 	vmov	r1, s15
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <load_from_flash+0x114>)
 8002548:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i<INTSCOUNT;i=i+2){
 800254c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254e:	3302      	adds	r3, #2
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
 8002552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002554:	2bff      	cmp	r3, #255	; 0xff
 8002556:	ddbd      	ble.n	80024d4 <load_from_flash+0x78>
    }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	374c      	adds	r7, #76	; 0x4c
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000684 	.word	0x20000684
 800256c:	0807d900 	.word	0x0807d900
 8002570:	20008f34 	.word	0x20008f34

08002574 <erase_reserved_flash>:

/**
  * @brief  Erase used page of flash memory to prepare for reprogramming
  * @retval uint32_t PageError. 0xFFFFFFFF means no problem
  */
int erase_reserved_flash(){
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
    FLASH_EraseInitTypeDef eraseStruct;
    eraseStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
    eraseStruct.Banks = FLASH_BANK_2;
 800257e:	2302      	movs	r3, #2
 8002580:	60fb      	str	r3, [r7, #12]
    eraseStruct.Page = RESERVED_PAGE;
 8002582:	237b      	movs	r3, #123	; 0x7b
 8002584:	613b      	str	r3, [r7, #16]
    eraseStruct.NbPages = 5;
 8002586:	2305      	movs	r3, #5
 8002588:	617b      	str	r3, [r7, #20]
    uint32_t error;
    HAL_FLASHEx_Erase(&eraseStruct, &error);
 800258a:	1d3a      	adds	r2, r7, #4
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f006 f8b8 	bl	8008708 <HAL_FLASHEx_Erase>
    printf("Leaving erase flash.");
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <erase_reserved_flash+0x34>)
 800259a:	f00b fe9b 	bl	800e2d4 <iprintf>
    return error;
 800259e:	687b      	ldr	r3, [r7, #4]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	0801243c 	.word	0x0801243c

080025ac <save_to_flash>:
  * @brief  Saves floats and ints from global arrays into flash memory.
  * This should be done sparingly as it causes wear of flash memory and shortens it's lifespan.
  * Should it become necessary to perform this often, consider implementing some form of wear leveling.
  * @retval Zero when OK, nonzero when an error was encountered
  */
int save_to_flash(){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 80025b2:	f005 ff7b 	bl	80084ac <HAL_FLASH_Unlock>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 1;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <save_to_flash+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e075      	b.n	80026b0 <save_to_flash+0x104>

	status = HAL_FLASH_OB_Unlock();
 80025c4:	f005 ffae 	bl	8008524 <HAL_FLASH_OB_Unlock>
 80025c8:	4603      	mov	r3, r0
 80025ca:	75fb      	strb	r3, [r7, #23]
	if(status!=HAL_OK) return 2;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <save_to_flash+0x2a>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e06c      	b.n	80026b0 <save_to_flash+0x104>

    unsigned int eraseError = erase_reserved_flash();
 80025d6:	f7ff ffcd 	bl	8002574 <erase_reserved_flash>
 80025da:	4603      	mov	r3, r0
 80025dc:	613b      	str	r3, [r7, #16]
    if(eraseError!=0xFFFFFFFF) return 3;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d001      	beq.n	80025ea <save_to_flash+0x3e>
 80025e6:	2303      	movs	r3, #3
 80025e8:	e062      	b.n	80026b0 <save_to_flash+0x104>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_SR_ERRORS);
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <save_to_flash+0x10c>)
 80025ec:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80025f0:	611a      	str	r2, [r3, #16]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f6:	f005 ffd7 	bl	80085a8 <FLASH_WaitForLastOperation>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]
    if(status!=HAL_OK) return 5;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <save_to_flash+0x5c>
 8002604:	2305      	movs	r3, #5
 8002606:	e053      	b.n	80026b0 <save_to_flash+0x104>

    for(int i=0;i<FLOATSCOUNT;i=i+2){
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	e020      	b.n	8002650 <save_to_flash+0xa4>
        uint64_t doubleWord = *((uint64_t*) (__float_reg + i)); //read two floats from array as one uint64
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <save_to_flash+0x110>)
 8002614:	4413      	add	r3, r2
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	e9c7 2300 	strd	r2, r3, [r7]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLOATS_ADDR + i*sizeof(float), doubleWord);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002624:	f503 33fb 	add.w	r3, r3, #128512	; 0x1f600
 8002628:	0099      	lsls	r1, r3, #2
 800262a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800262e:	2000      	movs	r0, #0
 8002630:	f005 fee6 	bl	8008400 <HAL_FLASH_Program>
 8002634:	4603      	mov	r3, r0
 8002636:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("SaveToFlash fail writing float #%d", i);return 6;}
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <save_to_flash+0x9e>
 800263e:	69f9      	ldr	r1, [r7, #28]
 8002640:	481f      	ldr	r0, [pc, #124]	; (80026c0 <save_to_flash+0x114>)
 8002642:	f00b fe47 	bl	800e2d4 <iprintf>
 8002646:	2306      	movs	r3, #6
 8002648:	e032      	b.n	80026b0 <save_to_flash+0x104>
    for(int i=0;i<FLOATSCOUNT;i=i+2){
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3302      	adds	r3, #2
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b3f      	cmp	r3, #63	; 0x3f
 8002654:	dddb      	ble.n	800260e <save_to_flash+0x62>
    }

    for(int i=0;i<INTSCOUNT;i=i+2){
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e01e      	b.n	800269a <save_to_flash+0xee>
        uint64_t doubleWord = *((uint64_t*) (__int_reg + i));
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <save_to_flash+0x118>)
 8002662:	4413      	add	r3, r2
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	e9c7 2302 	strd	r2, r3, [r7, #8]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, INTS_ADDR + i*sizeof(int), doubleWord);
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <save_to_flash+0x11c>)
 8002670:	4413      	add	r3, r2
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002678:	2000      	movs	r0, #0
 800267a:	f005 fec1 	bl	8008400 <HAL_FLASH_Program>
 800267e:	4603      	mov	r3, r0
 8002680:	75fb      	strb	r3, [r7, #23]
        if(status!=HAL_OK) {printf("SaveToFlash fail writing int #%d", i);return 7;}
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <save_to_flash+0xe8>
 8002688:	69b9      	ldr	r1, [r7, #24]
 800268a:	4810      	ldr	r0, [pc, #64]	; (80026cc <save_to_flash+0x120>)
 800268c:	f00b fe22 	bl	800e2d4 <iprintf>
 8002690:	2307      	movs	r3, #7
 8002692:	e00d      	b.n	80026b0 <save_to_flash+0x104>
    for(int i=0;i<INTSCOUNT;i=i+2){
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	3302      	adds	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2bff      	cmp	r3, #255	; 0xff
 800269e:	dddd      	ble.n	800265c <save_to_flash+0xb0>
    }
    HAL_FLASH_Lock();
 80026a0:	f005 ff26 	bl	80084f0 <HAL_FLASH_Lock>
    HAL_FLASH_OB_Lock();
 80026a4:	f005 ff64 	bl	8008570 <HAL_FLASH_OB_Lock>
    printf("SaveToFlash All Ok\n");
 80026a8:	4809      	ldr	r0, [pc, #36]	; (80026d0 <save_to_flash+0x124>)
 80026aa:	f00b fe99 	bl	800e3e0 <puts>
    return 0;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40022000 	.word	0x40022000
 80026bc:	20000684 	.word	0x20000684
 80026c0:	08012454 	.word	0x08012454
 80026c4:	20008f34 	.word	0x20008f34
 80026c8:	0201f640 	.word	0x0201f640
 80026cc:	08012478 	.word	0x08012478
 80026d0:	0801249c 	.word	0x0801249c

080026d4 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80026f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fc:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800271c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002720:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <set_dtc+0x140>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d136      	bne.n	800279a <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800272c:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <set_dtc+0x144>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800273a:	edd7 7a05 	vldr	s15, [r7, #20]
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <set_dtc+0x144>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274a:	ee17 2a90 	vmov	r2, s15
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <set_dtc+0x144>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800275e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <set_dtc+0x144>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800276e:	ee17 2a90 	vmov	r2, s15
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <set_dtc+0x144>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002782:	edd7 7a03 	vldr	s15, [r7, #12]
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <set_dtc+0x144>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002792:	ee17 2a90 	vmov	r2, s15
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 8002798:	e035      	b.n	8002806 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800279a:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <set_dtc+0x144>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <set_dtc+0x144>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b8:	ee17 2a90 	vmov	r2, s15
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_v);
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <set_dtc+0x144>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80027d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <set_dtc+0x144>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027dc:	ee17 2a90 	vmov	r2, s15
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_w);
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <set_dtc+0x144>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <set_dtc+0x144>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002800:	ee17 2a90 	vmov	r2, s15
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20008f34 	.word	0x20008f34
 8002818:	200094a8 	.word	0x200094a8

0800281c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	/* Sampe ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <analog_sample+0xe8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10e      	bne.n	800284a <analog_sample+0x2e>
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 800282c:	4836      	ldr	r0, [pc, #216]	; (8002908 <analog_sample+0xec>)
 800282e:	f004 f851 	bl	80068d4 <HAL_ADC_GetValue>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800283a:	4834      	ldr	r0, [pc, #208]	; (800290c <analog_sample+0xf0>)
 800283c:	f004 f84a 	bl	80068d4 <HAL_ADC_GetValue>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	e00d      	b.n	8002866 <analog_sample+0x4a>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		controller->adc_a_raw = HAL_ADC_GetValue(&ADC_CH_IB);
 800284a:	4830      	ldr	r0, [pc, #192]	; (800290c <analog_sample+0xf0>)
 800284c:	f004 f842 	bl	80068d4 <HAL_ADC_GetValue>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = HAL_ADC_GetValue(&ADC_CH_IA);
 8002858:	482b      	ldr	r0, [pc, #172]	; (8002908 <analog_sample+0xec>)
 800285a:	f004 f83b 	bl	80068d4 <HAL_ADC_GetValue>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]
		//adc_ch_ic = ADC_CH_IB;
	}


	HAL_ADC_Start(&ADC_CH_MAIN);
 8002866:	4828      	ldr	r0, [pc, #160]	; (8002908 <analog_sample+0xec>)
 8002868:	f003 fe4a 	bl	8006500 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	4825      	ldr	r0, [pc, #148]	; (8002908 <analog_sample+0xec>)
 8002872:	f003 ff29 	bl	80066c8 <HAL_ADC_PollForConversion>

	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 8002876:	4826      	ldr	r0, [pc, #152]	; (8002910 <analog_sample+0xf4>)
 8002878:	f004 f82c 	bl	80068d4 <HAL_ADC_GetValue>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002890:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002914 <analog_sample+0xf8>
 8002894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002918 <analog_sample+0xfc>
 80028b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002918 <analog_sample+0xfc>
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80028e8:	eeb1 7a67 	vneg.f32	s14, s15
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edc3 7a07 	vstr	s15, [r3, #28]

}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20008f34 	.word	0x20008f34
 8002908:	200002a0 	.word	0x200002a0
 800290c:	20000234 	.word	0x20000234
 8002910:	2000030c 	.word	0x2000030c
 8002914:	3c533333 	.word	0x3c533333
 8002918:	3ca50000 	.word	0x3ca50000

0800291c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	ed87 0a05 	vstr	s0, [r7, #20]
 8002926:	edc7 0a04 	vstr	s1, [r7, #16]
 800292a:	ed87 1a03 	vstr	s2, [r7, #12]
 800292e:	60b8      	str	r0, [r7, #8]
 8002930:	6079      	str	r1, [r7, #4]
 8002932:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002934:	ed97 0a05 	vldr	s0, [r7, #20]
 8002938:	f002 fa06 	bl	8004d48 <cos_lut>
 800293c:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002940:	ed97 0a05 	vldr	s0, [r7, #20]
 8002944:	f002 f9c6 	bl	8004cd4 <sin_lut>
 8002948:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 800294c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002950:	edd7 7a04 	vldr	s15, [r7, #16]
 8002954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002958:	edd7 6a06 	vldr	s13, [r7, #24]
 800295c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 800296e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002972:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002a1c <abc+0x100>
 8002976:	ee27 7a87 	vmul.f32	s14, s15, s14
 800297a:	edd7 7a07 	vldr	s15, [r7, #28]
 800297e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800298a:	edd7 7a04 	vldr	s15, [r7, #16]
 800298e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002992:	edd7 7a07 	vldr	s15, [r7, #28]
 8002996:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002a20 <abc+0x104>
 800299a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800299e:	edd7 7a06 	vldr	s15, [r7, #24]
 80029a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 80029c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002a20 <abc+0x104>
 80029c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80029d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80029e8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002a1c <abc+0x100>
 80029ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029f4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80029f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002a12:	bf00      	nop
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	3f5db3d7 	.word	0x3f5db3d7
 8002a20:	bf5db3d7 	.word	0xbf5db3d7

08002a24 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a2e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a32:	ed87 1a03 	vstr	s2, [r7, #12]
 8002a36:	edc7 1a02 	vstr	s3, [r7, #8]
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002a3e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a42:	f002 f981 	bl	8004d48 <cos_lut>
 8002a46:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002a4a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a4e:	f002 f941 	bl	8004cd4 <sin_lut>
 8002a52:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8002a56:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a66:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002b38 <dq0+0x114>
 8002a6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a72:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a7a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a8e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002b3c <dq0+0x118>
 8002a92:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a96:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a9a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002a9e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002aa2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002aa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b40 <dq0+0x11c>
 8002ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002ac0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac4:	eeb1 7a67 	vneg.f32	s14, s15
 8002ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad4:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002b3c <dq0+0x118>
 8002ad8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002adc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002ae4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ae8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002af8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002afc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002b38 <dq0+0x114>
 8002b00:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b04:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b08:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b20:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b40 <dq0+0x11c>
 8002b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	edc3 7a00 	vstr	s15, [r3]

    }
 8002b2e:	bf00      	nop
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	3f5db3d7 	.word	0x3f5db3d7
 8002b3c:	bf5db3d7 	.word	0xbf5db3d7
 8002b40:	3f2aaaab 	.word	0x3f2aaaab

08002b44 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	ed2d 8b02 	vpush	{d8}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b52:	edc7 0a06 	vstr	s1, [r7, #24]
 8002b56:	ed87 1a05 	vstr	s2, [r7, #20]
 8002b5a:	edc7 1a04 	vstr	s3, [r7, #16]
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8002b64:	ed97 1a04 	vldr	s2, [r7, #16]
 8002b68:	edd7 0a05 	vldr	s1, [r7, #20]
 8002b6c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002b70:	f002 f801 	bl	8004b76 <fminf3>
 8002b74:	eeb0 8a40 	vmov.f32	s16, s0
 8002b78:	ed97 1a04 	vldr	s2, [r7, #16]
 8002b7c:	edd7 0a05 	vldr	s1, [r7, #20]
 8002b80:	ed97 0a06 	vldr	s0, [r7, #24]
 8002b84:	f001 ffc3 	bl	8004b0e <fmaxf3>
 8002b88:	eef0 7a40 	vmov.f32	s15, s0
 8002b8c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002b90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 8002b9c:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <svm+0x160>)
 8002b9e:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002ba0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002ca8 <svm+0x164>
 8002bb8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002bbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bcc:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002cac <svm+0x168>
 8002bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd4:	f001 ff63 	bl	8004a9e <fast_fmaxf>
 8002bd8:	eef0 7a40 	vmov.f32	s15, s0
 8002bdc:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002cb0 <svm+0x16c>
 8002be0:	eeb0 0a67 	vmov.f32	s0, s15
 8002be4:	f001 ff77 	bl	8004ad6 <fast_fminf>
 8002be8:	eef0 7a40 	vmov.f32	s15, s0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002bf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c06:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002ca8 <svm+0x164>
 8002c0a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c16:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1e:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002cac <svm+0x168>
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	f001 ff3a 	bl	8004a9e <fast_fmaxf>
 8002c2a:	eef0 7a40 	vmov.f32	s15, s0
 8002c2e:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002cb0 <svm+0x16c>
 8002c32:	eeb0 0a67 	vmov.f32	s0, s15
 8002c36:	f001 ff4e 	bl	8004ad6 <fast_fminf>
 8002c3a:	eef0 7a40 	vmov.f32	s15, s0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002c44:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c58:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ca8 <svm+0x164>
 8002c5c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c68:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c70:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002cac <svm+0x168>
 8002c74:	eeb0 0a67 	vmov.f32	s0, s15
 8002c78:	f001 ff11 	bl	8004a9e <fast_fmaxf>
 8002c7c:	eef0 7a40 	vmov.f32	s15, s0
 8002c80:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002cb0 <svm+0x16c>
 8002c84:	eeb0 0a67 	vmov.f32	s0, s15
 8002c88:	f001 ff25 	bl	8004ad6 <fast_fminf>
 8002c8c:	eef0 7a40 	vmov.f32	s15, s0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	edc3 7a00 	vstr	s15, [r3]

    }
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	ecbd 8b02 	vpop	{d8}
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	3ef0a3d7 	.word	0x3ef0a3d7
 8002ca8:	3f933333 	.word	0x3f933333
 8002cac:	00000000 	.word	0x00000000
 8002cb0:	3f70a3d7 	.word	0x3f70a3d7

08002cb4 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc8:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fcf6 	bl	80026d4 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e00f      	b.n	8002d0e <zero_current+0x5a>
    	analog_sample(controller);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fd94 	bl	800281c <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	dbeb      	blt.n	8002cee <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	fb92 f2f3 	sdiv	r2, r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    }
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a42      	ldr	r2, [pc, #264]	; (8002e50 <init_controller_params+0x114>)
 8002d48:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <init_controller_params+0x114>)
 8002d4e:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002d50:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <init_controller_params+0x118>)
 8002d52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d56:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002e58 <init_controller_params+0x11c>
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002d64:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <init_controller_params+0x118>)
 8002d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d6a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002e58 <init_controller_params+0x11c>
 8002d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <init_controller_params+0x118>)
 8002d7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d7e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002e5c <init_controller_params+0x120>
 8002d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d86:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002e60 <init_controller_params+0x124>
 8002d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002db2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002e64 <init_controller_params+0x128>
 8002db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <init_controller_params+0x12c>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e036      	b.n	8002e3e <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dda:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002e6c <init_controller_params+0x130>
 8002dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e70 <init_controller_params+0x134>
 8002de6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002dea:	ee16 0a90 	vmov	r0, s13
 8002dee:	f7fd fbd3 	bl	8000598 <__aeabi_f2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	ec43 2b10 	vmov	d0, r2, r3
 8002dfa:	f00e ff71 	bl	8011ce0 <exp>
 8002dfe:	ec51 0b10 	vmov	r0, r1, d0
 8002e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <init_controller_params+0x138>)
 8002e08:	f7fd fc1e 	bl	8000648 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <init_controller_params+0x13c>)
 8002e1a:	f7fd fa5f 	bl	80002dc <__adddf3>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fd ff07 	bl	8000c38 <__aeabi_d2f>
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	333c      	adds	r3, #60	; 0x3c
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b7f      	cmp	r3, #127	; 0x7f
 8002e42:	ddc5      	ble.n	8002dd0 <init_controller_params+0x94>
    }

    }
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	3d3851ec 	.word	0x3d3851ec
 8002e54:	20000684 	.word	0x20000684
 8002e58:	38d1b717 	.word	0x38d1b717
 8002e5c:	37d1b717 	.word	0x37d1b717
 8002e60:	40c90fdb 	.word	0x40c90fdb
 8002e64:	3dcccccd 	.word	0x3dcccccd
 8002e68:	20008f34 	.word	0x20008f34
 8002e6c:	bc000000 	.word	0xbc000000
 8002e70:	3d03126f 	.word	0x3d03126f
 8002e74:	3ff33333 	.word	0x3ff33333
 8002e78:	3ff00000 	.word	0x3ff00000

08002e7c <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <reset_foc+0xe4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <reset_foc+0xe4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea2:	ee17 2a90 	vmov	r2, s15
 8002ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <reset_foc+0xe4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <reset_foc+0xe4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ec6:	ee17 2a90 	vmov	r2, s15
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <reset_foc+0xe4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee2:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <reset_foc+0xe4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eea:	ee17 2a90 	vmov	r2, s15
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	200094a8 	.word	0x200094a8

08002f64 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///

       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8002f7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f82:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003044 <field_weaken+0xe0>
 8002f86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->fw_int = fast_fmaxf(fast_fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8002f9a:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8003048 <field_weaken+0xe4>
 8002f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa2:	f001 fd98 	bl	8004ad6 <fast_fminf>
 8002fa6:	eeb0 7a40 	vmov.f32	s14, s0
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <field_weaken+0xe8>)
 8002fac:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fb0:	eef1 7a67 	vneg.f32	s15, s15
 8002fb4:	eef0 0a67 	vmov.f32	s1, s15
 8002fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fbc:	f001 fd6f 	bl	8004a9e <fast_fmaxf>
 8002fc0:	eef0 7a40 	vmov.f32	s15, s0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
       controller->i_d_des = controller->fw_int;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffe:	f00e fee9 	bl	8011dd4 <sqrtf>
 8003002:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800300c:	edd7 0a03 	vldr	s1, [r7, #12]
 8003010:	eeb0 0a67 	vmov.f32	s0, s15
 8003014:	f001 fd5f 	bl	8004ad6 <fast_fminf>
 8003018:	eeb0 7a40 	vmov.f32	s14, s0
 800301c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003020:	eef1 7a67 	vneg.f32	s15, s15
 8003024:	eef0 0a67 	vmov.f32	s1, s15
 8003028:	eeb0 0a47 	vmov.f32	s0, s14
 800302c:	f001 fd37 	bl	8004a9e <fast_fmaxf>
 8003030:	eef0 7a40 	vmov.f32	s15, s0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4


}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	3ba3d70a 	.word	0x3ba3d70a
 8003048:	00000000 	.word	0x00000000
 800304c:	20000684 	.word	0x20000684

08003050 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity*GR;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003070:	4bd7      	ldr	r3, [pc, #860]	; (80033d0 <commutate+0x380>)
 8003072:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	edd3 6a03 	vldr	s13, [r3, #12]
 8003086:	4bd2      	ldr	r3, [pc, #840]	; (80033d0 <commutate+0x380>)
 8003088:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800308c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	ed93 7a05 	vldr	s14, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	ed93 6a07 	vldr	s12, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3340      	adds	r3, #64	; 0x40
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	eef0 1a46 	vmov.f32	s3, s12
 80030c0:	eeb0 1a66 	vmov.f32	s2, s13
 80030c4:	eef0 0a47 	vmov.f32	s1, s14
 80030c8:	eeb0 0a67 	vmov.f32	s0, s15
 80030cc:	f7ff fcaa 	bl	8002a24 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80030d6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80033d4 <commutate+0x384>
 80030da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80030e4:	eddf 6abc 	vldr	s13, [pc, #752]	; 80033d8 <commutate+0x388>
 80030e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80030fc:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80033d4 <commutate+0x384>
 8003100:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800310a:	eddf 6ab3 	vldr	s13, [pc, #716]	; 80033d8 <commutate+0x388>
 800310e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003122:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80033dc <commutate+0x38c>
 8003126:	ee27 7a87 	vmul.f32	s14, s15, s14
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003130:	eddf 6aab 	vldr	s13, [pc, #684]	; 80033e0 <commutate+0x390>
 8003134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003148:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80033e4 <commutate+0x394>
 800314c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003150:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80033e8 <commutate+0x398>
 8003154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003158:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80033ec <commutate+0x39c>
 800315c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8003166:	4b9a      	ldr	r3, [pc, #616]	; (80033d0 <commutate+0x380>)
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8003182:	eeb0 0a67 	vmov.f32	s0, s15
 8003186:	4610      	mov	r0, r2
 8003188:	f001 fd29 	bl	8004bde <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319c:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b0:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80031c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80031ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80031d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80031f2:	eef0 0a47 	vmov.f32	s1, s14
 80031f6:	eeb0 0a67 	vmov.f32	s0, s15
 80031fa:	f001 fc6c 	bl	8004ad6 <fast_fminf>
 80031fe:	eeb0 7a40 	vmov.f32	s14, s0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003208:	eef1 7a67 	vneg.f32	s15, s15
 800320c:	eef0 0a67 	vmov.f32	s1, s15
 8003210:	eeb0 0a47 	vmov.f32	s0, s14
 8003214:	f001 fc43 	bl	8004a9e <fast_fmaxf>
 8003218:	eef0 7a40 	vmov.f32	s15, s0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003234:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003238:	edd7 7a07 	vldr	s15, [r7, #28]
 800323c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003256:	eef0 0a47 	vmov.f32	s1, s14
 800325a:	eeb0 0a67 	vmov.f32	s0, s15
 800325e:	f001 fc3a 	bl	8004ad6 <fast_fminf>
 8003262:	eeb0 7a40 	vmov.f32	s14, s0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800326c:	eef1 7a67 	vneg.f32	s15, s15
 8003270:	eef0 0a67 	vmov.f32	s1, s15
 8003274:	eeb0 0a47 	vmov.f32	s0, s14
 8003278:	f001 fc11 	bl	8004a9e <fast_fmaxf>
 800327c:	eef0 7a40 	vmov.f32	s15, s0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80032a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	f00e fd91 	bl	8011dd4 <sqrtf>
 80032b2:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80032bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80032c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80032ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80032ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80032f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003310:	eef0 0a47 	vmov.f32	s1, s14
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f001 fbdd 	bl	8004ad6 <fast_fminf>
 800331c:	eeb0 7a40 	vmov.f32	s14, s0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003326:	eef1 7a67 	vneg.f32	s15, s15
 800332a:	eef0 0a67 	vmov.f32	s1, s15
 800332e:	eeb0 0a47 	vmov.f32	s0, s14
 8003332:	f001 fbb4 	bl	8004a9e <fast_fmaxf>
 8003336:	eef0 7a40 	vmov.f32	s15, s0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800334c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800335c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	eeb0 0a67 	vmov.f32	s0, s15
 8003368:	f00e fd34 	bl	8011dd4 <sqrtf>
 800336c:	eef0 7a40 	vmov.f32	s15, s0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800337c:	edd7 0a03 	vldr	s1, [r7, #12]
 8003380:	eeb0 0a67 	vmov.f32	s0, s15
 8003384:	f001 fba7 	bl	8004ad6 <fast_fminf>
 8003388:	eeb0 7a40 	vmov.f32	s14, s0
 800338c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003390:	eef1 7a67 	vneg.f32	s15, s15
 8003394:	eef0 0a67 	vmov.f32	s1, s15
 8003398:	eeb0 0a47 	vmov.f32	s0, s14
 800339c:	f001 fb7f 	bl	8004a9e <fast_fmaxf>
 80033a0:	eef0 7a40 	vmov.f32	s15, s0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80033bc:	eeb0 0a67 	vmov.f32	s0, s15
 80033c0:	4610      	mov	r0, r2
 80033c2:	f001 fc0c 	bl	8004bde <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	e011      	b.n	80033f4 <commutate+0x3a4>
 80033d0:	20000684 	.word	0x20000684
 80033d4:	3f7d70a4 	.word	0x3f7d70a4
 80033d8:	3c23d70a 	.word	0x3c23d70a
 80033dc:	3f666666 	.word	0x3f666666
 80033e0:	3dcccccd 	.word	0x3dcccccd
 80033e4:	3f933333 	.word	0x3f933333
 80033e8:	3f70a3d7 	.word	0x3f70a3d7
 80033ec:	3f13cd3a 	.word	0x3f13cd3a
 80033f0:	381d4951 	.word	0x381d4951
 80033f4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80033f8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80033f0 <commutate+0x3a0>
 80033fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	336c      	adds	r3, #108	; 0x6c
 8003420:	461a      	mov	r2, r3
 8003422:	eeb0 1a66 	vmov.f32	s2, s13
 8003426:	eef0 0a47 	vmov.f32	s1, s14
 800342a:	eeb0 0a67 	vmov.f32	s0, s15
 800342e:	f7ff fa75 	bl	800291c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3360      	adds	r3, #96	; 0x60
 800345a:	461a      	mov	r2, r3
 800345c:	eef0 1a46 	vmov.f32	s3, s12
 8003460:	eeb0 1a66 	vmov.f32	s2, s13
 8003464:	eef0 0a47 	vmov.f32	s1, s14
 8003468:	eeb0 0a67 	vmov.f32	s0, s15
 800346c:	f7ff fb6a 	bl	8002b44 <svm>

       set_dtc(controller);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff f92f 	bl	80026d4 <set_dtc>

    }
 8003476:	bf00      	nop
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop

08003480 <torque_control>:


void torque_control(ControllerStruct *controller){
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800349a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800349e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80034a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80034be:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ca:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <torque_control+0x84>)
 80034d0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <torque_control+0x84>)
 80034d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80034da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034de:	edd7 6a03 	vldr	s13, [r7, #12]
 80034e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000684 	.word	0x20000684

08003508 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "flash_access.h"

 void run_fsm(FSMStruct * fsmstate){
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	785a      	ldrb	r2, [r3, #1]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d00d      	beq.n	8003588 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f92b 	bl	80037c8 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	78db      	ldrb	r3, [r3, #3]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	785a      	ldrb	r2, [r3, #1]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8ba 	bl	80036fc <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b06      	cmp	r3, #6
 800358e:	f200 80a3 	bhi.w	80036d8 <run_fsm+0x180>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <run_fsm+0x40>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080036d7 	.word	0x080036d7
 800359c:	080035b5 	.word	0x080035b5
 80035a0:	0800368b 	.word	0x0800368b
 80035a4:	080036d9 	.word	0x080036d9
 80035a8:	080036d7 	.word	0x080036d7
 80035ac:	080036cd 	.word	0x080036cd
 80035b0:	080036d7 	.word	0x080036d7
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 80035b4:	4b4a      	ldr	r3, [pc, #296]	; (80036e0 <run_fsm+0x188>)
 80035b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <run_fsm+0x18c>)
 80035c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035c4:	4a46      	ldr	r2, [pc, #280]	; (80036e0 <run_fsm+0x188>)
 80035c6:	4947      	ldr	r1, [pc, #284]	; (80036e4 <run_fsm+0x18c>)
 80035c8:	4847      	ldr	r0, [pc, #284]	; (80036e8 <run_fsm+0x190>)
 80035ca:	f7fd ff39 	bl	8001440 <order_phases>
				 save_to_flash();
				 load_from_flash();
				 update_fsm(fsmstate, 27);
			 }

			 break;
 80035ce:	e083      	b.n	80036d8 <run_fsm+0x180>
			 else if(!comm_encoder_cal.done_cal){
 80035d0:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <run_fsm+0x188>)
 80035d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80035da:	4b42      	ldr	r3, [pc, #264]	; (80036e4 <run_fsm+0x18c>)
 80035dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035e0:	4a3f      	ldr	r2, [pc, #252]	; (80036e0 <run_fsm+0x188>)
 80035e2:	4940      	ldr	r1, [pc, #256]	; (80036e4 <run_fsm+0x18c>)
 80035e4:	4840      	ldr	r0, [pc, #256]	; (80036e8 <run_fsm+0x190>)
 80035e6:	f7fe f833 	bl	8001650 <calibrate_encoder>
			 break;
 80035ea:	e075      	b.n	80036d8 <run_fsm+0x180>
				 E_ZERO = comm_encoder_cal.ezero;
 80035ec:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <run_fsm+0x188>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4a3e      	ldr	r2, [pc, #248]	; (80036ec <run_fsm+0x194>)
 80035f2:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <run_fsm+0x194>)
 80035f6:	695c      	ldr	r4, [r3, #20]
 80035f8:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <run_fsm+0x190>)
 80035fa:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <run_fsm+0x194>)
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	425b      	negs	r3, r3
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	eddf 6a37 	vldr	s13, [pc, #220]	; 80036f0 <run_fsm+0x198>
 8003614:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003618:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800361c:	eeb0 0a47 	vmov.f32	s0, s14
 8003620:	f00e fbac 	bl	8011d7c <fmodf>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
 8003628:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80036f4 <run_fsm+0x19c>
 800362c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003630:	ee17 0a90 	vmov	r0, s15
 8003634:	f7fc ffb0 	bl	8000598 <__aeabi_f2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4621      	mov	r1, r4
 800363e:	482e      	ldr	r0, [pc, #184]	; (80036f8 <run_fsm+0x1a0>)
 8003640:	f00a fe48 	bl	800e2d4 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <run_fsm+0x190>)
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <run_fsm+0x188>)
 8003648:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800364c:	332c      	adds	r3, #44	; 0x2c
 800364e:	f102 008c 	add.w	r0, r2, #140	; 0x8c
 8003652:	4619      	mov	r1, r3
 8003654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003658:	461a      	mov	r2, r3
 800365a:	f00a f9bb 	bl	800d9d4 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 800365e:	4a23      	ldr	r2, [pc, #140]	; (80036ec <run_fsm+0x194>)
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <run_fsm+0x188>)
 8003662:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003666:	332c      	adds	r3, #44	; 0x2c
 8003668:	f102 0018 	add.w	r0, r2, #24
 800366c:	4619      	mov	r1, r3
 800366e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003672:	461a      	mov	r2, r3
 8003674:	f00a f9ae 	bl	800d9d4 <memcpy>
				 save_to_flash();
 8003678:	f7fe ff98 	bl	80025ac <save_to_flash>
				 load_from_flash();
 800367c:	f7fe feee 	bl	800245c <load_from_flash>
				 update_fsm(fsmstate, 27);
 8003680:	211b      	movs	r1, #27
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f912 	bl	80038ac <update_fsm>
			 break;
 8003688:	e026      	b.n	80036d8 <run_fsm+0x180>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <run_fsm+0x194>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	dd0a      	ble.n	80036a8 <run_fsm+0x150>
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <run_fsm+0x18c>)
 8003694:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <run_fsm+0x194>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	429a      	cmp	r2, r3
 800369e:	dd03      	ble.n	80036a8 <run_fsm+0x150>
				 zero_commands(&controller);
 80036a0:	4810      	ldr	r0, [pc, #64]	; (80036e4 <run_fsm+0x18c>)
 80036a2:	f7ff ff31 	bl	8003508 <zero_commands>
 80036a6:	e009      	b.n	80036bc <run_fsm+0x164>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 80036a8:	480e      	ldr	r0, [pc, #56]	; (80036e4 <run_fsm+0x18c>)
 80036aa:	f7ff fee9 	bl	8003480 <torque_control>
				 field_weaken(&controller);
 80036ae:	480d      	ldr	r0, [pc, #52]	; (80036e4 <run_fsm+0x18c>)
 80036b0:	f7ff fc58 	bl	8002f64 <field_weaken>
				 commutate(&controller, &comm_encoder);
 80036b4:	490c      	ldr	r1, [pc, #48]	; (80036e8 <run_fsm+0x190>)
 80036b6:	480b      	ldr	r0, [pc, #44]	; (80036e4 <run_fsm+0x18c>)
 80036b8:	f7ff fcca 	bl	8003050 <commutate>
			 }
			 controller.timeout ++;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <run_fsm+0x18c>)
 80036be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036c2:	3301      	adds	r3, #1
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <run_fsm+0x18c>)
 80036c6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 80036ca:	e005      	b.n	80036d8 <run_fsm+0x180>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 80036cc:	2164      	movs	r1, #100	; 0x64
 80036ce:	4806      	ldr	r0, [pc, #24]	; (80036e8 <run_fsm+0x190>)
 80036d0:	f001 fcfc 	bl	80050cc <ps_print>
			 break;
 80036d4:	e000      	b.n	80036d8 <run_fsm+0x180>
			 break;
 80036d6:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	20000a78 	.word	0x20000a78
 80036e4:	20000784 	.word	0x20000784
 80036e8:	200003e0 	.word	0x200003e0
 80036ec:	20008f34 	.word	0x20008f34
 80036f0:	47800000 	.word	0x47800000
 80036f4:	40c90fdb 	.word	0x40c90fdb
 80036f8:	080124b0 	.word	0x080124b0

080036fc <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d84d      	bhi.n	80037a8 <fsm_enter_state+0xac>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <fsm_enter_state+0x18>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	0800372d 	.word	0x0800372d
 8003718:	08003763 	.word	0x08003763
 800371c:	08003739 	.word	0x08003739
 8003720:	080037a9 	.word	0x080037a9
 8003724:	08003733 	.word	0x08003733
 8003728:	080037a7 	.word	0x080037a7
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 800372c:	f000 f97c 	bl	8003a28 <enter_menu_state>
				break;
 8003730:	e03a      	b.n	80037a8 <fsm_enter_state+0xac>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8003732:	f000 f9a5 	bl	8003a80 <enter_setup_state>

				break;
 8003736:	e037      	b.n	80037a8 <fsm_enter_state+0xac>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED1, GPIO_PIN_SET );
 8003738:	2201      	movs	r2, #1
 800373a:	2104      	movs	r1, #4
 800373c:	481c      	ldr	r0, [pc, #112]	; (80037b0 <fsm_enter_state+0xb4>)
 800373e:	f005 fac7 	bl	8008cd0 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8003742:	481c      	ldr	r0, [pc, #112]	; (80037b4 <fsm_enter_state+0xb8>)
 8003744:	f7ff fb9a 	bl	8002e7c <reset_foc>
				drv_enable_gd(drv);
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <fsm_enter_state+0xbc>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2100      	movs	r1, #0
 800374e:	4611      	mov	r1, r2
 8003750:	889a      	ldrh	r2, [r3, #4]
 8003752:	2300      	movs	r3, #0
 8003754:	f362 030f 	bfi	r3, r2, #0, #16
 8003758:	4608      	mov	r0, r1
 800375a:	4619      	mov	r1, r3
 800375c:	f7fe fba6 	bl	8001eac <drv_enable_gd>
				break;
 8003760:	e022      	b.n	80037a8 <fsm_enter_state+0xac>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <fsm_enter_state+0xc0>)
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 800376a:	4b14      	ldr	r3, [pc, #80]	; (80037bc <fsm_enter_state+0xc0>)
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <fsm_enter_state+0xc0>)
 8003774:	2200      	movs	r2, #0
 8003776:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <fsm_enter_state+0xc4>)
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003784:	2100      	movs	r1, #0
 8003786:	480f      	ldr	r0, [pc, #60]	; (80037c4 <fsm_enter_state+0xc8>)
 8003788:	f00a f932 	bl	800d9f0 <memset>
				drv_enable_gd(drv);
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <fsm_enter_state+0xbc>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2100      	movs	r1, #0
 8003792:	4611      	mov	r1, r2
 8003794:	889a      	ldrh	r2, [r3, #4]
 8003796:	2300      	movs	r3, #0
 8003798:	f362 030f 	bfi	r3, r2, #0, #16
 800379c:	4608      	mov	r0, r1
 800379e:	4619      	mov	r1, r3
 80037a0:	f7fe fb84 	bl	8001eac <drv_enable_gd>
				break;
 80037a4:	e000      	b.n	80037a8 <fsm_enter_state+0xac>
				break;
 80037a6:	bf00      	nop

		}
 }
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	48000800 	.word	0x48000800
 80037b4:	20000784 	.word	0x20000784
 80037b8:	20009360 	.word	0x20009360
 80037bc:	20000a78 	.word	0x20000a78
 80037c0:	200003e0 	.word	0x200003e0
 80037c4:	2000046c 	.word	0x2000046c

080037c8 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d85e      	bhi.n	8003896 <fsm_exit_state+0xce>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <fsm_exit_state+0x18>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	080037f9 	.word	0x080037f9
 80037e4:	08003877 	.word	0x08003877
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003897 	.word	0x08003897
 80037f0:	08003801 	.word	0x08003801
 80037f4:	08003809 	.word	0x08003809
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	70da      	strb	r2, [r3, #3]
				break;
 80037fe:	e04a      	b.n	8003896 <fsm_exit_state+0xce>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	70da      	strb	r2, [r3, #3]
				break;
 8003806:	e046      	b.n	8003896 <fsm_exit_state+0xce>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	70da      	strb	r2, [r3, #3]
				break;
 800380e:	e042      	b.n	8003896 <fsm_exit_state+0xce>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <fsm_exit_state+0xd8>)
 8003812:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003816:	eef0 7ae7 	vabs.f32	s15, s15
 800381a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800381e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	d522      	bpl.n	800386e <fsm_exit_state+0xa6>
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <fsm_exit_state+0xd8>)
 800382a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800382e:	eef0 7ae7 	vabs.f32	s15, s15
 8003832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	d516      	bpl.n	800386e <fsm_exit_state+0xa6>
					fsmstate->ready = 1;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <fsm_exit_state+0xdc>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2100      	movs	r1, #0
 800384c:	4611      	mov	r1, r2
 800384e:	889a      	ldrh	r2, [r3, #4]
 8003850:	2300      	movs	r3, #0
 8003852:	f362 030f 	bfi	r3, r2, #0, #16
 8003856:	4608      	mov	r0, r1
 8003858:	4619      	mov	r1, r3
 800385a:	f7fe fb49 	bl	8001ef0 <drv_disable_gd>
					reset_foc(&controller);
 800385e:	4810      	ldr	r0, [pc, #64]	; (80038a0 <fsm_exit_state+0xd8>)
 8003860:	f7ff fb0c 	bl	8002e7c <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED1, GPIO_PIN_RESET );
 8003864:	2200      	movs	r2, #0
 8003866:	2104      	movs	r1, #4
 8003868:	480f      	ldr	r0, [pc, #60]	; (80038a8 <fsm_exit_state+0xe0>)
 800386a:	f005 fa31 	bl	8008cd0 <HAL_GPIO_WritePin>
				}
				zero_commands(&controller);		// Set commands to zero
 800386e:	480c      	ldr	r0, [pc, #48]	; (80038a0 <fsm_exit_state+0xd8>)
 8003870:	f7ff fe4a 	bl	8003508 <zero_commands>
				break;
 8003874:	e00f      	b.n	8003896 <fsm_exit_state+0xce>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <fsm_exit_state+0xdc>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	2100      	movs	r1, #0
 800387c:	4611      	mov	r1, r2
 800387e:	889a      	ldrh	r2, [r3, #4]
 8003880:	2300      	movs	r3, #0
 8003882:	f362 030f 	bfi	r3, r2, #0, #16
 8003886:	4608      	mov	r0, r1
 8003888:	4619      	mov	r1, r3
 800388a:	f7fe fb31 	bl	8001ef0 <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	70da      	strb	r2, [r3, #3]
				break;
 8003894:	bf00      	nop
		}

 }
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000784 	.word	0x20000784
 80038a4:	20009360 	.word	0x20009360
 80038a8:	48000800 	.word	0x48000800

080038ac <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	2b1b      	cmp	r3, #27
 80038bc:	d106      	bne.n	80038cc <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	70da      	strb	r2, [r3, #3]
		return;
 80038ca:	e0a1      	b.n	8003a10 <update_fsm+0x164>
	}
	switch(fsmstate->state){
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	f200 809d 	bhi.w	8003a10 <update_fsm+0x164>
 80038d6:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <update_fsm+0x30>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	080038f5 	.word	0x080038f5
 80038e0:	08003a11 	.word	0x08003a11
 80038e4:	08003a11 	.word	0x08003a11
 80038e8:	08003a11 	.word	0x08003a11
 80038ec:	080039d5 	.word	0x080039d5
 80038f0:	08003a11 	.word	0x08003a11
		case MENU_MODE:
			switch (fsm_input){
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	3b63      	subs	r3, #99	; 0x63
 80038f8:	2b17      	cmp	r3, #23
 80038fa:	f200 8088 	bhi.w	8003a0e <update_fsm+0x162>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <update_fsm+0x58>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003965 	.word	0x08003965
 8003908:	08003a0f 	.word	0x08003a0f
 800390c:	08003981 	.word	0x08003981
 8003910:	08003a0f 	.word	0x08003a0f
 8003914:	08003a0f 	.word	0x08003a0f
 8003918:	08003a0f 	.word	0x08003a0f
 800391c:	08003a0f 	.word	0x08003a0f
 8003920:	08003a0f 	.word	0x08003a0f
 8003924:	08003a0f 	.word	0x08003a0f
 8003928:	08003a0f 	.word	0x08003a0f
 800392c:	08003973 	.word	0x08003973
 8003930:	08003a0f 	.word	0x08003a0f
 8003934:	08003a0f 	.word	0x08003a0f
 8003938:	08003a0f 	.word	0x08003a0f
 800393c:	08003a0f 	.word	0x08003a0f
 8003940:	08003a0f 	.word	0x08003a0f
 8003944:	0800398f 	.word	0x0800398f
 8003948:	08003a0f 	.word	0x08003a0f
 800394c:	08003a0f 	.word	0x08003a0f
 8003950:	08003a0f 	.word	0x08003a0f
 8003954:	08003a0f 	.word	0x08003a0f
 8003958:	08003a0f 	.word	0x08003a0f
 800395c:	08003a0f 	.word	0x08003a0f
 8003960:	0800399d 	.word	0x0800399d
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	70da      	strb	r2, [r3, #3]
					break;
 8003970:	e02f      	b.n	80039d2 <update_fsm+0x126>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	70da      	strb	r2, [r3, #3]
					break;
 800397e:	e028      	b.n	80039d2 <update_fsm+0x126>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2205      	movs	r2, #5
 8003984:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	70da      	strb	r2, [r3, #3]
					break;
 800398c:	e021      	b.n	80039d2 <update_fsm+0x126>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2204      	movs	r2, #4
 8003992:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	70da      	strb	r2, [r3, #3]
					break;
 800399a:	e01a      	b.n	80039d2 <update_fsm+0x126>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 800399c:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <update_fsm+0x16c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 80039a4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003a1c <update_fsm+0x170>
 80039a8:	481b      	ldr	r0, [pc, #108]	; (8003a18 <update_fsm+0x16c>)
 80039aa:	f001 fa1d 	bl	8004de8 <ps_sample>
					HAL_Delay(20);
 80039ae:	2014      	movs	r0, #20
 80039b0:	f002 f996 	bl	8005ce0 <HAL_Delay>
					M_ZERO = comm_encoder.count;
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <update_fsm+0x16c>)
 80039b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <update_fsm+0x174>)
 80039ba:	6113      	str	r3, [r2, #16]
					//if (!prefs.ready()) prefs.open();
					//    prefs.flush();                                                  // Write new prefs to flash
					//    prefs.close();
					//    prefs.load();
					//spi.SetMechOffset(M_OFFSET);
					save_to_flash();
 80039bc:	f7fe fdf6 	bl	80025ac <save_to_flash>
					load_from_flash();
 80039c0:	f7fe fd4c 	bl	800245c <load_from_flash>
					printf("\n\r  Saved new zero position:  %.4f\n\r\n\r", M_ZERO);
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <update_fsm+0x174>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4816      	ldr	r0, [pc, #88]	; (8003a24 <update_fsm+0x178>)
 80039cc:	f00a fc82 	bl	800e2d4 <iprintf>
					break;
 80039d0:	bf00      	nop
				}
			break;
 80039d2:	e01c      	b.n	8003a0e <update_fsm+0x162>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	2b0d      	cmp	r3, #13
 80039d8:	d103      	bne.n	80039e2 <update_fsm+0x136>
				process_user_input(fsmstate);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9c4 	bl	8003d68 <process_user_input>
				break;
 80039e0:	e016      	b.n	8003a10 <update_fsm+0x164>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7b1b      	ldrb	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <update_fsm+0x146>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	735a      	strb	r2, [r3, #13]
 80039f0:	e006      	b.n	8003a00 <update_fsm+0x154>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7b1b      	ldrb	r3, [r3, #12]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7b1b      	ldrb	r3, [r3, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8003a0c:	e000      	b.n	8003a10 <update_fsm+0x164>
			break;
 8003a0e:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200003e0 	.word	0x200003e0
 8003a1c:	37d1b717 	.word	0x37d1b717
 8003a20:	20008f34 	.word	0x20008f34
 8003a24:	080124c4 	.word	0x080124c4

08003a28 <enter_menu_state>:


 void enter_menu_state(void){
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8003a2c:	480c      	ldr	r0, [pc, #48]	; (8003a60 <enter_menu_state+0x38>)
 8003a2e:	f00a fc51 	bl	800e2d4 <iprintf>
	    printf(" Commands:\n\r");
 8003a32:	480c      	ldr	r0, [pc, #48]	; (8003a64 <enter_menu_state+0x3c>)
 8003a34:	f00a fc4e 	bl	800e2d4 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003a38:	480b      	ldr	r0, [pc, #44]	; (8003a68 <enter_menu_state+0x40>)
 8003a3a:	f00a fc4b 	bl	800e2d4 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8003a3e:	480b      	ldr	r0, [pc, #44]	; (8003a6c <enter_menu_state+0x44>)
 8003a40:	f00a fc48 	bl	800e2d4 <iprintf>
	    printf(" s - Setup\n\r");
 8003a44:	480a      	ldr	r0, [pc, #40]	; (8003a70 <enter_menu_state+0x48>)
 8003a46:	f00a fc45 	bl	800e2d4 <iprintf>
	    printf(" e - Display Encoder\n\r");
 8003a4a:	480a      	ldr	r0, [pc, #40]	; (8003a74 <enter_menu_state+0x4c>)
 8003a4c:	f00a fc42 	bl	800e2d4 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003a50:	4809      	ldr	r0, [pc, #36]	; (8003a78 <enter_menu_state+0x50>)
 8003a52:	f00a fc3f 	bl	800e2d4 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003a56:	4809      	ldr	r0, [pc, #36]	; (8003a7c <enter_menu_state+0x54>)
 8003a58:	f00a fc3c 	bl	800e2d4 <iprintf>

	    //gpio.led->write(0);
 }
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	080124ec 	.word	0x080124ec
 8003a64:	080124f4 	.word	0x080124f4
 8003a68:	08012504 	.word	0x08012504
 8003a6c:	08012518 	.word	0x08012518
 8003a70:	08012534 	.word	0x08012534
 8003a74:	08012544 	.word	0x08012544
 8003a78:	0801255c 	.word	0x0801255c
 8003a7c:	08012578 	.word	0x08012578

08003a80 <enter_setup_state>:

 void enter_setup_state(void){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8003a86:	487d      	ldr	r0, [pc, #500]	; (8003c7c <enter_setup_state+0x1fc>)
 8003a88:	f00a fc24 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003a8c:	4b7c      	ldr	r3, [pc, #496]	; (8003c80 <enter_setup_state+0x200>)
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	4b7c      	ldr	r3, [pc, #496]	; (8003c84 <enter_setup_state+0x204>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	4b7c      	ldr	r3, [pc, #496]	; (8003c88 <enter_setup_state+0x208>)
 8003a96:	4a7d      	ldr	r2, [pc, #500]	; (8003c8c <enter_setup_state+0x20c>)
 8003a98:	497d      	ldr	r1, [pc, #500]	; (8003c90 <enter_setup_state+0x210>)
 8003a9a:	487e      	ldr	r0, [pc, #504]	; (8003c94 <enter_setup_state+0x214>)
 8003a9c:	f00a fc1a 	bl	800e2d4 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003aa0:	487d      	ldr	r0, [pc, #500]	; (8003c98 <enter_setup_state+0x218>)
 8003aa2:	f00a fc9d 	bl	800e3e0 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003aa6:	4b7d      	ldr	r3, [pc, #500]	; (8003c9c <enter_setup_state+0x21c>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fd74 	bl	8000598 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ab8:	4b79      	ldr	r3, [pc, #484]	; (8003ca0 <enter_setup_state+0x220>)
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4b79      	ldr	r3, [pc, #484]	; (8003ca4 <enter_setup_state+0x224>)
 8003abe:	4a7a      	ldr	r2, [pc, #488]	; (8003ca8 <enter_setup_state+0x228>)
 8003ac0:	497a      	ldr	r1, [pc, #488]	; (8003cac <enter_setup_state+0x22c>)
 8003ac2:	487b      	ldr	r0, [pc, #492]	; (8003cb0 <enter_setup_state+0x230>)
 8003ac4:	f00a fc06 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003ac8:	4b74      	ldr	r3, [pc, #464]	; (8003c9c <enter_setup_state+0x21c>)
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fd63 	bl	8000598 <__aeabi_f2d>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ada:	4b71      	ldr	r3, [pc, #452]	; (8003ca0 <enter_setup_state+0x220>)
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4b71      	ldr	r3, [pc, #452]	; (8003ca4 <enter_setup_state+0x224>)
 8003ae0:	4a74      	ldr	r2, [pc, #464]	; (8003cb4 <enter_setup_state+0x234>)
 8003ae2:	4975      	ldr	r1, [pc, #468]	; (8003cb8 <enter_setup_state+0x238>)
 8003ae4:	4875      	ldr	r0, [pc, #468]	; (8003cbc <enter_setup_state+0x23c>)
 8003ae6:	f00a fbf5 	bl	800e2d4 <iprintf>
	    printf("\r\n Control:\r\n");
 8003aea:	4875      	ldr	r0, [pc, #468]	; (8003cc0 <enter_setup_state+0x240>)
 8003aec:	f00a fc78 	bl	800e3e0 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <enter_setup_state+0x21c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fc fd4f 	bl	8000598 <__aeabi_f2d>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b02:	4b70      	ldr	r3, [pc, #448]	; (8003cc4 <enter_setup_state+0x244>)
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <enter_setup_state+0x248>)
 8003b08:	4a70      	ldr	r2, [pc, #448]	; (8003ccc <enter_setup_state+0x24c>)
 8003b0a:	4971      	ldr	r1, [pc, #452]	; (8003cd0 <enter_setup_state+0x250>)
 8003b0c:	4871      	ldr	r0, [pc, #452]	; (8003cd4 <enter_setup_state+0x254>)
 8003b0e:	f00a fbe1 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8003b12:	4b62      	ldr	r3, [pc, #392]	; (8003c9c <enter_setup_state+0x21c>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fc fd3e 	bl	8000598 <__aeabi_f2d>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b24:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <enter_setup_state+0x258>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4b6c      	ldr	r3, [pc, #432]	; (8003cdc <enter_setup_state+0x25c>)
 8003b2a:	4a6d      	ldr	r2, [pc, #436]	; (8003ce0 <enter_setup_state+0x260>)
 8003b2c:	496d      	ldr	r1, [pc, #436]	; (8003ce4 <enter_setup_state+0x264>)
 8003b2e:	4869      	ldr	r0, [pc, #420]	; (8003cd4 <enter_setup_state+0x254>)
 8003b30:	f00a fbd0 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003b34:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <enter_setup_state+0x21c>)
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fd2d 	bl	8000598 <__aeabi_f2d>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b46:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <enter_setup_state+0x220>)
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	4b55      	ldr	r3, [pc, #340]	; (8003ca0 <enter_setup_state+0x220>)
 8003b4c:	4a66      	ldr	r2, [pc, #408]	; (8003ce8 <enter_setup_state+0x268>)
 8003b4e:	4967      	ldr	r1, [pc, #412]	; (8003cec <enter_setup_state+0x26c>)
 8003b50:	4860      	ldr	r0, [pc, #384]	; (8003cd4 <enter_setup_state+0x254>)
 8003b52:	f00a fbbf 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003b56:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <enter_setup_state+0x21c>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fc fd1c 	bl	8000598 <__aeabi_f2d>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b68:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <enter_setup_state+0x220>)
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ca0 <enter_setup_state+0x220>)
 8003b6e:	4a60      	ldr	r2, [pc, #384]	; (8003cf0 <enter_setup_state+0x270>)
 8003b70:	4960      	ldr	r1, [pc, #384]	; (8003cf4 <enter_setup_state+0x274>)
 8003b72:	4858      	ldr	r0, [pc, #352]	; (8003cd4 <enter_setup_state+0x254>)
 8003b74:	f00a fbae 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 8003b78:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <enter_setup_state+0x21c>)
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fd0b 	bl	8000598 <__aeabi_f2d>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <enter_setup_state+0x278>)
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <enter_setup_state+0x25c>)
 8003b90:	4a5a      	ldr	r2, [pc, #360]	; (8003cfc <enter_setup_state+0x27c>)
 8003b92:	495b      	ldr	r1, [pc, #364]	; (8003d00 <enter_setup_state+0x280>)
 8003b94:	484f      	ldr	r0, [pc, #316]	; (8003cd4 <enter_setup_state+0x254>)
 8003b96:	f00a fb9d 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 8003b9a:	4b40      	ldr	r3, [pc, #256]	; (8003c9c <enter_setup_state+0x21c>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fcfa 	bl	8000598 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bac:	4b55      	ldr	r3, [pc, #340]	; (8003d04 <enter_setup_state+0x284>)
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <enter_setup_state+0x25c>)
 8003bb2:	4a55      	ldr	r2, [pc, #340]	; (8003d08 <enter_setup_state+0x288>)
 8003bb4:	4955      	ldr	r1, [pc, #340]	; (8003d0c <enter_setup_state+0x28c>)
 8003bb6:	4847      	ldr	r0, [pc, #284]	; (8003cd4 <enter_setup_state+0x254>)
 8003bb8:	f00a fb8c 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003bbc:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <enter_setup_state+0x21c>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fce9 	bl	8000598 <__aeabi_f2d>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bce:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <enter_setup_state+0x290>)
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <enter_setup_state+0x25c>)
 8003bd4:	4a4f      	ldr	r2, [pc, #316]	; (8003d14 <enter_setup_state+0x294>)
 8003bd6:	4950      	ldr	r1, [pc, #320]	; (8003d18 <enter_setup_state+0x298>)
 8003bd8:	483e      	ldr	r0, [pc, #248]	; (8003cd4 <enter_setup_state+0x254>)
 8003bda:	f00a fb7b 	bl	800e2d4 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003bde:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <enter_setup_state+0x21c>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fcd8 	bl	8000598 <__aeabi_f2d>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <enter_setup_state+0x258>)
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <enter_setup_state+0x25c>)
 8003bf6:	4a49      	ldr	r2, [pc, #292]	; (8003d1c <enter_setup_state+0x29c>)
 8003bf8:	4949      	ldr	r1, [pc, #292]	; (8003d20 <enter_setup_state+0x2a0>)
 8003bfa:	4836      	ldr	r0, [pc, #216]	; (8003cd4 <enter_setup_state+0x254>)
 8003bfc:	f00a fb6a 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <enter_setup_state+0x21c>)
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fc fcc7 	bl	8000598 <__aeabi_f2d>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <enter_setup_state+0x2a4>)
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <enter_setup_state+0x25c>)
 8003c18:	4a43      	ldr	r2, [pc, #268]	; (8003d28 <enter_setup_state+0x2a8>)
 8003c1a:	4944      	ldr	r1, [pc, #272]	; (8003d2c <enter_setup_state+0x2ac>)
 8003c1c:	482d      	ldr	r0, [pc, #180]	; (8003cd4 <enter_setup_state+0x254>)
 8003c1e:	f00a fb59 	bl	800e2d4 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003c22:	4843      	ldr	r0, [pc, #268]	; (8003d30 <enter_setup_state+0x2b0>)
 8003c24:	f00a fbdc 	bl	800e3e0 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003c28:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <enter_setup_state+0x2b4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	4b42      	ldr	r3, [pc, #264]	; (8003d38 <enter_setup_state+0x2b8>)
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <enter_setup_state+0x224>)
 8003c34:	4a41      	ldr	r2, [pc, #260]	; (8003d3c <enter_setup_state+0x2bc>)
 8003c36:	4942      	ldr	r1, [pc, #264]	; (8003d40 <enter_setup_state+0x2c0>)
 8003c38:	4842      	ldr	r0, [pc, #264]	; (8003d44 <enter_setup_state+0x2c4>)
 8003c3a:	f00a fb4b 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <enter_setup_state+0x2b4>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	4b3c      	ldr	r3, [pc, #240]	; (8003d38 <enter_setup_state+0x2b8>)
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <enter_setup_state+0x224>)
 8003c4a:	4a3f      	ldr	r2, [pc, #252]	; (8003d48 <enter_setup_state+0x2c8>)
 8003c4c:	493f      	ldr	r1, [pc, #252]	; (8003d4c <enter_setup_state+0x2cc>)
 8003c4e:	483d      	ldr	r0, [pc, #244]	; (8003d44 <enter_setup_state+0x2c4>)
 8003c50:	f00a fb40 	bl	800e2d4 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <enter_setup_state+0x2b4>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <enter_setup_state+0x2d0>)
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <enter_setup_state+0x224>)
 8003c60:	4a3c      	ldr	r2, [pc, #240]	; (8003d54 <enter_setup_state+0x2d4>)
 8003c62:	493d      	ldr	r1, [pc, #244]	; (8003d58 <enter_setup_state+0x2d8>)
 8003c64:	483d      	ldr	r0, [pc, #244]	; (8003d5c <enter_setup_state+0x2dc>)
 8003c66:	f00a fb35 	bl	800e2d4 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 8003c6a:	483d      	ldr	r0, [pc, #244]	; (8003d60 <enter_setup_state+0x2e0>)
 8003c6c:	f00a fb32 	bl	800e2d4 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003c70:	483c      	ldr	r0, [pc, #240]	; (8003d64 <enter_setup_state+0x2e4>)
 8003c72:	f00a fb2f 	bl	800e2d4 <iprintf>
 }
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	08012590 	.word	0x08012590
 8003c80:	080125e4 	.word	0x080125e4
 8003c84:	080125f4 	.word	0x080125f4
 8003c88:	080125ac 	.word	0x080125ac
 8003c8c:	080125b0 	.word	0x080125b0
 8003c90:	080125bc 	.word	0x080125bc
 8003c94:	080125c4 	.word	0x080125c4
 8003c98:	080125f8 	.word	0x080125f8
 8003c9c:	20000684 	.word	0x20000684
 8003ca0:	08012638 	.word	0x08012638
 8003ca4:	08012604 	.word	0x08012604
 8003ca8:	08012608 	.word	0x08012608
 8003cac:	08012614 	.word	0x08012614
 8003cb0:	08012618 	.word	0x08012618
 8003cb4:	0801263c 	.word	0x0801263c
 8003cb8:	08012654 	.word	0x08012654
 8003cbc:	08012658 	.word	0x08012658
 8003cc0:	08012678 	.word	0x08012678
 8003cc4:	080126c8 	.word	0x080126c8
 8003cc8:	08012688 	.word	0x08012688
 8003ccc:	0801268c 	.word	0x0801268c
 8003cd0:	080126a4 	.word	0x080126a4
 8003cd4:	080126a8 	.word	0x080126a8
 8003cd8:	080126ec 	.word	0x080126ec
 8003cdc:	080126d0 	.word	0x080126d0
 8003ce0:	080126d4 	.word	0x080126d4
 8003ce4:	080126e8 	.word	0x080126e8
 8003ce8:	080126f4 	.word	0x080126f4
 8003cec:	08012710 	.word	0x08012710
 8003cf0:	08012714 	.word	0x08012714
 8003cf4:	08012734 	.word	0x08012734
 8003cf8:	08012758 	.word	0x08012758
 8003cfc:	08012738 	.word	0x08012738
 8003d00:	08012754 	.word	0x08012754
 8003d04:	08012784 	.word	0x08012784
 8003d08:	08012760 	.word	0x08012760
 8003d0c:	08012780 	.word	0x08012780
 8003d10:	080127a4 	.word	0x080127a4
 8003d14:	08012788 	.word	0x08012788
 8003d18:	080127a0 	.word	0x080127a0
 8003d1c:	080127ac 	.word	0x080127ac
 8003d20:	080127c4 	.word	0x080127c4
 8003d24:	080127e4 	.word	0x080127e4
 8003d28:	080127c8 	.word	0x080127c8
 8003d2c:	080127e0 	.word	0x080127e0
 8003d30:	080127ec 	.word	0x080127ec
 8003d34:	20008f34 	.word	0x20008f34
 8003d38:	08012824 	.word	0x08012824
 8003d3c:	080127f8 	.word	0x080127f8
 8003d40:	08012800 	.word	0x08012800
 8003d44:	08012804 	.word	0x08012804
 8003d48:	08012828 	.word	0x08012828
 8003d4c:	08012838 	.word	0x08012838
 8003d50:	0801287c 	.word	0x0801287c
 8003d54:	0801283c 	.word	0x0801283c
 8003d58:	0801285c 	.word	0x0801285c
 8003d5c:	08012860 	.word	0x08012860
 8003d60:	08012884 	.word	0x08012884
 8003d64:	080128d0 	.word	0x080128d0

08003d68 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7b5b      	ldrb	r3, [r3, #13]
 8003d74:	3b61      	subs	r3, #97	; 0x61
 8003d76:	2b17      	cmp	r3, #23
 8003d78:	f200 8266 	bhi.w	8004248 <process_user_input+0x4e0>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <process_user_input+0x1c>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003fe3 	.word	0x08003fe3
 8003d88:	08003de5 	.word	0x08003de5
 8003d8c:	08003f8f 	.word	0x08003f8f
 8003d90:	0800415d 	.word	0x0800415d
 8003d94:	08004249 	.word	0x08004249
 8003d98:	08003ec9 	.word	0x08003ec9
 8003d9c:	08004037 	.word	0x08004037
 8003da0:	08003f3b 	.word	0x08003f3b
 8003da4:	08003e39 	.word	0x08003e39
 8003da8:	08004249 	.word	0x08004249
 8003dac:	0800407b 	.word	0x0800407b
 8003db0:	08003e75 	.word	0x08003e75
 8003db4:	08003e57 	.word	0x08003e57
 8003db8:	08004249 	.word	0x08004249
 8003dbc:	08004249 	.word	0x08004249
 8003dc0:	080041a1 	.word	0x080041a1
 8003dc4:	08004249 	.word	0x08004249
 8003dc8:	08004249 	.word	0x08004249
 8003dcc:	08004249 	.word	0x08004249
 8003dd0:	08003f1d 	.word	0x08003f1d
 8003dd4:	08004249 	.word	0x08004249
 8003dd8:	080041f5 	.word	0x080041f5
 8003ddc:	08004249 	.word	0x08004249
 8003de0:	080040bf 	.word	0x080040bf
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f009 fdc1 	bl	800d970 <atof>
 8003dee:	ec53 2b10 	vmov	r2, r3, d0
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f7fc ff1f 	bl	8000c38 <__aeabi_d2f>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8004104 <process_user_input+0x39c>
 8003e00:	ee00 3a10 	vmov	s0, r3
 8003e04:	f00d ff33 	bl	8011c6e <fminf>
 8003e08:	eef0 7a40 	vmov.f32	s15, s0
 8003e0c:	eddf 0abe 	vldr	s1, [pc, #760]	; 8004108 <process_user_input+0x3a0>
 8003e10:	eeb0 0a67 	vmov.f32	s0, s15
 8003e14:	f00d ff10 	bl	8011c38 <fmaxf>
 8003e18:	eef0 7a40 	vmov.f32	s15, s0
 8003e1c:	4bbb      	ldr	r3, [pc, #748]	; (800410c <process_user_input+0x3a4>)
 8003e1e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003e22:	4bba      	ldr	r3, [pc, #744]	; (800410c <process_user_input+0x3a4>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fbb6 	bl	8000598 <__aeabi_f2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	48b7      	ldr	r0, [pc, #732]	; (8004110 <process_user_input+0x3a8>)
 8003e32:	f00a fa4f 	bl	800e2d4 <iprintf>
			 break;
 8003e36:	e20e      	b.n	8004256 <process_user_input+0x4ee>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f009 fd9a 	bl	800d976 <atoi>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4ab3      	ldr	r2, [pc, #716]	; (8004114 <process_user_input+0x3ac>)
 8003e46:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003e48:	4bb2      	ldr	r3, [pc, #712]	; (8004114 <process_user_input+0x3ac>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	48b2      	ldr	r0, [pc, #712]	; (8004118 <process_user_input+0x3b0>)
 8003e50:	f00a fa40 	bl	800e2d4 <iprintf>
			 break;
 8003e54:	e1ff      	b.n	8004256 <process_user_input+0x4ee>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f009 fd8b 	bl	800d976 <atoi>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4aac      	ldr	r2, [pc, #688]	; (8004114 <process_user_input+0x3ac>)
 8003e64:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8003e66:	4bab      	ldr	r3, [pc, #684]	; (8004114 <process_user_input+0x3ac>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	48ab      	ldr	r0, [pc, #684]	; (800411c <process_user_input+0x3b4>)
 8003e6e:	f00a fa31 	bl	800e2d4 <iprintf>
			 break;
 8003e72:	e1f0      	b.n	8004256 <process_user_input+0x4ee>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f009 fd79 	bl	800d970 <atof>
 8003e7e:	ec53 2b10 	vmov	r2, r3, d0
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7fc fed7 	bl	8000c38 <__aeabi_d2f>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8004120 <process_user_input+0x3b8>
 8003e90:	ee00 3a10 	vmov	s0, r3
 8003e94:	f00d feeb 	bl	8011c6e <fminf>
 8003e98:	eef0 7a40 	vmov.f32	s15, s0
 8003e9c:	eddf 0aae 	vldr	s1, [pc, #696]	; 8004158 <process_user_input+0x3f0>
 8003ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea4:	f00d fec8 	bl	8011c38 <fmaxf>
 8003ea8:	eef0 7a40 	vmov.f32	s15, s0
 8003eac:	4b97      	ldr	r3, [pc, #604]	; (800410c <process_user_input+0x3a4>)
 8003eae:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003eb2:	4b96      	ldr	r3, [pc, #600]	; (800410c <process_user_input+0x3a4>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fb6e 	bl	8000598 <__aeabi_f2d>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4898      	ldr	r0, [pc, #608]	; (8004124 <process_user_input+0x3bc>)
 8003ec2:	f00a fa07 	bl	800e2d4 <iprintf>
			 break;
 8003ec6:	e1c6      	b.n	8004256 <process_user_input+0x4ee>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f009 fd4f 	bl	800d970 <atof>
 8003ed2:	ec53 2b10 	vmov	r2, r3, d0
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7fc fead 	bl	8000c38 <__aeabi_d2f>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	eddf 0a91 	vldr	s1, [pc, #580]	; 8004128 <process_user_input+0x3c0>
 8003ee4:	ee00 3a10 	vmov	s0, r3
 8003ee8:	f00d fec1 	bl	8011c6e <fminf>
 8003eec:	eef0 7a40 	vmov.f32	s15, s0
 8003ef0:	eddf 0a99 	vldr	s1, [pc, #612]	; 8004158 <process_user_input+0x3f0>
 8003ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef8:	f00d fe9e 	bl	8011c38 <fmaxf>
 8003efc:	eef0 7a40 	vmov.f32	s15, s0
 8003f00:	4b82      	ldr	r3, [pc, #520]	; (800410c <process_user_input+0x3a4>)
 8003f02:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003f06:	4b81      	ldr	r3, [pc, #516]	; (800410c <process_user_input+0x3a4>)
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb44 	bl	8000598 <__aeabi_f2d>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4885      	ldr	r0, [pc, #532]	; (800412c <process_user_input+0x3c4>)
 8003f16:	f00a f9dd 	bl	800e2d4 <iprintf>
			 break;
 8003f1a:	e19c      	b.n	8004256 <process_user_input+0x4ee>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f009 fd28 	bl	800d976 <atoi>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a7a      	ldr	r2, [pc, #488]	; (8004114 <process_user_input+0x3ac>)
 8003f2a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003f2c:	4b79      	ldr	r3, [pc, #484]	; (8004114 <process_user_input+0x3ac>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4619      	mov	r1, r3
 8003f32:	487f      	ldr	r0, [pc, #508]	; (8004130 <process_user_input+0x3c8>)
 8003f34:	f00a f9ce 	bl	800e2d4 <iprintf>
			 break;
 8003f38:	e18d      	b.n	8004256 <process_user_input+0x4ee>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f009 fd16 	bl	800d970 <atof>
 8003f44:	ec53 2b10 	vmov	r2, r3, d0
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f7fc fe74 	bl	8000c38 <__aeabi_d2f>
 8003f50:	4603      	mov	r3, r0
 8003f52:	eddf 0a78 	vldr	s1, [pc, #480]	; 8004134 <process_user_input+0x3cc>
 8003f56:	ee00 3a10 	vmov	s0, r3
 8003f5a:	f00d fe88 	bl	8011c6e <fminf>
 8003f5e:	eef0 7a40 	vmov.f32	s15, s0
 8003f62:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8004158 <process_user_input+0x3f0>
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	f00d fe65 	bl	8011c38 <fmaxf>
 8003f6e:	eef0 7a40 	vmov.f32	s15, s0
 8003f72:	4b66      	ldr	r3, [pc, #408]	; (800410c <process_user_input+0x3a4>)
 8003f74:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003f78:	4b64      	ldr	r3, [pc, #400]	; (800410c <process_user_input+0x3a4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fb0b 	bl	8000598 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	486c      	ldr	r0, [pc, #432]	; (8004138 <process_user_input+0x3d0>)
 8003f88:	f00a f9a4 	bl	800e2d4 <iprintf>
			 break;
 8003f8c:	e163      	b.n	8004256 <process_user_input+0x4ee>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f009 fcec 	bl	800d970 <atof>
 8003f98:	ec53 2b10 	vmov	r2, r3, d0
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f7fc fe4a 	bl	8000c38 <__aeabi_d2f>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8004120 <process_user_input+0x3b8>
 8003faa:	ee00 3a10 	vmov	s0, r3
 8003fae:	f00d fe5e 	bl	8011c6e <fminf>
 8003fb2:	eef0 7a40 	vmov.f32	s15, s0
 8003fb6:	eddf 0a68 	vldr	s1, [pc, #416]	; 8004158 <process_user_input+0x3f0>
 8003fba:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbe:	f00d fe3b 	bl	8011c38 <fmaxf>
 8003fc2:	eef0 7a40 	vmov.f32	s15, s0
 8003fc6:	4b51      	ldr	r3, [pc, #324]	; (800410c <process_user_input+0x3a4>)
 8003fc8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	; (800410c <process_user_input+0x3a4>)
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fae1 	bl	8000598 <__aeabi_f2d>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4858      	ldr	r0, [pc, #352]	; (800413c <process_user_input+0x3d4>)
 8003fdc:	f00a f97a 	bl	800e2d4 <iprintf>
			 break;
 8003fe0:	e139      	b.n	8004256 <process_user_input+0x4ee>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f009 fcc2 	bl	800d970 <atof>
 8003fec:	ec53 2b10 	vmov	r2, r3, d0
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f7fc fe20 	bl	8000c38 <__aeabi_d2f>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003ffe:	ee00 3a10 	vmov	s0, r3
 8004002:	f00d fe34 	bl	8011c6e <fminf>
 8004006:	eef0 7a40 	vmov.f32	s15, s0
 800400a:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004158 <process_user_input+0x3f0>
 800400e:	eeb0 0a67 	vmov.f32	s0, s15
 8004012:	f00d fe11 	bl	8011c38 <fmaxf>
 8004016:	eef0 7a40 	vmov.f32	s15, s0
 800401a:	4b3c      	ldr	r3, [pc, #240]	; (800410c <process_user_input+0x3a4>)
 800401c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8004020:	4b3a      	ldr	r3, [pc, #232]	; (800410c <process_user_input+0x3a4>)
 8004022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fab7 	bl	8000598 <__aeabi_f2d>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4844      	ldr	r0, [pc, #272]	; (8004140 <process_user_input+0x3d8>)
 8004030:	f00a f950 	bl	800e2d4 <iprintf>
			 break;
 8004034:	e10f      	b.n	8004256 <process_user_input+0x4ee>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f009 fc98 	bl	800d970 <atof>
 8004040:	ec53 2b10 	vmov	r2, r3, d0
 8004044:	4610      	mov	r0, r2
 8004046:	4619      	mov	r1, r3
 8004048:	f7fc fdf6 	bl	8000c38 <__aeabi_d2f>
 800404c:	4603      	mov	r3, r0
 800404e:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8004144 <process_user_input+0x3dc>
 8004052:	ee00 3a10 	vmov	s0, r3
 8004056:	f00d fdef 	bl	8011c38 <fmaxf>
 800405a:	eef0 7a40 	vmov.f32	s15, s0
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <process_user_input+0x3a4>)
 8004060:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8004064:	4b29      	ldr	r3, [pc, #164]	; (800410c <process_user_input+0x3a4>)
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc fa95 	bl	8000598 <__aeabi_f2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4835      	ldr	r0, [pc, #212]	; (8004148 <process_user_input+0x3e0>)
 8004074:	f00a f92e 	bl	800e2d4 <iprintf>
			 break;
 8004078:	e0ed      	b.n	8004256 <process_user_input+0x4ee>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f009 fc76 	bl	800d970 <atof>
 8004084:	ec53 2b10 	vmov	r2, r3, d0
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	f7fc fdd4 	bl	8000c38 <__aeabi_d2f>
 8004090:	4603      	mov	r3, r0
 8004092:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800414c <process_user_input+0x3e4>
 8004096:	ee00 3a10 	vmov	s0, r3
 800409a:	f00d fdcd 	bl	8011c38 <fmaxf>
 800409e:	eef0 7a40 	vmov.f32	s15, s0
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <process_user_input+0x3a4>)
 80040a4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <process_user_input+0x3a4>)
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fa73 	bl	8000598 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4826      	ldr	r0, [pc, #152]	; (8004150 <process_user_input+0x3e8>)
 80040b8:	f00a f90c 	bl	800e2d4 <iprintf>
			 break;
 80040bc:	e0cb      	b.n	8004256 <process_user_input+0x4ee>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f009 fc54 	bl	800d970 <atof>
 80040c8:	ec53 2b10 	vmov	r2, r3, d0
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f7fc fdb2 	bl	8000c38 <__aeabi_d2f>
 80040d4:	4603      	mov	r3, r0
 80040d6:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004158 <process_user_input+0x3f0>
 80040da:	ee00 3a10 	vmov	s0, r3
 80040de:	f00d fdab 	bl	8011c38 <fmaxf>
 80040e2:	eef0 7a40 	vmov.f32	s15, s0
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <process_user_input+0x3a4>)
 80040e8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <process_user_input+0x3a4>)
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fc fa51 	bl	8000598 <__aeabi_f2d>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4816      	ldr	r0, [pc, #88]	; (8004154 <process_user_input+0x3ec>)
 80040fc:	f00a f8ea 	bl	800e2d4 <iprintf>
			 break;
 8004100:	e0a9      	b.n	8004256 <process_user_input+0x4ee>
 8004102:	bf00      	nop
 8004104:	44fa0000 	.word	0x44fa0000
 8004108:	42c80000 	.word	0x42c80000
 800410c:	20000684 	.word	0x20000684
 8004110:	080128fc 	.word	0x080128fc
 8004114:	20008f34 	.word	0x20008f34
 8004118:	08012910 	.word	0x08012910
 800411c:	08012924 	.word	0x08012924
 8004120:	42200000 	.word	0x42200000
 8004124:	0801293c 	.word	0x0801293c
 8004128:	42040000 	.word	0x42040000
 800412c:	08012950 	.word	0x08012950
 8004130:	08012968 	.word	0x08012968
 8004134:	43160000 	.word	0x43160000
 8004138:	08012980 	.word	0x08012980
 800413c:	08012998 	.word	0x08012998
 8004140:	080129b0 	.word	0x080129b0
 8004144:	3a83126f 	.word	0x3a83126f
 8004148:	080129c4 	.word	0x080129c4
 800414c:	38d1b717 	.word	0x38d1b717
 8004150:	080129d4 	.word	0x080129d4
 8004154:	080129e4 	.word	0x080129e4
 8004158:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	4618      	mov	r0, r3
 8004162:	f009 fc05 	bl	800d970 <atof>
 8004166:	ec53 2b10 	vmov	r2, r3, d0
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f7fc fd63 	bl	8000c38 <__aeabi_d2f>
 8004172:	4603      	mov	r3, r0
 8004174:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8004158 <process_user_input+0x3f0>
 8004178:	ee00 3a10 	vmov	s0, r3
 800417c:	f00d fd5c 	bl	8011c38 <fmaxf>
 8004180:	eef0 7a40 	vmov.f32	s15, s0
 8004184:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <process_user_input+0x51c>)
 8004186:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 800418a:	4b3e      	ldr	r3, [pc, #248]	; (8004284 <process_user_input+0x51c>)
 800418c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc fa02 	bl	8000598 <__aeabi_f2d>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	483b      	ldr	r0, [pc, #236]	; (8004288 <process_user_input+0x520>)
 800419a:	f00a f89b 	bl	800e2d4 <iprintf>
			 break;
 800419e:	e05a      	b.n	8004256 <process_user_input+0x4ee>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f009 fbe3 	bl	800d970 <atof>
 80041aa:	ec53 2b10 	vmov	r2, r3, d0
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7fc fd41 	bl	8000c38 <__aeabi_d2f>
 80041b6:	4603      	mov	r3, r0
 80041b8:	eddf 0a34 	vldr	s1, [pc, #208]	; 800428c <process_user_input+0x524>
 80041bc:	ee00 3a10 	vmov	s0, r3
 80041c0:	f00d fd3a 	bl	8011c38 <fmaxf>
 80041c4:	eef0 7a40 	vmov.f32	s15, s0
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <process_user_input+0x51c>)
 80041ca:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <process_user_input+0x51c>)
 80041d0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80041d4:	eef1 7a67 	vneg.f32	s15, s15
 80041d8:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <process_user_input+0x51c>)
 80041da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <process_user_input+0x51c>)
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc f9d8 	bl	8000598 <__aeabi_f2d>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4828      	ldr	r0, [pc, #160]	; (8004290 <process_user_input+0x528>)
 80041ee:	f00a f871 	bl	800e2d4 <iprintf>
			 break;
 80041f2:	e030      	b.n	8004256 <process_user_input+0x4ee>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f009 fbb9 	bl	800d970 <atof>
 80041fe:	ec53 2b10 	vmov	r2, r3, d0
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	f7fc fd17 	bl	8000c38 <__aeabi_d2f>
 800420a:	4603      	mov	r3, r0
 800420c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800428c <process_user_input+0x524>
 8004210:	ee00 3a10 	vmov	s0, r3
 8004214:	f00d fd10 	bl	8011c38 <fmaxf>
 8004218:	eef0 7a40 	vmov.f32	s15, s0
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <process_user_input+0x51c>)
 800421e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <process_user_input+0x51c>)
 8004224:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004228:	eef1 7a67 	vneg.f32	s15, s15
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <process_user_input+0x51c>)
 800422e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <process_user_input+0x51c>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc f9ae 	bl	8000598 <__aeabi_f2d>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4814      	ldr	r0, [pc, #80]	; (8004294 <process_user_input+0x52c>)
 8004242:	f00a f847 	bl	800e2d4 <iprintf>
			 break;
 8004246:	e006      	b.n	8004256 <process_user_input+0x4ee>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4812      	ldr	r0, [pc, #72]	; (8004298 <process_user_input+0x530>)
 8004250:	f00a f840 	bl	800e2d4 <iprintf>
			 break;
 8004254:	bf00      	nop
	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
	 preference_writer_flush(&prefs);
	 preference_writer_close(&prefs);
	 preference_writer_load(prefs);
	 */
	 save_to_flash();
 8004256:	f7fe f9a9 	bl	80025ac <save_to_flash>
	 load_from_flash();
 800425a:	f7fe f8ff 	bl	800245c <load_from_flash>
	 enter_setup_state();
 800425e:	f7ff fc0f 	bl	8003a80 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	2208      	movs	r2, #8
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f009 fbba 	bl	800d9f0 <memset>
 }
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000684 	.word	0x20000684
 8004288:	080129f8 	.word	0x080129f8
 800428c:	00000000 	.word	0x00000000
 8004290:	08012a0c 	.word	0x08012a0c
 8004294:	08012a20 	.word	0x08012a20
 8004298:	08012a34 	.word	0x08012a34

0800429c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	60da      	str	r2, [r3, #12]
 80042b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042b2:	4b39      	ldr	r3, [pc, #228]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	4a38      	ldr	r2, [pc, #224]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042b8:	f043 0320 	orr.w	r3, r3, #32
 80042bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ca:	4b33      	ldr	r3, [pc, #204]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	4a32      	ldr	r2, [pc, #200]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042d0:	f043 0304 	orr.w	r3, r3, #4
 80042d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fa:	4b27      	ldr	r3, [pc, #156]	; (8004398 <MX_GPIO_Init+0xfc>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	4a26      	ldr	r2, [pc, #152]	; (8004398 <MX_GPIO_Init+0xfc>)
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <MX_GPIO_Init+0xfc>)
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8004312:	2200      	movs	r2, #0
 8004314:	210c      	movs	r1, #12
 8004316:	4821      	ldr	r0, [pc, #132]	; (800439c <MX_GPIO_Init+0x100>)
 8004318:	f004 fcda 	bl	8008cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800431c:	2200      	movs	r2, #0
 800431e:	f648 0110 	movw	r1, #34832	; 0x8810
 8004322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004326:	f004 fcd3 	bl	8008cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004330:	481b      	ldr	r0, [pc, #108]	; (80043a0 <MX_GPIO_Init+0x104>)
 8004332:	f004 fccd 	bl	8008cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004336:	230c      	movs	r3, #12
 8004338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433a:	2301      	movs	r3, #1
 800433c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	4619      	mov	r1, r3
 800434c:	4813      	ldr	r0, [pc, #76]	; (800439c <MX_GPIO_Init+0x100>)
 800434e:	f004 fb3d 	bl	80089cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8004352:	f648 0310 	movw	r3, #34832	; 0x8810
 8004356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004358:	2301      	movs	r3, #1
 800435a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	2300      	movs	r3, #0
 8004362:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	4619      	mov	r1, r3
 800436a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800436e:	f004 fb2d 	bl	80089cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004378:	2301      	movs	r3, #1
 800437a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004380:	2300      	movs	r3, #0
 8004382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004384:	f107 0314 	add.w	r3, r7, #20
 8004388:	4619      	mov	r1, r3
 800438a:	4805      	ldr	r0, [pc, #20]	; (80043a0 <MX_GPIO_Init+0x104>)
 800438c:	f004 fb1e 	bl	80089cc <HAL_GPIO_Init>

}
 8004390:	bf00      	nop
 8004392:	3728      	adds	r7, #40	; 0x28
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	48000800 	.word	0x48000800
 80043a0:	48000400 	.word	0x48000400

080043a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	6039      	str	r1, [r7, #0]
 80043ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	db0a      	blt.n	80043ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	490c      	ldr	r1, [pc, #48]	; (80043f0 <__NVIC_SetPriority+0x4c>)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	0112      	lsls	r2, r2, #4
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	440b      	add	r3, r1
 80043c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043cc:	e00a      	b.n	80043e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	4908      	ldr	r1, [pc, #32]	; (80043f4 <__NVIC_SetPriority+0x50>)
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	3b04      	subs	r3, #4
 80043dc:	0112      	lsls	r2, r2, #4
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	440b      	add	r3, r1
 80043e2:	761a      	strb	r2, [r3, #24]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000e100 	.word	0xe000e100
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043fe:	f001 fbfe 	bl	8005bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004402:	f000 fae3 	bl	80049cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004406:	f7ff ff49 	bl	800429c <MX_GPIO_Init>
  MX_ADC1_Init();
 800440a:	f7fc fe17 	bl	800103c <MX_ADC1_Init>
  MX_FDCAN2_Init();
 800440e:	f7fd fe85 	bl	800211c <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8004412:	f000 fea1 	bl	8005158 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8004416:	f001 fb0f 	bl	8005a38 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800441a:	f000 fedb 	bl	80051d4 <MX_SPI3_Init>
  MX_TIM1_Init();
 800441e:	f001 f9db 	bl	80057d8 <MX_TIM1_Init>
  MX_ADC2_Init();
 8004422:	f7fc fe83 	bl	800112c <MX_ADC2_Init>
  MX_ADC3_Init();
 8004426:	f7fc fee7 	bl	80011f8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */


  /* Load settings from flash */
    load_from_flash();
 800442a:	f7fe f817 	bl	800245c <load_from_flash>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 800442e:	4bba      	ldr	r3, [pc, #744]	; (8004718 <main+0x320>)
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d102      	bne.n	800443e <main+0x46>
 8004438:	4bb7      	ldr	r3, [pc, #732]	; (8004718 <main+0x320>)
 800443a:	2200      	movs	r2, #0
 800443c:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 800443e:	4bb6      	ldr	r3, [pc, #728]	; (8004718 <main+0x320>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d102      	bne.n	800444e <main+0x56>
 8004448:	4bb3      	ldr	r3, [pc, #716]	; (8004718 <main+0x320>)
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800444e:	4bb3      	ldr	r3, [pc, #716]	; (800471c <main+0x324>)
 8004450:	edd3 7a02 	vldr	s15, [r3, #8]
 8004454:	eef4 7a67 	vcmp.f32	s15, s15
 8004458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445c:	d609      	bvs.n	8004472 <main+0x7a>
 800445e:	4baf      	ldr	r3, [pc, #700]	; (800471c <main+0x324>)
 8004460:	edd3 7a02 	vldr	s15, [r3, #8]
 8004464:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004468:	eef4 7a47 	vcmp.f32	s15, s14
 800446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004470:	d102      	bne.n	8004478 <main+0x80>
 8004472:	4baa      	ldr	r3, [pc, #680]	; (800471c <main+0x324>)
 8004474:	4aaa      	ldr	r2, [pc, #680]	; (8004720 <main+0x328>)
 8004476:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004478:	4ba8      	ldr	r3, [pc, #672]	; (800471c <main+0x324>)
 800447a:	edd3 7a03 	vldr	s15, [r3, #12]
 800447e:	eef4 7a67 	vcmp.f32	s15, s15
 8004482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004486:	d609      	bvs.n	800449c <main+0xa4>
 8004488:	4ba4      	ldr	r3, [pc, #656]	; (800471c <main+0x324>)
 800448a:	edd3 7a03 	vldr	s15, [r3, #12]
 800448e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004492:	eef4 7a47 	vcmp.f32	s15, s14
 8004496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449a:	d102      	bne.n	80044a2 <main+0xaa>
 800449c:	4b9f      	ldr	r3, [pc, #636]	; (800471c <main+0x324>)
 800449e:	4aa1      	ldr	r2, [pc, #644]	; (8004724 <main+0x32c>)
 80044a0:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 80044a2:	4b9e      	ldr	r3, [pc, #632]	; (800471c <main+0x324>)
 80044a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80044a8:	eef4 7a67 	vcmp.f32	s15, s15
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	d609      	bvs.n	80044c6 <main+0xce>
 80044b2:	4b9a      	ldr	r3, [pc, #616]	; (800471c <main+0x324>)
 80044b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80044b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80044bc:	eef4 7a47 	vcmp.f32	s15, s14
 80044c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c4:	d103      	bne.n	80044ce <main+0xd6>
 80044c6:	4b95      	ldr	r3, [pc, #596]	; (800471c <main+0x324>)
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 80044ce:	4b92      	ldr	r3, [pc, #584]	; (8004718 <main+0x320>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d102      	bne.n	80044de <main+0xe6>
 80044d8:	4b8f      	ldr	r3, [pc, #572]	; (8004718 <main+0x320>)
 80044da:	2201      	movs	r2, #1
 80044dc:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80044de:	4b8e      	ldr	r3, [pc, #568]	; (8004718 <main+0x320>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d102      	bne.n	80044ee <main+0xf6>
 80044e8:	4b8b      	ldr	r3, [pc, #556]	; (8004718 <main+0x320>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80044ee:	4b8a      	ldr	r3, [pc, #552]	; (8004718 <main+0x320>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d103      	bne.n	8004500 <main+0x108>
 80044f8:	4b87      	ldr	r3, [pc, #540]	; (8004718 <main+0x320>)
 80044fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044fe:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004500:	4b86      	ldr	r3, [pc, #536]	; (800471c <main+0x324>)
 8004502:	edd3 7a07 	vldr	s15, [r3, #28]
 8004506:	eef4 7a67 	vcmp.f32	s15, s15
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	d609      	bvs.n	8004524 <main+0x12c>
 8004510:	4b82      	ldr	r3, [pc, #520]	; (800471c <main+0x324>)
 8004512:	edd3 7a07 	vldr	s15, [r3, #28]
 8004516:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800451a:	eef4 7a47 	vcmp.f32	s15, s14
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	d103      	bne.n	800452c <main+0x134>
 8004524:	4b7d      	ldr	r3, [pc, #500]	; (800471c <main+0x324>)
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800452c:	4b7b      	ldr	r3, [pc, #492]	; (800471c <main+0x324>)
 800452e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004532:	eef4 7a67 	vcmp.f32	s15, s15
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	d609      	bvs.n	8004550 <main+0x158>
 800453c:	4b77      	ldr	r3, [pc, #476]	; (800471c <main+0x324>)
 800453e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004542:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004546:	eef4 7a47 	vcmp.f32	s15, s14
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	d102      	bne.n	8004556 <main+0x15e>
 8004550:	4b72      	ldr	r3, [pc, #456]	; (800471c <main+0x324>)
 8004552:	4a75      	ldr	r2, [pc, #468]	; (8004728 <main+0x330>)
 8004554:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004556:	4b71      	ldr	r3, [pc, #452]	; (800471c <main+0x324>)
 8004558:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800455c:	eef4 7a67 	vcmp.f32	s15, s15
 8004560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004564:	d609      	bvs.n	800457a <main+0x182>
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <main+0x324>)
 8004568:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800456c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004570:	eef4 7a47 	vcmp.f32	s15, s14
 8004574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004578:	d102      	bne.n	8004580 <main+0x188>
 800457a:	4b68      	ldr	r3, [pc, #416]	; (800471c <main+0x324>)
 800457c:	4a6b      	ldr	r2, [pc, #428]	; (800472c <main+0x334>)
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004580:	4b66      	ldr	r3, [pc, #408]	; (800471c <main+0x324>)
 8004582:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004586:	eef4 7a67 	vcmp.f32	s15, s15
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	d609      	bvs.n	80045a4 <main+0x1ac>
 8004590:	4b62      	ldr	r3, [pc, #392]	; (800471c <main+0x324>)
 8004592:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004596:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800459a:	eef4 7a47 	vcmp.f32	s15, s14
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	d102      	bne.n	80045aa <main+0x1b2>
 80045a4:	4b5d      	ldr	r3, [pc, #372]	; (800471c <main+0x324>)
 80045a6:	4a62      	ldr	r2, [pc, #392]	; (8004730 <main+0x338>)
 80045a8:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80045aa:	4b5c      	ldr	r3, [pc, #368]	; (800471c <main+0x324>)
 80045ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80045b0:	eef4 7a67 	vcmp.f32	s15, s15
 80045b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b8:	d609      	bvs.n	80045ce <main+0x1d6>
 80045ba:	4b58      	ldr	r3, [pc, #352]	; (800471c <main+0x324>)
 80045bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80045c0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80045c4:	eef4 7a47 	vcmp.f32	s15, s14
 80045c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045cc:	d102      	bne.n	80045d4 <main+0x1dc>
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <main+0x324>)
 80045d0:	4a58      	ldr	r2, [pc, #352]	; (8004734 <main+0x33c>)
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 80045d4:	4b51      	ldr	r3, [pc, #324]	; (800471c <main+0x324>)
 80045d6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80045da:	eef4 7a67 	vcmp.f32	s15, s15
 80045de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e2:	d609      	bvs.n	80045f8 <main+0x200>
 80045e4:	4b4d      	ldr	r3, [pc, #308]	; (800471c <main+0x324>)
 80045e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80045ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80045ee:	eef4 7a47 	vcmp.f32	s15, s14
 80045f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f6:	d103      	bne.n	8004600 <main+0x208>
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <main+0x324>)
 80045fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004600:	4b46      	ldr	r3, [pc, #280]	; (800471c <main+0x324>)
 8004602:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004606:	eef4 7a67 	vcmp.f32	s15, s15
 800460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460e:	d609      	bvs.n	8004624 <main+0x22c>
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <main+0x324>)
 8004612:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004616:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800461a:	eef4 7a47 	vcmp.f32	s15, s14
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	d103      	bne.n	800462c <main+0x234>
 8004624:	4b3d      	ldr	r3, [pc, #244]	; (800471c <main+0x324>)
 8004626:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800462c:	4b3b      	ldr	r3, [pc, #236]	; (800471c <main+0x324>)
 800462e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004632:	eef4 7a67 	vcmp.f32	s15, s15
 8004636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463a:	d609      	bvs.n	8004650 <main+0x258>
 800463c:	4b37      	ldr	r3, [pc, #220]	; (800471c <main+0x324>)
 800463e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004642:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004646:	eef4 7a47 	vcmp.f32	s15, s14
 800464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464e:	d102      	bne.n	8004656 <main+0x25e>
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <main+0x324>)
 8004652:	4a39      	ldr	r2, [pc, #228]	; (8004738 <main+0x340>)
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004656:	4b31      	ldr	r3, [pc, #196]	; (800471c <main+0x324>)
 8004658:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800465c:	eef4 7a67 	vcmp.f32	s15, s15
 8004660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004664:	d609      	bvs.n	800467a <main+0x282>
 8004666:	4b2d      	ldr	r3, [pc, #180]	; (800471c <main+0x324>)
 8004668:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800466c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004670:	eef4 7a47 	vcmp.f32	s15, s14
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	d102      	bne.n	8004680 <main+0x288>
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <main+0x324>)
 800467c:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <main+0x338>)
 800467e:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004680:	4b26      	ldr	r3, [pc, #152]	; (800471c <main+0x324>)
 8004682:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004686:	eef4 7a67 	vcmp.f32	s15, s15
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	d702      	bvc.n	8004696 <main+0x29e>
 8004690:	4b22      	ldr	r3, [pc, #136]	; (800471c <main+0x324>)
 8004692:	4a2a      	ldr	r2, [pc, #168]	; (800473c <main+0x344>)
 8004694:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <main+0x324>)
 8004698:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800469c:	eef4 7a67 	vcmp.f32	s15, s15
 80046a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a4:	d702      	bvc.n	80046ac <main+0x2b4>
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <main+0x324>)
 80046a8:	4a25      	ldr	r2, [pc, #148]	; (8004740 <main+0x348>)
 80046aa:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <main+0x324>)
 80046ae:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80046b2:	eef4 7a67 	vcmp.f32	s15, s15
 80046b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ba:	d702      	bvc.n	80046c2 <main+0x2ca>
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <main+0x324>)
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <main+0x34c>)
 80046c0:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <main+0x324>)
 80046c4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80046c8:	eef4 7a67 	vcmp.f32	s15, s15
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	d702      	bvc.n	80046d8 <main+0x2e0>
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <main+0x324>)
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <main+0x350>)
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 80046d8:	a30d      	add	r3, pc, #52	; (adr r3, 8004710 <main+0x318>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	481b      	ldr	r0, [pc, #108]	; (800474c <main+0x354>)
 80046e0:	f009 fdf8 	bl	800e2d4 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 80046e4:	481a      	ldr	r0, [pc, #104]	; (8004750 <main+0x358>)
 80046e6:	f7fe fb29 	bl	8002d3c <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80046ea:	f44f 7224 	mov.w	r2, #656	; 0x290
 80046ee:	2100      	movs	r1, #0
 80046f0:	4818      	ldr	r0, [pc, #96]	; (8004754 <main+0x35c>)
 80046f2:	f009 f97d 	bl	800d9f0 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <main+0x320>)
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4a17      	ldr	r2, [pc, #92]	; (8004758 <main+0x360>)
 80046fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  comm_encoder.e_zero = E_ZERO;
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <main+0x320>)
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <main+0x360>)
 8004706:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800470a:	e027      	b.n	800475c <main+0x364>
 800470c:	f3af 8000 	nop.w
 8004710:	c0000000 	.word	0xc0000000
 8004714:	4000cccc 	.word	0x4000cccc
 8004718:	20008f34 	.word	0x20008f34
 800471c:	20000684 	.word	0x20000684
 8004720:	447a0000 	.word	0x447a0000
 8004724:	42200000 	.word	0x42200000
 8004728:	42fa0000 	.word	0x42fa0000
 800472c:	41600000 	.word	0x41600000
 8004730:	40a00000 	.word	0x40a00000
 8004734:	41a80000 	.word	0x41a80000
 8004738:	43fa0000 	.word	0x43fa0000
 800473c:	41480000 	.word	0x41480000
 8004740:	c1480000 	.word	0xc1480000
 8004744:	42820000 	.word	0x42820000
 8004748:	c2820000 	.word	0xc2820000
 800474c:	08012a5c 	.word	0x08012a5c
 8004750:	20000784 	.word	0x20000784
 8004754:	20008ca4 	.word	0x20008ca4
 8004758:	200003e0 	.word	0x200003e0
  comm_encoder.ppairs = PPAIRS;
 800475c:	4b8a      	ldr	r3, [pc, #552]	; (8004988 <main+0x590>)
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	4a8a      	ldr	r2, [pc, #552]	; (800498c <main+0x594>)
 8004762:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004764:	2164      	movs	r1, #100	; 0x64
 8004766:	4889      	ldr	r0, [pc, #548]	; (800498c <main+0x594>)
 8004768:	f000 fb06 	bl	8004d78 <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 800476c:	4b87      	ldr	r3, [pc, #540]	; (800498c <main+0x594>)
 800476e:	4a88      	ldr	r2, [pc, #544]	; (8004990 <main+0x598>)
 8004770:	338c      	adds	r3, #140	; 0x8c
 8004772:	f102 0118 	add.w	r1, r2, #24
 8004776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477a:	4618      	mov	r0, r3
 800477c:	f009 f92a 	bl	800d9d4 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004780:	4884      	ldr	r0, [pc, #528]	; (8004994 <main+0x59c>)
 8004782:	f001 febd 	bl	8006500 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8004786:	4884      	ldr	r0, [pc, #528]	; (8004998 <main+0x5a0>)
 8004788:	f001 feba 	bl	8006500 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800478c:	4883      	ldr	r0, [pc, #524]	; (800499c <main+0x5a4>)
 800478e:	f001 feb7 	bl	8006500 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8004792:	2201      	movs	r2, #1
 8004794:	2110      	movs	r1, #16
 8004796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800479a:	f004 fa99 	bl	8008cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 800479e:	2201      	movs	r2, #1
 80047a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047a8:	f004 fa92 	bl	8008cd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80047ac:	2001      	movs	r0, #1
 80047ae:	f001 fa97 	bl	8005ce0 <HAL_Delay>
  //drv_calibrate(drv);


  HAL_Delay(1);
 80047b2:	2001      	movs	r0, #1
 80047b4:	f001 fa94 	bl	8005ce0 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 80047b8:	4b79      	ldr	r3, [pc, #484]	; (80049a0 <main+0x5a8>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	9206      	str	r2, [sp, #24]
 80047be:	2200      	movs	r2, #0
 80047c0:	9205      	str	r2, [sp, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	9204      	str	r2, [sp, #16]
 80047c6:	2200      	movs	r2, #0
 80047c8:	9203      	str	r2, [sp, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	9202      	str	r2, [sp, #8]
 80047ce:	2201      	movs	r2, #1
 80047d0:	9201      	str	r2, [sp, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	9200      	str	r2, [sp, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	2000      	movs	r0, #0
 80047da:	4610      	mov	r0, r2
 80047dc:	889b      	ldrh	r3, [r3, #4]
 80047de:	2100      	movs	r1, #0
 80047e0:	f363 010f 	bfi	r1, r3, #0, #16
 80047e4:	2300      	movs	r3, #0
 80047e6:	2200      	movs	r2, #0
 80047e8:	f7fd fa84 	bl	8001cf4 <drv_write_DCR>



  uint16_t val = 9;
 80047ec:	2309      	movs	r3, #9
 80047ee:	80fb      	strh	r3, [r7, #6]
  uint16_t mask = 0x07FF;
 80047f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80047f4:	80bb      	strh	r3, [r7, #4]
	  HAL_Delay(1);
	  //val++;
  }
  */

  HAL_Delay(1);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f001 fa72 	bl	8005ce0 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 80047fc:	4b68      	ldr	r3, [pc, #416]	; (80049a0 <main+0x5a8>)
 80047fe:	2203      	movs	r2, #3
 8004800:	9206      	str	r2, [sp, #24]
 8004802:	2201      	movs	r2, #1
 8004804:	9205      	str	r2, [sp, #20]
 8004806:	2201      	movs	r2, #1
 8004808:	9204      	str	r2, [sp, #16]
 800480a:	2201      	movs	r2, #1
 800480c:	9203      	str	r2, [sp, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	9202      	str	r2, [sp, #8]
 8004812:	2203      	movs	r2, #3
 8004814:	9201      	str	r2, [sp, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	9200      	str	r2, [sp, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2000      	movs	r0, #0
 800481e:	4610      	mov	r0, r2
 8004820:	889b      	ldrh	r3, [r3, #4]
 8004822:	2100      	movs	r1, #0
 8004824:	f363 010f 	bfi	r1, r3, #0, #16
 8004828:	2301      	movs	r3, #1
 800482a:	2200      	movs	r2, #0
 800482c:	f7fd faf4 	bl	8001e18 <drv_write_CSACR>
  HAL_Delay(1);
 8004830:	2001      	movs	r0, #1
 8004832:	f001 fa55 	bl	8005ce0 <HAL_Delay>
  zero_current(&controller);
 8004836:	485b      	ldr	r0, [pc, #364]	; (80049a4 <main+0x5ac>)
 8004838:	f7fe fa3c 	bl	8002cb4 <zero_current>
  HAL_Delay(1);
 800483c:	2001      	movs	r0, #1
 800483e:	f001 fa4f 	bl	8005ce0 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8004842:	4b57      	ldr	r3, [pc, #348]	; (80049a0 <main+0x5a8>)
 8004844:	2203      	movs	r2, #3
 8004846:	9206      	str	r2, [sp, #24]
 8004848:	2200      	movs	r2, #0
 800484a:	9205      	str	r2, [sp, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	9204      	str	r2, [sp, #16]
 8004850:	2200      	movs	r2, #0
 8004852:	9203      	str	r2, [sp, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	9202      	str	r2, [sp, #8]
 8004858:	2203      	movs	r2, #3
 800485a:	9201      	str	r2, [sp, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	9200      	str	r2, [sp, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2000      	movs	r0, #0
 8004864:	4610      	mov	r0, r2
 8004866:	889b      	ldrh	r3, [r3, #4]
 8004868:	2100      	movs	r1, #0
 800486a:	f363 010f 	bfi	r1, r3, #0, #16
 800486e:	2301      	movs	r3, #1
 8004870:	2200      	movs	r2, #0
 8004872:	f7fd fad1 	bl	8001e18 <drv_write_CSACR>
  HAL_Delay(1);
 8004876:	2001      	movs	r0, #1
 8004878:	f001 fa32 	bl	8005ce0 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_50);
 800487c:	4b48      	ldr	r3, [pc, #288]	; (80049a0 <main+0x5a8>)
 800487e:	220e      	movs	r2, #14
 8004880:	9202      	str	r2, [sp, #8]
 8004882:	2203      	movs	r2, #3
 8004884:	9201      	str	r2, [sp, #4]
 8004886:	2203      	movs	r2, #3
 8004888:	9200      	str	r2, [sp, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2000      	movs	r0, #0
 800488e:	4610      	mov	r0, r2
 8004890:	889b      	ldrh	r3, [r3, #4]
 8004892:	2100      	movs	r1, #0
 8004894:	f363 010f 	bfi	r1, r3, #0, #16
 8004898:	2300      	movs	r3, #0
 800489a:	2201      	movs	r2, #1
 800489c:	f7fd fa86 	bl	8001dac <drv_write_OCPCR>
  HAL_Delay(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f001 fa1d 	bl	8005ce0 <HAL_Delay>
  drv_disable_gd(drv);
 80048a6:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <main+0x5a8>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	2100      	movs	r1, #0
 80048ac:	4611      	mov	r1, r2
 80048ae:	889a      	ldrh	r2, [r3, #4]
 80048b0:	2300      	movs	r3, #0
 80048b2:	f362 030f 	bfi	r3, r2, #0, #16
 80048b6:	4608      	mov	r0, r1
 80048b8:	4619      	mov	r1, r3
 80048ba:	f7fd fb19 	bl	8001ef0 <drv_disable_gd>
  HAL_Delay(1);
 80048be:	2001      	movs	r0, #1
 80048c0:	f001 fa0e 	bl	8005ce0 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 80048c4:	4b37      	ldr	r3, [pc, #220]	; (80049a4 <main+0x5ac>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <main+0x5ac>)
 80048cc:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80048d0:	4619      	mov	r1, r3
 80048d2:	4835      	ldr	r0, [pc, #212]	; (80049a8 <main+0x5b0>)
 80048d4:	f009 fcfe 	bl	800e2d4 <iprintf>


  HAL_GPIO_WritePin(LED1, 1 );
 80048d8:	2201      	movs	r2, #1
 80048da:	2104      	movs	r1, #4
 80048dc:	4833      	ldr	r0, [pc, #204]	; (80049ac <main+0x5b4>)
 80048de:	f004 f9f7 	bl	8008cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 1 );
 80048e2:	2201      	movs	r2, #1
 80048e4:	2108      	movs	r1, #8
 80048e6:	4831      	ldr	r0, [pc, #196]	; (80049ac <main+0x5b4>)
 80048e8:	f004 f9f2 	bl	8008cd0 <HAL_GPIO_WritePin>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80048ec:	2100      	movs	r1, #0
 80048ee:	4830      	ldr	r0, [pc, #192]	; (80049b0 <main+0x5b8>)
 80048f0:	f005 ffea 	bl	800a8c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80048f4:	2104      	movs	r1, #4
 80048f6:	482e      	ldr	r0, [pc, #184]	; (80049b0 <main+0x5b8>)
 80048f8:	f005 ffe6 	bl	800a8c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80048fc:	2108      	movs	r1, #8
 80048fe:	482c      	ldr	r0, [pc, #176]	; (80049b0 <main+0x5b8>)
 8004900:	f005 ffe2 	bl	800a8c8 <HAL_TIM_PWM_Start>
  can_tx_init(&can_tx);
  HAL_CAN_Start(&CAN_H); start CAN
  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING);  Start can interrupt
	*/

  can_rx_init(&can_rx);
 8004904:	482b      	ldr	r0, [pc, #172]	; (80049b4 <main+0x5bc>)
 8004906:	f7fd fc99 	bl	800223c <can_rx_init>
  can_tx_init(&can_tx);
 800490a:	482b      	ldr	r0, [pc, #172]	; (80049b8 <main+0x5c0>)
 800490c:	f7fd fcc6 	bl	800229c <can_tx_init>


  HAL_FDCAN_Start(&CAN_H);
 8004910:	482a      	ldr	r0, [pc, #168]	; (80049bc <main+0x5c4>)
 8004912:	f003 f972 	bl	8007bfa <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8004916:	2200      	movs	r2, #0
 8004918:	2101      	movs	r1, #1
 800491a:	4828      	ldr	r0, [pc, #160]	; (80049bc <main+0x5c4>)
 800491c:	f003 fa70 	bl	8007e00 <HAL_FDCAN_ActivateNotification>
  //__HAL_FDCAN_ENABLE_IT(&CAN_H, FDCAN_IT_RX_FIFO0_NEW_MESSAGE); DOES NOT WORK!



  /* Set Interrupt Priorities */
  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004920:	2101      	movs	r1, #1
 8004922:	2019      	movs	r0, #25
 8004924:	f7ff fd3e 	bl	80043a4 <__NVIC_SetPriority>
  NVIC_SetPriority(CAN_ISR, 3);
 8004928:	2103      	movs	r1, #3
 800492a:	2056      	movs	r0, #86	; 0x56
 800492c:	f7ff fd3a 	bl	80043a4 <__NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004930:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <main+0x5c8>)
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8004936:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <main+0x5c8>)
 8004938:	2200      	movs	r2, #0
 800493a:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <main+0x5c8>)
 800493e:	2201      	movs	r2, #1
 8004940:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004942:	2201      	movs	r2, #1
 8004944:	491f      	ldr	r1, [pc, #124]	; (80049c4 <main+0x5cc>)
 8004946:	4820      	ldr	r0, [pc, #128]	; (80049c8 <main+0x5d0>)
 8004948:	f007 fc22 	bl	800c190 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800494c:	4818      	ldr	r0, [pc, #96]	; (80049b0 <main+0x5b8>)
 800494e:	f005 fe81 	bl	800a654 <HAL_TIM_Base_Start_IT>


  HAL_GPIO_WritePin(LED1, 0 );
 8004952:	2200      	movs	r2, #0
 8004954:	2104      	movs	r1, #4
 8004956:	4815      	ldr	r0, [pc, #84]	; (80049ac <main+0x5b4>)
 8004958:	f004 f9ba 	bl	8008cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2, 0 );
 800495c:	2200      	movs	r2, #0
 800495e:	2108      	movs	r1, #8
 8004960:	4812      	ldr	r0, [pc, #72]	; (80049ac <main+0x5b4>)
 8004962:	f004 f9b5 	bl	8008cd0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(150);
 8004966:	2096      	movs	r0, #150	; 0x96
 8004968:	f001 f9ba 	bl	8005ce0 <HAL_Delay>
	  drv_print_faults(drv);
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <main+0x5a8>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	2100      	movs	r1, #0
 8004972:	4611      	mov	r1, r2
 8004974:	889a      	ldrh	r2, [r3, #4]
 8004976:	2300      	movs	r3, #0
 8004978:	f362 030f 	bfi	r3, r2, #0, #16
 800497c:	4608      	mov	r0, r1
 800497e:	4619      	mov	r1, r3
 8004980:	f7fd fad8 	bl	8001f34 <drv_print_faults>
	  HAL_Delay(150);
 8004984:	e7ef      	b.n	8004966 <main+0x56e>
 8004986:	bf00      	nop
 8004988:	20000684 	.word	0x20000684
 800498c:	200003e0 	.word	0x200003e0
 8004990:	20008f34 	.word	0x20008f34
 8004994:	200002a0 	.word	0x200002a0
 8004998:	20000234 	.word	0x20000234
 800499c:	2000030c 	.word	0x2000030c
 80049a0:	20009360 	.word	0x20009360
 80049a4:	20000784 	.word	0x20000784
 80049a8:	08012a80 	.word	0x08012a80
 80049ac:	48000800 	.word	0x48000800
 80049b0:	200094a8 	.word	0x200094a8
 80049b4:	20009368 	.word	0x20009368
 80049b8:	20009334 	.word	0x20009334
 80049bc:	20000378 	.word	0x20000378
 80049c0:	20000674 	.word	0x20000674
 80049c4:	20000670 	.word	0x20000670
 80049c8:	200094f4 	.word	0x200094f4

080049cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b0a8      	sub	sp, #160	; 0xa0
 80049d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80049d6:	2238      	movs	r2, #56	; 0x38
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f009 f808 	bl	800d9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049f0:	463b      	mov	r3, r7
 80049f2:	2254      	movs	r2, #84	; 0x54
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f008 fffa 	bl	800d9f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a00:	f004 f97e 	bl	8008d00 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a04:	2302      	movs	r3, #2
 8004a06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a0c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a0e:	2340      	movs	r3, #64	; 0x40
 8004a10:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f004 fa23 	bl	8008e68 <HAL_RCC_OscConfig>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8004a28:	f000 f832 	bl	8004a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a2c:	230f      	movs	r3, #15
 8004a2e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004a30:	2301      	movs	r3, #1
 8004a32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a34:	2300      	movs	r3, #0
 8004a36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004a40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 fd26 	bl	8009498 <HAL_RCC_ClockConfig>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004a52:	f000 f81d 	bl	8004a90 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <SystemClock_Config+0xc0>)
 8004a58:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a64:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004a68:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004a6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a70:	463b      	mov	r3, r7
 8004a72:	4618      	mov	r0, r3
 8004a74:	f004 ff2c 	bl	80098d0 <HAL_RCCEx_PeriphCLKConfig>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004a7e:	f000 f807 	bl	8004a90 <Error_Handler>
  }
}
 8004a82:	bf00      	nop
 8004a84:	37a0      	adds	r7, #160	; 0xa0
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	00019002 	.word	0x00019002

08004a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	ed87 0a01 	vstr	s0, [r7, #4]
 8004aa8:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004aac:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ab0:	edd7 7a00 	vldr	s15, [r7]
 8004ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004abc:	dd01      	ble.n	8004ac2 <fast_fmaxf+0x24>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	e000      	b.n	8004ac4 <fast_fmaxf+0x26>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	ee07 3a90 	vmov	s15, r3
    }
 8004ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <fast_fminf>:

float fast_fminf(float x, float y){
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ae0:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 8004ae4:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ae8:	edd7 7a00 	vldr	s15, [r7]
 8004aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af4:	d501      	bpl.n	8004afa <fast_fminf+0x24>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	e000      	b.n	8004afc <fast_fminf+0x26>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	ee07 3a90 	vmov	s15, r3
    }
 8004b00:	eeb0 0a67 	vmov.f32	s0, s15
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b18:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b1c:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004b20:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b24:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	dd0c      	ble.n	8004b4c <fmaxf3+0x3e>
 8004b32:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b36:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	dd01      	ble.n	8004b48 <fmaxf3+0x3a>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	e00d      	b.n	8004b64 <fmaxf3+0x56>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	e00b      	b.n	8004b64 <fmaxf3+0x56>
 8004b4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	dd01      	ble.n	8004b62 <fmaxf3+0x54>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	e000      	b.n	8004b64 <fmaxf3+0x56>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	ee07 3a90 	vmov	s15, r3
    }
 8004b68:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <fminf3>:

float fminf3(float x, float y, float z){
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b80:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b84:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004b88:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d50c      	bpl.n	8004bb4 <fminf3+0x3e>
 8004b9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004baa:	d501      	bpl.n	8004bb0 <fminf3+0x3a>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	e00d      	b.n	8004bcc <fminf3+0x56>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	e00b      	b.n	8004bcc <fminf3+0x56>
 8004bb4:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	d501      	bpl.n	8004bca <fminf3+0x54>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	e000      	b.n	8004bcc <fminf3+0x56>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	ee07 3a90 	vmov	s15, r3
    }
 8004bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	ed93 7a00 	vldr	s14, [r3]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	edd3 7a00 	vldr	s15, [r3]
 8004bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	edd3 6a00 	vldr	s13, [r3]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c10:	eeb0 0a67 	vmov.f32	s0, s15
 8004c14:	f00d f8de 	bl	8011dd4 <sqrtf>
 8004c18:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004c1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2c:	dc00      	bgt.n	8004c30 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004c2e:	e01b      	b.n	8004c68 <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	ed93 7a00 	vldr	s14, [r3]
 8004c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c3a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	ed93 7a00 	vldr	s14, [r3]
 8004c52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c56:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004c5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	edc3 7a00 	vstr	s15, [r3]
    }
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <uint_to_float>:
    float offset = x_min;
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
    }
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c7c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004c82:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c8e:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ca4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004ca8:	2201      	movs	r2, #1
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <sin_lut>:

float sin_lut(float theta){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004cde:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004d3c <sin_lut+0x68>
 8004ce2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ce6:	f00d f849 	bl	8011d7c <fmodf>
 8004cea:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfa:	d506      	bpl.n	8004d0a <sin_lut+0x36>
 8004cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d00:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004d3c <sin_lut+0x68>
 8004d04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d08:	e001      	b.n	8004d0e <sin_lut+0x3a>
 8004d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d0e:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d16:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004d40 <sin_lut+0x6c>
 8004d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d22:	ee17 3a90 	vmov	r3, s15
 8004d26:	4a07      	ldr	r2, [pc, #28]	; (8004d44 <sin_lut+0x70>)
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	ee07 3a90 	vmov	s15, r3
}
 8004d32:	eeb0 0a67 	vmov.f32	s0, s15
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40c90fdb 	.word	0x40c90fdb
 8004d40:	42a2f983 	.word	0x42a2f983
 8004d44:	08012b30 	.word	0x08012b30

08004d48 <cos_lut>:

float cos_lut(float theta){
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004d52:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004d74 <cos_lut+0x2c>
 8004d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d62:	f7ff ffb7 	bl	8004cd4 <sin_lut>
 8004d66:	eef0 7a40 	vmov.f32	s15, s0
}
 8004d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	3fc90fdb 	.word	0x3fc90fdb

08004d78 <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e023      	b.n	8004dd0 <ps_warmup+0x58>
		encoder->spi_tx_word = 0x0000;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d98:	f003 ff9a 	bl	8008cd0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	2364      	movs	r3, #100	; 0x64
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2301      	movs	r3, #1
 8004da8:	480e      	ldr	r0, [pc, #56]	; (8004de4 <ps_warmup+0x6c>)
 8004daa:	f005 f888 	bl	8009ebe <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004dae:	bf00      	nop
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <ps_warmup+0x6c>)
 8004db2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d0f9      	beq.n	8004db0 <ps_warmup+0x38>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dc6:	f003 ff83 	bl	8008cd0 <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	dbd7      	blt.n	8004d88 <ps_warmup+0x10>
	}
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	200093e0 	.word	0x200093e0

08004de8 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004dfc:	2313      	movs	r3, #19
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	e011      	b.n	8004e26 <ps_sample+0x3e>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	3302      	adds	r3, #2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3304      	adds	r3, #4
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	3302      	adds	r3, #2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dcea      	bgt.n	8004e02 <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004e32:	2200      	movs	r2, #0
 8004e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e3c:	f003 ff48 	bl	8008cd0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 2, 100);
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	2364      	movs	r3, #100	; 0x64
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	4899      	ldr	r0, [pc, #612]	; (80050b4 <ps_sample+0x2cc>)
 8004e4e:	f005 f836 	bl	8009ebe <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004e52:	bf00      	nop
 8004e54:	4b97      	ldr	r3, [pc, #604]	; (80050b4 <ps_sample+0x2cc>)
 8004e56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d0f9      	beq.n	8004e54 <ps_sample+0x6c>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 8004e60:	2201      	movs	r2, #1
 8004e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e6a:	f003 ff31 	bl	8008cd0 <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	885b      	ldrh	r3, [r3, #2]
 8004e72:	461a      	mov	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	675a      	str	r2, [r3, #116]	; 0x74


	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	125b      	asrs	r3, r3, #9
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	3322      	adds	r3, #34	; 0x22
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8e:	125b      	asrs	r3, r3, #9
 8004e90:	3301      	adds	r3, #1
 8004e92:	425a      	negs	r2, r3
 8004e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e9c:	bf58      	it	pl
 8004e9e:	4253      	negpl	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	3322      	adds	r3, #34	; 0x22
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	125b      	asrs	r3, r3, #9
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw + off_interp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	441a      	add	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count-M_ZERO))/((float)ENC_CPR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004ed6:	4b78      	ldr	r3, [pc, #480]	; (80050b8 <ps_sample+0x2d0>)
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ee4:	eddf 6a75 	vldr	s13, [pc, #468]	; 80050bc <ps_sample+0x2d4>
 8004ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004efc:	ee17 3a90 	vmov	r3, s15
 8004f00:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f16:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80050c0 <ps_sample+0x2d8>
 8004f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	d507      	bpl.n	8004f44 <ps_sample+0x15c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f3a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80050c0 <ps_sample+0x2d8>
 8004f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f42:	e002      	b.n	8004f4a <ps_sample+0x162>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004f5a:	4b57      	ldr	r3, [pc, #348]	; (80050b8 <ps_sample+0x2d0>)
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f6c:	eddf 6a53 	vldr	s13, [pc, #332]	; 80050bc <ps_sample+0x2d4>
 8004f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f84:	ee17 3a90 	vmov	r3, s15
 8004f88:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f9e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80050c0 <ps_sample+0x2d8>
 8004fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fba:	d507      	bpl.n	8004fcc <ps_sample+0x1e4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fc2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80050c0 <ps_sample+0x2d8>
 8004fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fca:	e002      	b.n	8004fd2 <ps_sample+0x1ea>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fe8:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){encoder->turns--;}
 8004fec:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ff0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80050c4 <ps_sample+0x2dc>
 8004ff4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffc:	dd07      	ble.n	800500e <ps_sample+0x226>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800500c:	e00f      	b.n	800502e <ps_sample+0x246>
	else if(angle_diff < -PI_F){encoder->turns++;}
 800500e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005012:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80050c8 <ps_sample+0x2e0>
 8005016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501e:	d506      	bpl.n	800502e <ps_sample+0x246>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d107      	bne.n	8005048 <ps_sample+0x260>
		encoder->turns = 0;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
	}



	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	ed93 7a01 	vldr	s14, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005054:	ee07 3a90 	vmov	s15, r3
 8005058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800505c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80050c0 <ps_sample+0x2d8>
 8005060:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	ed93 7a03 	vldr	s14, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800507a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800507e:	edd7 7a00 	vldr	s15, [r7]
 8005082:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005086:	ee27 7a87 	vmul.f32	s14, s15, s14
 800508a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80050a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

}
 80050aa:	bf00      	nop
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200093e0 	.word	0x200093e0
 80050b8:	20008f34 	.word	0x20008f34
 80050bc:	47800000 	.word	0x47800000
 80050c0:	40c90fdb 	.word	0x40c90fdb
 80050c4:	40490fdb 	.word	0x40490fdb
 80050c8:	c0490fdb 	.word	0xc0490fdb

080050cc <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050da:	4619      	mov	r1, r3
 80050dc:	4818      	ldr	r0, [pc, #96]	; (8005140 <ps_print+0x74>)
 80050de:	f009 f8f9 	bl	800e2d4 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e6:	4619      	mov	r1, r3
 80050e8:	4816      	ldr	r0, [pc, #88]	; (8005144 <ps_print+0x78>)
 80050ea:	f009 f8f3 	bl	800e2d4 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fa50 	bl	8000598 <__aeabi_f2d>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4812      	ldr	r0, [pc, #72]	; (8005148 <ps_print+0x7c>)
 80050fe:	f009 f8e9 	bl	800e2d4 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fb fa46 	bl	8000598 <__aeabi_f2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	480e      	ldr	r0, [pc, #56]	; (800514c <ps_print+0x80>)
 8005112:	f009 f8df 	bl	800e2d4 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511a:	4618      	mov	r0, r3
 800511c:	f7fb fa3c 	bl	8000598 <__aeabi_f2d>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	480a      	ldr	r0, [pc, #40]	; (8005150 <ps_print+0x84>)
 8005126:	f009 f8d5 	bl	800e2d4 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005130:	4619      	mov	r1, r3
 8005132:	4808      	ldr	r0, [pc, #32]	; (8005154 <ps_print+0x88>)
 8005134:	f009 f8ce 	bl	800e2d4 <iprintf>
	//HAL_Delay(dt_ms);
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	08012aa8 	.word	0x08012aa8
 8005144:	08012ab0 	.word	0x08012ab0
 8005148:	08012ac8 	.word	0x08012ac8
 800514c:	08012adc 	.word	0x08012adc
 8005150:	08012af0 	.word	0x08012af0
 8005154:	08012b04 	.word	0x08012b04

08005158 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <MX_SPI1_Init+0x74>)
 800515e:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <MX_SPI1_Init+0x78>)
 8005160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <MX_SPI1_Init+0x74>)
 8005164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800516a:	4b18      	ldr	r3, [pc, #96]	; (80051cc <MX_SPI1_Init+0x74>)
 800516c:	2200      	movs	r2, #0
 800516e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8005170:	4b16      	ldr	r3, [pc, #88]	; (80051cc <MX_SPI1_Init+0x74>)
 8005172:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8005176:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <MX_SPI1_Init+0x74>)
 800517a:	2200      	movs	r2, #0
 800517c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <MX_SPI1_Init+0x74>)
 8005180:	2201      	movs	r2, #1
 8005182:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <MX_SPI1_Init+0x74>)
 8005186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <MX_SPI1_Init+0x74>)
 800518e:	2220      	movs	r2, #32
 8005190:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <MX_SPI1_Init+0x74>)
 8005194:	2200      	movs	r2, #0
 8005196:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <MX_SPI1_Init+0x74>)
 800519a:	2200      	movs	r2, #0
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800519e:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <MX_SPI1_Init+0x74>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <MX_SPI1_Init+0x74>)
 80051a6:	2207      	movs	r2, #7
 80051a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <MX_SPI1_Init+0x74>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <MX_SPI1_Init+0x74>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80051b6:	4805      	ldr	r0, [pc, #20]	; (80051cc <MX_SPI1_Init+0x74>)
 80051b8:	f004 fdd6 	bl	8009d68 <HAL_SPI_Init>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80051c2:	f7ff fc65 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20009444 	.word	0x20009444
 80051d0:	40013000 	.word	0x40013000

080051d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <MX_SPI3_Init+0x74>)
 80051da:	4a1c      	ldr	r2, [pc, #112]	; (800524c <MX_SPI3_Init+0x78>)
 80051dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80051de:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <MX_SPI3_Init+0x74>)
 80051e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <MX_SPI3_Init+0x74>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <MX_SPI3_Init+0x74>)
 80051ee:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80051f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051f4:	4b14      	ldr	r3, [pc, #80]	; (8005248 <MX_SPI3_Init+0x74>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051fa:	4b13      	ldr	r3, [pc, #76]	; (8005248 <MX_SPI3_Init+0x74>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <MX_SPI3_Init+0x74>)
 8005202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005206:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <MX_SPI3_Init+0x74>)
 800520a:	2200      	movs	r2, #0
 800520c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <MX_SPI3_Init+0x74>)
 8005210:	2200      	movs	r2, #0
 8005212:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <MX_SPI3_Init+0x74>)
 8005216:	2200      	movs	r2, #0
 8005218:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <MX_SPI3_Init+0x74>)
 800521c:	2200      	movs	r2, #0
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <MX_SPI3_Init+0x74>)
 8005222:	2207      	movs	r2, #7
 8005224:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <MX_SPI3_Init+0x74>)
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <MX_SPI3_Init+0x74>)
 800522e:	2208      	movs	r2, #8
 8005230:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005232:	4805      	ldr	r0, [pc, #20]	; (8005248 <MX_SPI3_Init+0x74>)
 8005234:	f004 fd98 	bl	8009d68 <HAL_SPI_Init>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800523e:	f7ff fc27 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200093e0 	.word	0x200093e0
 800524c:	40003c00 	.word	0x40003c00

08005250 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	; 0x30
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	f107 031c 	add.w	r3, r7, #28
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2f      	ldr	r2, [pc, #188]	; (800532c <HAL_SPI_MspInit+0xdc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d129      	bne.n	80052c6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005272:	4b2f      	ldr	r3, [pc, #188]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 8005274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005276:	4a2e      	ldr	r2, [pc, #184]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 8005278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800527c:	6613      	str	r3, [r2, #96]	; 0x60
 800527e:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800528a:	4b29      	ldr	r3, [pc, #164]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	4a28      	ldr	r2, [pc, #160]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005296:	4b26      	ldr	r3, [pc, #152]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 8005298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80052a2:	23e0      	movs	r3, #224	; 0xe0
 80052a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a6:	2302      	movs	r3, #2
 80052a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ae:	2300      	movs	r3, #0
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052b2:	2305      	movs	r3, #5
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b6:	f107 031c 	add.w	r3, r7, #28
 80052ba:	4619      	mov	r1, r3
 80052bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c0:	f003 fb84 	bl	80089cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80052c4:	e02d      	b.n	8005322 <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI3)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <HAL_SPI_MspInit+0xe4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d128      	bne.n	8005322 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80052d0:	4b17      	ldr	r3, [pc, #92]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 80052d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052da:	6593      	str	r3, [r2, #88]	; 0x58
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	4a10      	ldr	r2, [pc, #64]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 80052ee:	f043 0304 	orr.w	r3, r3, #4
 80052f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005300:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005306:	2302      	movs	r3, #2
 8005308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530a:	2300      	movs	r3, #0
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530e:	2300      	movs	r3, #0
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005312:	2306      	movs	r3, #6
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005316:	f107 031c 	add.w	r3, r7, #28
 800531a:	4619      	mov	r1, r3
 800531c:	4806      	ldr	r0, [pc, #24]	; (8005338 <HAL_SPI_MspInit+0xe8>)
 800531e:	f003 fb55 	bl	80089cc <HAL_GPIO_Init>
}
 8005322:	bf00      	nop
 8005324:	3730      	adds	r7, #48	; 0x30
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40013000 	.word	0x40013000
 8005330:	40021000 	.word	0x40021000
 8005334:	40003c00 	.word	0x40003c00
 8005338:	48000800 	.word	0x48000800

0800533c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_MspInit+0x44>)
 8005344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005346:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <HAL_MspInit+0x44>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6613      	str	r3, [r2, #96]	; 0x60
 800534e:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <HAL_MspInit+0x44>)
 8005350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_MspInit+0x44>)
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	4a08      	ldr	r2, [pc, #32]	; (8005380 <HAL_MspInit+0x44>)
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005364:	6593      	str	r3, [r2, #88]	; 0x58
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_MspInit+0x44>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005372:	f003 fd69 	bl	8008e48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40021000 	.word	0x40021000

08005384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005388:	e7fe      	b.n	8005388 <NMI_Handler+0x4>

0800538a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800538a:	b480      	push	{r7}
 800538c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800538e:	e7fe      	b.n	800538e <HardFault_Handler+0x4>

08005390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005394:	e7fe      	b.n	8005394 <MemManage_Handler+0x4>

08005396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800539a:	e7fe      	b.n	800539a <BusFault_Handler+0x4>

0800539c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053a0:	e7fe      	b.n	80053a0 <UsageFault_Handler+0x4>

080053a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053be:	b480      	push	{r7}
 80053c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053d0:	f000 fc68 	bl	8005ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  analog_sample(&controller);
 80053dc:	480b      	ldr	r0, [pc, #44]	; (800540c <TIM1_UP_TIM16_IRQHandler+0x34>)
 80053de:	f7fd fa1d 	bl	800281c <analog_sample>

  /* Sample position sensor */
  ps_sample(&comm_encoder, DT);
 80053e2:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8005410 <TIM1_UP_TIM16_IRQHandler+0x38>
 80053e6:	480b      	ldr	r0, [pc, #44]	; (8005414 <TIM1_UP_TIM16_IRQHandler+0x3c>)
 80053e8:	f7ff fcfe 	bl	8004de8 <ps_sample>

  /* Run Finite State Machine */
  run_fsm(&state);
 80053ec:	480a      	ldr	r0, [pc, #40]	; (8005418 <TIM1_UP_TIM16_IRQHandler+0x40>)
 80053ee:	f7fe f8b3 	bl	8003558 <run_fsm>

  /* increment loop count */
  controller.loop_count++;
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <TIM1_UP_TIM16_IRQHandler+0x34>)
 80053f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053f8:	3301      	adds	r3, #1
 80053fa:	4a04      	ldr	r2, [pc, #16]	; (800540c <TIM1_UP_TIM16_IRQHandler+0x34>)
 80053fc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  //HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005400:	4806      	ldr	r0, [pc, #24]	; (800541c <TIM1_UP_TIM16_IRQHandler+0x44>)
 8005402:	f005 fb73 	bl	800aaec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005406:	bf00      	nop
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000784 	.word	0x20000784
 8005410:	37d1b717 	.word	0x37d1b717
 8005414:	200003e0 	.word	0x200003e0
 8005418:	20000674 	.word	0x20000674
 800541c:	200094a8 	.word	0x200094a8

08005420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005426:	4807      	ldr	r0, [pc, #28]	; (8005444 <USART2_IRQHandler+0x24>)
 8005428:	f006 fef8 	bl	800c21c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  char c = Serial2RxBuffer[0];
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <USART2_IRQHandler+0x28>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	4619      	mov	r1, r3
 8005436:	4805      	ldr	r0, [pc, #20]	; (800544c <USART2_IRQHandler+0x2c>)
 8005438:	f7fe fa38 	bl	80038ac <update_fsm>
  /* USER CODE END USART2_IRQn 1 */
}
 800543c:	bf00      	nop
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200094f4 	.word	0x200094f4
 8005448:	20000670 	.word	0x20000670
 800544c:	20000674 	.word	0x20000674

08005450 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005452:	b091      	sub	sp, #68	; 0x44
 8005454:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005456:	486c      	ldr	r0, [pc, #432]	; (8005608 <FDCAN2_IT0_IRQHandler+0x1b8>)
 8005458:	f002 fdb8 	bl	8007fcc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */
  HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800545c:	4b6b      	ldr	r3, [pc, #428]	; (800560c <FDCAN2_IT0_IRQHandler+0x1bc>)
 800545e:	4a6c      	ldr	r2, [pc, #432]	; (8005610 <FDCAN2_IT0_IRQHandler+0x1c0>)
 8005460:	2140      	movs	r1, #64	; 0x40
 8005462:	4869      	ldr	r0, [pc, #420]	; (8005608 <FDCAN2_IT0_IRQHandler+0x1b8>)
 8005464:	f002 fbf2 	bl	8007c4c <HAL_FDCAN_GetRxMessage>
  printf("stm32g4xx_it msg gotten!\n\r");
 8005468:	486a      	ldr	r0, [pc, #424]	; (8005614 <FDCAN2_IT0_IRQHandler+0x1c4>)
 800546a:	f008 ff33 	bl	800e2d4 <iprintf>
  //HAL_FDCAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response - from Ben's fw
  //TODO send again
  //HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data); //replacement for above line

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 800546e:	4b6a      	ldr	r3, [pc, #424]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005470:	785a      	ldrb	r2, [r3, #1]
 8005472:	4b69      	ldr	r3, [pc, #420]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005474:	789b      	ldrb	r3, [r3, #2]
 8005476:	4013      	ands	r3, r2
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b67      	ldr	r3, [pc, #412]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	4013      	ands	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4b65      	ldr	r3, [pc, #404]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005484:	791b      	ldrb	r3, [r3, #4]
 8005486:	4013      	ands	r3, r2
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4b63      	ldr	r3, [pc, #396]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 800548c:	795b      	ldrb	r3, [r3, #5]
 800548e:	4013      	ands	r3, r2
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4b61      	ldr	r3, [pc, #388]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005494:	799b      	ldrb	r3, [r3, #6]
 8005496:	4013      	ands	r3, r2
 8005498:	b2da      	uxtb	r2, r3
 800549a:	4b5f      	ldr	r3, [pc, #380]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 800549c:	79db      	ldrb	r3, [r3, #7]
 800549e:	4013      	ands	r3, r2
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2bff      	cmp	r3, #255	; 0xff
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	4b5a      	ldr	r3, [pc, #360]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80054ae:	7a1b      	ldrb	r3, [r3, #8]
 80054b0:	2bfc      	cmp	r3, #252	; 0xfc
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	4013      	ands	r3, r2
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <FDCAN2_IT0_IRQHandler+0x7c>
	  update_fsm(&state, MOTOR_CMD);
 80054c2:	216d      	movs	r1, #109	; 0x6d
 80054c4:	4855      	ldr	r0, [pc, #340]	; (800561c <FDCAN2_IT0_IRQHandler+0x1cc>)
 80054c6:	f7fe f9f1 	bl	80038ac <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
  	  controller.timeout = 0;					// Reset timeout counter
      }

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80054ca:	e099      	b.n	8005600 <FDCAN2_IT0_IRQHandler+0x1b0>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80054cc:	4b52      	ldr	r3, [pc, #328]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80054ce:	785a      	ldrb	r2, [r3, #1]
 80054d0:	4b51      	ldr	r3, [pc, #324]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80054d2:	789b      	ldrb	r3, [r3, #2]
 80054d4:	4013      	ands	r3, r2
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	4b4f      	ldr	r3, [pc, #316]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80054da:	78db      	ldrb	r3, [r3, #3]
 80054dc:	4013      	ands	r3, r2
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2bff      	cmp	r3, #255	; 0xff
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	4b4a      	ldr	r3, [pc, #296]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80054ee:	791b      	ldrb	r3, [r3, #4]
 80054f0:	2bff      	cmp	r3, #255	; 0xff
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	4619      	mov	r1, r3
 80054fc:	4b46      	ldr	r3, [pc, #280]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80054fe:	795b      	ldrb	r3, [r3, #5]
 8005500:	2bff      	cmp	r3, #255	; 0xff
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	fb03 f301 	mul.w	r3, r3, r1
 800550e:	4013      	ands	r3, r2
 8005510:	4a41      	ldr	r2, [pc, #260]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005512:	7992      	ldrb	r2, [r2, #6]
 8005514:	2aff      	cmp	r2, #255	; 0xff
 8005516:	bf0c      	ite	eq
 8005518:	2201      	moveq	r2, #1
 800551a:	2200      	movne	r2, #0
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	4013      	ands	r3, r2
 8005520:	4a3d      	ldr	r2, [pc, #244]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005522:	79d2      	ldrb	r2, [r2, #7]
 8005524:	2aff      	cmp	r2, #255	; 0xff
 8005526:	bf0c      	ite	eq
 8005528:	2201      	moveq	r2, #1
 800552a:	2200      	movne	r2, #0
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	4013      	ands	r3, r2
 8005530:	4a39      	ldr	r2, [pc, #228]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005532:	7a12      	ldrb	r2, [r2, #8]
 8005534:	2afd      	cmp	r2, #253	; 0xfd
 8005536:	bf0c      	ite	eq
 8005538:	2201      	moveq	r2, #1
 800553a:	2200      	movne	r2, #0
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <FDCAN2_IT0_IRQHandler+0xfe>
	  update_fsm(&state, MENU_CMD);
 8005544:	211b      	movs	r1, #27
 8005546:	4835      	ldr	r0, [pc, #212]	; (800561c <FDCAN2_IT0_IRQHandler+0x1cc>)
 8005548:	f7fe f9b0 	bl	80038ac <update_fsm>
}
 800554c:	e058      	b.n	8005600 <FDCAN2_IT0_IRQHandler+0x1b0>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 800554e:	4b32      	ldr	r3, [pc, #200]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005550:	785a      	ldrb	r2, [r3, #1]
 8005552:	4b31      	ldr	r3, [pc, #196]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005554:	789b      	ldrb	r3, [r3, #2]
 8005556:	4013      	ands	r3, r2
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 800555c:	78db      	ldrb	r3, [r3, #3]
 800555e:	4013      	ands	r3, r2
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2bff      	cmp	r3, #255	; 0xff
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	4b2a      	ldr	r3, [pc, #168]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005570:	791b      	ldrb	r3, [r3, #4]
 8005572:	2bff      	cmp	r3, #255	; 0xff
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	4619      	mov	r1, r3
 800557e:	4b26      	ldr	r3, [pc, #152]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005580:	795b      	ldrb	r3, [r3, #5]
 8005582:	2bff      	cmp	r3, #255	; 0xff
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	fb03 f301 	mul.w	r3, r3, r1
 8005590:	4013      	ands	r3, r2
 8005592:	4a21      	ldr	r2, [pc, #132]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 8005594:	7992      	ldrb	r2, [r2, #6]
 8005596:	2aff      	cmp	r2, #255	; 0xff
 8005598:	bf0c      	ite	eq
 800559a:	2201      	moveq	r2, #1
 800559c:	2200      	movne	r2, #0
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	4013      	ands	r3, r2
 80055a2:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80055a4:	79d2      	ldrb	r2, [r2, #7]
 80055a6:	2aff      	cmp	r2, #255	; 0xff
 80055a8:	bf0c      	ite	eq
 80055aa:	2201      	moveq	r2, #1
 80055ac:	2200      	movne	r2, #0
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	4013      	ands	r3, r2
 80055b2:	4a19      	ldr	r2, [pc, #100]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80055b4:	7a12      	ldrb	r2, [r2, #8]
 80055b6:	2afe      	cmp	r2, #254	; 0xfe
 80055b8:	bf0c      	ite	eq
 80055ba:	2201      	moveq	r2, #1
 80055bc:	2200      	movne	r2, #0
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <FDCAN2_IT0_IRQHandler+0x180>
	  update_fsm(&state, ZERO_CMD);
 80055c6:	217a      	movs	r1, #122	; 0x7a
 80055c8:	4814      	ldr	r0, [pc, #80]	; (800561c <FDCAN2_IT0_IRQHandler+0x1cc>)
 80055ca:	f7fe f96f 	bl	80038ac <update_fsm>
}
 80055ce:	e017      	b.n	8005600 <FDCAN2_IT0_IRQHandler+0x1b0>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80055d0:	4e11      	ldr	r6, [pc, #68]	; (8005618 <FDCAN2_IT0_IRQHandler+0x1c8>)
 80055d2:	4b13      	ldr	r3, [pc, #76]	; (8005620 <FDCAN2_IT0_IRQHandler+0x1d0>)
 80055d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055d6:	466d      	mov	r5, sp
 80055d8:	f106 0410 	add.w	r4, r6, #16
 80055dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80055ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80055f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80055f4:	f7fc fe7e 	bl	80022f4 <unpack_cmd>
  	  controller.timeout = 0;					// Reset timeout counter
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <FDCAN2_IT0_IRQHandler+0x1d4>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005600:	bf00      	nop
 8005602:	3704      	adds	r7, #4
 8005604:	46bd      	mov	sp, r7
 8005606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005608:	20000378 	.word	0x20000378
 800560c:	20009369 	.word	0x20009369
 8005610:	20009374 	.word	0x20009374
 8005614:	08012b14 	.word	0x08012b14
 8005618:	20009368 	.word	0x20009368
 800561c:	20000674 	.word	0x20000674
 8005620:	2000084c 	.word	0x2000084c
 8005624:	20000784 	.word	0x20000784

08005628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	return 1;
 800562c:	2301      	movs	r3, #1
}
 800562e:	4618      	mov	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <_kill>:

int _kill(int pid, int sig)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005642:	f008 f99d 	bl	800d980 <__errno>
 8005646:	4603      	mov	r3, r0
 8005648:	2216      	movs	r2, #22
 800564a:	601a      	str	r2, [r3, #0]
	return -1;
 800564c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_exit>:

void _exit (int status)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005660:	f04f 31ff 	mov.w	r1, #4294967295
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff ffe7 	bl	8005638 <_kill>
	while (1) {}		/* Make sure we hang here */
 800566a:	e7fe      	b.n	800566a <_exit+0x12>

0800566c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e00a      	b.n	8005694 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800567e:	f3af 8000 	nop.w
 8005682:	4601      	mov	r1, r0
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	60ba      	str	r2, [r7, #8]
 800568a:	b2ca      	uxtb	r2, r1
 800568c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	3301      	adds	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	dbf0      	blt.n	800567e <_read+0x12>
	}

return len;
 800569c:	687b      	ldr	r3, [r7, #4]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e009      	b.n	80056cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	60ba      	str	r2, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fa4f 	bl	8005b64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3301      	adds	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	dbf1      	blt.n	80056b8 <_write+0x12>
	}
	return len;
 80056d4:	687b      	ldr	r3, [r7, #4]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_close>:

int _close(int file)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
	return -1;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005706:	605a      	str	r2, [r3, #4]
	return 0;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <_isatty>:

int _isatty(int file)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
	return 1;
 800571e:	2301      	movs	r3, #1
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
	return 0;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005750:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <_sbrk+0x5c>)
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <_sbrk+0x60>)
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800575c:	4b13      	ldr	r3, [pc, #76]	; (80057ac <_sbrk+0x64>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005764:	4b11      	ldr	r3, [pc, #68]	; (80057ac <_sbrk+0x64>)
 8005766:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <_sbrk+0x68>)
 8005768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800576a:	4b10      	ldr	r3, [pc, #64]	; (80057ac <_sbrk+0x64>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d207      	bcs.n	8005788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005778:	f008 f902 	bl	800d980 <__errno>
 800577c:	4603      	mov	r3, r0
 800577e:	220c      	movs	r2, #12
 8005780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005782:	f04f 33ff 	mov.w	r3, #4294967295
 8005786:	e009      	b.n	800579c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <_sbrk+0x64>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800578e:	4b07      	ldr	r3, [pc, #28]	; (80057ac <_sbrk+0x64>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4413      	add	r3, r2
 8005796:	4a05      	ldr	r2, [pc, #20]	; (80057ac <_sbrk+0x64>)
 8005798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20020000 	.word	0x20020000
 80057a8:	00000400 	.word	0x00000400
 80057ac:	20000228 	.word	0x20000228
 80057b0:	20009598 	.word	0x20009598

080057b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <SystemInit+0x20>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <SystemInit+0x20>)
 80057c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b09c      	sub	sp, #112	; 0x70
 80057dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	605a      	str	r2, [r3, #4]
 80057e8:	609a      	str	r2, [r3, #8]
 80057ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	611a      	str	r2, [r3, #16]
 8005808:	615a      	str	r2, [r3, #20]
 800580a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	2234      	movs	r2, #52	; 0x34
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f008 f8ec 	bl	800d9f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005818:	4b56      	ldr	r3, [pc, #344]	; (8005974 <MX_TIM1_Init+0x19c>)
 800581a:	4a57      	ldr	r2, [pc, #348]	; (8005978 <MX_TIM1_Init+0x1a0>)
 800581c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800581e:	4b55      	ldr	r3, [pc, #340]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005820:	2200      	movs	r2, #0
 8005822:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005824:	4b53      	ldr	r3, [pc, #332]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800582a:	4b52      	ldr	r3, [pc, #328]	; (8005974 <MX_TIM1_Init+0x19c>)
 800582c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005830:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005832:	4b50      	ldr	r3, [pc, #320]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005834:	2200      	movs	r2, #0
 8005836:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005838:	4b4e      	ldr	r3, [pc, #312]	; (8005974 <MX_TIM1_Init+0x19c>)
 800583a:	2200      	movs	r2, #0
 800583c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800583e:	4b4d      	ldr	r3, [pc, #308]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005840:	2200      	movs	r2, #0
 8005842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005844:	484b      	ldr	r0, [pc, #300]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005846:	f004 fead 	bl	800a5a4 <HAL_TIM_Base_Init>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005850:	f7ff f91e 	bl	8004a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005858:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800585a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800585e:	4619      	mov	r1, r3
 8005860:	4844      	ldr	r0, [pc, #272]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005862:	f005 fc49 	bl	800b0f8 <HAL_TIM_ConfigClockSource>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800586c:	f7ff f910 	bl	8004a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005870:	4840      	ldr	r0, [pc, #256]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005872:	f004 ffc8 	bl	800a806 <HAL_TIM_PWM_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800587c:	f7ff f908 	bl	8004a90 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005880:	483c      	ldr	r0, [pc, #240]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005882:	f004 ff5f 	bl	800a744 <HAL_TIM_OC_Init>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 800588c:	f7ff f900 	bl	8004a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005890:	2300      	movs	r3, #0
 8005892:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005894:	2300      	movs	r3, #0
 8005896:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005898:	2300      	movs	r3, #0
 800589a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800589c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058a0:	4619      	mov	r1, r3
 80058a2:	4834      	ldr	r0, [pc, #208]	; (8005974 <MX_TIM1_Init+0x19c>)
 80058a4:	f006 fa00 	bl	800bca8 <HAL_TIMEx_MasterConfigSynchronization>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80058ae:	f7ff f8ef 	bl	8004a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058b2:	2360      	movs	r3, #96	; 0x60
 80058b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058ba:	2300      	movs	r3, #0
 80058bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058be:	2300      	movs	r3, #0
 80058c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058c2:	2300      	movs	r3, #0
 80058c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058ca:	2300      	movs	r3, #0
 80058cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058d2:	2200      	movs	r2, #0
 80058d4:	4619      	mov	r1, r3
 80058d6:	4827      	ldr	r0, [pc, #156]	; (8005974 <MX_TIM1_Init+0x19c>)
 80058d8:	f005 fafe 	bl	800aed8 <HAL_TIM_PWM_ConfigChannel>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80058e2:	f7ff f8d5 	bl	8004a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058ea:	2204      	movs	r2, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4821      	ldr	r0, [pc, #132]	; (8005974 <MX_TIM1_Init+0x19c>)
 80058f0:	f005 faf2 	bl	800aed8 <HAL_TIM_PWM_ConfigChannel>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80058fa:	f7ff f8c9 	bl	8004a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80058fe:	2300      	movs	r3, #0
 8005900:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005902:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005906:	2208      	movs	r2, #8
 8005908:	4619      	mov	r1, r3
 800590a:	481a      	ldr	r0, [pc, #104]	; (8005974 <MX_TIM1_Init+0x19c>)
 800590c:	f005 fa6e 	bl	800adec <HAL_TIM_OC_ConfigChannel>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005916:	f7ff f8bb 	bl	8004a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800591a:	2300      	movs	r3, #0
 800591c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800592e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800594a:	2300      	movs	r3, #0
 800594c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800594e:	2300      	movs	r3, #0
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	4619      	mov	r1, r3
 8005956:	4807      	ldr	r0, [pc, #28]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005958:	f006 fa3c 	bl	800bdd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 8005962:	f7ff f895 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005966:	4803      	ldr	r0, [pc, #12]	; (8005974 <MX_TIM1_Init+0x19c>)
 8005968:	f000 f82e 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 800596c:	bf00      	nop
 800596e:	3770      	adds	r7, #112	; 0x70
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	200094a8 	.word	0x200094a8
 8005978:	40012c00 	.word	0x40012c00

0800597c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0d      	ldr	r2, [pc, #52]	; (80059c0 <HAL_TIM_Base_MspInit+0x44>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d113      	bne.n	80059b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <HAL_TIM_Base_MspInit+0x48>)
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <HAL_TIM_Base_MspInit+0x48>)
 8005994:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005998:	6613      	str	r3, [r2, #96]	; 0x60
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_TIM_Base_MspInit+0x48>)
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2100      	movs	r1, #0
 80059aa:	2019      	movs	r0, #25
 80059ac:	f001 fe4b 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80059b0:	2019      	movs	r0, #25
 80059b2:	f001 fe62 	bl	800767a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40021000 	.word	0x40021000

080059c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a12      	ldr	r2, [pc, #72]	; (8005a30 <HAL_TIM_MspPostInit+0x68>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d11d      	bne.n	8005a26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_TIM_MspPostInit+0x6c>)
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <HAL_TIM_MspPostInit+0x6c>)
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <HAL_TIM_MspPostInit+0x6c>)
 80059f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005a02:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005a06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005a14:	2306      	movs	r3, #6
 8005a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a18:	f107 030c 	add.w	r3, r7, #12
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a22:	f002 ffd3 	bl	80089cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005a26:	bf00      	nop
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40021000 	.word	0x40021000

08005a38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a3c:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a3e:	4a23      	ldr	r2, [pc, #140]	; (8005acc <MX_USART2_UART_Init+0x94>)
 8005a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005a42:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a50:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a56:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a5e:	220c      	movs	r2, #12
 8005a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a62:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a68:	4b17      	ldr	r3, [pc, #92]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a6e:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a80:	4811      	ldr	r0, [pc, #68]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a82:	f006 fa9f 	bl	800bfc4 <HAL_UART_Init>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005a8c:	f7ff f800 	bl	8004a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a90:	2100      	movs	r1, #0
 8005a92:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005a94:	f007 fea1 	bl	800d7da <HAL_UARTEx_SetTxFifoThreshold>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005a9e:	f7fe fff7 	bl	8004a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4808      	ldr	r0, [pc, #32]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005aa6:	f007 fed6 	bl	800d856 <HAL_UARTEx_SetRxFifoThreshold>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005ab0:	f7fe ffee 	bl	8004a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005ab4:	4804      	ldr	r0, [pc, #16]	; (8005ac8 <MX_USART2_UART_Init+0x90>)
 8005ab6:	f007 fe57 	bl	800d768 <HAL_UARTEx_DisableFifoMode>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005ac0:	f7fe ffe6 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ac4:	bf00      	nop
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	200094f4 	.word	0x200094f4
 8005acc:	40004400 	.word	0x40004400

08005ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad8:	f107 0314 	add.w	r3, r7, #20
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	60da      	str	r2, [r3, #12]
 8005ae6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_UART_MspInit+0x8c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d130      	bne.n	8005b54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <HAL_UART_MspInit+0x90>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_UART_MspInit+0x90>)
 8005af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afc:	6593      	str	r3, [r2, #88]	; 0x58
 8005afe:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <HAL_UART_MspInit+0x90>)
 8005b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <HAL_UART_MspInit+0x90>)
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0e:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <HAL_UART_MspInit+0x90>)
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b16:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <HAL_UART_MspInit+0x90>)
 8005b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b22:	230c      	movs	r3, #12
 8005b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b26:	2302      	movs	r3, #2
 8005b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b32:	2307      	movs	r3, #7
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b40:	f002 ff44 	bl	80089cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b44:	2200      	movs	r2, #0
 8005b46:	2100      	movs	r1, #0
 8005b48:	2026      	movs	r0, #38	; 0x26
 8005b4a:	f001 fd7c 	bl	8007646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b4e:	2026      	movs	r0, #38	; 0x26
 8005b50:	f001 fd93 	bl	800767a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005b54:	bf00      	nop
 8005b56:	3728      	adds	r7, #40	; 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40004400 	.word	0x40004400
 8005b60:	40021000 	.word	0x40021000

08005b64 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005b6c:	1d39      	adds	r1, r7, #4
 8005b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b72:	2201      	movs	r2, #1
 8005b74:	4803      	ldr	r0, [pc, #12]	; (8005b84 <__io_putchar+0x20>)
 8005b76:	f006 fa75 	bl	800c064 <HAL_UART_Transmit>
return 0;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	200094f4 	.word	0x200094f4

08005b88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005b90:	2201      	movs	r2, #1
 8005b92:	4904      	ldr	r1, [pc, #16]	; (8005ba4 <HAL_UART_RxCpltCallback+0x1c>)
 8005b94:	4804      	ldr	r0, [pc, #16]	; (8005ba8 <HAL_UART_RxCpltCallback+0x20>)
 8005b96:	f006 fafb 	bl	800c190 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000670 	.word	0x20000670
 8005ba8:	200094f4 	.word	0x200094f4

08005bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005bac:	480d      	ldr	r0, [pc, #52]	; (8005be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005bae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005bb0:	480d      	ldr	r0, [pc, #52]	; (8005be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005bb2:	490e      	ldr	r1, [pc, #56]	; (8005bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8005bb4:	4a0e      	ldr	r2, [pc, #56]	; (8005bf0 <LoopForever+0xe>)
  movs r3, #0
 8005bb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005bb8:	e002      	b.n	8005bc0 <LoopCopyDataInit>

08005bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bbe:	3304      	adds	r3, #4

08005bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bc4:	d3f9      	bcc.n	8005bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bc6:	4a0b      	ldr	r2, [pc, #44]	; (8005bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005bc8:	4c0b      	ldr	r4, [pc, #44]	; (8005bf8 <LoopForever+0x16>)
  movs r3, #0
 8005bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bcc:	e001      	b.n	8005bd2 <LoopFillZerobss>

08005bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bd0:	3204      	adds	r2, #4

08005bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bd4:	d3fb      	bcc.n	8005bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bd6:	f7ff fded 	bl	80057b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bda:	f007 fed7 	bl	800d98c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bde:	f7fe fc0b 	bl	80043f8 <main>

08005be2 <LoopForever>:

LoopForever:
    b LoopForever
 8005be2:	e7fe      	b.n	8005be2 <LoopForever>
  ldr   r0, =_estack
 8005be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bec:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8005bf0:	08013878 	.word	0x08013878
  ldr r2, =_sbss
 8005bf4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005bf8:	20009598 	.word	0x20009598

08005bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005bfc:	e7fe      	b.n	8005bfc <ADC1_2_IRQHandler>

08005bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c08:	2003      	movs	r0, #3
 8005c0a:	f001 fd11 	bl	8007630 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f000 f80e 	bl	8005c30 <HAL_InitTick>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	71fb      	strb	r3, [r7, #7]
 8005c1e:	e001      	b.n	8005c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c20:	f7ff fb8c 	bl	800533c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c24:	79fb      	ldrb	r3, [r7, #7]

}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005c3c:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <HAL_InitTick+0x68>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d022      	beq.n	8005c8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005c44:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <HAL_InitTick+0x6c>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <HAL_InitTick+0x68>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 fd1c 	bl	8007696 <HAL_SYSTICK_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10f      	bne.n	8005c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d809      	bhi.n	8005c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c72:	f001 fce8 	bl	8007646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <HAL_InitTick+0x70>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e007      	b.n	8005c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
 8005c82:	e004      	b.n	8005c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e001      	b.n	8005c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000008 	.word	0x20000008
 8005c9c:	20000000 	.word	0x20000000
 8005ca0:	20000004 	.word	0x20000004

08005ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_IncTick+0x1c>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_IncTick+0x20>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	4a03      	ldr	r2, [pc, #12]	; (8005cc0 <HAL_IncTick+0x1c>)
 8005cb4:	6013      	str	r3, [r2, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20009584 	.word	0x20009584
 8005cc4:	20000008 	.word	0x20000008

08005cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return uwTick;
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_GetTick+0x14>)
 8005cce:	681b      	ldr	r3, [r3, #0]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	20009584 	.word	0x20009584

08005ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ce8:	f7ff ffee 	bl	8005cc8 <HAL_GetTick>
 8005cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d004      	beq.n	8005d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <HAL_Delay+0x40>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d04:	bf00      	nop
 8005d06:	f7ff ffdf 	bl	8005cc8 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d8f7      	bhi.n	8005d06 <HAL_Delay+0x26>
  {
  }
}
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000008 	.word	0x20000008

08005d24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	609a      	str	r2, [r3, #8]
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3360      	adds	r3, #96	; 0x60
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <LL_ADC_SetOffset+0x44>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	03fff000 	.word	0x03fff000

08005dd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3360      	adds	r3, #96	; 0x60
 8005de2:	461a      	mov	r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3360      	adds	r3, #96	; 0x60
 8005e10:	461a      	mov	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b087      	sub	sp, #28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3360      	adds	r3, #96	; 0x60
 8005e46:	461a      	mov	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3360      	adds	r3, #96	; 0x60
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	615a      	str	r2, [r3, #20]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3330      	adds	r3, #48	; 0x30
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	4413      	add	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	211f      	movs	r1, #31
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	401a      	ands	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	0e9b      	lsrs	r3, r3, #26
 8005f26:	f003 011f 	and.w	r1, r3, #31
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	431a      	orrs	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b087      	sub	sp, #28
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3314      	adds	r3, #20
 8005f56:	461a      	mov	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	0e5b      	lsrs	r3, r3, #25
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	4413      	add	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	0d1b      	lsrs	r3, r3, #20
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2107      	movs	r1, #7
 8005f74:	fa01 f303 	lsl.w	r3, r1, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	0d1b      	lsrs	r3, r3, #20
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f003 0318 	and.w	r3, r3, #24
 8005fbe:	4908      	ldr	r1, [pc, #32]	; (8005fe0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005fc0:	40d9      	lsrs	r1, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	400b      	ands	r3, r1
 8005fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	0007ffff 	.word	0x0007ffff

08005fe4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006010:	4618      	mov	r0, r3
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800602c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6093      	str	r3, [r2, #8]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006054:	d101      	bne.n	800605a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800607c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a4:	d101      	bne.n	80060aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060cc:	f043 0201 	orr.w	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <LL_ADC_IsEnabled+0x18>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <LL_ADC_IsEnabled+0x1a>
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006116:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b04      	cmp	r3, #4
 8006140:	d101      	bne.n	8006146 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b08      	cmp	r3, #8
 8006166:	d101      	bne.n	800616c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b089      	sub	sp, #36	; 0x24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006188:	2300      	movs	r3, #0
 800618a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e1af      	b.n	80064f6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d109      	bne.n	80061b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fb f89f 	bl	80012e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff ff3f 	bl	8006040 <LL_ADC_IsDeepPowerDownEnabled>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff ff25 	bl	800601c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff ff5a 	bl	8006090 <LL_ADC_IsInternalRegulatorEnabled>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d115      	bne.n	800620e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ff3e 	bl	8006068 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061ec:	4b9f      	ldr	r3, [pc, #636]	; (800646c <HAL_ADC_Init+0x2f0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	099b      	lsrs	r3, r3, #6
 80061f2:	4a9f      	ldr	r2, [pc, #636]	; (8006470 <HAL_ADC_Init+0x2f4>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	099b      	lsrs	r3, r3, #6
 80061fa:	3301      	adds	r3, #1
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006200:	e002      	b.n	8006208 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	3b01      	subs	r3, #1
 8006206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f9      	bne.n	8006202 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff3c 	bl	8006090 <LL_ADC_IsInternalRegulatorEnabled>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10d      	bne.n	800623a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	f043 0210 	orr.w	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622e:	f043 0201 	orr.w	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ff75 	bl	800612e <LL_ADC_REG_IsConversionOngoing>
 8006244:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 8148 	bne.w	80064e4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 8144 	bne.w	80064e4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006264:	f043 0202 	orr.w	r2, r3, #2
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff ff35 	bl	80060e0 <LL_ADC_IsEnabled>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d141      	bne.n	8006300 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006284:	d004      	beq.n	8006290 <HAL_ADC_Init+0x114>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a7a      	ldr	r2, [pc, #488]	; (8006474 <HAL_ADC_Init+0x2f8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10f      	bne.n	80062b0 <HAL_ADC_Init+0x134>
 8006290:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006294:	f7ff ff24 	bl	80060e0 <LL_ADC_IsEnabled>
 8006298:	4604      	mov	r4, r0
 800629a:	4876      	ldr	r0, [pc, #472]	; (8006474 <HAL_ADC_Init+0x2f8>)
 800629c:	f7ff ff20 	bl	80060e0 <LL_ADC_IsEnabled>
 80062a0:	4603      	mov	r3, r0
 80062a2:	4323      	orrs	r3, r4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bf0c      	ite	eq
 80062a8:	2301      	moveq	r3, #1
 80062aa:	2300      	movne	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e012      	b.n	80062d6 <HAL_ADC_Init+0x15a>
 80062b0:	4871      	ldr	r0, [pc, #452]	; (8006478 <HAL_ADC_Init+0x2fc>)
 80062b2:	f7ff ff15 	bl	80060e0 <LL_ADC_IsEnabled>
 80062b6:	4604      	mov	r4, r0
 80062b8:	4870      	ldr	r0, [pc, #448]	; (800647c <HAL_ADC_Init+0x300>)
 80062ba:	f7ff ff11 	bl	80060e0 <LL_ADC_IsEnabled>
 80062be:	4603      	mov	r3, r0
 80062c0:	431c      	orrs	r4, r3
 80062c2:	486f      	ldr	r0, [pc, #444]	; (8006480 <HAL_ADC_Init+0x304>)
 80062c4:	f7ff ff0c 	bl	80060e0 <LL_ADC_IsEnabled>
 80062c8:	4603      	mov	r3, r0
 80062ca:	4323      	orrs	r3, r4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d012      	beq.n	8006300 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062e2:	d004      	beq.n	80062ee <HAL_ADC_Init+0x172>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a62      	ldr	r2, [pc, #392]	; (8006474 <HAL_ADC_Init+0x2f8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d101      	bne.n	80062f2 <HAL_ADC_Init+0x176>
 80062ee:	4a65      	ldr	r2, [pc, #404]	; (8006484 <HAL_ADC_Init+0x308>)
 80062f0:	e000      	b.n	80062f4 <HAL_ADC_Init+0x178>
 80062f2:	4a65      	ldr	r2, [pc, #404]	; (8006488 <HAL_ADC_Init+0x30c>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	4619      	mov	r1, r3
 80062fa:	4610      	mov	r0, r2
 80062fc:	f7ff fd12 	bl	8005d24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	7f5b      	ldrb	r3, [r3, #29]
 8006304:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800630a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006310:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006316:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800631e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006320:	4313      	orrs	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800632a:	2b01      	cmp	r3, #1
 800632c:	d106      	bne.n	800633c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	3b01      	subs	r3, #1
 8006334:	045b      	lsls	r3, r3, #17
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	4b4b      	ldr	r3, [pc, #300]	; (800648c <HAL_ADC_Init+0x310>)
 8006360:	4013      	ands	r3, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	69b9      	ldr	r1, [r7, #24]
 8006368:	430b      	orrs	r3, r1
 800636a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fed1 	bl	800612e <LL_ADC_REG_IsConversionOngoing>
 800638c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fede 	bl	8006154 <LL_ADC_INJ_IsConversionOngoing>
 8006398:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d17f      	bne.n	80064a0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d17c      	bne.n	80064a0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80063aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80063b4:	4313      	orrs	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c2:	f023 0302 	bic.w	r3, r3, #2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	69b9      	ldr	r1, [r7, #24]
 80063cc:	430b      	orrs	r3, r1
 80063ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d017      	beq.n	8006408 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80063e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80063f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6911      	ldr	r1, [r2, #16]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	430b      	orrs	r3, r1
 8006402:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006406:	e013      	b.n	8006430 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006416:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800642c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006436:	2b01      	cmp	r3, #1
 8006438:	d12a      	bne.n	8006490 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006444:	f023 0304 	bic.w	r3, r3, #4
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006450:	4311      	orrs	r1, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006456:	4311      	orrs	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800645c:	430a      	orrs	r2, r1
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0201 	orr.w	r2, r2, #1
 8006468:	611a      	str	r2, [r3, #16]
 800646a:	e019      	b.n	80064a0 <HAL_ADC_Init+0x324>
 800646c:	20000000 	.word	0x20000000
 8006470:	053e2d63 	.word	0x053e2d63
 8006474:	50000100 	.word	0x50000100
 8006478:	50000400 	.word	0x50000400
 800647c:	50000500 	.word	0x50000500
 8006480:	50000600 	.word	0x50000600
 8006484:	50000300 	.word	0x50000300
 8006488:	50000700 	.word	0x50000700
 800648c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d10c      	bne.n	80064c2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	f023 010f 	bic.w	r1, r3, #15
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
 80064c0:	e007      	b.n	80064d2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 020f 	bic.w	r2, r2, #15
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	f043 0201 	orr.w	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80064e2:	e007      	b.n	80064f4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e8:	f043 0210 	orr.w	r2, r3, #16
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd90      	pop	{r4, r7, pc}
 80064fe:	bf00      	nop

08006500 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006510:	d004      	beq.n	800651c <HAL_ADC_Start+0x1c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a67      	ldr	r2, [pc, #412]	; (80066b4 <HAL_ADC_Start+0x1b4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <HAL_ADC_Start+0x20>
 800651c:	4b66      	ldr	r3, [pc, #408]	; (80066b8 <HAL_ADC_Start+0x1b8>)
 800651e:	e000      	b.n	8006522 <HAL_ADC_Start+0x22>
 8006520:	4b66      	ldr	r3, [pc, #408]	; (80066bc <HAL_ADC_Start+0x1bc>)
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fd5e 	bl	8005fe4 <LL_ADC_GetMultimode>
 8006528:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fdfd 	bl	800612e <LL_ADC_REG_IsConversionOngoing>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 80b4 	bne.w	80066a4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_ADC_Start+0x4a>
 8006546:	2302      	movs	r3, #2
 8006548:	e0af      	b.n	80066aa <HAL_ADC_Start+0x1aa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fe0c 	bl	8007170 <ADC_Enable>
 8006558:	4603      	mov	r3, r0
 800655a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 809b 	bne.w	800669a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006568:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a4d      	ldr	r2, [pc, #308]	; (80066b4 <HAL_ADC_Start+0x1b4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_ADC_Start+0x96>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4e      	ldr	r2, [pc, #312]	; (80066c0 <HAL_ADC_Start+0x1c0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d002      	beq.n	8006592 <HAL_ADC_Start+0x92>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	e003      	b.n	800659a <HAL_ADC_Start+0x9a>
 8006592:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <HAL_ADC_Start+0x1c4>)
 8006594:	e001      	b.n	800659a <HAL_ADC_Start+0x9a>
 8006596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	4293      	cmp	r3, r2
 80065a0:	d002      	beq.n	80065a8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c0:	d106      	bne.n	80065d0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c6:	f023 0206 	bic.w	r2, r3, #6
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	661a      	str	r2, [r3, #96]	; 0x60
 80065ce:	e002      	b.n	80065d6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	221c      	movs	r2, #28
 80065dc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a32      	ldr	r2, [pc, #200]	; (80066b4 <HAL_ADC_Start+0x1b4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d009      	beq.n	8006604 <HAL_ADC_Start+0x104>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a32      	ldr	r2, [pc, #200]	; (80066c0 <HAL_ADC_Start+0x1c0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d002      	beq.n	8006600 <HAL_ADC_Start+0x100>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	e003      	b.n	8006608 <HAL_ADC_Start+0x108>
 8006600:	4b30      	ldr	r3, [pc, #192]	; (80066c4 <HAL_ADC_Start+0x1c4>)
 8006602:	e001      	b.n	8006608 <HAL_ADC_Start+0x108>
 8006604:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	4293      	cmp	r3, r2
 800660e:	d008      	beq.n	8006622 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b05      	cmp	r3, #5
 800661a:	d002      	beq.n	8006622 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b09      	cmp	r3, #9
 8006620:	d114      	bne.n	800664c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006634:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006638:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fd5e 	bl	8006106 <LL_ADC_REG_StartConversion>
 800664a:	e02d      	b.n	80066a8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006650:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <HAL_ADC_Start+0x1b4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d009      	beq.n	8006676 <HAL_ADC_Start+0x176>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a16      	ldr	r2, [pc, #88]	; (80066c0 <HAL_ADC_Start+0x1c0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d002      	beq.n	8006672 <HAL_ADC_Start+0x172>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	e003      	b.n	800667a <HAL_ADC_Start+0x17a>
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <HAL_ADC_Start+0x1c4>)
 8006674:	e001      	b.n	800667a <HAL_ADC_Start+0x17a>
 8006676:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800667a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00f      	beq.n	80066a8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006690:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	65da      	str	r2, [r3, #92]	; 0x5c
 8006698:	e006      	b.n	80066a8 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80066a2:	e001      	b.n	80066a8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
 80066a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	50000100 	.word	0x50000100
 80066b8:	50000300 	.word	0x50000300
 80066bc:	50000700 	.word	0x50000700
 80066c0:	50000500 	.word	0x50000500
 80066c4:	50000400 	.word	0x50000400

080066c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066da:	d004      	beq.n	80066e6 <HAL_ADC_PollForConversion+0x1e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a77      	ldr	r2, [pc, #476]	; (80068c0 <HAL_ADC_PollForConversion+0x1f8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d101      	bne.n	80066ea <HAL_ADC_PollForConversion+0x22>
 80066e6:	4b77      	ldr	r3, [pc, #476]	; (80068c4 <HAL_ADC_PollForConversion+0x1fc>)
 80066e8:	e000      	b.n	80066ec <HAL_ADC_PollForConversion+0x24>
 80066ea:	4b77      	ldr	r3, [pc, #476]	; (80068c8 <HAL_ADC_PollForConversion+0x200>)
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fc79 	bl	8005fe4 <LL_ADC_GetMultimode>
 80066f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d102      	bne.n	8006702 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80066fc:	2308      	movs	r3, #8
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	e037      	b.n	8006772 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b05      	cmp	r3, #5
 800670c:	d002      	beq.n	8006714 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b09      	cmp	r3, #9
 8006712:	d111      	bne.n	8006738 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e0c1      	b.n	80068b6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8006732:	2304      	movs	r3, #4
 8006734:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006736:	e01c      	b.n	8006772 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006740:	d004      	beq.n	800674c <HAL_ADC_PollForConversion+0x84>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a5e      	ldr	r2, [pc, #376]	; (80068c0 <HAL_ADC_PollForConversion+0x1f8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d101      	bne.n	8006750 <HAL_ADC_PollForConversion+0x88>
 800674c:	4b5d      	ldr	r3, [pc, #372]	; (80068c4 <HAL_ADC_PollForConversion+0x1fc>)
 800674e:	e000      	b.n	8006752 <HAL_ADC_PollForConversion+0x8a>
 8006750:	4b5d      	ldr	r3, [pc, #372]	; (80068c8 <HAL_ADC_PollForConversion+0x200>)
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fc54 	bl	8006000 <LL_ADC_GetMultiDMATransfer>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0a3      	b.n	80068b6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800676e:	2304      	movs	r3, #4
 8006770:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006772:	f7ff faa9 	bl	8005cc8 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006778:	e021      	b.n	80067be <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d01d      	beq.n	80067be <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006782:	f7ff faa1 	bl	8005cc8 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <HAL_ADC_PollForConversion+0xd0>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d112      	bne.n	80067be <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4013      	ands	r3, r2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10b      	bne.n	80067be <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067aa:	f043 0204 	orr.w	r2, r3, #4
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e07b      	b.n	80068b6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0d6      	beq.n	800677a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fb73 	bl	8005ec8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01c      	beq.n	8006822 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	7f5b      	ldrb	r3, [r3, #29]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d118      	bne.n	8006822 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d111      	bne.n	8006822 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d105      	bne.n	8006822 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <HAL_ADC_PollForConversion+0x1f8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_ADC_PollForConversion+0x178>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a26      	ldr	r2, [pc, #152]	; (80068cc <HAL_ADC_PollForConversion+0x204>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d002      	beq.n	800683c <HAL_ADC_PollForConversion+0x174>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	e003      	b.n	8006844 <HAL_ADC_PollForConversion+0x17c>
 800683c:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <HAL_ADC_PollForConversion+0x208>)
 800683e:	e001      	b.n	8006844 <HAL_ADC_PollForConversion+0x17c>
 8006840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	4293      	cmp	r3, r2
 800684a:	d008      	beq.n	800685e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b05      	cmp	r3, #5
 8006856:	d002      	beq.n	800685e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b09      	cmp	r3, #9
 800685c:	d104      	bne.n	8006868 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e014      	b.n	8006892 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <HAL_ADC_PollForConversion+0x1f8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_ADC_PollForConversion+0x1be>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_ADC_PollForConversion+0x204>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d002      	beq.n	8006882 <HAL_ADC_PollForConversion+0x1ba>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	e003      	b.n	800688a <HAL_ADC_PollForConversion+0x1c2>
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <HAL_ADC_PollForConversion+0x208>)
 8006884:	e001      	b.n	800688a <HAL_ADC_PollForConversion+0x1c2>
 8006886:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800688a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d104      	bne.n	80068a2 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2208      	movs	r2, #8
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e008      	b.n	80068b4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	220c      	movs	r2, #12
 80068b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	50000100 	.word	0x50000100
 80068c4:	50000300 	.word	0x50000300
 80068c8:	50000700 	.word	0x50000700
 80068cc:	50000500 	.word	0x50000500
 80068d0:	50000400 	.word	0x50000400

080068d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b0b6      	sub	sp, #216	; 0xd8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800690a:	2b01      	cmp	r3, #1
 800690c:	d102      	bne.n	8006914 <HAL_ADC_ConfigChannel+0x24>
 800690e:	2302      	movs	r3, #2
 8006910:	f000 bc13 	b.w	800713a <HAL_ADC_ConfigChannel+0x84a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fc04 	bl	800612e <LL_ADC_REG_IsConversionOngoing>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	f040 83f3 	bne.w	8007114 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f7ff fad7 	bl	8005eee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff fbf2 	bl	800612e <LL_ADC_REG_IsConversionOngoing>
 800694a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fbfe 	bl	8006154 <LL_ADC_INJ_IsConversionOngoing>
 8006958:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800695c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 81d9 	bne.w	8006d18 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 81d4 	bne.w	8006d18 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006978:	d10f      	bne.n	800699a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2200      	movs	r2, #0
 8006984:	4619      	mov	r1, r3
 8006986:	f7ff fade 	bl	8005f46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fa85 	bl	8005ea2 <LL_ADC_SetSamplingTimeCommonConfig>
 8006998:	e00e      	b.n	80069b8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f7ff facd 	bl	8005f46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fa75 	bl	8005ea2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	08db      	lsrs	r3, r3, #3
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d022      	beq.n	8006a20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6919      	ldr	r1, [r3, #16]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ea:	f7ff f9cf 	bl	8005d8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	6919      	ldr	r1, [r3, #16]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7ff fa1b 	bl	8005e36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6919      	ldr	r1, [r3, #16]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	7f1b      	ldrb	r3, [r3, #28]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d102      	bne.n	8006a16 <HAL_ADC_ConfigChannel+0x126>
 8006a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a14:	e000      	b.n	8006a18 <HAL_ADC_ConfigChannel+0x128>
 8006a16:	2300      	movs	r3, #0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f7ff fa27 	bl	8005e6c <LL_ADC_SetOffsetSaturation>
 8006a1e:	e17b      	b.n	8006d18 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff f9d4 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <HAL_ADC_ConfigChannel+0x15c>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff f9c9 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006a42:	4603      	mov	r3, r0
 8006a44:	0e9b      	lsrs	r3, r3, #26
 8006a46:	f003 021f 	and.w	r2, r3, #31
 8006a4a:	e01e      	b.n	8006a8a <HAL_ADC_ConfigChannel+0x19a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff f9be 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a62:	fa93 f3a3 	rbit	r3, r3
 8006a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006a7a:	2320      	movs	r3, #32
 8006a7c:	e004      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a82:	fab3 f383 	clz	r3, r3
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d105      	bne.n	8006aa2 <HAL_ADC_ConfigChannel+0x1b2>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	0e9b      	lsrs	r3, r3, #26
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	e018      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x1e4>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006aae:	fa93 f3a3 	rbit	r3, r3
 8006ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006abe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006ac6:	2320      	movs	r3, #32
 8006ac8:	e004      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006aca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ace:	fab3 f383 	clz	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d106      	bne.n	8006ae6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7ff f98d 	bl	8005e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2101      	movs	r1, #1
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff f971 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <HAL_ADC_ConfigChannel+0x222>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2101      	movs	r1, #1
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff f966 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	0e9b      	lsrs	r3, r3, #26
 8006b0c:	f003 021f 	and.w	r2, r3, #31
 8006b10:	e01e      	b.n	8006b50 <HAL_ADC_ConfigChannel+0x260>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f95b 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b28:	fa93 f3a3 	rbit	r3, r3
 8006b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006b30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006b40:	2320      	movs	r3, #32
 8006b42:	e004      	b.n	8006b4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b48:	fab3 f383 	clz	r3, r3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <HAL_ADC_ConfigChannel+0x278>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	0e9b      	lsrs	r3, r3, #26
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	e018      	b.n	8006b9a <HAL_ADC_ConfigChannel+0x2aa>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b74:	fa93 f3a3 	rbit	r3, r3
 8006b78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006b7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	e004      	b.n	8006b9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b94:	fab3 f383 	clz	r3, r3
 8006b98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d106      	bne.n	8006bac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff f92a 	bl	8005e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff f90e 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x2e8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff f903 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	0e9b      	lsrs	r3, r3, #26
 8006bd2:	f003 021f 	and.w	r2, r3, #31
 8006bd6:	e01e      	b.n	8006c16 <HAL_ADC_ConfigChannel+0x326>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2102      	movs	r1, #2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff f8f8 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bee:	fa93 f3a3 	rbit	r3, r3
 8006bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006bfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006c06:	2320      	movs	r3, #32
 8006c08:	e004      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c0e:	fab3 f383 	clz	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d105      	bne.n	8006c2e <HAL_ADC_ConfigChannel+0x33e>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	0e9b      	lsrs	r3, r3, #26
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	e016      	b.n	8006c5c <HAL_ADC_ConfigChannel+0x36c>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c3a:	fa93 f3a3 	rbit	r3, r3
 8006c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006c4e:	2320      	movs	r3, #32
 8006c50:	e004      	b.n	8006c5c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c56:	fab3 f383 	clz	r3, r3
 8006c5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d106      	bne.n	8006c6e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2102      	movs	r1, #2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff f8c9 	bl	8005e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2103      	movs	r1, #3
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff f8ad 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <HAL_ADC_ConfigChannel+0x3aa>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2103      	movs	r1, #3
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff f8a2 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006c90:	4603      	mov	r3, r0
 8006c92:	0e9b      	lsrs	r3, r3, #26
 8006c94:	f003 021f 	and.w	r2, r3, #31
 8006c98:	e017      	b.n	8006cca <HAL_ADC_ConfigChannel+0x3da>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2103      	movs	r1, #3
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff f897 	bl	8005dd4 <LL_ADC_GetOffsetChannel>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cac:	fa93 f3a3 	rbit	r3, r3
 8006cb0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	e003      	b.n	8006cc8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc2:	fab3 f383 	clz	r3, r3
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_ADC_ConfigChannel+0x3f2>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	0e9b      	lsrs	r3, r3, #26
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	e011      	b.n	8006d06 <HAL_ADC_ConfigChannel+0x416>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cea:	fa93 f3a3 	rbit	r3, r3
 8006cee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006cfa:	2320      	movs	r3, #32
 8006cfc:	e003      	b.n	8006d06 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d00:	fab3 f383 	clz	r3, r3
 8006d04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d106      	bne.n	8006d18 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2103      	movs	r1, #3
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff f874 	bl	8005e00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff f9df 	bl	80060e0 <LL_ADC_IsEnabled>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 813d 	bne.w	8006fa4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f7ff f930 	bl	8005f9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4aa2      	ldr	r2, [pc, #648]	; (8006fcc <HAL_ADC_ConfigChannel+0x6dc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f040 812e 	bne.w	8006fa4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x480>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	0e9b      	lsrs	r3, r3, #26
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2b09      	cmp	r3, #9
 8006d66:	bf94      	ite	ls
 8006d68:	2301      	movls	r3, #1
 8006d6a:	2300      	movhi	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e019      	b.n	8006da4 <HAL_ADC_ConfigChannel+0x4b4>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d78:	fa93 f3a3 	rbit	r3, r3
 8006d7c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d80:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006d88:	2320      	movs	r3, #32
 8006d8a:	e003      	b.n	8006d94 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d8e:	fab3 f383 	clz	r3, r3
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	3301      	adds	r3, #1
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	bf94      	ite	ls
 8006d9e:	2301      	movls	r3, #1
 8006da0:	2300      	movhi	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d079      	beq.n	8006e9c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d107      	bne.n	8006dc4 <HAL_ADC_ConfigChannel+0x4d4>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	0e9b      	lsrs	r3, r3, #26
 8006dba:	3301      	adds	r3, #1
 8006dbc:	069b      	lsls	r3, r3, #26
 8006dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006dc2:	e015      	b.n	8006df0 <HAL_ADC_ConfigChannel+0x500>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dcc:	fa93 f3a3 	rbit	r3, r3
 8006dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006ddc:	2320      	movs	r3, #32
 8006dde:	e003      	b.n	8006de8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006de2:	fab3 f383 	clz	r3, r3
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	3301      	adds	r3, #1
 8006dea:	069b      	lsls	r3, r3, #26
 8006dec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <HAL_ADC_ConfigChannel+0x520>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	0e9b      	lsrs	r3, r3, #26
 8006e02:	3301      	adds	r3, #1
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	2101      	movs	r1, #1
 8006e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0e:	e017      	b.n	8006e40 <HAL_ADC_ConfigChannel+0x550>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e18:	fa93 f3a3 	rbit	r3, r3
 8006e1c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006e28:	2320      	movs	r3, #32
 8006e2a:	e003      	b.n	8006e34 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2e:	fab3 f383 	clz	r3, r3
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	3301      	adds	r3, #1
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	ea42 0103 	orr.w	r1, r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <HAL_ADC_ConfigChannel+0x576>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	0e9b      	lsrs	r3, r3, #26
 8006e56:	3301      	adds	r3, #1
 8006e58:	f003 021f 	and.w	r2, r3, #31
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	4413      	add	r3, r2
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	e018      	b.n	8006e98 <HAL_ADC_ConfigChannel+0x5a8>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	fa93 f3a3 	rbit	r3, r3
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006e7e:	2320      	movs	r3, #32
 8006e80:	e003      	b.n	8006e8a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e84:	fab3 f383 	clz	r3, r3
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f003 021f 	and.w	r2, r3, #31
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	e07e      	b.n	8006f9a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d107      	bne.n	8006eb8 <HAL_ADC_ConfigChannel+0x5c8>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	0e9b      	lsrs	r3, r3, #26
 8006eae:	3301      	adds	r3, #1
 8006eb0:	069b      	lsls	r3, r3, #26
 8006eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eb6:	e015      	b.n	8006ee4 <HAL_ADC_ConfigChannel+0x5f4>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	fa93 f3a3 	rbit	r3, r3
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006ed0:	2320      	movs	r3, #32
 8006ed2:	e003      	b.n	8006edc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	fab3 f383 	clz	r3, r3
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	3301      	adds	r3, #1
 8006ede:	069b      	lsls	r3, r3, #26
 8006ee0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <HAL_ADC_ConfigChannel+0x614>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	0e9b      	lsrs	r3, r3, #26
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	2101      	movs	r1, #1
 8006efe:	fa01 f303 	lsl.w	r3, r1, r3
 8006f02:	e017      	b.n	8006f34 <HAL_ADC_ConfigChannel+0x644>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	fa93 f3a3 	rbit	r3, r3
 8006f10:	61fb      	str	r3, [r7, #28]
  return result;
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	e003      	b.n	8006f28 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	fab3 f383 	clz	r3, r3
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2101      	movs	r1, #1
 8006f30:	fa01 f303 	lsl.w	r3, r1, r3
 8006f34:	ea42 0103 	orr.w	r1, r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10d      	bne.n	8006f60 <HAL_ADC_ConfigChannel+0x670>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	0e9b      	lsrs	r3, r3, #26
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f003 021f 	and.w	r2, r3, #31
 8006f50:	4613      	mov	r3, r2
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	4413      	add	r3, r2
 8006f56:	3b1e      	subs	r3, #30
 8006f58:	051b      	lsls	r3, r3, #20
 8006f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f5e:	e01b      	b.n	8006f98 <HAL_ADC_ConfigChannel+0x6a8>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	613b      	str	r3, [r7, #16]
  return result;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006f78:	2320      	movs	r3, #32
 8006f7a:	e003      	b.n	8006f84 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	fab3 f383 	clz	r3, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	3301      	adds	r3, #1
 8006f86:	f003 021f 	and.w	r2, r3, #31
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	3b1e      	subs	r3, #30
 8006f92:	051b      	lsls	r3, r3, #20
 8006f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	6892      	ldr	r2, [r2, #8]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	f7fe ffd1 	bl	8005f46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <HAL_ADC_ConfigChannel+0x6e0>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80be 	beq.w	800712e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fba:	d004      	beq.n	8006fc6 <HAL_ADC_ConfigChannel+0x6d6>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <HAL_ADC_ConfigChannel+0x6e4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10a      	bne.n	8006fdc <HAL_ADC_ConfigChannel+0x6ec>
 8006fc6:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <HAL_ADC_ConfigChannel+0x6e8>)
 8006fc8:	e009      	b.n	8006fde <HAL_ADC_ConfigChannel+0x6ee>
 8006fca:	bf00      	nop
 8006fcc:	407f0000 	.word	0x407f0000
 8006fd0:	80080000 	.word	0x80080000
 8006fd4:	50000100 	.word	0x50000100
 8006fd8:	50000300 	.word	0x50000300
 8006fdc:	4b59      	ldr	r3, [pc, #356]	; (8007144 <HAL_ADC_ConfigChannel+0x854>)
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fec6 	bl	8005d70 <LL_ADC_GetCommonPathInternalCh>
 8006fe4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a56      	ldr	r2, [pc, #344]	; (8007148 <HAL_ADC_ConfigChannel+0x858>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_ADC_ConfigChannel+0x70c>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a55      	ldr	r2, [pc, #340]	; (800714c <HAL_ADC_ConfigChannel+0x85c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d13a      	bne.n	8007072 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d134      	bne.n	8007072 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007010:	d005      	beq.n	800701e <HAL_ADC_ConfigChannel+0x72e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a4e      	ldr	r2, [pc, #312]	; (8007150 <HAL_ADC_ConfigChannel+0x860>)
 8007018:	4293      	cmp	r3, r2
 800701a:	f040 8085 	bne.w	8007128 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007026:	d004      	beq.n	8007032 <HAL_ADC_ConfigChannel+0x742>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a49      	ldr	r2, [pc, #292]	; (8007154 <HAL_ADC_ConfigChannel+0x864>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <HAL_ADC_ConfigChannel+0x746>
 8007032:	4a49      	ldr	r2, [pc, #292]	; (8007158 <HAL_ADC_ConfigChannel+0x868>)
 8007034:	e000      	b.n	8007038 <HAL_ADC_ConfigChannel+0x748>
 8007036:	4a43      	ldr	r2, [pc, #268]	; (8007144 <HAL_ADC_ConfigChannel+0x854>)
 8007038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800703c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f7fe fe81 	bl	8005d4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007048:	4b44      	ldr	r3, [pc, #272]	; (800715c <HAL_ADC_ConfigChannel+0x86c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	099b      	lsrs	r3, r3, #6
 800704e:	4a44      	ldr	r2, [pc, #272]	; (8007160 <HAL_ADC_ConfigChannel+0x870>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	099b      	lsrs	r3, r3, #6
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	4613      	mov	r3, r2
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007062:	e002      	b.n	800706a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3b01      	subs	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f9      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007070:	e05a      	b.n	8007128 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a3b      	ldr	r2, [pc, #236]	; (8007164 <HAL_ADC_ConfigChannel+0x874>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d125      	bne.n	80070c8 <HAL_ADC_ConfigChannel+0x7d8>
 800707c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d11f      	bne.n	80070c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a31      	ldr	r2, [pc, #196]	; (8007154 <HAL_ADC_ConfigChannel+0x864>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d104      	bne.n	800709c <HAL_ADC_ConfigChannel+0x7ac>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a34      	ldr	r2, [pc, #208]	; (8007168 <HAL_ADC_ConfigChannel+0x878>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d047      	beq.n	800712c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070a4:	d004      	beq.n	80070b0 <HAL_ADC_ConfigChannel+0x7c0>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2a      	ldr	r2, [pc, #168]	; (8007154 <HAL_ADC_ConfigChannel+0x864>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d101      	bne.n	80070b4 <HAL_ADC_ConfigChannel+0x7c4>
 80070b0:	4a29      	ldr	r2, [pc, #164]	; (8007158 <HAL_ADC_ConfigChannel+0x868>)
 80070b2:	e000      	b.n	80070b6 <HAL_ADC_ConfigChannel+0x7c6>
 80070b4:	4a23      	ldr	r2, [pc, #140]	; (8007144 <HAL_ADC_ConfigChannel+0x854>)
 80070b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f7fe fe42 	bl	8005d4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80070c6:	e031      	b.n	800712c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a27      	ldr	r2, [pc, #156]	; (800716c <HAL_ADC_ConfigChannel+0x87c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d12d      	bne.n	800712e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80070d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d127      	bne.n	800712e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	; (8007154 <HAL_ADC_ConfigChannel+0x864>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d022      	beq.n	800712e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070f0:	d004      	beq.n	80070fc <HAL_ADC_ConfigChannel+0x80c>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a17      	ldr	r2, [pc, #92]	; (8007154 <HAL_ADC_ConfigChannel+0x864>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d101      	bne.n	8007100 <HAL_ADC_ConfigChannel+0x810>
 80070fc:	4a16      	ldr	r2, [pc, #88]	; (8007158 <HAL_ADC_ConfigChannel+0x868>)
 80070fe:	e000      	b.n	8007102 <HAL_ADC_ConfigChannel+0x812>
 8007100:	4a10      	ldr	r2, [pc, #64]	; (8007144 <HAL_ADC_ConfigChannel+0x854>)
 8007102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800710a:	4619      	mov	r1, r3
 800710c:	4610      	mov	r0, r2
 800710e:	f7fe fe1c 	bl	8005d4a <LL_ADC_SetCommonPathInternalCh>
 8007112:	e00c      	b.n	800712e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007126:	e002      	b.n	800712e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007128:	bf00      	nop
 800712a:	e000      	b.n	800712e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800712c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007136:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800713a:	4618      	mov	r0, r3
 800713c:	37d8      	adds	r7, #216	; 0xd8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	50000700 	.word	0x50000700
 8007148:	c3210000 	.word	0xc3210000
 800714c:	90c00010 	.word	0x90c00010
 8007150:	50000600 	.word	0x50000600
 8007154:	50000100 	.word	0x50000100
 8007158:	50000300 	.word	0x50000300
 800715c:	20000000 	.word	0x20000000
 8007160:	053e2d63 	.word	0x053e2d63
 8007164:	c7520000 	.word	0xc7520000
 8007168:	50000500 	.word	0x50000500
 800716c:	cb840000 	.word	0xcb840000

08007170 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe ffaf 	bl	80060e0 <LL_ADC_IsEnabled>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d14d      	bne.n	8007224 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	4b28      	ldr	r3, [pc, #160]	; (8007230 <ADC_Enable+0xc0>)
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00d      	beq.n	80071b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	f043 0210 	orr.w	r2, r3, #16
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a6:	f043 0201 	orr.w	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e039      	b.n	8007226 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe ff7e 	bl	80060b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80071bc:	f7fe fd84 	bl	8005cc8 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071c2:	e028      	b.n	8007216 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe ff89 	bl	80060e0 <LL_ADC_IsEnabled>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe ff6d 	bl	80060b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071de:	f7fe fd73 	bl	8005cc8 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d914      	bls.n	8007216 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d00d      	beq.n	8007216 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fe:	f043 0210 	orr.w	r2, r3, #16
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720a:	f043 0201 	orr.w	r2, r3, #1
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e007      	b.n	8007226 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d1cf      	bne.n	80071c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	8000003f 	.word	0x8000003f

08007234 <LL_ADC_IsEnabled>:
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <LL_ADC_IsEnabled+0x18>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <LL_ADC_IsEnabled+0x1a>
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <LL_ADC_REG_IsConversionOngoing>:
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b04      	cmp	r3, #4
 800726c:	d101      	bne.n	8007272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b0a1      	sub	sp, #132	; 0x84
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800729a:	2302      	movs	r3, #2
 800729c:	e0e7      	b.n	800746e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80072a6:	2300      	movs	r3, #0
 80072a8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80072aa:	2300      	movs	r3, #0
 80072ac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072b6:	d102      	bne.n	80072be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80072b8:	4b6f      	ldr	r3, [pc, #444]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	e009      	b.n	80072d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6e      	ldr	r2, [pc, #440]	; (800747c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d102      	bne.n	80072ce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80072c8:	4b6d      	ldr	r3, [pc, #436]	; (8007480 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	e001      	b.n	80072d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80072ce:	2300      	movs	r3, #0
 80072d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10b      	bne.n	80072f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	f043 0220 	orr.w	r2, r3, #32
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e0be      	b.n	800746e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff ffb1 	bl	800725a <LL_ADC_REG_IsConversionOngoing>
 80072f8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff ffab 	bl	800725a <LL_ADC_REG_IsConversionOngoing>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 80a0 	bne.w	800744c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800730c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 809c 	bne.w	800744c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800731c:	d004      	beq.n	8007328 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a55      	ldr	r2, [pc, #340]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d101      	bne.n	800732c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007328:	4b56      	ldr	r3, [pc, #344]	; (8007484 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800732a:	e000      	b.n	800732e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800732c:	4b56      	ldr	r3, [pc, #344]	; (8007488 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800732e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d04b      	beq.n	80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800734a:	035b      	lsls	r3, r3, #13
 800734c:	430b      	orrs	r3, r1
 800734e:	431a      	orrs	r2, r3
 8007350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007352:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800735c:	d004      	beq.n	8007368 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a45      	ldr	r2, [pc, #276]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10f      	bne.n	8007388 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007368:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800736c:	f7ff ff62 	bl	8007234 <LL_ADC_IsEnabled>
 8007370:	4604      	mov	r4, r0
 8007372:	4841      	ldr	r0, [pc, #260]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007374:	f7ff ff5e 	bl	8007234 <LL_ADC_IsEnabled>
 8007378:	4603      	mov	r3, r0
 800737a:	4323      	orrs	r3, r4
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e012      	b.n	80073ae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007388:	483c      	ldr	r0, [pc, #240]	; (800747c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800738a:	f7ff ff53 	bl	8007234 <LL_ADC_IsEnabled>
 800738e:	4604      	mov	r4, r0
 8007390:	483b      	ldr	r0, [pc, #236]	; (8007480 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007392:	f7ff ff4f 	bl	8007234 <LL_ADC_IsEnabled>
 8007396:	4603      	mov	r3, r0
 8007398:	431c      	orrs	r4, r3
 800739a:	483c      	ldr	r0, [pc, #240]	; (800748c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800739c:	f7ff ff4a 	bl	8007234 <LL_ADC_IsEnabled>
 80073a0:	4603      	mov	r3, r0
 80073a2:	4323      	orrs	r3, r4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf0c      	ite	eq
 80073a8:	2301      	moveq	r3, #1
 80073aa:	2300      	movne	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d056      	beq.n	8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80073b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80073ba:	f023 030f 	bic.w	r3, r3, #15
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	6811      	ldr	r1, [r2, #0]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	6892      	ldr	r2, [r2, #8]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	431a      	orrs	r2, r3
 80073ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073cc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80073ce:	e047      	b.n	8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80073d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073e4:	d004      	beq.n	80073f0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a23      	ldr	r2, [pc, #140]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d10f      	bne.n	8007410 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80073f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80073f4:	f7ff ff1e 	bl	8007234 <LL_ADC_IsEnabled>
 80073f8:	4604      	mov	r4, r0
 80073fa:	481f      	ldr	r0, [pc, #124]	; (8007478 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80073fc:	f7ff ff1a 	bl	8007234 <LL_ADC_IsEnabled>
 8007400:	4603      	mov	r3, r0
 8007402:	4323      	orrs	r3, r4
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	e012      	b.n	8007436 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007410:	481a      	ldr	r0, [pc, #104]	; (800747c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007412:	f7ff ff0f 	bl	8007234 <LL_ADC_IsEnabled>
 8007416:	4604      	mov	r4, r0
 8007418:	4819      	ldr	r0, [pc, #100]	; (8007480 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800741a:	f7ff ff0b 	bl	8007234 <LL_ADC_IsEnabled>
 800741e:	4603      	mov	r3, r0
 8007420:	431c      	orrs	r4, r3
 8007422:	481a      	ldr	r0, [pc, #104]	; (800748c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007424:	f7ff ff06 	bl	8007234 <LL_ADC_IsEnabled>
 8007428:	4603      	mov	r3, r0
 800742a:	4323      	orrs	r3, r4
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d012      	beq.n	8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800743a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007442:	f023 030f 	bic.w	r3, r3, #15
 8007446:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007448:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800744a:	e009      	b.n	8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007450:	f043 0220 	orr.w	r2, r3, #32
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800745e:	e000      	b.n	8007462 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007460:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800746a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800746e:	4618      	mov	r0, r3
 8007470:	3784      	adds	r7, #132	; 0x84
 8007472:	46bd      	mov	sp, r7
 8007474:	bd90      	pop	{r4, r7, pc}
 8007476:	bf00      	nop
 8007478:	50000100 	.word	0x50000100
 800747c:	50000400 	.word	0x50000400
 8007480:	50000500 	.word	0x50000500
 8007484:	50000300 	.word	0x50000300
 8007488:	50000700 	.word	0x50000700
 800748c:	50000600 	.word	0x50000600

08007490 <__NVIC_SetPriorityGrouping>:
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <__NVIC_SetPriorityGrouping+0x44>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074ac:	4013      	ands	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074c2:	4a04      	ldr	r2, [pc, #16]	; (80074d4 <__NVIC_SetPriorityGrouping+0x44>)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	60d3      	str	r3, [r2, #12]
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	e000ed00 	.word	0xe000ed00

080074d8 <__NVIC_GetPriorityGrouping>:
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074dc:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <__NVIC_GetPriorityGrouping+0x18>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	0a1b      	lsrs	r3, r3, #8
 80074e2:	f003 0307 	and.w	r3, r3, #7
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	e000ed00 	.word	0xe000ed00

080074f4 <__NVIC_EnableIRQ>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007502:	2b00      	cmp	r3, #0
 8007504:	db0b      	blt.n	800751e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	f003 021f 	and.w	r2, r3, #31
 800750c:	4907      	ldr	r1, [pc, #28]	; (800752c <__NVIC_EnableIRQ+0x38>)
 800750e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	2001      	movs	r0, #1
 8007516:	fa00 f202 	lsl.w	r2, r0, r2
 800751a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	e000e100 	.word	0xe000e100

08007530 <__NVIC_SetPriority>:
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800753c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007540:	2b00      	cmp	r3, #0
 8007542:	db0a      	blt.n	800755a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	b2da      	uxtb	r2, r3
 8007548:	490c      	ldr	r1, [pc, #48]	; (800757c <__NVIC_SetPriority+0x4c>)
 800754a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754e:	0112      	lsls	r2, r2, #4
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	440b      	add	r3, r1
 8007554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007558:	e00a      	b.n	8007570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	b2da      	uxtb	r2, r3
 800755e:	4908      	ldr	r1, [pc, #32]	; (8007580 <__NVIC_SetPriority+0x50>)
 8007560:	79fb      	ldrb	r3, [r7, #7]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	3b04      	subs	r3, #4
 8007568:	0112      	lsls	r2, r2, #4
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	440b      	add	r3, r1
 800756e:	761a      	strb	r2, [r3, #24]
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	e000e100 	.word	0xe000e100
 8007580:	e000ed00 	.word	0xe000ed00

08007584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007584:	b480      	push	{r7}
 8007586:	b089      	sub	sp, #36	; 0x24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f1c3 0307 	rsb	r3, r3, #7
 800759e:	2b04      	cmp	r3, #4
 80075a0:	bf28      	it	cs
 80075a2:	2304      	movcs	r3, #4
 80075a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	3304      	adds	r3, #4
 80075aa:	2b06      	cmp	r3, #6
 80075ac:	d902      	bls.n	80075b4 <NVIC_EncodePriority+0x30>
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	3b03      	subs	r3, #3
 80075b2:	e000      	b.n	80075b6 <NVIC_EncodePriority+0x32>
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b8:	f04f 32ff 	mov.w	r2, #4294967295
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	43da      	mvns	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	401a      	ands	r2, r3
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075cc:	f04f 31ff 	mov.w	r1, #4294967295
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	fa01 f303 	lsl.w	r3, r1, r3
 80075d6:	43d9      	mvns	r1, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075dc:	4313      	orrs	r3, r2
         );
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3724      	adds	r7, #36	; 0x24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075fc:	d301      	bcc.n	8007602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075fe:	2301      	movs	r3, #1
 8007600:	e00f      	b.n	8007622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007602:	4a0a      	ldr	r2, [pc, #40]	; (800762c <SysTick_Config+0x40>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3b01      	subs	r3, #1
 8007608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800760a:	210f      	movs	r1, #15
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	f7ff ff8e 	bl	8007530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <SysTick_Config+0x40>)
 8007616:	2200      	movs	r2, #0
 8007618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800761a:	4b04      	ldr	r3, [pc, #16]	; (800762c <SysTick_Config+0x40>)
 800761c:	2207      	movs	r2, #7
 800761e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	e000e010 	.word	0xe000e010

08007630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff ff29 	bl	8007490 <__NVIC_SetPriorityGrouping>
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	4603      	mov	r3, r0
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007654:	f7ff ff40 	bl	80074d8 <__NVIC_GetPriorityGrouping>
 8007658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	6978      	ldr	r0, [r7, #20]
 8007660:	f7ff ff90 	bl	8007584 <NVIC_EncodePriority>
 8007664:	4602      	mov	r2, r0
 8007666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff ff5f 	bl	8007530 <__NVIC_SetPriority>
}
 8007672:	bf00      	nop
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	4603      	mov	r3, r0
 8007682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff ff33 	bl	80074f4 <__NVIC_EnableIRQ>
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff ffa4 	bl	80075ec <SysTick_Config>
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d005      	beq.n	80076d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2204      	movs	r2, #4
 80076ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
 80076d0:	e037      	b.n	8007742 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 020e 	bic.w	r2, r2, #14
 80076e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	f003 021f 	and.w	r2, r3, #31
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	2101      	movs	r1, #1
 8007710:	fa01 f202 	lsl.w	r2, r1, r2
 8007714:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800771e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00c      	beq.n	8007742 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007736:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007740:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d00d      	beq.n	8007794 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2204      	movs	r2, #4
 800777c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
 8007792:	e047      	b.n	8007824 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 020e 	bic.w	r2, r2, #14
 80077a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0201 	bic.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c8:	f003 021f 	and.w	r2, r3, #31
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f202 	lsl.w	r2, r1, r2
 80077d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007802:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
    }
  }
  return status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e147      	b.n	8007ad2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fa fca4 	bl	80021a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0210 	bic.w	r2, r2, #16
 800786a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800786c:	f7fe fa2c 	bl	8005cc8 <HAL_GetTick>
 8007870:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007872:	e012      	b.n	800789a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007874:	f7fe fa28 	bl	8005cc8 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b0a      	cmp	r3, #10
 8007880:	d90b      	bls.n	800789a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007886:	f043 0201 	orr.w	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2203      	movs	r2, #3
 8007892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e11b      	b.n	8007ad2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d0e5      	beq.n	8007874 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0201 	orr.w	r2, r2, #1
 80078b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078b8:	f7fe fa06 	bl	8005cc8 <HAL_GetTick>
 80078bc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80078be:	e012      	b.n	80078e6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078c0:	f7fe fa02 	bl	8005cc8 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b0a      	cmp	r3, #10
 80078cc:	d90b      	bls.n	80078e6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d2:	f043 0201 	orr.w	r2, r3, #1
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2203      	movs	r2, #3
 80078de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e0f5      	b.n	8007ad2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0e5      	beq.n	80078c0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0202 	orr.w	r2, r2, #2
 8007902:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a74      	ldr	r2, [pc, #464]	; (8007adc <HAL_FDCAN_Init+0x2ac>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d103      	bne.n	8007916 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800790e:	4a74      	ldr	r2, [pc, #464]	; (8007ae0 <HAL_FDCAN_Init+0x2b0>)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7c1b      	ldrb	r3, [r3, #16]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d108      	bne.n	8007930 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699a      	ldr	r2, [r3, #24]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800792c:	619a      	str	r2, [r3, #24]
 800792e:	e007      	b.n	8007940 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7c5b      	ldrb	r3, [r3, #17]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d108      	bne.n	800795a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007956:	619a      	str	r2, [r3, #24]
 8007958:	e007      	b.n	800796a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007968:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7c9b      	ldrb	r3, [r3, #18]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d108      	bne.n	8007984 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699a      	ldr	r2, [r3, #24]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007980:	619a      	str	r2, [r3, #24]
 8007982:	e007      	b.n	8007994 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007992:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80079b8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0210 	bic.w	r2, r2, #16
 80079c8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d108      	bne.n	80079e4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f042 0204 	orr.w	r2, r2, #4
 80079e0:	619a      	str	r2, [r3, #24]
 80079e2:	e02c      	b.n	8007a3e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d028      	beq.n	8007a3e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d01c      	beq.n	8007a2e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a02:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691a      	ldr	r2, [r3, #16]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0210 	orr.w	r2, r2, #16
 8007a12:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d110      	bne.n	8007a3e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0220 	orr.w	r2, r2, #32
 8007a2a:	619a      	str	r2, [r3, #24]
 8007a2c:	e007      	b.n	8007a3e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699a      	ldr	r2, [r3, #24]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0220 	orr.w	r2, r2, #32
 8007a3c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a4e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a56:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a66:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a68:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a72:	d115      	bne.n	8007aa0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a82:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a8c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	3b01      	subs	r3, #1
 8007a96:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a9c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a9e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fc36 	bl	8008328 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40006400 	.word	0x40006400
 8007ae0:	40006500 	.word	0x40006500

08007ae4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007af4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d002      	beq.n	8007b02 <HAL_FDCAN_ConfigFilter+0x1e>
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d13d      	bne.n	8007b7e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d119      	bne.n	8007b3e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b16:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007b1e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	e01d      	b.n	8007b7a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	075a      	lsls	r2, r3, #29
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	079a      	lsls	r2, r3, #30
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	4413      	add	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	3304      	adds	r3, #4
 8007b72:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e006      	b.n	8007b8c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b82:	f043 0202 	orr.w	r2, r3, #2
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d116      	bne.n	8007be0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bba:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	011a      	lsls	r2, r3, #4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e006      	b.n	8007bee <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be4:	f043 0204 	orr.w	r2, r3, #4
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d110      	bne.n	8007c30 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0201 	bic.w	r2, r2, #1
 8007c24:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e006      	b.n	8007c3e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c34:	f043 0204 	orr.w	r2, r3, #4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
  }
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b08b      	sub	sp, #44	; 0x2c
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c60:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007c62:	7efb      	ldrb	r3, [r7, #27]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	f040 80bc 	bne.w	8007de2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d121      	bne.n	8007cb4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d107      	bne.n	8007c90 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0af      	b.n	8007df0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	0a1b      	lsrs	r3, r3, #8
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	4413      	add	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	440b      	add	r3, r1
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb2:	e020      	b.n	8007cf6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d107      	bne.n	8007cd4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e08d      	b.n	8007df0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cdc:	0a1b      	lsrs	r3, r3, #8
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	4413      	add	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	440b      	add	r3, r1
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d107      	bne.n	8007d1a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	0c9b      	lsrs	r3, r3, #18
 8007d10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	e005      	b.n	8007d26 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	3304      	adds	r3, #4
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	0e1b      	lsrs	r3, r3, #24
 8007d78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	0fda      	lsrs	r2, r3, #31
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007d94:	2300      	movs	r3, #0
 8007d96:	623b      	str	r3, [r7, #32]
 8007d98:	e00a      	b.n	8007db0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	441a      	add	r2, r3
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	440b      	add	r3, r1
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	3301      	adds	r3, #1
 8007dae:	623b      	str	r3, [r7, #32]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	0c1b      	lsrs	r3, r3, #16
 8007db6:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007db8:	5cd3      	ldrb	r3, [r2, r3]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d3eb      	bcc.n	8007d9a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	d105      	bne.n	8007dd4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69fa      	ldr	r2, [r7, #28]
 8007dce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007dd2:	e004      	b.n	8007dde <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e006      	b.n	8007df0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de6:	f043 0208 	orr.w	r2, r3, #8
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	372c      	adds	r7, #44	; 0x2c
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	08013348 	.word	0x08013348

08007e00 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e12:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d003      	beq.n	8007e22 <HAL_FDCAN_ActivateNotification+0x22>
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	f040 80c8 	bne.w	8007fb2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e28:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d03b      	beq.n	8007eb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d004      	beq.n	8007e52 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d031      	beq.n	8007eb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d027      	beq.n	8007eb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f003 0308 	and.w	r3, r3, #8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01d      	beq.n	8007eb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f003 0310 	and.w	r3, r3, #16
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d013      	beq.n	8007eb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d107      	bne.n	8007ec6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0201 	orr.w	r2, r2, #1
 8007ec4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d004      	beq.n	8007eda <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d13b      	bne.n	8007f52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d004      	beq.n	8007eee <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d131      	bne.n	8007f52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d127      	bne.n	8007f52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d11d      	bne.n	8007f52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d113      	bne.n	8007f52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00c      	beq.n	8007f62 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0202 	orr.w	r2, r2, #2
 8007f60:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e006      	b.n	8007fc0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb6:	f043 0202 	orr.w	r2, r3, #2
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
  }
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fda:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe8:	4013      	ands	r3, r2
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffe:	6a3a      	ldr	r2, [r7, #32]
 8008000:	4013      	ands	r3, r2
 8008002:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800800e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	4013      	ands	r3, r2
 800801a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008022:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8008026:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	4013      	ands	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800803e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4013      	ands	r3, r2
 800804a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2240      	movs	r2, #64	; 0x40
 800806e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f939 	bl	80082e8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01b      	beq.n	80080bc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808e:	2b00      	cmp	r3, #0
 8008090:	d014      	beq.n	80080bc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800809a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4013      	ands	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080b2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80080b4:	6939      	ldr	r1, [r7, #16]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f8f7 	bl	80082aa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80080ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f8b6 	bl	800823e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a3a      	ldr	r2, [r7, #32]
 80080de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80080e0:	6a39      	ldr	r1, [r7, #32]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f8b6 	bl	8008254 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80080f6:	69f9      	ldr	r1, [r7, #28]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f8b6 	bl	800826a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00e      	beq.n	800812a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008122:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f8ab 	bl	8008280 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01a      	beq.n	800816e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d013      	beq.n	800816e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800814e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4013      	ands	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2280      	movs	r2, #128	; 0x80
 8008164:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f893 	bl	8008294 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008192:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f893 	bl	80082c0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80081be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f887 	bl	80082d4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d011      	beq.n	80081f8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80081ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008206:	6979      	ldr	r1, [r7, #20]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f881 	bl	8008310 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d009      	beq.n	8008228 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	431a      	orrs	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f863 	bl	80082fc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008236:	bf00      	nop
 8008238:	3728      	adds	r7, #40	; 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008330:	4b30      	ldr	r3, [pc, #192]	; (80083f4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008332:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a2f      	ldr	r2, [pc, #188]	; (80083f8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d103      	bne.n	8008346 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008344:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a2c      	ldr	r2, [pc, #176]	; (80083fc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d103      	bne.n	8008358 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008356:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008366:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836e:	041a      	lsls	r2, r3, #16
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800838c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	061a      	lsls	r2, r3, #24
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	e005      	b.n	80083da <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3304      	adds	r3, #4
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d3f3      	bcc.n	80083ce <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80083e6:	bf00      	nop
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	4000a400 	.word	0x4000a400
 80083f8:	40006800 	.word	0x40006800
 80083fc:	40006c00 	.word	0x40006c00

08008400 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008412:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <HAL_FLASH_Program+0xa4>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d101      	bne.n	800841e <HAL_FLASH_Program+0x1e>
 800841a:	2302      	movs	r3, #2
 800841c:	e03e      	b.n	800849c <HAL_FLASH_Program+0x9c>
 800841e:	4b21      	ldr	r3, [pc, #132]	; (80084a4 <HAL_FLASH_Program+0xa4>)
 8008420:	2201      	movs	r2, #1
 8008422:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008428:	f000 f8be 	bl	80085a8 <FLASH_WaitForLastOperation>
 800842c:	4603      	mov	r3, r0
 800842e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d12e      	bne.n	8008494 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008436:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <HAL_FLASH_Program+0xa4>)
 8008438:	2200      	movs	r2, #0
 800843a:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d107      	bne.n	8008452 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008446:	68b8      	ldr	r0, [r7, #8]
 8008448:	f000 f902 	bl	8008650 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800844c:	2301      	movs	r3, #1
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	e010      	b.n	8008474 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d002      	beq.n	800845e <HAL_FLASH_Program+0x5e>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d10a      	bne.n	8008474 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	4619      	mov	r1, r3
 8008462:	68b8      	ldr	r0, [r7, #8]
 8008464:	f000 f91a 	bl	800869c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d102      	bne.n	8008474 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 800846e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008472:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008478:	f000 f896 	bl	80085a8 <FLASH_WaitForLastOperation>
 800847c:	4603      	mov	r3, r0
 800847e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008486:	4b08      	ldr	r3, [pc, #32]	; (80084a8 <HAL_FLASH_Program+0xa8>)
 8008488:	695a      	ldr	r2, [r3, #20]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	43db      	mvns	r3, r3
 800848e:	4906      	ldr	r1, [pc, #24]	; (80084a8 <HAL_FLASH_Program+0xa8>)
 8008490:	4013      	ands	r3, r2
 8008492:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008494:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <HAL_FLASH_Program+0xa4>)
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	2000000c 	.word	0x2000000c
 80084a8:	40022000 	.word	0x40022000

080084ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <HAL_FLASH_Unlock+0x38>)
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da0b      	bge.n	80084d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <HAL_FLASH_Unlock+0x38>)
 80084c0:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <HAL_FLASH_Unlock+0x3c>)
 80084c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <HAL_FLASH_Unlock+0x38>)
 80084c6:	4a09      	ldr	r2, [pc, #36]	; (80084ec <HAL_FLASH_Unlock+0x40>)
 80084c8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <HAL_FLASH_Unlock+0x38>)
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	da01      	bge.n	80084d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80084d6:	79fb      	ldrb	r3, [r7, #7]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	40022000 	.word	0x40022000
 80084e8:	45670123 	.word	0x45670123
 80084ec:	cdef89ab 	.word	0xcdef89ab

080084f0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <HAL_FLASH_Lock+0x30>)
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	4a08      	ldr	r2, [pc, #32]	; (8008520 <HAL_FLASH_Lock+0x30>)
 8008500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008504:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008506:	4b06      	ldr	r3, [pc, #24]	; (8008520 <HAL_FLASH_Lock+0x30>)
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	2b00      	cmp	r3, #0
 800850c:	da01      	bge.n	8008512 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008512:	79fb      	ldrb	r3, [r7, #7]
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	40022000 	.word	0x40022000

08008524 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800852e:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <HAL_FLASH_OB_Unlock+0x40>)
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00d      	beq.n	8008556 <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800853a:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <HAL_FLASH_OB_Unlock+0x40>)
 800853c:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <HAL_FLASH_OB_Unlock+0x44>)
 800853e:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8008540:	4b08      	ldr	r3, [pc, #32]	; (8008564 <HAL_FLASH_OB_Unlock+0x40>)
 8008542:	4a0a      	ldr	r2, [pc, #40]	; (800856c <HAL_FLASH_OB_Unlock+0x48>)
 8008544:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <HAL_FLASH_OB_Unlock+0x40>)
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008556:	79fb      	ldrb	r3, [r7, #7]
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	40022000 	.word	0x40022000
 8008568:	08192a3b 	.word	0x08192a3b
 800856c:	4c5d6e7f 	.word	0x4c5d6e7f

08008570 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800857a:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <HAL_FLASH_OB_Lock+0x34>)
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	4a09      	ldr	r2, [pc, #36]	; (80085a4 <HAL_FLASH_OB_Lock+0x34>)
 8008580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008584:	6153      	str	r3, [r2, #20]

  /* Verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8008586:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <HAL_FLASH_OB_Lock+0x34>)
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008596:	79fb      	ldrb	r3, [r7, #7]
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	40022000 	.word	0x40022000

080085a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80085b0:	f7fd fb8a 	bl	8005cc8 <HAL_GetTick>
 80085b4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80085b6:	e009      	b.n	80085cc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80085b8:	f7fd fb86 	bl	8005cc8 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d201      	bcs.n	80085cc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e038      	b.n	800863e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80085cc:	4b1e      	ldr	r3, [pc, #120]	; (8008648 <FLASH_WaitForLastOperation+0xa0>)
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d8:	d0ee      	beq.n	80085b8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80085da:	4b1b      	ldr	r3, [pc, #108]	; (8008648 <FLASH_WaitForLastOperation+0xa0>)
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80085e2:	4013      	ands	r3, r2
 80085e4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01e      	beq.n	800862a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80085ec:	4b17      	ldr	r3, [pc, #92]	; (800864c <FLASH_WaitForLastOperation+0xa4>)
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	4a15      	ldr	r2, [pc, #84]	; (800864c <FLASH_WaitForLastOperation+0xa4>)
 80085f6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <FLASH_WaitForLastOperation+0x6a>
 8008602:	4b11      	ldr	r3, [pc, #68]	; (8008648 <FLASH_WaitForLastOperation+0xa0>)
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800860c:	490e      	ldr	r1, [pc, #56]	; (8008648 <FLASH_WaitForLastOperation+0xa0>)
 800860e:	4313      	orrs	r3, r2
 8008610:	618b      	str	r3, [r1, #24]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <FLASH_WaitForLastOperation+0x7e>
 800861c:	4a0a      	ldr	r2, [pc, #40]	; (8008648 <FLASH_WaitForLastOperation+0xa0>)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008624:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e009      	b.n	800863e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <FLASH_WaitForLastOperation+0xa0>)
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b01      	cmp	r3, #1
 8008634:	d102      	bne.n	800863c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008636:	4b04      	ldr	r3, [pc, #16]	; (8008648 <FLASH_WaitForLastOperation+0xa0>)
 8008638:	2201      	movs	r2, #1
 800863a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40022000 	.word	0x40022000
 800864c:	2000000c 	.word	0x2000000c

08008650 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <FLASH_Program_DoubleWord+0x48>)
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	4a0d      	ldr	r2, [pc, #52]	; (8008698 <FLASH_Program_DoubleWord+0x48>)
 8008662:	f043 0301 	orr.w	r3, r3, #1
 8008666:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800866e:	f3bf 8f6f 	isb	sy
}
 8008672:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	000a      	movs	r2, r1
 8008682:	2300      	movs	r3, #0
 8008684:	68f9      	ldr	r1, [r7, #12]
 8008686:	3104      	adds	r1, #4
 8008688:	4613      	mov	r3, r2
 800868a:	600b      	str	r3, [r1, #0]
}
 800868c:	bf00      	nop
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	40022000 	.word	0x40022000

0800869c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	; 0x24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80086a6:	2340      	movs	r3, #64	; 0x40
 80086a8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <FLASH_Program_Fast+0x68>)
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	4a13      	ldr	r2, [pc, #76]	; (8008704 <FLASH_Program_Fast+0x68>)
 80086b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086be:	f3ef 8310 	mrs	r3, PRIMASK
 80086c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80086c4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80086c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80086c8:	b672      	cpsid	i
}
 80086ca:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	3304      	adds	r3, #4
 80086d8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	3304      	adds	r3, #4
 80086de:	617b      	str	r3, [r7, #20]
    row_index--;
 80086e0:	7ffb      	ldrb	r3, [r7, #31]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80086e6:	7ffb      	ldrb	r3, [r7, #31]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1ef      	bne.n	80086cc <FLASH_Program_Fast+0x30>
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f383 8810 	msr	PRIMASK, r3
}
 80086f6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80086f8:	bf00      	nop
 80086fa:	3724      	adds	r7, #36	; 0x24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	40022000 	.word	0x40022000

08008708 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008712:	4b4c      	ldr	r3, [pc, #304]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d101      	bne.n	800871e <HAL_FLASHEx_Erase+0x16>
 800871a:	2302      	movs	r3, #2
 800871c:	e08d      	b.n	800883a <HAL_FLASHEx_Erase+0x132>
 800871e:	4b49      	ldr	r3, [pc, #292]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008728:	f7ff ff3e 	bl	80085a8 <FLASH_WaitForLastOperation>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d17d      	bne.n	8008832 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008736:	4b43      	ldr	r3, [pc, #268]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 8008738:	2200      	movs	r2, #0
 800873a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800873c:	4b42      	ldr	r3, [pc, #264]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008744:	2b00      	cmp	r3, #0
 8008746:	d019      	beq.n	800877c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008748:	4b3f      	ldr	r3, [pc, #252]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a3e      	ldr	r2, [pc, #248]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 800874e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008752:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008754:	4b3c      	ldr	r3, [pc, #240]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008760:	4b39      	ldr	r3, [pc, #228]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a38      	ldr	r2, [pc, #224]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 8008766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800876a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800876c:	4b35      	ldr	r3, [pc, #212]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 800876e:	2203      	movs	r2, #3
 8008770:	771a      	strb	r2, [r3, #28]
 8008772:	e016      	b.n	80087a2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008774:	4b33      	ldr	r3, [pc, #204]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 8008776:	2201      	movs	r2, #1
 8008778:	771a      	strb	r2, [r3, #28]
 800877a:	e012      	b.n	80087a2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800877c:	4b32      	ldr	r3, [pc, #200]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008784:	2b00      	cmp	r3, #0
 8008786:	d009      	beq.n	800879c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008788:	4b2f      	ldr	r3, [pc, #188]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a2e      	ldr	r2, [pc, #184]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 800878e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008792:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008794:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 8008796:	2202      	movs	r2, #2
 8008798:	771a      	strb	r2, [r3, #28]
 800879a:	e002      	b.n	80087a2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800879c:	4b29      	ldr	r3, [pc, #164]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d113      	bne.n	80087d2 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f84c 	bl	800884c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80087b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087b8:	f7ff fef6 	bl	80085a8 <FLASH_WaitForLastOperation>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80087c0:	4b21      	ldr	r3, [pc, #132]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	4a20      	ldr	r2, [pc, #128]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 80087c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087ca:	f023 0304 	bic.w	r3, r3, #4
 80087ce:	6153      	str	r3, [r2, #20]
 80087d0:	e02d      	b.n	800882e <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	60bb      	str	r3, [r7, #8]
 80087e0:	e01d      	b.n	800881e <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	4619      	mov	r1, r3
 80087e8:	68b8      	ldr	r0, [r7, #8]
 80087ea:	f000 f867 	bl	80088bc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80087ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087f2:	f7ff fed9 	bl	80085a8 <FLASH_WaitForLastOperation>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80087fa:	4b13      	ldr	r3, [pc, #76]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	4a12      	ldr	r2, [pc, #72]	; (8008848 <HAL_FLASHEx_Erase+0x140>)
 8008800:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8008804:	f023 0302 	bic.w	r3, r3, #2
 8008808:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	601a      	str	r2, [r3, #0]
          break;
 8008816:	e00a      	b.n	800882e <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3301      	adds	r3, #1
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	4413      	add	r3, r2
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	429a      	cmp	r2, r3
 800882c:	d3d9      	bcc.n	80087e2 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800882e:	f000 f889 	bl	8008944 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <HAL_FLASHEx_Erase+0x13c>)
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]

  return status;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	2000000c 	.word	0x2000000c
 8008848:	40022000 	.word	0x40022000

0800884c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8008854:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <FLASH_MassErase+0x6c>)
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d016      	beq.n	800888e <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800886a:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <FLASH_MassErase+0x6c>)
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <FLASH_MassErase+0x6c>)
 8008870:	f043 0304 	orr.w	r3, r3, #4
 8008874:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00e      	beq.n	800889e <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8008880:	4b0d      	ldr	r3, [pc, #52]	; (80088b8 <FLASH_MassErase+0x6c>)
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	4a0c      	ldr	r2, [pc, #48]	; (80088b8 <FLASH_MassErase+0x6c>)
 8008886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800888a:	6153      	str	r3, [r2, #20]
 800888c:	e007      	b.n	800889e <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800888e:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <FLASH_MassErase+0x6c>)
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	4a09      	ldr	r2, [pc, #36]	; (80088b8 <FLASH_MassErase+0x6c>)
 8008894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008898:	f043 0304 	orr.w	r3, r3, #4
 800889c:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800889e:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <FLASH_MassErase+0x6c>)
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	4a05      	ldr	r2, [pc, #20]	; (80088b8 <FLASH_MassErase+0x6c>)
 80088a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088a8:	6153      	str	r3, [r2, #20]
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	40022000 	.word	0x40022000

080088bc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80088c6:	4b1e      	ldr	r3, [pc, #120]	; (8008940 <FLASH_PageErase+0x84>)
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d106      	bne.n	80088e0 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80088d2:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <FLASH_PageErase+0x84>)
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	4a1a      	ldr	r2, [pc, #104]	; (8008940 <FLASH_PageErase+0x84>)
 80088d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088dc:	6153      	str	r3, [r2, #20]
 80088de:	e011      	b.n	8008904 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80088ea:	4b15      	ldr	r3, [pc, #84]	; (8008940 <FLASH_PageErase+0x84>)
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	4a14      	ldr	r2, [pc, #80]	; (8008940 <FLASH_PageErase+0x84>)
 80088f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088f4:	6153      	str	r3, [r2, #20]
 80088f6:	e005      	b.n	8008904 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80088f8:	4b11      	ldr	r3, [pc, #68]	; (8008940 <FLASH_PageErase+0x84>)
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	4a10      	ldr	r2, [pc, #64]	; (8008940 <FLASH_PageErase+0x84>)
 80088fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008902:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <FLASH_PageErase+0x84>)
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008914:	490a      	ldr	r1, [pc, #40]	; (8008940 <FLASH_PageErase+0x84>)
 8008916:	4313      	orrs	r3, r2
 8008918:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <FLASH_PageErase+0x84>)
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	4a08      	ldr	r2, [pc, #32]	; (8008940 <FLASH_PageErase+0x84>)
 8008920:	f043 0302 	orr.w	r3, r3, #2
 8008924:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008926:	4b06      	ldr	r3, [pc, #24]	; (8008940 <FLASH_PageErase+0x84>)
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	4a05      	ldr	r2, [pc, #20]	; (8008940 <FLASH_PageErase+0x84>)
 800892c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008930:	6153      	str	r3, [r2, #20]
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40022000 	.word	0x40022000

08008944 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800894a:	4b1e      	ldr	r3, [pc, #120]	; (80089c4 <FLASH_FlushCaches+0x80>)
 800894c:	7f1b      	ldrb	r3, [r3, #28]
 800894e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d002      	beq.n	800895c <FLASH_FlushCaches+0x18>
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	2b03      	cmp	r3, #3
 800895a:	d111      	bne.n	8008980 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <FLASH_FlushCaches+0x84>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <FLASH_FlushCaches+0x84>)
 8008962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	4b17      	ldr	r3, [pc, #92]	; (80089c8 <FLASH_FlushCaches+0x84>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a16      	ldr	r2, [pc, #88]	; (80089c8 <FLASH_FlushCaches+0x84>)
 800896e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008972:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008974:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <FLASH_FlushCaches+0x84>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a13      	ldr	r2, [pc, #76]	; (80089c8 <FLASH_FlushCaches+0x84>)
 800897a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800897e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d002      	beq.n	800898c <FLASH_FlushCaches+0x48>
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	2b03      	cmp	r3, #3
 800898a:	d111      	bne.n	80089b0 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <FLASH_FlushCaches+0x84>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a0d      	ldr	r2, [pc, #52]	; (80089c8 <FLASH_FlushCaches+0x84>)
 8008992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <FLASH_FlushCaches+0x84>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <FLASH_FlushCaches+0x84>)
 800899e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <FLASH_FlushCaches+0x84>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a07      	ldr	r2, [pc, #28]	; (80089c8 <FLASH_FlushCaches+0x84>)
 80089aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089ae:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80089b0:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <FLASH_FlushCaches+0x80>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	771a      	strb	r2, [r3, #28]
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	2000000c 	.word	0x2000000c
 80089c8:	40022000 	.word	0x40022000

080089cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80089da:	e15a      	b.n	8008c92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	2101      	movs	r1, #1
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	fa01 f303 	lsl.w	r3, r1, r3
 80089e8:	4013      	ands	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 814c 	beq.w	8008c8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d00b      	beq.n	8008a14 <HAL_GPIO_Init+0x48>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d007      	beq.n	8008a14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a08:	2b11      	cmp	r3, #17
 8008a0a:	d003      	beq.n	8008a14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b12      	cmp	r3, #18
 8008a12:	d130      	bne.n	8008a76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	2203      	movs	r2, #3
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	43db      	mvns	r3, r3
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	43db      	mvns	r3, r3
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4013      	ands	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	091b      	lsrs	r3, r3, #4
 8008a60:	f003 0201 	and.w	r2, r3, #1
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	2203      	movs	r2, #3
 8008a82:	fa02 f303 	lsl.w	r3, r2, r3
 8008a86:	43db      	mvns	r3, r3
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d003      	beq.n	8008ab6 <HAL_GPIO_Init+0xea>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b12      	cmp	r3, #18
 8008ab4:	d123      	bne.n	8008afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	08da      	lsrs	r2, r3, #3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3208      	adds	r2, #8
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	220f      	movs	r2, #15
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	08da      	lsrs	r2, r3, #3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3208      	adds	r2, #8
 8008af8:	6939      	ldr	r1, [r7, #16]
 8008afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	2203      	movs	r2, #3
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	43db      	mvns	r3, r3
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4013      	ands	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f003 0203 	and.w	r2, r3, #3
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80a6 	beq.w	8008c8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b40:	4b5b      	ldr	r3, [pc, #364]	; (8008cb0 <HAL_GPIO_Init+0x2e4>)
 8008b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b44:	4a5a      	ldr	r2, [pc, #360]	; (8008cb0 <HAL_GPIO_Init+0x2e4>)
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	6613      	str	r3, [r2, #96]	; 0x60
 8008b4c:	4b58      	ldr	r3, [pc, #352]	; (8008cb0 <HAL_GPIO_Init+0x2e4>)
 8008b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	60bb      	str	r3, [r7, #8]
 8008b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b58:	4a56      	ldr	r2, [pc, #344]	; (8008cb4 <HAL_GPIO_Init+0x2e8>)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	089b      	lsrs	r3, r3, #2
 8008b5e:	3302      	adds	r3, #2
 8008b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	220f      	movs	r2, #15
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43db      	mvns	r3, r3
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008b82:	d01f      	beq.n	8008bc4 <HAL_GPIO_Init+0x1f8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a4c      	ldr	r2, [pc, #304]	; (8008cb8 <HAL_GPIO_Init+0x2ec>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d019      	beq.n	8008bc0 <HAL_GPIO_Init+0x1f4>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a4b      	ldr	r2, [pc, #300]	; (8008cbc <HAL_GPIO_Init+0x2f0>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d013      	beq.n	8008bbc <HAL_GPIO_Init+0x1f0>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a4a      	ldr	r2, [pc, #296]	; (8008cc0 <HAL_GPIO_Init+0x2f4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00d      	beq.n	8008bb8 <HAL_GPIO_Init+0x1ec>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a49      	ldr	r2, [pc, #292]	; (8008cc4 <HAL_GPIO_Init+0x2f8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d007      	beq.n	8008bb4 <HAL_GPIO_Init+0x1e8>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a48      	ldr	r2, [pc, #288]	; (8008cc8 <HAL_GPIO_Init+0x2fc>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d101      	bne.n	8008bb0 <HAL_GPIO_Init+0x1e4>
 8008bac:	2305      	movs	r3, #5
 8008bae:	e00a      	b.n	8008bc6 <HAL_GPIO_Init+0x1fa>
 8008bb0:	2306      	movs	r3, #6
 8008bb2:	e008      	b.n	8008bc6 <HAL_GPIO_Init+0x1fa>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	e006      	b.n	8008bc6 <HAL_GPIO_Init+0x1fa>
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e004      	b.n	8008bc6 <HAL_GPIO_Init+0x1fa>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e002      	b.n	8008bc6 <HAL_GPIO_Init+0x1fa>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_GPIO_Init+0x1fa>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	f002 0203 	and.w	r2, r2, #3
 8008bcc:	0092      	lsls	r2, r2, #2
 8008bce:	4093      	lsls	r3, r2
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bd6:	4937      	ldr	r1, [pc, #220]	; (8008cb4 <HAL_GPIO_Init+0x2e8>)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	3302      	adds	r3, #2
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008be4:	4b39      	ldr	r3, [pc, #228]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	43db      	mvns	r3, r3
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008c08:	4a30      	ldr	r2, [pc, #192]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008c0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	43db      	mvns	r3, r3
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008c32:	4a26      	ldr	r2, [pc, #152]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c38:	4b24      	ldr	r3, [pc, #144]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	43db      	mvns	r3, r3
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4013      	ands	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008c5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008c62:	4b1a      	ldr	r3, [pc, #104]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008c86:	4a11      	ldr	r2, [pc, #68]	; (8008ccc <HAL_GPIO_Init+0x300>)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f47f ae9d 	bne.w	80089dc <HAL_GPIO_Init+0x10>
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40021000 	.word	0x40021000
 8008cb4:	40010000 	.word	0x40010000
 8008cb8:	48000400 	.word	0x48000400
 8008cbc:	48000800 	.word	0x48000800
 8008cc0:	48000c00 	.word	0x48000c00
 8008cc4:	48001000 	.word	0x48001000
 8008cc8:	48001400 	.word	0x48001400
 8008ccc:	40010400 	.word	0x40010400

08008cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	807b      	strh	r3, [r7, #2]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ce0:	787b      	ldrb	r3, [r7, #1]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ce6:	887a      	ldrh	r2, [r7, #2]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008cec:	e002      	b.n	8008cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008cee:	887a      	ldrh	r2, [r7, #2]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d141      	bne.n	8008d92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d0e:	4b4b      	ldr	r3, [pc, #300]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d1a:	d131      	bne.n	8008d80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d1c:	4b47      	ldr	r3, [pc, #284]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d22:	4a46      	ldr	r2, [pc, #280]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d2c:	4b43      	ldr	r3, [pc, #268]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008d34:	4a41      	ldr	r2, [pc, #260]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d3c:	4b40      	ldr	r3, [pc, #256]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2232      	movs	r2, #50	; 0x32
 8008d42:	fb02 f303 	mul.w	r3, r2, r3
 8008d46:	4a3f      	ldr	r2, [pc, #252]	; (8008e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d48:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4c:	0c9b      	lsrs	r3, r3, #18
 8008d4e:	3301      	adds	r3, #1
 8008d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d52:	e002      	b.n	8008d5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d5a:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d66:	d102      	bne.n	8008d6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1f2      	bne.n	8008d54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d6e:	4b33      	ldr	r3, [pc, #204]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d7a:	d158      	bne.n	8008e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e057      	b.n	8008e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d80:	4b2e      	ldr	r3, [pc, #184]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d86:	4a2d      	ldr	r2, [pc, #180]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008d90:	e04d      	b.n	8008e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d98:	d141      	bne.n	8008e1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d9a:	4b28      	ldr	r3, [pc, #160]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008da6:	d131      	bne.n	8008e0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008da8:	4b24      	ldr	r3, [pc, #144]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dae:	4a23      	ldr	r2, [pc, #140]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008db8:	4b20      	ldr	r3, [pc, #128]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008dc0:	4a1e      	ldr	r2, [pc, #120]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2232      	movs	r2, #50	; 0x32
 8008dce:	fb02 f303 	mul.w	r3, r2, r3
 8008dd2:	4a1c      	ldr	r2, [pc, #112]	; (8008e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd8:	0c9b      	lsrs	r3, r3, #18
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008dde:	e002      	b.n	8008de6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df2:	d102      	bne.n	8008dfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f2      	bne.n	8008de0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008dfa:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e06:	d112      	bne.n	8008e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e011      	b.n	8008e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e0c:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e12:	4a0a      	ldr	r2, [pc, #40]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008e1c:	e007      	b.n	8008e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e26:	4a05      	ldr	r2, [pc, #20]	; (8008e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	40007000 	.word	0x40007000
 8008e40:	20000000 	.word	0x20000000
 8008e44:	431bde83 	.word	0x431bde83

08008e48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008e4c:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	4a04      	ldr	r2, [pc, #16]	; (8008e64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e56:	6093      	str	r3, [r2, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40007000 	.word	0x40007000

08008e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e308      	b.n	800948c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d075      	beq.n	8008f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e86:	4ba3      	ldr	r3, [pc, #652]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f003 030c 	and.w	r3, r3, #12
 8008e8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e90:	4ba0      	ldr	r3, [pc, #640]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f003 0303 	and.w	r3, r3, #3
 8008e98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b0c      	cmp	r3, #12
 8008e9e:	d102      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x3e>
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d002      	beq.n	8008eac <HAL_RCC_OscConfig+0x44>
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d10b      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eac:	4b99      	ldr	r3, [pc, #612]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d05b      	beq.n	8008f70 <HAL_RCC_OscConfig+0x108>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d157      	bne.n	8008f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e2e3      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ecc:	d106      	bne.n	8008edc <HAL_RCC_OscConfig+0x74>
 8008ece:	4b91      	ldr	r3, [pc, #580]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a90      	ldr	r2, [pc, #576]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	e01d      	b.n	8008f18 <HAL_RCC_OscConfig+0xb0>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ee4:	d10c      	bne.n	8008f00 <HAL_RCC_OscConfig+0x98>
 8008ee6:	4b8b      	ldr	r3, [pc, #556]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a8a      	ldr	r2, [pc, #552]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	4b88      	ldr	r3, [pc, #544]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a87      	ldr	r2, [pc, #540]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	e00b      	b.n	8008f18 <HAL_RCC_OscConfig+0xb0>
 8008f00:	4b84      	ldr	r3, [pc, #528]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a83      	ldr	r2, [pc, #524]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	4b81      	ldr	r3, [pc, #516]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a80      	ldr	r2, [pc, #512]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d013      	beq.n	8008f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f20:	f7fc fed2 	bl	8005cc8 <HAL_GetTick>
 8008f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f28:	f7fc fece 	bl	8005cc8 <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b64      	cmp	r3, #100	; 0x64
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e2a8      	b.n	800948c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f3a:	4b76      	ldr	r3, [pc, #472]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0f0      	beq.n	8008f28 <HAL_RCC_OscConfig+0xc0>
 8008f46:	e014      	b.n	8008f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f48:	f7fc febe 	bl	8005cc8 <HAL_GetTick>
 8008f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f4e:	e008      	b.n	8008f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f50:	f7fc feba 	bl	8005cc8 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b64      	cmp	r3, #100	; 0x64
 8008f5c:	d901      	bls.n	8008f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e294      	b.n	800948c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f62:	4b6c      	ldr	r3, [pc, #432]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f0      	bne.n	8008f50 <HAL_RCC_OscConfig+0xe8>
 8008f6e:	e000      	b.n	8008f72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d075      	beq.n	800906a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f7e:	4b65      	ldr	r3, [pc, #404]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 030c 	and.w	r3, r3, #12
 8008f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f88:	4b62      	ldr	r3, [pc, #392]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0303 	and.w	r3, r3, #3
 8008f90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b0c      	cmp	r3, #12
 8008f96:	d102      	bne.n	8008f9e <HAL_RCC_OscConfig+0x136>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d002      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x13c>
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d11f      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fa4:	4b5b      	ldr	r3, [pc, #364]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <HAL_RCC_OscConfig+0x154>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e267      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fbc:	4b55      	ldr	r3, [pc, #340]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	061b      	lsls	r3, r3, #24
 8008fca:	4952      	ldr	r1, [pc, #328]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008fd0:	4b51      	ldr	r3, [pc, #324]	; (8009118 <HAL_RCC_OscConfig+0x2b0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fc fe2b 	bl	8005c30 <HAL_InitTick>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d043      	beq.n	8009068 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e253      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d023      	beq.n	8009034 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fec:	4b49      	ldr	r3, [pc, #292]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a48      	ldr	r2, [pc, #288]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8008ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff8:	f7fc fe66 	bl	8005cc8 <HAL_GetTick>
 8008ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ffe:	e008      	b.n	8009012 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009000:	f7fc fe62 	bl	8005cc8 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	2b02      	cmp	r3, #2
 800900c:	d901      	bls.n	8009012 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e23c      	b.n	800948c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009012:	4b40      	ldr	r3, [pc, #256]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0f0      	beq.n	8009000 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800901e:	4b3d      	ldr	r3, [pc, #244]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	061b      	lsls	r3, r3, #24
 800902c:	4939      	ldr	r1, [pc, #228]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 800902e:	4313      	orrs	r3, r2
 8009030:	604b      	str	r3, [r1, #4]
 8009032:	e01a      	b.n	800906a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009034:	4b37      	ldr	r3, [pc, #220]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a36      	ldr	r2, [pc, #216]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 800903a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800903e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009040:	f7fc fe42 	bl	8005cc8 <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009048:	f7fc fe3e 	bl	8005cc8 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e218      	b.n	800948c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800905a:	4b2e      	ldr	r3, [pc, #184]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f0      	bne.n	8009048 <HAL_RCC_OscConfig+0x1e0>
 8009066:	e000      	b.n	800906a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009068:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d03c      	beq.n	80090f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d01c      	beq.n	80090b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800907e:	4b25      	ldr	r3, [pc, #148]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8009080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009084:	4a23      	ldr	r2, [pc, #140]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800908e:	f7fc fe1b 	bl	8005cc8 <HAL_GetTick>
 8009092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009094:	e008      	b.n	80090a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009096:	f7fc fe17 	bl	8005cc8 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e1f1      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 80090aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0ef      	beq.n	8009096 <HAL_RCC_OscConfig+0x22e>
 80090b6:	e01b      	b.n	80090f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090b8:	4b16      	ldr	r3, [pc, #88]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 80090ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090be:	4a15      	ldr	r2, [pc, #84]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c8:	f7fc fdfe 	bl	8005cc8 <HAL_GetTick>
 80090cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090ce:	e008      	b.n	80090e2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090d0:	f7fc fdfa 	bl	8005cc8 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d901      	bls.n	80090e2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e1d4      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090e2:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 80090e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1ef      	bne.n	80090d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0304 	and.w	r3, r3, #4
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80ab 	beq.w	8009254 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090fe:	2300      	movs	r3, #0
 8009100:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009102:	4b04      	ldr	r3, [pc, #16]	; (8009114 <HAL_RCC_OscConfig+0x2ac>)
 8009104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <HAL_RCC_OscConfig+0x2b4>
 800910e:	2301      	movs	r3, #1
 8009110:	e005      	b.n	800911e <HAL_RCC_OscConfig+0x2b6>
 8009112:	bf00      	nop
 8009114:	40021000 	.word	0x40021000
 8009118:	20000004 	.word	0x20000004
 800911c:	2300      	movs	r3, #0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00d      	beq.n	800913e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009122:	4baf      	ldr	r3, [pc, #700]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009126:	4aae      	ldr	r2, [pc, #696]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800912c:	6593      	str	r3, [r2, #88]	; 0x58
 800912e:	4bac      	ldr	r3, [pc, #688]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800913a:	2301      	movs	r3, #1
 800913c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800913e:	4ba9      	ldr	r3, [pc, #676]	; (80093e4 <HAL_RCC_OscConfig+0x57c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009146:	2b00      	cmp	r3, #0
 8009148:	d118      	bne.n	800917c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800914a:	4ba6      	ldr	r3, [pc, #664]	; (80093e4 <HAL_RCC_OscConfig+0x57c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4aa5      	ldr	r2, [pc, #660]	; (80093e4 <HAL_RCC_OscConfig+0x57c>)
 8009150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009156:	f7fc fdb7 	bl	8005cc8 <HAL_GetTick>
 800915a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800915c:	e008      	b.n	8009170 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800915e:	f7fc fdb3 	bl	8005cc8 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e18d      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009170:	4b9c      	ldr	r3, [pc, #624]	; (80093e4 <HAL_RCC_OscConfig+0x57c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0f0      	beq.n	800915e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d108      	bne.n	8009196 <HAL_RCC_OscConfig+0x32e>
 8009184:	4b96      	ldr	r3, [pc, #600]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918a:	4a95      	ldr	r2, [pc, #596]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009194:	e024      	b.n	80091e0 <HAL_RCC_OscConfig+0x378>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	2b05      	cmp	r3, #5
 800919c:	d110      	bne.n	80091c0 <HAL_RCC_OscConfig+0x358>
 800919e:	4b90      	ldr	r3, [pc, #576]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a4:	4a8e      	ldr	r2, [pc, #568]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091a6:	f043 0304 	orr.w	r3, r3, #4
 80091aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091ae:	4b8c      	ldr	r3, [pc, #560]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b4:	4a8a      	ldr	r2, [pc, #552]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091b6:	f043 0301 	orr.w	r3, r3, #1
 80091ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091be:	e00f      	b.n	80091e0 <HAL_RCC_OscConfig+0x378>
 80091c0:	4b87      	ldr	r3, [pc, #540]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c6:	4a86      	ldr	r2, [pc, #536]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091d0:	4b83      	ldr	r3, [pc, #524]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d6:	4a82      	ldr	r2, [pc, #520]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80091d8:	f023 0304 	bic.w	r3, r3, #4
 80091dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d016      	beq.n	8009216 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091e8:	f7fc fd6e 	bl	8005cc8 <HAL_GetTick>
 80091ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ee:	e00a      	b.n	8009206 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091f0:	f7fc fd6a 	bl	8005cc8 <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fe:	4293      	cmp	r3, r2
 8009200:	d901      	bls.n	8009206 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e142      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009206:	4b76      	ldr	r3, [pc, #472]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0ed      	beq.n	80091f0 <HAL_RCC_OscConfig+0x388>
 8009214:	e015      	b.n	8009242 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009216:	f7fc fd57 	bl	8005cc8 <HAL_GetTick>
 800921a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800921c:	e00a      	b.n	8009234 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800921e:	f7fc fd53 	bl	8005cc8 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f241 3288 	movw	r2, #5000	; 0x1388
 800922c:	4293      	cmp	r3, r2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e12b      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009234:	4b6a      	ldr	r3, [pc, #424]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1ed      	bne.n	800921e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009242:	7ffb      	ldrb	r3, [r7, #31]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d105      	bne.n	8009254 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009248:	4b65      	ldr	r3, [pc, #404]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 800924a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924c:	4a64      	ldr	r2, [pc, #400]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 800924e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009252:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d03c      	beq.n	80092da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01c      	beq.n	80092a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009268:	4b5d      	ldr	r3, [pc, #372]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 800926a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800926e:	4a5c      	ldr	r2, [pc, #368]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009270:	f043 0301 	orr.w	r3, r3, #1
 8009274:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009278:	f7fc fd26 	bl	8005cc8 <HAL_GetTick>
 800927c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800927e:	e008      	b.n	8009292 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009280:	f7fc fd22 	bl	8005cc8 <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	2b02      	cmp	r3, #2
 800928c:	d901      	bls.n	8009292 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e0fc      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009292:	4b53      	ldr	r3, [pc, #332]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0ef      	beq.n	8009280 <HAL_RCC_OscConfig+0x418>
 80092a0:	e01b      	b.n	80092da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092a2:	4b4f      	ldr	r3, [pc, #316]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80092a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092a8:	4a4d      	ldr	r2, [pc, #308]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b2:	f7fc fd09 	bl	8005cc8 <HAL_GetTick>
 80092b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092b8:	e008      	b.n	80092cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092ba:	f7fc fd05 	bl	8005cc8 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e0df      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092cc:	4b44      	ldr	r3, [pc, #272]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80092ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1ef      	bne.n	80092ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80d3 	beq.w	800948a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092e4:	4b3e      	ldr	r3, [pc, #248]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f003 030c 	and.w	r3, r3, #12
 80092ec:	2b0c      	cmp	r3, #12
 80092ee:	f000 808d 	beq.w	800940c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d15a      	bne.n	80093b0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092fa:	4b39      	ldr	r3, [pc, #228]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a38      	ldr	r2, [pc, #224]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009306:	f7fc fcdf 	bl	8005cc8 <HAL_GetTick>
 800930a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800930c:	e008      	b.n	8009320 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800930e:	f7fc fcdb 	bl	8005cc8 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d901      	bls.n	8009320 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e0b5      	b.n	800948c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009320:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f0      	bne.n	800930e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800932c:	4b2c      	ldr	r3, [pc, #176]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	4b2d      	ldr	r3, [pc, #180]	; (80093e8 <HAL_RCC_OscConfig+0x580>)
 8009332:	4013      	ands	r3, r2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6a11      	ldr	r1, [r2, #32]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800933c:	3a01      	subs	r2, #1
 800933e:	0112      	lsls	r2, r2, #4
 8009340:	4311      	orrs	r1, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009346:	0212      	lsls	r2, r2, #8
 8009348:	4311      	orrs	r1, r2
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800934e:	0852      	lsrs	r2, r2, #1
 8009350:	3a01      	subs	r2, #1
 8009352:	0552      	lsls	r2, r2, #21
 8009354:	4311      	orrs	r1, r2
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800935a:	0852      	lsrs	r2, r2, #1
 800935c:	3a01      	subs	r2, #1
 800935e:	0652      	lsls	r2, r2, #25
 8009360:	4311      	orrs	r1, r2
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009366:	06d2      	lsls	r2, r2, #27
 8009368:	430a      	orrs	r2, r1
 800936a:	491d      	ldr	r1, [pc, #116]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 800936c:	4313      	orrs	r3, r2
 800936e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009370:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1a      	ldr	r2, [pc, #104]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800937a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800937c:	4b18      	ldr	r3, [pc, #96]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	4a17      	ldr	r2, [pc, #92]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 8009382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009386:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009388:	f7fc fc9e 	bl	8005cc8 <HAL_GetTick>
 800938c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009390:	f7fc fc9a 	bl	8005cc8 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e074      	b.n	800948c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093a2:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCC_OscConfig+0x528>
 80093ae:	e06c      	b.n	800948a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a0a      	ldr	r2, [pc, #40]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80093b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80093bc:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	4a07      	ldr	r2, [pc, #28]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80093c2:	f023 0303 	bic.w	r3, r3, #3
 80093c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80093c8:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	4a04      	ldr	r2, [pc, #16]	; (80093e0 <HAL_RCC_OscConfig+0x578>)
 80093ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80093d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d8:	f7fc fc76 	bl	8005cc8 <HAL_GetTick>
 80093dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093de:	e00e      	b.n	80093fe <HAL_RCC_OscConfig+0x596>
 80093e0:	40021000 	.word	0x40021000
 80093e4:	40007000 	.word	0x40007000
 80093e8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093ec:	f7fc fc6c 	bl	8005cc8 <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d901      	bls.n	80093fe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e046      	b.n	800948c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093fe:	4b25      	ldr	r3, [pc, #148]	; (8009494 <HAL_RCC_OscConfig+0x62c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1f0      	bne.n	80093ec <HAL_RCC_OscConfig+0x584>
 800940a:	e03e      	b.n	800948a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d101      	bne.n	8009418 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e039      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009418:	4b1e      	ldr	r3, [pc, #120]	; (8009494 <HAL_RCC_OscConfig+0x62c>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f003 0203 	and.w	r2, r3, #3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	429a      	cmp	r2, r3
 800942a:	d12c      	bne.n	8009486 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	3b01      	subs	r3, #1
 8009438:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800943a:	429a      	cmp	r2, r3
 800943c:	d123      	bne.n	8009486 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009448:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800944a:	429a      	cmp	r2, r3
 800944c:	d11b      	bne.n	8009486 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800945a:	429a      	cmp	r2, r3
 800945c:	d113      	bne.n	8009486 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	085b      	lsrs	r3, r3, #1
 800946a:	3b01      	subs	r3, #1
 800946c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800946e:	429a      	cmp	r2, r3
 8009470:	d109      	bne.n	8009486 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	085b      	lsrs	r3, r3, #1
 800947e:	3b01      	subs	r3, #1
 8009480:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009482:	429a      	cmp	r2, r3
 8009484:	d001      	beq.n	800948a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3720      	adds	r7, #32
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	40021000 	.word	0x40021000

08009498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e11e      	b.n	80096ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094b0:	4b91      	ldr	r3, [pc, #580]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d910      	bls.n	80094e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094be:	4b8e      	ldr	r3, [pc, #568]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f023 020f 	bic.w	r2, r3, #15
 80094c6:	498c      	ldr	r1, [pc, #560]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ce:	4b8a      	ldr	r3, [pc, #552]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 030f 	and.w	r3, r3, #15
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d001      	beq.n	80094e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e106      	b.n	80096ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d073      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d129      	bne.n	8009548 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094f4:	4b81      	ldr	r3, [pc, #516]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e0f4      	b.n	80096ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009504:	f000 f99e 	bl	8009844 <RCC_GetSysClockFreqFromPLLSource>
 8009508:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	4a7c      	ldr	r2, [pc, #496]	; (8009700 <HAL_RCC_ClockConfig+0x268>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d93f      	bls.n	8009592 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009512:	4b7a      	ldr	r3, [pc, #488]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009526:	2b00      	cmp	r3, #0
 8009528:	d033      	beq.n	8009592 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800952e:	2b00      	cmp	r3, #0
 8009530:	d12f      	bne.n	8009592 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009532:	4b72      	ldr	r3, [pc, #456]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800953a:	4a70      	ldr	r2, [pc, #448]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 800953c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009540:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009542:	2380      	movs	r3, #128	; 0x80
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	e024      	b.n	8009592 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d107      	bne.n	8009560 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009550:	4b6a      	ldr	r3, [pc, #424]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d109      	bne.n	8009570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0c6      	b.n	80096ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009560:	4b66      	ldr	r3, [pc, #408]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e0be      	b.n	80096ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009570:	f000 f8ce 	bl	8009710 <HAL_RCC_GetSysClockFreq>
 8009574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	4a61      	ldr	r2, [pc, #388]	; (8009700 <HAL_RCC_ClockConfig+0x268>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d909      	bls.n	8009592 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800957e:	4b5f      	ldr	r3, [pc, #380]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009586:	4a5d      	ldr	r2, [pc, #372]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800958c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800958e:	2380      	movs	r3, #128	; 0x80
 8009590:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009592:	4b5a      	ldr	r3, [pc, #360]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f023 0203 	bic.w	r2, r3, #3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	4957      	ldr	r1, [pc, #348]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095a4:	f7fc fb90 	bl	8005cc8 <HAL_GetTick>
 80095a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095aa:	e00a      	b.n	80095c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ac:	f7fc fb8c 	bl	8005cc8 <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e095      	b.n	80096ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c2:	4b4e      	ldr	r3, [pc, #312]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 020c 	and.w	r2, r3, #12
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d1eb      	bne.n	80095ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d023      	beq.n	8009628 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80095ec:	4b43      	ldr	r3, [pc, #268]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	4a42      	ldr	r2, [pc, #264]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80095f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80095f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0308 	and.w	r3, r3, #8
 8009600:	2b00      	cmp	r3, #0
 8009602:	d007      	beq.n	8009614 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009604:	4b3d      	ldr	r3, [pc, #244]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800960c:	4a3b      	ldr	r2, [pc, #236]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 800960e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009614:	4b39      	ldr	r3, [pc, #228]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	4936      	ldr	r1, [pc, #216]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009622:	4313      	orrs	r3, r2
 8009624:	608b      	str	r3, [r1, #8]
 8009626:	e008      	b.n	800963a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	2b80      	cmp	r3, #128	; 0x80
 800962c:	d105      	bne.n	800963a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800962e:	4b33      	ldr	r3, [pc, #204]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	4a32      	ldr	r2, [pc, #200]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009638:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800963a:	4b2f      	ldr	r3, [pc, #188]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 030f 	and.w	r3, r3, #15
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	429a      	cmp	r2, r3
 8009646:	d21d      	bcs.n	8009684 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009648:	4b2b      	ldr	r3, [pc, #172]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f023 020f 	bic.w	r2, r3, #15
 8009650:	4929      	ldr	r1, [pc, #164]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	4313      	orrs	r3, r2
 8009656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009658:	f7fc fb36 	bl	8005cc8 <HAL_GetTick>
 800965c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800965e:	e00a      	b.n	8009676 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009660:	f7fc fb32 	bl	8005cc8 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	f241 3288 	movw	r2, #5000	; 0x1388
 800966e:	4293      	cmp	r3, r2
 8009670:	d901      	bls.n	8009676 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e03b      	b.n	80096ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009676:	4b20      	ldr	r3, [pc, #128]	; (80096f8 <HAL_RCC_ClockConfig+0x260>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d1ed      	bne.n	8009660 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d008      	beq.n	80096a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009690:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	4917      	ldr	r1, [pc, #92]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d009      	beq.n	80096c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	490f      	ldr	r1, [pc, #60]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80096c2:	f000 f825 	bl	8009710 <HAL_RCC_GetSysClockFreq>
 80096c6:	4602      	mov	r2, r0
 80096c8:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <HAL_RCC_ClockConfig+0x264>)
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	091b      	lsrs	r3, r3, #4
 80096ce:	f003 030f 	and.w	r3, r3, #15
 80096d2:	490c      	ldr	r1, [pc, #48]	; (8009704 <HAL_RCC_ClockConfig+0x26c>)
 80096d4:	5ccb      	ldrb	r3, [r1, r3]
 80096d6:	f003 031f 	and.w	r3, r3, #31
 80096da:	fa22 f303 	lsr.w	r3, r2, r3
 80096de:	4a0a      	ldr	r2, [pc, #40]	; (8009708 <HAL_RCC_ClockConfig+0x270>)
 80096e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80096e2:	4b0a      	ldr	r3, [pc, #40]	; (800970c <HAL_RCC_ClockConfig+0x274>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fc faa2 	bl	8005c30 <HAL_InitTick>
 80096ec:	4603      	mov	r3, r0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	40022000 	.word	0x40022000
 80096fc:	40021000 	.word	0x40021000
 8009700:	04c4b400 	.word	0x04c4b400
 8009704:	08013330 	.word	0x08013330
 8009708:	20000000 	.word	0x20000000
 800970c:	20000004 	.word	0x20000004

08009710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009716:	4b2c      	ldr	r3, [pc, #176]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 030c 	and.w	r3, r3, #12
 800971e:	2b04      	cmp	r3, #4
 8009720:	d102      	bne.n	8009728 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009722:	4b2a      	ldr	r3, [pc, #168]	; (80097cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009724:	613b      	str	r3, [r7, #16]
 8009726:	e047      	b.n	80097b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009728:	4b27      	ldr	r3, [pc, #156]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 030c 	and.w	r3, r3, #12
 8009730:	2b08      	cmp	r3, #8
 8009732:	d102      	bne.n	800973a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009734:	4b26      	ldr	r3, [pc, #152]	; (80097d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	e03e      	b.n	80097b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800973a:	4b23      	ldr	r3, [pc, #140]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f003 030c 	and.w	r3, r3, #12
 8009742:	2b0c      	cmp	r3, #12
 8009744:	d136      	bne.n	80097b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009746:	4b20      	ldr	r3, [pc, #128]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f003 0303 	and.w	r3, r3, #3
 800974e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009750:	4b1d      	ldr	r3, [pc, #116]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	091b      	lsrs	r3, r3, #4
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	3301      	adds	r3, #1
 800975c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d10c      	bne.n	800977e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009764:	4a1a      	ldr	r2, [pc, #104]	; (80097d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	fbb2 f3f3 	udiv	r3, r2, r3
 800976c:	4a16      	ldr	r2, [pc, #88]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800976e:	68d2      	ldr	r2, [r2, #12]
 8009770:	0a12      	lsrs	r2, r2, #8
 8009772:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009776:	fb02 f303 	mul.w	r3, r2, r3
 800977a:	617b      	str	r3, [r7, #20]
      break;
 800977c:	e00c      	b.n	8009798 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800977e:	4a13      	ldr	r2, [pc, #76]	; (80097cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	fbb2 f3f3 	udiv	r3, r2, r3
 8009786:	4a10      	ldr	r2, [pc, #64]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009788:	68d2      	ldr	r2, [r2, #12]
 800978a:	0a12      	lsrs	r2, r2, #8
 800978c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009790:	fb02 f303 	mul.w	r3, r2, r3
 8009794:	617b      	str	r3, [r7, #20]
      break;
 8009796:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009798:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	0e5b      	lsrs	r3, r3, #25
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	3301      	adds	r3, #1
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	e001      	b.n	80097b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80097b8:	693b      	ldr	r3, [r7, #16]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	371c      	adds	r7, #28
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40021000 	.word	0x40021000
 80097cc:	00f42400 	.word	0x00f42400
 80097d0:	007a1200 	.word	0x007a1200

080097d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097d8:	4b03      	ldr	r3, [pc, #12]	; (80097e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80097da:	681b      	ldr	r3, [r3, #0]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	20000000 	.word	0x20000000

080097ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80097f0:	f7ff fff0 	bl	80097d4 <HAL_RCC_GetHCLKFreq>
 80097f4:	4602      	mov	r2, r0
 80097f6:	4b06      	ldr	r3, [pc, #24]	; (8009810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	0a1b      	lsrs	r3, r3, #8
 80097fc:	f003 0307 	and.w	r3, r3, #7
 8009800:	4904      	ldr	r1, [pc, #16]	; (8009814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009802:	5ccb      	ldrb	r3, [r1, r3]
 8009804:	f003 031f 	and.w	r3, r3, #31
 8009808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800980c:	4618      	mov	r0, r3
 800980e:	bd80      	pop	{r7, pc}
 8009810:	40021000 	.word	0x40021000
 8009814:	08013340 	.word	0x08013340

08009818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800981c:	f7ff ffda 	bl	80097d4 <HAL_RCC_GetHCLKFreq>
 8009820:	4602      	mov	r2, r0
 8009822:	4b06      	ldr	r3, [pc, #24]	; (800983c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	0adb      	lsrs	r3, r3, #11
 8009828:	f003 0307 	and.w	r3, r3, #7
 800982c:	4904      	ldr	r1, [pc, #16]	; (8009840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800982e:	5ccb      	ldrb	r3, [r1, r3]
 8009830:	f003 031f 	and.w	r3, r3, #31
 8009834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009838:	4618      	mov	r0, r3
 800983a:	bd80      	pop	{r7, pc}
 800983c:	40021000 	.word	0x40021000
 8009840:	08013340 	.word	0x08013340

08009844 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800984a:	4b1e      	ldr	r3, [pc, #120]	; (80098c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f003 0303 	and.w	r3, r3, #3
 8009852:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009854:	4b1b      	ldr	r3, [pc, #108]	; (80098c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	091b      	lsrs	r3, r3, #4
 800985a:	f003 030f 	and.w	r3, r3, #15
 800985e:	3301      	adds	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b03      	cmp	r3, #3
 8009866:	d10c      	bne.n	8009882 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009868:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009870:	4a14      	ldr	r2, [pc, #80]	; (80098c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009872:	68d2      	ldr	r2, [r2, #12]
 8009874:	0a12      	lsrs	r2, r2, #8
 8009876:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800987a:	fb02 f303 	mul.w	r3, r2, r3
 800987e:	617b      	str	r3, [r7, #20]
    break;
 8009880:	e00c      	b.n	800989c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009882:	4a12      	ldr	r2, [pc, #72]	; (80098cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	fbb2 f3f3 	udiv	r3, r2, r3
 800988a:	4a0e      	ldr	r2, [pc, #56]	; (80098c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800988c:	68d2      	ldr	r2, [r2, #12]
 800988e:	0a12      	lsrs	r2, r2, #8
 8009890:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009894:	fb02 f303 	mul.w	r3, r2, r3
 8009898:	617b      	str	r3, [r7, #20]
    break;
 800989a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800989c:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	0e5b      	lsrs	r3, r3, #25
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	3301      	adds	r3, #1
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80098b6:	687b      	ldr	r3, [r7, #4]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	40021000 	.word	0x40021000
 80098c8:	007a1200 	.word	0x007a1200
 80098cc:	00f42400 	.word	0x00f42400

080098d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098d8:	2300      	movs	r3, #0
 80098da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098dc:	2300      	movs	r3, #0
 80098de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8098 	beq.w	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098ee:	2300      	movs	r3, #0
 80098f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098f2:	4b43      	ldr	r3, [pc, #268]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10d      	bne.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098fe:	4b40      	ldr	r3, [pc, #256]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009902:	4a3f      	ldr	r2, [pc, #252]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009908:	6593      	str	r3, [r2, #88]	; 0x58
 800990a:	4b3d      	ldr	r3, [pc, #244]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800990c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009912:	60bb      	str	r3, [r7, #8]
 8009914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009916:	2301      	movs	r3, #1
 8009918:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800991a:	4b3a      	ldr	r3, [pc, #232]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a39      	ldr	r2, [pc, #228]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009926:	f7fc f9cf 	bl	8005cc8 <HAL_GetTick>
 800992a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800992c:	e009      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800992e:	f7fc f9cb 	bl	8005cc8 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d902      	bls.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	74fb      	strb	r3, [r7, #19]
        break;
 8009940:	e005      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009942:	4b30      	ldr	r3, [pc, #192]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0ef      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800994e:	7cfb      	ldrb	r3, [r7, #19]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d159      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009954:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800995e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d01e      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	429a      	cmp	r2, r3
 800996e:	d019      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009970:	4b23      	ldr	r3, [pc, #140]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800997a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800997c:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800997e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009982:	4a1f      	ldr	r2, [pc, #124]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800998c:	4b1c      	ldr	r3, [pc, #112]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800998e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009992:	4a1b      	ldr	r2, [pc, #108]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800999c:	4a18      	ldr	r2, [pc, #96]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d016      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ae:	f7fc f98b 	bl	8005cc8 <HAL_GetTick>
 80099b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099b4:	e00b      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099b6:	f7fc f987 	bl	8005cc8 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d902      	bls.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	74fb      	strb	r3, [r7, #19]
            break;
 80099cc:	e006      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099ce:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d4:	f003 0302 	and.w	r3, r3, #2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0ec      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80099dc:	7cfb      	ldrb	r3, [r7, #19]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10b      	bne.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099e2:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f0:	4903      	ldr	r1, [pc, #12]	; (8009a00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80099f8:	e008      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099fa:	7cfb      	ldrb	r3, [r7, #19]
 80099fc:	74bb      	strb	r3, [r7, #18]
 80099fe:	e005      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009a00:	40021000 	.word	0x40021000
 8009a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a08:	7cfb      	ldrb	r3, [r7, #19]
 8009a0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a0c:	7c7b      	ldrb	r3, [r7, #17]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d105      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a12:	4baf      	ldr	r3, [pc, #700]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a16:	4aae      	ldr	r2, [pc, #696]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a2a:	4ba9      	ldr	r3, [pc, #676]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a30:	f023 0203 	bic.w	r2, r3, #3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	49a5      	ldr	r1, [pc, #660]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a4c:	4ba0      	ldr	r3, [pc, #640]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a52:	f023 020c 	bic.w	r2, r3, #12
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	499d      	ldr	r1, [pc, #628]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a6e:	4b98      	ldr	r3, [pc, #608]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4994      	ldr	r1, [pc, #592]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0308 	and.w	r3, r3, #8
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00a      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009a90:	4b8f      	ldr	r3, [pc, #572]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	498c      	ldr	r1, [pc, #560]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0310 	and.w	r3, r3, #16
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00a      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ab2:	4b87      	ldr	r3, [pc, #540]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	4983      	ldr	r1, [pc, #524]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00a      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ad4:	4b7e      	ldr	r3, [pc, #504]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ada:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	497b      	ldr	r1, [pc, #492]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009af6:	4b76      	ldr	r3, [pc, #472]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009afc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	4972      	ldr	r1, [pc, #456]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00a      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b18:	4b6d      	ldr	r3, [pc, #436]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	496a      	ldr	r1, [pc, #424]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b3a:	4b65      	ldr	r3, [pc, #404]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	4961      	ldr	r1, [pc, #388]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00a      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b5c:	4b5c      	ldr	r3, [pc, #368]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b62:	f023 0203 	bic.w	r2, r3, #3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6a:	4959      	ldr	r1, [pc, #356]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00a      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b7e:	4b54      	ldr	r3, [pc, #336]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8c:	4950      	ldr	r1, [pc, #320]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d015      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ba0:	4b4b      	ldr	r3, [pc, #300]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	4948      	ldr	r1, [pc, #288]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bbe:	d105      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bc0:	4b43      	ldr	r3, [pc, #268]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	4a42      	ldr	r2, [pc, #264]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d015      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009bd8:	4b3d      	ldr	r3, [pc, #244]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be6:	493a      	ldr	r1, [pc, #232]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bf6:	d105      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bf8:	4b35      	ldr	r3, [pc, #212]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	4a34      	ldr	r2, [pc, #208]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d015      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c10:	4b2f      	ldr	r3, [pc, #188]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1e:	492c      	ldr	r1, [pc, #176]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c2e:	d105      	bne.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c30:	4b27      	ldr	r3, [pc, #156]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	4a26      	ldr	r2, [pc, #152]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d015      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c48:	4b21      	ldr	r3, [pc, #132]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c56:	491e      	ldr	r1, [pc, #120]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c66:	d105      	bne.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c68:	4b19      	ldr	r3, [pc, #100]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	4a18      	ldr	r2, [pc, #96]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d015      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c80:	4b13      	ldr	r3, [pc, #76]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	4910      	ldr	r1, [pc, #64]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c9e:	d105      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	4a0a      	ldr	r2, [pc, #40]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009caa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d018      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009cb8:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc6:	4902      	ldr	r1, [pc, #8]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009cce:	e001      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009cd0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cdc:	d105      	bne.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009cde:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	4a20      	ldr	r2, [pc, #128]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ce8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d015      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009cf6:	4b1b      	ldr	r3, [pc, #108]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d04:	4917      	ldr	r1, [pc, #92]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d14:	d105      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d16:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	4a12      	ldr	r2, [pc, #72]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d20:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d015      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3c:	4909      	ldr	r1, [pc, #36]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d4c:	d105      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	4a04      	ldr	r2, [pc, #16]	; (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d58:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009d5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	40021000 	.word	0x40021000

08009d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e09d      	b.n	8009eb6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d108      	bne.n	8009d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d8a:	d009      	beq.n	8009da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	61da      	str	r2, [r3, #28]
 8009d92:	e005      	b.n	8009da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fb fa48 	bl	8005250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009de0:	d902      	bls.n	8009de8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	e002      	b.n	8009dee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009df6:	d007      	beq.n	8009e08 <HAL_SPI_Init+0xa0>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e00:	d002      	beq.n	8009e08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e40:	431a      	orrs	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4a:	ea42 0103 	orr.w	r1, r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	0c1b      	lsrs	r3, r3, #16
 8009e64:	f003 0204 	and.w	r2, r3, #4
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	f003 0310 	and.w	r3, r3, #16
 8009e70:	431a      	orrs	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e76:	f003 0308 	and.w	r3, r3, #8
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009e84:	ea42 0103 	orr.w	r1, r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69da      	ldr	r2, [r3, #28]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b08a      	sub	sp, #40	; 0x28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	60f8      	str	r0, [r7, #12]
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_SPI_TransmitReceive+0x26>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e1fb      	b.n	800a2dc <HAL_SPI_TransmitReceive+0x41e>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009eec:	f7fb feec 	bl	8005cc8 <HAL_GetTick>
 8009ef0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ef8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009f00:	887b      	ldrh	r3, [r7, #2]
 8009f02:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009f04:	887b      	ldrh	r3, [r7, #2]
 8009f06:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f08:	7efb      	ldrb	r3, [r7, #27]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d00e      	beq.n	8009f2c <HAL_SPI_TransmitReceive+0x6e>
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f14:	d106      	bne.n	8009f24 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <HAL_SPI_TransmitReceive+0x66>
 8009f1e:	7efb      	ldrb	r3, [r7, #27]
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d003      	beq.n	8009f2c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009f24:	2302      	movs	r3, #2
 8009f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009f2a:	e1cd      	b.n	800a2c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <HAL_SPI_TransmitReceive+0x80>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <HAL_SPI_TransmitReceive+0x80>
 8009f38:	887b      	ldrh	r3, [r7, #2]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d103      	bne.n	8009f46 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009f44:	e1c0      	b.n	800a2c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d003      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2205      	movs	r2, #5
 8009f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	887a      	ldrh	r2, [r7, #2]
 8009f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	887a      	ldrh	r2, [r7, #2]
 8009f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	887a      	ldrh	r2, [r7, #2]
 8009f80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	887a      	ldrh	r2, [r7, #2]
 8009f86:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f9c:	d802      	bhi.n	8009fa4 <HAL_SPI_TransmitReceive+0xe6>
 8009f9e:	8a3b      	ldrh	r3, [r7, #16]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d908      	bls.n	8009fb6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fb2:	605a      	str	r2, [r3, #4]
 8009fb4:	e007      	b.n	8009fc6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fc4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd0:	2b40      	cmp	r3, #64	; 0x40
 8009fd2:	d007      	beq.n	8009fe4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fe2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fec:	d97c      	bls.n	800a0e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <HAL_SPI_TransmitReceive+0x13e>
 8009ff6:	8a7b      	ldrh	r3, [r7, #18]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d169      	bne.n	800a0d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a000:	881a      	ldrh	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00c:	1c9a      	adds	r2, r3, #2
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a016:	b29b      	uxth	r3, r3
 800a018:	3b01      	subs	r3, #1
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a020:	e056      	b.n	800a0d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d11b      	bne.n	800a068 <HAL_SPI_TransmitReceive+0x1aa>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a034:	b29b      	uxth	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d016      	beq.n	800a068 <HAL_SPI_TransmitReceive+0x1aa>
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d113      	bne.n	800a068 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a044:	881a      	ldrh	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	1c9a      	adds	r2, r3, #2
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b01      	cmp	r3, #1
 800a074:	d11c      	bne.n	800a0b0 <HAL_SPI_TransmitReceive+0x1f2>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d016      	beq.n	800a0b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68da      	ldr	r2, [r3, #12]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08c:	b292      	uxth	r2, r2
 800a08e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a094:	1c9a      	adds	r2, r3, #2
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a0b0:	f7fb fe0a 	bl	8005cc8 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d807      	bhi.n	800a0d0 <HAL_SPI_TransmitReceive+0x212>
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c6:	d003      	beq.n	800a0d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a0ce:	e0fb      	b.n	800a2c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1a3      	bne.n	800a022 <HAL_SPI_TransmitReceive+0x164>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d19d      	bne.n	800a022 <HAL_SPI_TransmitReceive+0x164>
 800a0e6:	e0df      	b.n	800a2a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <HAL_SPI_TransmitReceive+0x23a>
 800a0f0:	8a7b      	ldrh	r3, [r7, #18]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	f040 80cb 	bne.w	800a28e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d912      	bls.n	800a128 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a106:	881a      	ldrh	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	1c9a      	adds	r2, r3, #2
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3b02      	subs	r3, #2
 800a120:	b29a      	uxth	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a126:	e0b2      	b.n	800a28e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	330c      	adds	r3, #12
 800a132:	7812      	ldrb	r2, [r2, #0]
 800a134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	b29a      	uxth	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a14e:	e09e      	b.n	800a28e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d134      	bne.n	800a1c8 <HAL_SPI_TransmitReceive+0x30a>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a162:	b29b      	uxth	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d02f      	beq.n	800a1c8 <HAL_SPI_TransmitReceive+0x30a>
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d12c      	bne.n	800a1c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a172:	b29b      	uxth	r3, r3
 800a174:	2b01      	cmp	r3, #1
 800a176:	d912      	bls.n	800a19e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	881a      	ldrh	r2, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a188:	1c9a      	adds	r2, r3, #2
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a192:	b29b      	uxth	r3, r3
 800a194:	3b02      	subs	r3, #2
 800a196:	b29a      	uxth	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a19c:	e012      	b.n	800a1c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	330c      	adds	r3, #12
 800a1a8:	7812      	ldrb	r2, [r2, #0]
 800a1aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d148      	bne.n	800a268 <HAL_SPI_TransmitReceive+0x3aa>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d042      	beq.n	800a268 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d923      	bls.n	800a236 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	b292      	uxth	r2, r2
 800a1fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	1c9a      	adds	r2, r3, #2
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	3b02      	subs	r3, #2
 800a210:	b29a      	uxth	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a21e:	b29b      	uxth	r3, r3
 800a220:	2b01      	cmp	r3, #1
 800a222:	d81f      	bhi.n	800a264 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a232:	605a      	str	r2, [r3, #4]
 800a234:	e016      	b.n	800a264 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f103 020c 	add.w	r2, r3, #12
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	7812      	ldrb	r2, [r2, #0]
 800a244:	b2d2      	uxtb	r2, r2
 800a246:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a258:	b29b      	uxth	r3, r3
 800a25a:	3b01      	subs	r3, #1
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a264:	2301      	movs	r3, #1
 800a266:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a268:	f7fb fd2e 	bl	8005cc8 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a274:	429a      	cmp	r2, r3
 800a276:	d803      	bhi.n	800a280 <HAL_SPI_TransmitReceive+0x3c2>
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d102      	bne.n	800a286 <HAL_SPI_TransmitReceive+0x3c8>
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a28c:	e01c      	b.n	800a2c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b00      	cmp	r3, #0
 800a296:	f47f af5b 	bne.w	800a150 <HAL_SPI_TransmitReceive+0x292>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f47f af54 	bne.w	800a150 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2a8:	69fa      	ldr	r2, [r7, #28]
 800a2aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f933 	bl	800a518 <SPI_EndRxTxTransaction>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	661a      	str	r2, [r3, #96]	; 0x60
 800a2c4:	e000      	b.n	800a2c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a2c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a2d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3728      	adds	r7, #40	; 0x28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a2f4:	f7fb fce8 	bl	8005cc8 <HAL_GetTick>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	1a9b      	subs	r3, r3, r2
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	4413      	add	r3, r2
 800a302:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a304:	f7fb fce0 	bl	8005cc8 <HAL_GetTick>
 800a308:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a30a:	4b39      	ldr	r3, [pc, #228]	; (800a3f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	015b      	lsls	r3, r3, #5
 800a310:	0d1b      	lsrs	r3, r3, #20
 800a312:	69fa      	ldr	r2, [r7, #28]
 800a314:	fb02 f303 	mul.w	r3, r2, r3
 800a318:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a31a:	e054      	b.n	800a3c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a322:	d050      	beq.n	800a3c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a324:	f7fb fcd0 	bl	8005cc8 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	429a      	cmp	r2, r3
 800a332:	d902      	bls.n	800a33a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d13d      	bne.n	800a3b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a352:	d111      	bne.n	800a378 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a35c:	d004      	beq.n	800a368 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a366:	d107      	bne.n	800a378 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a380:	d10f      	bne.n	800a3a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e017      	b.n	800a3e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	bf0c      	ite	eq
 800a3d6:	2301      	moveq	r3, #1
 800a3d8:	2300      	movne	r3, #0
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	461a      	mov	r2, r3
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d19b      	bne.n	800a31c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000000 	.word	0x20000000

0800a3f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a402:	f7fb fc61 	bl	8005cc8 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	4413      	add	r3, r2
 800a410:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a412:	f7fb fc59 	bl	8005cc8 <HAL_GetTick>
 800a416:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a418:	4b3e      	ldr	r3, [pc, #248]	; (800a514 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4413      	add	r3, r2
 800a422:	00da      	lsls	r2, r3, #3
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	0d1b      	lsrs	r3, r3, #20
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	fb02 f303 	mul.w	r3, r2, r3
 800a42e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800a430:	e062      	b.n	800a4f8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a438:	d109      	bne.n	800a44e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d106      	bne.n	800a44e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	330c      	adds	r3, #12
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800a44c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a454:	d050      	beq.n	800a4f8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a456:	f7fb fc37 	bl	8005cc8 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	69fa      	ldr	r2, [r7, #28]
 800a462:	429a      	cmp	r2, r3
 800a464:	d902      	bls.n	800a46c <SPI_WaitFifoStateUntilTimeout+0x78>
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d13d      	bne.n	800a4e8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a47a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a484:	d111      	bne.n	800a4aa <SPI_WaitFifoStateUntilTimeout+0xb6>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a48e:	d004      	beq.n	800a49a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a498:	d107      	bne.n	800a4aa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b2:	d10f      	bne.n	800a4d4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e010      	b.n	800a50a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	4013      	ands	r3, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	429a      	cmp	r2, r3
 800a506:	d194      	bne.n	800a432 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3720      	adds	r7, #32
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000000 	.word	0x20000000

0800a518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f7ff ff5f 	bl	800a3f4 <SPI_WaitFifoStateUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d007      	beq.n	800a54c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a540:	f043 0220 	orr.w	r2, r3, #32
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e027      	b.n	800a59c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2200      	movs	r2, #0
 800a554:	2180      	movs	r1, #128	; 0x80
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7ff fec4 	bl	800a2e4 <SPI_WaitFlagStateUntilTimeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d007      	beq.n	800a572 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a566:	f043 0220 	orr.w	r2, r3, #32
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e014      	b.n	800a59c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2200      	movs	r2, #0
 800a57a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff ff38 	bl	800a3f4 <SPI_WaitFifoStateUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d007      	beq.n	800a59a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a58e:	f043 0220 	orr.w	r2, r3, #32
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a596:	2303      	movs	r3, #3
 800a598:	e000      	b.n	800a59c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e049      	b.n	800a64a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7fb f9d6 	bl	800597c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	f000 fecc 	bl	800b380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a662:	b2db      	uxtb	r3, r3
 800a664:	2b01      	cmp	r3, #1
 800a666:	d001      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e054      	b.n	800a716 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f042 0201 	orr.w	r2, r2, #1
 800a682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a26      	ldr	r2, [pc, #152]	; (800a724 <HAL_TIM_Base_Start_IT+0xd0>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d022      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0x80>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a696:	d01d      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0x80>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a22      	ldr	r2, [pc, #136]	; (800a728 <HAL_TIM_Base_Start_IT+0xd4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d018      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0x80>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a21      	ldr	r2, [pc, #132]	; (800a72c <HAL_TIM_Base_Start_IT+0xd8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d013      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0x80>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a1f      	ldr	r2, [pc, #124]	; (800a730 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00e      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0x80>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a1e      	ldr	r2, [pc, #120]	; (800a734 <HAL_TIM_Base_Start_IT+0xe0>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d009      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0x80>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a1c      	ldr	r2, [pc, #112]	; (800a738 <HAL_TIM_Base_Start_IT+0xe4>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d004      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0x80>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a1b      	ldr	r2, [pc, #108]	; (800a73c <HAL_TIM_Base_Start_IT+0xe8>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d115      	bne.n	800a700 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	4b19      	ldr	r3, [pc, #100]	; (800a740 <HAL_TIM_Base_Start_IT+0xec>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b06      	cmp	r3, #6
 800a6e4:	d015      	beq.n	800a712 <HAL_TIM_Base_Start_IT+0xbe>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ec:	d011      	beq.n	800a712 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0201 	orr.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fe:	e008      	b.n	800a712 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e000      	b.n	800a714 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	40012c00 	.word	0x40012c00
 800a728:	40000400 	.word	0x40000400
 800a72c:	40000800 	.word	0x40000800
 800a730:	40000c00 	.word	0x40000c00
 800a734:	40013400 	.word	0x40013400
 800a738:	40014000 	.word	0x40014000
 800a73c:	40015000 	.word	0x40015000
 800a740:	00010007 	.word	0x00010007

0800a744 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e049      	b.n	800a7ea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f841 	bl	800a7f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2202      	movs	r2, #2
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3304      	adds	r3, #4
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f000 fdfc 	bl	800b380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a7fa:	bf00      	nop
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e049      	b.n	800a8ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d106      	bne.n	800a832 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f841 	bl	800a8b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2202      	movs	r2, #2
 800a836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	3304      	adds	r3, #4
 800a842:	4619      	mov	r1, r3
 800a844:	4610      	mov	r0, r2
 800a846:	f000 fd9b 	bl	800b380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d109      	bne.n	800a8ec <HAL_TIM_PWM_Start+0x24>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	bf14      	ite	ne
 800a8e4:	2301      	movne	r3, #1
 800a8e6:	2300      	moveq	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	e03c      	b.n	800a966 <HAL_TIM_PWM_Start+0x9e>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d109      	bne.n	800a906 <HAL_TIM_PWM_Start+0x3e>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	bf14      	ite	ne
 800a8fe:	2301      	movne	r3, #1
 800a900:	2300      	moveq	r3, #0
 800a902:	b2db      	uxtb	r3, r3
 800a904:	e02f      	b.n	800a966 <HAL_TIM_PWM_Start+0x9e>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d109      	bne.n	800a920 <HAL_TIM_PWM_Start+0x58>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b01      	cmp	r3, #1
 800a916:	bf14      	ite	ne
 800a918:	2301      	movne	r3, #1
 800a91a:	2300      	moveq	r3, #0
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	e022      	b.n	800a966 <HAL_TIM_PWM_Start+0x9e>
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	2b0c      	cmp	r3, #12
 800a924:	d109      	bne.n	800a93a <HAL_TIM_PWM_Start+0x72>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b01      	cmp	r3, #1
 800a930:	bf14      	ite	ne
 800a932:	2301      	movne	r3, #1
 800a934:	2300      	moveq	r3, #0
 800a936:	b2db      	uxtb	r3, r3
 800a938:	e015      	b.n	800a966 <HAL_TIM_PWM_Start+0x9e>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b10      	cmp	r3, #16
 800a93e:	d109      	bne.n	800a954 <HAL_TIM_PWM_Start+0x8c>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b01      	cmp	r3, #1
 800a94a:	bf14      	ite	ne
 800a94c:	2301      	movne	r3, #1
 800a94e:	2300      	moveq	r3, #0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	e008      	b.n	800a966 <HAL_TIM_PWM_Start+0x9e>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	bf14      	ite	ne
 800a960:	2301      	movne	r3, #1
 800a962:	2300      	moveq	r3, #0
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e0a6      	b.n	800aabc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <HAL_TIM_PWM_Start+0xb6>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a97c:	e023      	b.n	800a9c6 <HAL_TIM_PWM_Start+0xfe>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b04      	cmp	r3, #4
 800a982:	d104      	bne.n	800a98e <HAL_TIM_PWM_Start+0xc6>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a98c:	e01b      	b.n	800a9c6 <HAL_TIM_PWM_Start+0xfe>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b08      	cmp	r3, #8
 800a992:	d104      	bne.n	800a99e <HAL_TIM_PWM_Start+0xd6>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a99c:	e013      	b.n	800a9c6 <HAL_TIM_PWM_Start+0xfe>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b0c      	cmp	r3, #12
 800a9a2:	d104      	bne.n	800a9ae <HAL_TIM_PWM_Start+0xe6>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9ac:	e00b      	b.n	800a9c6 <HAL_TIM_PWM_Start+0xfe>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b10      	cmp	r3, #16
 800a9b2:	d104      	bne.n	800a9be <HAL_TIM_PWM_Start+0xf6>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9bc:	e003      	b.n	800a9c6 <HAL_TIM_PWM_Start+0xfe>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 f944 	bl	800bc5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a3a      	ldr	r2, [pc, #232]	; (800aac4 <HAL_TIM_PWM_Start+0x1fc>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d018      	beq.n	800aa10 <HAL_TIM_PWM_Start+0x148>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a39      	ldr	r2, [pc, #228]	; (800aac8 <HAL_TIM_PWM_Start+0x200>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d013      	beq.n	800aa10 <HAL_TIM_PWM_Start+0x148>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a37      	ldr	r2, [pc, #220]	; (800aacc <HAL_TIM_PWM_Start+0x204>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00e      	beq.n	800aa10 <HAL_TIM_PWM_Start+0x148>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a36      	ldr	r2, [pc, #216]	; (800aad0 <HAL_TIM_PWM_Start+0x208>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d009      	beq.n	800aa10 <HAL_TIM_PWM_Start+0x148>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a34      	ldr	r2, [pc, #208]	; (800aad4 <HAL_TIM_PWM_Start+0x20c>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d004      	beq.n	800aa10 <HAL_TIM_PWM_Start+0x148>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a33      	ldr	r2, [pc, #204]	; (800aad8 <HAL_TIM_PWM_Start+0x210>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d101      	bne.n	800aa14 <HAL_TIM_PWM_Start+0x14c>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e000      	b.n	800aa16 <HAL_TIM_PWM_Start+0x14e>
 800aa14:	2300      	movs	r3, #0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d007      	beq.n	800aa2a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a25      	ldr	r2, [pc, #148]	; (800aac4 <HAL_TIM_PWM_Start+0x1fc>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d022      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x1b2>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa3c:	d01d      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x1b2>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a26      	ldr	r2, [pc, #152]	; (800aadc <HAL_TIM_PWM_Start+0x214>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d018      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x1b2>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a24      	ldr	r2, [pc, #144]	; (800aae0 <HAL_TIM_PWM_Start+0x218>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d013      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x1b2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a23      	ldr	r2, [pc, #140]	; (800aae4 <HAL_TIM_PWM_Start+0x21c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d00e      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x1b2>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a19      	ldr	r2, [pc, #100]	; (800aac8 <HAL_TIM_PWM_Start+0x200>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d009      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x1b2>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a18      	ldr	r2, [pc, #96]	; (800aacc <HAL_TIM_PWM_Start+0x204>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d004      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x1b2>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a18      	ldr	r2, [pc, #96]	; (800aad8 <HAL_TIM_PWM_Start+0x210>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d115      	bne.n	800aaa6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689a      	ldr	r2, [r3, #8]
 800aa80:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <HAL_TIM_PWM_Start+0x220>)
 800aa82:	4013      	ands	r3, r2
 800aa84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b06      	cmp	r3, #6
 800aa8a:	d015      	beq.n	800aab8 <HAL_TIM_PWM_Start+0x1f0>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa92:	d011      	beq.n	800aab8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f042 0201 	orr.w	r2, r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa4:	e008      	b.n	800aab8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f042 0201 	orr.w	r2, r2, #1
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	e000      	b.n	800aaba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	40012c00 	.word	0x40012c00
 800aac8:	40013400 	.word	0x40013400
 800aacc:	40014000 	.word	0x40014000
 800aad0:	40014400 	.word	0x40014400
 800aad4:	40014800 	.word	0x40014800
 800aad8:	40015000 	.word	0x40015000
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40000800 	.word	0x40000800
 800aae4:	40000c00 	.word	0x40000c00
 800aae8:	00010007 	.word	0x00010007

0800aaec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f003 0302 	and.w	r3, r3, #2
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d122      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	f003 0302 	and.w	r3, r3, #2
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d11b      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f06f 0202 	mvn.w	r2, #2
 800ab18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d003      	beq.n	800ab36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fc08 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800ab34:	e005      	b.n	800ab42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fbfa 	bl	800b330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fc0b 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b04      	cmp	r3, #4
 800ab54:	d122      	bne.n	800ab9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	f003 0304 	and.w	r3, r3, #4
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d11b      	bne.n	800ab9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f06f 0204 	mvn.w	r2, #4
 800ab6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2202      	movs	r2, #2
 800ab72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fbde 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800ab88:	e005      	b.n	800ab96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fbd0 	bl	800b330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fbe1 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	f003 0308 	and.w	r3, r3, #8
 800aba6:	2b08      	cmp	r3, #8
 800aba8:	d122      	bne.n	800abf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f003 0308 	and.w	r3, r3, #8
 800abb4:	2b08      	cmp	r3, #8
 800abb6:	d11b      	bne.n	800abf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f06f 0208 	mvn.w	r2, #8
 800abc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2204      	movs	r2, #4
 800abc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	f003 0303 	and.w	r3, r3, #3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fbb4 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800abdc:	e005      	b.n	800abea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fba6 	bl	800b330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fbb7 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	f003 0310 	and.w	r3, r3, #16
 800abfa:	2b10      	cmp	r3, #16
 800abfc:	d122      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	f003 0310 	and.w	r3, r3, #16
 800ac08:	2b10      	cmp	r3, #16
 800ac0a:	d11b      	bne.n	800ac44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f06f 0210 	mvn.w	r2, #16
 800ac14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2208      	movs	r2, #8
 800ac1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fb8a 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800ac30:	e005      	b.n	800ac3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fb7c 	bl	800b330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fb8d 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d10e      	bne.n	800ac70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d107      	bne.n	800ac70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f06f 0201 	mvn.w	r2, #1
 800ac68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fb56 	bl	800b31c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7a:	2b80      	cmp	r3, #128	; 0x80
 800ac7c:	d10e      	bne.n	800ac9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac88:	2b80      	cmp	r3, #128	; 0x80
 800ac8a:	d107      	bne.n	800ac9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 f958 	bl	800bf4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acaa:	d10e      	bne.n	800acca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb6:	2b80      	cmp	r3, #128	; 0x80
 800acb8:	d107      	bne.n	800acca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f001 f94b 	bl	800bf60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd4:	2b40      	cmp	r3, #64	; 0x40
 800acd6:	d10e      	bne.n	800acf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace2:	2b40      	cmp	r3, #64	; 0x40
 800ace4:	d107      	bne.n	800acf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fb3b 	bl	800b36c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d10e      	bne.n	800ad22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d107      	bne.n	800ad22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f06f 0220 	mvn.w	r2, #32
 800ad1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f001 f90b 	bl	800bf38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad30:	d10f      	bne.n	800ad52 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad40:	d107      	bne.n	800ad52 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ad4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f001 f911 	bl	800bf74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad60:	d10f      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad70:	d107      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ad7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 f903 	bl	800bf88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad90:	d10f      	bne.n	800adb2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ada0:	d107      	bne.n	800adb2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800adaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f001 f8f5 	bl	800bf9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adc0:	d10f      	bne.n	800ade2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800add0:	d107      	bne.n	800ade2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800adda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 f8e7 	bl	800bfb0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ade2:	bf00      	nop
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d101      	bne.n	800ae06 <HAL_TIM_OC_ConfigChannel+0x1a>
 800ae02:	2302      	movs	r3, #2
 800ae04:	e064      	b.n	800aed0 <HAL_TIM_OC_ConfigChannel+0xe4>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b14      	cmp	r3, #20
 800ae12:	d857      	bhi.n	800aec4 <HAL_TIM_OC_ConfigChannel+0xd8>
 800ae14:	a201      	add	r2, pc, #4	; (adr r2, 800ae1c <HAL_TIM_OC_ConfigChannel+0x30>)
 800ae16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1a:	bf00      	nop
 800ae1c:	0800ae71 	.word	0x0800ae71
 800ae20:	0800aec5 	.word	0x0800aec5
 800ae24:	0800aec5 	.word	0x0800aec5
 800ae28:	0800aec5 	.word	0x0800aec5
 800ae2c:	0800ae7f 	.word	0x0800ae7f
 800ae30:	0800aec5 	.word	0x0800aec5
 800ae34:	0800aec5 	.word	0x0800aec5
 800ae38:	0800aec5 	.word	0x0800aec5
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800aec5 	.word	0x0800aec5
 800ae44:	0800aec5 	.word	0x0800aec5
 800ae48:	0800aec5 	.word	0x0800aec5
 800ae4c:	0800ae9b 	.word	0x0800ae9b
 800ae50:	0800aec5 	.word	0x0800aec5
 800ae54:	0800aec5 	.word	0x0800aec5
 800ae58:	0800aec5 	.word	0x0800aec5
 800ae5c:	0800aea9 	.word	0x0800aea9
 800ae60:	0800aec5 	.word	0x0800aec5
 800ae64:	0800aec5 	.word	0x0800aec5
 800ae68:	0800aec5 	.word	0x0800aec5
 800ae6c:	0800aeb7 	.word	0x0800aeb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68b9      	ldr	r1, [r7, #8]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fb2a 	bl	800b4d0 <TIM_OC1_SetConfig>
      break;
 800ae7c:	e023      	b.n	800aec6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 fbbd 	bl	800b604 <TIM_OC2_SetConfig>
      break;
 800ae8a:	e01c      	b.n	800aec6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68b9      	ldr	r1, [r7, #8]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 fc4a 	bl	800b72c <TIM_OC3_SetConfig>
      break;
 800ae98:	e015      	b.n	800aec6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68b9      	ldr	r1, [r7, #8]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f000 fcd5 	bl	800b850 <TIM_OC4_SetConfig>
      break;
 800aea6:	e00e      	b.n	800aec6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 fd62 	bl	800b978 <TIM_OC5_SetConfig>
      break;
 800aeb4:	e007      	b.n	800aec6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 fdc5 	bl	800ba4c <TIM_OC6_SetConfig>
      break;
 800aec2:	e000      	b.n	800aec6 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800aec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d101      	bne.n	800aef2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aeee:	2302      	movs	r3, #2
 800aef0:	e0fd      	b.n	800b0ee <HAL_TIM_PWM_ConfigChannel+0x216>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b14      	cmp	r3, #20
 800aefe:	f200 80f0 	bhi.w	800b0e2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af5d 	.word	0x0800af5d
 800af0c:	0800b0e3 	.word	0x0800b0e3
 800af10:	0800b0e3 	.word	0x0800b0e3
 800af14:	0800b0e3 	.word	0x0800b0e3
 800af18:	0800af9d 	.word	0x0800af9d
 800af1c:	0800b0e3 	.word	0x0800b0e3
 800af20:	0800b0e3 	.word	0x0800b0e3
 800af24:	0800b0e3 	.word	0x0800b0e3
 800af28:	0800afdf 	.word	0x0800afdf
 800af2c:	0800b0e3 	.word	0x0800b0e3
 800af30:	0800b0e3 	.word	0x0800b0e3
 800af34:	0800b0e3 	.word	0x0800b0e3
 800af38:	0800b01f 	.word	0x0800b01f
 800af3c:	0800b0e3 	.word	0x0800b0e3
 800af40:	0800b0e3 	.word	0x0800b0e3
 800af44:	0800b0e3 	.word	0x0800b0e3
 800af48:	0800b061 	.word	0x0800b061
 800af4c:	0800b0e3 	.word	0x0800b0e3
 800af50:	0800b0e3 	.word	0x0800b0e3
 800af54:	0800b0e3 	.word	0x0800b0e3
 800af58:	0800b0a1 	.word	0x0800b0a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fab4 	bl	800b4d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699a      	ldr	r2, [r3, #24]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0208 	orr.w	r2, r2, #8
 800af76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699a      	ldr	r2, [r3, #24]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f022 0204 	bic.w	r2, r2, #4
 800af86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	6999      	ldr	r1, [r3, #24]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	691a      	ldr	r2, [r3, #16]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	619a      	str	r2, [r3, #24]
      break;
 800af9a:	e0a3      	b.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fb2e 	bl	800b604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6999      	ldr	r1, [r3, #24]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	021a      	lsls	r2, r3, #8
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	430a      	orrs	r2, r1
 800afda:	619a      	str	r2, [r3, #24]
      break;
 800afdc:	e082      	b.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68b9      	ldr	r1, [r7, #8]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 fba1 	bl	800b72c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69da      	ldr	r2, [r3, #28]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f042 0208 	orr.w	r2, r2, #8
 800aff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	69da      	ldr	r2, [r3, #28]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f022 0204 	bic.w	r2, r2, #4
 800b008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	69d9      	ldr	r1, [r3, #28]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	691a      	ldr	r2, [r3, #16]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	61da      	str	r2, [r3, #28]
      break;
 800b01c:	e062      	b.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fc13 	bl	800b850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	69da      	ldr	r2, [r3, #28]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69da      	ldr	r2, [r3, #28]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	69d9      	ldr	r1, [r3, #28]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	021a      	lsls	r2, r3, #8
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	61da      	str	r2, [r3, #28]
      break;
 800b05e:	e041      	b.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68b9      	ldr	r1, [r7, #8]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 fc86 	bl	800b978 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0208 	orr.w	r2, r2, #8
 800b07a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f022 0204 	bic.w	r2, r2, #4
 800b08a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	691a      	ldr	r2, [r3, #16]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b09e:	e021      	b.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fcd0 	bl	800ba4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	021a      	lsls	r2, r3, #8
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b0e0:	e000      	b.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b0e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop

0800b0f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d101      	bne.n	800b110 <HAL_TIM_ConfigClockSource+0x18>
 800b10c:	2302      	movs	r3, #2
 800b10e:	e0f5      	b.n	800b2fc <HAL_TIM_ConfigClockSource+0x204>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b12e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b13a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a6e      	ldr	r2, [pc, #440]	; (800b304 <HAL_TIM_ConfigClockSource+0x20c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	f000 80c1 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b150:	4a6c      	ldr	r2, [pc, #432]	; (800b304 <HAL_TIM_ConfigClockSource+0x20c>)
 800b152:	4293      	cmp	r3, r2
 800b154:	f200 80c6 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b158:	4a6b      	ldr	r2, [pc, #428]	; (800b308 <HAL_TIM_ConfigClockSource+0x210>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	f000 80b9 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b160:	4a69      	ldr	r2, [pc, #420]	; (800b308 <HAL_TIM_ConfigClockSource+0x210>)
 800b162:	4293      	cmp	r3, r2
 800b164:	f200 80be 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b168:	4a68      	ldr	r2, [pc, #416]	; (800b30c <HAL_TIM_ConfigClockSource+0x214>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	f000 80b1 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b170:	4a66      	ldr	r2, [pc, #408]	; (800b30c <HAL_TIM_ConfigClockSource+0x214>)
 800b172:	4293      	cmp	r3, r2
 800b174:	f200 80b6 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b178:	4a65      	ldr	r2, [pc, #404]	; (800b310 <HAL_TIM_ConfigClockSource+0x218>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	f000 80a9 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b180:	4a63      	ldr	r2, [pc, #396]	; (800b310 <HAL_TIM_ConfigClockSource+0x218>)
 800b182:	4293      	cmp	r3, r2
 800b184:	f200 80ae 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b188:	4a62      	ldr	r2, [pc, #392]	; (800b314 <HAL_TIM_ConfigClockSource+0x21c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	f000 80a1 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b190:	4a60      	ldr	r2, [pc, #384]	; (800b314 <HAL_TIM_ConfigClockSource+0x21c>)
 800b192:	4293      	cmp	r3, r2
 800b194:	f200 80a6 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b198:	4a5f      	ldr	r2, [pc, #380]	; (800b318 <HAL_TIM_ConfigClockSource+0x220>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	f000 8099 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b1a0:	4a5d      	ldr	r2, [pc, #372]	; (800b318 <HAL_TIM_ConfigClockSource+0x220>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	f200 809e 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1ac:	f000 8091 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b1b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1b4:	f200 8096 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1bc:	f000 8089 	beq.w	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b1c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1c4:	f200 808e 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1cc:	d03e      	beq.n	800b24c <HAL_TIM_ConfigClockSource+0x154>
 800b1ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1d2:	f200 8087 	bhi.w	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1da:	f000 8085 	beq.w	800b2e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e2:	d87f      	bhi.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1e4:	2b70      	cmp	r3, #112	; 0x70
 800b1e6:	d01a      	beq.n	800b21e <HAL_TIM_ConfigClockSource+0x126>
 800b1e8:	2b70      	cmp	r3, #112	; 0x70
 800b1ea:	d87b      	bhi.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1ec:	2b60      	cmp	r3, #96	; 0x60
 800b1ee:	d050      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x19a>
 800b1f0:	2b60      	cmp	r3, #96	; 0x60
 800b1f2:	d877      	bhi.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1f4:	2b50      	cmp	r3, #80	; 0x50
 800b1f6:	d03c      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x17a>
 800b1f8:	2b50      	cmp	r3, #80	; 0x50
 800b1fa:	d873      	bhi.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b1fc:	2b40      	cmp	r3, #64	; 0x40
 800b1fe:	d058      	beq.n	800b2b2 <HAL_TIM_ConfigClockSource+0x1ba>
 800b200:	2b40      	cmp	r3, #64	; 0x40
 800b202:	d86f      	bhi.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b204:	2b30      	cmp	r3, #48	; 0x30
 800b206:	d064      	beq.n	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b208:	2b30      	cmp	r3, #48	; 0x30
 800b20a:	d86b      	bhi.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b20c:	2b20      	cmp	r3, #32
 800b20e:	d060      	beq.n	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b210:	2b20      	cmp	r3, #32
 800b212:	d867      	bhi.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
 800b214:	2b00      	cmp	r3, #0
 800b216:	d05c      	beq.n	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
 800b218:	2b10      	cmp	r3, #16
 800b21a:	d05a      	beq.n	800b2d2 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b21c:	e062      	b.n	800b2e4 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6818      	ldr	r0, [r3, #0]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	6899      	ldr	r1, [r3, #8]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	f000 fcf5 	bl	800bc1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b240:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	609a      	str	r2, [r3, #8]
      break;
 800b24a:	e04e      	b.n	800b2ea <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	6899      	ldr	r1, [r3, #8]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f000 fcde 	bl	800bc1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	689a      	ldr	r2, [r3, #8]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b26e:	609a      	str	r2, [r3, #8]
      break;
 800b270:	e03b      	b.n	800b2ea <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	6859      	ldr	r1, [r3, #4]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	461a      	mov	r2, r3
 800b280:	f000 fc50 	bl	800bb24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2150      	movs	r1, #80	; 0x50
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 fca9 	bl	800bbe2 <TIM_ITRx_SetConfig>
      break;
 800b290:	e02b      	b.n	800b2ea <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6818      	ldr	r0, [r3, #0]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	6859      	ldr	r1, [r3, #4]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f000 fc6f 	bl	800bb82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2160      	movs	r1, #96	; 0x60
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 fc99 	bl	800bbe2 <TIM_ITRx_SetConfig>
      break;
 800b2b0:	e01b      	b.n	800b2ea <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6818      	ldr	r0, [r3, #0]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	6859      	ldr	r1, [r3, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f000 fc30 	bl	800bb24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2140      	movs	r1, #64	; 0x40
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 fc89 	bl	800bbe2 <TIM_ITRx_SetConfig>
      break;
 800b2d0:	e00b      	b.n	800b2ea <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4610      	mov	r0, r2
 800b2de:	f000 fc80 	bl	800bbe2 <TIM_ITRx_SetConfig>
        break;
 800b2e2:	e002      	b.n	800b2ea <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b2e4:	bf00      	nop
 800b2e6:	e000      	b.n	800b2ea <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800b2e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	00100070 	.word	0x00100070
 800b308:	00100060 	.word	0x00100060
 800b30c:	00100050 	.word	0x00100050
 800b310:	00100040 	.word	0x00100040
 800b314:	00100030 	.word	0x00100030
 800b318:	00100020 	.word	0x00100020

0800b31c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a46      	ldr	r2, [pc, #280]	; (800b4ac <TIM_Base_SetConfig+0x12c>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d017      	beq.n	800b3c8 <TIM_Base_SetConfig+0x48>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b39e:	d013      	beq.n	800b3c8 <TIM_Base_SetConfig+0x48>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a43      	ldr	r2, [pc, #268]	; (800b4b0 <TIM_Base_SetConfig+0x130>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00f      	beq.n	800b3c8 <TIM_Base_SetConfig+0x48>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a42      	ldr	r2, [pc, #264]	; (800b4b4 <TIM_Base_SetConfig+0x134>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d00b      	beq.n	800b3c8 <TIM_Base_SetConfig+0x48>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a41      	ldr	r2, [pc, #260]	; (800b4b8 <TIM_Base_SetConfig+0x138>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d007      	beq.n	800b3c8 <TIM_Base_SetConfig+0x48>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a40      	ldr	r2, [pc, #256]	; (800b4bc <TIM_Base_SetConfig+0x13c>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d003      	beq.n	800b3c8 <TIM_Base_SetConfig+0x48>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a3f      	ldr	r2, [pc, #252]	; (800b4c0 <TIM_Base_SetConfig+0x140>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d108      	bne.n	800b3da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a33      	ldr	r2, [pc, #204]	; (800b4ac <TIM_Base_SetConfig+0x12c>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d023      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3e8:	d01f      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a30      	ldr	r2, [pc, #192]	; (800b4b0 <TIM_Base_SetConfig+0x130>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d01b      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a2f      	ldr	r2, [pc, #188]	; (800b4b4 <TIM_Base_SetConfig+0x134>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d017      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a2e      	ldr	r2, [pc, #184]	; (800b4b8 <TIM_Base_SetConfig+0x138>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d013      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a2d      	ldr	r2, [pc, #180]	; (800b4bc <TIM_Base_SetConfig+0x13c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d00f      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a2d      	ldr	r2, [pc, #180]	; (800b4c4 <TIM_Base_SetConfig+0x144>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d00b      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a2c      	ldr	r2, [pc, #176]	; (800b4c8 <TIM_Base_SetConfig+0x148>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d007      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a2b      	ldr	r2, [pc, #172]	; (800b4cc <TIM_Base_SetConfig+0x14c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d003      	beq.n	800b42a <TIM_Base_SetConfig+0xaa>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a26      	ldr	r2, [pc, #152]	; (800b4c0 <TIM_Base_SetConfig+0x140>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d108      	bne.n	800b43c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4313      	orrs	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	4313      	orrs	r3, r2
 800b448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	689a      	ldr	r2, [r3, #8]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a12      	ldr	r2, [pc, #72]	; (800b4ac <TIM_Base_SetConfig+0x12c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d013      	beq.n	800b490 <TIM_Base_SetConfig+0x110>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a14      	ldr	r2, [pc, #80]	; (800b4bc <TIM_Base_SetConfig+0x13c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d00f      	beq.n	800b490 <TIM_Base_SetConfig+0x110>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a14      	ldr	r2, [pc, #80]	; (800b4c4 <TIM_Base_SetConfig+0x144>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d00b      	beq.n	800b490 <TIM_Base_SetConfig+0x110>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a13      	ldr	r2, [pc, #76]	; (800b4c8 <TIM_Base_SetConfig+0x148>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d007      	beq.n	800b490 <TIM_Base_SetConfig+0x110>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a12      	ldr	r2, [pc, #72]	; (800b4cc <TIM_Base_SetConfig+0x14c>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d003      	beq.n	800b490 <TIM_Base_SetConfig+0x110>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a0d      	ldr	r2, [pc, #52]	; (800b4c0 <TIM_Base_SetConfig+0x140>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d103      	bne.n	800b498 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	615a      	str	r2, [r3, #20]
}
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40012c00 	.word	0x40012c00
 800b4b0:	40000400 	.word	0x40000400
 800b4b4:	40000800 	.word	0x40000800
 800b4b8:	40000c00 	.word	0x40000c00
 800b4bc:	40013400 	.word	0x40013400
 800b4c0:	40015000 	.word	0x40015000
 800b4c4:	40014000 	.word	0x40014000
 800b4c8:	40014400 	.word	0x40014400
 800b4cc:	40014800 	.word	0x40014800

0800b4d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	f023 0201 	bic.w	r2, r3, #1
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f023 0303 	bic.w	r3, r3, #3
 800b50a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	4313      	orrs	r3, r2
 800b514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f023 0302 	bic.w	r3, r3, #2
 800b51c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	4313      	orrs	r3, r2
 800b526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a30      	ldr	r2, [pc, #192]	; (800b5ec <TIM_OC1_SetConfig+0x11c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d013      	beq.n	800b558 <TIM_OC1_SetConfig+0x88>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a2f      	ldr	r2, [pc, #188]	; (800b5f0 <TIM_OC1_SetConfig+0x120>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d00f      	beq.n	800b558 <TIM_OC1_SetConfig+0x88>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a2e      	ldr	r2, [pc, #184]	; (800b5f4 <TIM_OC1_SetConfig+0x124>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d00b      	beq.n	800b558 <TIM_OC1_SetConfig+0x88>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a2d      	ldr	r2, [pc, #180]	; (800b5f8 <TIM_OC1_SetConfig+0x128>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d007      	beq.n	800b558 <TIM_OC1_SetConfig+0x88>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a2c      	ldr	r2, [pc, #176]	; (800b5fc <TIM_OC1_SetConfig+0x12c>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d003      	beq.n	800b558 <TIM_OC1_SetConfig+0x88>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a2b      	ldr	r2, [pc, #172]	; (800b600 <TIM_OC1_SetConfig+0x130>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d10c      	bne.n	800b572 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f023 0308 	bic.w	r3, r3, #8
 800b55e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	4313      	orrs	r3, r2
 800b568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f023 0304 	bic.w	r3, r3, #4
 800b570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a1d      	ldr	r2, [pc, #116]	; (800b5ec <TIM_OC1_SetConfig+0x11c>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d013      	beq.n	800b5a2 <TIM_OC1_SetConfig+0xd2>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a1c      	ldr	r2, [pc, #112]	; (800b5f0 <TIM_OC1_SetConfig+0x120>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d00f      	beq.n	800b5a2 <TIM_OC1_SetConfig+0xd2>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a1b      	ldr	r2, [pc, #108]	; (800b5f4 <TIM_OC1_SetConfig+0x124>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d00b      	beq.n	800b5a2 <TIM_OC1_SetConfig+0xd2>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a1a      	ldr	r2, [pc, #104]	; (800b5f8 <TIM_OC1_SetConfig+0x128>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d007      	beq.n	800b5a2 <TIM_OC1_SetConfig+0xd2>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <TIM_OC1_SetConfig+0x12c>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d003      	beq.n	800b5a2 <TIM_OC1_SetConfig+0xd2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a18      	ldr	r2, [pc, #96]	; (800b600 <TIM_OC1_SetConfig+0x130>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d111      	bne.n	800b5c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	685a      	ldr	r2, [r3, #4]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	621a      	str	r2, [r3, #32]
}
 800b5e0:	bf00      	nop
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	40012c00 	.word	0x40012c00
 800b5f0:	40013400 	.word	0x40013400
 800b5f4:	40014000 	.word	0x40014000
 800b5f8:	40014400 	.word	0x40014400
 800b5fc:	40014800 	.word	0x40014800
 800b600:	40015000 	.word	0x40015000

0800b604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b604:	b480      	push	{r7}
 800b606:	b087      	sub	sp, #28
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	f023 0210 	bic.w	r2, r3, #16
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	4313      	orrs	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	f023 0320 	bic.w	r3, r3, #32
 800b652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a2c      	ldr	r2, [pc, #176]	; (800b714 <TIM_OC2_SetConfig+0x110>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d007      	beq.n	800b678 <TIM_OC2_SetConfig+0x74>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a2b      	ldr	r2, [pc, #172]	; (800b718 <TIM_OC2_SetConfig+0x114>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d003      	beq.n	800b678 <TIM_OC2_SetConfig+0x74>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a2a      	ldr	r2, [pc, #168]	; (800b71c <TIM_OC2_SetConfig+0x118>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d10d      	bne.n	800b694 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b67e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	011b      	lsls	r3, r3, #4
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	4313      	orrs	r3, r2
 800b68a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b692:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a1f      	ldr	r2, [pc, #124]	; (800b714 <TIM_OC2_SetConfig+0x110>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d013      	beq.n	800b6c4 <TIM_OC2_SetConfig+0xc0>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a1e      	ldr	r2, [pc, #120]	; (800b718 <TIM_OC2_SetConfig+0x114>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d00f      	beq.n	800b6c4 <TIM_OC2_SetConfig+0xc0>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a1e      	ldr	r2, [pc, #120]	; (800b720 <TIM_OC2_SetConfig+0x11c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d00b      	beq.n	800b6c4 <TIM_OC2_SetConfig+0xc0>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a1d      	ldr	r2, [pc, #116]	; (800b724 <TIM_OC2_SetConfig+0x120>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d007      	beq.n	800b6c4 <TIM_OC2_SetConfig+0xc0>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a1c      	ldr	r2, [pc, #112]	; (800b728 <TIM_OC2_SetConfig+0x124>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d003      	beq.n	800b6c4 <TIM_OC2_SetConfig+0xc0>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a17      	ldr	r2, [pc, #92]	; (800b71c <TIM_OC2_SetConfig+0x118>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d113      	bne.n	800b6ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	621a      	str	r2, [r3, #32]
}
 800b706:	bf00      	nop
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	40012c00 	.word	0x40012c00
 800b718:	40013400 	.word	0x40013400
 800b71c:	40015000 	.word	0x40015000
 800b720:	40014000 	.word	0x40014000
 800b724:	40014400 	.word	0x40014400
 800b728:	40014800 	.word	0x40014800

0800b72c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b75a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 0303 	bic.w	r3, r3, #3
 800b766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4313      	orrs	r3, r2
 800b770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	4313      	orrs	r3, r2
 800b784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a2b      	ldr	r2, [pc, #172]	; (800b838 <TIM_OC3_SetConfig+0x10c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d007      	beq.n	800b79e <TIM_OC3_SetConfig+0x72>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a2a      	ldr	r2, [pc, #168]	; (800b83c <TIM_OC3_SetConfig+0x110>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d003      	beq.n	800b79e <TIM_OC3_SetConfig+0x72>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a29      	ldr	r2, [pc, #164]	; (800b840 <TIM_OC3_SetConfig+0x114>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d10d      	bne.n	800b7ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a1e      	ldr	r2, [pc, #120]	; (800b838 <TIM_OC3_SetConfig+0x10c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d013      	beq.n	800b7ea <TIM_OC3_SetConfig+0xbe>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a1d      	ldr	r2, [pc, #116]	; (800b83c <TIM_OC3_SetConfig+0x110>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d00f      	beq.n	800b7ea <TIM_OC3_SetConfig+0xbe>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a1d      	ldr	r2, [pc, #116]	; (800b844 <TIM_OC3_SetConfig+0x118>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d00b      	beq.n	800b7ea <TIM_OC3_SetConfig+0xbe>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1c      	ldr	r2, [pc, #112]	; (800b848 <TIM_OC3_SetConfig+0x11c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d007      	beq.n	800b7ea <TIM_OC3_SetConfig+0xbe>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a1b      	ldr	r2, [pc, #108]	; (800b84c <TIM_OC3_SetConfig+0x120>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d003      	beq.n	800b7ea <TIM_OC3_SetConfig+0xbe>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a16      	ldr	r2, [pc, #88]	; (800b840 <TIM_OC3_SetConfig+0x114>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d113      	bne.n	800b812 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	4313      	orrs	r3, r2
 800b804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4313      	orrs	r3, r2
 800b810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	621a      	str	r2, [r3, #32]
}
 800b82c:	bf00      	nop
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	40012c00 	.word	0x40012c00
 800b83c:	40013400 	.word	0x40013400
 800b840:	40015000 	.word	0x40015000
 800b844:	40014000 	.word	0x40014000
 800b848:	40014400 	.word	0x40014400
 800b84c:	40014800 	.word	0x40014800

0800b850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b87e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	021b      	lsls	r3, r3, #8
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	4313      	orrs	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b89e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	031b      	lsls	r3, r3, #12
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a2c      	ldr	r2, [pc, #176]	; (800b960 <TIM_OC4_SetConfig+0x110>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d007      	beq.n	800b8c4 <TIM_OC4_SetConfig+0x74>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a2b      	ldr	r2, [pc, #172]	; (800b964 <TIM_OC4_SetConfig+0x114>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d003      	beq.n	800b8c4 <TIM_OC4_SetConfig+0x74>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a2a      	ldr	r2, [pc, #168]	; (800b968 <TIM_OC4_SetConfig+0x118>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d10d      	bne.n	800b8e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	031b      	lsls	r3, r3, #12
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a1f      	ldr	r2, [pc, #124]	; (800b960 <TIM_OC4_SetConfig+0x110>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d013      	beq.n	800b910 <TIM_OC4_SetConfig+0xc0>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a1e      	ldr	r2, [pc, #120]	; (800b964 <TIM_OC4_SetConfig+0x114>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00f      	beq.n	800b910 <TIM_OC4_SetConfig+0xc0>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a1e      	ldr	r2, [pc, #120]	; (800b96c <TIM_OC4_SetConfig+0x11c>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00b      	beq.n	800b910 <TIM_OC4_SetConfig+0xc0>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a1d      	ldr	r2, [pc, #116]	; (800b970 <TIM_OC4_SetConfig+0x120>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <TIM_OC4_SetConfig+0xc0>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a1c      	ldr	r2, [pc, #112]	; (800b974 <TIM_OC4_SetConfig+0x124>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_OC4_SetConfig+0xc0>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a17      	ldr	r2, [pc, #92]	; (800b968 <TIM_OC4_SetConfig+0x118>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d113      	bne.n	800b938 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b916:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b91e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	019b      	lsls	r3, r3, #6
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	4313      	orrs	r3, r2
 800b92a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	019b      	lsls	r3, r3, #6
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4313      	orrs	r3, r2
 800b936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	621a      	str	r2, [r3, #32]
}
 800b952:	bf00      	nop
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	40012c00 	.word	0x40012c00
 800b964:	40013400 	.word	0x40013400
 800b968:	40015000 	.word	0x40015000
 800b96c:	40014000 	.word	0x40014000
 800b970:	40014400 	.word	0x40014400
 800b974:	40014800 	.word	0x40014800

0800b978 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b978:	b480      	push	{r7}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b9bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	041b      	lsls	r3, r3, #16
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a19      	ldr	r2, [pc, #100]	; (800ba34 <TIM_OC5_SetConfig+0xbc>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d013      	beq.n	800b9fa <TIM_OC5_SetConfig+0x82>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a18      	ldr	r2, [pc, #96]	; (800ba38 <TIM_OC5_SetConfig+0xc0>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d00f      	beq.n	800b9fa <TIM_OC5_SetConfig+0x82>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a17      	ldr	r2, [pc, #92]	; (800ba3c <TIM_OC5_SetConfig+0xc4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d00b      	beq.n	800b9fa <TIM_OC5_SetConfig+0x82>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a16      	ldr	r2, [pc, #88]	; (800ba40 <TIM_OC5_SetConfig+0xc8>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d007      	beq.n	800b9fa <TIM_OC5_SetConfig+0x82>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a15      	ldr	r2, [pc, #84]	; (800ba44 <TIM_OC5_SetConfig+0xcc>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d003      	beq.n	800b9fa <TIM_OC5_SetConfig+0x82>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a14      	ldr	r2, [pc, #80]	; (800ba48 <TIM_OC5_SetConfig+0xd0>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d109      	bne.n	800ba0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	021b      	lsls	r3, r3, #8
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	697a      	ldr	r2, [r7, #20]
 800ba12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	621a      	str	r2, [r3, #32]
}
 800ba28:	bf00      	nop
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	40012c00 	.word	0x40012c00
 800ba38:	40013400 	.word	0x40013400
 800ba3c:	40014000 	.word	0x40014000
 800ba40:	40014400 	.word	0x40014400
 800ba44:	40014800 	.word	0x40014800
 800ba48:	40015000 	.word	0x40015000

0800ba4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b087      	sub	sp, #28
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	051b      	lsls	r3, r3, #20
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a1a      	ldr	r2, [pc, #104]	; (800bb0c <TIM_OC6_SetConfig+0xc0>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d013      	beq.n	800bad0 <TIM_OC6_SetConfig+0x84>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a19      	ldr	r2, [pc, #100]	; (800bb10 <TIM_OC6_SetConfig+0xc4>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d00f      	beq.n	800bad0 <TIM_OC6_SetConfig+0x84>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a18      	ldr	r2, [pc, #96]	; (800bb14 <TIM_OC6_SetConfig+0xc8>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00b      	beq.n	800bad0 <TIM_OC6_SetConfig+0x84>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a17      	ldr	r2, [pc, #92]	; (800bb18 <TIM_OC6_SetConfig+0xcc>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d007      	beq.n	800bad0 <TIM_OC6_SetConfig+0x84>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a16      	ldr	r2, [pc, #88]	; (800bb1c <TIM_OC6_SetConfig+0xd0>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d003      	beq.n	800bad0 <TIM_OC6_SetConfig+0x84>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a15      	ldr	r2, [pc, #84]	; (800bb20 <TIM_OC6_SetConfig+0xd4>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d109      	bne.n	800bae4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	029b      	lsls	r3, r3, #10
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	621a      	str	r2, [r3, #32]
}
 800bafe:	bf00      	nop
 800bb00:	371c      	adds	r7, #28
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40012c00 	.word	0x40012c00
 800bb10:	40013400 	.word	0x40013400
 800bb14:	40014000 	.word	0x40014000
 800bb18:	40014400 	.word	0x40014400
 800bb1c:	40014800 	.word	0x40014800
 800bb20:	40015000 	.word	0x40015000

0800bb24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	f023 0201 	bic.w	r2, r3, #1
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f023 030a 	bic.w	r3, r3, #10
 800bb60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	697a      	ldr	r2, [r7, #20]
 800bb74:	621a      	str	r2, [r3, #32]
}
 800bb76:	bf00      	nop
 800bb78:	371c      	adds	r7, #28
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb82:	b480      	push	{r7}
 800bb84:	b087      	sub	sp, #28
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	f023 0210 	bic.w	r2, r3, #16
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	031b      	lsls	r3, r3, #12
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	011b      	lsls	r3, r3, #4
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	621a      	str	r2, [r3, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	371c      	adds	r7, #28
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bbf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	f043 0307 	orr.w	r3, r3, #7
 800bc08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	609a      	str	r2, [r3, #8]
}
 800bc10:	bf00      	nop
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	021a      	lsls	r2, r3, #8
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	609a      	str	r2, [r3, #8]
}
 800bc50:	bf00      	nop
 800bc52:	371c      	adds	r7, #28
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f003 031f 	and.w	r3, r3, #31
 800bc6e:	2201      	movs	r2, #1
 800bc70:	fa02 f303 	lsl.w	r3, r2, r3
 800bc74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6a1a      	ldr	r2, [r3, #32]
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	43db      	mvns	r3, r3
 800bc7e:	401a      	ands	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6a1a      	ldr	r2, [r3, #32]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f003 031f 	and.w	r3, r3, #31
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	fa01 f303 	lsl.w	r3, r1, r3
 800bc94:	431a      	orrs	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	621a      	str	r2, [r3, #32]
}
 800bc9a:	bf00      	nop
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
	...

0800bca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d101      	bne.n	800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e074      	b.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a34      	ldr	r2, [pc, #208]	; (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d009      	beq.n	800bcfe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a33      	ldr	r2, [pc, #204]	; (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d004      	beq.n	800bcfe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a31      	ldr	r2, [pc, #196]	; (800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d108      	bne.n	800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bd16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a21      	ldr	r2, [pc, #132]	; (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d022      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd40:	d01d      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a1f      	ldr	r2, [pc, #124]	; (800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d018      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a1d      	ldr	r2, [pc, #116]	; (800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d013      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a1c      	ldr	r2, [pc, #112]	; (800bdcc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d00e      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a15      	ldr	r2, [pc, #84]	; (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d009      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a18      	ldr	r2, [pc, #96]	; (800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d004      	beq.n	800bd7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a11      	ldr	r2, [pc, #68]	; (800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d10c      	bne.n	800bd98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	40012c00 	.word	0x40012c00
 800bdbc:	40013400 	.word	0x40013400
 800bdc0:	40015000 	.word	0x40015000
 800bdc4:	40000400 	.word	0x40000400
 800bdc8:	40000800 	.word	0x40000800
 800bdcc:	40000c00 	.word	0x40000c00
 800bdd0:	40014000 	.word	0x40014000

0800bdd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d101      	bne.n	800bdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bdec:	2302      	movs	r3, #2
 800bdee:	e096      	b.n	800bf1e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	4313      	orrs	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	4313      	orrs	r3, r2
 800be12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	4313      	orrs	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be56:	4313      	orrs	r3, r2
 800be58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	041b      	lsls	r3, r3, #16
 800be66:	4313      	orrs	r3, r2
 800be68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a2f      	ldr	r2, [pc, #188]	; (800bf2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d009      	beq.n	800be88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a2d      	ldr	r2, [pc, #180]	; (800bf30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d004      	beq.n	800be88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a2c      	ldr	r2, [pc, #176]	; (800bf34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d106      	bne.n	800be96 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	4313      	orrs	r3, r2
 800be94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a24      	ldr	r2, [pc, #144]	; (800bf2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d009      	beq.n	800beb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a22      	ldr	r2, [pc, #136]	; (800bf30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d004      	beq.n	800beb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a21      	ldr	r2, [pc, #132]	; (800bf34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d12b      	bne.n	800bf0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebe:	051b      	lsls	r3, r3, #20
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	6a1b      	ldr	r3, [r3, #32]
 800bece:	4313      	orrs	r3, r2
 800bed0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bedc:	4313      	orrs	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a11      	ldr	r2, [pc, #68]	; (800bf2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d009      	beq.n	800befe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	4a10      	ldr	r2, [pc, #64]	; (800bf30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d004      	beq.n	800befe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a0e      	ldr	r2, [pc, #56]	; (800bf34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d106      	bne.n	800bf0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3714      	adds	r7, #20
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	40012c00 	.word	0x40012c00
 800bf30:	40013400 	.word	0x40013400
 800bf34:	40015000 	.word	0x40015000

0800bf38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e042      	b.n	800c05c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d106      	bne.n	800bfee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7f9 fd71 	bl	8005ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2224      	movs	r2, #36	; 0x24
 800bff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f022 0201 	bic.w	r2, r2, #1
 800c004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fb5c 	bl	800c6c4 <UART_SetConfig>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d101      	bne.n	800c016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e022      	b.n	800c05c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fe1a 	bl	800cc58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689a      	ldr	r2, [r3, #8]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f042 0201 	orr.w	r2, r2, #1
 800c052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fea1 	bl	800cd9c <UART_CheckIdleState>
 800c05a:	4603      	mov	r3, r0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08a      	sub	sp, #40	; 0x28
 800c068:	af02      	add	r7, sp, #8
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	603b      	str	r3, [r7, #0]
 800c070:	4613      	mov	r3, r2
 800c072:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	f040 8083 	bne.w	800c186 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <HAL_UART_Transmit+0x28>
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e07b      	b.n	800c188 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c096:	2b01      	cmp	r3, #1
 800c098:	d101      	bne.n	800c09e <HAL_UART_Transmit+0x3a>
 800c09a:	2302      	movs	r3, #2
 800c09c:	e074      	b.n	800c188 <HAL_UART_Transmit+0x124>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2221      	movs	r2, #33	; 0x21
 800c0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0b6:	f7f9 fe07 	bl	8005cc8 <HAL_GetTick>
 800c0ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	88fa      	ldrh	r2, [r7, #6]
 800c0c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	88fa      	ldrh	r2, [r7, #6]
 800c0c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d4:	d108      	bne.n	800c0e8 <HAL_UART_Transmit+0x84>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d104      	bne.n	800c0e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	61bb      	str	r3, [r7, #24]
 800c0e6:	e003      	b.n	800c0f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c0f8:	e02c      	b.n	800c154 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	2200      	movs	r2, #0
 800c102:	2180      	movs	r1, #128	; 0x80
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 fe94 	bl	800ce32 <UART_WaitOnFlagUntilTimeout>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e039      	b.n	800c188 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10b      	bne.n	800c132 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	3302      	adds	r3, #2
 800c12e:	61bb      	str	r3, [r7, #24]
 800c130:	e007      	b.n	800c142 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	781a      	ldrb	r2, [r3, #0]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	3301      	adds	r3, #1
 800c140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1cc      	bne.n	800c0fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2200      	movs	r2, #0
 800c168:	2140      	movs	r1, #64	; 0x40
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	f000 fe61 	bl	800ce32 <UART_WaitOnFlagUntilTimeout>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c176:	2303      	movs	r3, #3
 800c178:	e006      	b.n	800c188 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	e000      	b.n	800c188 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c186:	2302      	movs	r3, #2
  }
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	4613      	mov	r3, r2
 800c19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	d131      	bne.n	800c20c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <HAL_UART_Receive_IT+0x24>
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e02a      	b.n	800c20e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <HAL_UART_Receive_IT+0x36>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e023      	b.n	800c20e <HAL_UART_Receive_IT+0x7e>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a0f      	ldr	r2, [pc, #60]	; (800c218 <HAL_UART_Receive_IT+0x88>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00e      	beq.n	800c1fc <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d007      	beq.n	800c1fc <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c1fa:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c1fc:	88fb      	ldrh	r3, [r7, #6]
 800c1fe:	461a      	mov	r2, r3
 800c200:	68b9      	ldr	r1, [r7, #8]
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f000 fe96 	bl	800cf34 <UART_Start_Receive_IT>
 800c208:	4603      	mov	r3, r0
 800c20a:	e000      	b.n	800c20e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c20c:	2302      	movs	r3, #2
  }
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	40008000 	.word	0x40008000

0800c21c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b088      	sub	sp, #32
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	69db      	ldr	r3, [r3, #28]
 800c22a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c23c:	69fa      	ldr	r2, [r7, #28]
 800c23e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c242:	4013      	ands	r3, r2
 800c244:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d118      	bne.n	800c27e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	f003 0320 	and.w	r3, r3, #32
 800c252:	2b00      	cmp	r3, #0
 800c254:	d013      	beq.n	800c27e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c266:	2b00      	cmp	r3, #0
 800c268:	d009      	beq.n	800c27e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 81fb 	beq.w	800c66a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	4798      	blx	r3
      }
      return;
 800c27c:	e1f5      	b.n	800c66a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 80ef 	beq.w	800c464 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	4b73      	ldr	r3, [pc, #460]	; (800c458 <HAL_UART_IRQHandler+0x23c>)
 800c28a:	4013      	ands	r3, r2
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d105      	bne.n	800c29c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c290:	69ba      	ldr	r2, [r7, #24]
 800c292:	4b72      	ldr	r3, [pc, #456]	; (800c45c <HAL_UART_IRQHandler+0x240>)
 800c294:	4013      	ands	r3, r2
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 80e4 	beq.w	800c464 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d010      	beq.n	800c2c8 <HAL_UART_IRQHandler+0xac>
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00b      	beq.n	800c2c8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2be:	f043 0201 	orr.w	r2, r3, #1
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	f003 0302 	and.w	r3, r3, #2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d010      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xd8>
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ea:	f043 0204 	orr.w	r2, r3, #4
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	f003 0304 	and.w	r3, r3, #4
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d010      	beq.n	800c320 <HAL_UART_IRQHandler+0x104>
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2204      	movs	r2, #4
 800c30e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c316:	f043 0202 	orr.w	r2, r3, #2
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	f003 0308 	and.w	r3, r3, #8
 800c326:	2b00      	cmp	r3, #0
 800c328:	d015      	beq.n	800c356 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	f003 0320 	and.w	r3, r3, #32
 800c330:	2b00      	cmp	r3, #0
 800c332:	d104      	bne.n	800c33e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	4b48      	ldr	r3, [pc, #288]	; (800c458 <HAL_UART_IRQHandler+0x23c>)
 800c338:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00b      	beq.n	800c356 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2208      	movs	r2, #8
 800c344:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c34c:	f043 0208 	orr.w	r2, r3, #8
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d011      	beq.n	800c384 <HAL_UART_IRQHandler+0x168>
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00c      	beq.n	800c384 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c37a:	f043 0220 	orr.w	r2, r3, #32
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 816f 	beq.w	800c66e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	2b00      	cmp	r3, #0
 800c398:	d011      	beq.n	800c3be <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	f003 0320 	and.w	r3, r3, #32
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d104      	bne.n	800c3ae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d007      	beq.n	800c3be <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d0:	2b40      	cmp	r3, #64	; 0x40
 800c3d2:	d004      	beq.n	800c3de <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d031      	beq.n	800c442 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fe66 	bl	800d0b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ee:	2b40      	cmp	r3, #64	; 0x40
 800c3f0:	d123      	bne.n	800c43a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	689a      	ldr	r2, [r3, #8]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c400:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c406:	2b00      	cmp	r3, #0
 800c408:	d013      	beq.n	800c432 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c40e:	4a14      	ldr	r2, [pc, #80]	; (800c460 <HAL_UART_IRQHandler+0x244>)
 800c410:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c416:	4618      	mov	r0, r3
 800c418:	f7fb f9a2 	bl	8007760 <HAL_DMA_Abort_IT>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d017      	beq.n	800c452 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c430:	e00f      	b.n	800c452 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f930 	bl	800c698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c438:	e00b      	b.n	800c452 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f92c 	bl	800c698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c440:	e007      	b.n	800c452 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f928 	bl	800c698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c450:	e10d      	b.n	800c66e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c452:	bf00      	nop
    return;
 800c454:	e10b      	b.n	800c66e <HAL_UART_IRQHandler+0x452>
 800c456:	bf00      	nop
 800c458:	10000001 	.word	0x10000001
 800c45c:	04000120 	.word	0x04000120
 800c460:	0800d115 	.word	0x0800d115

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c468:	2b01      	cmp	r3, #1
 800c46a:	f040 80ab 	bne.w	800c5c4 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	f003 0310 	and.w	r3, r3, #16
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 80a5 	beq.w	800c5c4 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	f003 0310 	and.w	r3, r3, #16
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 809f 	beq.w	800c5c4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2210      	movs	r2, #16
 800c48c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c498:	2b40      	cmp	r3, #64	; 0x40
 800c49a:	d155      	bne.n	800c548 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c4a6:	893b      	ldrh	r3, [r7, #8]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 80e2 	beq.w	800c672 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4b4:	893a      	ldrh	r2, [r7, #8]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	f080 80db 	bcs.w	800c672 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	893a      	ldrh	r2, [r7, #8]
 800c4c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0320 	and.w	r3, r3, #32
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d12b      	bne.n	800c52c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	689a      	ldr	r2, [r3, #8]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f022 0201 	bic.w	r2, r2, #1
 800c4f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689a      	ldr	r2, [r3, #8]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c502:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2220      	movs	r2, #32
 800c508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f022 0210 	bic.w	r2, r2, #16
 800c520:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c526:	4618      	mov	r0, r3
 800c528:	f7fb f8c1 	bl	80076ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c538:	b29b      	uxth	r3, r3
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f8b3 	bl	800c6ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c546:	e094      	b.n	800c672 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c554:	b29b      	uxth	r3, r3
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c560:	b29b      	uxth	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 8087 	beq.w	800c676 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800c568:	897b      	ldrh	r3, [r7, #10]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 8083 	beq.w	800c676 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c57e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	6812      	ldr	r2, [r2, #0]
 800c58a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c58e:	f023 0301 	bic.w	r3, r3, #1
 800c592:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2220      	movs	r2, #32
 800c598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f022 0210 	bic.w	r2, r2, #16
 800c5b6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5b8:	897b      	ldrh	r3, [r7, #10]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 f875 	bl	800c6ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5c2:	e058      	b.n	800c676 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00d      	beq.n	800c5ea <HAL_UART_IRQHandler+0x3ce>
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d008      	beq.n	800c5ea <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c5e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 f8a2 	bl	800d72c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c5e8:	e048      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d012      	beq.n	800c61a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d104      	bne.n	800c608 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d008      	beq.n	800c61a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d034      	beq.n	800c67a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	4798      	blx	r3
    }
    return;
 800c618:	e02f      	b.n	800c67a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c620:	2b00      	cmp	r3, #0
 800c622:	d008      	beq.n	800c636 <HAL_UART_IRQHandler+0x41a>
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 fd86 	bl	800d140 <UART_EndTransmit_IT>
    return;
 800c634:	e022      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d008      	beq.n	800c652 <HAL_UART_IRQHandler+0x436>
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c646:	2b00      	cmp	r3, #0
 800c648:	d003      	beq.n	800c652 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f001 f882 	bl	800d754 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c650:	e014      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00f      	beq.n	800c67c <HAL_UART_IRQHandler+0x460>
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	da0c      	bge.n	800c67c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f001 f86c 	bl	800d740 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c668:	e008      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
      return;
 800c66a:	bf00      	nop
 800c66c:	e006      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
    return;
 800c66e:	bf00      	nop
 800c670:	e004      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
      return;
 800c672:	bf00      	nop
 800c674:	e002      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
      return;
 800c676:	bf00      	nop
 800c678:	e000      	b.n	800c67c <HAL_UART_IRQHandler+0x460>
    return;
 800c67a:	bf00      	nop
  }
}
 800c67c:	3720      	adds	r7, #32
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop

0800c684 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6c4:	b5b0      	push	{r4, r5, r7, lr}
 800c6c6:	b088      	sub	sp, #32
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	431a      	orrs	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	431a      	orrs	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	69db      	ldr	r3, [r3, #28]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	4bb1      	ldr	r3, [pc, #708]	; (800c9b4 <UART_SetConfig+0x2f0>)
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	6812      	ldr	r2, [r2, #0]
 800c6f6:	69f9      	ldr	r1, [r7, #28]
 800c6f8:	430b      	orrs	r3, r1
 800c6fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68da      	ldr	r2, [r3, #12]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	430a      	orrs	r2, r1
 800c710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4aa6      	ldr	r2, [pc, #664]	; (800c9b8 <UART_SetConfig+0x2f4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d004      	beq.n	800c72c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	69fa      	ldr	r2, [r7, #28]
 800c728:	4313      	orrs	r3, r2
 800c72a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c736:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	6812      	ldr	r2, [r2, #0]
 800c73e:	69f9      	ldr	r1, [r7, #28]
 800c740:	430b      	orrs	r3, r1
 800c742:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74a:	f023 010f 	bic.w	r1, r3, #15
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	430a      	orrs	r2, r1
 800c758:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a97      	ldr	r2, [pc, #604]	; (800c9bc <UART_SetConfig+0x2f8>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d120      	bne.n	800c7a6 <UART_SetConfig+0xe2>
 800c764:	4b96      	ldr	r3, [pc, #600]	; (800c9c0 <UART_SetConfig+0x2fc>)
 800c766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c76a:	f003 0303 	and.w	r3, r3, #3
 800c76e:	2b03      	cmp	r3, #3
 800c770:	d816      	bhi.n	800c7a0 <UART_SetConfig+0xdc>
 800c772:	a201      	add	r2, pc, #4	; (adr r2, 800c778 <UART_SetConfig+0xb4>)
 800c774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c778:	0800c789 	.word	0x0800c789
 800c77c:	0800c795 	.word	0x0800c795
 800c780:	0800c78f 	.word	0x0800c78f
 800c784:	0800c79b 	.word	0x0800c79b
 800c788:	2301      	movs	r3, #1
 800c78a:	76fb      	strb	r3, [r7, #27]
 800c78c:	e0e7      	b.n	800c95e <UART_SetConfig+0x29a>
 800c78e:	2302      	movs	r3, #2
 800c790:	76fb      	strb	r3, [r7, #27]
 800c792:	e0e4      	b.n	800c95e <UART_SetConfig+0x29a>
 800c794:	2304      	movs	r3, #4
 800c796:	76fb      	strb	r3, [r7, #27]
 800c798:	e0e1      	b.n	800c95e <UART_SetConfig+0x29a>
 800c79a:	2308      	movs	r3, #8
 800c79c:	76fb      	strb	r3, [r7, #27]
 800c79e:	e0de      	b.n	800c95e <UART_SetConfig+0x29a>
 800c7a0:	2310      	movs	r3, #16
 800c7a2:	76fb      	strb	r3, [r7, #27]
 800c7a4:	e0db      	b.n	800c95e <UART_SetConfig+0x29a>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a86      	ldr	r2, [pc, #536]	; (800c9c4 <UART_SetConfig+0x300>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d132      	bne.n	800c816 <UART_SetConfig+0x152>
 800c7b0:	4b83      	ldr	r3, [pc, #524]	; (800c9c0 <UART_SetConfig+0x2fc>)
 800c7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7b6:	f003 030c 	and.w	r3, r3, #12
 800c7ba:	2b0c      	cmp	r3, #12
 800c7bc:	d828      	bhi.n	800c810 <UART_SetConfig+0x14c>
 800c7be:	a201      	add	r2, pc, #4	; (adr r2, 800c7c4 <UART_SetConfig+0x100>)
 800c7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c4:	0800c7f9 	.word	0x0800c7f9
 800c7c8:	0800c811 	.word	0x0800c811
 800c7cc:	0800c811 	.word	0x0800c811
 800c7d0:	0800c811 	.word	0x0800c811
 800c7d4:	0800c805 	.word	0x0800c805
 800c7d8:	0800c811 	.word	0x0800c811
 800c7dc:	0800c811 	.word	0x0800c811
 800c7e0:	0800c811 	.word	0x0800c811
 800c7e4:	0800c7ff 	.word	0x0800c7ff
 800c7e8:	0800c811 	.word	0x0800c811
 800c7ec:	0800c811 	.word	0x0800c811
 800c7f0:	0800c811 	.word	0x0800c811
 800c7f4:	0800c80b 	.word	0x0800c80b
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	76fb      	strb	r3, [r7, #27]
 800c7fc:	e0af      	b.n	800c95e <UART_SetConfig+0x29a>
 800c7fe:	2302      	movs	r3, #2
 800c800:	76fb      	strb	r3, [r7, #27]
 800c802:	e0ac      	b.n	800c95e <UART_SetConfig+0x29a>
 800c804:	2304      	movs	r3, #4
 800c806:	76fb      	strb	r3, [r7, #27]
 800c808:	e0a9      	b.n	800c95e <UART_SetConfig+0x29a>
 800c80a:	2308      	movs	r3, #8
 800c80c:	76fb      	strb	r3, [r7, #27]
 800c80e:	e0a6      	b.n	800c95e <UART_SetConfig+0x29a>
 800c810:	2310      	movs	r3, #16
 800c812:	76fb      	strb	r3, [r7, #27]
 800c814:	e0a3      	b.n	800c95e <UART_SetConfig+0x29a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a6b      	ldr	r2, [pc, #428]	; (800c9c8 <UART_SetConfig+0x304>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d120      	bne.n	800c862 <UART_SetConfig+0x19e>
 800c820:	4b67      	ldr	r3, [pc, #412]	; (800c9c0 <UART_SetConfig+0x2fc>)
 800c822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c826:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c82a:	2b30      	cmp	r3, #48	; 0x30
 800c82c:	d013      	beq.n	800c856 <UART_SetConfig+0x192>
 800c82e:	2b30      	cmp	r3, #48	; 0x30
 800c830:	d814      	bhi.n	800c85c <UART_SetConfig+0x198>
 800c832:	2b20      	cmp	r3, #32
 800c834:	d009      	beq.n	800c84a <UART_SetConfig+0x186>
 800c836:	2b20      	cmp	r3, #32
 800c838:	d810      	bhi.n	800c85c <UART_SetConfig+0x198>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <UART_SetConfig+0x180>
 800c83e:	2b10      	cmp	r3, #16
 800c840:	d006      	beq.n	800c850 <UART_SetConfig+0x18c>
 800c842:	e00b      	b.n	800c85c <UART_SetConfig+0x198>
 800c844:	2300      	movs	r3, #0
 800c846:	76fb      	strb	r3, [r7, #27]
 800c848:	e089      	b.n	800c95e <UART_SetConfig+0x29a>
 800c84a:	2302      	movs	r3, #2
 800c84c:	76fb      	strb	r3, [r7, #27]
 800c84e:	e086      	b.n	800c95e <UART_SetConfig+0x29a>
 800c850:	2304      	movs	r3, #4
 800c852:	76fb      	strb	r3, [r7, #27]
 800c854:	e083      	b.n	800c95e <UART_SetConfig+0x29a>
 800c856:	2308      	movs	r3, #8
 800c858:	76fb      	strb	r3, [r7, #27]
 800c85a:	e080      	b.n	800c95e <UART_SetConfig+0x29a>
 800c85c:	2310      	movs	r3, #16
 800c85e:	76fb      	strb	r3, [r7, #27]
 800c860:	e07d      	b.n	800c95e <UART_SetConfig+0x29a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a59      	ldr	r2, [pc, #356]	; (800c9cc <UART_SetConfig+0x308>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d120      	bne.n	800c8ae <UART_SetConfig+0x1ea>
 800c86c:	4b54      	ldr	r3, [pc, #336]	; (800c9c0 <UART_SetConfig+0x2fc>)
 800c86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c872:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c876:	2bc0      	cmp	r3, #192	; 0xc0
 800c878:	d013      	beq.n	800c8a2 <UART_SetConfig+0x1de>
 800c87a:	2bc0      	cmp	r3, #192	; 0xc0
 800c87c:	d814      	bhi.n	800c8a8 <UART_SetConfig+0x1e4>
 800c87e:	2b80      	cmp	r3, #128	; 0x80
 800c880:	d009      	beq.n	800c896 <UART_SetConfig+0x1d2>
 800c882:	2b80      	cmp	r3, #128	; 0x80
 800c884:	d810      	bhi.n	800c8a8 <UART_SetConfig+0x1e4>
 800c886:	2b00      	cmp	r3, #0
 800c888:	d002      	beq.n	800c890 <UART_SetConfig+0x1cc>
 800c88a:	2b40      	cmp	r3, #64	; 0x40
 800c88c:	d006      	beq.n	800c89c <UART_SetConfig+0x1d8>
 800c88e:	e00b      	b.n	800c8a8 <UART_SetConfig+0x1e4>
 800c890:	2300      	movs	r3, #0
 800c892:	76fb      	strb	r3, [r7, #27]
 800c894:	e063      	b.n	800c95e <UART_SetConfig+0x29a>
 800c896:	2302      	movs	r3, #2
 800c898:	76fb      	strb	r3, [r7, #27]
 800c89a:	e060      	b.n	800c95e <UART_SetConfig+0x29a>
 800c89c:	2304      	movs	r3, #4
 800c89e:	76fb      	strb	r3, [r7, #27]
 800c8a0:	e05d      	b.n	800c95e <UART_SetConfig+0x29a>
 800c8a2:	2308      	movs	r3, #8
 800c8a4:	76fb      	strb	r3, [r7, #27]
 800c8a6:	e05a      	b.n	800c95e <UART_SetConfig+0x29a>
 800c8a8:	2310      	movs	r3, #16
 800c8aa:	76fb      	strb	r3, [r7, #27]
 800c8ac:	e057      	b.n	800c95e <UART_SetConfig+0x29a>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a47      	ldr	r2, [pc, #284]	; (800c9d0 <UART_SetConfig+0x30c>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d125      	bne.n	800c904 <UART_SetConfig+0x240>
 800c8b8:	4b41      	ldr	r3, [pc, #260]	; (800c9c0 <UART_SetConfig+0x2fc>)
 800c8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8c6:	d017      	beq.n	800c8f8 <UART_SetConfig+0x234>
 800c8c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8cc:	d817      	bhi.n	800c8fe <UART_SetConfig+0x23a>
 800c8ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d2:	d00b      	beq.n	800c8ec <UART_SetConfig+0x228>
 800c8d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d8:	d811      	bhi.n	800c8fe <UART_SetConfig+0x23a>
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <UART_SetConfig+0x222>
 800c8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e2:	d006      	beq.n	800c8f2 <UART_SetConfig+0x22e>
 800c8e4:	e00b      	b.n	800c8fe <UART_SetConfig+0x23a>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	76fb      	strb	r3, [r7, #27]
 800c8ea:	e038      	b.n	800c95e <UART_SetConfig+0x29a>
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	76fb      	strb	r3, [r7, #27]
 800c8f0:	e035      	b.n	800c95e <UART_SetConfig+0x29a>
 800c8f2:	2304      	movs	r3, #4
 800c8f4:	76fb      	strb	r3, [r7, #27]
 800c8f6:	e032      	b.n	800c95e <UART_SetConfig+0x29a>
 800c8f8:	2308      	movs	r3, #8
 800c8fa:	76fb      	strb	r3, [r7, #27]
 800c8fc:	e02f      	b.n	800c95e <UART_SetConfig+0x29a>
 800c8fe:	2310      	movs	r3, #16
 800c900:	76fb      	strb	r3, [r7, #27]
 800c902:	e02c      	b.n	800c95e <UART_SetConfig+0x29a>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a2b      	ldr	r2, [pc, #172]	; (800c9b8 <UART_SetConfig+0x2f4>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d125      	bne.n	800c95a <UART_SetConfig+0x296>
 800c90e:	4b2c      	ldr	r3, [pc, #176]	; (800c9c0 <UART_SetConfig+0x2fc>)
 800c910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c914:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c91c:	d017      	beq.n	800c94e <UART_SetConfig+0x28a>
 800c91e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c922:	d817      	bhi.n	800c954 <UART_SetConfig+0x290>
 800c924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c928:	d00b      	beq.n	800c942 <UART_SetConfig+0x27e>
 800c92a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c92e:	d811      	bhi.n	800c954 <UART_SetConfig+0x290>
 800c930:	2b00      	cmp	r3, #0
 800c932:	d003      	beq.n	800c93c <UART_SetConfig+0x278>
 800c934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c938:	d006      	beq.n	800c948 <UART_SetConfig+0x284>
 800c93a:	e00b      	b.n	800c954 <UART_SetConfig+0x290>
 800c93c:	2300      	movs	r3, #0
 800c93e:	76fb      	strb	r3, [r7, #27]
 800c940:	e00d      	b.n	800c95e <UART_SetConfig+0x29a>
 800c942:	2302      	movs	r3, #2
 800c944:	76fb      	strb	r3, [r7, #27]
 800c946:	e00a      	b.n	800c95e <UART_SetConfig+0x29a>
 800c948:	2304      	movs	r3, #4
 800c94a:	76fb      	strb	r3, [r7, #27]
 800c94c:	e007      	b.n	800c95e <UART_SetConfig+0x29a>
 800c94e:	2308      	movs	r3, #8
 800c950:	76fb      	strb	r3, [r7, #27]
 800c952:	e004      	b.n	800c95e <UART_SetConfig+0x29a>
 800c954:	2310      	movs	r3, #16
 800c956:	76fb      	strb	r3, [r7, #27]
 800c958:	e001      	b.n	800c95e <UART_SetConfig+0x29a>
 800c95a:	2310      	movs	r3, #16
 800c95c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a15      	ldr	r2, [pc, #84]	; (800c9b8 <UART_SetConfig+0x2f4>)
 800c964:	4293      	cmp	r3, r2
 800c966:	f040 809f 	bne.w	800caa8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c96a:	7efb      	ldrb	r3, [r7, #27]
 800c96c:	2b08      	cmp	r3, #8
 800c96e:	d837      	bhi.n	800c9e0 <UART_SetConfig+0x31c>
 800c970:	a201      	add	r2, pc, #4	; (adr r2, 800c978 <UART_SetConfig+0x2b4>)
 800c972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c976:	bf00      	nop
 800c978:	0800c99d 	.word	0x0800c99d
 800c97c:	0800c9e1 	.word	0x0800c9e1
 800c980:	0800c9a5 	.word	0x0800c9a5
 800c984:	0800c9e1 	.word	0x0800c9e1
 800c988:	0800c9ab 	.word	0x0800c9ab
 800c98c:	0800c9e1 	.word	0x0800c9e1
 800c990:	0800c9e1 	.word	0x0800c9e1
 800c994:	0800c9e1 	.word	0x0800c9e1
 800c998:	0800c9d9 	.word	0x0800c9d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c99c:	f7fc ff26 	bl	80097ec <HAL_RCC_GetPCLK1Freq>
 800c9a0:	6178      	str	r0, [r7, #20]
        break;
 800c9a2:	e022      	b.n	800c9ea <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9a4:	4b0b      	ldr	r3, [pc, #44]	; (800c9d4 <UART_SetConfig+0x310>)
 800c9a6:	617b      	str	r3, [r7, #20]
        break;
 800c9a8:	e01f      	b.n	800c9ea <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9aa:	f7fc feb1 	bl	8009710 <HAL_RCC_GetSysClockFreq>
 800c9ae:	6178      	str	r0, [r7, #20]
        break;
 800c9b0:	e01b      	b.n	800c9ea <UART_SetConfig+0x326>
 800c9b2:	bf00      	nop
 800c9b4:	cfff69f3 	.word	0xcfff69f3
 800c9b8:	40008000 	.word	0x40008000
 800c9bc:	40013800 	.word	0x40013800
 800c9c0:	40021000 	.word	0x40021000
 800c9c4:	40004400 	.word	0x40004400
 800c9c8:	40004800 	.word	0x40004800
 800c9cc:	40004c00 	.word	0x40004c00
 800c9d0:	40005000 	.word	0x40005000
 800c9d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9dc:	617b      	str	r3, [r7, #20]
        break;
 800c9de:	e004      	b.n	800c9ea <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	76bb      	strb	r3, [r7, #26]
        break;
 800c9e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 811b 	beq.w	800cc28 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f6:	4a96      	ldr	r2, [pc, #600]	; (800cc50 <UART_SetConfig+0x58c>)
 800c9f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca04:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685a      	ldr	r2, [r3, #4]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	4413      	add	r3, r2
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d305      	bcc.n	800ca22 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d902      	bls.n	800ca28 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	76bb      	strb	r3, [r7, #26]
 800ca26:	e0ff      	b.n	800cc28 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f04f 0100 	mov.w	r1, #0
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca34:	4a86      	ldr	r2, [pc, #536]	; (800cc50 <UART_SetConfig+0x58c>)
 800ca36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	f04f 0300 	mov.w	r3, #0
 800ca40:	f7f4 f94a 	bl	8000cd8 <__aeabi_uldivmod>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4610      	mov	r0, r2
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	f04f 0200 	mov.w	r2, #0
 800ca50:	f04f 0300 	mov.w	r3, #0
 800ca54:	020b      	lsls	r3, r1, #8
 800ca56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca5a:	0202      	lsls	r2, r0, #8
 800ca5c:	6879      	ldr	r1, [r7, #4]
 800ca5e:	6849      	ldr	r1, [r1, #4]
 800ca60:	0849      	lsrs	r1, r1, #1
 800ca62:	4608      	mov	r0, r1
 800ca64:	f04f 0100 	mov.w	r1, #0
 800ca68:	1814      	adds	r4, r2, r0
 800ca6a:	eb43 0501 	adc.w	r5, r3, r1
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	461a      	mov	r2, r3
 800ca74:	f04f 0300 	mov.w	r3, #0
 800ca78:	4620      	mov	r0, r4
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f7f4 f92c 	bl	8000cd8 <__aeabi_uldivmod>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4613      	mov	r3, r2
 800ca86:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca8e:	d308      	bcc.n	800caa2 <UART_SetConfig+0x3de>
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca96:	d204      	bcs.n	800caa2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	60da      	str	r2, [r3, #12]
 800caa0:	e0c2      	b.n	800cc28 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	76bb      	strb	r3, [r7, #26]
 800caa6:	e0bf      	b.n	800cc28 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab0:	d165      	bne.n	800cb7e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800cab2:	7efb      	ldrb	r3, [r7, #27]
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	d828      	bhi.n	800cb0a <UART_SetConfig+0x446>
 800cab8:	a201      	add	r2, pc, #4	; (adr r2, 800cac0 <UART_SetConfig+0x3fc>)
 800caba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabe:	bf00      	nop
 800cac0:	0800cae5 	.word	0x0800cae5
 800cac4:	0800caed 	.word	0x0800caed
 800cac8:	0800caf5 	.word	0x0800caf5
 800cacc:	0800cb0b 	.word	0x0800cb0b
 800cad0:	0800cafb 	.word	0x0800cafb
 800cad4:	0800cb0b 	.word	0x0800cb0b
 800cad8:	0800cb0b 	.word	0x0800cb0b
 800cadc:	0800cb0b 	.word	0x0800cb0b
 800cae0:	0800cb03 	.word	0x0800cb03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cae4:	f7fc fe82 	bl	80097ec <HAL_RCC_GetPCLK1Freq>
 800cae8:	6178      	str	r0, [r7, #20]
        break;
 800caea:	e013      	b.n	800cb14 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800caec:	f7fc fe94 	bl	8009818 <HAL_RCC_GetPCLK2Freq>
 800caf0:	6178      	str	r0, [r7, #20]
        break;
 800caf2:	e00f      	b.n	800cb14 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800caf4:	4b57      	ldr	r3, [pc, #348]	; (800cc54 <UART_SetConfig+0x590>)
 800caf6:	617b      	str	r3, [r7, #20]
        break;
 800caf8:	e00c      	b.n	800cb14 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cafa:	f7fc fe09 	bl	8009710 <HAL_RCC_GetSysClockFreq>
 800cafe:	6178      	str	r0, [r7, #20]
        break;
 800cb00:	e008      	b.n	800cb14 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb06:	617b      	str	r3, [r7, #20]
        break;
 800cb08:	e004      	b.n	800cb14 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	76bb      	strb	r3, [r7, #26]
        break;
 800cb12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 8086 	beq.w	800cc28 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	4a4b      	ldr	r2, [pc, #300]	; (800cc50 <UART_SetConfig+0x58c>)
 800cb22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb26:	461a      	mov	r2, r3
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb2e:	005a      	lsls	r2, r3, #1
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	085b      	lsrs	r3, r3, #1
 800cb36:	441a      	add	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	2b0f      	cmp	r3, #15
 800cb48:	d916      	bls.n	800cb78 <UART_SetConfig+0x4b4>
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb50:	d212      	bcs.n	800cb78 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	f023 030f 	bic.w	r3, r3, #15
 800cb5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	085b      	lsrs	r3, r3, #1
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	f003 0307 	and.w	r3, r3, #7
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	89fb      	ldrh	r3, [r7, #14]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	89fa      	ldrh	r2, [r7, #14]
 800cb74:	60da      	str	r2, [r3, #12]
 800cb76:	e057      	b.n	800cc28 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	76bb      	strb	r3, [r7, #26]
 800cb7c:	e054      	b.n	800cc28 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb7e:	7efb      	ldrb	r3, [r7, #27]
 800cb80:	2b08      	cmp	r3, #8
 800cb82:	d828      	bhi.n	800cbd6 <UART_SetConfig+0x512>
 800cb84:	a201      	add	r2, pc, #4	; (adr r2, 800cb8c <UART_SetConfig+0x4c8>)
 800cb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb8a:	bf00      	nop
 800cb8c:	0800cbb1 	.word	0x0800cbb1
 800cb90:	0800cbb9 	.word	0x0800cbb9
 800cb94:	0800cbc1 	.word	0x0800cbc1
 800cb98:	0800cbd7 	.word	0x0800cbd7
 800cb9c:	0800cbc7 	.word	0x0800cbc7
 800cba0:	0800cbd7 	.word	0x0800cbd7
 800cba4:	0800cbd7 	.word	0x0800cbd7
 800cba8:	0800cbd7 	.word	0x0800cbd7
 800cbac:	0800cbcf 	.word	0x0800cbcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbb0:	f7fc fe1c 	bl	80097ec <HAL_RCC_GetPCLK1Freq>
 800cbb4:	6178      	str	r0, [r7, #20]
        break;
 800cbb6:	e013      	b.n	800cbe0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbb8:	f7fc fe2e 	bl	8009818 <HAL_RCC_GetPCLK2Freq>
 800cbbc:	6178      	str	r0, [r7, #20]
        break;
 800cbbe:	e00f      	b.n	800cbe0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbc0:	4b24      	ldr	r3, [pc, #144]	; (800cc54 <UART_SetConfig+0x590>)
 800cbc2:	617b      	str	r3, [r7, #20]
        break;
 800cbc4:	e00c      	b.n	800cbe0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbc6:	f7fc fda3 	bl	8009710 <HAL_RCC_GetSysClockFreq>
 800cbca:	6178      	str	r0, [r7, #20]
        break;
 800cbcc:	e008      	b.n	800cbe0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbd2:	617b      	str	r3, [r7, #20]
        break;
 800cbd4:	e004      	b.n	800cbe0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	76bb      	strb	r3, [r7, #26]
        break;
 800cbde:	bf00      	nop
    }

    if (pclk != 0U)
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d020      	beq.n	800cc28 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	4a19      	ldr	r2, [pc, #100]	; (800cc50 <UART_SetConfig+0x58c>)
 800cbec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	085b      	lsrs	r3, r3, #1
 800cbfe:	441a      	add	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	2b0f      	cmp	r3, #15
 800cc10:	d908      	bls.n	800cc24 <UART_SetConfig+0x560>
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc18:	d204      	bcs.n	800cc24 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	693a      	ldr	r2, [r7, #16]
 800cc20:	60da      	str	r2, [r3, #12]
 800cc22:	e001      	b.n	800cc28 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2201      	movs	r2, #1
 800cc34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cc44:	7ebb      	ldrb	r3, [r7, #26]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3720      	adds	r7, #32
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	08013358 	.word	0x08013358
 800cc54:	00f42400 	.word	0x00f42400

0800cc58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00a      	beq.n	800cc82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	430a      	orrs	r2, r1
 800cc80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00a      	beq.n	800cca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	430a      	orrs	r2, r1
 800cca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00a      	beq.n	800ccc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	430a      	orrs	r2, r1
 800ccc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccca:	f003 0308 	and.w	r3, r3, #8
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	430a      	orrs	r2, r1
 800cce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccec:	f003 0310 	and.w	r3, r3, #16
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	430a      	orrs	r2, r1
 800cd08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0e:	f003 0320 	and.w	r3, r3, #32
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00a      	beq.n	800cd2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01a      	beq.n	800cd6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	430a      	orrs	r2, r1
 800cd4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd56:	d10a      	bne.n	800cd6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	430a      	orrs	r2, r1
 800cd8e:	605a      	str	r2, [r3, #4]
  }
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af02      	add	r7, sp, #8
 800cda2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdac:	f7f8 ff8c 	bl	8005cc8 <HAL_GetTick>
 800cdb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 0308 	and.w	r3, r3, #8
 800cdbc:	2b08      	cmp	r3, #8
 800cdbe:	d10e      	bne.n	800cdde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f82f 	bl	800ce32 <UART_WaitOnFlagUntilTimeout>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d001      	beq.n	800cdde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e025      	b.n	800ce2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 0304 	and.w	r3, r3, #4
 800cde8:	2b04      	cmp	r3, #4
 800cdea:	d10e      	bne.n	800ce0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f819 	bl	800ce32 <UART_WaitOnFlagUntilTimeout>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d001      	beq.n	800ce0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e00f      	b.n	800ce2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2220      	movs	r2, #32
 800ce16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	60b9      	str	r1, [r7, #8]
 800ce3c:	603b      	str	r3, [r7, #0]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce42:	e062      	b.n	800cf0a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4a:	d05e      	beq.n	800cf0a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce4c:	f7f8 ff3c 	bl	8005cc8 <HAL_GetTick>
 800ce50:	4602      	mov	r2, r0
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d302      	bcc.n	800ce62 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d11d      	bne.n	800ce9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ce70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	689a      	ldr	r2, [r3, #8]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f022 0201 	bic.w	r2, r2, #1
 800ce80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2220      	movs	r2, #32
 800ce86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e045      	b.n	800cf2a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d02e      	beq.n	800cf0a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	69db      	ldr	r3, [r3, #28]
 800ceb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ceba:	d126      	bne.n	800cf0a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ced4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	689a      	ldr	r2, [r3, #8]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f022 0201 	bic.w	r2, r2, #1
 800cee4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2220      	movs	r2, #32
 800ceea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2220      	movs	r2, #32
 800cef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2220      	movs	r2, #32
 800cefa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e00f      	b.n	800cf2a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	69da      	ldr	r2, [r3, #28]
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	4013      	ands	r3, r2
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	bf0c      	ite	eq
 800cf1a:	2301      	moveq	r3, #1
 800cf1c:	2300      	movne	r3, #0
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	461a      	mov	r2, r3
 800cf22:	79fb      	ldrb	r3, [r7, #7]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d08d      	beq.n	800ce44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
	...

0800cf34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	88fa      	ldrh	r2, [r7, #6]
 800cf4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	88fa      	ldrh	r2, [r7, #6]
 800cf54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf66:	d10e      	bne.n	800cf86 <UART_Start_Receive_IT+0x52>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d105      	bne.n	800cf7c <UART_Start_Receive_IT+0x48>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cf76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf7a:	e02d      	b.n	800cfd8 <UART_Start_Receive_IT+0xa4>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	22ff      	movs	r2, #255	; 0xff
 800cf80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf84:	e028      	b.n	800cfd8 <UART_Start_Receive_IT+0xa4>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10d      	bne.n	800cfaa <UART_Start_Receive_IT+0x76>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d104      	bne.n	800cfa0 <UART_Start_Receive_IT+0x6c>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	22ff      	movs	r2, #255	; 0xff
 800cf9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf9e:	e01b      	b.n	800cfd8 <UART_Start_Receive_IT+0xa4>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	227f      	movs	r2, #127	; 0x7f
 800cfa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfa8:	e016      	b.n	800cfd8 <UART_Start_Receive_IT+0xa4>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfb2:	d10d      	bne.n	800cfd0 <UART_Start_Receive_IT+0x9c>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d104      	bne.n	800cfc6 <UART_Start_Receive_IT+0x92>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	227f      	movs	r2, #127	; 0x7f
 800cfc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfc4:	e008      	b.n	800cfd8 <UART_Start_Receive_IT+0xa4>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	223f      	movs	r2, #63	; 0x3f
 800cfca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfce:	e003      	b.n	800cfd8 <UART_Start_Receive_IT+0xa4>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2222      	movs	r2, #34	; 0x22
 800cfe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	689a      	ldr	r2, [r3, #8]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f042 0201 	orr.w	r2, r2, #1
 800cff6:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d000:	d12a      	bne.n	800d058 <UART_Start_Receive_IT+0x124>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d008:	88fa      	ldrh	r2, [r7, #6]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d324      	bcc.n	800d058 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d016:	d107      	bne.n	800d028 <UART_Start_Receive_IT+0xf4>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d103      	bne.n	800d028 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4a1f      	ldr	r2, [pc, #124]	; (800d0a0 <UART_Start_Receive_IT+0x16c>)
 800d024:	671a      	str	r2, [r3, #112]	; 0x70
 800d026:	e002      	b.n	800d02e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	4a1e      	ldr	r2, [pc, #120]	; (800d0a4 <UART_Start_Receive_IT+0x170>)
 800d02c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d044:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	689a      	ldr	r2, [r3, #8]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d054:	609a      	str	r2, [r3, #8]
 800d056:	e01b      	b.n	800d090 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d060:	d107      	bne.n	800d072 <UART_Start_Receive_IT+0x13e>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d103      	bne.n	800d072 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4a0e      	ldr	r2, [pc, #56]	; (800d0a8 <UART_Start_Receive_IT+0x174>)
 800d06e:	671a      	str	r2, [r3, #112]	; 0x70
 800d070:	e002      	b.n	800d078 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4a0d      	ldr	r2, [pc, #52]	; (800d0ac <UART_Start_Receive_IT+0x178>)
 800d076:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d08e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	0800d529 	.word	0x0800d529
 800d0a4:	0800d325 	.word	0x0800d325
 800d0a8:	0800d24d 	.word	0x0800d24d
 800d0ac:	0800d175 	.word	0x0800d175

0800d0b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d0c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	6812      	ldr	r2, [r2, #0]
 800d0d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0d6:	f023 0301 	bic.w	r3, r3, #1
 800d0da:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d107      	bne.n	800d0f4 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f022 0210 	bic.w	r2, r2, #16
 800d0f2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2220      	movs	r2, #32
 800d0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f7ff fab0 	bl	800c698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d138:	bf00      	nop
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d156:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2220      	movs	r2, #32
 800d15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7ff fa8c 	bl	800c684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d182:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d18a:	2b22      	cmp	r3, #34	; 0x22
 800d18c:	d152      	bne.n	800d234 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d194:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d196:	89bb      	ldrh	r3, [r7, #12]
 800d198:	b2d9      	uxtb	r1, r3
 800d19a:	89fb      	ldrh	r3, [r7, #14]
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a2:	400a      	ands	r2, r1
 800d1a4:	b2d2      	uxtb	r2, r2
 800d1a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d139      	bne.n	800d244 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d1de:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	689a      	ldr	r2, [r3, #8]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f022 0201 	bic.w	r2, r2, #1
 800d1ee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2220      	movs	r2, #32
 800d1f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d202:	2b01      	cmp	r3, #1
 800d204:	d10f      	bne.n	800d226 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f022 0210 	bic.w	r2, r2, #16
 800d214:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff fa44 	bl	800c6ac <HAL_UARTEx_RxEventCallback>
 800d224:	e002      	b.n	800d22c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7f8 fcae 	bl	8005b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d232:	e007      	b.n	800d244 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	699a      	ldr	r2, [r3, #24]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f042 0208 	orr.w	r2, r2, #8
 800d242:	619a      	str	r2, [r3, #24]
}
 800d244:	bf00      	nop
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d25a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d262:	2b22      	cmp	r3, #34	; 0x22
 800d264:	d152      	bne.n	800d30c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d272:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d274:	89ba      	ldrh	r2, [r7, #12]
 800d276:	89fb      	ldrh	r3, [r7, #14]
 800d278:	4013      	ands	r3, r2
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d284:	1c9a      	adds	r2, r3, #2
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d290:	b29b      	uxth	r3, r3
 800d292:	3b01      	subs	r3, #1
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d139      	bne.n	800d31c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d2b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	689a      	ldr	r2, [r3, #8]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f022 0201 	bic.w	r2, r2, #1
 800d2c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2220      	movs	r2, #32
 800d2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d10f      	bne.n	800d2fe <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f022 0210 	bic.w	r2, r2, #16
 800d2ec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7ff f9d8 	bl	800c6ac <HAL_UARTEx_RxEventCallback>
 800d2fc:	e002      	b.n	800d304 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7f8 fc42 	bl	8005b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d30a:	e007      	b.n	800d31c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	699a      	ldr	r2, [r3, #24]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0208 	orr.w	r2, r2, #8
 800d31a:	619a      	str	r2, [r3, #24]
}
 800d31c:	bf00      	nop
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d332:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	69db      	ldr	r3, [r3, #28]
 800d33a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d352:	2b22      	cmp	r3, #34	; 0x22
 800d354:	f040 80da 	bne.w	800d50c <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d35e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d360:	e0aa      	b.n	800d4b8 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d368:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d36a:	89bb      	ldrh	r3, [r7, #12]
 800d36c:	b2d9      	uxtb	r1, r3
 800d36e:	8b7b      	ldrh	r3, [r7, #26]
 800d370:	b2da      	uxtb	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d376:	400a      	ands	r2, r1
 800d378:	b2d2      	uxtb	r2, r2
 800d37a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d380:	1c5a      	adds	r2, r3, #1
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	3b01      	subs	r3, #1
 800d390:	b29a      	uxth	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	69db      	ldr	r3, [r3, #28]
 800d39e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	f003 0307 	and.w	r3, r3, #7
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d04d      	beq.n	800d446 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d010      	beq.n	800d3d6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00b      	beq.n	800d3d6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3cc:	f043 0201 	orr.w	r2, r3, #1
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	f003 0302 	and.w	r3, r3, #2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d010      	beq.n	800d402 <UART_RxISR_8BIT_FIFOEN+0xde>
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00b      	beq.n	800d402 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f8:	f043 0204 	orr.w	r2, r3, #4
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	f003 0304 	and.w	r3, r3, #4
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d010      	beq.n	800d42e <UART_RxISR_8BIT_FIFOEN+0x10a>
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00b      	beq.n	800d42e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2204      	movs	r2, #4
 800d41c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d424:	f043 0202 	orr.w	r2, r3, #2
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d006      	beq.n	800d446 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7ff f92d 	bl	800c698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d132      	bne.n	800d4b8 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d460:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	6812      	ldr	r2, [r2, #0]
 800d46c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d470:	f023 0301 	bic.w	r3, r3, #1
 800d474:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2220      	movs	r2, #32
 800d47a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d10f      	bne.n	800d4ac <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f022 0210 	bic.w	r2, r2, #16
 800d49a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff f901 	bl	800c6ac <HAL_UARTEx_RxEventCallback>
 800d4aa:	e002      	b.n	800d4b2 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7f8 fb6b 	bl	8005b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4b8:	89fb      	ldrh	r3, [r7, #14]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d005      	beq.n	800d4ca <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	f003 0320 	and.w	r3, r3, #32
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f47f af4c 	bne.w	800d362 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4d0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d4d2:	897b      	ldrh	r3, [r7, #10]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d021      	beq.n	800d51c <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4de:	897a      	ldrh	r2, [r7, #10]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d21b      	bcs.n	800d51c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	689a      	ldr	r2, [r3, #8]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d4f2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a0b      	ldr	r2, [pc, #44]	; (800d524 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800d4f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f042 0220 	orr.w	r2, r2, #32
 800d508:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d50a:	e007      	b.n	800d51c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	699a      	ldr	r2, [r3, #24]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f042 0208 	orr.w	r2, r2, #8
 800d51a:	619a      	str	r2, [r3, #24]
}
 800d51c:	bf00      	nop
 800d51e:	3720      	adds	r7, #32
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	0800d175 	.word	0x0800d175

0800d528 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08a      	sub	sp, #40	; 0x28
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d536:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	689b      	ldr	r3, [r3, #8]
 800d54e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d556:	2b22      	cmp	r3, #34	; 0x22
 800d558:	f040 80da 	bne.w	800d710 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d562:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d564:	e0aa      	b.n	800d6bc <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d572:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800d574:	8aba      	ldrh	r2, [r7, #20]
 800d576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d578:	4013      	ands	r3, r2
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d584:	1c9a      	adds	r2, r3, #2
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d590:	b29b      	uxth	r3, r3
 800d592:	3b01      	subs	r3, #1
 800d594:	b29a      	uxth	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	69db      	ldr	r3, [r3, #28]
 800d5a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	f003 0307 	and.w	r3, r3, #7
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d04d      	beq.n	800d64a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d010      	beq.n	800d5da <UART_RxISR_16BIT_FIFOEN+0xb2>
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00b      	beq.n	800d5da <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5d0:	f043 0201 	orr.w	r2, r3, #1
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d010      	beq.n	800d606 <UART_RxISR_16BIT_FIFOEN+0xde>
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	f003 0301 	and.w	r3, r3, #1
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00b      	beq.n	800d606 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5fc:	f043 0204 	orr.w	r2, r3, #4
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	f003 0304 	and.w	r3, r3, #4
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d010      	beq.n	800d632 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00b      	beq.n	800d632 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2204      	movs	r2, #4
 800d620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d628:	f043 0202 	orr.w	r2, r3, #2
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d006      	beq.n	800d64a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff f82b 	bl	800c698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d650:	b29b      	uxth	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d132      	bne.n	800d6bc <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d664:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	6812      	ldr	r2, [r2, #0]
 800d670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d674:	f023 0301 	bic.w	r3, r3, #1
 800d678:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2220      	movs	r2, #32
 800d67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d10f      	bne.n	800d6b0 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f022 0210 	bic.w	r2, r2, #16
 800d69e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7fe ffff 	bl	800c6ac <HAL_UARTEx_RxEventCallback>
 800d6ae:	e002      	b.n	800d6b6 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7f8 fa69 	bl	8005b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6bc:	8afb      	ldrh	r3, [r7, #22]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d005      	beq.n	800d6ce <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	f003 0320 	and.w	r3, r3, #32
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f47f af4c 	bne.w	800d566 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6d4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d6d6:	89fb      	ldrh	r3, [r7, #14]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d021      	beq.n	800d720 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6e2:	89fa      	ldrh	r2, [r7, #14]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d21b      	bcs.n	800d720 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	689a      	ldr	r2, [r3, #8]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d6f6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a0b      	ldr	r2, [pc, #44]	; (800d728 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800d6fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f042 0220 	orr.w	r2, r2, #32
 800d70c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d70e:	e007      	b.n	800d720 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	699a      	ldr	r2, [r3, #24]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f042 0208 	orr.w	r2, r2, #8
 800d71e:	619a      	str	r2, [r3, #24]
}
 800d720:	bf00      	nop
 800d722:	3728      	adds	r7, #40	; 0x28
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	0800d24d 	.word	0x0800d24d

0800d72c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d776:	2b01      	cmp	r3, #1
 800d778:	d101      	bne.n	800d77e <HAL_UARTEx_DisableFifoMode+0x16>
 800d77a:	2302      	movs	r3, #2
 800d77c:	e027      	b.n	800d7ce <HAL_UARTEx_DisableFifoMode+0x66>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2224      	movs	r2, #36	; 0x24
 800d78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f022 0201 	bic.w	r2, r2, #1
 800d7a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2220      	movs	r2, #32
 800d7c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3714      	adds	r7, #20
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d101      	bne.n	800d7f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	e02d      	b.n	800d84e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2224      	movs	r2, #36	; 0x24
 800d7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f022 0201 	bic.w	r2, r2, #1
 800d818:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	683a      	ldr	r2, [r7, #0]
 800d82a:	430a      	orrs	r2, r1
 800d82c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f850 	bl	800d8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2220      	movs	r2, #32
 800d840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
 800d85e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d866:	2b01      	cmp	r3, #1
 800d868:	d101      	bne.n	800d86e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d86a:	2302      	movs	r3, #2
 800d86c:	e02d      	b.n	800d8ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2224      	movs	r2, #36	; 0x24
 800d87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f022 0201 	bic.w	r2, r2, #1
 800d894:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	430a      	orrs	r2, r1
 800d8a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 f812 	bl	800d8d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2220      	movs	r2, #32
 800d8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d108      	bne.n	800d8f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8f4:	e031      	b.n	800d95a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8f6:	2308      	movs	r3, #8
 800d8f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8fa:	2308      	movs	r3, #8
 800d8fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	0e5b      	lsrs	r3, r3, #25
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f003 0307 	and.w	r3, r3, #7
 800d90c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	0f5b      	lsrs	r3, r3, #29
 800d916:	b2db      	uxtb	r3, r3
 800d918:	f003 0307 	and.w	r3, r3, #7
 800d91c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
 800d920:	7b3a      	ldrb	r2, [r7, #12]
 800d922:	4911      	ldr	r1, [pc, #68]	; (800d968 <UARTEx_SetNbDataToProcess+0x94>)
 800d924:	5c8a      	ldrb	r2, [r1, r2]
 800d926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d92a:	7b3a      	ldrb	r2, [r7, #12]
 800d92c:	490f      	ldr	r1, [pc, #60]	; (800d96c <UARTEx_SetNbDataToProcess+0x98>)
 800d92e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d930:	fb93 f3f2 	sdiv	r3, r3, r2
 800d934:	b29a      	uxth	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	7b7a      	ldrb	r2, [r7, #13]
 800d940:	4909      	ldr	r1, [pc, #36]	; (800d968 <UARTEx_SetNbDataToProcess+0x94>)
 800d942:	5c8a      	ldrb	r2, [r1, r2]
 800d944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d948:	7b7a      	ldrb	r2, [r7, #13]
 800d94a:	4908      	ldr	r1, [pc, #32]	; (800d96c <UARTEx_SetNbDataToProcess+0x98>)
 800d94c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d94e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d952:	b29a      	uxth	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d95a:	bf00      	nop
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	08013370 	.word	0x08013370
 800d96c:	08013378 	.word	0x08013378

0800d970 <atof>:
 800d970:	2100      	movs	r1, #0
 800d972:	f001 bb63 	b.w	800f03c <strtod>

0800d976 <atoi>:
 800d976:	220a      	movs	r2, #10
 800d978:	2100      	movs	r1, #0
 800d97a:	f001 bbef 	b.w	800f15c <strtol>
	...

0800d980 <__errno>:
 800d980:	4b01      	ldr	r3, [pc, #4]	; (800d988 <__errno+0x8>)
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	2000002c 	.word	0x2000002c

0800d98c <__libc_init_array>:
 800d98c:	b570      	push	{r4, r5, r6, lr}
 800d98e:	4d0d      	ldr	r5, [pc, #52]	; (800d9c4 <__libc_init_array+0x38>)
 800d990:	4c0d      	ldr	r4, [pc, #52]	; (800d9c8 <__libc_init_array+0x3c>)
 800d992:	1b64      	subs	r4, r4, r5
 800d994:	10a4      	asrs	r4, r4, #2
 800d996:	2600      	movs	r6, #0
 800d998:	42a6      	cmp	r6, r4
 800d99a:	d109      	bne.n	800d9b0 <__libc_init_array+0x24>
 800d99c:	4d0b      	ldr	r5, [pc, #44]	; (800d9cc <__libc_init_array+0x40>)
 800d99e:	4c0c      	ldr	r4, [pc, #48]	; (800d9d0 <__libc_init_array+0x44>)
 800d9a0:	f004 fc48 	bl	8012234 <_init>
 800d9a4:	1b64      	subs	r4, r4, r5
 800d9a6:	10a4      	asrs	r4, r4, #2
 800d9a8:	2600      	movs	r6, #0
 800d9aa:	42a6      	cmp	r6, r4
 800d9ac:	d105      	bne.n	800d9ba <__libc_init_array+0x2e>
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}
 800d9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9b4:	4798      	blx	r3
 800d9b6:	3601      	adds	r6, #1
 800d9b8:	e7ee      	b.n	800d998 <__libc_init_array+0xc>
 800d9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9be:	4798      	blx	r3
 800d9c0:	3601      	adds	r6, #1
 800d9c2:	e7f2      	b.n	800d9aa <__libc_init_array+0x1e>
 800d9c4:	08013870 	.word	0x08013870
 800d9c8:	08013870 	.word	0x08013870
 800d9cc:	08013870 	.word	0x08013870
 800d9d0:	08013874 	.word	0x08013874

0800d9d4 <memcpy>:
 800d9d4:	440a      	add	r2, r1
 800d9d6:	4291      	cmp	r1, r2
 800d9d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9dc:	d100      	bne.n	800d9e0 <memcpy+0xc>
 800d9de:	4770      	bx	lr
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ea:	4291      	cmp	r1, r2
 800d9ec:	d1f9      	bne.n	800d9e2 <memcpy+0xe>
 800d9ee:	bd10      	pop	{r4, pc}

0800d9f0 <memset>:
 800d9f0:	4402      	add	r2, r0
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d100      	bne.n	800d9fa <memset+0xa>
 800d9f8:	4770      	bx	lr
 800d9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d9fe:	e7f9      	b.n	800d9f4 <memset+0x4>

0800da00 <__cvt>:
 800da00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da04:	ec55 4b10 	vmov	r4, r5, d0
 800da08:	2d00      	cmp	r5, #0
 800da0a:	460e      	mov	r6, r1
 800da0c:	4619      	mov	r1, r3
 800da0e:	462b      	mov	r3, r5
 800da10:	bfbb      	ittet	lt
 800da12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da16:	461d      	movlt	r5, r3
 800da18:	2300      	movge	r3, #0
 800da1a:	232d      	movlt	r3, #45	; 0x2d
 800da1c:	700b      	strb	r3, [r1, #0]
 800da1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da24:	4691      	mov	r9, r2
 800da26:	f023 0820 	bic.w	r8, r3, #32
 800da2a:	bfbc      	itt	lt
 800da2c:	4622      	movlt	r2, r4
 800da2e:	4614      	movlt	r4, r2
 800da30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da34:	d005      	beq.n	800da42 <__cvt+0x42>
 800da36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da3a:	d100      	bne.n	800da3e <__cvt+0x3e>
 800da3c:	3601      	adds	r6, #1
 800da3e:	2102      	movs	r1, #2
 800da40:	e000      	b.n	800da44 <__cvt+0x44>
 800da42:	2103      	movs	r1, #3
 800da44:	ab03      	add	r3, sp, #12
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	ab02      	add	r3, sp, #8
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	ec45 4b10 	vmov	d0, r4, r5
 800da50:	4653      	mov	r3, sl
 800da52:	4632      	mov	r2, r6
 800da54:	f001 fcd8 	bl	800f408 <_dtoa_r>
 800da58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da5c:	4607      	mov	r7, r0
 800da5e:	d102      	bne.n	800da66 <__cvt+0x66>
 800da60:	f019 0f01 	tst.w	r9, #1
 800da64:	d022      	beq.n	800daac <__cvt+0xac>
 800da66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da6a:	eb07 0906 	add.w	r9, r7, r6
 800da6e:	d110      	bne.n	800da92 <__cvt+0x92>
 800da70:	783b      	ldrb	r3, [r7, #0]
 800da72:	2b30      	cmp	r3, #48	; 0x30
 800da74:	d10a      	bne.n	800da8c <__cvt+0x8c>
 800da76:	2200      	movs	r2, #0
 800da78:	2300      	movs	r3, #0
 800da7a:	4620      	mov	r0, r4
 800da7c:	4629      	mov	r1, r5
 800da7e:	f7f3 f84b 	bl	8000b18 <__aeabi_dcmpeq>
 800da82:	b918      	cbnz	r0, 800da8c <__cvt+0x8c>
 800da84:	f1c6 0601 	rsb	r6, r6, #1
 800da88:	f8ca 6000 	str.w	r6, [sl]
 800da8c:	f8da 3000 	ldr.w	r3, [sl]
 800da90:	4499      	add	r9, r3
 800da92:	2200      	movs	r2, #0
 800da94:	2300      	movs	r3, #0
 800da96:	4620      	mov	r0, r4
 800da98:	4629      	mov	r1, r5
 800da9a:	f7f3 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 800da9e:	b108      	cbz	r0, 800daa4 <__cvt+0xa4>
 800daa0:	f8cd 900c 	str.w	r9, [sp, #12]
 800daa4:	2230      	movs	r2, #48	; 0x30
 800daa6:	9b03      	ldr	r3, [sp, #12]
 800daa8:	454b      	cmp	r3, r9
 800daaa:	d307      	bcc.n	800dabc <__cvt+0xbc>
 800daac:	9b03      	ldr	r3, [sp, #12]
 800daae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dab0:	1bdb      	subs	r3, r3, r7
 800dab2:	4638      	mov	r0, r7
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	b004      	add	sp, #16
 800dab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dabc:	1c59      	adds	r1, r3, #1
 800dabe:	9103      	str	r1, [sp, #12]
 800dac0:	701a      	strb	r2, [r3, #0]
 800dac2:	e7f0      	b.n	800daa6 <__cvt+0xa6>

0800dac4 <__exponent>:
 800dac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dac6:	4603      	mov	r3, r0
 800dac8:	2900      	cmp	r1, #0
 800daca:	bfb8      	it	lt
 800dacc:	4249      	neglt	r1, r1
 800dace:	f803 2b02 	strb.w	r2, [r3], #2
 800dad2:	bfb4      	ite	lt
 800dad4:	222d      	movlt	r2, #45	; 0x2d
 800dad6:	222b      	movge	r2, #43	; 0x2b
 800dad8:	2909      	cmp	r1, #9
 800dada:	7042      	strb	r2, [r0, #1]
 800dadc:	dd2a      	ble.n	800db34 <__exponent+0x70>
 800dade:	f10d 0407 	add.w	r4, sp, #7
 800dae2:	46a4      	mov	ip, r4
 800dae4:	270a      	movs	r7, #10
 800dae6:	46a6      	mov	lr, r4
 800dae8:	460a      	mov	r2, r1
 800daea:	fb91 f6f7 	sdiv	r6, r1, r7
 800daee:	fb07 1516 	mls	r5, r7, r6, r1
 800daf2:	3530      	adds	r5, #48	; 0x30
 800daf4:	2a63      	cmp	r2, #99	; 0x63
 800daf6:	f104 34ff 	add.w	r4, r4, #4294967295
 800dafa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dafe:	4631      	mov	r1, r6
 800db00:	dcf1      	bgt.n	800dae6 <__exponent+0x22>
 800db02:	3130      	adds	r1, #48	; 0x30
 800db04:	f1ae 0502 	sub.w	r5, lr, #2
 800db08:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db0c:	1c44      	adds	r4, r0, #1
 800db0e:	4629      	mov	r1, r5
 800db10:	4561      	cmp	r1, ip
 800db12:	d30a      	bcc.n	800db2a <__exponent+0x66>
 800db14:	f10d 0209 	add.w	r2, sp, #9
 800db18:	eba2 020e 	sub.w	r2, r2, lr
 800db1c:	4565      	cmp	r5, ip
 800db1e:	bf88      	it	hi
 800db20:	2200      	movhi	r2, #0
 800db22:	4413      	add	r3, r2
 800db24:	1a18      	subs	r0, r3, r0
 800db26:	b003      	add	sp, #12
 800db28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800db32:	e7ed      	b.n	800db10 <__exponent+0x4c>
 800db34:	2330      	movs	r3, #48	; 0x30
 800db36:	3130      	adds	r1, #48	; 0x30
 800db38:	7083      	strb	r3, [r0, #2]
 800db3a:	70c1      	strb	r1, [r0, #3]
 800db3c:	1d03      	adds	r3, r0, #4
 800db3e:	e7f1      	b.n	800db24 <__exponent+0x60>

0800db40 <_printf_float>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	ed2d 8b02 	vpush	{d8}
 800db48:	b08d      	sub	sp, #52	; 0x34
 800db4a:	460c      	mov	r4, r1
 800db4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db50:	4616      	mov	r6, r2
 800db52:	461f      	mov	r7, r3
 800db54:	4605      	mov	r5, r0
 800db56:	f002 ff69 	bl	8010a2c <_localeconv_r>
 800db5a:	f8d0 a000 	ldr.w	sl, [r0]
 800db5e:	4650      	mov	r0, sl
 800db60:	f7f2 fb5e 	bl	8000220 <strlen>
 800db64:	2300      	movs	r3, #0
 800db66:	930a      	str	r3, [sp, #40]	; 0x28
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	9305      	str	r3, [sp, #20]
 800db6c:	f8d8 3000 	ldr.w	r3, [r8]
 800db70:	f894 b018 	ldrb.w	fp, [r4, #24]
 800db74:	3307      	adds	r3, #7
 800db76:	f023 0307 	bic.w	r3, r3, #7
 800db7a:	f103 0208 	add.w	r2, r3, #8
 800db7e:	f8c8 2000 	str.w	r2, [r8]
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800db8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800db8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db92:	9307      	str	r3, [sp, #28]
 800db94:	f8cd 8018 	str.w	r8, [sp, #24]
 800db98:	ee08 0a10 	vmov	s16, r0
 800db9c:	4b9f      	ldr	r3, [pc, #636]	; (800de1c <_printf_float+0x2dc>)
 800db9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dba2:	f04f 32ff 	mov.w	r2, #4294967295
 800dba6:	f7f2 ffe9 	bl	8000b7c <__aeabi_dcmpun>
 800dbaa:	bb88      	cbnz	r0, 800dc10 <_printf_float+0xd0>
 800dbac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbb0:	4b9a      	ldr	r3, [pc, #616]	; (800de1c <_printf_float+0x2dc>)
 800dbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb6:	f7f2 ffc3 	bl	8000b40 <__aeabi_dcmple>
 800dbba:	bb48      	cbnz	r0, 800dc10 <_printf_float+0xd0>
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	4649      	mov	r1, r9
 800dbc4:	f7f2 ffb2 	bl	8000b2c <__aeabi_dcmplt>
 800dbc8:	b110      	cbz	r0, 800dbd0 <_printf_float+0x90>
 800dbca:	232d      	movs	r3, #45	; 0x2d
 800dbcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbd0:	4b93      	ldr	r3, [pc, #588]	; (800de20 <_printf_float+0x2e0>)
 800dbd2:	4894      	ldr	r0, [pc, #592]	; (800de24 <_printf_float+0x2e4>)
 800dbd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dbd8:	bf94      	ite	ls
 800dbda:	4698      	movls	r8, r3
 800dbdc:	4680      	movhi	r8, r0
 800dbde:	2303      	movs	r3, #3
 800dbe0:	6123      	str	r3, [r4, #16]
 800dbe2:	9b05      	ldr	r3, [sp, #20]
 800dbe4:	f023 0204 	bic.w	r2, r3, #4
 800dbe8:	6022      	str	r2, [r4, #0]
 800dbea:	f04f 0900 	mov.w	r9, #0
 800dbee:	9700      	str	r7, [sp, #0]
 800dbf0:	4633      	mov	r3, r6
 800dbf2:	aa0b      	add	r2, sp, #44	; 0x2c
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f000 f9d8 	bl	800dfac <_printf_common>
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	f040 8090 	bne.w	800dd22 <_printf_float+0x1e2>
 800dc02:	f04f 30ff 	mov.w	r0, #4294967295
 800dc06:	b00d      	add	sp, #52	; 0x34
 800dc08:	ecbd 8b02 	vpop	{d8}
 800dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc10:	4642      	mov	r2, r8
 800dc12:	464b      	mov	r3, r9
 800dc14:	4640      	mov	r0, r8
 800dc16:	4649      	mov	r1, r9
 800dc18:	f7f2 ffb0 	bl	8000b7c <__aeabi_dcmpun>
 800dc1c:	b140      	cbz	r0, 800dc30 <_printf_float+0xf0>
 800dc1e:	464b      	mov	r3, r9
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	bfbc      	itt	lt
 800dc24:	232d      	movlt	r3, #45	; 0x2d
 800dc26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc2a:	487f      	ldr	r0, [pc, #508]	; (800de28 <_printf_float+0x2e8>)
 800dc2c:	4b7f      	ldr	r3, [pc, #508]	; (800de2c <_printf_float+0x2ec>)
 800dc2e:	e7d1      	b.n	800dbd4 <_printf_float+0x94>
 800dc30:	6863      	ldr	r3, [r4, #4]
 800dc32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc36:	9206      	str	r2, [sp, #24]
 800dc38:	1c5a      	adds	r2, r3, #1
 800dc3a:	d13f      	bne.n	800dcbc <_printf_float+0x17c>
 800dc3c:	2306      	movs	r3, #6
 800dc3e:	6063      	str	r3, [r4, #4]
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	6861      	ldr	r1, [r4, #4]
 800dc44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc48:	2300      	movs	r3, #0
 800dc4a:	9303      	str	r3, [sp, #12]
 800dc4c:	ab0a      	add	r3, sp, #40	; 0x28
 800dc4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc52:	ab09      	add	r3, sp, #36	; 0x24
 800dc54:	ec49 8b10 	vmov	d0, r8, r9
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	6022      	str	r2, [r4, #0]
 800dc5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc60:	4628      	mov	r0, r5
 800dc62:	f7ff fecd 	bl	800da00 <__cvt>
 800dc66:	9b06      	ldr	r3, [sp, #24]
 800dc68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc6a:	2b47      	cmp	r3, #71	; 0x47
 800dc6c:	4680      	mov	r8, r0
 800dc6e:	d108      	bne.n	800dc82 <_printf_float+0x142>
 800dc70:	1cc8      	adds	r0, r1, #3
 800dc72:	db02      	blt.n	800dc7a <_printf_float+0x13a>
 800dc74:	6863      	ldr	r3, [r4, #4]
 800dc76:	4299      	cmp	r1, r3
 800dc78:	dd41      	ble.n	800dcfe <_printf_float+0x1be>
 800dc7a:	f1ab 0b02 	sub.w	fp, fp, #2
 800dc7e:	fa5f fb8b 	uxtb.w	fp, fp
 800dc82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc86:	d820      	bhi.n	800dcca <_printf_float+0x18a>
 800dc88:	3901      	subs	r1, #1
 800dc8a:	465a      	mov	r2, fp
 800dc8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dc90:	9109      	str	r1, [sp, #36]	; 0x24
 800dc92:	f7ff ff17 	bl	800dac4 <__exponent>
 800dc96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc98:	1813      	adds	r3, r2, r0
 800dc9a:	2a01      	cmp	r2, #1
 800dc9c:	4681      	mov	r9, r0
 800dc9e:	6123      	str	r3, [r4, #16]
 800dca0:	dc02      	bgt.n	800dca8 <_printf_float+0x168>
 800dca2:	6822      	ldr	r2, [r4, #0]
 800dca4:	07d2      	lsls	r2, r2, #31
 800dca6:	d501      	bpl.n	800dcac <_printf_float+0x16c>
 800dca8:	3301      	adds	r3, #1
 800dcaa:	6123      	str	r3, [r4, #16]
 800dcac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d09c      	beq.n	800dbee <_printf_float+0xae>
 800dcb4:	232d      	movs	r3, #45	; 0x2d
 800dcb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcba:	e798      	b.n	800dbee <_printf_float+0xae>
 800dcbc:	9a06      	ldr	r2, [sp, #24]
 800dcbe:	2a47      	cmp	r2, #71	; 0x47
 800dcc0:	d1be      	bne.n	800dc40 <_printf_float+0x100>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1bc      	bne.n	800dc40 <_printf_float+0x100>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e7b9      	b.n	800dc3e <_printf_float+0xfe>
 800dcca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dcce:	d118      	bne.n	800dd02 <_printf_float+0x1c2>
 800dcd0:	2900      	cmp	r1, #0
 800dcd2:	6863      	ldr	r3, [r4, #4]
 800dcd4:	dd0b      	ble.n	800dcee <_printf_float+0x1ae>
 800dcd6:	6121      	str	r1, [r4, #16]
 800dcd8:	b913      	cbnz	r3, 800dce0 <_printf_float+0x1a0>
 800dcda:	6822      	ldr	r2, [r4, #0]
 800dcdc:	07d0      	lsls	r0, r2, #31
 800dcde:	d502      	bpl.n	800dce6 <_printf_float+0x1a6>
 800dce0:	3301      	adds	r3, #1
 800dce2:	440b      	add	r3, r1
 800dce4:	6123      	str	r3, [r4, #16]
 800dce6:	65a1      	str	r1, [r4, #88]	; 0x58
 800dce8:	f04f 0900 	mov.w	r9, #0
 800dcec:	e7de      	b.n	800dcac <_printf_float+0x16c>
 800dcee:	b913      	cbnz	r3, 800dcf6 <_printf_float+0x1b6>
 800dcf0:	6822      	ldr	r2, [r4, #0]
 800dcf2:	07d2      	lsls	r2, r2, #31
 800dcf4:	d501      	bpl.n	800dcfa <_printf_float+0x1ba>
 800dcf6:	3302      	adds	r3, #2
 800dcf8:	e7f4      	b.n	800dce4 <_printf_float+0x1a4>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e7f2      	b.n	800dce4 <_printf_float+0x1a4>
 800dcfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd04:	4299      	cmp	r1, r3
 800dd06:	db05      	blt.n	800dd14 <_printf_float+0x1d4>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	6121      	str	r1, [r4, #16]
 800dd0c:	07d8      	lsls	r0, r3, #31
 800dd0e:	d5ea      	bpl.n	800dce6 <_printf_float+0x1a6>
 800dd10:	1c4b      	adds	r3, r1, #1
 800dd12:	e7e7      	b.n	800dce4 <_printf_float+0x1a4>
 800dd14:	2900      	cmp	r1, #0
 800dd16:	bfd4      	ite	le
 800dd18:	f1c1 0202 	rsble	r2, r1, #2
 800dd1c:	2201      	movgt	r2, #1
 800dd1e:	4413      	add	r3, r2
 800dd20:	e7e0      	b.n	800dce4 <_printf_float+0x1a4>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	055a      	lsls	r2, r3, #21
 800dd26:	d407      	bmi.n	800dd38 <_printf_float+0x1f8>
 800dd28:	6923      	ldr	r3, [r4, #16]
 800dd2a:	4642      	mov	r2, r8
 800dd2c:	4631      	mov	r1, r6
 800dd2e:	4628      	mov	r0, r5
 800dd30:	47b8      	blx	r7
 800dd32:	3001      	adds	r0, #1
 800dd34:	d12c      	bne.n	800dd90 <_printf_float+0x250>
 800dd36:	e764      	b.n	800dc02 <_printf_float+0xc2>
 800dd38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd3c:	f240 80e0 	bls.w	800df00 <_printf_float+0x3c0>
 800dd40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd44:	2200      	movs	r2, #0
 800dd46:	2300      	movs	r3, #0
 800dd48:	f7f2 fee6 	bl	8000b18 <__aeabi_dcmpeq>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d034      	beq.n	800ddba <_printf_float+0x27a>
 800dd50:	4a37      	ldr	r2, [pc, #220]	; (800de30 <_printf_float+0x2f0>)
 800dd52:	2301      	movs	r3, #1
 800dd54:	4631      	mov	r1, r6
 800dd56:	4628      	mov	r0, r5
 800dd58:	47b8      	blx	r7
 800dd5a:	3001      	adds	r0, #1
 800dd5c:	f43f af51 	beq.w	800dc02 <_printf_float+0xc2>
 800dd60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd64:	429a      	cmp	r2, r3
 800dd66:	db02      	blt.n	800dd6e <_printf_float+0x22e>
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	07d8      	lsls	r0, r3, #31
 800dd6c:	d510      	bpl.n	800dd90 <_printf_float+0x250>
 800dd6e:	ee18 3a10 	vmov	r3, s16
 800dd72:	4652      	mov	r2, sl
 800dd74:	4631      	mov	r1, r6
 800dd76:	4628      	mov	r0, r5
 800dd78:	47b8      	blx	r7
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	f43f af41 	beq.w	800dc02 <_printf_float+0xc2>
 800dd80:	f04f 0800 	mov.w	r8, #0
 800dd84:	f104 091a 	add.w	r9, r4, #26
 800dd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	4543      	cmp	r3, r8
 800dd8e:	dc09      	bgt.n	800dda4 <_printf_float+0x264>
 800dd90:	6823      	ldr	r3, [r4, #0]
 800dd92:	079b      	lsls	r3, r3, #30
 800dd94:	f100 8105 	bmi.w	800dfa2 <_printf_float+0x462>
 800dd98:	68e0      	ldr	r0, [r4, #12]
 800dd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd9c:	4298      	cmp	r0, r3
 800dd9e:	bfb8      	it	lt
 800dda0:	4618      	movlt	r0, r3
 800dda2:	e730      	b.n	800dc06 <_printf_float+0xc6>
 800dda4:	2301      	movs	r3, #1
 800dda6:	464a      	mov	r2, r9
 800dda8:	4631      	mov	r1, r6
 800ddaa:	4628      	mov	r0, r5
 800ddac:	47b8      	blx	r7
 800ddae:	3001      	adds	r0, #1
 800ddb0:	f43f af27 	beq.w	800dc02 <_printf_float+0xc2>
 800ddb4:	f108 0801 	add.w	r8, r8, #1
 800ddb8:	e7e6      	b.n	800dd88 <_printf_float+0x248>
 800ddba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	dc39      	bgt.n	800de34 <_printf_float+0x2f4>
 800ddc0:	4a1b      	ldr	r2, [pc, #108]	; (800de30 <_printf_float+0x2f0>)
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f43f af19 	beq.w	800dc02 <_printf_float+0xc2>
 800ddd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	d102      	bne.n	800ddde <_printf_float+0x29e>
 800ddd8:	6823      	ldr	r3, [r4, #0]
 800ddda:	07d9      	lsls	r1, r3, #31
 800dddc:	d5d8      	bpl.n	800dd90 <_printf_float+0x250>
 800ddde:	ee18 3a10 	vmov	r3, s16
 800dde2:	4652      	mov	r2, sl
 800dde4:	4631      	mov	r1, r6
 800dde6:	4628      	mov	r0, r5
 800dde8:	47b8      	blx	r7
 800ddea:	3001      	adds	r0, #1
 800ddec:	f43f af09 	beq.w	800dc02 <_printf_float+0xc2>
 800ddf0:	f04f 0900 	mov.w	r9, #0
 800ddf4:	f104 0a1a 	add.w	sl, r4, #26
 800ddf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfa:	425b      	negs	r3, r3
 800ddfc:	454b      	cmp	r3, r9
 800ddfe:	dc01      	bgt.n	800de04 <_printf_float+0x2c4>
 800de00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de02:	e792      	b.n	800dd2a <_printf_float+0x1ea>
 800de04:	2301      	movs	r3, #1
 800de06:	4652      	mov	r2, sl
 800de08:	4631      	mov	r1, r6
 800de0a:	4628      	mov	r0, r5
 800de0c:	47b8      	blx	r7
 800de0e:	3001      	adds	r0, #1
 800de10:	f43f aef7 	beq.w	800dc02 <_printf_float+0xc2>
 800de14:	f109 0901 	add.w	r9, r9, #1
 800de18:	e7ee      	b.n	800ddf8 <_printf_float+0x2b8>
 800de1a:	bf00      	nop
 800de1c:	7fefffff 	.word	0x7fefffff
 800de20:	08013384 	.word	0x08013384
 800de24:	08013388 	.word	0x08013388
 800de28:	08013390 	.word	0x08013390
 800de2c:	0801338c 	.word	0x0801338c
 800de30:	08013394 	.word	0x08013394
 800de34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de38:	429a      	cmp	r2, r3
 800de3a:	bfa8      	it	ge
 800de3c:	461a      	movge	r2, r3
 800de3e:	2a00      	cmp	r2, #0
 800de40:	4691      	mov	r9, r2
 800de42:	dc37      	bgt.n	800deb4 <_printf_float+0x374>
 800de44:	f04f 0b00 	mov.w	fp, #0
 800de48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de4c:	f104 021a 	add.w	r2, r4, #26
 800de50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de52:	9305      	str	r3, [sp, #20]
 800de54:	eba3 0309 	sub.w	r3, r3, r9
 800de58:	455b      	cmp	r3, fp
 800de5a:	dc33      	bgt.n	800dec4 <_printf_float+0x384>
 800de5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de60:	429a      	cmp	r2, r3
 800de62:	db3b      	blt.n	800dedc <_printf_float+0x39c>
 800de64:	6823      	ldr	r3, [r4, #0]
 800de66:	07da      	lsls	r2, r3, #31
 800de68:	d438      	bmi.n	800dedc <_printf_float+0x39c>
 800de6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de6c:	9b05      	ldr	r3, [sp, #20]
 800de6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	eba2 0901 	sub.w	r9, r2, r1
 800de76:	4599      	cmp	r9, r3
 800de78:	bfa8      	it	ge
 800de7a:	4699      	movge	r9, r3
 800de7c:	f1b9 0f00 	cmp.w	r9, #0
 800de80:	dc35      	bgt.n	800deee <_printf_float+0x3ae>
 800de82:	f04f 0800 	mov.w	r8, #0
 800de86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de8a:	f104 0a1a 	add.w	sl, r4, #26
 800de8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de92:	1a9b      	subs	r3, r3, r2
 800de94:	eba3 0309 	sub.w	r3, r3, r9
 800de98:	4543      	cmp	r3, r8
 800de9a:	f77f af79 	ble.w	800dd90 <_printf_float+0x250>
 800de9e:	2301      	movs	r3, #1
 800dea0:	4652      	mov	r2, sl
 800dea2:	4631      	mov	r1, r6
 800dea4:	4628      	mov	r0, r5
 800dea6:	47b8      	blx	r7
 800dea8:	3001      	adds	r0, #1
 800deaa:	f43f aeaa 	beq.w	800dc02 <_printf_float+0xc2>
 800deae:	f108 0801 	add.w	r8, r8, #1
 800deb2:	e7ec      	b.n	800de8e <_printf_float+0x34e>
 800deb4:	4613      	mov	r3, r2
 800deb6:	4631      	mov	r1, r6
 800deb8:	4642      	mov	r2, r8
 800deba:	4628      	mov	r0, r5
 800debc:	47b8      	blx	r7
 800debe:	3001      	adds	r0, #1
 800dec0:	d1c0      	bne.n	800de44 <_printf_float+0x304>
 800dec2:	e69e      	b.n	800dc02 <_printf_float+0xc2>
 800dec4:	2301      	movs	r3, #1
 800dec6:	4631      	mov	r1, r6
 800dec8:	4628      	mov	r0, r5
 800deca:	9205      	str	r2, [sp, #20]
 800decc:	47b8      	blx	r7
 800dece:	3001      	adds	r0, #1
 800ded0:	f43f ae97 	beq.w	800dc02 <_printf_float+0xc2>
 800ded4:	9a05      	ldr	r2, [sp, #20]
 800ded6:	f10b 0b01 	add.w	fp, fp, #1
 800deda:	e7b9      	b.n	800de50 <_printf_float+0x310>
 800dedc:	ee18 3a10 	vmov	r3, s16
 800dee0:	4652      	mov	r2, sl
 800dee2:	4631      	mov	r1, r6
 800dee4:	4628      	mov	r0, r5
 800dee6:	47b8      	blx	r7
 800dee8:	3001      	adds	r0, #1
 800deea:	d1be      	bne.n	800de6a <_printf_float+0x32a>
 800deec:	e689      	b.n	800dc02 <_printf_float+0xc2>
 800deee:	9a05      	ldr	r2, [sp, #20]
 800def0:	464b      	mov	r3, r9
 800def2:	4442      	add	r2, r8
 800def4:	4631      	mov	r1, r6
 800def6:	4628      	mov	r0, r5
 800def8:	47b8      	blx	r7
 800defa:	3001      	adds	r0, #1
 800defc:	d1c1      	bne.n	800de82 <_printf_float+0x342>
 800defe:	e680      	b.n	800dc02 <_printf_float+0xc2>
 800df00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df02:	2a01      	cmp	r2, #1
 800df04:	dc01      	bgt.n	800df0a <_printf_float+0x3ca>
 800df06:	07db      	lsls	r3, r3, #31
 800df08:	d538      	bpl.n	800df7c <_printf_float+0x43c>
 800df0a:	2301      	movs	r3, #1
 800df0c:	4642      	mov	r2, r8
 800df0e:	4631      	mov	r1, r6
 800df10:	4628      	mov	r0, r5
 800df12:	47b8      	blx	r7
 800df14:	3001      	adds	r0, #1
 800df16:	f43f ae74 	beq.w	800dc02 <_printf_float+0xc2>
 800df1a:	ee18 3a10 	vmov	r3, s16
 800df1e:	4652      	mov	r2, sl
 800df20:	4631      	mov	r1, r6
 800df22:	4628      	mov	r0, r5
 800df24:	47b8      	blx	r7
 800df26:	3001      	adds	r0, #1
 800df28:	f43f ae6b 	beq.w	800dc02 <_printf_float+0xc2>
 800df2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df30:	2200      	movs	r2, #0
 800df32:	2300      	movs	r3, #0
 800df34:	f7f2 fdf0 	bl	8000b18 <__aeabi_dcmpeq>
 800df38:	b9d8      	cbnz	r0, 800df72 <_printf_float+0x432>
 800df3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3c:	f108 0201 	add.w	r2, r8, #1
 800df40:	3b01      	subs	r3, #1
 800df42:	4631      	mov	r1, r6
 800df44:	4628      	mov	r0, r5
 800df46:	47b8      	blx	r7
 800df48:	3001      	adds	r0, #1
 800df4a:	d10e      	bne.n	800df6a <_printf_float+0x42a>
 800df4c:	e659      	b.n	800dc02 <_printf_float+0xc2>
 800df4e:	2301      	movs	r3, #1
 800df50:	4652      	mov	r2, sl
 800df52:	4631      	mov	r1, r6
 800df54:	4628      	mov	r0, r5
 800df56:	47b8      	blx	r7
 800df58:	3001      	adds	r0, #1
 800df5a:	f43f ae52 	beq.w	800dc02 <_printf_float+0xc2>
 800df5e:	f108 0801 	add.w	r8, r8, #1
 800df62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df64:	3b01      	subs	r3, #1
 800df66:	4543      	cmp	r3, r8
 800df68:	dcf1      	bgt.n	800df4e <_printf_float+0x40e>
 800df6a:	464b      	mov	r3, r9
 800df6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df70:	e6dc      	b.n	800dd2c <_printf_float+0x1ec>
 800df72:	f04f 0800 	mov.w	r8, #0
 800df76:	f104 0a1a 	add.w	sl, r4, #26
 800df7a:	e7f2      	b.n	800df62 <_printf_float+0x422>
 800df7c:	2301      	movs	r3, #1
 800df7e:	4642      	mov	r2, r8
 800df80:	e7df      	b.n	800df42 <_printf_float+0x402>
 800df82:	2301      	movs	r3, #1
 800df84:	464a      	mov	r2, r9
 800df86:	4631      	mov	r1, r6
 800df88:	4628      	mov	r0, r5
 800df8a:	47b8      	blx	r7
 800df8c:	3001      	adds	r0, #1
 800df8e:	f43f ae38 	beq.w	800dc02 <_printf_float+0xc2>
 800df92:	f108 0801 	add.w	r8, r8, #1
 800df96:	68e3      	ldr	r3, [r4, #12]
 800df98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df9a:	1a5b      	subs	r3, r3, r1
 800df9c:	4543      	cmp	r3, r8
 800df9e:	dcf0      	bgt.n	800df82 <_printf_float+0x442>
 800dfa0:	e6fa      	b.n	800dd98 <_printf_float+0x258>
 800dfa2:	f04f 0800 	mov.w	r8, #0
 800dfa6:	f104 0919 	add.w	r9, r4, #25
 800dfaa:	e7f4      	b.n	800df96 <_printf_float+0x456>

0800dfac <_printf_common>:
 800dfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb0:	4616      	mov	r6, r2
 800dfb2:	4699      	mov	r9, r3
 800dfb4:	688a      	ldr	r2, [r1, #8]
 800dfb6:	690b      	ldr	r3, [r1, #16]
 800dfb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	bfb8      	it	lt
 800dfc0:	4613      	movlt	r3, r2
 800dfc2:	6033      	str	r3, [r6, #0]
 800dfc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfc8:	4607      	mov	r7, r0
 800dfca:	460c      	mov	r4, r1
 800dfcc:	b10a      	cbz	r2, 800dfd2 <_printf_common+0x26>
 800dfce:	3301      	adds	r3, #1
 800dfd0:	6033      	str	r3, [r6, #0]
 800dfd2:	6823      	ldr	r3, [r4, #0]
 800dfd4:	0699      	lsls	r1, r3, #26
 800dfd6:	bf42      	ittt	mi
 800dfd8:	6833      	ldrmi	r3, [r6, #0]
 800dfda:	3302      	addmi	r3, #2
 800dfdc:	6033      	strmi	r3, [r6, #0]
 800dfde:	6825      	ldr	r5, [r4, #0]
 800dfe0:	f015 0506 	ands.w	r5, r5, #6
 800dfe4:	d106      	bne.n	800dff4 <_printf_common+0x48>
 800dfe6:	f104 0a19 	add.w	sl, r4, #25
 800dfea:	68e3      	ldr	r3, [r4, #12]
 800dfec:	6832      	ldr	r2, [r6, #0]
 800dfee:	1a9b      	subs	r3, r3, r2
 800dff0:	42ab      	cmp	r3, r5
 800dff2:	dc26      	bgt.n	800e042 <_printf_common+0x96>
 800dff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dff8:	1e13      	subs	r3, r2, #0
 800dffa:	6822      	ldr	r2, [r4, #0]
 800dffc:	bf18      	it	ne
 800dffe:	2301      	movne	r3, #1
 800e000:	0692      	lsls	r2, r2, #26
 800e002:	d42b      	bmi.n	800e05c <_printf_common+0xb0>
 800e004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e008:	4649      	mov	r1, r9
 800e00a:	4638      	mov	r0, r7
 800e00c:	47c0      	blx	r8
 800e00e:	3001      	adds	r0, #1
 800e010:	d01e      	beq.n	800e050 <_printf_common+0xa4>
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	68e5      	ldr	r5, [r4, #12]
 800e016:	6832      	ldr	r2, [r6, #0]
 800e018:	f003 0306 	and.w	r3, r3, #6
 800e01c:	2b04      	cmp	r3, #4
 800e01e:	bf08      	it	eq
 800e020:	1aad      	subeq	r5, r5, r2
 800e022:	68a3      	ldr	r3, [r4, #8]
 800e024:	6922      	ldr	r2, [r4, #16]
 800e026:	bf0c      	ite	eq
 800e028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e02c:	2500      	movne	r5, #0
 800e02e:	4293      	cmp	r3, r2
 800e030:	bfc4      	itt	gt
 800e032:	1a9b      	subgt	r3, r3, r2
 800e034:	18ed      	addgt	r5, r5, r3
 800e036:	2600      	movs	r6, #0
 800e038:	341a      	adds	r4, #26
 800e03a:	42b5      	cmp	r5, r6
 800e03c:	d11a      	bne.n	800e074 <_printf_common+0xc8>
 800e03e:	2000      	movs	r0, #0
 800e040:	e008      	b.n	800e054 <_printf_common+0xa8>
 800e042:	2301      	movs	r3, #1
 800e044:	4652      	mov	r2, sl
 800e046:	4649      	mov	r1, r9
 800e048:	4638      	mov	r0, r7
 800e04a:	47c0      	blx	r8
 800e04c:	3001      	adds	r0, #1
 800e04e:	d103      	bne.n	800e058 <_printf_common+0xac>
 800e050:	f04f 30ff 	mov.w	r0, #4294967295
 800e054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e058:	3501      	adds	r5, #1
 800e05a:	e7c6      	b.n	800dfea <_printf_common+0x3e>
 800e05c:	18e1      	adds	r1, r4, r3
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	2030      	movs	r0, #48	; 0x30
 800e062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e066:	4422      	add	r2, r4
 800e068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e06c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e070:	3302      	adds	r3, #2
 800e072:	e7c7      	b.n	800e004 <_printf_common+0x58>
 800e074:	2301      	movs	r3, #1
 800e076:	4622      	mov	r2, r4
 800e078:	4649      	mov	r1, r9
 800e07a:	4638      	mov	r0, r7
 800e07c:	47c0      	blx	r8
 800e07e:	3001      	adds	r0, #1
 800e080:	d0e6      	beq.n	800e050 <_printf_common+0xa4>
 800e082:	3601      	adds	r6, #1
 800e084:	e7d9      	b.n	800e03a <_printf_common+0x8e>
	...

0800e088 <_printf_i>:
 800e088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e08c:	460c      	mov	r4, r1
 800e08e:	4691      	mov	r9, r2
 800e090:	7e27      	ldrb	r7, [r4, #24]
 800e092:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e094:	2f78      	cmp	r7, #120	; 0x78
 800e096:	4680      	mov	r8, r0
 800e098:	469a      	mov	sl, r3
 800e09a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e09e:	d807      	bhi.n	800e0b0 <_printf_i+0x28>
 800e0a0:	2f62      	cmp	r7, #98	; 0x62
 800e0a2:	d80a      	bhi.n	800e0ba <_printf_i+0x32>
 800e0a4:	2f00      	cmp	r7, #0
 800e0a6:	f000 80d8 	beq.w	800e25a <_printf_i+0x1d2>
 800e0aa:	2f58      	cmp	r7, #88	; 0x58
 800e0ac:	f000 80a3 	beq.w	800e1f6 <_printf_i+0x16e>
 800e0b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e0b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0b8:	e03a      	b.n	800e130 <_printf_i+0xa8>
 800e0ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0be:	2b15      	cmp	r3, #21
 800e0c0:	d8f6      	bhi.n	800e0b0 <_printf_i+0x28>
 800e0c2:	a001      	add	r0, pc, #4	; (adr r0, 800e0c8 <_printf_i+0x40>)
 800e0c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e0c8:	0800e121 	.word	0x0800e121
 800e0cc:	0800e135 	.word	0x0800e135
 800e0d0:	0800e0b1 	.word	0x0800e0b1
 800e0d4:	0800e0b1 	.word	0x0800e0b1
 800e0d8:	0800e0b1 	.word	0x0800e0b1
 800e0dc:	0800e0b1 	.word	0x0800e0b1
 800e0e0:	0800e135 	.word	0x0800e135
 800e0e4:	0800e0b1 	.word	0x0800e0b1
 800e0e8:	0800e0b1 	.word	0x0800e0b1
 800e0ec:	0800e0b1 	.word	0x0800e0b1
 800e0f0:	0800e0b1 	.word	0x0800e0b1
 800e0f4:	0800e241 	.word	0x0800e241
 800e0f8:	0800e165 	.word	0x0800e165
 800e0fc:	0800e223 	.word	0x0800e223
 800e100:	0800e0b1 	.word	0x0800e0b1
 800e104:	0800e0b1 	.word	0x0800e0b1
 800e108:	0800e263 	.word	0x0800e263
 800e10c:	0800e0b1 	.word	0x0800e0b1
 800e110:	0800e165 	.word	0x0800e165
 800e114:	0800e0b1 	.word	0x0800e0b1
 800e118:	0800e0b1 	.word	0x0800e0b1
 800e11c:	0800e22b 	.word	0x0800e22b
 800e120:	680b      	ldr	r3, [r1, #0]
 800e122:	1d1a      	adds	r2, r3, #4
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	600a      	str	r2, [r1, #0]
 800e128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e130:	2301      	movs	r3, #1
 800e132:	e0a3      	b.n	800e27c <_printf_i+0x1f4>
 800e134:	6825      	ldr	r5, [r4, #0]
 800e136:	6808      	ldr	r0, [r1, #0]
 800e138:	062e      	lsls	r6, r5, #24
 800e13a:	f100 0304 	add.w	r3, r0, #4
 800e13e:	d50a      	bpl.n	800e156 <_printf_i+0xce>
 800e140:	6805      	ldr	r5, [r0, #0]
 800e142:	600b      	str	r3, [r1, #0]
 800e144:	2d00      	cmp	r5, #0
 800e146:	da03      	bge.n	800e150 <_printf_i+0xc8>
 800e148:	232d      	movs	r3, #45	; 0x2d
 800e14a:	426d      	negs	r5, r5
 800e14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e150:	485e      	ldr	r0, [pc, #376]	; (800e2cc <_printf_i+0x244>)
 800e152:	230a      	movs	r3, #10
 800e154:	e019      	b.n	800e18a <_printf_i+0x102>
 800e156:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e15a:	6805      	ldr	r5, [r0, #0]
 800e15c:	600b      	str	r3, [r1, #0]
 800e15e:	bf18      	it	ne
 800e160:	b22d      	sxthne	r5, r5
 800e162:	e7ef      	b.n	800e144 <_printf_i+0xbc>
 800e164:	680b      	ldr	r3, [r1, #0]
 800e166:	6825      	ldr	r5, [r4, #0]
 800e168:	1d18      	adds	r0, r3, #4
 800e16a:	6008      	str	r0, [r1, #0]
 800e16c:	0628      	lsls	r0, r5, #24
 800e16e:	d501      	bpl.n	800e174 <_printf_i+0xec>
 800e170:	681d      	ldr	r5, [r3, #0]
 800e172:	e002      	b.n	800e17a <_printf_i+0xf2>
 800e174:	0669      	lsls	r1, r5, #25
 800e176:	d5fb      	bpl.n	800e170 <_printf_i+0xe8>
 800e178:	881d      	ldrh	r5, [r3, #0]
 800e17a:	4854      	ldr	r0, [pc, #336]	; (800e2cc <_printf_i+0x244>)
 800e17c:	2f6f      	cmp	r7, #111	; 0x6f
 800e17e:	bf0c      	ite	eq
 800e180:	2308      	moveq	r3, #8
 800e182:	230a      	movne	r3, #10
 800e184:	2100      	movs	r1, #0
 800e186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e18a:	6866      	ldr	r6, [r4, #4]
 800e18c:	60a6      	str	r6, [r4, #8]
 800e18e:	2e00      	cmp	r6, #0
 800e190:	bfa2      	ittt	ge
 800e192:	6821      	ldrge	r1, [r4, #0]
 800e194:	f021 0104 	bicge.w	r1, r1, #4
 800e198:	6021      	strge	r1, [r4, #0]
 800e19a:	b90d      	cbnz	r5, 800e1a0 <_printf_i+0x118>
 800e19c:	2e00      	cmp	r6, #0
 800e19e:	d04d      	beq.n	800e23c <_printf_i+0x1b4>
 800e1a0:	4616      	mov	r6, r2
 800e1a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1a6:	fb03 5711 	mls	r7, r3, r1, r5
 800e1aa:	5dc7      	ldrb	r7, [r0, r7]
 800e1ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1b0:	462f      	mov	r7, r5
 800e1b2:	42bb      	cmp	r3, r7
 800e1b4:	460d      	mov	r5, r1
 800e1b6:	d9f4      	bls.n	800e1a2 <_printf_i+0x11a>
 800e1b8:	2b08      	cmp	r3, #8
 800e1ba:	d10b      	bne.n	800e1d4 <_printf_i+0x14c>
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	07df      	lsls	r7, r3, #31
 800e1c0:	d508      	bpl.n	800e1d4 <_printf_i+0x14c>
 800e1c2:	6923      	ldr	r3, [r4, #16]
 800e1c4:	6861      	ldr	r1, [r4, #4]
 800e1c6:	4299      	cmp	r1, r3
 800e1c8:	bfde      	ittt	le
 800e1ca:	2330      	movle	r3, #48	; 0x30
 800e1cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e1d4:	1b92      	subs	r2, r2, r6
 800e1d6:	6122      	str	r2, [r4, #16]
 800e1d8:	f8cd a000 	str.w	sl, [sp]
 800e1dc:	464b      	mov	r3, r9
 800e1de:	aa03      	add	r2, sp, #12
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	f7ff fee2 	bl	800dfac <_printf_common>
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	d14c      	bne.n	800e286 <_printf_i+0x1fe>
 800e1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f0:	b004      	add	sp, #16
 800e1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1f6:	4835      	ldr	r0, [pc, #212]	; (800e2cc <_printf_i+0x244>)
 800e1f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	680e      	ldr	r6, [r1, #0]
 800e200:	061f      	lsls	r7, r3, #24
 800e202:	f856 5b04 	ldr.w	r5, [r6], #4
 800e206:	600e      	str	r6, [r1, #0]
 800e208:	d514      	bpl.n	800e234 <_printf_i+0x1ac>
 800e20a:	07d9      	lsls	r1, r3, #31
 800e20c:	bf44      	itt	mi
 800e20e:	f043 0320 	orrmi.w	r3, r3, #32
 800e212:	6023      	strmi	r3, [r4, #0]
 800e214:	b91d      	cbnz	r5, 800e21e <_printf_i+0x196>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	f023 0320 	bic.w	r3, r3, #32
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	2310      	movs	r3, #16
 800e220:	e7b0      	b.n	800e184 <_printf_i+0xfc>
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	f043 0320 	orr.w	r3, r3, #32
 800e228:	6023      	str	r3, [r4, #0]
 800e22a:	2378      	movs	r3, #120	; 0x78
 800e22c:	4828      	ldr	r0, [pc, #160]	; (800e2d0 <_printf_i+0x248>)
 800e22e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e232:	e7e3      	b.n	800e1fc <_printf_i+0x174>
 800e234:	065e      	lsls	r6, r3, #25
 800e236:	bf48      	it	mi
 800e238:	b2ad      	uxthmi	r5, r5
 800e23a:	e7e6      	b.n	800e20a <_printf_i+0x182>
 800e23c:	4616      	mov	r6, r2
 800e23e:	e7bb      	b.n	800e1b8 <_printf_i+0x130>
 800e240:	680b      	ldr	r3, [r1, #0]
 800e242:	6826      	ldr	r6, [r4, #0]
 800e244:	6960      	ldr	r0, [r4, #20]
 800e246:	1d1d      	adds	r5, r3, #4
 800e248:	600d      	str	r5, [r1, #0]
 800e24a:	0635      	lsls	r5, r6, #24
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	d501      	bpl.n	800e254 <_printf_i+0x1cc>
 800e250:	6018      	str	r0, [r3, #0]
 800e252:	e002      	b.n	800e25a <_printf_i+0x1d2>
 800e254:	0671      	lsls	r1, r6, #25
 800e256:	d5fb      	bpl.n	800e250 <_printf_i+0x1c8>
 800e258:	8018      	strh	r0, [r3, #0]
 800e25a:	2300      	movs	r3, #0
 800e25c:	6123      	str	r3, [r4, #16]
 800e25e:	4616      	mov	r6, r2
 800e260:	e7ba      	b.n	800e1d8 <_printf_i+0x150>
 800e262:	680b      	ldr	r3, [r1, #0]
 800e264:	1d1a      	adds	r2, r3, #4
 800e266:	600a      	str	r2, [r1, #0]
 800e268:	681e      	ldr	r6, [r3, #0]
 800e26a:	6862      	ldr	r2, [r4, #4]
 800e26c:	2100      	movs	r1, #0
 800e26e:	4630      	mov	r0, r6
 800e270:	f7f1 ffde 	bl	8000230 <memchr>
 800e274:	b108      	cbz	r0, 800e27a <_printf_i+0x1f2>
 800e276:	1b80      	subs	r0, r0, r6
 800e278:	6060      	str	r0, [r4, #4]
 800e27a:	6863      	ldr	r3, [r4, #4]
 800e27c:	6123      	str	r3, [r4, #16]
 800e27e:	2300      	movs	r3, #0
 800e280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e284:	e7a8      	b.n	800e1d8 <_printf_i+0x150>
 800e286:	6923      	ldr	r3, [r4, #16]
 800e288:	4632      	mov	r2, r6
 800e28a:	4649      	mov	r1, r9
 800e28c:	4640      	mov	r0, r8
 800e28e:	47d0      	blx	sl
 800e290:	3001      	adds	r0, #1
 800e292:	d0ab      	beq.n	800e1ec <_printf_i+0x164>
 800e294:	6823      	ldr	r3, [r4, #0]
 800e296:	079b      	lsls	r3, r3, #30
 800e298:	d413      	bmi.n	800e2c2 <_printf_i+0x23a>
 800e29a:	68e0      	ldr	r0, [r4, #12]
 800e29c:	9b03      	ldr	r3, [sp, #12]
 800e29e:	4298      	cmp	r0, r3
 800e2a0:	bfb8      	it	lt
 800e2a2:	4618      	movlt	r0, r3
 800e2a4:	e7a4      	b.n	800e1f0 <_printf_i+0x168>
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	4632      	mov	r2, r6
 800e2aa:	4649      	mov	r1, r9
 800e2ac:	4640      	mov	r0, r8
 800e2ae:	47d0      	blx	sl
 800e2b0:	3001      	adds	r0, #1
 800e2b2:	d09b      	beq.n	800e1ec <_printf_i+0x164>
 800e2b4:	3501      	adds	r5, #1
 800e2b6:	68e3      	ldr	r3, [r4, #12]
 800e2b8:	9903      	ldr	r1, [sp, #12]
 800e2ba:	1a5b      	subs	r3, r3, r1
 800e2bc:	42ab      	cmp	r3, r5
 800e2be:	dcf2      	bgt.n	800e2a6 <_printf_i+0x21e>
 800e2c0:	e7eb      	b.n	800e29a <_printf_i+0x212>
 800e2c2:	2500      	movs	r5, #0
 800e2c4:	f104 0619 	add.w	r6, r4, #25
 800e2c8:	e7f5      	b.n	800e2b6 <_printf_i+0x22e>
 800e2ca:	bf00      	nop
 800e2cc:	08013396 	.word	0x08013396
 800e2d0:	080133a7 	.word	0x080133a7

0800e2d4 <iprintf>:
 800e2d4:	b40f      	push	{r0, r1, r2, r3}
 800e2d6:	4b0a      	ldr	r3, [pc, #40]	; (800e300 <iprintf+0x2c>)
 800e2d8:	b513      	push	{r0, r1, r4, lr}
 800e2da:	681c      	ldr	r4, [r3, #0]
 800e2dc:	b124      	cbz	r4, 800e2e8 <iprintf+0x14>
 800e2de:	69a3      	ldr	r3, [r4, #24]
 800e2e0:	b913      	cbnz	r3, 800e2e8 <iprintf+0x14>
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f001 ff96 	bl	8010214 <__sinit>
 800e2e8:	ab05      	add	r3, sp, #20
 800e2ea:	9a04      	ldr	r2, [sp, #16]
 800e2ec:	68a1      	ldr	r1, [r4, #8]
 800e2ee:	9301      	str	r3, [sp, #4]
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f003 f9bf 	bl	8011674 <_vfiprintf_r>
 800e2f6:	b002      	add	sp, #8
 800e2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2fc:	b004      	add	sp, #16
 800e2fe:	4770      	bx	lr
 800e300:	2000002c 	.word	0x2000002c

0800e304 <_puts_r>:
 800e304:	b570      	push	{r4, r5, r6, lr}
 800e306:	460e      	mov	r6, r1
 800e308:	4605      	mov	r5, r0
 800e30a:	b118      	cbz	r0, 800e314 <_puts_r+0x10>
 800e30c:	6983      	ldr	r3, [r0, #24]
 800e30e:	b90b      	cbnz	r3, 800e314 <_puts_r+0x10>
 800e310:	f001 ff80 	bl	8010214 <__sinit>
 800e314:	69ab      	ldr	r3, [r5, #24]
 800e316:	68ac      	ldr	r4, [r5, #8]
 800e318:	b913      	cbnz	r3, 800e320 <_puts_r+0x1c>
 800e31a:	4628      	mov	r0, r5
 800e31c:	f001 ff7a 	bl	8010214 <__sinit>
 800e320:	4b2c      	ldr	r3, [pc, #176]	; (800e3d4 <_puts_r+0xd0>)
 800e322:	429c      	cmp	r4, r3
 800e324:	d120      	bne.n	800e368 <_puts_r+0x64>
 800e326:	686c      	ldr	r4, [r5, #4]
 800e328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e32a:	07db      	lsls	r3, r3, #31
 800e32c:	d405      	bmi.n	800e33a <_puts_r+0x36>
 800e32e:	89a3      	ldrh	r3, [r4, #12]
 800e330:	0598      	lsls	r0, r3, #22
 800e332:	d402      	bmi.n	800e33a <_puts_r+0x36>
 800e334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e336:	f002 fb7e 	bl	8010a36 <__retarget_lock_acquire_recursive>
 800e33a:	89a3      	ldrh	r3, [r4, #12]
 800e33c:	0719      	lsls	r1, r3, #28
 800e33e:	d51d      	bpl.n	800e37c <_puts_r+0x78>
 800e340:	6923      	ldr	r3, [r4, #16]
 800e342:	b1db      	cbz	r3, 800e37c <_puts_r+0x78>
 800e344:	3e01      	subs	r6, #1
 800e346:	68a3      	ldr	r3, [r4, #8]
 800e348:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e34c:	3b01      	subs	r3, #1
 800e34e:	60a3      	str	r3, [r4, #8]
 800e350:	bb39      	cbnz	r1, 800e3a2 <_puts_r+0x9e>
 800e352:	2b00      	cmp	r3, #0
 800e354:	da38      	bge.n	800e3c8 <_puts_r+0xc4>
 800e356:	4622      	mov	r2, r4
 800e358:	210a      	movs	r1, #10
 800e35a:	4628      	mov	r0, r5
 800e35c:	f000 ff08 	bl	800f170 <__swbuf_r>
 800e360:	3001      	adds	r0, #1
 800e362:	d011      	beq.n	800e388 <_puts_r+0x84>
 800e364:	250a      	movs	r5, #10
 800e366:	e011      	b.n	800e38c <_puts_r+0x88>
 800e368:	4b1b      	ldr	r3, [pc, #108]	; (800e3d8 <_puts_r+0xd4>)
 800e36a:	429c      	cmp	r4, r3
 800e36c:	d101      	bne.n	800e372 <_puts_r+0x6e>
 800e36e:	68ac      	ldr	r4, [r5, #8]
 800e370:	e7da      	b.n	800e328 <_puts_r+0x24>
 800e372:	4b1a      	ldr	r3, [pc, #104]	; (800e3dc <_puts_r+0xd8>)
 800e374:	429c      	cmp	r4, r3
 800e376:	bf08      	it	eq
 800e378:	68ec      	ldreq	r4, [r5, #12]
 800e37a:	e7d5      	b.n	800e328 <_puts_r+0x24>
 800e37c:	4621      	mov	r1, r4
 800e37e:	4628      	mov	r0, r5
 800e380:	f000 ff48 	bl	800f214 <__swsetup_r>
 800e384:	2800      	cmp	r0, #0
 800e386:	d0dd      	beq.n	800e344 <_puts_r+0x40>
 800e388:	f04f 35ff 	mov.w	r5, #4294967295
 800e38c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e38e:	07da      	lsls	r2, r3, #31
 800e390:	d405      	bmi.n	800e39e <_puts_r+0x9a>
 800e392:	89a3      	ldrh	r3, [r4, #12]
 800e394:	059b      	lsls	r3, r3, #22
 800e396:	d402      	bmi.n	800e39e <_puts_r+0x9a>
 800e398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e39a:	f002 fb4d 	bl	8010a38 <__retarget_lock_release_recursive>
 800e39e:	4628      	mov	r0, r5
 800e3a0:	bd70      	pop	{r4, r5, r6, pc}
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da04      	bge.n	800e3b0 <_puts_r+0xac>
 800e3a6:	69a2      	ldr	r2, [r4, #24]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	dc06      	bgt.n	800e3ba <_puts_r+0xb6>
 800e3ac:	290a      	cmp	r1, #10
 800e3ae:	d004      	beq.n	800e3ba <_puts_r+0xb6>
 800e3b0:	6823      	ldr	r3, [r4, #0]
 800e3b2:	1c5a      	adds	r2, r3, #1
 800e3b4:	6022      	str	r2, [r4, #0]
 800e3b6:	7019      	strb	r1, [r3, #0]
 800e3b8:	e7c5      	b.n	800e346 <_puts_r+0x42>
 800e3ba:	4622      	mov	r2, r4
 800e3bc:	4628      	mov	r0, r5
 800e3be:	f000 fed7 	bl	800f170 <__swbuf_r>
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	d1bf      	bne.n	800e346 <_puts_r+0x42>
 800e3c6:	e7df      	b.n	800e388 <_puts_r+0x84>
 800e3c8:	6823      	ldr	r3, [r4, #0]
 800e3ca:	250a      	movs	r5, #10
 800e3cc:	1c5a      	adds	r2, r3, #1
 800e3ce:	6022      	str	r2, [r4, #0]
 800e3d0:	701d      	strb	r5, [r3, #0]
 800e3d2:	e7db      	b.n	800e38c <_puts_r+0x88>
 800e3d4:	080135c0 	.word	0x080135c0
 800e3d8:	080135e0 	.word	0x080135e0
 800e3dc:	080135a0 	.word	0x080135a0

0800e3e0 <puts>:
 800e3e0:	4b02      	ldr	r3, [pc, #8]	; (800e3ec <puts+0xc>)
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	6818      	ldr	r0, [r3, #0]
 800e3e6:	f7ff bf8d 	b.w	800e304 <_puts_r>
 800e3ea:	bf00      	nop
 800e3ec:	2000002c 	.word	0x2000002c

0800e3f0 <sulp>:
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	ec45 4b10 	vmov	d0, r4, r5
 800e3fa:	4616      	mov	r6, r2
 800e3fc:	f002 ff08 	bl	8011210 <__ulp>
 800e400:	ec51 0b10 	vmov	r0, r1, d0
 800e404:	b17e      	cbz	r6, 800e426 <sulp+0x36>
 800e406:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e40a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e40e:	2b00      	cmp	r3, #0
 800e410:	dd09      	ble.n	800e426 <sulp+0x36>
 800e412:	051b      	lsls	r3, r3, #20
 800e414:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e418:	2400      	movs	r4, #0
 800e41a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e41e:	4622      	mov	r2, r4
 800e420:	462b      	mov	r3, r5
 800e422:	f7f2 f911 	bl	8000648 <__aeabi_dmul>
 800e426:	bd70      	pop	{r4, r5, r6, pc}

0800e428 <_strtod_l>:
 800e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42c:	b0a3      	sub	sp, #140	; 0x8c
 800e42e:	461f      	mov	r7, r3
 800e430:	2300      	movs	r3, #0
 800e432:	931e      	str	r3, [sp, #120]	; 0x78
 800e434:	4ba4      	ldr	r3, [pc, #656]	; (800e6c8 <_strtod_l+0x2a0>)
 800e436:	9219      	str	r2, [sp, #100]	; 0x64
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	9307      	str	r3, [sp, #28]
 800e43c:	4604      	mov	r4, r0
 800e43e:	4618      	mov	r0, r3
 800e440:	4688      	mov	r8, r1
 800e442:	f7f1 feed 	bl	8000220 <strlen>
 800e446:	f04f 0a00 	mov.w	sl, #0
 800e44a:	4605      	mov	r5, r0
 800e44c:	f04f 0b00 	mov.w	fp, #0
 800e450:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e456:	781a      	ldrb	r2, [r3, #0]
 800e458:	2a2b      	cmp	r2, #43	; 0x2b
 800e45a:	d04c      	beq.n	800e4f6 <_strtod_l+0xce>
 800e45c:	d839      	bhi.n	800e4d2 <_strtod_l+0xaa>
 800e45e:	2a0d      	cmp	r2, #13
 800e460:	d832      	bhi.n	800e4c8 <_strtod_l+0xa0>
 800e462:	2a08      	cmp	r2, #8
 800e464:	d832      	bhi.n	800e4cc <_strtod_l+0xa4>
 800e466:	2a00      	cmp	r2, #0
 800e468:	d03c      	beq.n	800e4e4 <_strtod_l+0xbc>
 800e46a:	2300      	movs	r3, #0
 800e46c:	930e      	str	r3, [sp, #56]	; 0x38
 800e46e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e470:	7833      	ldrb	r3, [r6, #0]
 800e472:	2b30      	cmp	r3, #48	; 0x30
 800e474:	f040 80b4 	bne.w	800e5e0 <_strtod_l+0x1b8>
 800e478:	7873      	ldrb	r3, [r6, #1]
 800e47a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e47e:	2b58      	cmp	r3, #88	; 0x58
 800e480:	d16c      	bne.n	800e55c <_strtod_l+0x134>
 800e482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	ab1e      	add	r3, sp, #120	; 0x78
 800e488:	9702      	str	r7, [sp, #8]
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	4a8f      	ldr	r2, [pc, #572]	; (800e6cc <_strtod_l+0x2a4>)
 800e48e:	ab1f      	add	r3, sp, #124	; 0x7c
 800e490:	a91d      	add	r1, sp, #116	; 0x74
 800e492:	4620      	mov	r0, r4
 800e494:	f001 ffc2 	bl	801041c <__gethex>
 800e498:	f010 0707 	ands.w	r7, r0, #7
 800e49c:	4605      	mov	r5, r0
 800e49e:	d005      	beq.n	800e4ac <_strtod_l+0x84>
 800e4a0:	2f06      	cmp	r7, #6
 800e4a2:	d12a      	bne.n	800e4fa <_strtod_l+0xd2>
 800e4a4:	3601      	adds	r6, #1
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	961d      	str	r6, [sp, #116]	; 0x74
 800e4aa:	930e      	str	r3, [sp, #56]	; 0x38
 800e4ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f040 8596 	bne.w	800efe0 <_strtod_l+0xbb8>
 800e4b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4b6:	b1db      	cbz	r3, 800e4f0 <_strtod_l+0xc8>
 800e4b8:	4652      	mov	r2, sl
 800e4ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e4be:	ec43 2b10 	vmov	d0, r2, r3
 800e4c2:	b023      	add	sp, #140	; 0x8c
 800e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c8:	2a20      	cmp	r2, #32
 800e4ca:	d1ce      	bne.n	800e46a <_strtod_l+0x42>
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	931d      	str	r3, [sp, #116]	; 0x74
 800e4d0:	e7c0      	b.n	800e454 <_strtod_l+0x2c>
 800e4d2:	2a2d      	cmp	r2, #45	; 0x2d
 800e4d4:	d1c9      	bne.n	800e46a <_strtod_l+0x42>
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	920e      	str	r2, [sp, #56]	; 0x38
 800e4da:	1c5a      	adds	r2, r3, #1
 800e4dc:	921d      	str	r2, [sp, #116]	; 0x74
 800e4de:	785b      	ldrb	r3, [r3, #1]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1c4      	bne.n	800e46e <_strtod_l+0x46>
 800e4e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e4e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f040 8576 	bne.w	800efdc <_strtod_l+0xbb4>
 800e4f0:	4652      	mov	r2, sl
 800e4f2:	465b      	mov	r3, fp
 800e4f4:	e7e3      	b.n	800e4be <_strtod_l+0x96>
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	e7ee      	b.n	800e4d8 <_strtod_l+0xb0>
 800e4fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e4fc:	b13a      	cbz	r2, 800e50e <_strtod_l+0xe6>
 800e4fe:	2135      	movs	r1, #53	; 0x35
 800e500:	a820      	add	r0, sp, #128	; 0x80
 800e502:	f002 ff90 	bl	8011426 <__copybits>
 800e506:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e508:	4620      	mov	r0, r4
 800e50a:	f002 fb55 	bl	8010bb8 <_Bfree>
 800e50e:	3f01      	subs	r7, #1
 800e510:	2f05      	cmp	r7, #5
 800e512:	d807      	bhi.n	800e524 <_strtod_l+0xfc>
 800e514:	e8df f007 	tbb	[pc, r7]
 800e518:	1d180b0e 	.word	0x1d180b0e
 800e51c:	030e      	.short	0x030e
 800e51e:	f04f 0b00 	mov.w	fp, #0
 800e522:	46da      	mov	sl, fp
 800e524:	0728      	lsls	r0, r5, #28
 800e526:	d5c1      	bpl.n	800e4ac <_strtod_l+0x84>
 800e528:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e52c:	e7be      	b.n	800e4ac <_strtod_l+0x84>
 800e52e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800e532:	e7f7      	b.n	800e524 <_strtod_l+0xfc>
 800e534:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800e538:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e53a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e53e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e542:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e546:	e7ed      	b.n	800e524 <_strtod_l+0xfc>
 800e548:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e6d0 <_strtod_l+0x2a8>
 800e54c:	f04f 0a00 	mov.w	sl, #0
 800e550:	e7e8      	b.n	800e524 <_strtod_l+0xfc>
 800e552:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e556:	f04f 3aff 	mov.w	sl, #4294967295
 800e55a:	e7e3      	b.n	800e524 <_strtod_l+0xfc>
 800e55c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e55e:	1c5a      	adds	r2, r3, #1
 800e560:	921d      	str	r2, [sp, #116]	; 0x74
 800e562:	785b      	ldrb	r3, [r3, #1]
 800e564:	2b30      	cmp	r3, #48	; 0x30
 800e566:	d0f9      	beq.n	800e55c <_strtod_l+0x134>
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d09f      	beq.n	800e4ac <_strtod_l+0x84>
 800e56c:	2301      	movs	r3, #1
 800e56e:	f04f 0900 	mov.w	r9, #0
 800e572:	9304      	str	r3, [sp, #16]
 800e574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e576:	930a      	str	r3, [sp, #40]	; 0x28
 800e578:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e57c:	464f      	mov	r7, r9
 800e57e:	220a      	movs	r2, #10
 800e580:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e582:	7806      	ldrb	r6, [r0, #0]
 800e584:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e588:	b2d9      	uxtb	r1, r3
 800e58a:	2909      	cmp	r1, #9
 800e58c:	d92a      	bls.n	800e5e4 <_strtod_l+0x1bc>
 800e58e:	9907      	ldr	r1, [sp, #28]
 800e590:	462a      	mov	r2, r5
 800e592:	f003 f9fc 	bl	801198e <strncmp>
 800e596:	b398      	cbz	r0, 800e600 <_strtod_l+0x1d8>
 800e598:	2000      	movs	r0, #0
 800e59a:	4633      	mov	r3, r6
 800e59c:	463d      	mov	r5, r7
 800e59e:	9007      	str	r0, [sp, #28]
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	2b65      	cmp	r3, #101	; 0x65
 800e5a4:	d001      	beq.n	800e5aa <_strtod_l+0x182>
 800e5a6:	2b45      	cmp	r3, #69	; 0x45
 800e5a8:	d118      	bne.n	800e5dc <_strtod_l+0x1b4>
 800e5aa:	b91d      	cbnz	r5, 800e5b4 <_strtod_l+0x18c>
 800e5ac:	9b04      	ldr	r3, [sp, #16]
 800e5ae:	4303      	orrs	r3, r0
 800e5b0:	d098      	beq.n	800e4e4 <_strtod_l+0xbc>
 800e5b2:	2500      	movs	r5, #0
 800e5b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e5b8:	f108 0301 	add.w	r3, r8, #1
 800e5bc:	931d      	str	r3, [sp, #116]	; 0x74
 800e5be:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e5c2:	2b2b      	cmp	r3, #43	; 0x2b
 800e5c4:	d075      	beq.n	800e6b2 <_strtod_l+0x28a>
 800e5c6:	2b2d      	cmp	r3, #45	; 0x2d
 800e5c8:	d07b      	beq.n	800e6c2 <_strtod_l+0x29a>
 800e5ca:	f04f 0c00 	mov.w	ip, #0
 800e5ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e5d2:	2909      	cmp	r1, #9
 800e5d4:	f240 8082 	bls.w	800e6dc <_strtod_l+0x2b4>
 800e5d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e5dc:	2600      	movs	r6, #0
 800e5de:	e09d      	b.n	800e71c <_strtod_l+0x2f4>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	e7c4      	b.n	800e56e <_strtod_l+0x146>
 800e5e4:	2f08      	cmp	r7, #8
 800e5e6:	bfd8      	it	le
 800e5e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e5ea:	f100 0001 	add.w	r0, r0, #1
 800e5ee:	bfda      	itte	le
 800e5f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e5f4:	9309      	strle	r3, [sp, #36]	; 0x24
 800e5f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e5fa:	3701      	adds	r7, #1
 800e5fc:	901d      	str	r0, [sp, #116]	; 0x74
 800e5fe:	e7bf      	b.n	800e580 <_strtod_l+0x158>
 800e600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e602:	195a      	adds	r2, r3, r5
 800e604:	921d      	str	r2, [sp, #116]	; 0x74
 800e606:	5d5b      	ldrb	r3, [r3, r5]
 800e608:	2f00      	cmp	r7, #0
 800e60a:	d037      	beq.n	800e67c <_strtod_l+0x254>
 800e60c:	9007      	str	r0, [sp, #28]
 800e60e:	463d      	mov	r5, r7
 800e610:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e614:	2a09      	cmp	r2, #9
 800e616:	d912      	bls.n	800e63e <_strtod_l+0x216>
 800e618:	2201      	movs	r2, #1
 800e61a:	e7c2      	b.n	800e5a2 <_strtod_l+0x17a>
 800e61c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e61e:	1c5a      	adds	r2, r3, #1
 800e620:	921d      	str	r2, [sp, #116]	; 0x74
 800e622:	785b      	ldrb	r3, [r3, #1]
 800e624:	3001      	adds	r0, #1
 800e626:	2b30      	cmp	r3, #48	; 0x30
 800e628:	d0f8      	beq.n	800e61c <_strtod_l+0x1f4>
 800e62a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e62e:	2a08      	cmp	r2, #8
 800e630:	f200 84db 	bhi.w	800efea <_strtod_l+0xbc2>
 800e634:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e636:	9007      	str	r0, [sp, #28]
 800e638:	2000      	movs	r0, #0
 800e63a:	920a      	str	r2, [sp, #40]	; 0x28
 800e63c:	4605      	mov	r5, r0
 800e63e:	3b30      	subs	r3, #48	; 0x30
 800e640:	f100 0201 	add.w	r2, r0, #1
 800e644:	d014      	beq.n	800e670 <_strtod_l+0x248>
 800e646:	9907      	ldr	r1, [sp, #28]
 800e648:	4411      	add	r1, r2
 800e64a:	9107      	str	r1, [sp, #28]
 800e64c:	462a      	mov	r2, r5
 800e64e:	eb00 0e05 	add.w	lr, r0, r5
 800e652:	210a      	movs	r1, #10
 800e654:	4572      	cmp	r2, lr
 800e656:	d113      	bne.n	800e680 <_strtod_l+0x258>
 800e658:	182a      	adds	r2, r5, r0
 800e65a:	2a08      	cmp	r2, #8
 800e65c:	f105 0501 	add.w	r5, r5, #1
 800e660:	4405      	add	r5, r0
 800e662:	dc1c      	bgt.n	800e69e <_strtod_l+0x276>
 800e664:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e666:	220a      	movs	r2, #10
 800e668:	fb02 3301 	mla	r3, r2, r1, r3
 800e66c:	9309      	str	r3, [sp, #36]	; 0x24
 800e66e:	2200      	movs	r2, #0
 800e670:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e672:	1c59      	adds	r1, r3, #1
 800e674:	911d      	str	r1, [sp, #116]	; 0x74
 800e676:	785b      	ldrb	r3, [r3, #1]
 800e678:	4610      	mov	r0, r2
 800e67a:	e7c9      	b.n	800e610 <_strtod_l+0x1e8>
 800e67c:	4638      	mov	r0, r7
 800e67e:	e7d2      	b.n	800e626 <_strtod_l+0x1fe>
 800e680:	2a08      	cmp	r2, #8
 800e682:	dc04      	bgt.n	800e68e <_strtod_l+0x266>
 800e684:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e686:	434e      	muls	r6, r1
 800e688:	9609      	str	r6, [sp, #36]	; 0x24
 800e68a:	3201      	adds	r2, #1
 800e68c:	e7e2      	b.n	800e654 <_strtod_l+0x22c>
 800e68e:	f102 0c01 	add.w	ip, r2, #1
 800e692:	f1bc 0f10 	cmp.w	ip, #16
 800e696:	bfd8      	it	le
 800e698:	fb01 f909 	mulle.w	r9, r1, r9
 800e69c:	e7f5      	b.n	800e68a <_strtod_l+0x262>
 800e69e:	2d10      	cmp	r5, #16
 800e6a0:	bfdc      	itt	le
 800e6a2:	220a      	movle	r2, #10
 800e6a4:	fb02 3909 	mlale	r9, r2, r9, r3
 800e6a8:	e7e1      	b.n	800e66e <_strtod_l+0x246>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9307      	str	r3, [sp, #28]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	e77c      	b.n	800e5ac <_strtod_l+0x184>
 800e6b2:	f04f 0c00 	mov.w	ip, #0
 800e6b6:	f108 0302 	add.w	r3, r8, #2
 800e6ba:	931d      	str	r3, [sp, #116]	; 0x74
 800e6bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e6c0:	e785      	b.n	800e5ce <_strtod_l+0x1a6>
 800e6c2:	f04f 0c01 	mov.w	ip, #1
 800e6c6:	e7f6      	b.n	800e6b6 <_strtod_l+0x28e>
 800e6c8:	0801366c 	.word	0x0801366c
 800e6cc:	080133b8 	.word	0x080133b8
 800e6d0:	7ff00000 	.word	0x7ff00000
 800e6d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6d6:	1c59      	adds	r1, r3, #1
 800e6d8:	911d      	str	r1, [sp, #116]	; 0x74
 800e6da:	785b      	ldrb	r3, [r3, #1]
 800e6dc:	2b30      	cmp	r3, #48	; 0x30
 800e6de:	d0f9      	beq.n	800e6d4 <_strtod_l+0x2ac>
 800e6e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e6e4:	2908      	cmp	r1, #8
 800e6e6:	f63f af79 	bhi.w	800e5dc <_strtod_l+0x1b4>
 800e6ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e6ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6f0:	9308      	str	r3, [sp, #32]
 800e6f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6f4:	1c59      	adds	r1, r3, #1
 800e6f6:	911d      	str	r1, [sp, #116]	; 0x74
 800e6f8:	785b      	ldrb	r3, [r3, #1]
 800e6fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e6fe:	2e09      	cmp	r6, #9
 800e700:	d937      	bls.n	800e772 <_strtod_l+0x34a>
 800e702:	9e08      	ldr	r6, [sp, #32]
 800e704:	1b89      	subs	r1, r1, r6
 800e706:	2908      	cmp	r1, #8
 800e708:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e70c:	dc02      	bgt.n	800e714 <_strtod_l+0x2ec>
 800e70e:	4576      	cmp	r6, lr
 800e710:	bfa8      	it	ge
 800e712:	4676      	movge	r6, lr
 800e714:	f1bc 0f00 	cmp.w	ip, #0
 800e718:	d000      	beq.n	800e71c <_strtod_l+0x2f4>
 800e71a:	4276      	negs	r6, r6
 800e71c:	2d00      	cmp	r5, #0
 800e71e:	d14f      	bne.n	800e7c0 <_strtod_l+0x398>
 800e720:	9904      	ldr	r1, [sp, #16]
 800e722:	4301      	orrs	r1, r0
 800e724:	f47f aec2 	bne.w	800e4ac <_strtod_l+0x84>
 800e728:	2a00      	cmp	r2, #0
 800e72a:	f47f aedb 	bne.w	800e4e4 <_strtod_l+0xbc>
 800e72e:	2b69      	cmp	r3, #105	; 0x69
 800e730:	d027      	beq.n	800e782 <_strtod_l+0x35a>
 800e732:	dc24      	bgt.n	800e77e <_strtod_l+0x356>
 800e734:	2b49      	cmp	r3, #73	; 0x49
 800e736:	d024      	beq.n	800e782 <_strtod_l+0x35a>
 800e738:	2b4e      	cmp	r3, #78	; 0x4e
 800e73a:	f47f aed3 	bne.w	800e4e4 <_strtod_l+0xbc>
 800e73e:	499e      	ldr	r1, [pc, #632]	; (800e9b8 <_strtod_l+0x590>)
 800e740:	a81d      	add	r0, sp, #116	; 0x74
 800e742:	f002 f8c3 	bl	80108cc <__match>
 800e746:	2800      	cmp	r0, #0
 800e748:	f43f aecc 	beq.w	800e4e4 <_strtod_l+0xbc>
 800e74c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	2b28      	cmp	r3, #40	; 0x28
 800e752:	d12d      	bne.n	800e7b0 <_strtod_l+0x388>
 800e754:	4999      	ldr	r1, [pc, #612]	; (800e9bc <_strtod_l+0x594>)
 800e756:	aa20      	add	r2, sp, #128	; 0x80
 800e758:	a81d      	add	r0, sp, #116	; 0x74
 800e75a:	f002 f8cb 	bl	80108f4 <__hexnan>
 800e75e:	2805      	cmp	r0, #5
 800e760:	d126      	bne.n	800e7b0 <_strtod_l+0x388>
 800e762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e764:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e768:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e76c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e770:	e69c      	b.n	800e4ac <_strtod_l+0x84>
 800e772:	210a      	movs	r1, #10
 800e774:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e778:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e77c:	e7b9      	b.n	800e6f2 <_strtod_l+0x2ca>
 800e77e:	2b6e      	cmp	r3, #110	; 0x6e
 800e780:	e7db      	b.n	800e73a <_strtod_l+0x312>
 800e782:	498f      	ldr	r1, [pc, #572]	; (800e9c0 <_strtod_l+0x598>)
 800e784:	a81d      	add	r0, sp, #116	; 0x74
 800e786:	f002 f8a1 	bl	80108cc <__match>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	f43f aeaa 	beq.w	800e4e4 <_strtod_l+0xbc>
 800e790:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e792:	498c      	ldr	r1, [pc, #560]	; (800e9c4 <_strtod_l+0x59c>)
 800e794:	3b01      	subs	r3, #1
 800e796:	a81d      	add	r0, sp, #116	; 0x74
 800e798:	931d      	str	r3, [sp, #116]	; 0x74
 800e79a:	f002 f897 	bl	80108cc <__match>
 800e79e:	b910      	cbnz	r0, 800e7a6 <_strtod_l+0x37e>
 800e7a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	931d      	str	r3, [sp, #116]	; 0x74
 800e7a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e9d4 <_strtod_l+0x5ac>
 800e7aa:	f04f 0a00 	mov.w	sl, #0
 800e7ae:	e67d      	b.n	800e4ac <_strtod_l+0x84>
 800e7b0:	4885      	ldr	r0, [pc, #532]	; (800e9c8 <_strtod_l+0x5a0>)
 800e7b2:	f003 f891 	bl	80118d8 <nan>
 800e7b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e7ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e7be:	e675      	b.n	800e4ac <_strtod_l+0x84>
 800e7c0:	9b07      	ldr	r3, [sp, #28]
 800e7c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7c4:	1af3      	subs	r3, r6, r3
 800e7c6:	2f00      	cmp	r7, #0
 800e7c8:	bf08      	it	eq
 800e7ca:	462f      	moveq	r7, r5
 800e7cc:	2d10      	cmp	r5, #16
 800e7ce:	9308      	str	r3, [sp, #32]
 800e7d0:	46a8      	mov	r8, r5
 800e7d2:	bfa8      	it	ge
 800e7d4:	f04f 0810 	movge.w	r8, #16
 800e7d8:	f7f1 febc 	bl	8000554 <__aeabi_ui2d>
 800e7dc:	2d09      	cmp	r5, #9
 800e7de:	4682      	mov	sl, r0
 800e7e0:	468b      	mov	fp, r1
 800e7e2:	dd13      	ble.n	800e80c <_strtod_l+0x3e4>
 800e7e4:	4b79      	ldr	r3, [pc, #484]	; (800e9cc <_strtod_l+0x5a4>)
 800e7e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e7ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e7ee:	f7f1 ff2b 	bl	8000648 <__aeabi_dmul>
 800e7f2:	4682      	mov	sl, r0
 800e7f4:	4648      	mov	r0, r9
 800e7f6:	468b      	mov	fp, r1
 800e7f8:	f7f1 feac 	bl	8000554 <__aeabi_ui2d>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	4650      	mov	r0, sl
 800e802:	4659      	mov	r1, fp
 800e804:	f7f1 fd6a 	bl	80002dc <__adddf3>
 800e808:	4682      	mov	sl, r0
 800e80a:	468b      	mov	fp, r1
 800e80c:	2d0f      	cmp	r5, #15
 800e80e:	dc38      	bgt.n	800e882 <_strtod_l+0x45a>
 800e810:	9b08      	ldr	r3, [sp, #32]
 800e812:	2b00      	cmp	r3, #0
 800e814:	f43f ae4a 	beq.w	800e4ac <_strtod_l+0x84>
 800e818:	dd24      	ble.n	800e864 <_strtod_l+0x43c>
 800e81a:	2b16      	cmp	r3, #22
 800e81c:	dc0b      	bgt.n	800e836 <_strtod_l+0x40e>
 800e81e:	4d6b      	ldr	r5, [pc, #428]	; (800e9cc <_strtod_l+0x5a4>)
 800e820:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e824:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e828:	4652      	mov	r2, sl
 800e82a:	465b      	mov	r3, fp
 800e82c:	f7f1 ff0c 	bl	8000648 <__aeabi_dmul>
 800e830:	4682      	mov	sl, r0
 800e832:	468b      	mov	fp, r1
 800e834:	e63a      	b.n	800e4ac <_strtod_l+0x84>
 800e836:	9a08      	ldr	r2, [sp, #32]
 800e838:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e83c:	4293      	cmp	r3, r2
 800e83e:	db20      	blt.n	800e882 <_strtod_l+0x45a>
 800e840:	4c62      	ldr	r4, [pc, #392]	; (800e9cc <_strtod_l+0x5a4>)
 800e842:	f1c5 050f 	rsb	r5, r5, #15
 800e846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e84a:	4652      	mov	r2, sl
 800e84c:	465b      	mov	r3, fp
 800e84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e852:	f7f1 fef9 	bl	8000648 <__aeabi_dmul>
 800e856:	9b08      	ldr	r3, [sp, #32]
 800e858:	1b5d      	subs	r5, r3, r5
 800e85a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e85e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e862:	e7e3      	b.n	800e82c <_strtod_l+0x404>
 800e864:	9b08      	ldr	r3, [sp, #32]
 800e866:	3316      	adds	r3, #22
 800e868:	db0b      	blt.n	800e882 <_strtod_l+0x45a>
 800e86a:	9b07      	ldr	r3, [sp, #28]
 800e86c:	4a57      	ldr	r2, [pc, #348]	; (800e9cc <_strtod_l+0x5a4>)
 800e86e:	1b9e      	subs	r6, r3, r6
 800e870:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e874:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e878:	4650      	mov	r0, sl
 800e87a:	4659      	mov	r1, fp
 800e87c:	f7f2 f80e 	bl	800089c <__aeabi_ddiv>
 800e880:	e7d6      	b.n	800e830 <_strtod_l+0x408>
 800e882:	9b08      	ldr	r3, [sp, #32]
 800e884:	eba5 0808 	sub.w	r8, r5, r8
 800e888:	4498      	add	r8, r3
 800e88a:	f1b8 0f00 	cmp.w	r8, #0
 800e88e:	dd71      	ble.n	800e974 <_strtod_l+0x54c>
 800e890:	f018 030f 	ands.w	r3, r8, #15
 800e894:	d00a      	beq.n	800e8ac <_strtod_l+0x484>
 800e896:	494d      	ldr	r1, [pc, #308]	; (800e9cc <_strtod_l+0x5a4>)
 800e898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e89c:	4652      	mov	r2, sl
 800e89e:	465b      	mov	r3, fp
 800e8a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8a4:	f7f1 fed0 	bl	8000648 <__aeabi_dmul>
 800e8a8:	4682      	mov	sl, r0
 800e8aa:	468b      	mov	fp, r1
 800e8ac:	f038 080f 	bics.w	r8, r8, #15
 800e8b0:	d04d      	beq.n	800e94e <_strtod_l+0x526>
 800e8b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e8b6:	dd22      	ble.n	800e8fe <_strtod_l+0x4d6>
 800e8b8:	2500      	movs	r5, #0
 800e8ba:	462e      	mov	r6, r5
 800e8bc:	9509      	str	r5, [sp, #36]	; 0x24
 800e8be:	9507      	str	r5, [sp, #28]
 800e8c0:	2322      	movs	r3, #34	; 0x22
 800e8c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e9d4 <_strtod_l+0x5ac>
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	f04f 0a00 	mov.w	sl, #0
 800e8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f43f adec 	beq.w	800e4ac <_strtod_l+0x84>
 800e8d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f002 f96e 	bl	8010bb8 <_Bfree>
 800e8dc:	9907      	ldr	r1, [sp, #28]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f002 f96a 	bl	8010bb8 <_Bfree>
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	f002 f966 	bl	8010bb8 <_Bfree>
 800e8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f002 f962 	bl	8010bb8 <_Bfree>
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f002 f95e 	bl	8010bb8 <_Bfree>
 800e8fc:	e5d6      	b.n	800e4ac <_strtod_l+0x84>
 800e8fe:	2300      	movs	r3, #0
 800e900:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e904:	4650      	mov	r0, sl
 800e906:	4659      	mov	r1, fp
 800e908:	4699      	mov	r9, r3
 800e90a:	f1b8 0f01 	cmp.w	r8, #1
 800e90e:	dc21      	bgt.n	800e954 <_strtod_l+0x52c>
 800e910:	b10b      	cbz	r3, 800e916 <_strtod_l+0x4ee>
 800e912:	4682      	mov	sl, r0
 800e914:	468b      	mov	fp, r1
 800e916:	4b2e      	ldr	r3, [pc, #184]	; (800e9d0 <_strtod_l+0x5a8>)
 800e918:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e91c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e920:	4652      	mov	r2, sl
 800e922:	465b      	mov	r3, fp
 800e924:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e928:	f7f1 fe8e 	bl	8000648 <__aeabi_dmul>
 800e92c:	4b29      	ldr	r3, [pc, #164]	; (800e9d4 <_strtod_l+0x5ac>)
 800e92e:	460a      	mov	r2, r1
 800e930:	400b      	ands	r3, r1
 800e932:	4929      	ldr	r1, [pc, #164]	; (800e9d8 <_strtod_l+0x5b0>)
 800e934:	428b      	cmp	r3, r1
 800e936:	4682      	mov	sl, r0
 800e938:	d8be      	bhi.n	800e8b8 <_strtod_l+0x490>
 800e93a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e93e:	428b      	cmp	r3, r1
 800e940:	bf86      	itte	hi
 800e942:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e9dc <_strtod_l+0x5b4>
 800e946:	f04f 3aff 	movhi.w	sl, #4294967295
 800e94a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e94e:	2300      	movs	r3, #0
 800e950:	9304      	str	r3, [sp, #16]
 800e952:	e081      	b.n	800ea58 <_strtod_l+0x630>
 800e954:	f018 0f01 	tst.w	r8, #1
 800e958:	d007      	beq.n	800e96a <_strtod_l+0x542>
 800e95a:	4b1d      	ldr	r3, [pc, #116]	; (800e9d0 <_strtod_l+0x5a8>)
 800e95c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	f7f1 fe70 	bl	8000648 <__aeabi_dmul>
 800e968:	2301      	movs	r3, #1
 800e96a:	f109 0901 	add.w	r9, r9, #1
 800e96e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e972:	e7ca      	b.n	800e90a <_strtod_l+0x4e2>
 800e974:	d0eb      	beq.n	800e94e <_strtod_l+0x526>
 800e976:	f1c8 0800 	rsb	r8, r8, #0
 800e97a:	f018 020f 	ands.w	r2, r8, #15
 800e97e:	d00a      	beq.n	800e996 <_strtod_l+0x56e>
 800e980:	4b12      	ldr	r3, [pc, #72]	; (800e9cc <_strtod_l+0x5a4>)
 800e982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e986:	4650      	mov	r0, sl
 800e988:	4659      	mov	r1, fp
 800e98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98e:	f7f1 ff85 	bl	800089c <__aeabi_ddiv>
 800e992:	4682      	mov	sl, r0
 800e994:	468b      	mov	fp, r1
 800e996:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e99a:	d0d8      	beq.n	800e94e <_strtod_l+0x526>
 800e99c:	f1b8 0f1f 	cmp.w	r8, #31
 800e9a0:	dd1e      	ble.n	800e9e0 <_strtod_l+0x5b8>
 800e9a2:	2500      	movs	r5, #0
 800e9a4:	462e      	mov	r6, r5
 800e9a6:	9509      	str	r5, [sp, #36]	; 0x24
 800e9a8:	9507      	str	r5, [sp, #28]
 800e9aa:	2322      	movs	r3, #34	; 0x22
 800e9ac:	f04f 0a00 	mov.w	sl, #0
 800e9b0:	f04f 0b00 	mov.w	fp, #0
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	e789      	b.n	800e8cc <_strtod_l+0x4a4>
 800e9b8:	08013391 	.word	0x08013391
 800e9bc:	080133cc 	.word	0x080133cc
 800e9c0:	08013389 	.word	0x08013389
 800e9c4:	0801350c 	.word	0x0801350c
 800e9c8:	08013828 	.word	0x08013828
 800e9cc:	08013708 	.word	0x08013708
 800e9d0:	080136e0 	.word	0x080136e0
 800e9d4:	7ff00000 	.word	0x7ff00000
 800e9d8:	7ca00000 	.word	0x7ca00000
 800e9dc:	7fefffff 	.word	0x7fefffff
 800e9e0:	f018 0310 	ands.w	r3, r8, #16
 800e9e4:	bf18      	it	ne
 800e9e6:	236a      	movne	r3, #106	; 0x6a
 800e9e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800eda0 <_strtod_l+0x978>
 800e9ec:	9304      	str	r3, [sp, #16]
 800e9ee:	4650      	mov	r0, sl
 800e9f0:	4659      	mov	r1, fp
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f018 0f01 	tst.w	r8, #1
 800e9f8:	d004      	beq.n	800ea04 <_strtod_l+0x5dc>
 800e9fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e9fe:	f7f1 fe23 	bl	8000648 <__aeabi_dmul>
 800ea02:	2301      	movs	r3, #1
 800ea04:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ea08:	f109 0908 	add.w	r9, r9, #8
 800ea0c:	d1f2      	bne.n	800e9f4 <_strtod_l+0x5cc>
 800ea0e:	b10b      	cbz	r3, 800ea14 <_strtod_l+0x5ec>
 800ea10:	4682      	mov	sl, r0
 800ea12:	468b      	mov	fp, r1
 800ea14:	9b04      	ldr	r3, [sp, #16]
 800ea16:	b1bb      	cbz	r3, 800ea48 <_strtod_l+0x620>
 800ea18:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ea1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	4659      	mov	r1, fp
 800ea24:	dd10      	ble.n	800ea48 <_strtod_l+0x620>
 800ea26:	2b1f      	cmp	r3, #31
 800ea28:	f340 8128 	ble.w	800ec7c <_strtod_l+0x854>
 800ea2c:	2b34      	cmp	r3, #52	; 0x34
 800ea2e:	bfde      	ittt	le
 800ea30:	3b20      	suble	r3, #32
 800ea32:	f04f 32ff 	movle.w	r2, #4294967295
 800ea36:	fa02 f303 	lslle.w	r3, r2, r3
 800ea3a:	f04f 0a00 	mov.w	sl, #0
 800ea3e:	bfcc      	ite	gt
 800ea40:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ea44:	ea03 0b01 	andle.w	fp, r3, r1
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	4650      	mov	r0, sl
 800ea4e:	4659      	mov	r1, fp
 800ea50:	f7f2 f862 	bl	8000b18 <__aeabi_dcmpeq>
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d1a4      	bne.n	800e9a2 <_strtod_l+0x57a>
 800ea58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5a:	9300      	str	r3, [sp, #0]
 800ea5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ea5e:	462b      	mov	r3, r5
 800ea60:	463a      	mov	r2, r7
 800ea62:	4620      	mov	r0, r4
 800ea64:	f002 f914 	bl	8010c90 <__s2b>
 800ea68:	9009      	str	r0, [sp, #36]	; 0x24
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	f43f af24 	beq.w	800e8b8 <_strtod_l+0x490>
 800ea70:	9b07      	ldr	r3, [sp, #28]
 800ea72:	1b9e      	subs	r6, r3, r6
 800ea74:	9b08      	ldr	r3, [sp, #32]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	bfb4      	ite	lt
 800ea7a:	4633      	movlt	r3, r6
 800ea7c:	2300      	movge	r3, #0
 800ea7e:	9310      	str	r3, [sp, #64]	; 0x40
 800ea80:	9b08      	ldr	r3, [sp, #32]
 800ea82:	2500      	movs	r5, #0
 800ea84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ea88:	9318      	str	r3, [sp, #96]	; 0x60
 800ea8a:	462e      	mov	r6, r5
 800ea8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea8e:	4620      	mov	r0, r4
 800ea90:	6859      	ldr	r1, [r3, #4]
 800ea92:	f002 f851 	bl	8010b38 <_Balloc>
 800ea96:	9007      	str	r0, [sp, #28]
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	f43f af11 	beq.w	800e8c0 <_strtod_l+0x498>
 800ea9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaa0:	691a      	ldr	r2, [r3, #16]
 800eaa2:	3202      	adds	r2, #2
 800eaa4:	f103 010c 	add.w	r1, r3, #12
 800eaa8:	0092      	lsls	r2, r2, #2
 800eaaa:	300c      	adds	r0, #12
 800eaac:	f7fe ff92 	bl	800d9d4 <memcpy>
 800eab0:	ec4b ab10 	vmov	d0, sl, fp
 800eab4:	aa20      	add	r2, sp, #128	; 0x80
 800eab6:	a91f      	add	r1, sp, #124	; 0x7c
 800eab8:	4620      	mov	r0, r4
 800eaba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800eabe:	f002 fc23 	bl	8011308 <__d2b>
 800eac2:	901e      	str	r0, [sp, #120]	; 0x78
 800eac4:	2800      	cmp	r0, #0
 800eac6:	f43f aefb 	beq.w	800e8c0 <_strtod_l+0x498>
 800eaca:	2101      	movs	r1, #1
 800eacc:	4620      	mov	r0, r4
 800eace:	f002 f979 	bl	8010dc4 <__i2b>
 800ead2:	4606      	mov	r6, r0
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f43f aef3 	beq.w	800e8c0 <_strtod_l+0x498>
 800eada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eadc:	9904      	ldr	r1, [sp, #16]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	bfab      	itete	ge
 800eae2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800eae4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800eae6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800eae8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800eaec:	bfac      	ite	ge
 800eaee:	eb03 0902 	addge.w	r9, r3, r2
 800eaf2:	1ad7      	sublt	r7, r2, r3
 800eaf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eaf6:	eba3 0801 	sub.w	r8, r3, r1
 800eafa:	4490      	add	r8, r2
 800eafc:	4ba3      	ldr	r3, [pc, #652]	; (800ed8c <_strtod_l+0x964>)
 800eafe:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb02:	4598      	cmp	r8, r3
 800eb04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb08:	f280 80cc 	bge.w	800eca4 <_strtod_l+0x87c>
 800eb0c:	eba3 0308 	sub.w	r3, r3, r8
 800eb10:	2b1f      	cmp	r3, #31
 800eb12:	eba2 0203 	sub.w	r2, r2, r3
 800eb16:	f04f 0101 	mov.w	r1, #1
 800eb1a:	f300 80b6 	bgt.w	800ec8a <_strtod_l+0x862>
 800eb1e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb22:	9311      	str	r3, [sp, #68]	; 0x44
 800eb24:	2300      	movs	r3, #0
 800eb26:	930c      	str	r3, [sp, #48]	; 0x30
 800eb28:	eb09 0802 	add.w	r8, r9, r2
 800eb2c:	9b04      	ldr	r3, [sp, #16]
 800eb2e:	45c1      	cmp	r9, r8
 800eb30:	4417      	add	r7, r2
 800eb32:	441f      	add	r7, r3
 800eb34:	464b      	mov	r3, r9
 800eb36:	bfa8      	it	ge
 800eb38:	4643      	movge	r3, r8
 800eb3a:	42bb      	cmp	r3, r7
 800eb3c:	bfa8      	it	ge
 800eb3e:	463b      	movge	r3, r7
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	bfc2      	ittt	gt
 800eb44:	eba8 0803 	subgt.w	r8, r8, r3
 800eb48:	1aff      	subgt	r7, r7, r3
 800eb4a:	eba9 0903 	subgt.w	r9, r9, r3
 800eb4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dd17      	ble.n	800eb84 <_strtod_l+0x75c>
 800eb54:	4631      	mov	r1, r6
 800eb56:	461a      	mov	r2, r3
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f002 f9ef 	bl	8010f3c <__pow5mult>
 800eb5e:	4606      	mov	r6, r0
 800eb60:	2800      	cmp	r0, #0
 800eb62:	f43f aead 	beq.w	800e8c0 <_strtod_l+0x498>
 800eb66:	4601      	mov	r1, r0
 800eb68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f002 f940 	bl	8010df0 <__multiply>
 800eb70:	900f      	str	r0, [sp, #60]	; 0x3c
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f43f aea4 	beq.w	800e8c0 <_strtod_l+0x498>
 800eb78:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f002 f81c 	bl	8010bb8 <_Bfree>
 800eb80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb82:	931e      	str	r3, [sp, #120]	; 0x78
 800eb84:	f1b8 0f00 	cmp.w	r8, #0
 800eb88:	f300 8091 	bgt.w	800ecae <_strtod_l+0x886>
 800eb8c:	9b08      	ldr	r3, [sp, #32]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	dd08      	ble.n	800eba4 <_strtod_l+0x77c>
 800eb92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800eb94:	9907      	ldr	r1, [sp, #28]
 800eb96:	4620      	mov	r0, r4
 800eb98:	f002 f9d0 	bl	8010f3c <__pow5mult>
 800eb9c:	9007      	str	r0, [sp, #28]
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	f43f ae8e 	beq.w	800e8c0 <_strtod_l+0x498>
 800eba4:	2f00      	cmp	r7, #0
 800eba6:	dd08      	ble.n	800ebba <_strtod_l+0x792>
 800eba8:	9907      	ldr	r1, [sp, #28]
 800ebaa:	463a      	mov	r2, r7
 800ebac:	4620      	mov	r0, r4
 800ebae:	f002 fa1f 	bl	8010ff0 <__lshift>
 800ebb2:	9007      	str	r0, [sp, #28]
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	f43f ae83 	beq.w	800e8c0 <_strtod_l+0x498>
 800ebba:	f1b9 0f00 	cmp.w	r9, #0
 800ebbe:	dd08      	ble.n	800ebd2 <_strtod_l+0x7aa>
 800ebc0:	4631      	mov	r1, r6
 800ebc2:	464a      	mov	r2, r9
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f002 fa13 	bl	8010ff0 <__lshift>
 800ebca:	4606      	mov	r6, r0
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	f43f ae77 	beq.w	800e8c0 <_strtod_l+0x498>
 800ebd2:	9a07      	ldr	r2, [sp, #28]
 800ebd4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f002 fa92 	bl	8011100 <__mdiff>
 800ebdc:	4605      	mov	r5, r0
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	f43f ae6e 	beq.w	800e8c0 <_strtod_l+0x498>
 800ebe4:	68c3      	ldr	r3, [r0, #12]
 800ebe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebe8:	2300      	movs	r3, #0
 800ebea:	60c3      	str	r3, [r0, #12]
 800ebec:	4631      	mov	r1, r6
 800ebee:	f002 fa6b 	bl	80110c8 <__mcmp>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	da65      	bge.n	800ecc2 <_strtod_l+0x89a>
 800ebf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebf8:	ea53 030a 	orrs.w	r3, r3, sl
 800ebfc:	f040 8087 	bne.w	800ed0e <_strtod_l+0x8e6>
 800ec00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f040 8082 	bne.w	800ed0e <_strtod_l+0x8e6>
 800ec0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec0e:	0d1b      	lsrs	r3, r3, #20
 800ec10:	051b      	lsls	r3, r3, #20
 800ec12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec16:	d97a      	bls.n	800ed0e <_strtod_l+0x8e6>
 800ec18:	696b      	ldr	r3, [r5, #20]
 800ec1a:	b913      	cbnz	r3, 800ec22 <_strtod_l+0x7fa>
 800ec1c:	692b      	ldr	r3, [r5, #16]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	dd75      	ble.n	800ed0e <_strtod_l+0x8e6>
 800ec22:	4629      	mov	r1, r5
 800ec24:	2201      	movs	r2, #1
 800ec26:	4620      	mov	r0, r4
 800ec28:	f002 f9e2 	bl	8010ff0 <__lshift>
 800ec2c:	4631      	mov	r1, r6
 800ec2e:	4605      	mov	r5, r0
 800ec30:	f002 fa4a 	bl	80110c8 <__mcmp>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	dd6a      	ble.n	800ed0e <_strtod_l+0x8e6>
 800ec38:	9904      	ldr	r1, [sp, #16]
 800ec3a:	4a55      	ldr	r2, [pc, #340]	; (800ed90 <_strtod_l+0x968>)
 800ec3c:	465b      	mov	r3, fp
 800ec3e:	2900      	cmp	r1, #0
 800ec40:	f000 8085 	beq.w	800ed4e <_strtod_l+0x926>
 800ec44:	ea02 010b 	and.w	r1, r2, fp
 800ec48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ec4c:	dc7f      	bgt.n	800ed4e <_strtod_l+0x926>
 800ec4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ec52:	f77f aeaa 	ble.w	800e9aa <_strtod_l+0x582>
 800ec56:	4a4f      	ldr	r2, [pc, #316]	; (800ed94 <_strtod_l+0x96c>)
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ec5e:	4650      	mov	r0, sl
 800ec60:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ec64:	4659      	mov	r1, fp
 800ec66:	f7f1 fcef 	bl	8000648 <__aeabi_dmul>
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4303      	orrs	r3, r0
 800ec6e:	bf08      	it	eq
 800ec70:	2322      	moveq	r3, #34	; 0x22
 800ec72:	4682      	mov	sl, r0
 800ec74:	468b      	mov	fp, r1
 800ec76:	bf08      	it	eq
 800ec78:	6023      	streq	r3, [r4, #0]
 800ec7a:	e62b      	b.n	800e8d4 <_strtod_l+0x4ac>
 800ec7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec80:	fa02 f303 	lsl.w	r3, r2, r3
 800ec84:	ea03 0a0a 	and.w	sl, r3, sl
 800ec88:	e6de      	b.n	800ea48 <_strtod_l+0x620>
 800ec8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ec8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ec92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ec96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ec9a:	fa01 f308 	lsl.w	r3, r1, r8
 800ec9e:	930c      	str	r3, [sp, #48]	; 0x30
 800eca0:	9111      	str	r1, [sp, #68]	; 0x44
 800eca2:	e741      	b.n	800eb28 <_strtod_l+0x700>
 800eca4:	2300      	movs	r3, #0
 800eca6:	930c      	str	r3, [sp, #48]	; 0x30
 800eca8:	2301      	movs	r3, #1
 800ecaa:	9311      	str	r3, [sp, #68]	; 0x44
 800ecac:	e73c      	b.n	800eb28 <_strtod_l+0x700>
 800ecae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ecb0:	4642      	mov	r2, r8
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f002 f99c 	bl	8010ff0 <__lshift>
 800ecb8:	901e      	str	r0, [sp, #120]	; 0x78
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	f47f af66 	bne.w	800eb8c <_strtod_l+0x764>
 800ecc0:	e5fe      	b.n	800e8c0 <_strtod_l+0x498>
 800ecc2:	465f      	mov	r7, fp
 800ecc4:	d16e      	bne.n	800eda4 <_strtod_l+0x97c>
 800ecc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ecc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eccc:	b342      	cbz	r2, 800ed20 <_strtod_l+0x8f8>
 800ecce:	4a32      	ldr	r2, [pc, #200]	; (800ed98 <_strtod_l+0x970>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d128      	bne.n	800ed26 <_strtod_l+0x8fe>
 800ecd4:	9b04      	ldr	r3, [sp, #16]
 800ecd6:	4650      	mov	r0, sl
 800ecd8:	b1eb      	cbz	r3, 800ed16 <_strtod_l+0x8ee>
 800ecda:	4a2d      	ldr	r2, [pc, #180]	; (800ed90 <_strtod_l+0x968>)
 800ecdc:	403a      	ands	r2, r7
 800ecde:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ece2:	f04f 31ff 	mov.w	r1, #4294967295
 800ece6:	d819      	bhi.n	800ed1c <_strtod_l+0x8f4>
 800ece8:	0d12      	lsrs	r2, r2, #20
 800ecea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ecee:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf2:	4298      	cmp	r0, r3
 800ecf4:	d117      	bne.n	800ed26 <_strtod_l+0x8fe>
 800ecf6:	4b29      	ldr	r3, [pc, #164]	; (800ed9c <_strtod_l+0x974>)
 800ecf8:	429f      	cmp	r7, r3
 800ecfa:	d102      	bne.n	800ed02 <_strtod_l+0x8da>
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	f43f addf 	beq.w	800e8c0 <_strtod_l+0x498>
 800ed02:	4b23      	ldr	r3, [pc, #140]	; (800ed90 <_strtod_l+0x968>)
 800ed04:	403b      	ands	r3, r7
 800ed06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ed0a:	f04f 0a00 	mov.w	sl, #0
 800ed0e:	9b04      	ldr	r3, [sp, #16]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1a0      	bne.n	800ec56 <_strtod_l+0x82e>
 800ed14:	e5de      	b.n	800e8d4 <_strtod_l+0x4ac>
 800ed16:	f04f 33ff 	mov.w	r3, #4294967295
 800ed1a:	e7ea      	b.n	800ecf2 <_strtod_l+0x8ca>
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	e7e8      	b.n	800ecf2 <_strtod_l+0x8ca>
 800ed20:	ea53 030a 	orrs.w	r3, r3, sl
 800ed24:	d088      	beq.n	800ec38 <_strtod_l+0x810>
 800ed26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed28:	b1db      	cbz	r3, 800ed62 <_strtod_l+0x93a>
 800ed2a:	423b      	tst	r3, r7
 800ed2c:	d0ef      	beq.n	800ed0e <_strtod_l+0x8e6>
 800ed2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed30:	9a04      	ldr	r2, [sp, #16]
 800ed32:	4650      	mov	r0, sl
 800ed34:	4659      	mov	r1, fp
 800ed36:	b1c3      	cbz	r3, 800ed6a <_strtod_l+0x942>
 800ed38:	f7ff fb5a 	bl	800e3f0 <sulp>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	460b      	mov	r3, r1
 800ed40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed44:	f7f1 faca 	bl	80002dc <__adddf3>
 800ed48:	4682      	mov	sl, r0
 800ed4a:	468b      	mov	fp, r1
 800ed4c:	e7df      	b.n	800ed0e <_strtod_l+0x8e6>
 800ed4e:	4013      	ands	r3, r2
 800ed50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ed54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed5c:	f04f 3aff 	mov.w	sl, #4294967295
 800ed60:	e7d5      	b.n	800ed0e <_strtod_l+0x8e6>
 800ed62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed64:	ea13 0f0a 	tst.w	r3, sl
 800ed68:	e7e0      	b.n	800ed2c <_strtod_l+0x904>
 800ed6a:	f7ff fb41 	bl	800e3f0 <sulp>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	460b      	mov	r3, r1
 800ed72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed76:	f7f1 faaf 	bl	80002d8 <__aeabi_dsub>
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	4682      	mov	sl, r0
 800ed80:	468b      	mov	fp, r1
 800ed82:	f7f1 fec9 	bl	8000b18 <__aeabi_dcmpeq>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d0c1      	beq.n	800ed0e <_strtod_l+0x8e6>
 800ed8a:	e60e      	b.n	800e9aa <_strtod_l+0x582>
 800ed8c:	fffffc02 	.word	0xfffffc02
 800ed90:	7ff00000 	.word	0x7ff00000
 800ed94:	39500000 	.word	0x39500000
 800ed98:	000fffff 	.word	0x000fffff
 800ed9c:	7fefffff 	.word	0x7fefffff
 800eda0:	080133e0 	.word	0x080133e0
 800eda4:	4631      	mov	r1, r6
 800eda6:	4628      	mov	r0, r5
 800eda8:	f002 fb0a 	bl	80113c0 <__ratio>
 800edac:	ec59 8b10 	vmov	r8, r9, d0
 800edb0:	ee10 0a10 	vmov	r0, s0
 800edb4:	2200      	movs	r2, #0
 800edb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edba:	4649      	mov	r1, r9
 800edbc:	f7f1 fec0 	bl	8000b40 <__aeabi_dcmple>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d07c      	beq.n	800eebe <_strtod_l+0xa96>
 800edc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d04c      	beq.n	800ee64 <_strtod_l+0xa3c>
 800edca:	4b95      	ldr	r3, [pc, #596]	; (800f020 <_strtod_l+0xbf8>)
 800edcc:	2200      	movs	r2, #0
 800edce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800edd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f020 <_strtod_l+0xbf8>
 800edd6:	f04f 0800 	mov.w	r8, #0
 800edda:	4b92      	ldr	r3, [pc, #584]	; (800f024 <_strtod_l+0xbfc>)
 800eddc:	403b      	ands	r3, r7
 800edde:	9311      	str	r3, [sp, #68]	; 0x44
 800ede0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ede2:	4b91      	ldr	r3, [pc, #580]	; (800f028 <_strtod_l+0xc00>)
 800ede4:	429a      	cmp	r2, r3
 800ede6:	f040 80b2 	bne.w	800ef4e <_strtod_l+0xb26>
 800edea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800edee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edf2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800edf6:	ec4b ab10 	vmov	d0, sl, fp
 800edfa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800edfe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ee02:	f002 fa05 	bl	8011210 <__ulp>
 800ee06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee0a:	ec53 2b10 	vmov	r2, r3, d0
 800ee0e:	f7f1 fc1b 	bl	8000648 <__aeabi_dmul>
 800ee12:	4652      	mov	r2, sl
 800ee14:	465b      	mov	r3, fp
 800ee16:	f7f1 fa61 	bl	80002dc <__adddf3>
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	4981      	ldr	r1, [pc, #516]	; (800f024 <_strtod_l+0xbfc>)
 800ee1e:	4a83      	ldr	r2, [pc, #524]	; (800f02c <_strtod_l+0xc04>)
 800ee20:	4019      	ands	r1, r3
 800ee22:	4291      	cmp	r1, r2
 800ee24:	4682      	mov	sl, r0
 800ee26:	d95e      	bls.n	800eee6 <_strtod_l+0xabe>
 800ee28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee2a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d103      	bne.n	800ee3a <_strtod_l+0xa12>
 800ee32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee34:	3301      	adds	r3, #1
 800ee36:	f43f ad43 	beq.w	800e8c0 <_strtod_l+0x498>
 800ee3a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f038 <_strtod_l+0xc10>
 800ee3e:	f04f 3aff 	mov.w	sl, #4294967295
 800ee42:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee44:	4620      	mov	r0, r4
 800ee46:	f001 feb7 	bl	8010bb8 <_Bfree>
 800ee4a:	9907      	ldr	r1, [sp, #28]
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f001 feb3 	bl	8010bb8 <_Bfree>
 800ee52:	4631      	mov	r1, r6
 800ee54:	4620      	mov	r0, r4
 800ee56:	f001 feaf 	bl	8010bb8 <_Bfree>
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f001 feab 	bl	8010bb8 <_Bfree>
 800ee62:	e613      	b.n	800ea8c <_strtod_l+0x664>
 800ee64:	f1ba 0f00 	cmp.w	sl, #0
 800ee68:	d11b      	bne.n	800eea2 <_strtod_l+0xa7a>
 800ee6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee6e:	b9f3      	cbnz	r3, 800eeae <_strtod_l+0xa86>
 800ee70:	4b6b      	ldr	r3, [pc, #428]	; (800f020 <_strtod_l+0xbf8>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	4640      	mov	r0, r8
 800ee76:	4649      	mov	r1, r9
 800ee78:	f7f1 fe58 	bl	8000b2c <__aeabi_dcmplt>
 800ee7c:	b9d0      	cbnz	r0, 800eeb4 <_strtod_l+0xa8c>
 800ee7e:	4640      	mov	r0, r8
 800ee80:	4649      	mov	r1, r9
 800ee82:	4b6b      	ldr	r3, [pc, #428]	; (800f030 <_strtod_l+0xc08>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	f7f1 fbdf 	bl	8000648 <__aeabi_dmul>
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	4689      	mov	r9, r1
 800ee8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ee92:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ee96:	931b      	str	r3, [sp, #108]	; 0x6c
 800ee98:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ee9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eea0:	e79b      	b.n	800edda <_strtod_l+0x9b2>
 800eea2:	f1ba 0f01 	cmp.w	sl, #1
 800eea6:	d102      	bne.n	800eeae <_strtod_l+0xa86>
 800eea8:	2f00      	cmp	r7, #0
 800eeaa:	f43f ad7e 	beq.w	800e9aa <_strtod_l+0x582>
 800eeae:	4b61      	ldr	r3, [pc, #388]	; (800f034 <_strtod_l+0xc0c>)
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	e78c      	b.n	800edce <_strtod_l+0x9a6>
 800eeb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f030 <_strtod_l+0xc08>
 800eeb8:	f04f 0800 	mov.w	r8, #0
 800eebc:	e7e7      	b.n	800ee8e <_strtod_l+0xa66>
 800eebe:	4b5c      	ldr	r3, [pc, #368]	; (800f030 <_strtod_l+0xc08>)
 800eec0:	4640      	mov	r0, r8
 800eec2:	4649      	mov	r1, r9
 800eec4:	2200      	movs	r2, #0
 800eec6:	f7f1 fbbf 	bl	8000648 <__aeabi_dmul>
 800eeca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eecc:	4680      	mov	r8, r0
 800eece:	4689      	mov	r9, r1
 800eed0:	b933      	cbnz	r3, 800eee0 <_strtod_l+0xab8>
 800eed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eed6:	9012      	str	r0, [sp, #72]	; 0x48
 800eed8:	9313      	str	r3, [sp, #76]	; 0x4c
 800eeda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800eede:	e7dd      	b.n	800ee9c <_strtod_l+0xa74>
 800eee0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800eee4:	e7f9      	b.n	800eeda <_strtod_l+0xab2>
 800eee6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800eeea:	9b04      	ldr	r3, [sp, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1a8      	bne.n	800ee42 <_strtod_l+0xa1a>
 800eef0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eef4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800eef6:	0d1b      	lsrs	r3, r3, #20
 800eef8:	051b      	lsls	r3, r3, #20
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d1a1      	bne.n	800ee42 <_strtod_l+0xa1a>
 800eefe:	4640      	mov	r0, r8
 800ef00:	4649      	mov	r1, r9
 800ef02:	f7f1 ff01 	bl	8000d08 <__aeabi_d2lz>
 800ef06:	f7f1 fb71 	bl	80005ec <__aeabi_l2d>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4640      	mov	r0, r8
 800ef10:	4649      	mov	r1, r9
 800ef12:	f7f1 f9e1 	bl	80002d8 <__aeabi_dsub>
 800ef16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef1c:	ea43 030a 	orr.w	r3, r3, sl
 800ef20:	4313      	orrs	r3, r2
 800ef22:	4680      	mov	r8, r0
 800ef24:	4689      	mov	r9, r1
 800ef26:	d053      	beq.n	800efd0 <_strtod_l+0xba8>
 800ef28:	a335      	add	r3, pc, #212	; (adr r3, 800f000 <_strtod_l+0xbd8>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	f7f1 fdfd 	bl	8000b2c <__aeabi_dcmplt>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	f47f acce 	bne.w	800e8d4 <_strtod_l+0x4ac>
 800ef38:	a333      	add	r3, pc, #204	; (adr r3, 800f008 <_strtod_l+0xbe0>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	4640      	mov	r0, r8
 800ef40:	4649      	mov	r1, r9
 800ef42:	f7f1 fe11 	bl	8000b68 <__aeabi_dcmpgt>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	f43f af7b 	beq.w	800ee42 <_strtod_l+0xa1a>
 800ef4c:	e4c2      	b.n	800e8d4 <_strtod_l+0x4ac>
 800ef4e:	9b04      	ldr	r3, [sp, #16]
 800ef50:	b333      	cbz	r3, 800efa0 <_strtod_l+0xb78>
 800ef52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ef58:	d822      	bhi.n	800efa0 <_strtod_l+0xb78>
 800ef5a:	a32d      	add	r3, pc, #180	; (adr r3, 800f010 <_strtod_l+0xbe8>)
 800ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef60:	4640      	mov	r0, r8
 800ef62:	4649      	mov	r1, r9
 800ef64:	f7f1 fdec 	bl	8000b40 <__aeabi_dcmple>
 800ef68:	b1a0      	cbz	r0, 800ef94 <_strtod_l+0xb6c>
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	f7f1 fe43 	bl	8000bf8 <__aeabi_d2uiz>
 800ef72:	2801      	cmp	r0, #1
 800ef74:	bf38      	it	cc
 800ef76:	2001      	movcc	r0, #1
 800ef78:	f7f1 faec 	bl	8000554 <__aeabi_ui2d>
 800ef7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef7e:	4680      	mov	r8, r0
 800ef80:	4689      	mov	r9, r1
 800ef82:	bb13      	cbnz	r3, 800efca <_strtod_l+0xba2>
 800ef84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef88:	9014      	str	r0, [sp, #80]	; 0x50
 800ef8a:	9315      	str	r3, [sp, #84]	; 0x54
 800ef8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ef90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ef94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ef9c:	1a9b      	subs	r3, r3, r2
 800ef9e:	930d      	str	r3, [sp, #52]	; 0x34
 800efa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efa4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800efa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800efac:	f002 f930 	bl	8011210 <__ulp>
 800efb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efb4:	ec53 2b10 	vmov	r2, r3, d0
 800efb8:	f7f1 fb46 	bl	8000648 <__aeabi_dmul>
 800efbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800efc0:	f7f1 f98c 	bl	80002dc <__adddf3>
 800efc4:	4682      	mov	sl, r0
 800efc6:	468b      	mov	fp, r1
 800efc8:	e78f      	b.n	800eeea <_strtod_l+0xac2>
 800efca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800efce:	e7dd      	b.n	800ef8c <_strtod_l+0xb64>
 800efd0:	a311      	add	r3, pc, #68	; (adr r3, 800f018 <_strtod_l+0xbf0>)
 800efd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd6:	f7f1 fda9 	bl	8000b2c <__aeabi_dcmplt>
 800efda:	e7b4      	b.n	800ef46 <_strtod_l+0xb1e>
 800efdc:	2300      	movs	r3, #0
 800efde:	930e      	str	r3, [sp, #56]	; 0x38
 800efe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800efe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efe4:	6013      	str	r3, [r2, #0]
 800efe6:	f7ff ba65 	b.w	800e4b4 <_strtod_l+0x8c>
 800efea:	2b65      	cmp	r3, #101	; 0x65
 800efec:	f43f ab5d 	beq.w	800e6aa <_strtod_l+0x282>
 800eff0:	2b45      	cmp	r3, #69	; 0x45
 800eff2:	f43f ab5a 	beq.w	800e6aa <_strtod_l+0x282>
 800eff6:	2201      	movs	r2, #1
 800eff8:	f7ff bb92 	b.w	800e720 <_strtod_l+0x2f8>
 800effc:	f3af 8000 	nop.w
 800f000:	94a03595 	.word	0x94a03595
 800f004:	3fdfffff 	.word	0x3fdfffff
 800f008:	35afe535 	.word	0x35afe535
 800f00c:	3fe00000 	.word	0x3fe00000
 800f010:	ffc00000 	.word	0xffc00000
 800f014:	41dfffff 	.word	0x41dfffff
 800f018:	94a03595 	.word	0x94a03595
 800f01c:	3fcfffff 	.word	0x3fcfffff
 800f020:	3ff00000 	.word	0x3ff00000
 800f024:	7ff00000 	.word	0x7ff00000
 800f028:	7fe00000 	.word	0x7fe00000
 800f02c:	7c9fffff 	.word	0x7c9fffff
 800f030:	3fe00000 	.word	0x3fe00000
 800f034:	bff00000 	.word	0xbff00000
 800f038:	7fefffff 	.word	0x7fefffff

0800f03c <strtod>:
 800f03c:	460a      	mov	r2, r1
 800f03e:	4601      	mov	r1, r0
 800f040:	4802      	ldr	r0, [pc, #8]	; (800f04c <strtod+0x10>)
 800f042:	4b03      	ldr	r3, [pc, #12]	; (800f050 <strtod+0x14>)
 800f044:	6800      	ldr	r0, [r0, #0]
 800f046:	f7ff b9ef 	b.w	800e428 <_strtod_l>
 800f04a:	bf00      	nop
 800f04c:	2000002c 	.word	0x2000002c
 800f050:	20000094 	.word	0x20000094

0800f054 <_strtol_l.isra.0>:
 800f054:	2b01      	cmp	r3, #1
 800f056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f05a:	d001      	beq.n	800f060 <_strtol_l.isra.0+0xc>
 800f05c:	2b24      	cmp	r3, #36	; 0x24
 800f05e:	d906      	bls.n	800f06e <_strtol_l.isra.0+0x1a>
 800f060:	f7fe fc8e 	bl	800d980 <__errno>
 800f064:	2316      	movs	r3, #22
 800f066:	6003      	str	r3, [r0, #0]
 800f068:	2000      	movs	r0, #0
 800f06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06e:	4f3a      	ldr	r7, [pc, #232]	; (800f158 <_strtol_l.isra.0+0x104>)
 800f070:	468e      	mov	lr, r1
 800f072:	4676      	mov	r6, lr
 800f074:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f078:	5de5      	ldrb	r5, [r4, r7]
 800f07a:	f015 0508 	ands.w	r5, r5, #8
 800f07e:	d1f8      	bne.n	800f072 <_strtol_l.isra.0+0x1e>
 800f080:	2c2d      	cmp	r4, #45	; 0x2d
 800f082:	d134      	bne.n	800f0ee <_strtol_l.isra.0+0x9a>
 800f084:	f89e 4000 	ldrb.w	r4, [lr]
 800f088:	f04f 0801 	mov.w	r8, #1
 800f08c:	f106 0e02 	add.w	lr, r6, #2
 800f090:	2b00      	cmp	r3, #0
 800f092:	d05c      	beq.n	800f14e <_strtol_l.isra.0+0xfa>
 800f094:	2b10      	cmp	r3, #16
 800f096:	d10c      	bne.n	800f0b2 <_strtol_l.isra.0+0x5e>
 800f098:	2c30      	cmp	r4, #48	; 0x30
 800f09a:	d10a      	bne.n	800f0b2 <_strtol_l.isra.0+0x5e>
 800f09c:	f89e 4000 	ldrb.w	r4, [lr]
 800f0a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f0a4:	2c58      	cmp	r4, #88	; 0x58
 800f0a6:	d14d      	bne.n	800f144 <_strtol_l.isra.0+0xf0>
 800f0a8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f0ac:	2310      	movs	r3, #16
 800f0ae:	f10e 0e02 	add.w	lr, lr, #2
 800f0b2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f0b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f0ba:	2600      	movs	r6, #0
 800f0bc:	fbbc f9f3 	udiv	r9, ip, r3
 800f0c0:	4635      	mov	r5, r6
 800f0c2:	fb03 ca19 	mls	sl, r3, r9, ip
 800f0c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f0ca:	2f09      	cmp	r7, #9
 800f0cc:	d818      	bhi.n	800f100 <_strtol_l.isra.0+0xac>
 800f0ce:	463c      	mov	r4, r7
 800f0d0:	42a3      	cmp	r3, r4
 800f0d2:	dd24      	ble.n	800f11e <_strtol_l.isra.0+0xca>
 800f0d4:	2e00      	cmp	r6, #0
 800f0d6:	db1f      	blt.n	800f118 <_strtol_l.isra.0+0xc4>
 800f0d8:	45a9      	cmp	r9, r5
 800f0da:	d31d      	bcc.n	800f118 <_strtol_l.isra.0+0xc4>
 800f0dc:	d101      	bne.n	800f0e2 <_strtol_l.isra.0+0x8e>
 800f0de:	45a2      	cmp	sl, r4
 800f0e0:	db1a      	blt.n	800f118 <_strtol_l.isra.0+0xc4>
 800f0e2:	fb05 4503 	mla	r5, r5, r3, r4
 800f0e6:	2601      	movs	r6, #1
 800f0e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f0ec:	e7eb      	b.n	800f0c6 <_strtol_l.isra.0+0x72>
 800f0ee:	2c2b      	cmp	r4, #43	; 0x2b
 800f0f0:	bf08      	it	eq
 800f0f2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f0f6:	46a8      	mov	r8, r5
 800f0f8:	bf08      	it	eq
 800f0fa:	f106 0e02 	addeq.w	lr, r6, #2
 800f0fe:	e7c7      	b.n	800f090 <_strtol_l.isra.0+0x3c>
 800f100:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f104:	2f19      	cmp	r7, #25
 800f106:	d801      	bhi.n	800f10c <_strtol_l.isra.0+0xb8>
 800f108:	3c37      	subs	r4, #55	; 0x37
 800f10a:	e7e1      	b.n	800f0d0 <_strtol_l.isra.0+0x7c>
 800f10c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f110:	2f19      	cmp	r7, #25
 800f112:	d804      	bhi.n	800f11e <_strtol_l.isra.0+0xca>
 800f114:	3c57      	subs	r4, #87	; 0x57
 800f116:	e7db      	b.n	800f0d0 <_strtol_l.isra.0+0x7c>
 800f118:	f04f 36ff 	mov.w	r6, #4294967295
 800f11c:	e7e4      	b.n	800f0e8 <_strtol_l.isra.0+0x94>
 800f11e:	2e00      	cmp	r6, #0
 800f120:	da05      	bge.n	800f12e <_strtol_l.isra.0+0xda>
 800f122:	2322      	movs	r3, #34	; 0x22
 800f124:	6003      	str	r3, [r0, #0]
 800f126:	4665      	mov	r5, ip
 800f128:	b942      	cbnz	r2, 800f13c <_strtol_l.isra.0+0xe8>
 800f12a:	4628      	mov	r0, r5
 800f12c:	e79d      	b.n	800f06a <_strtol_l.isra.0+0x16>
 800f12e:	f1b8 0f00 	cmp.w	r8, #0
 800f132:	d000      	beq.n	800f136 <_strtol_l.isra.0+0xe2>
 800f134:	426d      	negs	r5, r5
 800f136:	2a00      	cmp	r2, #0
 800f138:	d0f7      	beq.n	800f12a <_strtol_l.isra.0+0xd6>
 800f13a:	b10e      	cbz	r6, 800f140 <_strtol_l.isra.0+0xec>
 800f13c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f140:	6011      	str	r1, [r2, #0]
 800f142:	e7f2      	b.n	800f12a <_strtol_l.isra.0+0xd6>
 800f144:	2430      	movs	r4, #48	; 0x30
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1b3      	bne.n	800f0b2 <_strtol_l.isra.0+0x5e>
 800f14a:	2308      	movs	r3, #8
 800f14c:	e7b1      	b.n	800f0b2 <_strtol_l.isra.0+0x5e>
 800f14e:	2c30      	cmp	r4, #48	; 0x30
 800f150:	d0a4      	beq.n	800f09c <_strtol_l.isra.0+0x48>
 800f152:	230a      	movs	r3, #10
 800f154:	e7ad      	b.n	800f0b2 <_strtol_l.isra.0+0x5e>
 800f156:	bf00      	nop
 800f158:	08013409 	.word	0x08013409

0800f15c <strtol>:
 800f15c:	4613      	mov	r3, r2
 800f15e:	460a      	mov	r2, r1
 800f160:	4601      	mov	r1, r0
 800f162:	4802      	ldr	r0, [pc, #8]	; (800f16c <strtol+0x10>)
 800f164:	6800      	ldr	r0, [r0, #0]
 800f166:	f7ff bf75 	b.w	800f054 <_strtol_l.isra.0>
 800f16a:	bf00      	nop
 800f16c:	2000002c 	.word	0x2000002c

0800f170 <__swbuf_r>:
 800f170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f172:	460e      	mov	r6, r1
 800f174:	4614      	mov	r4, r2
 800f176:	4605      	mov	r5, r0
 800f178:	b118      	cbz	r0, 800f182 <__swbuf_r+0x12>
 800f17a:	6983      	ldr	r3, [r0, #24]
 800f17c:	b90b      	cbnz	r3, 800f182 <__swbuf_r+0x12>
 800f17e:	f001 f849 	bl	8010214 <__sinit>
 800f182:	4b21      	ldr	r3, [pc, #132]	; (800f208 <__swbuf_r+0x98>)
 800f184:	429c      	cmp	r4, r3
 800f186:	d12b      	bne.n	800f1e0 <__swbuf_r+0x70>
 800f188:	686c      	ldr	r4, [r5, #4]
 800f18a:	69a3      	ldr	r3, [r4, #24]
 800f18c:	60a3      	str	r3, [r4, #8]
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	071a      	lsls	r2, r3, #28
 800f192:	d52f      	bpl.n	800f1f4 <__swbuf_r+0x84>
 800f194:	6923      	ldr	r3, [r4, #16]
 800f196:	b36b      	cbz	r3, 800f1f4 <__swbuf_r+0x84>
 800f198:	6923      	ldr	r3, [r4, #16]
 800f19a:	6820      	ldr	r0, [r4, #0]
 800f19c:	1ac0      	subs	r0, r0, r3
 800f19e:	6963      	ldr	r3, [r4, #20]
 800f1a0:	b2f6      	uxtb	r6, r6
 800f1a2:	4283      	cmp	r3, r0
 800f1a4:	4637      	mov	r7, r6
 800f1a6:	dc04      	bgt.n	800f1b2 <__swbuf_r+0x42>
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	f000 ff9e 	bl	80100ec <_fflush_r>
 800f1b0:	bb30      	cbnz	r0, 800f200 <__swbuf_r+0x90>
 800f1b2:	68a3      	ldr	r3, [r4, #8]
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	60a3      	str	r3, [r4, #8]
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	6022      	str	r2, [r4, #0]
 800f1be:	701e      	strb	r6, [r3, #0]
 800f1c0:	6963      	ldr	r3, [r4, #20]
 800f1c2:	3001      	adds	r0, #1
 800f1c4:	4283      	cmp	r3, r0
 800f1c6:	d004      	beq.n	800f1d2 <__swbuf_r+0x62>
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	07db      	lsls	r3, r3, #31
 800f1cc:	d506      	bpl.n	800f1dc <__swbuf_r+0x6c>
 800f1ce:	2e0a      	cmp	r6, #10
 800f1d0:	d104      	bne.n	800f1dc <__swbuf_r+0x6c>
 800f1d2:	4621      	mov	r1, r4
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	f000 ff89 	bl	80100ec <_fflush_r>
 800f1da:	b988      	cbnz	r0, 800f200 <__swbuf_r+0x90>
 800f1dc:	4638      	mov	r0, r7
 800f1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e0:	4b0a      	ldr	r3, [pc, #40]	; (800f20c <__swbuf_r+0x9c>)
 800f1e2:	429c      	cmp	r4, r3
 800f1e4:	d101      	bne.n	800f1ea <__swbuf_r+0x7a>
 800f1e6:	68ac      	ldr	r4, [r5, #8]
 800f1e8:	e7cf      	b.n	800f18a <__swbuf_r+0x1a>
 800f1ea:	4b09      	ldr	r3, [pc, #36]	; (800f210 <__swbuf_r+0xa0>)
 800f1ec:	429c      	cmp	r4, r3
 800f1ee:	bf08      	it	eq
 800f1f0:	68ec      	ldreq	r4, [r5, #12]
 800f1f2:	e7ca      	b.n	800f18a <__swbuf_r+0x1a>
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	f000 f80c 	bl	800f214 <__swsetup_r>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d0cb      	beq.n	800f198 <__swbuf_r+0x28>
 800f200:	f04f 37ff 	mov.w	r7, #4294967295
 800f204:	e7ea      	b.n	800f1dc <__swbuf_r+0x6c>
 800f206:	bf00      	nop
 800f208:	080135c0 	.word	0x080135c0
 800f20c:	080135e0 	.word	0x080135e0
 800f210:	080135a0 	.word	0x080135a0

0800f214 <__swsetup_r>:
 800f214:	4b32      	ldr	r3, [pc, #200]	; (800f2e0 <__swsetup_r+0xcc>)
 800f216:	b570      	push	{r4, r5, r6, lr}
 800f218:	681d      	ldr	r5, [r3, #0]
 800f21a:	4606      	mov	r6, r0
 800f21c:	460c      	mov	r4, r1
 800f21e:	b125      	cbz	r5, 800f22a <__swsetup_r+0x16>
 800f220:	69ab      	ldr	r3, [r5, #24]
 800f222:	b913      	cbnz	r3, 800f22a <__swsetup_r+0x16>
 800f224:	4628      	mov	r0, r5
 800f226:	f000 fff5 	bl	8010214 <__sinit>
 800f22a:	4b2e      	ldr	r3, [pc, #184]	; (800f2e4 <__swsetup_r+0xd0>)
 800f22c:	429c      	cmp	r4, r3
 800f22e:	d10f      	bne.n	800f250 <__swsetup_r+0x3c>
 800f230:	686c      	ldr	r4, [r5, #4]
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f238:	0719      	lsls	r1, r3, #28
 800f23a:	d42c      	bmi.n	800f296 <__swsetup_r+0x82>
 800f23c:	06dd      	lsls	r5, r3, #27
 800f23e:	d411      	bmi.n	800f264 <__swsetup_r+0x50>
 800f240:	2309      	movs	r3, #9
 800f242:	6033      	str	r3, [r6, #0]
 800f244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f248:	81a3      	strh	r3, [r4, #12]
 800f24a:	f04f 30ff 	mov.w	r0, #4294967295
 800f24e:	e03e      	b.n	800f2ce <__swsetup_r+0xba>
 800f250:	4b25      	ldr	r3, [pc, #148]	; (800f2e8 <__swsetup_r+0xd4>)
 800f252:	429c      	cmp	r4, r3
 800f254:	d101      	bne.n	800f25a <__swsetup_r+0x46>
 800f256:	68ac      	ldr	r4, [r5, #8]
 800f258:	e7eb      	b.n	800f232 <__swsetup_r+0x1e>
 800f25a:	4b24      	ldr	r3, [pc, #144]	; (800f2ec <__swsetup_r+0xd8>)
 800f25c:	429c      	cmp	r4, r3
 800f25e:	bf08      	it	eq
 800f260:	68ec      	ldreq	r4, [r5, #12]
 800f262:	e7e6      	b.n	800f232 <__swsetup_r+0x1e>
 800f264:	0758      	lsls	r0, r3, #29
 800f266:	d512      	bpl.n	800f28e <__swsetup_r+0x7a>
 800f268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f26a:	b141      	cbz	r1, 800f27e <__swsetup_r+0x6a>
 800f26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f270:	4299      	cmp	r1, r3
 800f272:	d002      	beq.n	800f27a <__swsetup_r+0x66>
 800f274:	4630      	mov	r0, r6
 800f276:	f002 f929 	bl	80114cc <_free_r>
 800f27a:	2300      	movs	r3, #0
 800f27c:	6363      	str	r3, [r4, #52]	; 0x34
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f284:	81a3      	strh	r3, [r4, #12]
 800f286:	2300      	movs	r3, #0
 800f288:	6063      	str	r3, [r4, #4]
 800f28a:	6923      	ldr	r3, [r4, #16]
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	f043 0308 	orr.w	r3, r3, #8
 800f294:	81a3      	strh	r3, [r4, #12]
 800f296:	6923      	ldr	r3, [r4, #16]
 800f298:	b94b      	cbnz	r3, 800f2ae <__swsetup_r+0x9a>
 800f29a:	89a3      	ldrh	r3, [r4, #12]
 800f29c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2a4:	d003      	beq.n	800f2ae <__swsetup_r+0x9a>
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	f001 fbeb 	bl	8010a84 <__smakebuf_r>
 800f2ae:	89a0      	ldrh	r0, [r4, #12]
 800f2b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2b4:	f010 0301 	ands.w	r3, r0, #1
 800f2b8:	d00a      	beq.n	800f2d0 <__swsetup_r+0xbc>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	60a3      	str	r3, [r4, #8]
 800f2be:	6963      	ldr	r3, [r4, #20]
 800f2c0:	425b      	negs	r3, r3
 800f2c2:	61a3      	str	r3, [r4, #24]
 800f2c4:	6923      	ldr	r3, [r4, #16]
 800f2c6:	b943      	cbnz	r3, 800f2da <__swsetup_r+0xc6>
 800f2c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2cc:	d1ba      	bne.n	800f244 <__swsetup_r+0x30>
 800f2ce:	bd70      	pop	{r4, r5, r6, pc}
 800f2d0:	0781      	lsls	r1, r0, #30
 800f2d2:	bf58      	it	pl
 800f2d4:	6963      	ldrpl	r3, [r4, #20]
 800f2d6:	60a3      	str	r3, [r4, #8]
 800f2d8:	e7f4      	b.n	800f2c4 <__swsetup_r+0xb0>
 800f2da:	2000      	movs	r0, #0
 800f2dc:	e7f7      	b.n	800f2ce <__swsetup_r+0xba>
 800f2de:	bf00      	nop
 800f2e0:	2000002c 	.word	0x2000002c
 800f2e4:	080135c0 	.word	0x080135c0
 800f2e8:	080135e0 	.word	0x080135e0
 800f2ec:	080135a0 	.word	0x080135a0

0800f2f0 <quorem>:
 800f2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f4:	6903      	ldr	r3, [r0, #16]
 800f2f6:	690c      	ldr	r4, [r1, #16]
 800f2f8:	42a3      	cmp	r3, r4
 800f2fa:	4607      	mov	r7, r0
 800f2fc:	f2c0 8081 	blt.w	800f402 <quorem+0x112>
 800f300:	3c01      	subs	r4, #1
 800f302:	f101 0814 	add.w	r8, r1, #20
 800f306:	f100 0514 	add.w	r5, r0, #20
 800f30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f30e:	9301      	str	r3, [sp, #4]
 800f310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f318:	3301      	adds	r3, #1
 800f31a:	429a      	cmp	r2, r3
 800f31c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f320:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f324:	fbb2 f6f3 	udiv	r6, r2, r3
 800f328:	d331      	bcc.n	800f38e <quorem+0x9e>
 800f32a:	f04f 0e00 	mov.w	lr, #0
 800f32e:	4640      	mov	r0, r8
 800f330:	46ac      	mov	ip, r5
 800f332:	46f2      	mov	sl, lr
 800f334:	f850 2b04 	ldr.w	r2, [r0], #4
 800f338:	b293      	uxth	r3, r2
 800f33a:	fb06 e303 	mla	r3, r6, r3, lr
 800f33e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f342:	b29b      	uxth	r3, r3
 800f344:	ebaa 0303 	sub.w	r3, sl, r3
 800f348:	0c12      	lsrs	r2, r2, #16
 800f34a:	f8dc a000 	ldr.w	sl, [ip]
 800f34e:	fb06 e202 	mla	r2, r6, r2, lr
 800f352:	fa13 f38a 	uxtah	r3, r3, sl
 800f356:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f35a:	fa1f fa82 	uxth.w	sl, r2
 800f35e:	f8dc 2000 	ldr.w	r2, [ip]
 800f362:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f366:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f370:	4581      	cmp	r9, r0
 800f372:	f84c 3b04 	str.w	r3, [ip], #4
 800f376:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f37a:	d2db      	bcs.n	800f334 <quorem+0x44>
 800f37c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f380:	b92b      	cbnz	r3, 800f38e <quorem+0x9e>
 800f382:	9b01      	ldr	r3, [sp, #4]
 800f384:	3b04      	subs	r3, #4
 800f386:	429d      	cmp	r5, r3
 800f388:	461a      	mov	r2, r3
 800f38a:	d32e      	bcc.n	800f3ea <quorem+0xfa>
 800f38c:	613c      	str	r4, [r7, #16]
 800f38e:	4638      	mov	r0, r7
 800f390:	f001 fe9a 	bl	80110c8 <__mcmp>
 800f394:	2800      	cmp	r0, #0
 800f396:	db24      	blt.n	800f3e2 <quorem+0xf2>
 800f398:	3601      	adds	r6, #1
 800f39a:	4628      	mov	r0, r5
 800f39c:	f04f 0c00 	mov.w	ip, #0
 800f3a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3a4:	f8d0 e000 	ldr.w	lr, [r0]
 800f3a8:	b293      	uxth	r3, r2
 800f3aa:	ebac 0303 	sub.w	r3, ip, r3
 800f3ae:	0c12      	lsrs	r2, r2, #16
 800f3b0:	fa13 f38e 	uxtah	r3, r3, lr
 800f3b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f3b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3c2:	45c1      	cmp	r9, r8
 800f3c4:	f840 3b04 	str.w	r3, [r0], #4
 800f3c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f3cc:	d2e8      	bcs.n	800f3a0 <quorem+0xb0>
 800f3ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3d6:	b922      	cbnz	r2, 800f3e2 <quorem+0xf2>
 800f3d8:	3b04      	subs	r3, #4
 800f3da:	429d      	cmp	r5, r3
 800f3dc:	461a      	mov	r2, r3
 800f3de:	d30a      	bcc.n	800f3f6 <quorem+0x106>
 800f3e0:	613c      	str	r4, [r7, #16]
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	b003      	add	sp, #12
 800f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ea:	6812      	ldr	r2, [r2, #0]
 800f3ec:	3b04      	subs	r3, #4
 800f3ee:	2a00      	cmp	r2, #0
 800f3f0:	d1cc      	bne.n	800f38c <quorem+0x9c>
 800f3f2:	3c01      	subs	r4, #1
 800f3f4:	e7c7      	b.n	800f386 <quorem+0x96>
 800f3f6:	6812      	ldr	r2, [r2, #0]
 800f3f8:	3b04      	subs	r3, #4
 800f3fa:	2a00      	cmp	r2, #0
 800f3fc:	d1f0      	bne.n	800f3e0 <quorem+0xf0>
 800f3fe:	3c01      	subs	r4, #1
 800f400:	e7eb      	b.n	800f3da <quorem+0xea>
 800f402:	2000      	movs	r0, #0
 800f404:	e7ee      	b.n	800f3e4 <quorem+0xf4>
	...

0800f408 <_dtoa_r>:
 800f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40c:	ed2d 8b02 	vpush	{d8}
 800f410:	ec57 6b10 	vmov	r6, r7, d0
 800f414:	b095      	sub	sp, #84	; 0x54
 800f416:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f418:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f41c:	9105      	str	r1, [sp, #20]
 800f41e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f422:	4604      	mov	r4, r0
 800f424:	9209      	str	r2, [sp, #36]	; 0x24
 800f426:	930f      	str	r3, [sp, #60]	; 0x3c
 800f428:	b975      	cbnz	r5, 800f448 <_dtoa_r+0x40>
 800f42a:	2010      	movs	r0, #16
 800f42c:	f001 fb6a 	bl	8010b04 <malloc>
 800f430:	4602      	mov	r2, r0
 800f432:	6260      	str	r0, [r4, #36]	; 0x24
 800f434:	b920      	cbnz	r0, 800f440 <_dtoa_r+0x38>
 800f436:	4bb2      	ldr	r3, [pc, #712]	; (800f700 <_dtoa_r+0x2f8>)
 800f438:	21ea      	movs	r1, #234	; 0xea
 800f43a:	48b2      	ldr	r0, [pc, #712]	; (800f704 <_dtoa_r+0x2fc>)
 800f43c:	f002 fad8 	bl	80119f0 <__assert_func>
 800f440:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f444:	6005      	str	r5, [r0, #0]
 800f446:	60c5      	str	r5, [r0, #12]
 800f448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f44a:	6819      	ldr	r1, [r3, #0]
 800f44c:	b151      	cbz	r1, 800f464 <_dtoa_r+0x5c>
 800f44e:	685a      	ldr	r2, [r3, #4]
 800f450:	604a      	str	r2, [r1, #4]
 800f452:	2301      	movs	r3, #1
 800f454:	4093      	lsls	r3, r2
 800f456:	608b      	str	r3, [r1, #8]
 800f458:	4620      	mov	r0, r4
 800f45a:	f001 fbad 	bl	8010bb8 <_Bfree>
 800f45e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f460:	2200      	movs	r2, #0
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	1e3b      	subs	r3, r7, #0
 800f466:	bfb9      	ittee	lt
 800f468:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f46c:	9303      	strlt	r3, [sp, #12]
 800f46e:	2300      	movge	r3, #0
 800f470:	f8c8 3000 	strge.w	r3, [r8]
 800f474:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f478:	4ba3      	ldr	r3, [pc, #652]	; (800f708 <_dtoa_r+0x300>)
 800f47a:	bfbc      	itt	lt
 800f47c:	2201      	movlt	r2, #1
 800f47e:	f8c8 2000 	strlt.w	r2, [r8]
 800f482:	ea33 0309 	bics.w	r3, r3, r9
 800f486:	d11b      	bne.n	800f4c0 <_dtoa_r+0xb8>
 800f488:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f48a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f48e:	6013      	str	r3, [r2, #0]
 800f490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f494:	4333      	orrs	r3, r6
 800f496:	f000 857a 	beq.w	800ff8e <_dtoa_r+0xb86>
 800f49a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f49c:	b963      	cbnz	r3, 800f4b8 <_dtoa_r+0xb0>
 800f49e:	4b9b      	ldr	r3, [pc, #620]	; (800f70c <_dtoa_r+0x304>)
 800f4a0:	e024      	b.n	800f4ec <_dtoa_r+0xe4>
 800f4a2:	4b9b      	ldr	r3, [pc, #620]	; (800f710 <_dtoa_r+0x308>)
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	3308      	adds	r3, #8
 800f4a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f4aa:	6013      	str	r3, [r2, #0]
 800f4ac:	9800      	ldr	r0, [sp, #0]
 800f4ae:	b015      	add	sp, #84	; 0x54
 800f4b0:	ecbd 8b02 	vpop	{d8}
 800f4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b8:	4b94      	ldr	r3, [pc, #592]	; (800f70c <_dtoa_r+0x304>)
 800f4ba:	9300      	str	r3, [sp, #0]
 800f4bc:	3303      	adds	r3, #3
 800f4be:	e7f3      	b.n	800f4a8 <_dtoa_r+0xa0>
 800f4c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	ec51 0b17 	vmov	r0, r1, d7
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f4d0:	f7f1 fb22 	bl	8000b18 <__aeabi_dcmpeq>
 800f4d4:	4680      	mov	r8, r0
 800f4d6:	b158      	cbz	r0, 800f4f0 <_dtoa_r+0xe8>
 800f4d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4da:	2301      	movs	r3, #1
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 8551 	beq.w	800ff88 <_dtoa_r+0xb80>
 800f4e6:	488b      	ldr	r0, [pc, #556]	; (800f714 <_dtoa_r+0x30c>)
 800f4e8:	6018      	str	r0, [r3, #0]
 800f4ea:	1e43      	subs	r3, r0, #1
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	e7dd      	b.n	800f4ac <_dtoa_r+0xa4>
 800f4f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f4f4:	aa12      	add	r2, sp, #72	; 0x48
 800f4f6:	a913      	add	r1, sp, #76	; 0x4c
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f001 ff05 	bl	8011308 <__d2b>
 800f4fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f502:	4683      	mov	fp, r0
 800f504:	2d00      	cmp	r5, #0
 800f506:	d07c      	beq.n	800f602 <_dtoa_r+0x1fa>
 800f508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f50a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f50e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f512:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f516:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f51a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f51e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f522:	4b7d      	ldr	r3, [pc, #500]	; (800f718 <_dtoa_r+0x310>)
 800f524:	2200      	movs	r2, #0
 800f526:	4630      	mov	r0, r6
 800f528:	4639      	mov	r1, r7
 800f52a:	f7f0 fed5 	bl	80002d8 <__aeabi_dsub>
 800f52e:	a36e      	add	r3, pc, #440	; (adr r3, 800f6e8 <_dtoa_r+0x2e0>)
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	f7f1 f888 	bl	8000648 <__aeabi_dmul>
 800f538:	a36d      	add	r3, pc, #436	; (adr r3, 800f6f0 <_dtoa_r+0x2e8>)
 800f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53e:	f7f0 fecd 	bl	80002dc <__adddf3>
 800f542:	4606      	mov	r6, r0
 800f544:	4628      	mov	r0, r5
 800f546:	460f      	mov	r7, r1
 800f548:	f7f1 f814 	bl	8000574 <__aeabi_i2d>
 800f54c:	a36a      	add	r3, pc, #424	; (adr r3, 800f6f8 <_dtoa_r+0x2f0>)
 800f54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f552:	f7f1 f879 	bl	8000648 <__aeabi_dmul>
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4630      	mov	r0, r6
 800f55c:	4639      	mov	r1, r7
 800f55e:	f7f0 febd 	bl	80002dc <__adddf3>
 800f562:	4606      	mov	r6, r0
 800f564:	460f      	mov	r7, r1
 800f566:	f7f1 fb1f 	bl	8000ba8 <__aeabi_d2iz>
 800f56a:	2200      	movs	r2, #0
 800f56c:	4682      	mov	sl, r0
 800f56e:	2300      	movs	r3, #0
 800f570:	4630      	mov	r0, r6
 800f572:	4639      	mov	r1, r7
 800f574:	f7f1 fada 	bl	8000b2c <__aeabi_dcmplt>
 800f578:	b148      	cbz	r0, 800f58e <_dtoa_r+0x186>
 800f57a:	4650      	mov	r0, sl
 800f57c:	f7f0 fffa 	bl	8000574 <__aeabi_i2d>
 800f580:	4632      	mov	r2, r6
 800f582:	463b      	mov	r3, r7
 800f584:	f7f1 fac8 	bl	8000b18 <__aeabi_dcmpeq>
 800f588:	b908      	cbnz	r0, 800f58e <_dtoa_r+0x186>
 800f58a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f58e:	f1ba 0f16 	cmp.w	sl, #22
 800f592:	d854      	bhi.n	800f63e <_dtoa_r+0x236>
 800f594:	4b61      	ldr	r3, [pc, #388]	; (800f71c <_dtoa_r+0x314>)
 800f596:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5a2:	f7f1 fac3 	bl	8000b2c <__aeabi_dcmplt>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d04b      	beq.n	800f642 <_dtoa_r+0x23a>
 800f5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	930e      	str	r3, [sp, #56]	; 0x38
 800f5b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5b4:	1b5d      	subs	r5, r3, r5
 800f5b6:	1e6b      	subs	r3, r5, #1
 800f5b8:	9304      	str	r3, [sp, #16]
 800f5ba:	bf43      	ittte	mi
 800f5bc:	2300      	movmi	r3, #0
 800f5be:	f1c5 0801 	rsbmi	r8, r5, #1
 800f5c2:	9304      	strmi	r3, [sp, #16]
 800f5c4:	f04f 0800 	movpl.w	r8, #0
 800f5c8:	f1ba 0f00 	cmp.w	sl, #0
 800f5cc:	db3b      	blt.n	800f646 <_dtoa_r+0x23e>
 800f5ce:	9b04      	ldr	r3, [sp, #16]
 800f5d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f5d4:	4453      	add	r3, sl
 800f5d6:	9304      	str	r3, [sp, #16]
 800f5d8:	2300      	movs	r3, #0
 800f5da:	9306      	str	r3, [sp, #24]
 800f5dc:	9b05      	ldr	r3, [sp, #20]
 800f5de:	2b09      	cmp	r3, #9
 800f5e0:	d869      	bhi.n	800f6b6 <_dtoa_r+0x2ae>
 800f5e2:	2b05      	cmp	r3, #5
 800f5e4:	bfc4      	itt	gt
 800f5e6:	3b04      	subgt	r3, #4
 800f5e8:	9305      	strgt	r3, [sp, #20]
 800f5ea:	9b05      	ldr	r3, [sp, #20]
 800f5ec:	f1a3 0302 	sub.w	r3, r3, #2
 800f5f0:	bfcc      	ite	gt
 800f5f2:	2500      	movgt	r5, #0
 800f5f4:	2501      	movle	r5, #1
 800f5f6:	2b03      	cmp	r3, #3
 800f5f8:	d869      	bhi.n	800f6ce <_dtoa_r+0x2c6>
 800f5fa:	e8df f003 	tbb	[pc, r3]
 800f5fe:	4e2c      	.short	0x4e2c
 800f600:	5a4c      	.short	0x5a4c
 800f602:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f606:	441d      	add	r5, r3
 800f608:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f60c:	2b20      	cmp	r3, #32
 800f60e:	bfc1      	itttt	gt
 800f610:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f614:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f618:	fa09 f303 	lslgt.w	r3, r9, r3
 800f61c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f620:	bfda      	itte	le
 800f622:	f1c3 0320 	rsble	r3, r3, #32
 800f626:	fa06 f003 	lslle.w	r0, r6, r3
 800f62a:	4318      	orrgt	r0, r3
 800f62c:	f7f0 ff92 	bl	8000554 <__aeabi_ui2d>
 800f630:	2301      	movs	r3, #1
 800f632:	4606      	mov	r6, r0
 800f634:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f638:	3d01      	subs	r5, #1
 800f63a:	9310      	str	r3, [sp, #64]	; 0x40
 800f63c:	e771      	b.n	800f522 <_dtoa_r+0x11a>
 800f63e:	2301      	movs	r3, #1
 800f640:	e7b6      	b.n	800f5b0 <_dtoa_r+0x1a8>
 800f642:	900e      	str	r0, [sp, #56]	; 0x38
 800f644:	e7b5      	b.n	800f5b2 <_dtoa_r+0x1aa>
 800f646:	f1ca 0300 	rsb	r3, sl, #0
 800f64a:	9306      	str	r3, [sp, #24]
 800f64c:	2300      	movs	r3, #0
 800f64e:	eba8 080a 	sub.w	r8, r8, sl
 800f652:	930d      	str	r3, [sp, #52]	; 0x34
 800f654:	e7c2      	b.n	800f5dc <_dtoa_r+0x1d4>
 800f656:	2300      	movs	r3, #0
 800f658:	9308      	str	r3, [sp, #32]
 800f65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	dc39      	bgt.n	800f6d4 <_dtoa_r+0x2cc>
 800f660:	f04f 0901 	mov.w	r9, #1
 800f664:	f8cd 9004 	str.w	r9, [sp, #4]
 800f668:	464b      	mov	r3, r9
 800f66a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f66e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f670:	2200      	movs	r2, #0
 800f672:	6042      	str	r2, [r0, #4]
 800f674:	2204      	movs	r2, #4
 800f676:	f102 0614 	add.w	r6, r2, #20
 800f67a:	429e      	cmp	r6, r3
 800f67c:	6841      	ldr	r1, [r0, #4]
 800f67e:	d92f      	bls.n	800f6e0 <_dtoa_r+0x2d8>
 800f680:	4620      	mov	r0, r4
 800f682:	f001 fa59 	bl	8010b38 <_Balloc>
 800f686:	9000      	str	r0, [sp, #0]
 800f688:	2800      	cmp	r0, #0
 800f68a:	d14b      	bne.n	800f724 <_dtoa_r+0x31c>
 800f68c:	4b24      	ldr	r3, [pc, #144]	; (800f720 <_dtoa_r+0x318>)
 800f68e:	4602      	mov	r2, r0
 800f690:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f694:	e6d1      	b.n	800f43a <_dtoa_r+0x32>
 800f696:	2301      	movs	r3, #1
 800f698:	e7de      	b.n	800f658 <_dtoa_r+0x250>
 800f69a:	2300      	movs	r3, #0
 800f69c:	9308      	str	r3, [sp, #32]
 800f69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6a0:	eb0a 0903 	add.w	r9, sl, r3
 800f6a4:	f109 0301 	add.w	r3, r9, #1
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	9301      	str	r3, [sp, #4]
 800f6ac:	bfb8      	it	lt
 800f6ae:	2301      	movlt	r3, #1
 800f6b0:	e7dd      	b.n	800f66e <_dtoa_r+0x266>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e7f2      	b.n	800f69c <_dtoa_r+0x294>
 800f6b6:	2501      	movs	r5, #1
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	9305      	str	r3, [sp, #20]
 800f6bc:	9508      	str	r5, [sp, #32]
 800f6be:	f04f 39ff 	mov.w	r9, #4294967295
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6c8:	2312      	movs	r3, #18
 800f6ca:	9209      	str	r2, [sp, #36]	; 0x24
 800f6cc:	e7cf      	b.n	800f66e <_dtoa_r+0x266>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	9308      	str	r3, [sp, #32]
 800f6d2:	e7f4      	b.n	800f6be <_dtoa_r+0x2b6>
 800f6d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f6d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6dc:	464b      	mov	r3, r9
 800f6de:	e7c6      	b.n	800f66e <_dtoa_r+0x266>
 800f6e0:	3101      	adds	r1, #1
 800f6e2:	6041      	str	r1, [r0, #4]
 800f6e4:	0052      	lsls	r2, r2, #1
 800f6e6:	e7c6      	b.n	800f676 <_dtoa_r+0x26e>
 800f6e8:	636f4361 	.word	0x636f4361
 800f6ec:	3fd287a7 	.word	0x3fd287a7
 800f6f0:	8b60c8b3 	.word	0x8b60c8b3
 800f6f4:	3fc68a28 	.word	0x3fc68a28
 800f6f8:	509f79fb 	.word	0x509f79fb
 800f6fc:	3fd34413 	.word	0x3fd34413
 800f700:	08013516 	.word	0x08013516
 800f704:	0801352d 	.word	0x0801352d
 800f708:	7ff00000 	.word	0x7ff00000
 800f70c:	08013512 	.word	0x08013512
 800f710:	08013509 	.word	0x08013509
 800f714:	08013395 	.word	0x08013395
 800f718:	3ff80000 	.word	0x3ff80000
 800f71c:	08013708 	.word	0x08013708
 800f720:	0801358c 	.word	0x0801358c
 800f724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f726:	9a00      	ldr	r2, [sp, #0]
 800f728:	601a      	str	r2, [r3, #0]
 800f72a:	9b01      	ldr	r3, [sp, #4]
 800f72c:	2b0e      	cmp	r3, #14
 800f72e:	f200 80ad 	bhi.w	800f88c <_dtoa_r+0x484>
 800f732:	2d00      	cmp	r5, #0
 800f734:	f000 80aa 	beq.w	800f88c <_dtoa_r+0x484>
 800f738:	f1ba 0f00 	cmp.w	sl, #0
 800f73c:	dd36      	ble.n	800f7ac <_dtoa_r+0x3a4>
 800f73e:	4ac3      	ldr	r2, [pc, #780]	; (800fa4c <_dtoa_r+0x644>)
 800f740:	f00a 030f 	and.w	r3, sl, #15
 800f744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f748:	ed93 7b00 	vldr	d7, [r3]
 800f74c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f750:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f754:	eeb0 8a47 	vmov.f32	s16, s14
 800f758:	eef0 8a67 	vmov.f32	s17, s15
 800f75c:	d016      	beq.n	800f78c <_dtoa_r+0x384>
 800f75e:	4bbc      	ldr	r3, [pc, #752]	; (800fa50 <_dtoa_r+0x648>)
 800f760:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f764:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f768:	f7f1 f898 	bl	800089c <__aeabi_ddiv>
 800f76c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f770:	f007 070f 	and.w	r7, r7, #15
 800f774:	2503      	movs	r5, #3
 800f776:	4eb6      	ldr	r6, [pc, #728]	; (800fa50 <_dtoa_r+0x648>)
 800f778:	b957      	cbnz	r7, 800f790 <_dtoa_r+0x388>
 800f77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f77e:	ec53 2b18 	vmov	r2, r3, d8
 800f782:	f7f1 f88b 	bl	800089c <__aeabi_ddiv>
 800f786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f78a:	e029      	b.n	800f7e0 <_dtoa_r+0x3d8>
 800f78c:	2502      	movs	r5, #2
 800f78e:	e7f2      	b.n	800f776 <_dtoa_r+0x36e>
 800f790:	07f9      	lsls	r1, r7, #31
 800f792:	d508      	bpl.n	800f7a6 <_dtoa_r+0x39e>
 800f794:	ec51 0b18 	vmov	r0, r1, d8
 800f798:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f79c:	f7f0 ff54 	bl	8000648 <__aeabi_dmul>
 800f7a0:	ec41 0b18 	vmov	d8, r0, r1
 800f7a4:	3501      	adds	r5, #1
 800f7a6:	107f      	asrs	r7, r7, #1
 800f7a8:	3608      	adds	r6, #8
 800f7aa:	e7e5      	b.n	800f778 <_dtoa_r+0x370>
 800f7ac:	f000 80a6 	beq.w	800f8fc <_dtoa_r+0x4f4>
 800f7b0:	f1ca 0600 	rsb	r6, sl, #0
 800f7b4:	4ba5      	ldr	r3, [pc, #660]	; (800fa4c <_dtoa_r+0x644>)
 800f7b6:	4fa6      	ldr	r7, [pc, #664]	; (800fa50 <_dtoa_r+0x648>)
 800f7b8:	f006 020f 	and.w	r2, r6, #15
 800f7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f7c8:	f7f0 ff3e 	bl	8000648 <__aeabi_dmul>
 800f7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7d0:	1136      	asrs	r6, r6, #4
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	2502      	movs	r5, #2
 800f7d6:	2e00      	cmp	r6, #0
 800f7d8:	f040 8085 	bne.w	800f8e6 <_dtoa_r+0x4de>
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1d2      	bne.n	800f786 <_dtoa_r+0x37e>
 800f7e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f000 808c 	beq.w	800f900 <_dtoa_r+0x4f8>
 800f7e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f7ec:	4b99      	ldr	r3, [pc, #612]	; (800fa54 <_dtoa_r+0x64c>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	f7f1 f99a 	bl	8000b2c <__aeabi_dcmplt>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	f000 8081 	beq.w	800f900 <_dtoa_r+0x4f8>
 800f7fe:	9b01      	ldr	r3, [sp, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d07d      	beq.n	800f900 <_dtoa_r+0x4f8>
 800f804:	f1b9 0f00 	cmp.w	r9, #0
 800f808:	dd3c      	ble.n	800f884 <_dtoa_r+0x47c>
 800f80a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f80e:	9307      	str	r3, [sp, #28]
 800f810:	2200      	movs	r2, #0
 800f812:	4b91      	ldr	r3, [pc, #580]	; (800fa58 <_dtoa_r+0x650>)
 800f814:	4630      	mov	r0, r6
 800f816:	4639      	mov	r1, r7
 800f818:	f7f0 ff16 	bl	8000648 <__aeabi_dmul>
 800f81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f820:	3501      	adds	r5, #1
 800f822:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f826:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f82a:	4628      	mov	r0, r5
 800f82c:	f7f0 fea2 	bl	8000574 <__aeabi_i2d>
 800f830:	4632      	mov	r2, r6
 800f832:	463b      	mov	r3, r7
 800f834:	f7f0 ff08 	bl	8000648 <__aeabi_dmul>
 800f838:	4b88      	ldr	r3, [pc, #544]	; (800fa5c <_dtoa_r+0x654>)
 800f83a:	2200      	movs	r2, #0
 800f83c:	f7f0 fd4e 	bl	80002dc <__adddf3>
 800f840:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f848:	9303      	str	r3, [sp, #12]
 800f84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d15c      	bne.n	800f90a <_dtoa_r+0x502>
 800f850:	4b83      	ldr	r3, [pc, #524]	; (800fa60 <_dtoa_r+0x658>)
 800f852:	2200      	movs	r2, #0
 800f854:	4630      	mov	r0, r6
 800f856:	4639      	mov	r1, r7
 800f858:	f7f0 fd3e 	bl	80002d8 <__aeabi_dsub>
 800f85c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f860:	4606      	mov	r6, r0
 800f862:	460f      	mov	r7, r1
 800f864:	f7f1 f980 	bl	8000b68 <__aeabi_dcmpgt>
 800f868:	2800      	cmp	r0, #0
 800f86a:	f040 8296 	bne.w	800fd9a <_dtoa_r+0x992>
 800f86e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f872:	4630      	mov	r0, r6
 800f874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f878:	4639      	mov	r1, r7
 800f87a:	f7f1 f957 	bl	8000b2c <__aeabi_dcmplt>
 800f87e:	2800      	cmp	r0, #0
 800f880:	f040 8288 	bne.w	800fd94 <_dtoa_r+0x98c>
 800f884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f888:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f2c0 8158 	blt.w	800fb44 <_dtoa_r+0x73c>
 800f894:	f1ba 0f0e 	cmp.w	sl, #14
 800f898:	f300 8154 	bgt.w	800fb44 <_dtoa_r+0x73c>
 800f89c:	4b6b      	ldr	r3, [pc, #428]	; (800fa4c <_dtoa_r+0x644>)
 800f89e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f280 80e3 	bge.w	800fa74 <_dtoa_r+0x66c>
 800f8ae:	9b01      	ldr	r3, [sp, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f300 80df 	bgt.w	800fa74 <_dtoa_r+0x66c>
 800f8b6:	f040 826d 	bne.w	800fd94 <_dtoa_r+0x98c>
 800f8ba:	4b69      	ldr	r3, [pc, #420]	; (800fa60 <_dtoa_r+0x658>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	4640      	mov	r0, r8
 800f8c0:	4649      	mov	r1, r9
 800f8c2:	f7f0 fec1 	bl	8000648 <__aeabi_dmul>
 800f8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8ca:	f7f1 f943 	bl	8000b54 <__aeabi_dcmpge>
 800f8ce:	9e01      	ldr	r6, [sp, #4]
 800f8d0:	4637      	mov	r7, r6
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	f040 8243 	bne.w	800fd5e <_dtoa_r+0x956>
 800f8d8:	9d00      	ldr	r5, [sp, #0]
 800f8da:	2331      	movs	r3, #49	; 0x31
 800f8dc:	f805 3b01 	strb.w	r3, [r5], #1
 800f8e0:	f10a 0a01 	add.w	sl, sl, #1
 800f8e4:	e23f      	b.n	800fd66 <_dtoa_r+0x95e>
 800f8e6:	07f2      	lsls	r2, r6, #31
 800f8e8:	d505      	bpl.n	800f8f6 <_dtoa_r+0x4ee>
 800f8ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8ee:	f7f0 feab 	bl	8000648 <__aeabi_dmul>
 800f8f2:	3501      	adds	r5, #1
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	1076      	asrs	r6, r6, #1
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	e76c      	b.n	800f7d6 <_dtoa_r+0x3ce>
 800f8fc:	2502      	movs	r5, #2
 800f8fe:	e76f      	b.n	800f7e0 <_dtoa_r+0x3d8>
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	f8cd a01c 	str.w	sl, [sp, #28]
 800f906:	930c      	str	r3, [sp, #48]	; 0x30
 800f908:	e78d      	b.n	800f826 <_dtoa_r+0x41e>
 800f90a:	9900      	ldr	r1, [sp, #0]
 800f90c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f90e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f910:	4b4e      	ldr	r3, [pc, #312]	; (800fa4c <_dtoa_r+0x644>)
 800f912:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f916:	4401      	add	r1, r0
 800f918:	9102      	str	r1, [sp, #8]
 800f91a:	9908      	ldr	r1, [sp, #32]
 800f91c:	eeb0 8a47 	vmov.f32	s16, s14
 800f920:	eef0 8a67 	vmov.f32	s17, s15
 800f924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f928:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f92c:	2900      	cmp	r1, #0
 800f92e:	d045      	beq.n	800f9bc <_dtoa_r+0x5b4>
 800f930:	494c      	ldr	r1, [pc, #304]	; (800fa64 <_dtoa_r+0x65c>)
 800f932:	2000      	movs	r0, #0
 800f934:	f7f0 ffb2 	bl	800089c <__aeabi_ddiv>
 800f938:	ec53 2b18 	vmov	r2, r3, d8
 800f93c:	f7f0 fccc 	bl	80002d8 <__aeabi_dsub>
 800f940:	9d00      	ldr	r5, [sp, #0]
 800f942:	ec41 0b18 	vmov	d8, r0, r1
 800f946:	4639      	mov	r1, r7
 800f948:	4630      	mov	r0, r6
 800f94a:	f7f1 f92d 	bl	8000ba8 <__aeabi_d2iz>
 800f94e:	900c      	str	r0, [sp, #48]	; 0x30
 800f950:	f7f0 fe10 	bl	8000574 <__aeabi_i2d>
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	4630      	mov	r0, r6
 800f95a:	4639      	mov	r1, r7
 800f95c:	f7f0 fcbc 	bl	80002d8 <__aeabi_dsub>
 800f960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f962:	3330      	adds	r3, #48	; 0x30
 800f964:	f805 3b01 	strb.w	r3, [r5], #1
 800f968:	ec53 2b18 	vmov	r2, r3, d8
 800f96c:	4606      	mov	r6, r0
 800f96e:	460f      	mov	r7, r1
 800f970:	f7f1 f8dc 	bl	8000b2c <__aeabi_dcmplt>
 800f974:	2800      	cmp	r0, #0
 800f976:	d165      	bne.n	800fa44 <_dtoa_r+0x63c>
 800f978:	4632      	mov	r2, r6
 800f97a:	463b      	mov	r3, r7
 800f97c:	4935      	ldr	r1, [pc, #212]	; (800fa54 <_dtoa_r+0x64c>)
 800f97e:	2000      	movs	r0, #0
 800f980:	f7f0 fcaa 	bl	80002d8 <__aeabi_dsub>
 800f984:	ec53 2b18 	vmov	r2, r3, d8
 800f988:	f7f1 f8d0 	bl	8000b2c <__aeabi_dcmplt>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	f040 80b9 	bne.w	800fb04 <_dtoa_r+0x6fc>
 800f992:	9b02      	ldr	r3, [sp, #8]
 800f994:	429d      	cmp	r5, r3
 800f996:	f43f af75 	beq.w	800f884 <_dtoa_r+0x47c>
 800f99a:	4b2f      	ldr	r3, [pc, #188]	; (800fa58 <_dtoa_r+0x650>)
 800f99c:	ec51 0b18 	vmov	r0, r1, d8
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	f7f0 fe51 	bl	8000648 <__aeabi_dmul>
 800f9a6:	4b2c      	ldr	r3, [pc, #176]	; (800fa58 <_dtoa_r+0x650>)
 800f9a8:	ec41 0b18 	vmov	d8, r0, r1
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	f7f0 fe49 	bl	8000648 <__aeabi_dmul>
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	460f      	mov	r7, r1
 800f9ba:	e7c4      	b.n	800f946 <_dtoa_r+0x53e>
 800f9bc:	ec51 0b17 	vmov	r0, r1, d7
 800f9c0:	f7f0 fe42 	bl	8000648 <__aeabi_dmul>
 800f9c4:	9b02      	ldr	r3, [sp, #8]
 800f9c6:	9d00      	ldr	r5, [sp, #0]
 800f9c8:	930c      	str	r3, [sp, #48]	; 0x30
 800f9ca:	ec41 0b18 	vmov	d8, r0, r1
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f7f1 f8e9 	bl	8000ba8 <__aeabi_d2iz>
 800f9d6:	9011      	str	r0, [sp, #68]	; 0x44
 800f9d8:	f7f0 fdcc 	bl	8000574 <__aeabi_i2d>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	f7f0 fc78 	bl	80002d8 <__aeabi_dsub>
 800f9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9ea:	3330      	adds	r3, #48	; 0x30
 800f9ec:	f805 3b01 	strb.w	r3, [r5], #1
 800f9f0:	9b02      	ldr	r3, [sp, #8]
 800f9f2:	429d      	cmp	r5, r3
 800f9f4:	4606      	mov	r6, r0
 800f9f6:	460f      	mov	r7, r1
 800f9f8:	f04f 0200 	mov.w	r2, #0
 800f9fc:	d134      	bne.n	800fa68 <_dtoa_r+0x660>
 800f9fe:	4b19      	ldr	r3, [pc, #100]	; (800fa64 <_dtoa_r+0x65c>)
 800fa00:	ec51 0b18 	vmov	r0, r1, d8
 800fa04:	f7f0 fc6a 	bl	80002dc <__adddf3>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	4639      	mov	r1, r7
 800fa10:	f7f1 f8aa 	bl	8000b68 <__aeabi_dcmpgt>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d175      	bne.n	800fb04 <_dtoa_r+0x6fc>
 800fa18:	ec53 2b18 	vmov	r2, r3, d8
 800fa1c:	4911      	ldr	r1, [pc, #68]	; (800fa64 <_dtoa_r+0x65c>)
 800fa1e:	2000      	movs	r0, #0
 800fa20:	f7f0 fc5a 	bl	80002d8 <__aeabi_dsub>
 800fa24:	4602      	mov	r2, r0
 800fa26:	460b      	mov	r3, r1
 800fa28:	4630      	mov	r0, r6
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	f7f1 f87e 	bl	8000b2c <__aeabi_dcmplt>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	f43f af27 	beq.w	800f884 <_dtoa_r+0x47c>
 800fa36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa38:	1e6b      	subs	r3, r5, #1
 800fa3a:	930c      	str	r3, [sp, #48]	; 0x30
 800fa3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa40:	2b30      	cmp	r3, #48	; 0x30
 800fa42:	d0f8      	beq.n	800fa36 <_dtoa_r+0x62e>
 800fa44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa48:	e04a      	b.n	800fae0 <_dtoa_r+0x6d8>
 800fa4a:	bf00      	nop
 800fa4c:	08013708 	.word	0x08013708
 800fa50:	080136e0 	.word	0x080136e0
 800fa54:	3ff00000 	.word	0x3ff00000
 800fa58:	40240000 	.word	0x40240000
 800fa5c:	401c0000 	.word	0x401c0000
 800fa60:	40140000 	.word	0x40140000
 800fa64:	3fe00000 	.word	0x3fe00000
 800fa68:	4baf      	ldr	r3, [pc, #700]	; (800fd28 <_dtoa_r+0x920>)
 800fa6a:	f7f0 fded 	bl	8000648 <__aeabi_dmul>
 800fa6e:	4606      	mov	r6, r0
 800fa70:	460f      	mov	r7, r1
 800fa72:	e7ac      	b.n	800f9ce <_dtoa_r+0x5c6>
 800fa74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fa78:	9d00      	ldr	r5, [sp, #0]
 800fa7a:	4642      	mov	r2, r8
 800fa7c:	464b      	mov	r3, r9
 800fa7e:	4630      	mov	r0, r6
 800fa80:	4639      	mov	r1, r7
 800fa82:	f7f0 ff0b 	bl	800089c <__aeabi_ddiv>
 800fa86:	f7f1 f88f 	bl	8000ba8 <__aeabi_d2iz>
 800fa8a:	9002      	str	r0, [sp, #8]
 800fa8c:	f7f0 fd72 	bl	8000574 <__aeabi_i2d>
 800fa90:	4642      	mov	r2, r8
 800fa92:	464b      	mov	r3, r9
 800fa94:	f7f0 fdd8 	bl	8000648 <__aeabi_dmul>
 800fa98:	4602      	mov	r2, r0
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	4639      	mov	r1, r7
 800faa0:	f7f0 fc1a 	bl	80002d8 <__aeabi_dsub>
 800faa4:	9e02      	ldr	r6, [sp, #8]
 800faa6:	9f01      	ldr	r7, [sp, #4]
 800faa8:	3630      	adds	r6, #48	; 0x30
 800faaa:	f805 6b01 	strb.w	r6, [r5], #1
 800faae:	9e00      	ldr	r6, [sp, #0]
 800fab0:	1bae      	subs	r6, r5, r6
 800fab2:	42b7      	cmp	r7, r6
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	d137      	bne.n	800fb2a <_dtoa_r+0x722>
 800faba:	f7f0 fc0f 	bl	80002dc <__adddf3>
 800fabe:	4642      	mov	r2, r8
 800fac0:	464b      	mov	r3, r9
 800fac2:	4606      	mov	r6, r0
 800fac4:	460f      	mov	r7, r1
 800fac6:	f7f1 f84f 	bl	8000b68 <__aeabi_dcmpgt>
 800faca:	b9c8      	cbnz	r0, 800fb00 <_dtoa_r+0x6f8>
 800facc:	4642      	mov	r2, r8
 800face:	464b      	mov	r3, r9
 800fad0:	4630      	mov	r0, r6
 800fad2:	4639      	mov	r1, r7
 800fad4:	f7f1 f820 	bl	8000b18 <__aeabi_dcmpeq>
 800fad8:	b110      	cbz	r0, 800fae0 <_dtoa_r+0x6d8>
 800fada:	9b02      	ldr	r3, [sp, #8]
 800fadc:	07d9      	lsls	r1, r3, #31
 800fade:	d40f      	bmi.n	800fb00 <_dtoa_r+0x6f8>
 800fae0:	4620      	mov	r0, r4
 800fae2:	4659      	mov	r1, fp
 800fae4:	f001 f868 	bl	8010bb8 <_Bfree>
 800fae8:	2300      	movs	r3, #0
 800faea:	702b      	strb	r3, [r5, #0]
 800faec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faee:	f10a 0001 	add.w	r0, sl, #1
 800faf2:	6018      	str	r0, [r3, #0]
 800faf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f43f acd8 	beq.w	800f4ac <_dtoa_r+0xa4>
 800fafc:	601d      	str	r5, [r3, #0]
 800fafe:	e4d5      	b.n	800f4ac <_dtoa_r+0xa4>
 800fb00:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb04:	462b      	mov	r3, r5
 800fb06:	461d      	mov	r5, r3
 800fb08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb0c:	2a39      	cmp	r2, #57	; 0x39
 800fb0e:	d108      	bne.n	800fb22 <_dtoa_r+0x71a>
 800fb10:	9a00      	ldr	r2, [sp, #0]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d1f7      	bne.n	800fb06 <_dtoa_r+0x6fe>
 800fb16:	9a07      	ldr	r2, [sp, #28]
 800fb18:	9900      	ldr	r1, [sp, #0]
 800fb1a:	3201      	adds	r2, #1
 800fb1c:	9207      	str	r2, [sp, #28]
 800fb1e:	2230      	movs	r2, #48	; 0x30
 800fb20:	700a      	strb	r2, [r1, #0]
 800fb22:	781a      	ldrb	r2, [r3, #0]
 800fb24:	3201      	adds	r2, #1
 800fb26:	701a      	strb	r2, [r3, #0]
 800fb28:	e78c      	b.n	800fa44 <_dtoa_r+0x63c>
 800fb2a:	4b7f      	ldr	r3, [pc, #508]	; (800fd28 <_dtoa_r+0x920>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f7f0 fd8b 	bl	8000648 <__aeabi_dmul>
 800fb32:	2200      	movs	r2, #0
 800fb34:	2300      	movs	r3, #0
 800fb36:	4606      	mov	r6, r0
 800fb38:	460f      	mov	r7, r1
 800fb3a:	f7f0 ffed 	bl	8000b18 <__aeabi_dcmpeq>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d09b      	beq.n	800fa7a <_dtoa_r+0x672>
 800fb42:	e7cd      	b.n	800fae0 <_dtoa_r+0x6d8>
 800fb44:	9a08      	ldr	r2, [sp, #32]
 800fb46:	2a00      	cmp	r2, #0
 800fb48:	f000 80c4 	beq.w	800fcd4 <_dtoa_r+0x8cc>
 800fb4c:	9a05      	ldr	r2, [sp, #20]
 800fb4e:	2a01      	cmp	r2, #1
 800fb50:	f300 80a8 	bgt.w	800fca4 <_dtoa_r+0x89c>
 800fb54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb56:	2a00      	cmp	r2, #0
 800fb58:	f000 80a0 	beq.w	800fc9c <_dtoa_r+0x894>
 800fb5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fb60:	9e06      	ldr	r6, [sp, #24]
 800fb62:	4645      	mov	r5, r8
 800fb64:	9a04      	ldr	r2, [sp, #16]
 800fb66:	2101      	movs	r1, #1
 800fb68:	441a      	add	r2, r3
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	4498      	add	r8, r3
 800fb6e:	9204      	str	r2, [sp, #16]
 800fb70:	f001 f928 	bl	8010dc4 <__i2b>
 800fb74:	4607      	mov	r7, r0
 800fb76:	2d00      	cmp	r5, #0
 800fb78:	dd0b      	ble.n	800fb92 <_dtoa_r+0x78a>
 800fb7a:	9b04      	ldr	r3, [sp, #16]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	dd08      	ble.n	800fb92 <_dtoa_r+0x78a>
 800fb80:	42ab      	cmp	r3, r5
 800fb82:	9a04      	ldr	r2, [sp, #16]
 800fb84:	bfa8      	it	ge
 800fb86:	462b      	movge	r3, r5
 800fb88:	eba8 0803 	sub.w	r8, r8, r3
 800fb8c:	1aed      	subs	r5, r5, r3
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	9304      	str	r3, [sp, #16]
 800fb92:	9b06      	ldr	r3, [sp, #24]
 800fb94:	b1fb      	cbz	r3, 800fbd6 <_dtoa_r+0x7ce>
 800fb96:	9b08      	ldr	r3, [sp, #32]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	f000 809f 	beq.w	800fcdc <_dtoa_r+0x8d4>
 800fb9e:	2e00      	cmp	r6, #0
 800fba0:	dd11      	ble.n	800fbc6 <_dtoa_r+0x7be>
 800fba2:	4639      	mov	r1, r7
 800fba4:	4632      	mov	r2, r6
 800fba6:	4620      	mov	r0, r4
 800fba8:	f001 f9c8 	bl	8010f3c <__pow5mult>
 800fbac:	465a      	mov	r2, fp
 800fbae:	4601      	mov	r1, r0
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f001 f91c 	bl	8010df0 <__multiply>
 800fbb8:	4659      	mov	r1, fp
 800fbba:	9007      	str	r0, [sp, #28]
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f000 fffb 	bl	8010bb8 <_Bfree>
 800fbc2:	9b07      	ldr	r3, [sp, #28]
 800fbc4:	469b      	mov	fp, r3
 800fbc6:	9b06      	ldr	r3, [sp, #24]
 800fbc8:	1b9a      	subs	r2, r3, r6
 800fbca:	d004      	beq.n	800fbd6 <_dtoa_r+0x7ce>
 800fbcc:	4659      	mov	r1, fp
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f001 f9b4 	bl	8010f3c <__pow5mult>
 800fbd4:	4683      	mov	fp, r0
 800fbd6:	2101      	movs	r1, #1
 800fbd8:	4620      	mov	r0, r4
 800fbda:	f001 f8f3 	bl	8010dc4 <__i2b>
 800fbde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	dd7c      	ble.n	800fce0 <_dtoa_r+0x8d8>
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	4601      	mov	r1, r0
 800fbea:	4620      	mov	r0, r4
 800fbec:	f001 f9a6 	bl	8010f3c <__pow5mult>
 800fbf0:	9b05      	ldr	r3, [sp, #20]
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	4606      	mov	r6, r0
 800fbf6:	dd76      	ble.n	800fce6 <_dtoa_r+0x8de>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	9306      	str	r3, [sp, #24]
 800fbfc:	6933      	ldr	r3, [r6, #16]
 800fbfe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc02:	6918      	ldr	r0, [r3, #16]
 800fc04:	f001 f88e 	bl	8010d24 <__hi0bits>
 800fc08:	f1c0 0020 	rsb	r0, r0, #32
 800fc0c:	9b04      	ldr	r3, [sp, #16]
 800fc0e:	4418      	add	r0, r3
 800fc10:	f010 001f 	ands.w	r0, r0, #31
 800fc14:	f000 8086 	beq.w	800fd24 <_dtoa_r+0x91c>
 800fc18:	f1c0 0320 	rsb	r3, r0, #32
 800fc1c:	2b04      	cmp	r3, #4
 800fc1e:	dd7f      	ble.n	800fd20 <_dtoa_r+0x918>
 800fc20:	f1c0 001c 	rsb	r0, r0, #28
 800fc24:	9b04      	ldr	r3, [sp, #16]
 800fc26:	4403      	add	r3, r0
 800fc28:	4480      	add	r8, r0
 800fc2a:	4405      	add	r5, r0
 800fc2c:	9304      	str	r3, [sp, #16]
 800fc2e:	f1b8 0f00 	cmp.w	r8, #0
 800fc32:	dd05      	ble.n	800fc40 <_dtoa_r+0x838>
 800fc34:	4659      	mov	r1, fp
 800fc36:	4642      	mov	r2, r8
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f001 f9d9 	bl	8010ff0 <__lshift>
 800fc3e:	4683      	mov	fp, r0
 800fc40:	9b04      	ldr	r3, [sp, #16]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	dd05      	ble.n	800fc52 <_dtoa_r+0x84a>
 800fc46:	4631      	mov	r1, r6
 800fc48:	461a      	mov	r2, r3
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f001 f9d0 	bl	8010ff0 <__lshift>
 800fc50:	4606      	mov	r6, r0
 800fc52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d069      	beq.n	800fd2c <_dtoa_r+0x924>
 800fc58:	4631      	mov	r1, r6
 800fc5a:	4658      	mov	r0, fp
 800fc5c:	f001 fa34 	bl	80110c8 <__mcmp>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	da63      	bge.n	800fd2c <_dtoa_r+0x924>
 800fc64:	2300      	movs	r3, #0
 800fc66:	4659      	mov	r1, fp
 800fc68:	220a      	movs	r2, #10
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f000 ffc6 	bl	8010bfc <__multadd>
 800fc70:	9b08      	ldr	r3, [sp, #32]
 800fc72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc76:	4683      	mov	fp, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 818f 	beq.w	800ff9c <_dtoa_r+0xb94>
 800fc7e:	4639      	mov	r1, r7
 800fc80:	2300      	movs	r3, #0
 800fc82:	220a      	movs	r2, #10
 800fc84:	4620      	mov	r0, r4
 800fc86:	f000 ffb9 	bl	8010bfc <__multadd>
 800fc8a:	f1b9 0f00 	cmp.w	r9, #0
 800fc8e:	4607      	mov	r7, r0
 800fc90:	f300 808e 	bgt.w	800fdb0 <_dtoa_r+0x9a8>
 800fc94:	9b05      	ldr	r3, [sp, #20]
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	dc50      	bgt.n	800fd3c <_dtoa_r+0x934>
 800fc9a:	e089      	b.n	800fdb0 <_dtoa_r+0x9a8>
 800fc9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fca2:	e75d      	b.n	800fb60 <_dtoa_r+0x758>
 800fca4:	9b01      	ldr	r3, [sp, #4]
 800fca6:	1e5e      	subs	r6, r3, #1
 800fca8:	9b06      	ldr	r3, [sp, #24]
 800fcaa:	42b3      	cmp	r3, r6
 800fcac:	bfbf      	itttt	lt
 800fcae:	9b06      	ldrlt	r3, [sp, #24]
 800fcb0:	9606      	strlt	r6, [sp, #24]
 800fcb2:	1af2      	sublt	r2, r6, r3
 800fcb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fcb6:	bfb6      	itet	lt
 800fcb8:	189b      	addlt	r3, r3, r2
 800fcba:	1b9e      	subge	r6, r3, r6
 800fcbc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fcbe:	9b01      	ldr	r3, [sp, #4]
 800fcc0:	bfb8      	it	lt
 800fcc2:	2600      	movlt	r6, #0
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	bfb5      	itete	lt
 800fcc8:	eba8 0503 	sublt.w	r5, r8, r3
 800fccc:	9b01      	ldrge	r3, [sp, #4]
 800fcce:	2300      	movlt	r3, #0
 800fcd0:	4645      	movge	r5, r8
 800fcd2:	e747      	b.n	800fb64 <_dtoa_r+0x75c>
 800fcd4:	9e06      	ldr	r6, [sp, #24]
 800fcd6:	9f08      	ldr	r7, [sp, #32]
 800fcd8:	4645      	mov	r5, r8
 800fcda:	e74c      	b.n	800fb76 <_dtoa_r+0x76e>
 800fcdc:	9a06      	ldr	r2, [sp, #24]
 800fcde:	e775      	b.n	800fbcc <_dtoa_r+0x7c4>
 800fce0:	9b05      	ldr	r3, [sp, #20]
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	dc18      	bgt.n	800fd18 <_dtoa_r+0x910>
 800fce6:	9b02      	ldr	r3, [sp, #8]
 800fce8:	b9b3      	cbnz	r3, 800fd18 <_dtoa_r+0x910>
 800fcea:	9b03      	ldr	r3, [sp, #12]
 800fcec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcf0:	b9a3      	cbnz	r3, 800fd1c <_dtoa_r+0x914>
 800fcf2:	9b03      	ldr	r3, [sp, #12]
 800fcf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcf8:	0d1b      	lsrs	r3, r3, #20
 800fcfa:	051b      	lsls	r3, r3, #20
 800fcfc:	b12b      	cbz	r3, 800fd0a <_dtoa_r+0x902>
 800fcfe:	9b04      	ldr	r3, [sp, #16]
 800fd00:	3301      	adds	r3, #1
 800fd02:	9304      	str	r3, [sp, #16]
 800fd04:	f108 0801 	add.w	r8, r8, #1
 800fd08:	2301      	movs	r3, #1
 800fd0a:	9306      	str	r3, [sp, #24]
 800fd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f47f af74 	bne.w	800fbfc <_dtoa_r+0x7f4>
 800fd14:	2001      	movs	r0, #1
 800fd16:	e779      	b.n	800fc0c <_dtoa_r+0x804>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	e7f6      	b.n	800fd0a <_dtoa_r+0x902>
 800fd1c:	9b02      	ldr	r3, [sp, #8]
 800fd1e:	e7f4      	b.n	800fd0a <_dtoa_r+0x902>
 800fd20:	d085      	beq.n	800fc2e <_dtoa_r+0x826>
 800fd22:	4618      	mov	r0, r3
 800fd24:	301c      	adds	r0, #28
 800fd26:	e77d      	b.n	800fc24 <_dtoa_r+0x81c>
 800fd28:	40240000 	.word	0x40240000
 800fd2c:	9b01      	ldr	r3, [sp, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	dc38      	bgt.n	800fda4 <_dtoa_r+0x99c>
 800fd32:	9b05      	ldr	r3, [sp, #20]
 800fd34:	2b02      	cmp	r3, #2
 800fd36:	dd35      	ble.n	800fda4 <_dtoa_r+0x99c>
 800fd38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fd3c:	f1b9 0f00 	cmp.w	r9, #0
 800fd40:	d10d      	bne.n	800fd5e <_dtoa_r+0x956>
 800fd42:	4631      	mov	r1, r6
 800fd44:	464b      	mov	r3, r9
 800fd46:	2205      	movs	r2, #5
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f000 ff57 	bl	8010bfc <__multadd>
 800fd4e:	4601      	mov	r1, r0
 800fd50:	4606      	mov	r6, r0
 800fd52:	4658      	mov	r0, fp
 800fd54:	f001 f9b8 	bl	80110c8 <__mcmp>
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	f73f adbd 	bgt.w	800f8d8 <_dtoa_r+0x4d0>
 800fd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd60:	9d00      	ldr	r5, [sp, #0]
 800fd62:	ea6f 0a03 	mvn.w	sl, r3
 800fd66:	f04f 0800 	mov.w	r8, #0
 800fd6a:	4631      	mov	r1, r6
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f000 ff23 	bl	8010bb8 <_Bfree>
 800fd72:	2f00      	cmp	r7, #0
 800fd74:	f43f aeb4 	beq.w	800fae0 <_dtoa_r+0x6d8>
 800fd78:	f1b8 0f00 	cmp.w	r8, #0
 800fd7c:	d005      	beq.n	800fd8a <_dtoa_r+0x982>
 800fd7e:	45b8      	cmp	r8, r7
 800fd80:	d003      	beq.n	800fd8a <_dtoa_r+0x982>
 800fd82:	4641      	mov	r1, r8
 800fd84:	4620      	mov	r0, r4
 800fd86:	f000 ff17 	bl	8010bb8 <_Bfree>
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f000 ff13 	bl	8010bb8 <_Bfree>
 800fd92:	e6a5      	b.n	800fae0 <_dtoa_r+0x6d8>
 800fd94:	2600      	movs	r6, #0
 800fd96:	4637      	mov	r7, r6
 800fd98:	e7e1      	b.n	800fd5e <_dtoa_r+0x956>
 800fd9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fd9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fda0:	4637      	mov	r7, r6
 800fda2:	e599      	b.n	800f8d8 <_dtoa_r+0x4d0>
 800fda4:	9b08      	ldr	r3, [sp, #32]
 800fda6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 80fd 	beq.w	800ffaa <_dtoa_r+0xba2>
 800fdb0:	2d00      	cmp	r5, #0
 800fdb2:	dd05      	ble.n	800fdc0 <_dtoa_r+0x9b8>
 800fdb4:	4639      	mov	r1, r7
 800fdb6:	462a      	mov	r2, r5
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f001 f919 	bl	8010ff0 <__lshift>
 800fdbe:	4607      	mov	r7, r0
 800fdc0:	9b06      	ldr	r3, [sp, #24]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d05c      	beq.n	800fe80 <_dtoa_r+0xa78>
 800fdc6:	6879      	ldr	r1, [r7, #4]
 800fdc8:	4620      	mov	r0, r4
 800fdca:	f000 feb5 	bl	8010b38 <_Balloc>
 800fdce:	4605      	mov	r5, r0
 800fdd0:	b928      	cbnz	r0, 800fdde <_dtoa_r+0x9d6>
 800fdd2:	4b80      	ldr	r3, [pc, #512]	; (800ffd4 <_dtoa_r+0xbcc>)
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fdda:	f7ff bb2e 	b.w	800f43a <_dtoa_r+0x32>
 800fdde:	693a      	ldr	r2, [r7, #16]
 800fde0:	3202      	adds	r2, #2
 800fde2:	0092      	lsls	r2, r2, #2
 800fde4:	f107 010c 	add.w	r1, r7, #12
 800fde8:	300c      	adds	r0, #12
 800fdea:	f7fd fdf3 	bl	800d9d4 <memcpy>
 800fdee:	2201      	movs	r2, #1
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	f001 f8fc 	bl	8010ff0 <__lshift>
 800fdf8:	9b00      	ldr	r3, [sp, #0]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	9b00      	ldr	r3, [sp, #0]
 800fe00:	444b      	add	r3, r9
 800fe02:	9307      	str	r3, [sp, #28]
 800fe04:	9b02      	ldr	r3, [sp, #8]
 800fe06:	f003 0301 	and.w	r3, r3, #1
 800fe0a:	46b8      	mov	r8, r7
 800fe0c:	9306      	str	r3, [sp, #24]
 800fe0e:	4607      	mov	r7, r0
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	4631      	mov	r1, r6
 800fe14:	3b01      	subs	r3, #1
 800fe16:	4658      	mov	r0, fp
 800fe18:	9302      	str	r3, [sp, #8]
 800fe1a:	f7ff fa69 	bl	800f2f0 <quorem>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	3330      	adds	r3, #48	; 0x30
 800fe22:	9004      	str	r0, [sp, #16]
 800fe24:	4641      	mov	r1, r8
 800fe26:	4658      	mov	r0, fp
 800fe28:	9308      	str	r3, [sp, #32]
 800fe2a:	f001 f94d 	bl	80110c8 <__mcmp>
 800fe2e:	463a      	mov	r2, r7
 800fe30:	4681      	mov	r9, r0
 800fe32:	4631      	mov	r1, r6
 800fe34:	4620      	mov	r0, r4
 800fe36:	f001 f963 	bl	8011100 <__mdiff>
 800fe3a:	68c2      	ldr	r2, [r0, #12]
 800fe3c:	9b08      	ldr	r3, [sp, #32]
 800fe3e:	4605      	mov	r5, r0
 800fe40:	bb02      	cbnz	r2, 800fe84 <_dtoa_r+0xa7c>
 800fe42:	4601      	mov	r1, r0
 800fe44:	4658      	mov	r0, fp
 800fe46:	f001 f93f 	bl	80110c8 <__mcmp>
 800fe4a:	9b08      	ldr	r3, [sp, #32]
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	4629      	mov	r1, r5
 800fe50:	4620      	mov	r0, r4
 800fe52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fe56:	f000 feaf 	bl	8010bb8 <_Bfree>
 800fe5a:	9b05      	ldr	r3, [sp, #20]
 800fe5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe5e:	9d01      	ldr	r5, [sp, #4]
 800fe60:	ea43 0102 	orr.w	r1, r3, r2
 800fe64:	9b06      	ldr	r3, [sp, #24]
 800fe66:	430b      	orrs	r3, r1
 800fe68:	9b08      	ldr	r3, [sp, #32]
 800fe6a:	d10d      	bne.n	800fe88 <_dtoa_r+0xa80>
 800fe6c:	2b39      	cmp	r3, #57	; 0x39
 800fe6e:	d029      	beq.n	800fec4 <_dtoa_r+0xabc>
 800fe70:	f1b9 0f00 	cmp.w	r9, #0
 800fe74:	dd01      	ble.n	800fe7a <_dtoa_r+0xa72>
 800fe76:	9b04      	ldr	r3, [sp, #16]
 800fe78:	3331      	adds	r3, #49	; 0x31
 800fe7a:	9a02      	ldr	r2, [sp, #8]
 800fe7c:	7013      	strb	r3, [r2, #0]
 800fe7e:	e774      	b.n	800fd6a <_dtoa_r+0x962>
 800fe80:	4638      	mov	r0, r7
 800fe82:	e7b9      	b.n	800fdf8 <_dtoa_r+0x9f0>
 800fe84:	2201      	movs	r2, #1
 800fe86:	e7e2      	b.n	800fe4e <_dtoa_r+0xa46>
 800fe88:	f1b9 0f00 	cmp.w	r9, #0
 800fe8c:	db06      	blt.n	800fe9c <_dtoa_r+0xa94>
 800fe8e:	9905      	ldr	r1, [sp, #20]
 800fe90:	ea41 0909 	orr.w	r9, r1, r9
 800fe94:	9906      	ldr	r1, [sp, #24]
 800fe96:	ea59 0101 	orrs.w	r1, r9, r1
 800fe9a:	d120      	bne.n	800fede <_dtoa_r+0xad6>
 800fe9c:	2a00      	cmp	r2, #0
 800fe9e:	ddec      	ble.n	800fe7a <_dtoa_r+0xa72>
 800fea0:	4659      	mov	r1, fp
 800fea2:	2201      	movs	r2, #1
 800fea4:	4620      	mov	r0, r4
 800fea6:	9301      	str	r3, [sp, #4]
 800fea8:	f001 f8a2 	bl	8010ff0 <__lshift>
 800feac:	4631      	mov	r1, r6
 800feae:	4683      	mov	fp, r0
 800feb0:	f001 f90a 	bl	80110c8 <__mcmp>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	9b01      	ldr	r3, [sp, #4]
 800feb8:	dc02      	bgt.n	800fec0 <_dtoa_r+0xab8>
 800feba:	d1de      	bne.n	800fe7a <_dtoa_r+0xa72>
 800febc:	07da      	lsls	r2, r3, #31
 800febe:	d5dc      	bpl.n	800fe7a <_dtoa_r+0xa72>
 800fec0:	2b39      	cmp	r3, #57	; 0x39
 800fec2:	d1d8      	bne.n	800fe76 <_dtoa_r+0xa6e>
 800fec4:	9a02      	ldr	r2, [sp, #8]
 800fec6:	2339      	movs	r3, #57	; 0x39
 800fec8:	7013      	strb	r3, [r2, #0]
 800feca:	462b      	mov	r3, r5
 800fecc:	461d      	mov	r5, r3
 800fece:	3b01      	subs	r3, #1
 800fed0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fed4:	2a39      	cmp	r2, #57	; 0x39
 800fed6:	d050      	beq.n	800ff7a <_dtoa_r+0xb72>
 800fed8:	3201      	adds	r2, #1
 800feda:	701a      	strb	r2, [r3, #0]
 800fedc:	e745      	b.n	800fd6a <_dtoa_r+0x962>
 800fede:	2a00      	cmp	r2, #0
 800fee0:	dd03      	ble.n	800feea <_dtoa_r+0xae2>
 800fee2:	2b39      	cmp	r3, #57	; 0x39
 800fee4:	d0ee      	beq.n	800fec4 <_dtoa_r+0xabc>
 800fee6:	3301      	adds	r3, #1
 800fee8:	e7c7      	b.n	800fe7a <_dtoa_r+0xa72>
 800feea:	9a01      	ldr	r2, [sp, #4]
 800feec:	9907      	ldr	r1, [sp, #28]
 800feee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fef2:	428a      	cmp	r2, r1
 800fef4:	d02a      	beq.n	800ff4c <_dtoa_r+0xb44>
 800fef6:	4659      	mov	r1, fp
 800fef8:	2300      	movs	r3, #0
 800fefa:	220a      	movs	r2, #10
 800fefc:	4620      	mov	r0, r4
 800fefe:	f000 fe7d 	bl	8010bfc <__multadd>
 800ff02:	45b8      	cmp	r8, r7
 800ff04:	4683      	mov	fp, r0
 800ff06:	f04f 0300 	mov.w	r3, #0
 800ff0a:	f04f 020a 	mov.w	r2, #10
 800ff0e:	4641      	mov	r1, r8
 800ff10:	4620      	mov	r0, r4
 800ff12:	d107      	bne.n	800ff24 <_dtoa_r+0xb1c>
 800ff14:	f000 fe72 	bl	8010bfc <__multadd>
 800ff18:	4680      	mov	r8, r0
 800ff1a:	4607      	mov	r7, r0
 800ff1c:	9b01      	ldr	r3, [sp, #4]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	e775      	b.n	800fe10 <_dtoa_r+0xa08>
 800ff24:	f000 fe6a 	bl	8010bfc <__multadd>
 800ff28:	4639      	mov	r1, r7
 800ff2a:	4680      	mov	r8, r0
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	220a      	movs	r2, #10
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 fe63 	bl	8010bfc <__multadd>
 800ff36:	4607      	mov	r7, r0
 800ff38:	e7f0      	b.n	800ff1c <_dtoa_r+0xb14>
 800ff3a:	f1b9 0f00 	cmp.w	r9, #0
 800ff3e:	9a00      	ldr	r2, [sp, #0]
 800ff40:	bfcc      	ite	gt
 800ff42:	464d      	movgt	r5, r9
 800ff44:	2501      	movle	r5, #1
 800ff46:	4415      	add	r5, r2
 800ff48:	f04f 0800 	mov.w	r8, #0
 800ff4c:	4659      	mov	r1, fp
 800ff4e:	2201      	movs	r2, #1
 800ff50:	4620      	mov	r0, r4
 800ff52:	9301      	str	r3, [sp, #4]
 800ff54:	f001 f84c 	bl	8010ff0 <__lshift>
 800ff58:	4631      	mov	r1, r6
 800ff5a:	4683      	mov	fp, r0
 800ff5c:	f001 f8b4 	bl	80110c8 <__mcmp>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	dcb2      	bgt.n	800feca <_dtoa_r+0xac2>
 800ff64:	d102      	bne.n	800ff6c <_dtoa_r+0xb64>
 800ff66:	9b01      	ldr	r3, [sp, #4]
 800ff68:	07db      	lsls	r3, r3, #31
 800ff6a:	d4ae      	bmi.n	800feca <_dtoa_r+0xac2>
 800ff6c:	462b      	mov	r3, r5
 800ff6e:	461d      	mov	r5, r3
 800ff70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff74:	2a30      	cmp	r2, #48	; 0x30
 800ff76:	d0fa      	beq.n	800ff6e <_dtoa_r+0xb66>
 800ff78:	e6f7      	b.n	800fd6a <_dtoa_r+0x962>
 800ff7a:	9a00      	ldr	r2, [sp, #0]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d1a5      	bne.n	800fecc <_dtoa_r+0xac4>
 800ff80:	f10a 0a01 	add.w	sl, sl, #1
 800ff84:	2331      	movs	r3, #49	; 0x31
 800ff86:	e779      	b.n	800fe7c <_dtoa_r+0xa74>
 800ff88:	4b13      	ldr	r3, [pc, #76]	; (800ffd8 <_dtoa_r+0xbd0>)
 800ff8a:	f7ff baaf 	b.w	800f4ec <_dtoa_r+0xe4>
 800ff8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	f47f aa86 	bne.w	800f4a2 <_dtoa_r+0x9a>
 800ff96:	4b11      	ldr	r3, [pc, #68]	; (800ffdc <_dtoa_r+0xbd4>)
 800ff98:	f7ff baa8 	b.w	800f4ec <_dtoa_r+0xe4>
 800ff9c:	f1b9 0f00 	cmp.w	r9, #0
 800ffa0:	dc03      	bgt.n	800ffaa <_dtoa_r+0xba2>
 800ffa2:	9b05      	ldr	r3, [sp, #20]
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	f73f aec9 	bgt.w	800fd3c <_dtoa_r+0x934>
 800ffaa:	9d00      	ldr	r5, [sp, #0]
 800ffac:	4631      	mov	r1, r6
 800ffae:	4658      	mov	r0, fp
 800ffb0:	f7ff f99e 	bl	800f2f0 <quorem>
 800ffb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ffb8:	f805 3b01 	strb.w	r3, [r5], #1
 800ffbc:	9a00      	ldr	r2, [sp, #0]
 800ffbe:	1aaa      	subs	r2, r5, r2
 800ffc0:	4591      	cmp	r9, r2
 800ffc2:	ddba      	ble.n	800ff3a <_dtoa_r+0xb32>
 800ffc4:	4659      	mov	r1, fp
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	220a      	movs	r2, #10
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f000 fe16 	bl	8010bfc <__multadd>
 800ffd0:	4683      	mov	fp, r0
 800ffd2:	e7eb      	b.n	800ffac <_dtoa_r+0xba4>
 800ffd4:	0801358c 	.word	0x0801358c
 800ffd8:	08013394 	.word	0x08013394
 800ffdc:	08013509 	.word	0x08013509

0800ffe0 <__sflush_r>:
 800ffe0:	898a      	ldrh	r2, [r1, #12]
 800ffe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	0710      	lsls	r0, r2, #28
 800ffea:	460c      	mov	r4, r1
 800ffec:	d458      	bmi.n	80100a0 <__sflush_r+0xc0>
 800ffee:	684b      	ldr	r3, [r1, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	dc05      	bgt.n	8010000 <__sflush_r+0x20>
 800fff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	dc02      	bgt.n	8010000 <__sflush_r+0x20>
 800fffa:	2000      	movs	r0, #0
 800fffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010002:	2e00      	cmp	r6, #0
 8010004:	d0f9      	beq.n	800fffa <__sflush_r+0x1a>
 8010006:	2300      	movs	r3, #0
 8010008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801000c:	682f      	ldr	r7, [r5, #0]
 801000e:	602b      	str	r3, [r5, #0]
 8010010:	d032      	beq.n	8010078 <__sflush_r+0x98>
 8010012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010014:	89a3      	ldrh	r3, [r4, #12]
 8010016:	075a      	lsls	r2, r3, #29
 8010018:	d505      	bpl.n	8010026 <__sflush_r+0x46>
 801001a:	6863      	ldr	r3, [r4, #4]
 801001c:	1ac0      	subs	r0, r0, r3
 801001e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010020:	b10b      	cbz	r3, 8010026 <__sflush_r+0x46>
 8010022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010024:	1ac0      	subs	r0, r0, r3
 8010026:	2300      	movs	r3, #0
 8010028:	4602      	mov	r2, r0
 801002a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801002c:	6a21      	ldr	r1, [r4, #32]
 801002e:	4628      	mov	r0, r5
 8010030:	47b0      	blx	r6
 8010032:	1c43      	adds	r3, r0, #1
 8010034:	89a3      	ldrh	r3, [r4, #12]
 8010036:	d106      	bne.n	8010046 <__sflush_r+0x66>
 8010038:	6829      	ldr	r1, [r5, #0]
 801003a:	291d      	cmp	r1, #29
 801003c:	d82c      	bhi.n	8010098 <__sflush_r+0xb8>
 801003e:	4a2a      	ldr	r2, [pc, #168]	; (80100e8 <__sflush_r+0x108>)
 8010040:	40ca      	lsrs	r2, r1
 8010042:	07d6      	lsls	r6, r2, #31
 8010044:	d528      	bpl.n	8010098 <__sflush_r+0xb8>
 8010046:	2200      	movs	r2, #0
 8010048:	6062      	str	r2, [r4, #4]
 801004a:	04d9      	lsls	r1, r3, #19
 801004c:	6922      	ldr	r2, [r4, #16]
 801004e:	6022      	str	r2, [r4, #0]
 8010050:	d504      	bpl.n	801005c <__sflush_r+0x7c>
 8010052:	1c42      	adds	r2, r0, #1
 8010054:	d101      	bne.n	801005a <__sflush_r+0x7a>
 8010056:	682b      	ldr	r3, [r5, #0]
 8010058:	b903      	cbnz	r3, 801005c <__sflush_r+0x7c>
 801005a:	6560      	str	r0, [r4, #84]	; 0x54
 801005c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801005e:	602f      	str	r7, [r5, #0]
 8010060:	2900      	cmp	r1, #0
 8010062:	d0ca      	beq.n	800fffa <__sflush_r+0x1a>
 8010064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010068:	4299      	cmp	r1, r3
 801006a:	d002      	beq.n	8010072 <__sflush_r+0x92>
 801006c:	4628      	mov	r0, r5
 801006e:	f001 fa2d 	bl	80114cc <_free_r>
 8010072:	2000      	movs	r0, #0
 8010074:	6360      	str	r0, [r4, #52]	; 0x34
 8010076:	e7c1      	b.n	800fffc <__sflush_r+0x1c>
 8010078:	6a21      	ldr	r1, [r4, #32]
 801007a:	2301      	movs	r3, #1
 801007c:	4628      	mov	r0, r5
 801007e:	47b0      	blx	r6
 8010080:	1c41      	adds	r1, r0, #1
 8010082:	d1c7      	bne.n	8010014 <__sflush_r+0x34>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d0c4      	beq.n	8010014 <__sflush_r+0x34>
 801008a:	2b1d      	cmp	r3, #29
 801008c:	d001      	beq.n	8010092 <__sflush_r+0xb2>
 801008e:	2b16      	cmp	r3, #22
 8010090:	d101      	bne.n	8010096 <__sflush_r+0xb6>
 8010092:	602f      	str	r7, [r5, #0]
 8010094:	e7b1      	b.n	800fffa <__sflush_r+0x1a>
 8010096:	89a3      	ldrh	r3, [r4, #12]
 8010098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801009c:	81a3      	strh	r3, [r4, #12]
 801009e:	e7ad      	b.n	800fffc <__sflush_r+0x1c>
 80100a0:	690f      	ldr	r7, [r1, #16]
 80100a2:	2f00      	cmp	r7, #0
 80100a4:	d0a9      	beq.n	800fffa <__sflush_r+0x1a>
 80100a6:	0793      	lsls	r3, r2, #30
 80100a8:	680e      	ldr	r6, [r1, #0]
 80100aa:	bf08      	it	eq
 80100ac:	694b      	ldreq	r3, [r1, #20]
 80100ae:	600f      	str	r7, [r1, #0]
 80100b0:	bf18      	it	ne
 80100b2:	2300      	movne	r3, #0
 80100b4:	eba6 0807 	sub.w	r8, r6, r7
 80100b8:	608b      	str	r3, [r1, #8]
 80100ba:	f1b8 0f00 	cmp.w	r8, #0
 80100be:	dd9c      	ble.n	800fffa <__sflush_r+0x1a>
 80100c0:	6a21      	ldr	r1, [r4, #32]
 80100c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80100c4:	4643      	mov	r3, r8
 80100c6:	463a      	mov	r2, r7
 80100c8:	4628      	mov	r0, r5
 80100ca:	47b0      	blx	r6
 80100cc:	2800      	cmp	r0, #0
 80100ce:	dc06      	bgt.n	80100de <__sflush_r+0xfe>
 80100d0:	89a3      	ldrh	r3, [r4, #12]
 80100d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100d6:	81a3      	strh	r3, [r4, #12]
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295
 80100dc:	e78e      	b.n	800fffc <__sflush_r+0x1c>
 80100de:	4407      	add	r7, r0
 80100e0:	eba8 0800 	sub.w	r8, r8, r0
 80100e4:	e7e9      	b.n	80100ba <__sflush_r+0xda>
 80100e6:	bf00      	nop
 80100e8:	20400001 	.word	0x20400001

080100ec <_fflush_r>:
 80100ec:	b538      	push	{r3, r4, r5, lr}
 80100ee:	690b      	ldr	r3, [r1, #16]
 80100f0:	4605      	mov	r5, r0
 80100f2:	460c      	mov	r4, r1
 80100f4:	b913      	cbnz	r3, 80100fc <_fflush_r+0x10>
 80100f6:	2500      	movs	r5, #0
 80100f8:	4628      	mov	r0, r5
 80100fa:	bd38      	pop	{r3, r4, r5, pc}
 80100fc:	b118      	cbz	r0, 8010106 <_fflush_r+0x1a>
 80100fe:	6983      	ldr	r3, [r0, #24]
 8010100:	b90b      	cbnz	r3, 8010106 <_fflush_r+0x1a>
 8010102:	f000 f887 	bl	8010214 <__sinit>
 8010106:	4b14      	ldr	r3, [pc, #80]	; (8010158 <_fflush_r+0x6c>)
 8010108:	429c      	cmp	r4, r3
 801010a:	d11b      	bne.n	8010144 <_fflush_r+0x58>
 801010c:	686c      	ldr	r4, [r5, #4]
 801010e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d0ef      	beq.n	80100f6 <_fflush_r+0xa>
 8010116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010118:	07d0      	lsls	r0, r2, #31
 801011a:	d404      	bmi.n	8010126 <_fflush_r+0x3a>
 801011c:	0599      	lsls	r1, r3, #22
 801011e:	d402      	bmi.n	8010126 <_fflush_r+0x3a>
 8010120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010122:	f000 fc88 	bl	8010a36 <__retarget_lock_acquire_recursive>
 8010126:	4628      	mov	r0, r5
 8010128:	4621      	mov	r1, r4
 801012a:	f7ff ff59 	bl	800ffe0 <__sflush_r>
 801012e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010130:	07da      	lsls	r2, r3, #31
 8010132:	4605      	mov	r5, r0
 8010134:	d4e0      	bmi.n	80100f8 <_fflush_r+0xc>
 8010136:	89a3      	ldrh	r3, [r4, #12]
 8010138:	059b      	lsls	r3, r3, #22
 801013a:	d4dd      	bmi.n	80100f8 <_fflush_r+0xc>
 801013c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801013e:	f000 fc7b 	bl	8010a38 <__retarget_lock_release_recursive>
 8010142:	e7d9      	b.n	80100f8 <_fflush_r+0xc>
 8010144:	4b05      	ldr	r3, [pc, #20]	; (801015c <_fflush_r+0x70>)
 8010146:	429c      	cmp	r4, r3
 8010148:	d101      	bne.n	801014e <_fflush_r+0x62>
 801014a:	68ac      	ldr	r4, [r5, #8]
 801014c:	e7df      	b.n	801010e <_fflush_r+0x22>
 801014e:	4b04      	ldr	r3, [pc, #16]	; (8010160 <_fflush_r+0x74>)
 8010150:	429c      	cmp	r4, r3
 8010152:	bf08      	it	eq
 8010154:	68ec      	ldreq	r4, [r5, #12]
 8010156:	e7da      	b.n	801010e <_fflush_r+0x22>
 8010158:	080135c0 	.word	0x080135c0
 801015c:	080135e0 	.word	0x080135e0
 8010160:	080135a0 	.word	0x080135a0

08010164 <std>:
 8010164:	2300      	movs	r3, #0
 8010166:	b510      	push	{r4, lr}
 8010168:	4604      	mov	r4, r0
 801016a:	e9c0 3300 	strd	r3, r3, [r0]
 801016e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010172:	6083      	str	r3, [r0, #8]
 8010174:	8181      	strh	r1, [r0, #12]
 8010176:	6643      	str	r3, [r0, #100]	; 0x64
 8010178:	81c2      	strh	r2, [r0, #14]
 801017a:	6183      	str	r3, [r0, #24]
 801017c:	4619      	mov	r1, r3
 801017e:	2208      	movs	r2, #8
 8010180:	305c      	adds	r0, #92	; 0x5c
 8010182:	f7fd fc35 	bl	800d9f0 <memset>
 8010186:	4b05      	ldr	r3, [pc, #20]	; (801019c <std+0x38>)
 8010188:	6263      	str	r3, [r4, #36]	; 0x24
 801018a:	4b05      	ldr	r3, [pc, #20]	; (80101a0 <std+0x3c>)
 801018c:	62a3      	str	r3, [r4, #40]	; 0x28
 801018e:	4b05      	ldr	r3, [pc, #20]	; (80101a4 <std+0x40>)
 8010190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010192:	4b05      	ldr	r3, [pc, #20]	; (80101a8 <std+0x44>)
 8010194:	6224      	str	r4, [r4, #32]
 8010196:	6323      	str	r3, [r4, #48]	; 0x30
 8010198:	bd10      	pop	{r4, pc}
 801019a:	bf00      	nop
 801019c:	08011909 	.word	0x08011909
 80101a0:	0801192b 	.word	0x0801192b
 80101a4:	08011963 	.word	0x08011963
 80101a8:	08011987 	.word	0x08011987

080101ac <_cleanup_r>:
 80101ac:	4901      	ldr	r1, [pc, #4]	; (80101b4 <_cleanup_r+0x8>)
 80101ae:	f000 b8af 	b.w	8010310 <_fwalk_reent>
 80101b2:	bf00      	nop
 80101b4:	080100ed 	.word	0x080100ed

080101b8 <__sfmoreglue>:
 80101b8:	b570      	push	{r4, r5, r6, lr}
 80101ba:	1e4a      	subs	r2, r1, #1
 80101bc:	2568      	movs	r5, #104	; 0x68
 80101be:	4355      	muls	r5, r2
 80101c0:	460e      	mov	r6, r1
 80101c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80101c6:	f001 f9d1 	bl	801156c <_malloc_r>
 80101ca:	4604      	mov	r4, r0
 80101cc:	b140      	cbz	r0, 80101e0 <__sfmoreglue+0x28>
 80101ce:	2100      	movs	r1, #0
 80101d0:	e9c0 1600 	strd	r1, r6, [r0]
 80101d4:	300c      	adds	r0, #12
 80101d6:	60a0      	str	r0, [r4, #8]
 80101d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80101dc:	f7fd fc08 	bl	800d9f0 <memset>
 80101e0:	4620      	mov	r0, r4
 80101e2:	bd70      	pop	{r4, r5, r6, pc}

080101e4 <__sfp_lock_acquire>:
 80101e4:	4801      	ldr	r0, [pc, #4]	; (80101ec <__sfp_lock_acquire+0x8>)
 80101e6:	f000 bc26 	b.w	8010a36 <__retarget_lock_acquire_recursive>
 80101ea:	bf00      	nop
 80101ec:	20009590 	.word	0x20009590

080101f0 <__sfp_lock_release>:
 80101f0:	4801      	ldr	r0, [pc, #4]	; (80101f8 <__sfp_lock_release+0x8>)
 80101f2:	f000 bc21 	b.w	8010a38 <__retarget_lock_release_recursive>
 80101f6:	bf00      	nop
 80101f8:	20009590 	.word	0x20009590

080101fc <__sinit_lock_acquire>:
 80101fc:	4801      	ldr	r0, [pc, #4]	; (8010204 <__sinit_lock_acquire+0x8>)
 80101fe:	f000 bc1a 	b.w	8010a36 <__retarget_lock_acquire_recursive>
 8010202:	bf00      	nop
 8010204:	2000958b 	.word	0x2000958b

08010208 <__sinit_lock_release>:
 8010208:	4801      	ldr	r0, [pc, #4]	; (8010210 <__sinit_lock_release+0x8>)
 801020a:	f000 bc15 	b.w	8010a38 <__retarget_lock_release_recursive>
 801020e:	bf00      	nop
 8010210:	2000958b 	.word	0x2000958b

08010214 <__sinit>:
 8010214:	b510      	push	{r4, lr}
 8010216:	4604      	mov	r4, r0
 8010218:	f7ff fff0 	bl	80101fc <__sinit_lock_acquire>
 801021c:	69a3      	ldr	r3, [r4, #24]
 801021e:	b11b      	cbz	r3, 8010228 <__sinit+0x14>
 8010220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010224:	f7ff bff0 	b.w	8010208 <__sinit_lock_release>
 8010228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801022c:	6523      	str	r3, [r4, #80]	; 0x50
 801022e:	4b13      	ldr	r3, [pc, #76]	; (801027c <__sinit+0x68>)
 8010230:	4a13      	ldr	r2, [pc, #76]	; (8010280 <__sinit+0x6c>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	62a2      	str	r2, [r4, #40]	; 0x28
 8010236:	42a3      	cmp	r3, r4
 8010238:	bf04      	itt	eq
 801023a:	2301      	moveq	r3, #1
 801023c:	61a3      	streq	r3, [r4, #24]
 801023e:	4620      	mov	r0, r4
 8010240:	f000 f820 	bl	8010284 <__sfp>
 8010244:	6060      	str	r0, [r4, #4]
 8010246:	4620      	mov	r0, r4
 8010248:	f000 f81c 	bl	8010284 <__sfp>
 801024c:	60a0      	str	r0, [r4, #8]
 801024e:	4620      	mov	r0, r4
 8010250:	f000 f818 	bl	8010284 <__sfp>
 8010254:	2200      	movs	r2, #0
 8010256:	60e0      	str	r0, [r4, #12]
 8010258:	2104      	movs	r1, #4
 801025a:	6860      	ldr	r0, [r4, #4]
 801025c:	f7ff ff82 	bl	8010164 <std>
 8010260:	68a0      	ldr	r0, [r4, #8]
 8010262:	2201      	movs	r2, #1
 8010264:	2109      	movs	r1, #9
 8010266:	f7ff ff7d 	bl	8010164 <std>
 801026a:	68e0      	ldr	r0, [r4, #12]
 801026c:	2202      	movs	r2, #2
 801026e:	2112      	movs	r1, #18
 8010270:	f7ff ff78 	bl	8010164 <std>
 8010274:	2301      	movs	r3, #1
 8010276:	61a3      	str	r3, [r4, #24]
 8010278:	e7d2      	b.n	8010220 <__sinit+0xc>
 801027a:	bf00      	nop
 801027c:	08013380 	.word	0x08013380
 8010280:	080101ad 	.word	0x080101ad

08010284 <__sfp>:
 8010284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010286:	4607      	mov	r7, r0
 8010288:	f7ff ffac 	bl	80101e4 <__sfp_lock_acquire>
 801028c:	4b1e      	ldr	r3, [pc, #120]	; (8010308 <__sfp+0x84>)
 801028e:	681e      	ldr	r6, [r3, #0]
 8010290:	69b3      	ldr	r3, [r6, #24]
 8010292:	b913      	cbnz	r3, 801029a <__sfp+0x16>
 8010294:	4630      	mov	r0, r6
 8010296:	f7ff ffbd 	bl	8010214 <__sinit>
 801029a:	3648      	adds	r6, #72	; 0x48
 801029c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102a0:	3b01      	subs	r3, #1
 80102a2:	d503      	bpl.n	80102ac <__sfp+0x28>
 80102a4:	6833      	ldr	r3, [r6, #0]
 80102a6:	b30b      	cbz	r3, 80102ec <__sfp+0x68>
 80102a8:	6836      	ldr	r6, [r6, #0]
 80102aa:	e7f7      	b.n	801029c <__sfp+0x18>
 80102ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102b0:	b9d5      	cbnz	r5, 80102e8 <__sfp+0x64>
 80102b2:	4b16      	ldr	r3, [pc, #88]	; (801030c <__sfp+0x88>)
 80102b4:	60e3      	str	r3, [r4, #12]
 80102b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80102ba:	6665      	str	r5, [r4, #100]	; 0x64
 80102bc:	f000 fbba 	bl	8010a34 <__retarget_lock_init_recursive>
 80102c0:	f7ff ff96 	bl	80101f0 <__sfp_lock_release>
 80102c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80102c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80102cc:	6025      	str	r5, [r4, #0]
 80102ce:	61a5      	str	r5, [r4, #24]
 80102d0:	2208      	movs	r2, #8
 80102d2:	4629      	mov	r1, r5
 80102d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80102d8:	f7fd fb8a 	bl	800d9f0 <memset>
 80102dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80102e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80102e4:	4620      	mov	r0, r4
 80102e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102e8:	3468      	adds	r4, #104	; 0x68
 80102ea:	e7d9      	b.n	80102a0 <__sfp+0x1c>
 80102ec:	2104      	movs	r1, #4
 80102ee:	4638      	mov	r0, r7
 80102f0:	f7ff ff62 	bl	80101b8 <__sfmoreglue>
 80102f4:	4604      	mov	r4, r0
 80102f6:	6030      	str	r0, [r6, #0]
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d1d5      	bne.n	80102a8 <__sfp+0x24>
 80102fc:	f7ff ff78 	bl	80101f0 <__sfp_lock_release>
 8010300:	230c      	movs	r3, #12
 8010302:	603b      	str	r3, [r7, #0]
 8010304:	e7ee      	b.n	80102e4 <__sfp+0x60>
 8010306:	bf00      	nop
 8010308:	08013380 	.word	0x08013380
 801030c:	ffff0001 	.word	0xffff0001

08010310 <_fwalk_reent>:
 8010310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010314:	4606      	mov	r6, r0
 8010316:	4688      	mov	r8, r1
 8010318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801031c:	2700      	movs	r7, #0
 801031e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010322:	f1b9 0901 	subs.w	r9, r9, #1
 8010326:	d505      	bpl.n	8010334 <_fwalk_reent+0x24>
 8010328:	6824      	ldr	r4, [r4, #0]
 801032a:	2c00      	cmp	r4, #0
 801032c:	d1f7      	bne.n	801031e <_fwalk_reent+0xe>
 801032e:	4638      	mov	r0, r7
 8010330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010334:	89ab      	ldrh	r3, [r5, #12]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d907      	bls.n	801034a <_fwalk_reent+0x3a>
 801033a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801033e:	3301      	adds	r3, #1
 8010340:	d003      	beq.n	801034a <_fwalk_reent+0x3a>
 8010342:	4629      	mov	r1, r5
 8010344:	4630      	mov	r0, r6
 8010346:	47c0      	blx	r8
 8010348:	4307      	orrs	r7, r0
 801034a:	3568      	adds	r5, #104	; 0x68
 801034c:	e7e9      	b.n	8010322 <_fwalk_reent+0x12>

0801034e <rshift>:
 801034e:	6903      	ldr	r3, [r0, #16]
 8010350:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010358:	ea4f 1261 	mov.w	r2, r1, asr #5
 801035c:	f100 0414 	add.w	r4, r0, #20
 8010360:	dd45      	ble.n	80103ee <rshift+0xa0>
 8010362:	f011 011f 	ands.w	r1, r1, #31
 8010366:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801036a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801036e:	d10c      	bne.n	801038a <rshift+0x3c>
 8010370:	f100 0710 	add.w	r7, r0, #16
 8010374:	4629      	mov	r1, r5
 8010376:	42b1      	cmp	r1, r6
 8010378:	d334      	bcc.n	80103e4 <rshift+0x96>
 801037a:	1a9b      	subs	r3, r3, r2
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	1eea      	subs	r2, r5, #3
 8010380:	4296      	cmp	r6, r2
 8010382:	bf38      	it	cc
 8010384:	2300      	movcc	r3, #0
 8010386:	4423      	add	r3, r4
 8010388:	e015      	b.n	80103b6 <rshift+0x68>
 801038a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801038e:	f1c1 0820 	rsb	r8, r1, #32
 8010392:	40cf      	lsrs	r7, r1
 8010394:	f105 0e04 	add.w	lr, r5, #4
 8010398:	46a1      	mov	r9, r4
 801039a:	4576      	cmp	r6, lr
 801039c:	46f4      	mov	ip, lr
 801039e:	d815      	bhi.n	80103cc <rshift+0x7e>
 80103a0:	1a9b      	subs	r3, r3, r2
 80103a2:	009a      	lsls	r2, r3, #2
 80103a4:	3a04      	subs	r2, #4
 80103a6:	3501      	adds	r5, #1
 80103a8:	42ae      	cmp	r6, r5
 80103aa:	bf38      	it	cc
 80103ac:	2200      	movcc	r2, #0
 80103ae:	18a3      	adds	r3, r4, r2
 80103b0:	50a7      	str	r7, [r4, r2]
 80103b2:	b107      	cbz	r7, 80103b6 <rshift+0x68>
 80103b4:	3304      	adds	r3, #4
 80103b6:	1b1a      	subs	r2, r3, r4
 80103b8:	42a3      	cmp	r3, r4
 80103ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80103be:	bf08      	it	eq
 80103c0:	2300      	moveq	r3, #0
 80103c2:	6102      	str	r2, [r0, #16]
 80103c4:	bf08      	it	eq
 80103c6:	6143      	streq	r3, [r0, #20]
 80103c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103cc:	f8dc c000 	ldr.w	ip, [ip]
 80103d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80103d4:	ea4c 0707 	orr.w	r7, ip, r7
 80103d8:	f849 7b04 	str.w	r7, [r9], #4
 80103dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80103e0:	40cf      	lsrs	r7, r1
 80103e2:	e7da      	b.n	801039a <rshift+0x4c>
 80103e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80103e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80103ec:	e7c3      	b.n	8010376 <rshift+0x28>
 80103ee:	4623      	mov	r3, r4
 80103f0:	e7e1      	b.n	80103b6 <rshift+0x68>

080103f2 <__hexdig_fun>:
 80103f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80103f6:	2b09      	cmp	r3, #9
 80103f8:	d802      	bhi.n	8010400 <__hexdig_fun+0xe>
 80103fa:	3820      	subs	r0, #32
 80103fc:	b2c0      	uxtb	r0, r0
 80103fe:	4770      	bx	lr
 8010400:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010404:	2b05      	cmp	r3, #5
 8010406:	d801      	bhi.n	801040c <__hexdig_fun+0x1a>
 8010408:	3847      	subs	r0, #71	; 0x47
 801040a:	e7f7      	b.n	80103fc <__hexdig_fun+0xa>
 801040c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010410:	2b05      	cmp	r3, #5
 8010412:	d801      	bhi.n	8010418 <__hexdig_fun+0x26>
 8010414:	3827      	subs	r0, #39	; 0x27
 8010416:	e7f1      	b.n	80103fc <__hexdig_fun+0xa>
 8010418:	2000      	movs	r0, #0
 801041a:	4770      	bx	lr

0801041c <__gethex>:
 801041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010420:	ed2d 8b02 	vpush	{d8}
 8010424:	b089      	sub	sp, #36	; 0x24
 8010426:	ee08 0a10 	vmov	s16, r0
 801042a:	9304      	str	r3, [sp, #16]
 801042c:	4bbc      	ldr	r3, [pc, #752]	; (8010720 <__gethex+0x304>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	9301      	str	r3, [sp, #4]
 8010432:	4618      	mov	r0, r3
 8010434:	468b      	mov	fp, r1
 8010436:	4690      	mov	r8, r2
 8010438:	f7ef fef2 	bl	8000220 <strlen>
 801043c:	9b01      	ldr	r3, [sp, #4]
 801043e:	f8db 2000 	ldr.w	r2, [fp]
 8010442:	4403      	add	r3, r0
 8010444:	4682      	mov	sl, r0
 8010446:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801044a:	9305      	str	r3, [sp, #20]
 801044c:	1c93      	adds	r3, r2, #2
 801044e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010452:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010456:	32fe      	adds	r2, #254	; 0xfe
 8010458:	18d1      	adds	r1, r2, r3
 801045a:	461f      	mov	r7, r3
 801045c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010460:	9100      	str	r1, [sp, #0]
 8010462:	2830      	cmp	r0, #48	; 0x30
 8010464:	d0f8      	beq.n	8010458 <__gethex+0x3c>
 8010466:	f7ff ffc4 	bl	80103f2 <__hexdig_fun>
 801046a:	4604      	mov	r4, r0
 801046c:	2800      	cmp	r0, #0
 801046e:	d13a      	bne.n	80104e6 <__gethex+0xca>
 8010470:	9901      	ldr	r1, [sp, #4]
 8010472:	4652      	mov	r2, sl
 8010474:	4638      	mov	r0, r7
 8010476:	f001 fa8a 	bl	801198e <strncmp>
 801047a:	4605      	mov	r5, r0
 801047c:	2800      	cmp	r0, #0
 801047e:	d168      	bne.n	8010552 <__gethex+0x136>
 8010480:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010484:	eb07 060a 	add.w	r6, r7, sl
 8010488:	f7ff ffb3 	bl	80103f2 <__hexdig_fun>
 801048c:	2800      	cmp	r0, #0
 801048e:	d062      	beq.n	8010556 <__gethex+0x13a>
 8010490:	4633      	mov	r3, r6
 8010492:	7818      	ldrb	r0, [r3, #0]
 8010494:	2830      	cmp	r0, #48	; 0x30
 8010496:	461f      	mov	r7, r3
 8010498:	f103 0301 	add.w	r3, r3, #1
 801049c:	d0f9      	beq.n	8010492 <__gethex+0x76>
 801049e:	f7ff ffa8 	bl	80103f2 <__hexdig_fun>
 80104a2:	2301      	movs	r3, #1
 80104a4:	fab0 f480 	clz	r4, r0
 80104a8:	0964      	lsrs	r4, r4, #5
 80104aa:	4635      	mov	r5, r6
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	463a      	mov	r2, r7
 80104b0:	4616      	mov	r6, r2
 80104b2:	3201      	adds	r2, #1
 80104b4:	7830      	ldrb	r0, [r6, #0]
 80104b6:	f7ff ff9c 	bl	80103f2 <__hexdig_fun>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d1f8      	bne.n	80104b0 <__gethex+0x94>
 80104be:	9901      	ldr	r1, [sp, #4]
 80104c0:	4652      	mov	r2, sl
 80104c2:	4630      	mov	r0, r6
 80104c4:	f001 fa63 	bl	801198e <strncmp>
 80104c8:	b980      	cbnz	r0, 80104ec <__gethex+0xd0>
 80104ca:	b94d      	cbnz	r5, 80104e0 <__gethex+0xc4>
 80104cc:	eb06 050a 	add.w	r5, r6, sl
 80104d0:	462a      	mov	r2, r5
 80104d2:	4616      	mov	r6, r2
 80104d4:	3201      	adds	r2, #1
 80104d6:	7830      	ldrb	r0, [r6, #0]
 80104d8:	f7ff ff8b 	bl	80103f2 <__hexdig_fun>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d1f8      	bne.n	80104d2 <__gethex+0xb6>
 80104e0:	1bad      	subs	r5, r5, r6
 80104e2:	00ad      	lsls	r5, r5, #2
 80104e4:	e004      	b.n	80104f0 <__gethex+0xd4>
 80104e6:	2400      	movs	r4, #0
 80104e8:	4625      	mov	r5, r4
 80104ea:	e7e0      	b.n	80104ae <__gethex+0x92>
 80104ec:	2d00      	cmp	r5, #0
 80104ee:	d1f7      	bne.n	80104e0 <__gethex+0xc4>
 80104f0:	7833      	ldrb	r3, [r6, #0]
 80104f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80104f6:	2b50      	cmp	r3, #80	; 0x50
 80104f8:	d13b      	bne.n	8010572 <__gethex+0x156>
 80104fa:	7873      	ldrb	r3, [r6, #1]
 80104fc:	2b2b      	cmp	r3, #43	; 0x2b
 80104fe:	d02c      	beq.n	801055a <__gethex+0x13e>
 8010500:	2b2d      	cmp	r3, #45	; 0x2d
 8010502:	d02e      	beq.n	8010562 <__gethex+0x146>
 8010504:	1c71      	adds	r1, r6, #1
 8010506:	f04f 0900 	mov.w	r9, #0
 801050a:	7808      	ldrb	r0, [r1, #0]
 801050c:	f7ff ff71 	bl	80103f2 <__hexdig_fun>
 8010510:	1e43      	subs	r3, r0, #1
 8010512:	b2db      	uxtb	r3, r3
 8010514:	2b18      	cmp	r3, #24
 8010516:	d82c      	bhi.n	8010572 <__gethex+0x156>
 8010518:	f1a0 0210 	sub.w	r2, r0, #16
 801051c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010520:	f7ff ff67 	bl	80103f2 <__hexdig_fun>
 8010524:	1e43      	subs	r3, r0, #1
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b18      	cmp	r3, #24
 801052a:	d91d      	bls.n	8010568 <__gethex+0x14c>
 801052c:	f1b9 0f00 	cmp.w	r9, #0
 8010530:	d000      	beq.n	8010534 <__gethex+0x118>
 8010532:	4252      	negs	r2, r2
 8010534:	4415      	add	r5, r2
 8010536:	f8cb 1000 	str.w	r1, [fp]
 801053a:	b1e4      	cbz	r4, 8010576 <__gethex+0x15a>
 801053c:	9b00      	ldr	r3, [sp, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	bf14      	ite	ne
 8010542:	2700      	movne	r7, #0
 8010544:	2706      	moveq	r7, #6
 8010546:	4638      	mov	r0, r7
 8010548:	b009      	add	sp, #36	; 0x24
 801054a:	ecbd 8b02 	vpop	{d8}
 801054e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010552:	463e      	mov	r6, r7
 8010554:	4625      	mov	r5, r4
 8010556:	2401      	movs	r4, #1
 8010558:	e7ca      	b.n	80104f0 <__gethex+0xd4>
 801055a:	f04f 0900 	mov.w	r9, #0
 801055e:	1cb1      	adds	r1, r6, #2
 8010560:	e7d3      	b.n	801050a <__gethex+0xee>
 8010562:	f04f 0901 	mov.w	r9, #1
 8010566:	e7fa      	b.n	801055e <__gethex+0x142>
 8010568:	230a      	movs	r3, #10
 801056a:	fb03 0202 	mla	r2, r3, r2, r0
 801056e:	3a10      	subs	r2, #16
 8010570:	e7d4      	b.n	801051c <__gethex+0x100>
 8010572:	4631      	mov	r1, r6
 8010574:	e7df      	b.n	8010536 <__gethex+0x11a>
 8010576:	1bf3      	subs	r3, r6, r7
 8010578:	3b01      	subs	r3, #1
 801057a:	4621      	mov	r1, r4
 801057c:	2b07      	cmp	r3, #7
 801057e:	dc0b      	bgt.n	8010598 <__gethex+0x17c>
 8010580:	ee18 0a10 	vmov	r0, s16
 8010584:	f000 fad8 	bl	8010b38 <_Balloc>
 8010588:	4604      	mov	r4, r0
 801058a:	b940      	cbnz	r0, 801059e <__gethex+0x182>
 801058c:	4b65      	ldr	r3, [pc, #404]	; (8010724 <__gethex+0x308>)
 801058e:	4602      	mov	r2, r0
 8010590:	21de      	movs	r1, #222	; 0xde
 8010592:	4865      	ldr	r0, [pc, #404]	; (8010728 <__gethex+0x30c>)
 8010594:	f001 fa2c 	bl	80119f0 <__assert_func>
 8010598:	3101      	adds	r1, #1
 801059a:	105b      	asrs	r3, r3, #1
 801059c:	e7ee      	b.n	801057c <__gethex+0x160>
 801059e:	f100 0914 	add.w	r9, r0, #20
 80105a2:	f04f 0b00 	mov.w	fp, #0
 80105a6:	f1ca 0301 	rsb	r3, sl, #1
 80105aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80105ae:	f8cd b000 	str.w	fp, [sp]
 80105b2:	9306      	str	r3, [sp, #24]
 80105b4:	42b7      	cmp	r7, r6
 80105b6:	d340      	bcc.n	801063a <__gethex+0x21e>
 80105b8:	9802      	ldr	r0, [sp, #8]
 80105ba:	9b00      	ldr	r3, [sp, #0]
 80105bc:	f840 3b04 	str.w	r3, [r0], #4
 80105c0:	eba0 0009 	sub.w	r0, r0, r9
 80105c4:	1080      	asrs	r0, r0, #2
 80105c6:	0146      	lsls	r6, r0, #5
 80105c8:	6120      	str	r0, [r4, #16]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f000 fbaa 	bl	8010d24 <__hi0bits>
 80105d0:	1a30      	subs	r0, r6, r0
 80105d2:	f8d8 6000 	ldr.w	r6, [r8]
 80105d6:	42b0      	cmp	r0, r6
 80105d8:	dd63      	ble.n	80106a2 <__gethex+0x286>
 80105da:	1b87      	subs	r7, r0, r6
 80105dc:	4639      	mov	r1, r7
 80105de:	4620      	mov	r0, r4
 80105e0:	f000 ff44 	bl	801146c <__any_on>
 80105e4:	4682      	mov	sl, r0
 80105e6:	b1a8      	cbz	r0, 8010614 <__gethex+0x1f8>
 80105e8:	1e7b      	subs	r3, r7, #1
 80105ea:	1159      	asrs	r1, r3, #5
 80105ec:	f003 021f 	and.w	r2, r3, #31
 80105f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80105f4:	f04f 0a01 	mov.w	sl, #1
 80105f8:	fa0a f202 	lsl.w	r2, sl, r2
 80105fc:	420a      	tst	r2, r1
 80105fe:	d009      	beq.n	8010614 <__gethex+0x1f8>
 8010600:	4553      	cmp	r3, sl
 8010602:	dd05      	ble.n	8010610 <__gethex+0x1f4>
 8010604:	1eb9      	subs	r1, r7, #2
 8010606:	4620      	mov	r0, r4
 8010608:	f000 ff30 	bl	801146c <__any_on>
 801060c:	2800      	cmp	r0, #0
 801060e:	d145      	bne.n	801069c <__gethex+0x280>
 8010610:	f04f 0a02 	mov.w	sl, #2
 8010614:	4639      	mov	r1, r7
 8010616:	4620      	mov	r0, r4
 8010618:	f7ff fe99 	bl	801034e <rshift>
 801061c:	443d      	add	r5, r7
 801061e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010622:	42ab      	cmp	r3, r5
 8010624:	da4c      	bge.n	80106c0 <__gethex+0x2a4>
 8010626:	ee18 0a10 	vmov	r0, s16
 801062a:	4621      	mov	r1, r4
 801062c:	f000 fac4 	bl	8010bb8 <_Bfree>
 8010630:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010632:	2300      	movs	r3, #0
 8010634:	6013      	str	r3, [r2, #0]
 8010636:	27a3      	movs	r7, #163	; 0xa3
 8010638:	e785      	b.n	8010546 <__gethex+0x12a>
 801063a:	1e73      	subs	r3, r6, #1
 801063c:	9a05      	ldr	r2, [sp, #20]
 801063e:	9303      	str	r3, [sp, #12]
 8010640:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010644:	4293      	cmp	r3, r2
 8010646:	d019      	beq.n	801067c <__gethex+0x260>
 8010648:	f1bb 0f20 	cmp.w	fp, #32
 801064c:	d107      	bne.n	801065e <__gethex+0x242>
 801064e:	9b02      	ldr	r3, [sp, #8]
 8010650:	9a00      	ldr	r2, [sp, #0]
 8010652:	f843 2b04 	str.w	r2, [r3], #4
 8010656:	9302      	str	r3, [sp, #8]
 8010658:	2300      	movs	r3, #0
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	469b      	mov	fp, r3
 801065e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010662:	f7ff fec6 	bl	80103f2 <__hexdig_fun>
 8010666:	9b00      	ldr	r3, [sp, #0]
 8010668:	f000 000f 	and.w	r0, r0, #15
 801066c:	fa00 f00b 	lsl.w	r0, r0, fp
 8010670:	4303      	orrs	r3, r0
 8010672:	9300      	str	r3, [sp, #0]
 8010674:	f10b 0b04 	add.w	fp, fp, #4
 8010678:	9b03      	ldr	r3, [sp, #12]
 801067a:	e00d      	b.n	8010698 <__gethex+0x27c>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	9a06      	ldr	r2, [sp, #24]
 8010680:	4413      	add	r3, r2
 8010682:	42bb      	cmp	r3, r7
 8010684:	d3e0      	bcc.n	8010648 <__gethex+0x22c>
 8010686:	4618      	mov	r0, r3
 8010688:	9901      	ldr	r1, [sp, #4]
 801068a:	9307      	str	r3, [sp, #28]
 801068c:	4652      	mov	r2, sl
 801068e:	f001 f97e 	bl	801198e <strncmp>
 8010692:	9b07      	ldr	r3, [sp, #28]
 8010694:	2800      	cmp	r0, #0
 8010696:	d1d7      	bne.n	8010648 <__gethex+0x22c>
 8010698:	461e      	mov	r6, r3
 801069a:	e78b      	b.n	80105b4 <__gethex+0x198>
 801069c:	f04f 0a03 	mov.w	sl, #3
 80106a0:	e7b8      	b.n	8010614 <__gethex+0x1f8>
 80106a2:	da0a      	bge.n	80106ba <__gethex+0x29e>
 80106a4:	1a37      	subs	r7, r6, r0
 80106a6:	4621      	mov	r1, r4
 80106a8:	ee18 0a10 	vmov	r0, s16
 80106ac:	463a      	mov	r2, r7
 80106ae:	f000 fc9f 	bl	8010ff0 <__lshift>
 80106b2:	1bed      	subs	r5, r5, r7
 80106b4:	4604      	mov	r4, r0
 80106b6:	f100 0914 	add.w	r9, r0, #20
 80106ba:	f04f 0a00 	mov.w	sl, #0
 80106be:	e7ae      	b.n	801061e <__gethex+0x202>
 80106c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80106c4:	42a8      	cmp	r0, r5
 80106c6:	dd72      	ble.n	80107ae <__gethex+0x392>
 80106c8:	1b45      	subs	r5, r0, r5
 80106ca:	42ae      	cmp	r6, r5
 80106cc:	dc36      	bgt.n	801073c <__gethex+0x320>
 80106ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d02a      	beq.n	801072c <__gethex+0x310>
 80106d6:	2b03      	cmp	r3, #3
 80106d8:	d02c      	beq.n	8010734 <__gethex+0x318>
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d115      	bne.n	801070a <__gethex+0x2ee>
 80106de:	42ae      	cmp	r6, r5
 80106e0:	d113      	bne.n	801070a <__gethex+0x2ee>
 80106e2:	2e01      	cmp	r6, #1
 80106e4:	d10b      	bne.n	80106fe <__gethex+0x2e2>
 80106e6:	9a04      	ldr	r2, [sp, #16]
 80106e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106ec:	6013      	str	r3, [r2, #0]
 80106ee:	2301      	movs	r3, #1
 80106f0:	6123      	str	r3, [r4, #16]
 80106f2:	f8c9 3000 	str.w	r3, [r9]
 80106f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80106f8:	2762      	movs	r7, #98	; 0x62
 80106fa:	601c      	str	r4, [r3, #0]
 80106fc:	e723      	b.n	8010546 <__gethex+0x12a>
 80106fe:	1e71      	subs	r1, r6, #1
 8010700:	4620      	mov	r0, r4
 8010702:	f000 feb3 	bl	801146c <__any_on>
 8010706:	2800      	cmp	r0, #0
 8010708:	d1ed      	bne.n	80106e6 <__gethex+0x2ca>
 801070a:	ee18 0a10 	vmov	r0, s16
 801070e:	4621      	mov	r1, r4
 8010710:	f000 fa52 	bl	8010bb8 <_Bfree>
 8010714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010716:	2300      	movs	r3, #0
 8010718:	6013      	str	r3, [r2, #0]
 801071a:	2750      	movs	r7, #80	; 0x50
 801071c:	e713      	b.n	8010546 <__gethex+0x12a>
 801071e:	bf00      	nop
 8010720:	0801366c 	.word	0x0801366c
 8010724:	0801358c 	.word	0x0801358c
 8010728:	08013600 	.word	0x08013600
 801072c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1eb      	bne.n	801070a <__gethex+0x2ee>
 8010732:	e7d8      	b.n	80106e6 <__gethex+0x2ca>
 8010734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1d5      	bne.n	80106e6 <__gethex+0x2ca>
 801073a:	e7e6      	b.n	801070a <__gethex+0x2ee>
 801073c:	1e6f      	subs	r7, r5, #1
 801073e:	f1ba 0f00 	cmp.w	sl, #0
 8010742:	d131      	bne.n	80107a8 <__gethex+0x38c>
 8010744:	b127      	cbz	r7, 8010750 <__gethex+0x334>
 8010746:	4639      	mov	r1, r7
 8010748:	4620      	mov	r0, r4
 801074a:	f000 fe8f 	bl	801146c <__any_on>
 801074e:	4682      	mov	sl, r0
 8010750:	117b      	asrs	r3, r7, #5
 8010752:	2101      	movs	r1, #1
 8010754:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010758:	f007 071f 	and.w	r7, r7, #31
 801075c:	fa01 f707 	lsl.w	r7, r1, r7
 8010760:	421f      	tst	r7, r3
 8010762:	4629      	mov	r1, r5
 8010764:	4620      	mov	r0, r4
 8010766:	bf18      	it	ne
 8010768:	f04a 0a02 	orrne.w	sl, sl, #2
 801076c:	1b76      	subs	r6, r6, r5
 801076e:	f7ff fdee 	bl	801034e <rshift>
 8010772:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010776:	2702      	movs	r7, #2
 8010778:	f1ba 0f00 	cmp.w	sl, #0
 801077c:	d048      	beq.n	8010810 <__gethex+0x3f4>
 801077e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010782:	2b02      	cmp	r3, #2
 8010784:	d015      	beq.n	80107b2 <__gethex+0x396>
 8010786:	2b03      	cmp	r3, #3
 8010788:	d017      	beq.n	80107ba <__gethex+0x39e>
 801078a:	2b01      	cmp	r3, #1
 801078c:	d109      	bne.n	80107a2 <__gethex+0x386>
 801078e:	f01a 0f02 	tst.w	sl, #2
 8010792:	d006      	beq.n	80107a2 <__gethex+0x386>
 8010794:	f8d9 0000 	ldr.w	r0, [r9]
 8010798:	ea4a 0a00 	orr.w	sl, sl, r0
 801079c:	f01a 0f01 	tst.w	sl, #1
 80107a0:	d10e      	bne.n	80107c0 <__gethex+0x3a4>
 80107a2:	f047 0710 	orr.w	r7, r7, #16
 80107a6:	e033      	b.n	8010810 <__gethex+0x3f4>
 80107a8:	f04f 0a01 	mov.w	sl, #1
 80107ac:	e7d0      	b.n	8010750 <__gethex+0x334>
 80107ae:	2701      	movs	r7, #1
 80107b0:	e7e2      	b.n	8010778 <__gethex+0x35c>
 80107b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107b4:	f1c3 0301 	rsb	r3, r3, #1
 80107b8:	9315      	str	r3, [sp, #84]	; 0x54
 80107ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d0f0      	beq.n	80107a2 <__gethex+0x386>
 80107c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80107c4:	f104 0314 	add.w	r3, r4, #20
 80107c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80107cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80107d0:	f04f 0c00 	mov.w	ip, #0
 80107d4:	4618      	mov	r0, r3
 80107d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80107da:	f1b2 3fff 	cmp.w	r2, #4294967295
 80107de:	d01c      	beq.n	801081a <__gethex+0x3fe>
 80107e0:	3201      	adds	r2, #1
 80107e2:	6002      	str	r2, [r0, #0]
 80107e4:	2f02      	cmp	r7, #2
 80107e6:	f104 0314 	add.w	r3, r4, #20
 80107ea:	d13f      	bne.n	801086c <__gethex+0x450>
 80107ec:	f8d8 2000 	ldr.w	r2, [r8]
 80107f0:	3a01      	subs	r2, #1
 80107f2:	42b2      	cmp	r2, r6
 80107f4:	d10a      	bne.n	801080c <__gethex+0x3f0>
 80107f6:	1171      	asrs	r1, r6, #5
 80107f8:	2201      	movs	r2, #1
 80107fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80107fe:	f006 061f 	and.w	r6, r6, #31
 8010802:	fa02 f606 	lsl.w	r6, r2, r6
 8010806:	421e      	tst	r6, r3
 8010808:	bf18      	it	ne
 801080a:	4617      	movne	r7, r2
 801080c:	f047 0720 	orr.w	r7, r7, #32
 8010810:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010812:	601c      	str	r4, [r3, #0]
 8010814:	9b04      	ldr	r3, [sp, #16]
 8010816:	601d      	str	r5, [r3, #0]
 8010818:	e695      	b.n	8010546 <__gethex+0x12a>
 801081a:	4299      	cmp	r1, r3
 801081c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010820:	d8d8      	bhi.n	80107d4 <__gethex+0x3b8>
 8010822:	68a3      	ldr	r3, [r4, #8]
 8010824:	459b      	cmp	fp, r3
 8010826:	db19      	blt.n	801085c <__gethex+0x440>
 8010828:	6861      	ldr	r1, [r4, #4]
 801082a:	ee18 0a10 	vmov	r0, s16
 801082e:	3101      	adds	r1, #1
 8010830:	f000 f982 	bl	8010b38 <_Balloc>
 8010834:	4681      	mov	r9, r0
 8010836:	b918      	cbnz	r0, 8010840 <__gethex+0x424>
 8010838:	4b1a      	ldr	r3, [pc, #104]	; (80108a4 <__gethex+0x488>)
 801083a:	4602      	mov	r2, r0
 801083c:	2184      	movs	r1, #132	; 0x84
 801083e:	e6a8      	b.n	8010592 <__gethex+0x176>
 8010840:	6922      	ldr	r2, [r4, #16]
 8010842:	3202      	adds	r2, #2
 8010844:	f104 010c 	add.w	r1, r4, #12
 8010848:	0092      	lsls	r2, r2, #2
 801084a:	300c      	adds	r0, #12
 801084c:	f7fd f8c2 	bl	800d9d4 <memcpy>
 8010850:	4621      	mov	r1, r4
 8010852:	ee18 0a10 	vmov	r0, s16
 8010856:	f000 f9af 	bl	8010bb8 <_Bfree>
 801085a:	464c      	mov	r4, r9
 801085c:	6923      	ldr	r3, [r4, #16]
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010864:	6122      	str	r2, [r4, #16]
 8010866:	2201      	movs	r2, #1
 8010868:	615a      	str	r2, [r3, #20]
 801086a:	e7bb      	b.n	80107e4 <__gethex+0x3c8>
 801086c:	6922      	ldr	r2, [r4, #16]
 801086e:	455a      	cmp	r2, fp
 8010870:	dd0b      	ble.n	801088a <__gethex+0x46e>
 8010872:	2101      	movs	r1, #1
 8010874:	4620      	mov	r0, r4
 8010876:	f7ff fd6a 	bl	801034e <rshift>
 801087a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801087e:	3501      	adds	r5, #1
 8010880:	42ab      	cmp	r3, r5
 8010882:	f6ff aed0 	blt.w	8010626 <__gethex+0x20a>
 8010886:	2701      	movs	r7, #1
 8010888:	e7c0      	b.n	801080c <__gethex+0x3f0>
 801088a:	f016 061f 	ands.w	r6, r6, #31
 801088e:	d0fa      	beq.n	8010886 <__gethex+0x46a>
 8010890:	449a      	add	sl, r3
 8010892:	f1c6 0620 	rsb	r6, r6, #32
 8010896:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801089a:	f000 fa43 	bl	8010d24 <__hi0bits>
 801089e:	42b0      	cmp	r0, r6
 80108a0:	dbe7      	blt.n	8010872 <__gethex+0x456>
 80108a2:	e7f0      	b.n	8010886 <__gethex+0x46a>
 80108a4:	0801358c 	.word	0x0801358c

080108a8 <L_shift>:
 80108a8:	f1c2 0208 	rsb	r2, r2, #8
 80108ac:	0092      	lsls	r2, r2, #2
 80108ae:	b570      	push	{r4, r5, r6, lr}
 80108b0:	f1c2 0620 	rsb	r6, r2, #32
 80108b4:	6843      	ldr	r3, [r0, #4]
 80108b6:	6804      	ldr	r4, [r0, #0]
 80108b8:	fa03 f506 	lsl.w	r5, r3, r6
 80108bc:	432c      	orrs	r4, r5
 80108be:	40d3      	lsrs	r3, r2
 80108c0:	6004      	str	r4, [r0, #0]
 80108c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80108c6:	4288      	cmp	r0, r1
 80108c8:	d3f4      	bcc.n	80108b4 <L_shift+0xc>
 80108ca:	bd70      	pop	{r4, r5, r6, pc}

080108cc <__match>:
 80108cc:	b530      	push	{r4, r5, lr}
 80108ce:	6803      	ldr	r3, [r0, #0]
 80108d0:	3301      	adds	r3, #1
 80108d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108d6:	b914      	cbnz	r4, 80108de <__match+0x12>
 80108d8:	6003      	str	r3, [r0, #0]
 80108da:	2001      	movs	r0, #1
 80108dc:	bd30      	pop	{r4, r5, pc}
 80108de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80108e6:	2d19      	cmp	r5, #25
 80108e8:	bf98      	it	ls
 80108ea:	3220      	addls	r2, #32
 80108ec:	42a2      	cmp	r2, r4
 80108ee:	d0f0      	beq.n	80108d2 <__match+0x6>
 80108f0:	2000      	movs	r0, #0
 80108f2:	e7f3      	b.n	80108dc <__match+0x10>

080108f4 <__hexnan>:
 80108f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f8:	680b      	ldr	r3, [r1, #0]
 80108fa:	6801      	ldr	r1, [r0, #0]
 80108fc:	115e      	asrs	r6, r3, #5
 80108fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010902:	f013 031f 	ands.w	r3, r3, #31
 8010906:	b087      	sub	sp, #28
 8010908:	bf18      	it	ne
 801090a:	3604      	addne	r6, #4
 801090c:	2500      	movs	r5, #0
 801090e:	1f37      	subs	r7, r6, #4
 8010910:	4682      	mov	sl, r0
 8010912:	4690      	mov	r8, r2
 8010914:	9301      	str	r3, [sp, #4]
 8010916:	f846 5c04 	str.w	r5, [r6, #-4]
 801091a:	46b9      	mov	r9, r7
 801091c:	463c      	mov	r4, r7
 801091e:	9502      	str	r5, [sp, #8]
 8010920:	46ab      	mov	fp, r5
 8010922:	784a      	ldrb	r2, [r1, #1]
 8010924:	1c4b      	adds	r3, r1, #1
 8010926:	9303      	str	r3, [sp, #12]
 8010928:	b342      	cbz	r2, 801097c <__hexnan+0x88>
 801092a:	4610      	mov	r0, r2
 801092c:	9105      	str	r1, [sp, #20]
 801092e:	9204      	str	r2, [sp, #16]
 8010930:	f7ff fd5f 	bl	80103f2 <__hexdig_fun>
 8010934:	2800      	cmp	r0, #0
 8010936:	d14f      	bne.n	80109d8 <__hexnan+0xe4>
 8010938:	9a04      	ldr	r2, [sp, #16]
 801093a:	9905      	ldr	r1, [sp, #20]
 801093c:	2a20      	cmp	r2, #32
 801093e:	d818      	bhi.n	8010972 <__hexnan+0x7e>
 8010940:	9b02      	ldr	r3, [sp, #8]
 8010942:	459b      	cmp	fp, r3
 8010944:	dd13      	ble.n	801096e <__hexnan+0x7a>
 8010946:	454c      	cmp	r4, r9
 8010948:	d206      	bcs.n	8010958 <__hexnan+0x64>
 801094a:	2d07      	cmp	r5, #7
 801094c:	dc04      	bgt.n	8010958 <__hexnan+0x64>
 801094e:	462a      	mov	r2, r5
 8010950:	4649      	mov	r1, r9
 8010952:	4620      	mov	r0, r4
 8010954:	f7ff ffa8 	bl	80108a8 <L_shift>
 8010958:	4544      	cmp	r4, r8
 801095a:	d950      	bls.n	80109fe <__hexnan+0x10a>
 801095c:	2300      	movs	r3, #0
 801095e:	f1a4 0904 	sub.w	r9, r4, #4
 8010962:	f844 3c04 	str.w	r3, [r4, #-4]
 8010966:	f8cd b008 	str.w	fp, [sp, #8]
 801096a:	464c      	mov	r4, r9
 801096c:	461d      	mov	r5, r3
 801096e:	9903      	ldr	r1, [sp, #12]
 8010970:	e7d7      	b.n	8010922 <__hexnan+0x2e>
 8010972:	2a29      	cmp	r2, #41	; 0x29
 8010974:	d156      	bne.n	8010a24 <__hexnan+0x130>
 8010976:	3102      	adds	r1, #2
 8010978:	f8ca 1000 	str.w	r1, [sl]
 801097c:	f1bb 0f00 	cmp.w	fp, #0
 8010980:	d050      	beq.n	8010a24 <__hexnan+0x130>
 8010982:	454c      	cmp	r4, r9
 8010984:	d206      	bcs.n	8010994 <__hexnan+0xa0>
 8010986:	2d07      	cmp	r5, #7
 8010988:	dc04      	bgt.n	8010994 <__hexnan+0xa0>
 801098a:	462a      	mov	r2, r5
 801098c:	4649      	mov	r1, r9
 801098e:	4620      	mov	r0, r4
 8010990:	f7ff ff8a 	bl	80108a8 <L_shift>
 8010994:	4544      	cmp	r4, r8
 8010996:	d934      	bls.n	8010a02 <__hexnan+0x10e>
 8010998:	f1a8 0204 	sub.w	r2, r8, #4
 801099c:	4623      	mov	r3, r4
 801099e:	f853 1b04 	ldr.w	r1, [r3], #4
 80109a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80109a6:	429f      	cmp	r7, r3
 80109a8:	d2f9      	bcs.n	801099e <__hexnan+0xaa>
 80109aa:	1b3b      	subs	r3, r7, r4
 80109ac:	f023 0303 	bic.w	r3, r3, #3
 80109b0:	3304      	adds	r3, #4
 80109b2:	3401      	adds	r4, #1
 80109b4:	3e03      	subs	r6, #3
 80109b6:	42b4      	cmp	r4, r6
 80109b8:	bf88      	it	hi
 80109ba:	2304      	movhi	r3, #4
 80109bc:	4443      	add	r3, r8
 80109be:	2200      	movs	r2, #0
 80109c0:	f843 2b04 	str.w	r2, [r3], #4
 80109c4:	429f      	cmp	r7, r3
 80109c6:	d2fb      	bcs.n	80109c0 <__hexnan+0xcc>
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	b91b      	cbnz	r3, 80109d4 <__hexnan+0xe0>
 80109cc:	4547      	cmp	r7, r8
 80109ce:	d127      	bne.n	8010a20 <__hexnan+0x12c>
 80109d0:	2301      	movs	r3, #1
 80109d2:	603b      	str	r3, [r7, #0]
 80109d4:	2005      	movs	r0, #5
 80109d6:	e026      	b.n	8010a26 <__hexnan+0x132>
 80109d8:	3501      	adds	r5, #1
 80109da:	2d08      	cmp	r5, #8
 80109dc:	f10b 0b01 	add.w	fp, fp, #1
 80109e0:	dd06      	ble.n	80109f0 <__hexnan+0xfc>
 80109e2:	4544      	cmp	r4, r8
 80109e4:	d9c3      	bls.n	801096e <__hexnan+0x7a>
 80109e6:	2300      	movs	r3, #0
 80109e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80109ec:	2501      	movs	r5, #1
 80109ee:	3c04      	subs	r4, #4
 80109f0:	6822      	ldr	r2, [r4, #0]
 80109f2:	f000 000f 	and.w	r0, r0, #15
 80109f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80109fa:	6022      	str	r2, [r4, #0]
 80109fc:	e7b7      	b.n	801096e <__hexnan+0x7a>
 80109fe:	2508      	movs	r5, #8
 8010a00:	e7b5      	b.n	801096e <__hexnan+0x7a>
 8010a02:	9b01      	ldr	r3, [sp, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d0df      	beq.n	80109c8 <__hexnan+0xd4>
 8010a08:	f04f 32ff 	mov.w	r2, #4294967295
 8010a0c:	f1c3 0320 	rsb	r3, r3, #32
 8010a10:	fa22 f303 	lsr.w	r3, r2, r3
 8010a14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010a18:	401a      	ands	r2, r3
 8010a1a:	f846 2c04 	str.w	r2, [r6, #-4]
 8010a1e:	e7d3      	b.n	80109c8 <__hexnan+0xd4>
 8010a20:	3f04      	subs	r7, #4
 8010a22:	e7d1      	b.n	80109c8 <__hexnan+0xd4>
 8010a24:	2004      	movs	r0, #4
 8010a26:	b007      	add	sp, #28
 8010a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a2c <_localeconv_r>:
 8010a2c:	4800      	ldr	r0, [pc, #0]	; (8010a30 <_localeconv_r+0x4>)
 8010a2e:	4770      	bx	lr
 8010a30:	20000184 	.word	0x20000184

08010a34 <__retarget_lock_init_recursive>:
 8010a34:	4770      	bx	lr

08010a36 <__retarget_lock_acquire_recursive>:
 8010a36:	4770      	bx	lr

08010a38 <__retarget_lock_release_recursive>:
 8010a38:	4770      	bx	lr

08010a3a <__swhatbuf_r>:
 8010a3a:	b570      	push	{r4, r5, r6, lr}
 8010a3c:	460e      	mov	r6, r1
 8010a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a42:	2900      	cmp	r1, #0
 8010a44:	b096      	sub	sp, #88	; 0x58
 8010a46:	4614      	mov	r4, r2
 8010a48:	461d      	mov	r5, r3
 8010a4a:	da07      	bge.n	8010a5c <__swhatbuf_r+0x22>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	602b      	str	r3, [r5, #0]
 8010a50:	89b3      	ldrh	r3, [r6, #12]
 8010a52:	061a      	lsls	r2, r3, #24
 8010a54:	d410      	bmi.n	8010a78 <__swhatbuf_r+0x3e>
 8010a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a5a:	e00e      	b.n	8010a7a <__swhatbuf_r+0x40>
 8010a5c:	466a      	mov	r2, sp
 8010a5e:	f001 f807 	bl	8011a70 <_fstat_r>
 8010a62:	2800      	cmp	r0, #0
 8010a64:	dbf2      	blt.n	8010a4c <__swhatbuf_r+0x12>
 8010a66:	9a01      	ldr	r2, [sp, #4]
 8010a68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a70:	425a      	negs	r2, r3
 8010a72:	415a      	adcs	r2, r3
 8010a74:	602a      	str	r2, [r5, #0]
 8010a76:	e7ee      	b.n	8010a56 <__swhatbuf_r+0x1c>
 8010a78:	2340      	movs	r3, #64	; 0x40
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	b016      	add	sp, #88	; 0x58
 8010a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a84 <__smakebuf_r>:
 8010a84:	898b      	ldrh	r3, [r1, #12]
 8010a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a88:	079d      	lsls	r5, r3, #30
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	460c      	mov	r4, r1
 8010a8e:	d507      	bpl.n	8010aa0 <__smakebuf_r+0x1c>
 8010a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	2301      	movs	r3, #1
 8010a9a:	6163      	str	r3, [r4, #20]
 8010a9c:	b002      	add	sp, #8
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}
 8010aa0:	ab01      	add	r3, sp, #4
 8010aa2:	466a      	mov	r2, sp
 8010aa4:	f7ff ffc9 	bl	8010a3a <__swhatbuf_r>
 8010aa8:	9900      	ldr	r1, [sp, #0]
 8010aaa:	4605      	mov	r5, r0
 8010aac:	4630      	mov	r0, r6
 8010aae:	f000 fd5d 	bl	801156c <_malloc_r>
 8010ab2:	b948      	cbnz	r0, 8010ac8 <__smakebuf_r+0x44>
 8010ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab8:	059a      	lsls	r2, r3, #22
 8010aba:	d4ef      	bmi.n	8010a9c <__smakebuf_r+0x18>
 8010abc:	f023 0303 	bic.w	r3, r3, #3
 8010ac0:	f043 0302 	orr.w	r3, r3, #2
 8010ac4:	81a3      	strh	r3, [r4, #12]
 8010ac6:	e7e3      	b.n	8010a90 <__smakebuf_r+0xc>
 8010ac8:	4b0d      	ldr	r3, [pc, #52]	; (8010b00 <__smakebuf_r+0x7c>)
 8010aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ad4:	81a3      	strh	r3, [r4, #12]
 8010ad6:	9b00      	ldr	r3, [sp, #0]
 8010ad8:	6163      	str	r3, [r4, #20]
 8010ada:	9b01      	ldr	r3, [sp, #4]
 8010adc:	6120      	str	r0, [r4, #16]
 8010ade:	b15b      	cbz	r3, 8010af8 <__smakebuf_r+0x74>
 8010ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	f000 ffd5 	bl	8011a94 <_isatty_r>
 8010aea:	b128      	cbz	r0, 8010af8 <__smakebuf_r+0x74>
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	f023 0303 	bic.w	r3, r3, #3
 8010af2:	f043 0301 	orr.w	r3, r3, #1
 8010af6:	81a3      	strh	r3, [r4, #12]
 8010af8:	89a0      	ldrh	r0, [r4, #12]
 8010afa:	4305      	orrs	r5, r0
 8010afc:	81a5      	strh	r5, [r4, #12]
 8010afe:	e7cd      	b.n	8010a9c <__smakebuf_r+0x18>
 8010b00:	080101ad 	.word	0x080101ad

08010b04 <malloc>:
 8010b04:	4b02      	ldr	r3, [pc, #8]	; (8010b10 <malloc+0xc>)
 8010b06:	4601      	mov	r1, r0
 8010b08:	6818      	ldr	r0, [r3, #0]
 8010b0a:	f000 bd2f 	b.w	801156c <_malloc_r>
 8010b0e:	bf00      	nop
 8010b10:	2000002c 	.word	0x2000002c

08010b14 <__ascii_mbtowc>:
 8010b14:	b082      	sub	sp, #8
 8010b16:	b901      	cbnz	r1, 8010b1a <__ascii_mbtowc+0x6>
 8010b18:	a901      	add	r1, sp, #4
 8010b1a:	b142      	cbz	r2, 8010b2e <__ascii_mbtowc+0x1a>
 8010b1c:	b14b      	cbz	r3, 8010b32 <__ascii_mbtowc+0x1e>
 8010b1e:	7813      	ldrb	r3, [r2, #0]
 8010b20:	600b      	str	r3, [r1, #0]
 8010b22:	7812      	ldrb	r2, [r2, #0]
 8010b24:	1e10      	subs	r0, r2, #0
 8010b26:	bf18      	it	ne
 8010b28:	2001      	movne	r0, #1
 8010b2a:	b002      	add	sp, #8
 8010b2c:	4770      	bx	lr
 8010b2e:	4610      	mov	r0, r2
 8010b30:	e7fb      	b.n	8010b2a <__ascii_mbtowc+0x16>
 8010b32:	f06f 0001 	mvn.w	r0, #1
 8010b36:	e7f8      	b.n	8010b2a <__ascii_mbtowc+0x16>

08010b38 <_Balloc>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	460d      	mov	r5, r1
 8010b40:	b976      	cbnz	r6, 8010b60 <_Balloc+0x28>
 8010b42:	2010      	movs	r0, #16
 8010b44:	f7ff ffde 	bl	8010b04 <malloc>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8010b4c:	b920      	cbnz	r0, 8010b58 <_Balloc+0x20>
 8010b4e:	4b18      	ldr	r3, [pc, #96]	; (8010bb0 <_Balloc+0x78>)
 8010b50:	4818      	ldr	r0, [pc, #96]	; (8010bb4 <_Balloc+0x7c>)
 8010b52:	2166      	movs	r1, #102	; 0x66
 8010b54:	f000 ff4c 	bl	80119f0 <__assert_func>
 8010b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b5c:	6006      	str	r6, [r0, #0]
 8010b5e:	60c6      	str	r6, [r0, #12]
 8010b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010b62:	68f3      	ldr	r3, [r6, #12]
 8010b64:	b183      	cbz	r3, 8010b88 <_Balloc+0x50>
 8010b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b6e:	b9b8      	cbnz	r0, 8010ba0 <_Balloc+0x68>
 8010b70:	2101      	movs	r1, #1
 8010b72:	fa01 f605 	lsl.w	r6, r1, r5
 8010b76:	1d72      	adds	r2, r6, #5
 8010b78:	0092      	lsls	r2, r2, #2
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 fc97 	bl	80114ae <_calloc_r>
 8010b80:	b160      	cbz	r0, 8010b9c <_Balloc+0x64>
 8010b82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b86:	e00e      	b.n	8010ba6 <_Balloc+0x6e>
 8010b88:	2221      	movs	r2, #33	; 0x21
 8010b8a:	2104      	movs	r1, #4
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f000 fc8e 	bl	80114ae <_calloc_r>
 8010b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b94:	60f0      	str	r0, [r6, #12]
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d1e4      	bne.n	8010b66 <_Balloc+0x2e>
 8010b9c:	2000      	movs	r0, #0
 8010b9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ba0:	6802      	ldr	r2, [r0, #0]
 8010ba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bac:	e7f7      	b.n	8010b9e <_Balloc+0x66>
 8010bae:	bf00      	nop
 8010bb0:	08013516 	.word	0x08013516
 8010bb4:	08013680 	.word	0x08013680

08010bb8 <_Bfree>:
 8010bb8:	b570      	push	{r4, r5, r6, lr}
 8010bba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	460c      	mov	r4, r1
 8010bc0:	b976      	cbnz	r6, 8010be0 <_Bfree+0x28>
 8010bc2:	2010      	movs	r0, #16
 8010bc4:	f7ff ff9e 	bl	8010b04 <malloc>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	6268      	str	r0, [r5, #36]	; 0x24
 8010bcc:	b920      	cbnz	r0, 8010bd8 <_Bfree+0x20>
 8010bce:	4b09      	ldr	r3, [pc, #36]	; (8010bf4 <_Bfree+0x3c>)
 8010bd0:	4809      	ldr	r0, [pc, #36]	; (8010bf8 <_Bfree+0x40>)
 8010bd2:	218a      	movs	r1, #138	; 0x8a
 8010bd4:	f000 ff0c 	bl	80119f0 <__assert_func>
 8010bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bdc:	6006      	str	r6, [r0, #0]
 8010bde:	60c6      	str	r6, [r0, #12]
 8010be0:	b13c      	cbz	r4, 8010bf2 <_Bfree+0x3a>
 8010be2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010be4:	6862      	ldr	r2, [r4, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010bec:	6021      	str	r1, [r4, #0]
 8010bee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010bf2:	bd70      	pop	{r4, r5, r6, pc}
 8010bf4:	08013516 	.word	0x08013516
 8010bf8:	08013680 	.word	0x08013680

08010bfc <__multadd>:
 8010bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c00:	690e      	ldr	r6, [r1, #16]
 8010c02:	4607      	mov	r7, r0
 8010c04:	4698      	mov	r8, r3
 8010c06:	460c      	mov	r4, r1
 8010c08:	f101 0014 	add.w	r0, r1, #20
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	6805      	ldr	r5, [r0, #0]
 8010c10:	b2a9      	uxth	r1, r5
 8010c12:	fb02 8101 	mla	r1, r2, r1, r8
 8010c16:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010c1a:	0c2d      	lsrs	r5, r5, #16
 8010c1c:	fb02 c505 	mla	r5, r2, r5, ip
 8010c20:	b289      	uxth	r1, r1
 8010c22:	3301      	adds	r3, #1
 8010c24:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010c28:	429e      	cmp	r6, r3
 8010c2a:	f840 1b04 	str.w	r1, [r0], #4
 8010c2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010c32:	dcec      	bgt.n	8010c0e <__multadd+0x12>
 8010c34:	f1b8 0f00 	cmp.w	r8, #0
 8010c38:	d022      	beq.n	8010c80 <__multadd+0x84>
 8010c3a:	68a3      	ldr	r3, [r4, #8]
 8010c3c:	42b3      	cmp	r3, r6
 8010c3e:	dc19      	bgt.n	8010c74 <__multadd+0x78>
 8010c40:	6861      	ldr	r1, [r4, #4]
 8010c42:	4638      	mov	r0, r7
 8010c44:	3101      	adds	r1, #1
 8010c46:	f7ff ff77 	bl	8010b38 <_Balloc>
 8010c4a:	4605      	mov	r5, r0
 8010c4c:	b928      	cbnz	r0, 8010c5a <__multadd+0x5e>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	4b0d      	ldr	r3, [pc, #52]	; (8010c88 <__multadd+0x8c>)
 8010c52:	480e      	ldr	r0, [pc, #56]	; (8010c8c <__multadd+0x90>)
 8010c54:	21b5      	movs	r1, #181	; 0xb5
 8010c56:	f000 fecb 	bl	80119f0 <__assert_func>
 8010c5a:	6922      	ldr	r2, [r4, #16]
 8010c5c:	3202      	adds	r2, #2
 8010c5e:	f104 010c 	add.w	r1, r4, #12
 8010c62:	0092      	lsls	r2, r2, #2
 8010c64:	300c      	adds	r0, #12
 8010c66:	f7fc feb5 	bl	800d9d4 <memcpy>
 8010c6a:	4621      	mov	r1, r4
 8010c6c:	4638      	mov	r0, r7
 8010c6e:	f7ff ffa3 	bl	8010bb8 <_Bfree>
 8010c72:	462c      	mov	r4, r5
 8010c74:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010c78:	3601      	adds	r6, #1
 8010c7a:	f8c3 8014 	str.w	r8, [r3, #20]
 8010c7e:	6126      	str	r6, [r4, #16]
 8010c80:	4620      	mov	r0, r4
 8010c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c86:	bf00      	nop
 8010c88:	0801358c 	.word	0x0801358c
 8010c8c:	08013680 	.word	0x08013680

08010c90 <__s2b>:
 8010c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c94:	460c      	mov	r4, r1
 8010c96:	4615      	mov	r5, r2
 8010c98:	461f      	mov	r7, r3
 8010c9a:	2209      	movs	r2, #9
 8010c9c:	3308      	adds	r3, #8
 8010c9e:	4606      	mov	r6, r0
 8010ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	db09      	blt.n	8010cc0 <__s2b+0x30>
 8010cac:	4630      	mov	r0, r6
 8010cae:	f7ff ff43 	bl	8010b38 <_Balloc>
 8010cb2:	b940      	cbnz	r0, 8010cc6 <__s2b+0x36>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	4b19      	ldr	r3, [pc, #100]	; (8010d1c <__s2b+0x8c>)
 8010cb8:	4819      	ldr	r0, [pc, #100]	; (8010d20 <__s2b+0x90>)
 8010cba:	21ce      	movs	r1, #206	; 0xce
 8010cbc:	f000 fe98 	bl	80119f0 <__assert_func>
 8010cc0:	0052      	lsls	r2, r2, #1
 8010cc2:	3101      	adds	r1, #1
 8010cc4:	e7f0      	b.n	8010ca8 <__s2b+0x18>
 8010cc6:	9b08      	ldr	r3, [sp, #32]
 8010cc8:	6143      	str	r3, [r0, #20]
 8010cca:	2d09      	cmp	r5, #9
 8010ccc:	f04f 0301 	mov.w	r3, #1
 8010cd0:	6103      	str	r3, [r0, #16]
 8010cd2:	dd16      	ble.n	8010d02 <__s2b+0x72>
 8010cd4:	f104 0909 	add.w	r9, r4, #9
 8010cd8:	46c8      	mov	r8, r9
 8010cda:	442c      	add	r4, r5
 8010cdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010ce0:	4601      	mov	r1, r0
 8010ce2:	3b30      	subs	r3, #48	; 0x30
 8010ce4:	220a      	movs	r2, #10
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f7ff ff88 	bl	8010bfc <__multadd>
 8010cec:	45a0      	cmp	r8, r4
 8010cee:	d1f5      	bne.n	8010cdc <__s2b+0x4c>
 8010cf0:	f1a5 0408 	sub.w	r4, r5, #8
 8010cf4:	444c      	add	r4, r9
 8010cf6:	1b2d      	subs	r5, r5, r4
 8010cf8:	1963      	adds	r3, r4, r5
 8010cfa:	42bb      	cmp	r3, r7
 8010cfc:	db04      	blt.n	8010d08 <__s2b+0x78>
 8010cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d02:	340a      	adds	r4, #10
 8010d04:	2509      	movs	r5, #9
 8010d06:	e7f6      	b.n	8010cf6 <__s2b+0x66>
 8010d08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d0c:	4601      	mov	r1, r0
 8010d0e:	3b30      	subs	r3, #48	; 0x30
 8010d10:	220a      	movs	r2, #10
 8010d12:	4630      	mov	r0, r6
 8010d14:	f7ff ff72 	bl	8010bfc <__multadd>
 8010d18:	e7ee      	b.n	8010cf8 <__s2b+0x68>
 8010d1a:	bf00      	nop
 8010d1c:	0801358c 	.word	0x0801358c
 8010d20:	08013680 	.word	0x08013680

08010d24 <__hi0bits>:
 8010d24:	0c03      	lsrs	r3, r0, #16
 8010d26:	041b      	lsls	r3, r3, #16
 8010d28:	b9d3      	cbnz	r3, 8010d60 <__hi0bits+0x3c>
 8010d2a:	0400      	lsls	r0, r0, #16
 8010d2c:	2310      	movs	r3, #16
 8010d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010d32:	bf04      	itt	eq
 8010d34:	0200      	lsleq	r0, r0, #8
 8010d36:	3308      	addeq	r3, #8
 8010d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010d3c:	bf04      	itt	eq
 8010d3e:	0100      	lsleq	r0, r0, #4
 8010d40:	3304      	addeq	r3, #4
 8010d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010d46:	bf04      	itt	eq
 8010d48:	0080      	lsleq	r0, r0, #2
 8010d4a:	3302      	addeq	r3, #2
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	db05      	blt.n	8010d5c <__hi0bits+0x38>
 8010d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010d54:	f103 0301 	add.w	r3, r3, #1
 8010d58:	bf08      	it	eq
 8010d5a:	2320      	moveq	r3, #32
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	4770      	bx	lr
 8010d60:	2300      	movs	r3, #0
 8010d62:	e7e4      	b.n	8010d2e <__hi0bits+0xa>

08010d64 <__lo0bits>:
 8010d64:	6803      	ldr	r3, [r0, #0]
 8010d66:	f013 0207 	ands.w	r2, r3, #7
 8010d6a:	4601      	mov	r1, r0
 8010d6c:	d00b      	beq.n	8010d86 <__lo0bits+0x22>
 8010d6e:	07da      	lsls	r2, r3, #31
 8010d70:	d424      	bmi.n	8010dbc <__lo0bits+0x58>
 8010d72:	0798      	lsls	r0, r3, #30
 8010d74:	bf49      	itett	mi
 8010d76:	085b      	lsrmi	r3, r3, #1
 8010d78:	089b      	lsrpl	r3, r3, #2
 8010d7a:	2001      	movmi	r0, #1
 8010d7c:	600b      	strmi	r3, [r1, #0]
 8010d7e:	bf5c      	itt	pl
 8010d80:	600b      	strpl	r3, [r1, #0]
 8010d82:	2002      	movpl	r0, #2
 8010d84:	4770      	bx	lr
 8010d86:	b298      	uxth	r0, r3
 8010d88:	b9b0      	cbnz	r0, 8010db8 <__lo0bits+0x54>
 8010d8a:	0c1b      	lsrs	r3, r3, #16
 8010d8c:	2010      	movs	r0, #16
 8010d8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010d92:	bf04      	itt	eq
 8010d94:	0a1b      	lsreq	r3, r3, #8
 8010d96:	3008      	addeq	r0, #8
 8010d98:	071a      	lsls	r2, r3, #28
 8010d9a:	bf04      	itt	eq
 8010d9c:	091b      	lsreq	r3, r3, #4
 8010d9e:	3004      	addeq	r0, #4
 8010da0:	079a      	lsls	r2, r3, #30
 8010da2:	bf04      	itt	eq
 8010da4:	089b      	lsreq	r3, r3, #2
 8010da6:	3002      	addeq	r0, #2
 8010da8:	07da      	lsls	r2, r3, #31
 8010daa:	d403      	bmi.n	8010db4 <__lo0bits+0x50>
 8010dac:	085b      	lsrs	r3, r3, #1
 8010dae:	f100 0001 	add.w	r0, r0, #1
 8010db2:	d005      	beq.n	8010dc0 <__lo0bits+0x5c>
 8010db4:	600b      	str	r3, [r1, #0]
 8010db6:	4770      	bx	lr
 8010db8:	4610      	mov	r0, r2
 8010dba:	e7e8      	b.n	8010d8e <__lo0bits+0x2a>
 8010dbc:	2000      	movs	r0, #0
 8010dbe:	4770      	bx	lr
 8010dc0:	2020      	movs	r0, #32
 8010dc2:	4770      	bx	lr

08010dc4 <__i2b>:
 8010dc4:	b510      	push	{r4, lr}
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	2101      	movs	r1, #1
 8010dca:	f7ff feb5 	bl	8010b38 <_Balloc>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	b928      	cbnz	r0, 8010dde <__i2b+0x1a>
 8010dd2:	4b05      	ldr	r3, [pc, #20]	; (8010de8 <__i2b+0x24>)
 8010dd4:	4805      	ldr	r0, [pc, #20]	; (8010dec <__i2b+0x28>)
 8010dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010dda:	f000 fe09 	bl	80119f0 <__assert_func>
 8010dde:	2301      	movs	r3, #1
 8010de0:	6144      	str	r4, [r0, #20]
 8010de2:	6103      	str	r3, [r0, #16]
 8010de4:	bd10      	pop	{r4, pc}
 8010de6:	bf00      	nop
 8010de8:	0801358c 	.word	0x0801358c
 8010dec:	08013680 	.word	0x08013680

08010df0 <__multiply>:
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	4614      	mov	r4, r2
 8010df6:	690a      	ldr	r2, [r1, #16]
 8010df8:	6923      	ldr	r3, [r4, #16]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	bfb8      	it	lt
 8010dfe:	460b      	movlt	r3, r1
 8010e00:	460d      	mov	r5, r1
 8010e02:	bfbc      	itt	lt
 8010e04:	4625      	movlt	r5, r4
 8010e06:	461c      	movlt	r4, r3
 8010e08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010e0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010e10:	68ab      	ldr	r3, [r5, #8]
 8010e12:	6869      	ldr	r1, [r5, #4]
 8010e14:	eb0a 0709 	add.w	r7, sl, r9
 8010e18:	42bb      	cmp	r3, r7
 8010e1a:	b085      	sub	sp, #20
 8010e1c:	bfb8      	it	lt
 8010e1e:	3101      	addlt	r1, #1
 8010e20:	f7ff fe8a 	bl	8010b38 <_Balloc>
 8010e24:	b930      	cbnz	r0, 8010e34 <__multiply+0x44>
 8010e26:	4602      	mov	r2, r0
 8010e28:	4b42      	ldr	r3, [pc, #264]	; (8010f34 <__multiply+0x144>)
 8010e2a:	4843      	ldr	r0, [pc, #268]	; (8010f38 <__multiply+0x148>)
 8010e2c:	f240 115d 	movw	r1, #349	; 0x15d
 8010e30:	f000 fdde 	bl	80119f0 <__assert_func>
 8010e34:	f100 0614 	add.w	r6, r0, #20
 8010e38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010e3c:	4633      	mov	r3, r6
 8010e3e:	2200      	movs	r2, #0
 8010e40:	4543      	cmp	r3, r8
 8010e42:	d31e      	bcc.n	8010e82 <__multiply+0x92>
 8010e44:	f105 0c14 	add.w	ip, r5, #20
 8010e48:	f104 0314 	add.w	r3, r4, #20
 8010e4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010e50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010e54:	9202      	str	r2, [sp, #8]
 8010e56:	ebac 0205 	sub.w	r2, ip, r5
 8010e5a:	3a15      	subs	r2, #21
 8010e5c:	f022 0203 	bic.w	r2, r2, #3
 8010e60:	3204      	adds	r2, #4
 8010e62:	f105 0115 	add.w	r1, r5, #21
 8010e66:	458c      	cmp	ip, r1
 8010e68:	bf38      	it	cc
 8010e6a:	2204      	movcc	r2, #4
 8010e6c:	9201      	str	r2, [sp, #4]
 8010e6e:	9a02      	ldr	r2, [sp, #8]
 8010e70:	9303      	str	r3, [sp, #12]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d808      	bhi.n	8010e88 <__multiply+0x98>
 8010e76:	2f00      	cmp	r7, #0
 8010e78:	dc55      	bgt.n	8010f26 <__multiply+0x136>
 8010e7a:	6107      	str	r7, [r0, #16]
 8010e7c:	b005      	add	sp, #20
 8010e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e82:	f843 2b04 	str.w	r2, [r3], #4
 8010e86:	e7db      	b.n	8010e40 <__multiply+0x50>
 8010e88:	f8b3 a000 	ldrh.w	sl, [r3]
 8010e8c:	f1ba 0f00 	cmp.w	sl, #0
 8010e90:	d020      	beq.n	8010ed4 <__multiply+0xe4>
 8010e92:	f105 0e14 	add.w	lr, r5, #20
 8010e96:	46b1      	mov	r9, r6
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010e9e:	f8d9 b000 	ldr.w	fp, [r9]
 8010ea2:	b2a1      	uxth	r1, r4
 8010ea4:	fa1f fb8b 	uxth.w	fp, fp
 8010ea8:	fb0a b101 	mla	r1, sl, r1, fp
 8010eac:	4411      	add	r1, r2
 8010eae:	f8d9 2000 	ldr.w	r2, [r9]
 8010eb2:	0c24      	lsrs	r4, r4, #16
 8010eb4:	0c12      	lsrs	r2, r2, #16
 8010eb6:	fb0a 2404 	mla	r4, sl, r4, r2
 8010eba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010ebe:	b289      	uxth	r1, r1
 8010ec0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010ec4:	45f4      	cmp	ip, lr
 8010ec6:	f849 1b04 	str.w	r1, [r9], #4
 8010eca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010ece:	d8e4      	bhi.n	8010e9a <__multiply+0xaa>
 8010ed0:	9901      	ldr	r1, [sp, #4]
 8010ed2:	5072      	str	r2, [r6, r1]
 8010ed4:	9a03      	ldr	r2, [sp, #12]
 8010ed6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010eda:	3304      	adds	r3, #4
 8010edc:	f1b9 0f00 	cmp.w	r9, #0
 8010ee0:	d01f      	beq.n	8010f22 <__multiply+0x132>
 8010ee2:	6834      	ldr	r4, [r6, #0]
 8010ee4:	f105 0114 	add.w	r1, r5, #20
 8010ee8:	46b6      	mov	lr, r6
 8010eea:	f04f 0a00 	mov.w	sl, #0
 8010eee:	880a      	ldrh	r2, [r1, #0]
 8010ef0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010ef4:	fb09 b202 	mla	r2, r9, r2, fp
 8010ef8:	4492      	add	sl, r2
 8010efa:	b2a4      	uxth	r4, r4
 8010efc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010f00:	f84e 4b04 	str.w	r4, [lr], #4
 8010f04:	f851 4b04 	ldr.w	r4, [r1], #4
 8010f08:	f8be 2000 	ldrh.w	r2, [lr]
 8010f0c:	0c24      	lsrs	r4, r4, #16
 8010f0e:	fb09 2404 	mla	r4, r9, r4, r2
 8010f12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010f16:	458c      	cmp	ip, r1
 8010f18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010f1c:	d8e7      	bhi.n	8010eee <__multiply+0xfe>
 8010f1e:	9a01      	ldr	r2, [sp, #4]
 8010f20:	50b4      	str	r4, [r6, r2]
 8010f22:	3604      	adds	r6, #4
 8010f24:	e7a3      	b.n	8010e6e <__multiply+0x7e>
 8010f26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d1a5      	bne.n	8010e7a <__multiply+0x8a>
 8010f2e:	3f01      	subs	r7, #1
 8010f30:	e7a1      	b.n	8010e76 <__multiply+0x86>
 8010f32:	bf00      	nop
 8010f34:	0801358c 	.word	0x0801358c
 8010f38:	08013680 	.word	0x08013680

08010f3c <__pow5mult>:
 8010f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f40:	4615      	mov	r5, r2
 8010f42:	f012 0203 	ands.w	r2, r2, #3
 8010f46:	4606      	mov	r6, r0
 8010f48:	460f      	mov	r7, r1
 8010f4a:	d007      	beq.n	8010f5c <__pow5mult+0x20>
 8010f4c:	4c25      	ldr	r4, [pc, #148]	; (8010fe4 <__pow5mult+0xa8>)
 8010f4e:	3a01      	subs	r2, #1
 8010f50:	2300      	movs	r3, #0
 8010f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f56:	f7ff fe51 	bl	8010bfc <__multadd>
 8010f5a:	4607      	mov	r7, r0
 8010f5c:	10ad      	asrs	r5, r5, #2
 8010f5e:	d03d      	beq.n	8010fdc <__pow5mult+0xa0>
 8010f60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010f62:	b97c      	cbnz	r4, 8010f84 <__pow5mult+0x48>
 8010f64:	2010      	movs	r0, #16
 8010f66:	f7ff fdcd 	bl	8010b04 <malloc>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	6270      	str	r0, [r6, #36]	; 0x24
 8010f6e:	b928      	cbnz	r0, 8010f7c <__pow5mult+0x40>
 8010f70:	4b1d      	ldr	r3, [pc, #116]	; (8010fe8 <__pow5mult+0xac>)
 8010f72:	481e      	ldr	r0, [pc, #120]	; (8010fec <__pow5mult+0xb0>)
 8010f74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010f78:	f000 fd3a 	bl	80119f0 <__assert_func>
 8010f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f80:	6004      	str	r4, [r0, #0]
 8010f82:	60c4      	str	r4, [r0, #12]
 8010f84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f8c:	b94c      	cbnz	r4, 8010fa2 <__pow5mult+0x66>
 8010f8e:	f240 2171 	movw	r1, #625	; 0x271
 8010f92:	4630      	mov	r0, r6
 8010f94:	f7ff ff16 	bl	8010dc4 <__i2b>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	6003      	str	r3, [r0, #0]
 8010fa2:	f04f 0900 	mov.w	r9, #0
 8010fa6:	07eb      	lsls	r3, r5, #31
 8010fa8:	d50a      	bpl.n	8010fc0 <__pow5mult+0x84>
 8010faa:	4639      	mov	r1, r7
 8010fac:	4622      	mov	r2, r4
 8010fae:	4630      	mov	r0, r6
 8010fb0:	f7ff ff1e 	bl	8010df0 <__multiply>
 8010fb4:	4639      	mov	r1, r7
 8010fb6:	4680      	mov	r8, r0
 8010fb8:	4630      	mov	r0, r6
 8010fba:	f7ff fdfd 	bl	8010bb8 <_Bfree>
 8010fbe:	4647      	mov	r7, r8
 8010fc0:	106d      	asrs	r5, r5, #1
 8010fc2:	d00b      	beq.n	8010fdc <__pow5mult+0xa0>
 8010fc4:	6820      	ldr	r0, [r4, #0]
 8010fc6:	b938      	cbnz	r0, 8010fd8 <__pow5mult+0x9c>
 8010fc8:	4622      	mov	r2, r4
 8010fca:	4621      	mov	r1, r4
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f7ff ff0f 	bl	8010df0 <__multiply>
 8010fd2:	6020      	str	r0, [r4, #0]
 8010fd4:	f8c0 9000 	str.w	r9, [r0]
 8010fd8:	4604      	mov	r4, r0
 8010fda:	e7e4      	b.n	8010fa6 <__pow5mult+0x6a>
 8010fdc:	4638      	mov	r0, r7
 8010fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fe2:	bf00      	nop
 8010fe4:	080137d0 	.word	0x080137d0
 8010fe8:	08013516 	.word	0x08013516
 8010fec:	08013680 	.word	0x08013680

08010ff0 <__lshift>:
 8010ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff4:	460c      	mov	r4, r1
 8010ff6:	6849      	ldr	r1, [r1, #4]
 8010ff8:	6923      	ldr	r3, [r4, #16]
 8010ffa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ffe:	68a3      	ldr	r3, [r4, #8]
 8011000:	4607      	mov	r7, r0
 8011002:	4691      	mov	r9, r2
 8011004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011008:	f108 0601 	add.w	r6, r8, #1
 801100c:	42b3      	cmp	r3, r6
 801100e:	db0b      	blt.n	8011028 <__lshift+0x38>
 8011010:	4638      	mov	r0, r7
 8011012:	f7ff fd91 	bl	8010b38 <_Balloc>
 8011016:	4605      	mov	r5, r0
 8011018:	b948      	cbnz	r0, 801102e <__lshift+0x3e>
 801101a:	4602      	mov	r2, r0
 801101c:	4b28      	ldr	r3, [pc, #160]	; (80110c0 <__lshift+0xd0>)
 801101e:	4829      	ldr	r0, [pc, #164]	; (80110c4 <__lshift+0xd4>)
 8011020:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011024:	f000 fce4 	bl	80119f0 <__assert_func>
 8011028:	3101      	adds	r1, #1
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	e7ee      	b.n	801100c <__lshift+0x1c>
 801102e:	2300      	movs	r3, #0
 8011030:	f100 0114 	add.w	r1, r0, #20
 8011034:	f100 0210 	add.w	r2, r0, #16
 8011038:	4618      	mov	r0, r3
 801103a:	4553      	cmp	r3, sl
 801103c:	db33      	blt.n	80110a6 <__lshift+0xb6>
 801103e:	6920      	ldr	r0, [r4, #16]
 8011040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011044:	f104 0314 	add.w	r3, r4, #20
 8011048:	f019 091f 	ands.w	r9, r9, #31
 801104c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011054:	d02b      	beq.n	80110ae <__lshift+0xbe>
 8011056:	f1c9 0e20 	rsb	lr, r9, #32
 801105a:	468a      	mov	sl, r1
 801105c:	2200      	movs	r2, #0
 801105e:	6818      	ldr	r0, [r3, #0]
 8011060:	fa00 f009 	lsl.w	r0, r0, r9
 8011064:	4302      	orrs	r2, r0
 8011066:	f84a 2b04 	str.w	r2, [sl], #4
 801106a:	f853 2b04 	ldr.w	r2, [r3], #4
 801106e:	459c      	cmp	ip, r3
 8011070:	fa22 f20e 	lsr.w	r2, r2, lr
 8011074:	d8f3      	bhi.n	801105e <__lshift+0x6e>
 8011076:	ebac 0304 	sub.w	r3, ip, r4
 801107a:	3b15      	subs	r3, #21
 801107c:	f023 0303 	bic.w	r3, r3, #3
 8011080:	3304      	adds	r3, #4
 8011082:	f104 0015 	add.w	r0, r4, #21
 8011086:	4584      	cmp	ip, r0
 8011088:	bf38      	it	cc
 801108a:	2304      	movcc	r3, #4
 801108c:	50ca      	str	r2, [r1, r3]
 801108e:	b10a      	cbz	r2, 8011094 <__lshift+0xa4>
 8011090:	f108 0602 	add.w	r6, r8, #2
 8011094:	3e01      	subs	r6, #1
 8011096:	4638      	mov	r0, r7
 8011098:	612e      	str	r6, [r5, #16]
 801109a:	4621      	mov	r1, r4
 801109c:	f7ff fd8c 	bl	8010bb8 <_Bfree>
 80110a0:	4628      	mov	r0, r5
 80110a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80110aa:	3301      	adds	r3, #1
 80110ac:	e7c5      	b.n	801103a <__lshift+0x4a>
 80110ae:	3904      	subs	r1, #4
 80110b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80110b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80110b8:	459c      	cmp	ip, r3
 80110ba:	d8f9      	bhi.n	80110b0 <__lshift+0xc0>
 80110bc:	e7ea      	b.n	8011094 <__lshift+0xa4>
 80110be:	bf00      	nop
 80110c0:	0801358c 	.word	0x0801358c
 80110c4:	08013680 	.word	0x08013680

080110c8 <__mcmp>:
 80110c8:	b530      	push	{r4, r5, lr}
 80110ca:	6902      	ldr	r2, [r0, #16]
 80110cc:	690c      	ldr	r4, [r1, #16]
 80110ce:	1b12      	subs	r2, r2, r4
 80110d0:	d10e      	bne.n	80110f0 <__mcmp+0x28>
 80110d2:	f100 0314 	add.w	r3, r0, #20
 80110d6:	3114      	adds	r1, #20
 80110d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80110dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80110e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80110e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80110e8:	42a5      	cmp	r5, r4
 80110ea:	d003      	beq.n	80110f4 <__mcmp+0x2c>
 80110ec:	d305      	bcc.n	80110fa <__mcmp+0x32>
 80110ee:	2201      	movs	r2, #1
 80110f0:	4610      	mov	r0, r2
 80110f2:	bd30      	pop	{r4, r5, pc}
 80110f4:	4283      	cmp	r3, r0
 80110f6:	d3f3      	bcc.n	80110e0 <__mcmp+0x18>
 80110f8:	e7fa      	b.n	80110f0 <__mcmp+0x28>
 80110fa:	f04f 32ff 	mov.w	r2, #4294967295
 80110fe:	e7f7      	b.n	80110f0 <__mcmp+0x28>

08011100 <__mdiff>:
 8011100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011104:	460c      	mov	r4, r1
 8011106:	4606      	mov	r6, r0
 8011108:	4611      	mov	r1, r2
 801110a:	4620      	mov	r0, r4
 801110c:	4617      	mov	r7, r2
 801110e:	f7ff ffdb 	bl	80110c8 <__mcmp>
 8011112:	1e05      	subs	r5, r0, #0
 8011114:	d110      	bne.n	8011138 <__mdiff+0x38>
 8011116:	4629      	mov	r1, r5
 8011118:	4630      	mov	r0, r6
 801111a:	f7ff fd0d 	bl	8010b38 <_Balloc>
 801111e:	b930      	cbnz	r0, 801112e <__mdiff+0x2e>
 8011120:	4b39      	ldr	r3, [pc, #228]	; (8011208 <__mdiff+0x108>)
 8011122:	4602      	mov	r2, r0
 8011124:	f240 2132 	movw	r1, #562	; 0x232
 8011128:	4838      	ldr	r0, [pc, #224]	; (801120c <__mdiff+0x10c>)
 801112a:	f000 fc61 	bl	80119f0 <__assert_func>
 801112e:	2301      	movs	r3, #1
 8011130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011138:	bfa4      	itt	ge
 801113a:	463b      	movge	r3, r7
 801113c:	4627      	movge	r7, r4
 801113e:	4630      	mov	r0, r6
 8011140:	6879      	ldr	r1, [r7, #4]
 8011142:	bfa6      	itte	ge
 8011144:	461c      	movge	r4, r3
 8011146:	2500      	movge	r5, #0
 8011148:	2501      	movlt	r5, #1
 801114a:	f7ff fcf5 	bl	8010b38 <_Balloc>
 801114e:	b920      	cbnz	r0, 801115a <__mdiff+0x5a>
 8011150:	4b2d      	ldr	r3, [pc, #180]	; (8011208 <__mdiff+0x108>)
 8011152:	4602      	mov	r2, r0
 8011154:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011158:	e7e6      	b.n	8011128 <__mdiff+0x28>
 801115a:	693e      	ldr	r6, [r7, #16]
 801115c:	60c5      	str	r5, [r0, #12]
 801115e:	6925      	ldr	r5, [r4, #16]
 8011160:	f107 0114 	add.w	r1, r7, #20
 8011164:	f104 0914 	add.w	r9, r4, #20
 8011168:	f100 0e14 	add.w	lr, r0, #20
 801116c:	f107 0210 	add.w	r2, r7, #16
 8011170:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011174:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011178:	46f2      	mov	sl, lr
 801117a:	2700      	movs	r7, #0
 801117c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011180:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011184:	fa1f f883 	uxth.w	r8, r3
 8011188:	fa17 f78b 	uxtah	r7, r7, fp
 801118c:	0c1b      	lsrs	r3, r3, #16
 801118e:	eba7 0808 	sub.w	r8, r7, r8
 8011192:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011196:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801119a:	fa1f f888 	uxth.w	r8, r8
 801119e:	141f      	asrs	r7, r3, #16
 80111a0:	454d      	cmp	r5, r9
 80111a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80111a6:	f84a 3b04 	str.w	r3, [sl], #4
 80111aa:	d8e7      	bhi.n	801117c <__mdiff+0x7c>
 80111ac:	1b2b      	subs	r3, r5, r4
 80111ae:	3b15      	subs	r3, #21
 80111b0:	f023 0303 	bic.w	r3, r3, #3
 80111b4:	3304      	adds	r3, #4
 80111b6:	3415      	adds	r4, #21
 80111b8:	42a5      	cmp	r5, r4
 80111ba:	bf38      	it	cc
 80111bc:	2304      	movcc	r3, #4
 80111be:	4419      	add	r1, r3
 80111c0:	4473      	add	r3, lr
 80111c2:	469e      	mov	lr, r3
 80111c4:	460d      	mov	r5, r1
 80111c6:	4565      	cmp	r5, ip
 80111c8:	d30e      	bcc.n	80111e8 <__mdiff+0xe8>
 80111ca:	f10c 0203 	add.w	r2, ip, #3
 80111ce:	1a52      	subs	r2, r2, r1
 80111d0:	f022 0203 	bic.w	r2, r2, #3
 80111d4:	3903      	subs	r1, #3
 80111d6:	458c      	cmp	ip, r1
 80111d8:	bf38      	it	cc
 80111da:	2200      	movcc	r2, #0
 80111dc:	441a      	add	r2, r3
 80111de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80111e2:	b17b      	cbz	r3, 8011204 <__mdiff+0x104>
 80111e4:	6106      	str	r6, [r0, #16]
 80111e6:	e7a5      	b.n	8011134 <__mdiff+0x34>
 80111e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80111ec:	fa17 f488 	uxtah	r4, r7, r8
 80111f0:	1422      	asrs	r2, r4, #16
 80111f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80111f6:	b2a4      	uxth	r4, r4
 80111f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80111fc:	f84e 4b04 	str.w	r4, [lr], #4
 8011200:	1417      	asrs	r7, r2, #16
 8011202:	e7e0      	b.n	80111c6 <__mdiff+0xc6>
 8011204:	3e01      	subs	r6, #1
 8011206:	e7ea      	b.n	80111de <__mdiff+0xde>
 8011208:	0801358c 	.word	0x0801358c
 801120c:	08013680 	.word	0x08013680

08011210 <__ulp>:
 8011210:	b082      	sub	sp, #8
 8011212:	ed8d 0b00 	vstr	d0, [sp]
 8011216:	9b01      	ldr	r3, [sp, #4]
 8011218:	4912      	ldr	r1, [pc, #72]	; (8011264 <__ulp+0x54>)
 801121a:	4019      	ands	r1, r3
 801121c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011220:	2900      	cmp	r1, #0
 8011222:	dd05      	ble.n	8011230 <__ulp+0x20>
 8011224:	2200      	movs	r2, #0
 8011226:	460b      	mov	r3, r1
 8011228:	ec43 2b10 	vmov	d0, r2, r3
 801122c:	b002      	add	sp, #8
 801122e:	4770      	bx	lr
 8011230:	4249      	negs	r1, r1
 8011232:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011236:	ea4f 5021 	mov.w	r0, r1, asr #20
 801123a:	f04f 0200 	mov.w	r2, #0
 801123e:	f04f 0300 	mov.w	r3, #0
 8011242:	da04      	bge.n	801124e <__ulp+0x3e>
 8011244:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011248:	fa41 f300 	asr.w	r3, r1, r0
 801124c:	e7ec      	b.n	8011228 <__ulp+0x18>
 801124e:	f1a0 0114 	sub.w	r1, r0, #20
 8011252:	291e      	cmp	r1, #30
 8011254:	bfda      	itte	le
 8011256:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801125a:	fa20 f101 	lsrle.w	r1, r0, r1
 801125e:	2101      	movgt	r1, #1
 8011260:	460a      	mov	r2, r1
 8011262:	e7e1      	b.n	8011228 <__ulp+0x18>
 8011264:	7ff00000 	.word	0x7ff00000

08011268 <__b2d>:
 8011268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126a:	6905      	ldr	r5, [r0, #16]
 801126c:	f100 0714 	add.w	r7, r0, #20
 8011270:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011274:	1f2e      	subs	r6, r5, #4
 8011276:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801127a:	4620      	mov	r0, r4
 801127c:	f7ff fd52 	bl	8010d24 <__hi0bits>
 8011280:	f1c0 0320 	rsb	r3, r0, #32
 8011284:	280a      	cmp	r0, #10
 8011286:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011304 <__b2d+0x9c>
 801128a:	600b      	str	r3, [r1, #0]
 801128c:	dc14      	bgt.n	80112b8 <__b2d+0x50>
 801128e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011292:	fa24 f10e 	lsr.w	r1, r4, lr
 8011296:	42b7      	cmp	r7, r6
 8011298:	ea41 030c 	orr.w	r3, r1, ip
 801129c:	bf34      	ite	cc
 801129e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112a2:	2100      	movcs	r1, #0
 80112a4:	3015      	adds	r0, #21
 80112a6:	fa04 f000 	lsl.w	r0, r4, r0
 80112aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80112ae:	ea40 0201 	orr.w	r2, r0, r1
 80112b2:	ec43 2b10 	vmov	d0, r2, r3
 80112b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b8:	42b7      	cmp	r7, r6
 80112ba:	bf3a      	itte	cc
 80112bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80112c4:	2100      	movcs	r1, #0
 80112c6:	380b      	subs	r0, #11
 80112c8:	d017      	beq.n	80112fa <__b2d+0x92>
 80112ca:	f1c0 0c20 	rsb	ip, r0, #32
 80112ce:	fa04 f500 	lsl.w	r5, r4, r0
 80112d2:	42be      	cmp	r6, r7
 80112d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80112d8:	ea45 0504 	orr.w	r5, r5, r4
 80112dc:	bf8c      	ite	hi
 80112de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80112e2:	2400      	movls	r4, #0
 80112e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80112e8:	fa01 f000 	lsl.w	r0, r1, r0
 80112ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80112f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80112f4:	ea40 0204 	orr.w	r2, r0, r4
 80112f8:	e7db      	b.n	80112b2 <__b2d+0x4a>
 80112fa:	ea44 030c 	orr.w	r3, r4, ip
 80112fe:	460a      	mov	r2, r1
 8011300:	e7d7      	b.n	80112b2 <__b2d+0x4a>
 8011302:	bf00      	nop
 8011304:	3ff00000 	.word	0x3ff00000

08011308 <__d2b>:
 8011308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801130c:	4689      	mov	r9, r1
 801130e:	2101      	movs	r1, #1
 8011310:	ec57 6b10 	vmov	r6, r7, d0
 8011314:	4690      	mov	r8, r2
 8011316:	f7ff fc0f 	bl	8010b38 <_Balloc>
 801131a:	4604      	mov	r4, r0
 801131c:	b930      	cbnz	r0, 801132c <__d2b+0x24>
 801131e:	4602      	mov	r2, r0
 8011320:	4b25      	ldr	r3, [pc, #148]	; (80113b8 <__d2b+0xb0>)
 8011322:	4826      	ldr	r0, [pc, #152]	; (80113bc <__d2b+0xb4>)
 8011324:	f240 310a 	movw	r1, #778	; 0x30a
 8011328:	f000 fb62 	bl	80119f0 <__assert_func>
 801132c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011334:	bb35      	cbnz	r5, 8011384 <__d2b+0x7c>
 8011336:	2e00      	cmp	r6, #0
 8011338:	9301      	str	r3, [sp, #4]
 801133a:	d028      	beq.n	801138e <__d2b+0x86>
 801133c:	4668      	mov	r0, sp
 801133e:	9600      	str	r6, [sp, #0]
 8011340:	f7ff fd10 	bl	8010d64 <__lo0bits>
 8011344:	9900      	ldr	r1, [sp, #0]
 8011346:	b300      	cbz	r0, 801138a <__d2b+0x82>
 8011348:	9a01      	ldr	r2, [sp, #4]
 801134a:	f1c0 0320 	rsb	r3, r0, #32
 801134e:	fa02 f303 	lsl.w	r3, r2, r3
 8011352:	430b      	orrs	r3, r1
 8011354:	40c2      	lsrs	r2, r0
 8011356:	6163      	str	r3, [r4, #20]
 8011358:	9201      	str	r2, [sp, #4]
 801135a:	9b01      	ldr	r3, [sp, #4]
 801135c:	61a3      	str	r3, [r4, #24]
 801135e:	2b00      	cmp	r3, #0
 8011360:	bf14      	ite	ne
 8011362:	2202      	movne	r2, #2
 8011364:	2201      	moveq	r2, #1
 8011366:	6122      	str	r2, [r4, #16]
 8011368:	b1d5      	cbz	r5, 80113a0 <__d2b+0x98>
 801136a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801136e:	4405      	add	r5, r0
 8011370:	f8c9 5000 	str.w	r5, [r9]
 8011374:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011378:	f8c8 0000 	str.w	r0, [r8]
 801137c:	4620      	mov	r0, r4
 801137e:	b003      	add	sp, #12
 8011380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011388:	e7d5      	b.n	8011336 <__d2b+0x2e>
 801138a:	6161      	str	r1, [r4, #20]
 801138c:	e7e5      	b.n	801135a <__d2b+0x52>
 801138e:	a801      	add	r0, sp, #4
 8011390:	f7ff fce8 	bl	8010d64 <__lo0bits>
 8011394:	9b01      	ldr	r3, [sp, #4]
 8011396:	6163      	str	r3, [r4, #20]
 8011398:	2201      	movs	r2, #1
 801139a:	6122      	str	r2, [r4, #16]
 801139c:	3020      	adds	r0, #32
 801139e:	e7e3      	b.n	8011368 <__d2b+0x60>
 80113a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113a8:	f8c9 0000 	str.w	r0, [r9]
 80113ac:	6918      	ldr	r0, [r3, #16]
 80113ae:	f7ff fcb9 	bl	8010d24 <__hi0bits>
 80113b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113b6:	e7df      	b.n	8011378 <__d2b+0x70>
 80113b8:	0801358c 	.word	0x0801358c
 80113bc:	08013680 	.word	0x08013680

080113c0 <__ratio>:
 80113c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c4:	4688      	mov	r8, r1
 80113c6:	4669      	mov	r1, sp
 80113c8:	4681      	mov	r9, r0
 80113ca:	f7ff ff4d 	bl	8011268 <__b2d>
 80113ce:	a901      	add	r1, sp, #4
 80113d0:	4640      	mov	r0, r8
 80113d2:	ec55 4b10 	vmov	r4, r5, d0
 80113d6:	f7ff ff47 	bl	8011268 <__b2d>
 80113da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80113e2:	eba3 0c02 	sub.w	ip, r3, r2
 80113e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80113ea:	1a9b      	subs	r3, r3, r2
 80113ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80113f0:	ec51 0b10 	vmov	r0, r1, d0
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	bfd6      	itet	le
 80113f8:	460a      	movle	r2, r1
 80113fa:	462a      	movgt	r2, r5
 80113fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011400:	468b      	mov	fp, r1
 8011402:	462f      	mov	r7, r5
 8011404:	bfd4      	ite	le
 8011406:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801140a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801140e:	4620      	mov	r0, r4
 8011410:	ee10 2a10 	vmov	r2, s0
 8011414:	465b      	mov	r3, fp
 8011416:	4639      	mov	r1, r7
 8011418:	f7ef fa40 	bl	800089c <__aeabi_ddiv>
 801141c:	ec41 0b10 	vmov	d0, r0, r1
 8011420:	b003      	add	sp, #12
 8011422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011426 <__copybits>:
 8011426:	3901      	subs	r1, #1
 8011428:	b570      	push	{r4, r5, r6, lr}
 801142a:	1149      	asrs	r1, r1, #5
 801142c:	6914      	ldr	r4, [r2, #16]
 801142e:	3101      	adds	r1, #1
 8011430:	f102 0314 	add.w	r3, r2, #20
 8011434:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011438:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801143c:	1f05      	subs	r5, r0, #4
 801143e:	42a3      	cmp	r3, r4
 8011440:	d30c      	bcc.n	801145c <__copybits+0x36>
 8011442:	1aa3      	subs	r3, r4, r2
 8011444:	3b11      	subs	r3, #17
 8011446:	f023 0303 	bic.w	r3, r3, #3
 801144a:	3211      	adds	r2, #17
 801144c:	42a2      	cmp	r2, r4
 801144e:	bf88      	it	hi
 8011450:	2300      	movhi	r3, #0
 8011452:	4418      	add	r0, r3
 8011454:	2300      	movs	r3, #0
 8011456:	4288      	cmp	r0, r1
 8011458:	d305      	bcc.n	8011466 <__copybits+0x40>
 801145a:	bd70      	pop	{r4, r5, r6, pc}
 801145c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011460:	f845 6f04 	str.w	r6, [r5, #4]!
 8011464:	e7eb      	b.n	801143e <__copybits+0x18>
 8011466:	f840 3b04 	str.w	r3, [r0], #4
 801146a:	e7f4      	b.n	8011456 <__copybits+0x30>

0801146c <__any_on>:
 801146c:	f100 0214 	add.w	r2, r0, #20
 8011470:	6900      	ldr	r0, [r0, #16]
 8011472:	114b      	asrs	r3, r1, #5
 8011474:	4298      	cmp	r0, r3
 8011476:	b510      	push	{r4, lr}
 8011478:	db11      	blt.n	801149e <__any_on+0x32>
 801147a:	dd0a      	ble.n	8011492 <__any_on+0x26>
 801147c:	f011 011f 	ands.w	r1, r1, #31
 8011480:	d007      	beq.n	8011492 <__any_on+0x26>
 8011482:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011486:	fa24 f001 	lsr.w	r0, r4, r1
 801148a:	fa00 f101 	lsl.w	r1, r0, r1
 801148e:	428c      	cmp	r4, r1
 8011490:	d10b      	bne.n	80114aa <__any_on+0x3e>
 8011492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011496:	4293      	cmp	r3, r2
 8011498:	d803      	bhi.n	80114a2 <__any_on+0x36>
 801149a:	2000      	movs	r0, #0
 801149c:	bd10      	pop	{r4, pc}
 801149e:	4603      	mov	r3, r0
 80114a0:	e7f7      	b.n	8011492 <__any_on+0x26>
 80114a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114a6:	2900      	cmp	r1, #0
 80114a8:	d0f5      	beq.n	8011496 <__any_on+0x2a>
 80114aa:	2001      	movs	r0, #1
 80114ac:	e7f6      	b.n	801149c <__any_on+0x30>

080114ae <_calloc_r>:
 80114ae:	b513      	push	{r0, r1, r4, lr}
 80114b0:	434a      	muls	r2, r1
 80114b2:	4611      	mov	r1, r2
 80114b4:	9201      	str	r2, [sp, #4]
 80114b6:	f000 f859 	bl	801156c <_malloc_r>
 80114ba:	4604      	mov	r4, r0
 80114bc:	b118      	cbz	r0, 80114c6 <_calloc_r+0x18>
 80114be:	9a01      	ldr	r2, [sp, #4]
 80114c0:	2100      	movs	r1, #0
 80114c2:	f7fc fa95 	bl	800d9f0 <memset>
 80114c6:	4620      	mov	r0, r4
 80114c8:	b002      	add	sp, #8
 80114ca:	bd10      	pop	{r4, pc}

080114cc <_free_r>:
 80114cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114ce:	2900      	cmp	r1, #0
 80114d0:	d048      	beq.n	8011564 <_free_r+0x98>
 80114d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114d6:	9001      	str	r0, [sp, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	f1a1 0404 	sub.w	r4, r1, #4
 80114de:	bfb8      	it	lt
 80114e0:	18e4      	addlt	r4, r4, r3
 80114e2:	f000 faf9 	bl	8011ad8 <__malloc_lock>
 80114e6:	4a20      	ldr	r2, [pc, #128]	; (8011568 <_free_r+0x9c>)
 80114e8:	9801      	ldr	r0, [sp, #4]
 80114ea:	6813      	ldr	r3, [r2, #0]
 80114ec:	4615      	mov	r5, r2
 80114ee:	b933      	cbnz	r3, 80114fe <_free_r+0x32>
 80114f0:	6063      	str	r3, [r4, #4]
 80114f2:	6014      	str	r4, [r2, #0]
 80114f4:	b003      	add	sp, #12
 80114f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114fa:	f000 baf3 	b.w	8011ae4 <__malloc_unlock>
 80114fe:	42a3      	cmp	r3, r4
 8011500:	d90b      	bls.n	801151a <_free_r+0x4e>
 8011502:	6821      	ldr	r1, [r4, #0]
 8011504:	1862      	adds	r2, r4, r1
 8011506:	4293      	cmp	r3, r2
 8011508:	bf04      	itt	eq
 801150a:	681a      	ldreq	r2, [r3, #0]
 801150c:	685b      	ldreq	r3, [r3, #4]
 801150e:	6063      	str	r3, [r4, #4]
 8011510:	bf04      	itt	eq
 8011512:	1852      	addeq	r2, r2, r1
 8011514:	6022      	streq	r2, [r4, #0]
 8011516:	602c      	str	r4, [r5, #0]
 8011518:	e7ec      	b.n	80114f4 <_free_r+0x28>
 801151a:	461a      	mov	r2, r3
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	b10b      	cbz	r3, 8011524 <_free_r+0x58>
 8011520:	42a3      	cmp	r3, r4
 8011522:	d9fa      	bls.n	801151a <_free_r+0x4e>
 8011524:	6811      	ldr	r1, [r2, #0]
 8011526:	1855      	adds	r5, r2, r1
 8011528:	42a5      	cmp	r5, r4
 801152a:	d10b      	bne.n	8011544 <_free_r+0x78>
 801152c:	6824      	ldr	r4, [r4, #0]
 801152e:	4421      	add	r1, r4
 8011530:	1854      	adds	r4, r2, r1
 8011532:	42a3      	cmp	r3, r4
 8011534:	6011      	str	r1, [r2, #0]
 8011536:	d1dd      	bne.n	80114f4 <_free_r+0x28>
 8011538:	681c      	ldr	r4, [r3, #0]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	6053      	str	r3, [r2, #4]
 801153e:	4421      	add	r1, r4
 8011540:	6011      	str	r1, [r2, #0]
 8011542:	e7d7      	b.n	80114f4 <_free_r+0x28>
 8011544:	d902      	bls.n	801154c <_free_r+0x80>
 8011546:	230c      	movs	r3, #12
 8011548:	6003      	str	r3, [r0, #0]
 801154a:	e7d3      	b.n	80114f4 <_free_r+0x28>
 801154c:	6825      	ldr	r5, [r4, #0]
 801154e:	1961      	adds	r1, r4, r5
 8011550:	428b      	cmp	r3, r1
 8011552:	bf04      	itt	eq
 8011554:	6819      	ldreq	r1, [r3, #0]
 8011556:	685b      	ldreq	r3, [r3, #4]
 8011558:	6063      	str	r3, [r4, #4]
 801155a:	bf04      	itt	eq
 801155c:	1949      	addeq	r1, r1, r5
 801155e:	6021      	streq	r1, [r4, #0]
 8011560:	6054      	str	r4, [r2, #4]
 8011562:	e7c7      	b.n	80114f4 <_free_r+0x28>
 8011564:	b003      	add	sp, #12
 8011566:	bd30      	pop	{r4, r5, pc}
 8011568:	2000022c 	.word	0x2000022c

0801156c <_malloc_r>:
 801156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156e:	1ccd      	adds	r5, r1, #3
 8011570:	f025 0503 	bic.w	r5, r5, #3
 8011574:	3508      	adds	r5, #8
 8011576:	2d0c      	cmp	r5, #12
 8011578:	bf38      	it	cc
 801157a:	250c      	movcc	r5, #12
 801157c:	2d00      	cmp	r5, #0
 801157e:	4606      	mov	r6, r0
 8011580:	db01      	blt.n	8011586 <_malloc_r+0x1a>
 8011582:	42a9      	cmp	r1, r5
 8011584:	d903      	bls.n	801158e <_malloc_r+0x22>
 8011586:	230c      	movs	r3, #12
 8011588:	6033      	str	r3, [r6, #0]
 801158a:	2000      	movs	r0, #0
 801158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801158e:	f000 faa3 	bl	8011ad8 <__malloc_lock>
 8011592:	4921      	ldr	r1, [pc, #132]	; (8011618 <_malloc_r+0xac>)
 8011594:	680a      	ldr	r2, [r1, #0]
 8011596:	4614      	mov	r4, r2
 8011598:	b99c      	cbnz	r4, 80115c2 <_malloc_r+0x56>
 801159a:	4f20      	ldr	r7, [pc, #128]	; (801161c <_malloc_r+0xb0>)
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	b923      	cbnz	r3, 80115aa <_malloc_r+0x3e>
 80115a0:	4621      	mov	r1, r4
 80115a2:	4630      	mov	r0, r6
 80115a4:	f000 f9a0 	bl	80118e8 <_sbrk_r>
 80115a8:	6038      	str	r0, [r7, #0]
 80115aa:	4629      	mov	r1, r5
 80115ac:	4630      	mov	r0, r6
 80115ae:	f000 f99b 	bl	80118e8 <_sbrk_r>
 80115b2:	1c43      	adds	r3, r0, #1
 80115b4:	d123      	bne.n	80115fe <_malloc_r+0x92>
 80115b6:	230c      	movs	r3, #12
 80115b8:	6033      	str	r3, [r6, #0]
 80115ba:	4630      	mov	r0, r6
 80115bc:	f000 fa92 	bl	8011ae4 <__malloc_unlock>
 80115c0:	e7e3      	b.n	801158a <_malloc_r+0x1e>
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	1b5b      	subs	r3, r3, r5
 80115c6:	d417      	bmi.n	80115f8 <_malloc_r+0x8c>
 80115c8:	2b0b      	cmp	r3, #11
 80115ca:	d903      	bls.n	80115d4 <_malloc_r+0x68>
 80115cc:	6023      	str	r3, [r4, #0]
 80115ce:	441c      	add	r4, r3
 80115d0:	6025      	str	r5, [r4, #0]
 80115d2:	e004      	b.n	80115de <_malloc_r+0x72>
 80115d4:	6863      	ldr	r3, [r4, #4]
 80115d6:	42a2      	cmp	r2, r4
 80115d8:	bf0c      	ite	eq
 80115da:	600b      	streq	r3, [r1, #0]
 80115dc:	6053      	strne	r3, [r2, #4]
 80115de:	4630      	mov	r0, r6
 80115e0:	f000 fa80 	bl	8011ae4 <__malloc_unlock>
 80115e4:	f104 000b 	add.w	r0, r4, #11
 80115e8:	1d23      	adds	r3, r4, #4
 80115ea:	f020 0007 	bic.w	r0, r0, #7
 80115ee:	1ac2      	subs	r2, r0, r3
 80115f0:	d0cc      	beq.n	801158c <_malloc_r+0x20>
 80115f2:	1a1b      	subs	r3, r3, r0
 80115f4:	50a3      	str	r3, [r4, r2]
 80115f6:	e7c9      	b.n	801158c <_malloc_r+0x20>
 80115f8:	4622      	mov	r2, r4
 80115fa:	6864      	ldr	r4, [r4, #4]
 80115fc:	e7cc      	b.n	8011598 <_malloc_r+0x2c>
 80115fe:	1cc4      	adds	r4, r0, #3
 8011600:	f024 0403 	bic.w	r4, r4, #3
 8011604:	42a0      	cmp	r0, r4
 8011606:	d0e3      	beq.n	80115d0 <_malloc_r+0x64>
 8011608:	1a21      	subs	r1, r4, r0
 801160a:	4630      	mov	r0, r6
 801160c:	f000 f96c 	bl	80118e8 <_sbrk_r>
 8011610:	3001      	adds	r0, #1
 8011612:	d1dd      	bne.n	80115d0 <_malloc_r+0x64>
 8011614:	e7cf      	b.n	80115b6 <_malloc_r+0x4a>
 8011616:	bf00      	nop
 8011618:	2000022c 	.word	0x2000022c
 801161c:	20000230 	.word	0x20000230

08011620 <__sfputc_r>:
 8011620:	6893      	ldr	r3, [r2, #8]
 8011622:	3b01      	subs	r3, #1
 8011624:	2b00      	cmp	r3, #0
 8011626:	b410      	push	{r4}
 8011628:	6093      	str	r3, [r2, #8]
 801162a:	da08      	bge.n	801163e <__sfputc_r+0x1e>
 801162c:	6994      	ldr	r4, [r2, #24]
 801162e:	42a3      	cmp	r3, r4
 8011630:	db01      	blt.n	8011636 <__sfputc_r+0x16>
 8011632:	290a      	cmp	r1, #10
 8011634:	d103      	bne.n	801163e <__sfputc_r+0x1e>
 8011636:	f85d 4b04 	ldr.w	r4, [sp], #4
 801163a:	f7fd bd99 	b.w	800f170 <__swbuf_r>
 801163e:	6813      	ldr	r3, [r2, #0]
 8011640:	1c58      	adds	r0, r3, #1
 8011642:	6010      	str	r0, [r2, #0]
 8011644:	7019      	strb	r1, [r3, #0]
 8011646:	4608      	mov	r0, r1
 8011648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801164c:	4770      	bx	lr

0801164e <__sfputs_r>:
 801164e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011650:	4606      	mov	r6, r0
 8011652:	460f      	mov	r7, r1
 8011654:	4614      	mov	r4, r2
 8011656:	18d5      	adds	r5, r2, r3
 8011658:	42ac      	cmp	r4, r5
 801165a:	d101      	bne.n	8011660 <__sfputs_r+0x12>
 801165c:	2000      	movs	r0, #0
 801165e:	e007      	b.n	8011670 <__sfputs_r+0x22>
 8011660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011664:	463a      	mov	r2, r7
 8011666:	4630      	mov	r0, r6
 8011668:	f7ff ffda 	bl	8011620 <__sfputc_r>
 801166c:	1c43      	adds	r3, r0, #1
 801166e:	d1f3      	bne.n	8011658 <__sfputs_r+0xa>
 8011670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011674 <_vfiprintf_r>:
 8011674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011678:	460d      	mov	r5, r1
 801167a:	b09d      	sub	sp, #116	; 0x74
 801167c:	4614      	mov	r4, r2
 801167e:	4698      	mov	r8, r3
 8011680:	4606      	mov	r6, r0
 8011682:	b118      	cbz	r0, 801168c <_vfiprintf_r+0x18>
 8011684:	6983      	ldr	r3, [r0, #24]
 8011686:	b90b      	cbnz	r3, 801168c <_vfiprintf_r+0x18>
 8011688:	f7fe fdc4 	bl	8010214 <__sinit>
 801168c:	4b89      	ldr	r3, [pc, #548]	; (80118b4 <_vfiprintf_r+0x240>)
 801168e:	429d      	cmp	r5, r3
 8011690:	d11b      	bne.n	80116ca <_vfiprintf_r+0x56>
 8011692:	6875      	ldr	r5, [r6, #4]
 8011694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011696:	07d9      	lsls	r1, r3, #31
 8011698:	d405      	bmi.n	80116a6 <_vfiprintf_r+0x32>
 801169a:	89ab      	ldrh	r3, [r5, #12]
 801169c:	059a      	lsls	r2, r3, #22
 801169e:	d402      	bmi.n	80116a6 <_vfiprintf_r+0x32>
 80116a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116a2:	f7ff f9c8 	bl	8010a36 <__retarget_lock_acquire_recursive>
 80116a6:	89ab      	ldrh	r3, [r5, #12]
 80116a8:	071b      	lsls	r3, r3, #28
 80116aa:	d501      	bpl.n	80116b0 <_vfiprintf_r+0x3c>
 80116ac:	692b      	ldr	r3, [r5, #16]
 80116ae:	b9eb      	cbnz	r3, 80116ec <_vfiprintf_r+0x78>
 80116b0:	4629      	mov	r1, r5
 80116b2:	4630      	mov	r0, r6
 80116b4:	f7fd fdae 	bl	800f214 <__swsetup_r>
 80116b8:	b1c0      	cbz	r0, 80116ec <_vfiprintf_r+0x78>
 80116ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116bc:	07dc      	lsls	r4, r3, #31
 80116be:	d50e      	bpl.n	80116de <_vfiprintf_r+0x6a>
 80116c0:	f04f 30ff 	mov.w	r0, #4294967295
 80116c4:	b01d      	add	sp, #116	; 0x74
 80116c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ca:	4b7b      	ldr	r3, [pc, #492]	; (80118b8 <_vfiprintf_r+0x244>)
 80116cc:	429d      	cmp	r5, r3
 80116ce:	d101      	bne.n	80116d4 <_vfiprintf_r+0x60>
 80116d0:	68b5      	ldr	r5, [r6, #8]
 80116d2:	e7df      	b.n	8011694 <_vfiprintf_r+0x20>
 80116d4:	4b79      	ldr	r3, [pc, #484]	; (80118bc <_vfiprintf_r+0x248>)
 80116d6:	429d      	cmp	r5, r3
 80116d8:	bf08      	it	eq
 80116da:	68f5      	ldreq	r5, [r6, #12]
 80116dc:	e7da      	b.n	8011694 <_vfiprintf_r+0x20>
 80116de:	89ab      	ldrh	r3, [r5, #12]
 80116e0:	0598      	lsls	r0, r3, #22
 80116e2:	d4ed      	bmi.n	80116c0 <_vfiprintf_r+0x4c>
 80116e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116e6:	f7ff f9a7 	bl	8010a38 <__retarget_lock_release_recursive>
 80116ea:	e7e9      	b.n	80116c0 <_vfiprintf_r+0x4c>
 80116ec:	2300      	movs	r3, #0
 80116ee:	9309      	str	r3, [sp, #36]	; 0x24
 80116f0:	2320      	movs	r3, #32
 80116f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80116fa:	2330      	movs	r3, #48	; 0x30
 80116fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80118c0 <_vfiprintf_r+0x24c>
 8011700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011704:	f04f 0901 	mov.w	r9, #1
 8011708:	4623      	mov	r3, r4
 801170a:	469a      	mov	sl, r3
 801170c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011710:	b10a      	cbz	r2, 8011716 <_vfiprintf_r+0xa2>
 8011712:	2a25      	cmp	r2, #37	; 0x25
 8011714:	d1f9      	bne.n	801170a <_vfiprintf_r+0x96>
 8011716:	ebba 0b04 	subs.w	fp, sl, r4
 801171a:	d00b      	beq.n	8011734 <_vfiprintf_r+0xc0>
 801171c:	465b      	mov	r3, fp
 801171e:	4622      	mov	r2, r4
 8011720:	4629      	mov	r1, r5
 8011722:	4630      	mov	r0, r6
 8011724:	f7ff ff93 	bl	801164e <__sfputs_r>
 8011728:	3001      	adds	r0, #1
 801172a:	f000 80aa 	beq.w	8011882 <_vfiprintf_r+0x20e>
 801172e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011730:	445a      	add	r2, fp
 8011732:	9209      	str	r2, [sp, #36]	; 0x24
 8011734:	f89a 3000 	ldrb.w	r3, [sl]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 80a2 	beq.w	8011882 <_vfiprintf_r+0x20e>
 801173e:	2300      	movs	r3, #0
 8011740:	f04f 32ff 	mov.w	r2, #4294967295
 8011744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011748:	f10a 0a01 	add.w	sl, sl, #1
 801174c:	9304      	str	r3, [sp, #16]
 801174e:	9307      	str	r3, [sp, #28]
 8011750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011754:	931a      	str	r3, [sp, #104]	; 0x68
 8011756:	4654      	mov	r4, sl
 8011758:	2205      	movs	r2, #5
 801175a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801175e:	4858      	ldr	r0, [pc, #352]	; (80118c0 <_vfiprintf_r+0x24c>)
 8011760:	f7ee fd66 	bl	8000230 <memchr>
 8011764:	9a04      	ldr	r2, [sp, #16]
 8011766:	b9d8      	cbnz	r0, 80117a0 <_vfiprintf_r+0x12c>
 8011768:	06d1      	lsls	r1, r2, #27
 801176a:	bf44      	itt	mi
 801176c:	2320      	movmi	r3, #32
 801176e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011772:	0713      	lsls	r3, r2, #28
 8011774:	bf44      	itt	mi
 8011776:	232b      	movmi	r3, #43	; 0x2b
 8011778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801177c:	f89a 3000 	ldrb.w	r3, [sl]
 8011780:	2b2a      	cmp	r3, #42	; 0x2a
 8011782:	d015      	beq.n	80117b0 <_vfiprintf_r+0x13c>
 8011784:	9a07      	ldr	r2, [sp, #28]
 8011786:	4654      	mov	r4, sl
 8011788:	2000      	movs	r0, #0
 801178a:	f04f 0c0a 	mov.w	ip, #10
 801178e:	4621      	mov	r1, r4
 8011790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011794:	3b30      	subs	r3, #48	; 0x30
 8011796:	2b09      	cmp	r3, #9
 8011798:	d94e      	bls.n	8011838 <_vfiprintf_r+0x1c4>
 801179a:	b1b0      	cbz	r0, 80117ca <_vfiprintf_r+0x156>
 801179c:	9207      	str	r2, [sp, #28]
 801179e:	e014      	b.n	80117ca <_vfiprintf_r+0x156>
 80117a0:	eba0 0308 	sub.w	r3, r0, r8
 80117a4:	fa09 f303 	lsl.w	r3, r9, r3
 80117a8:	4313      	orrs	r3, r2
 80117aa:	9304      	str	r3, [sp, #16]
 80117ac:	46a2      	mov	sl, r4
 80117ae:	e7d2      	b.n	8011756 <_vfiprintf_r+0xe2>
 80117b0:	9b03      	ldr	r3, [sp, #12]
 80117b2:	1d19      	adds	r1, r3, #4
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	9103      	str	r1, [sp, #12]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	bfbb      	ittet	lt
 80117bc:	425b      	neglt	r3, r3
 80117be:	f042 0202 	orrlt.w	r2, r2, #2
 80117c2:	9307      	strge	r3, [sp, #28]
 80117c4:	9307      	strlt	r3, [sp, #28]
 80117c6:	bfb8      	it	lt
 80117c8:	9204      	strlt	r2, [sp, #16]
 80117ca:	7823      	ldrb	r3, [r4, #0]
 80117cc:	2b2e      	cmp	r3, #46	; 0x2e
 80117ce:	d10c      	bne.n	80117ea <_vfiprintf_r+0x176>
 80117d0:	7863      	ldrb	r3, [r4, #1]
 80117d2:	2b2a      	cmp	r3, #42	; 0x2a
 80117d4:	d135      	bne.n	8011842 <_vfiprintf_r+0x1ce>
 80117d6:	9b03      	ldr	r3, [sp, #12]
 80117d8:	1d1a      	adds	r2, r3, #4
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	9203      	str	r2, [sp, #12]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	bfb8      	it	lt
 80117e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80117e6:	3402      	adds	r4, #2
 80117e8:	9305      	str	r3, [sp, #20]
 80117ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80118d0 <_vfiprintf_r+0x25c>
 80117ee:	7821      	ldrb	r1, [r4, #0]
 80117f0:	2203      	movs	r2, #3
 80117f2:	4650      	mov	r0, sl
 80117f4:	f7ee fd1c 	bl	8000230 <memchr>
 80117f8:	b140      	cbz	r0, 801180c <_vfiprintf_r+0x198>
 80117fa:	2340      	movs	r3, #64	; 0x40
 80117fc:	eba0 000a 	sub.w	r0, r0, sl
 8011800:	fa03 f000 	lsl.w	r0, r3, r0
 8011804:	9b04      	ldr	r3, [sp, #16]
 8011806:	4303      	orrs	r3, r0
 8011808:	3401      	adds	r4, #1
 801180a:	9304      	str	r3, [sp, #16]
 801180c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011810:	482c      	ldr	r0, [pc, #176]	; (80118c4 <_vfiprintf_r+0x250>)
 8011812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011816:	2206      	movs	r2, #6
 8011818:	f7ee fd0a 	bl	8000230 <memchr>
 801181c:	2800      	cmp	r0, #0
 801181e:	d03f      	beq.n	80118a0 <_vfiprintf_r+0x22c>
 8011820:	4b29      	ldr	r3, [pc, #164]	; (80118c8 <_vfiprintf_r+0x254>)
 8011822:	bb1b      	cbnz	r3, 801186c <_vfiprintf_r+0x1f8>
 8011824:	9b03      	ldr	r3, [sp, #12]
 8011826:	3307      	adds	r3, #7
 8011828:	f023 0307 	bic.w	r3, r3, #7
 801182c:	3308      	adds	r3, #8
 801182e:	9303      	str	r3, [sp, #12]
 8011830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011832:	443b      	add	r3, r7
 8011834:	9309      	str	r3, [sp, #36]	; 0x24
 8011836:	e767      	b.n	8011708 <_vfiprintf_r+0x94>
 8011838:	fb0c 3202 	mla	r2, ip, r2, r3
 801183c:	460c      	mov	r4, r1
 801183e:	2001      	movs	r0, #1
 8011840:	e7a5      	b.n	801178e <_vfiprintf_r+0x11a>
 8011842:	2300      	movs	r3, #0
 8011844:	3401      	adds	r4, #1
 8011846:	9305      	str	r3, [sp, #20]
 8011848:	4619      	mov	r1, r3
 801184a:	f04f 0c0a 	mov.w	ip, #10
 801184e:	4620      	mov	r0, r4
 8011850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011854:	3a30      	subs	r2, #48	; 0x30
 8011856:	2a09      	cmp	r2, #9
 8011858:	d903      	bls.n	8011862 <_vfiprintf_r+0x1ee>
 801185a:	2b00      	cmp	r3, #0
 801185c:	d0c5      	beq.n	80117ea <_vfiprintf_r+0x176>
 801185e:	9105      	str	r1, [sp, #20]
 8011860:	e7c3      	b.n	80117ea <_vfiprintf_r+0x176>
 8011862:	fb0c 2101 	mla	r1, ip, r1, r2
 8011866:	4604      	mov	r4, r0
 8011868:	2301      	movs	r3, #1
 801186a:	e7f0      	b.n	801184e <_vfiprintf_r+0x1da>
 801186c:	ab03      	add	r3, sp, #12
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	462a      	mov	r2, r5
 8011872:	4b16      	ldr	r3, [pc, #88]	; (80118cc <_vfiprintf_r+0x258>)
 8011874:	a904      	add	r1, sp, #16
 8011876:	4630      	mov	r0, r6
 8011878:	f7fc f962 	bl	800db40 <_printf_float>
 801187c:	4607      	mov	r7, r0
 801187e:	1c78      	adds	r0, r7, #1
 8011880:	d1d6      	bne.n	8011830 <_vfiprintf_r+0x1bc>
 8011882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011884:	07d9      	lsls	r1, r3, #31
 8011886:	d405      	bmi.n	8011894 <_vfiprintf_r+0x220>
 8011888:	89ab      	ldrh	r3, [r5, #12]
 801188a:	059a      	lsls	r2, r3, #22
 801188c:	d402      	bmi.n	8011894 <_vfiprintf_r+0x220>
 801188e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011890:	f7ff f8d2 	bl	8010a38 <__retarget_lock_release_recursive>
 8011894:	89ab      	ldrh	r3, [r5, #12]
 8011896:	065b      	lsls	r3, r3, #25
 8011898:	f53f af12 	bmi.w	80116c0 <_vfiprintf_r+0x4c>
 801189c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801189e:	e711      	b.n	80116c4 <_vfiprintf_r+0x50>
 80118a0:	ab03      	add	r3, sp, #12
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	462a      	mov	r2, r5
 80118a6:	4b09      	ldr	r3, [pc, #36]	; (80118cc <_vfiprintf_r+0x258>)
 80118a8:	a904      	add	r1, sp, #16
 80118aa:	4630      	mov	r0, r6
 80118ac:	f7fc fbec 	bl	800e088 <_printf_i>
 80118b0:	e7e4      	b.n	801187c <_vfiprintf_r+0x208>
 80118b2:	bf00      	nop
 80118b4:	080135c0 	.word	0x080135c0
 80118b8:	080135e0 	.word	0x080135e0
 80118bc:	080135a0 	.word	0x080135a0
 80118c0:	080137dc 	.word	0x080137dc
 80118c4:	080137e6 	.word	0x080137e6
 80118c8:	0800db41 	.word	0x0800db41
 80118cc:	0801164f 	.word	0x0801164f
 80118d0:	080137e2 	.word	0x080137e2
 80118d4:	00000000 	.word	0x00000000

080118d8 <nan>:
 80118d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80118e0 <nan+0x8>
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	00000000 	.word	0x00000000
 80118e4:	7ff80000 	.word	0x7ff80000

080118e8 <_sbrk_r>:
 80118e8:	b538      	push	{r3, r4, r5, lr}
 80118ea:	4d06      	ldr	r5, [pc, #24]	; (8011904 <_sbrk_r+0x1c>)
 80118ec:	2300      	movs	r3, #0
 80118ee:	4604      	mov	r4, r0
 80118f0:	4608      	mov	r0, r1
 80118f2:	602b      	str	r3, [r5, #0]
 80118f4:	f7f3 ff28 	bl	8005748 <_sbrk>
 80118f8:	1c43      	adds	r3, r0, #1
 80118fa:	d102      	bne.n	8011902 <_sbrk_r+0x1a>
 80118fc:	682b      	ldr	r3, [r5, #0]
 80118fe:	b103      	cbz	r3, 8011902 <_sbrk_r+0x1a>
 8011900:	6023      	str	r3, [r4, #0]
 8011902:	bd38      	pop	{r3, r4, r5, pc}
 8011904:	20009594 	.word	0x20009594

08011908 <__sread>:
 8011908:	b510      	push	{r4, lr}
 801190a:	460c      	mov	r4, r1
 801190c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011910:	f000 f8ee 	bl	8011af0 <_read_r>
 8011914:	2800      	cmp	r0, #0
 8011916:	bfab      	itete	ge
 8011918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801191a:	89a3      	ldrhlt	r3, [r4, #12]
 801191c:	181b      	addge	r3, r3, r0
 801191e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011922:	bfac      	ite	ge
 8011924:	6563      	strge	r3, [r4, #84]	; 0x54
 8011926:	81a3      	strhlt	r3, [r4, #12]
 8011928:	bd10      	pop	{r4, pc}

0801192a <__swrite>:
 801192a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801192e:	461f      	mov	r7, r3
 8011930:	898b      	ldrh	r3, [r1, #12]
 8011932:	05db      	lsls	r3, r3, #23
 8011934:	4605      	mov	r5, r0
 8011936:	460c      	mov	r4, r1
 8011938:	4616      	mov	r6, r2
 801193a:	d505      	bpl.n	8011948 <__swrite+0x1e>
 801193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011940:	2302      	movs	r3, #2
 8011942:	2200      	movs	r2, #0
 8011944:	f000 f8b6 	bl	8011ab4 <_lseek_r>
 8011948:	89a3      	ldrh	r3, [r4, #12]
 801194a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801194e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011952:	81a3      	strh	r3, [r4, #12]
 8011954:	4632      	mov	r2, r6
 8011956:	463b      	mov	r3, r7
 8011958:	4628      	mov	r0, r5
 801195a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801195e:	f000 b835 	b.w	80119cc <_write_r>

08011962 <__sseek>:
 8011962:	b510      	push	{r4, lr}
 8011964:	460c      	mov	r4, r1
 8011966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801196a:	f000 f8a3 	bl	8011ab4 <_lseek_r>
 801196e:	1c43      	adds	r3, r0, #1
 8011970:	89a3      	ldrh	r3, [r4, #12]
 8011972:	bf15      	itete	ne
 8011974:	6560      	strne	r0, [r4, #84]	; 0x54
 8011976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801197a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801197e:	81a3      	strheq	r3, [r4, #12]
 8011980:	bf18      	it	ne
 8011982:	81a3      	strhne	r3, [r4, #12]
 8011984:	bd10      	pop	{r4, pc}

08011986 <__sclose>:
 8011986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801198a:	f000 b84f 	b.w	8011a2c <_close_r>

0801198e <strncmp>:
 801198e:	b510      	push	{r4, lr}
 8011990:	b16a      	cbz	r2, 80119ae <strncmp+0x20>
 8011992:	3901      	subs	r1, #1
 8011994:	1884      	adds	r4, r0, r2
 8011996:	f810 3b01 	ldrb.w	r3, [r0], #1
 801199a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801199e:	4293      	cmp	r3, r2
 80119a0:	d103      	bne.n	80119aa <strncmp+0x1c>
 80119a2:	42a0      	cmp	r0, r4
 80119a4:	d001      	beq.n	80119aa <strncmp+0x1c>
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d1f5      	bne.n	8011996 <strncmp+0x8>
 80119aa:	1a98      	subs	r0, r3, r2
 80119ac:	bd10      	pop	{r4, pc}
 80119ae:	4610      	mov	r0, r2
 80119b0:	e7fc      	b.n	80119ac <strncmp+0x1e>

080119b2 <__ascii_wctomb>:
 80119b2:	b149      	cbz	r1, 80119c8 <__ascii_wctomb+0x16>
 80119b4:	2aff      	cmp	r2, #255	; 0xff
 80119b6:	bf85      	ittet	hi
 80119b8:	238a      	movhi	r3, #138	; 0x8a
 80119ba:	6003      	strhi	r3, [r0, #0]
 80119bc:	700a      	strbls	r2, [r1, #0]
 80119be:	f04f 30ff 	movhi.w	r0, #4294967295
 80119c2:	bf98      	it	ls
 80119c4:	2001      	movls	r0, #1
 80119c6:	4770      	bx	lr
 80119c8:	4608      	mov	r0, r1
 80119ca:	4770      	bx	lr

080119cc <_write_r>:
 80119cc:	b538      	push	{r3, r4, r5, lr}
 80119ce:	4d07      	ldr	r5, [pc, #28]	; (80119ec <_write_r+0x20>)
 80119d0:	4604      	mov	r4, r0
 80119d2:	4608      	mov	r0, r1
 80119d4:	4611      	mov	r1, r2
 80119d6:	2200      	movs	r2, #0
 80119d8:	602a      	str	r2, [r5, #0]
 80119da:	461a      	mov	r2, r3
 80119dc:	f7f3 fe63 	bl	80056a6 <_write>
 80119e0:	1c43      	adds	r3, r0, #1
 80119e2:	d102      	bne.n	80119ea <_write_r+0x1e>
 80119e4:	682b      	ldr	r3, [r5, #0]
 80119e6:	b103      	cbz	r3, 80119ea <_write_r+0x1e>
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	bd38      	pop	{r3, r4, r5, pc}
 80119ec:	20009594 	.word	0x20009594

080119f0 <__assert_func>:
 80119f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119f2:	4614      	mov	r4, r2
 80119f4:	461a      	mov	r2, r3
 80119f6:	4b09      	ldr	r3, [pc, #36]	; (8011a1c <__assert_func+0x2c>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4605      	mov	r5, r0
 80119fc:	68d8      	ldr	r0, [r3, #12]
 80119fe:	b14c      	cbz	r4, 8011a14 <__assert_func+0x24>
 8011a00:	4b07      	ldr	r3, [pc, #28]	; (8011a20 <__assert_func+0x30>)
 8011a02:	9100      	str	r1, [sp, #0]
 8011a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a08:	4906      	ldr	r1, [pc, #24]	; (8011a24 <__assert_func+0x34>)
 8011a0a:	462b      	mov	r3, r5
 8011a0c:	f000 f81e 	bl	8011a4c <fiprintf>
 8011a10:	f000 f880 	bl	8011b14 <abort>
 8011a14:	4b04      	ldr	r3, [pc, #16]	; (8011a28 <__assert_func+0x38>)
 8011a16:	461c      	mov	r4, r3
 8011a18:	e7f3      	b.n	8011a02 <__assert_func+0x12>
 8011a1a:	bf00      	nop
 8011a1c:	2000002c 	.word	0x2000002c
 8011a20:	080137ed 	.word	0x080137ed
 8011a24:	080137fa 	.word	0x080137fa
 8011a28:	08013828 	.word	0x08013828

08011a2c <_close_r>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	4d06      	ldr	r5, [pc, #24]	; (8011a48 <_close_r+0x1c>)
 8011a30:	2300      	movs	r3, #0
 8011a32:	4604      	mov	r4, r0
 8011a34:	4608      	mov	r0, r1
 8011a36:	602b      	str	r3, [r5, #0]
 8011a38:	f7f3 fe51 	bl	80056de <_close>
 8011a3c:	1c43      	adds	r3, r0, #1
 8011a3e:	d102      	bne.n	8011a46 <_close_r+0x1a>
 8011a40:	682b      	ldr	r3, [r5, #0]
 8011a42:	b103      	cbz	r3, 8011a46 <_close_r+0x1a>
 8011a44:	6023      	str	r3, [r4, #0]
 8011a46:	bd38      	pop	{r3, r4, r5, pc}
 8011a48:	20009594 	.word	0x20009594

08011a4c <fiprintf>:
 8011a4c:	b40e      	push	{r1, r2, r3}
 8011a4e:	b503      	push	{r0, r1, lr}
 8011a50:	4601      	mov	r1, r0
 8011a52:	ab03      	add	r3, sp, #12
 8011a54:	4805      	ldr	r0, [pc, #20]	; (8011a6c <fiprintf+0x20>)
 8011a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a5a:	6800      	ldr	r0, [r0, #0]
 8011a5c:	9301      	str	r3, [sp, #4]
 8011a5e:	f7ff fe09 	bl	8011674 <_vfiprintf_r>
 8011a62:	b002      	add	sp, #8
 8011a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a68:	b003      	add	sp, #12
 8011a6a:	4770      	bx	lr
 8011a6c:	2000002c 	.word	0x2000002c

08011a70 <_fstat_r>:
 8011a70:	b538      	push	{r3, r4, r5, lr}
 8011a72:	4d07      	ldr	r5, [pc, #28]	; (8011a90 <_fstat_r+0x20>)
 8011a74:	2300      	movs	r3, #0
 8011a76:	4604      	mov	r4, r0
 8011a78:	4608      	mov	r0, r1
 8011a7a:	4611      	mov	r1, r2
 8011a7c:	602b      	str	r3, [r5, #0]
 8011a7e:	f7f3 fe3a 	bl	80056f6 <_fstat>
 8011a82:	1c43      	adds	r3, r0, #1
 8011a84:	d102      	bne.n	8011a8c <_fstat_r+0x1c>
 8011a86:	682b      	ldr	r3, [r5, #0]
 8011a88:	b103      	cbz	r3, 8011a8c <_fstat_r+0x1c>
 8011a8a:	6023      	str	r3, [r4, #0]
 8011a8c:	bd38      	pop	{r3, r4, r5, pc}
 8011a8e:	bf00      	nop
 8011a90:	20009594 	.word	0x20009594

08011a94 <_isatty_r>:
 8011a94:	b538      	push	{r3, r4, r5, lr}
 8011a96:	4d06      	ldr	r5, [pc, #24]	; (8011ab0 <_isatty_r+0x1c>)
 8011a98:	2300      	movs	r3, #0
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	4608      	mov	r0, r1
 8011a9e:	602b      	str	r3, [r5, #0]
 8011aa0:	f7f3 fe39 	bl	8005716 <_isatty>
 8011aa4:	1c43      	adds	r3, r0, #1
 8011aa6:	d102      	bne.n	8011aae <_isatty_r+0x1a>
 8011aa8:	682b      	ldr	r3, [r5, #0]
 8011aaa:	b103      	cbz	r3, 8011aae <_isatty_r+0x1a>
 8011aac:	6023      	str	r3, [r4, #0]
 8011aae:	bd38      	pop	{r3, r4, r5, pc}
 8011ab0:	20009594 	.word	0x20009594

08011ab4 <_lseek_r>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	4d07      	ldr	r5, [pc, #28]	; (8011ad4 <_lseek_r+0x20>)
 8011ab8:	4604      	mov	r4, r0
 8011aba:	4608      	mov	r0, r1
 8011abc:	4611      	mov	r1, r2
 8011abe:	2200      	movs	r2, #0
 8011ac0:	602a      	str	r2, [r5, #0]
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	f7f3 fe32 	bl	800572c <_lseek>
 8011ac8:	1c43      	adds	r3, r0, #1
 8011aca:	d102      	bne.n	8011ad2 <_lseek_r+0x1e>
 8011acc:	682b      	ldr	r3, [r5, #0]
 8011ace:	b103      	cbz	r3, 8011ad2 <_lseek_r+0x1e>
 8011ad0:	6023      	str	r3, [r4, #0]
 8011ad2:	bd38      	pop	{r3, r4, r5, pc}
 8011ad4:	20009594 	.word	0x20009594

08011ad8 <__malloc_lock>:
 8011ad8:	4801      	ldr	r0, [pc, #4]	; (8011ae0 <__malloc_lock+0x8>)
 8011ada:	f7fe bfac 	b.w	8010a36 <__retarget_lock_acquire_recursive>
 8011ade:	bf00      	nop
 8011ae0:	2000958c 	.word	0x2000958c

08011ae4 <__malloc_unlock>:
 8011ae4:	4801      	ldr	r0, [pc, #4]	; (8011aec <__malloc_unlock+0x8>)
 8011ae6:	f7fe bfa7 	b.w	8010a38 <__retarget_lock_release_recursive>
 8011aea:	bf00      	nop
 8011aec:	2000958c 	.word	0x2000958c

08011af0 <_read_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	4d07      	ldr	r5, [pc, #28]	; (8011b10 <_read_r+0x20>)
 8011af4:	4604      	mov	r4, r0
 8011af6:	4608      	mov	r0, r1
 8011af8:	4611      	mov	r1, r2
 8011afa:	2200      	movs	r2, #0
 8011afc:	602a      	str	r2, [r5, #0]
 8011afe:	461a      	mov	r2, r3
 8011b00:	f7f3 fdb4 	bl	800566c <_read>
 8011b04:	1c43      	adds	r3, r0, #1
 8011b06:	d102      	bne.n	8011b0e <_read_r+0x1e>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	b103      	cbz	r3, 8011b0e <_read_r+0x1e>
 8011b0c:	6023      	str	r3, [r4, #0]
 8011b0e:	bd38      	pop	{r3, r4, r5, pc}
 8011b10:	20009594 	.word	0x20009594

08011b14 <abort>:
 8011b14:	b508      	push	{r3, lr}
 8011b16:	2006      	movs	r0, #6
 8011b18:	f000 f82c 	bl	8011b74 <raise>
 8011b1c:	2001      	movs	r0, #1
 8011b1e:	f7f3 fd9b 	bl	8005658 <_exit>

08011b22 <_raise_r>:
 8011b22:	291f      	cmp	r1, #31
 8011b24:	b538      	push	{r3, r4, r5, lr}
 8011b26:	4604      	mov	r4, r0
 8011b28:	460d      	mov	r5, r1
 8011b2a:	d904      	bls.n	8011b36 <_raise_r+0x14>
 8011b2c:	2316      	movs	r3, #22
 8011b2e:	6003      	str	r3, [r0, #0]
 8011b30:	f04f 30ff 	mov.w	r0, #4294967295
 8011b34:	bd38      	pop	{r3, r4, r5, pc}
 8011b36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b38:	b112      	cbz	r2, 8011b40 <_raise_r+0x1e>
 8011b3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b3e:	b94b      	cbnz	r3, 8011b54 <_raise_r+0x32>
 8011b40:	4620      	mov	r0, r4
 8011b42:	f000 f831 	bl	8011ba8 <_getpid_r>
 8011b46:	462a      	mov	r2, r5
 8011b48:	4601      	mov	r1, r0
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b50:	f000 b818 	b.w	8011b84 <_kill_r>
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d00a      	beq.n	8011b6e <_raise_r+0x4c>
 8011b58:	1c59      	adds	r1, r3, #1
 8011b5a:	d103      	bne.n	8011b64 <_raise_r+0x42>
 8011b5c:	2316      	movs	r3, #22
 8011b5e:	6003      	str	r3, [r0, #0]
 8011b60:	2001      	movs	r0, #1
 8011b62:	e7e7      	b.n	8011b34 <_raise_r+0x12>
 8011b64:	2400      	movs	r4, #0
 8011b66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b6a:	4628      	mov	r0, r5
 8011b6c:	4798      	blx	r3
 8011b6e:	2000      	movs	r0, #0
 8011b70:	e7e0      	b.n	8011b34 <_raise_r+0x12>
	...

08011b74 <raise>:
 8011b74:	4b02      	ldr	r3, [pc, #8]	; (8011b80 <raise+0xc>)
 8011b76:	4601      	mov	r1, r0
 8011b78:	6818      	ldr	r0, [r3, #0]
 8011b7a:	f7ff bfd2 	b.w	8011b22 <_raise_r>
 8011b7e:	bf00      	nop
 8011b80:	2000002c 	.word	0x2000002c

08011b84 <_kill_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4d07      	ldr	r5, [pc, #28]	; (8011ba4 <_kill_r+0x20>)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	4611      	mov	r1, r2
 8011b90:	602b      	str	r3, [r5, #0]
 8011b92:	f7f3 fd51 	bl	8005638 <_kill>
 8011b96:	1c43      	adds	r3, r0, #1
 8011b98:	d102      	bne.n	8011ba0 <_kill_r+0x1c>
 8011b9a:	682b      	ldr	r3, [r5, #0]
 8011b9c:	b103      	cbz	r3, 8011ba0 <_kill_r+0x1c>
 8011b9e:	6023      	str	r3, [r4, #0]
 8011ba0:	bd38      	pop	{r3, r4, r5, pc}
 8011ba2:	bf00      	nop
 8011ba4:	20009594 	.word	0x20009594

08011ba8 <_getpid_r>:
 8011ba8:	f7f3 bd3e 	b.w	8005628 <_getpid>

08011bac <round>:
 8011bac:	ec51 0b10 	vmov	r0, r1, d0
 8011bb0:	b570      	push	{r4, r5, r6, lr}
 8011bb2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8011bb6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011bba:	2c13      	cmp	r4, #19
 8011bbc:	ee10 2a10 	vmov	r2, s0
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	dc19      	bgt.n	8011bf8 <round+0x4c>
 8011bc4:	2c00      	cmp	r4, #0
 8011bc6:	da09      	bge.n	8011bdc <round+0x30>
 8011bc8:	3401      	adds	r4, #1
 8011bca:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011bce:	d103      	bne.n	8011bd8 <round+0x2c>
 8011bd0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011bd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011bd8:	2100      	movs	r1, #0
 8011bda:	e028      	b.n	8011c2e <round+0x82>
 8011bdc:	4d15      	ldr	r5, [pc, #84]	; (8011c34 <round+0x88>)
 8011bde:	4125      	asrs	r5, r4
 8011be0:	ea01 0605 	and.w	r6, r1, r5
 8011be4:	4332      	orrs	r2, r6
 8011be6:	d00e      	beq.n	8011c06 <round+0x5a>
 8011be8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011bec:	fa42 f404 	asr.w	r4, r2, r4
 8011bf0:	4423      	add	r3, r4
 8011bf2:	ea23 0305 	bic.w	r3, r3, r5
 8011bf6:	e7ef      	b.n	8011bd8 <round+0x2c>
 8011bf8:	2c33      	cmp	r4, #51	; 0x33
 8011bfa:	dd07      	ble.n	8011c0c <round+0x60>
 8011bfc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011c00:	d101      	bne.n	8011c06 <round+0x5a>
 8011c02:	f7ee fb6b 	bl	80002dc <__adddf3>
 8011c06:	ec41 0b10 	vmov	d0, r0, r1
 8011c0a:	bd70      	pop	{r4, r5, r6, pc}
 8011c0c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011c10:	f04f 35ff 	mov.w	r5, #4294967295
 8011c14:	40f5      	lsrs	r5, r6
 8011c16:	4228      	tst	r0, r5
 8011c18:	d0f5      	beq.n	8011c06 <round+0x5a>
 8011c1a:	2101      	movs	r1, #1
 8011c1c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011c20:	fa01 f404 	lsl.w	r4, r1, r4
 8011c24:	1912      	adds	r2, r2, r4
 8011c26:	bf28      	it	cs
 8011c28:	185b      	addcs	r3, r3, r1
 8011c2a:	ea22 0105 	bic.w	r1, r2, r5
 8011c2e:	4608      	mov	r0, r1
 8011c30:	4619      	mov	r1, r3
 8011c32:	e7e8      	b.n	8011c06 <round+0x5a>
 8011c34:	000fffff 	.word	0x000fffff

08011c38 <fmaxf>:
 8011c38:	b508      	push	{r3, lr}
 8011c3a:	ed2d 8b02 	vpush	{d8}
 8011c3e:	eeb0 8a40 	vmov.f32	s16, s0
 8011c42:	eef0 8a60 	vmov.f32	s17, s1
 8011c46:	f000 f82d 	bl	8011ca4 <__fpclassifyf>
 8011c4a:	b148      	cbz	r0, 8011c60 <fmaxf+0x28>
 8011c4c:	eeb0 0a68 	vmov.f32	s0, s17
 8011c50:	f000 f828 	bl	8011ca4 <__fpclassifyf>
 8011c54:	b130      	cbz	r0, 8011c64 <fmaxf+0x2c>
 8011c56:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5e:	dc01      	bgt.n	8011c64 <fmaxf+0x2c>
 8011c60:	eeb0 8a68 	vmov.f32	s16, s17
 8011c64:	eeb0 0a48 	vmov.f32	s0, s16
 8011c68:	ecbd 8b02 	vpop	{d8}
 8011c6c:	bd08      	pop	{r3, pc}

08011c6e <fminf>:
 8011c6e:	b508      	push	{r3, lr}
 8011c70:	ed2d 8b02 	vpush	{d8}
 8011c74:	eeb0 8a40 	vmov.f32	s16, s0
 8011c78:	eef0 8a60 	vmov.f32	s17, s1
 8011c7c:	f000 f812 	bl	8011ca4 <__fpclassifyf>
 8011c80:	b148      	cbz	r0, 8011c96 <fminf+0x28>
 8011c82:	eeb0 0a68 	vmov.f32	s0, s17
 8011c86:	f000 f80d 	bl	8011ca4 <__fpclassifyf>
 8011c8a:	b130      	cbz	r0, 8011c9a <fminf+0x2c>
 8011c8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c94:	d401      	bmi.n	8011c9a <fminf+0x2c>
 8011c96:	eeb0 8a68 	vmov.f32	s16, s17
 8011c9a:	eeb0 0a48 	vmov.f32	s0, s16
 8011c9e:	ecbd 8b02 	vpop	{d8}
 8011ca2:	bd08      	pop	{r3, pc}

08011ca4 <__fpclassifyf>:
 8011ca4:	ee10 3a10 	vmov	r3, s0
 8011ca8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011cac:	d00d      	beq.n	8011cca <__fpclassifyf+0x26>
 8011cae:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8011cb2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011cb6:	d30a      	bcc.n	8011cce <__fpclassifyf+0x2a>
 8011cb8:	4b07      	ldr	r3, [pc, #28]	; (8011cd8 <__fpclassifyf+0x34>)
 8011cba:	1e42      	subs	r2, r0, #1
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d908      	bls.n	8011cd2 <__fpclassifyf+0x2e>
 8011cc0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011cc4:	4258      	negs	r0, r3
 8011cc6:	4158      	adcs	r0, r3
 8011cc8:	4770      	bx	lr
 8011cca:	2002      	movs	r0, #2
 8011ccc:	4770      	bx	lr
 8011cce:	2004      	movs	r0, #4
 8011cd0:	4770      	bx	lr
 8011cd2:	2003      	movs	r0, #3
 8011cd4:	4770      	bx	lr
 8011cd6:	bf00      	nop
 8011cd8:	007ffffe 	.word	0x007ffffe
 8011cdc:	00000000 	.word	0x00000000

08011ce0 <exp>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	ed2d 8b02 	vpush	{d8}
 8011ce6:	ec55 4b10 	vmov	r4, r5, d0
 8011cea:	f000 f899 	bl	8011e20 <__ieee754_exp>
 8011cee:	4b22      	ldr	r3, [pc, #136]	; (8011d78 <exp+0x98>)
 8011cf0:	eeb0 8a40 	vmov.f32	s16, s0
 8011cf4:	eef0 8a60 	vmov.f32	s17, s1
 8011cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	d012      	beq.n	8011d26 <exp+0x46>
 8011d00:	ec45 4b10 	vmov	d0, r4, r5
 8011d04:	f000 fa8b 	bl	801221e <finite>
 8011d08:	b168      	cbz	r0, 8011d26 <exp+0x46>
 8011d0a:	a313      	add	r3, pc, #76	; (adr r3, 8011d58 <exp+0x78>)
 8011d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d10:	4620      	mov	r0, r4
 8011d12:	4629      	mov	r1, r5
 8011d14:	f7ee ff28 	bl	8000b68 <__aeabi_dcmpgt>
 8011d18:	b160      	cbz	r0, 8011d34 <exp+0x54>
 8011d1a:	f7fb fe31 	bl	800d980 <__errno>
 8011d1e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8011d60 <exp+0x80>
 8011d22:	2322      	movs	r3, #34	; 0x22
 8011d24:	6003      	str	r3, [r0, #0]
 8011d26:	eeb0 0a48 	vmov.f32	s0, s16
 8011d2a:	eef0 0a68 	vmov.f32	s1, s17
 8011d2e:	ecbd 8b02 	vpop	{d8}
 8011d32:	bd38      	pop	{r3, r4, r5, pc}
 8011d34:	a30c      	add	r3, pc, #48	; (adr r3, 8011d68 <exp+0x88>)
 8011d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	4629      	mov	r1, r5
 8011d3e:	f7ee fef5 	bl	8000b2c <__aeabi_dcmplt>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	d0ef      	beq.n	8011d26 <exp+0x46>
 8011d46:	f7fb fe1b 	bl	800d980 <__errno>
 8011d4a:	2322      	movs	r3, #34	; 0x22
 8011d4c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8011d70 <exp+0x90>
 8011d50:	6003      	str	r3, [r0, #0]
 8011d52:	e7e8      	b.n	8011d26 <exp+0x46>
 8011d54:	f3af 8000 	nop.w
 8011d58:	fefa39ef 	.word	0xfefa39ef
 8011d5c:	40862e42 	.word	0x40862e42
 8011d60:	00000000 	.word	0x00000000
 8011d64:	7ff00000 	.word	0x7ff00000
 8011d68:	d52d3051 	.word	0xd52d3051
 8011d6c:	c0874910 	.word	0xc0874910
	...
 8011d78:	20000200 	.word	0x20000200

08011d7c <fmodf>:
 8011d7c:	b508      	push	{r3, lr}
 8011d7e:	ed2d 8b02 	vpush	{d8}
 8011d82:	eef0 8a40 	vmov.f32	s17, s0
 8011d86:	eeb0 8a60 	vmov.f32	s16, s1
 8011d8a:	f000 f9c3 	bl	8012114 <__ieee754_fmodf>
 8011d8e:	4b0f      	ldr	r3, [pc, #60]	; (8011dcc <fmodf+0x50>)
 8011d90:	f993 3000 	ldrsb.w	r3, [r3]
 8011d94:	3301      	adds	r3, #1
 8011d96:	d016      	beq.n	8011dc6 <fmodf+0x4a>
 8011d98:	eeb4 8a48 	vcmp.f32	s16, s16
 8011d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da0:	d611      	bvs.n	8011dc6 <fmodf+0x4a>
 8011da2:	eef4 8a68 	vcmp.f32	s17, s17
 8011da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011daa:	d60c      	bvs.n	8011dc6 <fmodf+0x4a>
 8011dac:	eddf 8a08 	vldr	s17, [pc, #32]	; 8011dd0 <fmodf+0x54>
 8011db0:	eeb4 8a68 	vcmp.f32	s16, s17
 8011db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db8:	d105      	bne.n	8011dc6 <fmodf+0x4a>
 8011dba:	f7fb fde1 	bl	800d980 <__errno>
 8011dbe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011dc2:	2321      	movs	r3, #33	; 0x21
 8011dc4:	6003      	str	r3, [r0, #0]
 8011dc6:	ecbd 8b02 	vpop	{d8}
 8011dca:	bd08      	pop	{r3, pc}
 8011dcc:	20000200 	.word	0x20000200
 8011dd0:	00000000 	.word	0x00000000

08011dd4 <sqrtf>:
 8011dd4:	b508      	push	{r3, lr}
 8011dd6:	ed2d 8b02 	vpush	{d8}
 8011dda:	eeb0 8a40 	vmov.f32	s16, s0
 8011dde:	f000 fa1b 	bl	8012218 <__ieee754_sqrtf>
 8011de2:	4b0d      	ldr	r3, [pc, #52]	; (8011e18 <sqrtf+0x44>)
 8011de4:	f993 3000 	ldrsb.w	r3, [r3]
 8011de8:	3301      	adds	r3, #1
 8011dea:	d011      	beq.n	8011e10 <sqrtf+0x3c>
 8011dec:	eeb4 8a48 	vcmp.f32	s16, s16
 8011df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df4:	d60c      	bvs.n	8011e10 <sqrtf+0x3c>
 8011df6:	eddf 8a09 	vldr	s17, [pc, #36]	; 8011e1c <sqrtf+0x48>
 8011dfa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e02:	d505      	bpl.n	8011e10 <sqrtf+0x3c>
 8011e04:	f7fb fdbc 	bl	800d980 <__errno>
 8011e08:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011e0c:	2321      	movs	r3, #33	; 0x21
 8011e0e:	6003      	str	r3, [r0, #0]
 8011e10:	ecbd 8b02 	vpop	{d8}
 8011e14:	bd08      	pop	{r3, pc}
 8011e16:	bf00      	nop
 8011e18:	20000200 	.word	0x20000200
 8011e1c:	00000000 	.word	0x00000000

08011e20 <__ieee754_exp>:
 8011e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e24:	ec55 4b10 	vmov	r4, r5, d0
 8011e28:	49b1      	ldr	r1, [pc, #708]	; (80120f0 <__ieee754_exp+0x2d0>)
 8011e2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e2e:	428b      	cmp	r3, r1
 8011e30:	ed2d 8b04 	vpush	{d8-d9}
 8011e34:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011e38:	d937      	bls.n	8011eaa <__ieee754_exp+0x8a>
 8011e3a:	49ae      	ldr	r1, [pc, #696]	; (80120f4 <__ieee754_exp+0x2d4>)
 8011e3c:	428b      	cmp	r3, r1
 8011e3e:	d916      	bls.n	8011e6e <__ieee754_exp+0x4e>
 8011e40:	ee10 3a10 	vmov	r3, s0
 8011e44:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	d009      	beq.n	8011e60 <__ieee754_exp+0x40>
 8011e4c:	ee10 2a10 	vmov	r2, s0
 8011e50:	462b      	mov	r3, r5
 8011e52:	4620      	mov	r0, r4
 8011e54:	4629      	mov	r1, r5
 8011e56:	f7ee fa41 	bl	80002dc <__adddf3>
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	460d      	mov	r5, r1
 8011e5e:	e000      	b.n	8011e62 <__ieee754_exp+0x42>
 8011e60:	bb06      	cbnz	r6, 8011ea4 <__ieee754_exp+0x84>
 8011e62:	ecbd 8b04 	vpop	{d8-d9}
 8011e66:	ec45 4b10 	vmov	d0, r4, r5
 8011e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6e:	a38a      	add	r3, pc, #552	; (adr r3, 8012098 <__ieee754_exp+0x278>)
 8011e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e74:	ee10 0a10 	vmov	r0, s0
 8011e78:	4629      	mov	r1, r5
 8011e7a:	f7ee fe75 	bl	8000b68 <__aeabi_dcmpgt>
 8011e7e:	b138      	cbz	r0, 8011e90 <__ieee754_exp+0x70>
 8011e80:	a387      	add	r3, pc, #540	; (adr r3, 80120a0 <__ieee754_exp+0x280>)
 8011e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e86:	4610      	mov	r0, r2
 8011e88:	4619      	mov	r1, r3
 8011e8a:	f7ee fbdd 	bl	8000648 <__aeabi_dmul>
 8011e8e:	e7e4      	b.n	8011e5a <__ieee754_exp+0x3a>
 8011e90:	a385      	add	r3, pc, #532	; (adr r3, 80120a8 <__ieee754_exp+0x288>)
 8011e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e96:	4620      	mov	r0, r4
 8011e98:	4629      	mov	r1, r5
 8011e9a:	f7ee fe47 	bl	8000b2c <__aeabi_dcmplt>
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	f000 8087 	beq.w	8011fb2 <__ieee754_exp+0x192>
 8011ea4:	2400      	movs	r4, #0
 8011ea6:	2500      	movs	r5, #0
 8011ea8:	e7db      	b.n	8011e62 <__ieee754_exp+0x42>
 8011eaa:	4a93      	ldr	r2, [pc, #588]	; (80120f8 <__ieee754_exp+0x2d8>)
 8011eac:	4293      	cmp	r3, r2
 8011eae:	f240 80ac 	bls.w	801200a <__ieee754_exp+0x1ea>
 8011eb2:	4a92      	ldr	r2, [pc, #584]	; (80120fc <__ieee754_exp+0x2dc>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d87c      	bhi.n	8011fb2 <__ieee754_exp+0x192>
 8011eb8:	4b91      	ldr	r3, [pc, #580]	; (8012100 <__ieee754_exp+0x2e0>)
 8011eba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec2:	ee10 0a10 	vmov	r0, s0
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	f7ee fa06 	bl	80002d8 <__aeabi_dsub>
 8011ecc:	4b8d      	ldr	r3, [pc, #564]	; (8012104 <__ieee754_exp+0x2e4>)
 8011ece:	00f7      	lsls	r7, r6, #3
 8011ed0:	443b      	add	r3, r7
 8011ed2:	ed93 7b00 	vldr	d7, [r3]
 8011ed6:	f1c6 0a01 	rsb	sl, r6, #1
 8011eda:	4680      	mov	r8, r0
 8011edc:	4689      	mov	r9, r1
 8011ede:	ebaa 0a06 	sub.w	sl, sl, r6
 8011ee2:	eeb0 8a47 	vmov.f32	s16, s14
 8011ee6:	eef0 8a67 	vmov.f32	s17, s15
 8011eea:	ec53 2b18 	vmov	r2, r3, d8
 8011eee:	4640      	mov	r0, r8
 8011ef0:	4649      	mov	r1, r9
 8011ef2:	f7ee f9f1 	bl	80002d8 <__aeabi_dsub>
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	460d      	mov	r5, r1
 8011efa:	4622      	mov	r2, r4
 8011efc:	462b      	mov	r3, r5
 8011efe:	4620      	mov	r0, r4
 8011f00:	4629      	mov	r1, r5
 8011f02:	f7ee fba1 	bl	8000648 <__aeabi_dmul>
 8011f06:	a36a      	add	r3, pc, #424	; (adr r3, 80120b0 <__ieee754_exp+0x290>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	4606      	mov	r6, r0
 8011f0e:	460f      	mov	r7, r1
 8011f10:	f7ee fb9a 	bl	8000648 <__aeabi_dmul>
 8011f14:	a368      	add	r3, pc, #416	; (adr r3, 80120b8 <__ieee754_exp+0x298>)
 8011f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1a:	f7ee f9dd 	bl	80002d8 <__aeabi_dsub>
 8011f1e:	4632      	mov	r2, r6
 8011f20:	463b      	mov	r3, r7
 8011f22:	f7ee fb91 	bl	8000648 <__aeabi_dmul>
 8011f26:	a366      	add	r3, pc, #408	; (adr r3, 80120c0 <__ieee754_exp+0x2a0>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	f7ee f9d6 	bl	80002dc <__adddf3>
 8011f30:	4632      	mov	r2, r6
 8011f32:	463b      	mov	r3, r7
 8011f34:	f7ee fb88 	bl	8000648 <__aeabi_dmul>
 8011f38:	a363      	add	r3, pc, #396	; (adr r3, 80120c8 <__ieee754_exp+0x2a8>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	f7ee f9cb 	bl	80002d8 <__aeabi_dsub>
 8011f42:	4632      	mov	r2, r6
 8011f44:	463b      	mov	r3, r7
 8011f46:	f7ee fb7f 	bl	8000648 <__aeabi_dmul>
 8011f4a:	a361      	add	r3, pc, #388	; (adr r3, 80120d0 <__ieee754_exp+0x2b0>)
 8011f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f50:	f7ee f9c4 	bl	80002dc <__adddf3>
 8011f54:	4632      	mov	r2, r6
 8011f56:	463b      	mov	r3, r7
 8011f58:	f7ee fb76 	bl	8000648 <__aeabi_dmul>
 8011f5c:	4602      	mov	r2, r0
 8011f5e:	460b      	mov	r3, r1
 8011f60:	4620      	mov	r0, r4
 8011f62:	4629      	mov	r1, r5
 8011f64:	f7ee f9b8 	bl	80002d8 <__aeabi_dsub>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	4606      	mov	r6, r0
 8011f6e:	460f      	mov	r7, r1
 8011f70:	4620      	mov	r0, r4
 8011f72:	4629      	mov	r1, r5
 8011f74:	f7ee fb68 	bl	8000648 <__aeabi_dmul>
 8011f78:	ec41 0b19 	vmov	d9, r0, r1
 8011f7c:	f1ba 0f00 	cmp.w	sl, #0
 8011f80:	d15d      	bne.n	801203e <__ieee754_exp+0x21e>
 8011f82:	2200      	movs	r2, #0
 8011f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f88:	4630      	mov	r0, r6
 8011f8a:	4639      	mov	r1, r7
 8011f8c:	f7ee f9a4 	bl	80002d8 <__aeabi_dsub>
 8011f90:	4602      	mov	r2, r0
 8011f92:	460b      	mov	r3, r1
 8011f94:	ec51 0b19 	vmov	r0, r1, d9
 8011f98:	f7ee fc80 	bl	800089c <__aeabi_ddiv>
 8011f9c:	4622      	mov	r2, r4
 8011f9e:	462b      	mov	r3, r5
 8011fa0:	f7ee f99a 	bl	80002d8 <__aeabi_dsub>
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	2000      	movs	r0, #0
 8011faa:	4957      	ldr	r1, [pc, #348]	; (8012108 <__ieee754_exp+0x2e8>)
 8011fac:	f7ee f994 	bl	80002d8 <__aeabi_dsub>
 8011fb0:	e753      	b.n	8011e5a <__ieee754_exp+0x3a>
 8011fb2:	4856      	ldr	r0, [pc, #344]	; (801210c <__ieee754_exp+0x2ec>)
 8011fb4:	a348      	add	r3, pc, #288	; (adr r3, 80120d8 <__ieee754_exp+0x2b8>)
 8011fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fba:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011fbe:	4629      	mov	r1, r5
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	f7ee fb41 	bl	8000648 <__aeabi_dmul>
 8011fc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011fca:	f7ee f987 	bl	80002dc <__adddf3>
 8011fce:	f7ee fdeb 	bl	8000ba8 <__aeabi_d2iz>
 8011fd2:	4682      	mov	sl, r0
 8011fd4:	f7ee face 	bl	8000574 <__aeabi_i2d>
 8011fd8:	a341      	add	r3, pc, #260	; (adr r3, 80120e0 <__ieee754_exp+0x2c0>)
 8011fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fde:	4606      	mov	r6, r0
 8011fe0:	460f      	mov	r7, r1
 8011fe2:	f7ee fb31 	bl	8000648 <__aeabi_dmul>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	460b      	mov	r3, r1
 8011fea:	4620      	mov	r0, r4
 8011fec:	4629      	mov	r1, r5
 8011fee:	f7ee f973 	bl	80002d8 <__aeabi_dsub>
 8011ff2:	a33d      	add	r3, pc, #244	; (adr r3, 80120e8 <__ieee754_exp+0x2c8>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	4680      	mov	r8, r0
 8011ffa:	4689      	mov	r9, r1
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	4639      	mov	r1, r7
 8012000:	f7ee fb22 	bl	8000648 <__aeabi_dmul>
 8012004:	ec41 0b18 	vmov	d8, r0, r1
 8012008:	e76f      	b.n	8011eea <__ieee754_exp+0xca>
 801200a:	4a41      	ldr	r2, [pc, #260]	; (8012110 <__ieee754_exp+0x2f0>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d811      	bhi.n	8012034 <__ieee754_exp+0x214>
 8012010:	a323      	add	r3, pc, #140	; (adr r3, 80120a0 <__ieee754_exp+0x280>)
 8012012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012016:	ee10 0a10 	vmov	r0, s0
 801201a:	4629      	mov	r1, r5
 801201c:	f7ee f95e 	bl	80002dc <__adddf3>
 8012020:	4b39      	ldr	r3, [pc, #228]	; (8012108 <__ieee754_exp+0x2e8>)
 8012022:	2200      	movs	r2, #0
 8012024:	f7ee fda0 	bl	8000b68 <__aeabi_dcmpgt>
 8012028:	b138      	cbz	r0, 801203a <__ieee754_exp+0x21a>
 801202a:	4b37      	ldr	r3, [pc, #220]	; (8012108 <__ieee754_exp+0x2e8>)
 801202c:	2200      	movs	r2, #0
 801202e:	4620      	mov	r0, r4
 8012030:	4629      	mov	r1, r5
 8012032:	e710      	b.n	8011e56 <__ieee754_exp+0x36>
 8012034:	f04f 0a00 	mov.w	sl, #0
 8012038:	e75f      	b.n	8011efa <__ieee754_exp+0xda>
 801203a:	4682      	mov	sl, r0
 801203c:	e75d      	b.n	8011efa <__ieee754_exp+0xda>
 801203e:	4632      	mov	r2, r6
 8012040:	463b      	mov	r3, r7
 8012042:	2000      	movs	r0, #0
 8012044:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012048:	f7ee f946 	bl	80002d8 <__aeabi_dsub>
 801204c:	4602      	mov	r2, r0
 801204e:	460b      	mov	r3, r1
 8012050:	ec51 0b19 	vmov	r0, r1, d9
 8012054:	f7ee fc22 	bl	800089c <__aeabi_ddiv>
 8012058:	4602      	mov	r2, r0
 801205a:	460b      	mov	r3, r1
 801205c:	ec51 0b18 	vmov	r0, r1, d8
 8012060:	f7ee f93a 	bl	80002d8 <__aeabi_dsub>
 8012064:	4642      	mov	r2, r8
 8012066:	464b      	mov	r3, r9
 8012068:	f7ee f936 	bl	80002d8 <__aeabi_dsub>
 801206c:	4602      	mov	r2, r0
 801206e:	460b      	mov	r3, r1
 8012070:	2000      	movs	r0, #0
 8012072:	4925      	ldr	r1, [pc, #148]	; (8012108 <__ieee754_exp+0x2e8>)
 8012074:	f7ee f930 	bl	80002d8 <__aeabi_dsub>
 8012078:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801207c:	4592      	cmp	sl, r2
 801207e:	db02      	blt.n	8012086 <__ieee754_exp+0x266>
 8012080:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012084:	e6e9      	b.n	8011e5a <__ieee754_exp+0x3a>
 8012086:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801208a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801208e:	2200      	movs	r2, #0
 8012090:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8012094:	e6f9      	b.n	8011e8a <__ieee754_exp+0x6a>
 8012096:	bf00      	nop
 8012098:	fefa39ef 	.word	0xfefa39ef
 801209c:	40862e42 	.word	0x40862e42
 80120a0:	8800759c 	.word	0x8800759c
 80120a4:	7e37e43c 	.word	0x7e37e43c
 80120a8:	d52d3051 	.word	0xd52d3051
 80120ac:	c0874910 	.word	0xc0874910
 80120b0:	72bea4d0 	.word	0x72bea4d0
 80120b4:	3e663769 	.word	0x3e663769
 80120b8:	c5d26bf1 	.word	0xc5d26bf1
 80120bc:	3ebbbd41 	.word	0x3ebbbd41
 80120c0:	af25de2c 	.word	0xaf25de2c
 80120c4:	3f11566a 	.word	0x3f11566a
 80120c8:	16bebd93 	.word	0x16bebd93
 80120cc:	3f66c16c 	.word	0x3f66c16c
 80120d0:	5555553e 	.word	0x5555553e
 80120d4:	3fc55555 	.word	0x3fc55555
 80120d8:	652b82fe 	.word	0x652b82fe
 80120dc:	3ff71547 	.word	0x3ff71547
 80120e0:	fee00000 	.word	0xfee00000
 80120e4:	3fe62e42 	.word	0x3fe62e42
 80120e8:	35793c76 	.word	0x35793c76
 80120ec:	3dea39ef 	.word	0x3dea39ef
 80120f0:	40862e41 	.word	0x40862e41
 80120f4:	7fefffff 	.word	0x7fefffff
 80120f8:	3fd62e42 	.word	0x3fd62e42
 80120fc:	3ff0a2b1 	.word	0x3ff0a2b1
 8012100:	08013840 	.word	0x08013840
 8012104:	08013850 	.word	0x08013850
 8012108:	3ff00000 	.word	0x3ff00000
 801210c:	08013830 	.word	0x08013830
 8012110:	3e2fffff 	.word	0x3e2fffff

08012114 <__ieee754_fmodf>:
 8012114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012116:	ee10 6a90 	vmov	r6, s1
 801211a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 801211e:	d009      	beq.n	8012134 <__ieee754_fmodf+0x20>
 8012120:	ee10 2a10 	vmov	r2, s0
 8012124:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012128:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801212c:	da02      	bge.n	8012134 <__ieee754_fmodf+0x20>
 801212e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012132:	dd04      	ble.n	801213e <__ieee754_fmodf+0x2a>
 8012134:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012138:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801213e:	42ab      	cmp	r3, r5
 8012140:	dbfc      	blt.n	801213c <__ieee754_fmodf+0x28>
 8012142:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8012146:	d106      	bne.n	8012156 <__ieee754_fmodf+0x42>
 8012148:	4a32      	ldr	r2, [pc, #200]	; (8012214 <__ieee754_fmodf+0x100>)
 801214a:	0fe3      	lsrs	r3, r4, #31
 801214c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012150:	ed93 0a00 	vldr	s0, [r3]
 8012154:	e7f2      	b.n	801213c <__ieee754_fmodf+0x28>
 8012156:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 801215a:	d13f      	bne.n	80121dc <__ieee754_fmodf+0xc8>
 801215c:	0219      	lsls	r1, r3, #8
 801215e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012162:	2900      	cmp	r1, #0
 8012164:	dc37      	bgt.n	80121d6 <__ieee754_fmodf+0xc2>
 8012166:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801216a:	d13d      	bne.n	80121e8 <__ieee754_fmodf+0xd4>
 801216c:	022f      	lsls	r7, r5, #8
 801216e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8012172:	2f00      	cmp	r7, #0
 8012174:	da35      	bge.n	80121e2 <__ieee754_fmodf+0xce>
 8012176:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801217a:	bfbb      	ittet	lt
 801217c:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012180:	1a12      	sublt	r2, r2, r0
 8012182:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8012186:	4093      	lsllt	r3, r2
 8012188:	bfa8      	it	ge
 801218a:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801218e:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012192:	bfb5      	itete	lt
 8012194:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012198:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 801219c:	1a52      	sublt	r2, r2, r1
 801219e:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80121a2:	bfb8      	it	lt
 80121a4:	4095      	lsllt	r5, r2
 80121a6:	1a40      	subs	r0, r0, r1
 80121a8:	1b5a      	subs	r2, r3, r5
 80121aa:	bb00      	cbnz	r0, 80121ee <__ieee754_fmodf+0xda>
 80121ac:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80121b0:	bf38      	it	cc
 80121b2:	4613      	movcc	r3, r2
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d0c7      	beq.n	8012148 <__ieee754_fmodf+0x34>
 80121b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80121bc:	db1f      	blt.n	80121fe <__ieee754_fmodf+0xea>
 80121be:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80121c2:	db1f      	blt.n	8012204 <__ieee754_fmodf+0xf0>
 80121c4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80121c8:	317f      	adds	r1, #127	; 0x7f
 80121ca:	4323      	orrs	r3, r4
 80121cc:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 80121d0:	ee00 3a10 	vmov	s0, r3
 80121d4:	e7b2      	b.n	801213c <__ieee754_fmodf+0x28>
 80121d6:	3801      	subs	r0, #1
 80121d8:	0049      	lsls	r1, r1, #1
 80121da:	e7c2      	b.n	8012162 <__ieee754_fmodf+0x4e>
 80121dc:	15d8      	asrs	r0, r3, #23
 80121de:	387f      	subs	r0, #127	; 0x7f
 80121e0:	e7c1      	b.n	8012166 <__ieee754_fmodf+0x52>
 80121e2:	3901      	subs	r1, #1
 80121e4:	007f      	lsls	r7, r7, #1
 80121e6:	e7c4      	b.n	8012172 <__ieee754_fmodf+0x5e>
 80121e8:	15e9      	asrs	r1, r5, #23
 80121ea:	397f      	subs	r1, #127	; 0x7f
 80121ec:	e7c3      	b.n	8012176 <__ieee754_fmodf+0x62>
 80121ee:	2a00      	cmp	r2, #0
 80121f0:	da02      	bge.n	80121f8 <__ieee754_fmodf+0xe4>
 80121f2:	005b      	lsls	r3, r3, #1
 80121f4:	3801      	subs	r0, #1
 80121f6:	e7d7      	b.n	80121a8 <__ieee754_fmodf+0x94>
 80121f8:	d0a6      	beq.n	8012148 <__ieee754_fmodf+0x34>
 80121fa:	0053      	lsls	r3, r2, #1
 80121fc:	e7fa      	b.n	80121f4 <__ieee754_fmodf+0xe0>
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	3901      	subs	r1, #1
 8012202:	e7d9      	b.n	80121b8 <__ieee754_fmodf+0xa4>
 8012204:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8012208:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 801220c:	3182      	adds	r1, #130	; 0x82
 801220e:	410b      	asrs	r3, r1
 8012210:	4323      	orrs	r3, r4
 8012212:	e7dd      	b.n	80121d0 <__ieee754_fmodf+0xbc>
 8012214:	08013860 	.word	0x08013860

08012218 <__ieee754_sqrtf>:
 8012218:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801221c:	4770      	bx	lr

0801221e <finite>:
 801221e:	b082      	sub	sp, #8
 8012220:	ed8d 0b00 	vstr	d0, [sp]
 8012224:	9801      	ldr	r0, [sp, #4]
 8012226:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801222a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801222e:	0fc0      	lsrs	r0, r0, #31
 8012230:	b002      	add	sp, #8
 8012232:	4770      	bx	lr

08012234 <_init>:
 8012234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012236:	bf00      	nop
 8012238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801223a:	bc08      	pop	{r3}
 801223c:	469e      	mov	lr, r3
 801223e:	4770      	bx	lr

08012240 <_fini>:
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	bf00      	nop
 8012244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012246:	bc08      	pop	{r3}
 8012248:	469e      	mov	lr, r3
 801224a:	4770      	bx	lr
